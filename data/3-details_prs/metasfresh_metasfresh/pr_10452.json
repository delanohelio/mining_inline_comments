{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjA4NTg5", "number": 10452, "title": "gh10448", "bodyText": "#10448", "createdAt": "2020-12-16T14:34:37Z", "url": "https://github.com/metasfresh/metasfresh/pull/10452", "merged": true, "mergeCommit": {"oid": "7a643a4014158428bbed7a83751e984316548e9d"}, "closed": true, "closedAt": "2020-12-21T15:14:15Z", "author": {"login": "adi-stefan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmq4uqAH2gAyNTQxMjA4NTg5Ojg1MWRkZjIzMjdjMTcwMjUxOWRjMTRlMWUzZWJlYTg4NjRkNmFmNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoXGqbAFqTU1NjQzMjkzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "851ddf2327c1702519dc14e1e3ebea8864d6af65", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/851ddf2327c1702519dc14e1e3ebea8864d6af65", "committedDate": "2020-12-16T08:44:20Z", "message": "#gh10448 WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a0293c2508fb6afd36affe2720b853cdca95cbe", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/7a0293c2508fb6afd36affe2720b853cdca95cbe", "committedDate": "2020-12-16T14:21:12Z", "message": "#gh10448 minor fixes and improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7793d1279c971933af411e922a8a78c65b72bd26", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/7793d1279c971933af411e922a8a78c65b72bd26", "committedDate": "2020-12-16T14:39:30Z", "message": "#gh10448 added SQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02919355c068c3465d34658d727aea44b34375af", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/02919355c068c3465d34658d727aea44b34375af", "committedDate": "2020-12-16T14:46:24Z", "message": "#gh10448 cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzIzMjQz", "url": "https://github.com/metasfresh/metasfresh/pull/10452#pullrequestreview-555323243", "createdAt": "2020-12-18T09:21:06Z", "commit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMTowN1rOIIa2oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowMzo0N1rOIIcliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY5OTQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped\")\n          \n          \n            \n            \t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped.\\nNote: what belongs to one invoice is determined by the respective business partner's aggregation rule.\")", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545699488", "createdAt": "2020-12-18T09:21:07Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/common/JsonInvoiceRule.java", "diffHunk": "@@ -26,12 +26,15 @@\n \n public enum JsonInvoiceRule\n {\n-\t@ApiEnum(\"Specifies that only *delivered* quanties will be invoiced\")\n+\t@ApiEnum(\"Specifies that only *delivered* quantities will be invoiced\")\n \tAfterDelivery,\n \n \t@ApiEnum(\"Like `AfterDelivery`, but the invoicing date is also set according to the respective bill partner's invoicing schedule (e.g. once per month)\")\n \tCustomerScheduleAfterDelivery,\n \n+\t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcwMTk3Ng==", "bodyText": "fine - order.getC_Payment_ID() be <=0 at this point", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545701976", "createdAt": "2020-12-18T09:23:53Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -300,7 +302,7 @@ private void linkInvoiceToPaymentIfNeeded(@NonNull final I_C_Invoice invoice)\n \t\tfinal I_C_Order order = invoice.getC_Order();\n \t\tif (paymentBL.canAllocateOrderPaymentToInvoice(order))\n \t\t{\n-\t\t\tfinal I_C_Payment payment = order.getC_Payment();\n+\t\t\tfinal I_C_Payment payment = paymentBL.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMjYwMQ==", "bodyText": "why remove this?", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545712601", "createdAt": "2020-12-18T09:36:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/InvoiceCandidate.java", "diffHunk": "@@ -307,15 +307,7 @@ private ToInvoiceExclOverride computeToInvoiceExclOverride()\n \t\tswitch (invoiceRule)\n \t\t{\n \t\t\tcase AfterDelivery:\n-\t\t\t\tif (product.isStocked())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxODg3OA==", "bodyText": "this is a very specific method..i think it would better belong into the InvoiceCandidateValidationCollector.\n(i'm assuming it's used only there)", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545718878", "createdAt": "2020-12-18T09:47:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -2315,4 +2353,32 @@ else if (result.getInvoiceCount() > 1)\n \t\treturn new GetInvoiceCandidatesAmtSelectionSummaryCommand(extraWhereClause).execute();\n \t}\n \n+\t/**\n+\t * Tests whether it makes sense to update associated records for a given {@link I_C_Invoice_Candidate}\n+\t * That's currently the case if:\n+\t * <ul>\n+\t *     <li>{@link I_C_Invoice_Candidate#getInvoiceRule()}  return {@link InvoiceRule#OrderCompletelyDelivered}</li>\n+\t *     <li>{@link I_C_Invoice_Candidate#getDateToInvoice()} is not null and not{@link Env#MAX_DATE}</li>\n+\t * </ul>\n+\t *\n+\t * @param icRecord\n+\t * @return\n+\t */\n+\tpublic boolean isCandidateForRecalculate(final I_C_Invoice_Candidate icRecord)\n+\t{\n+\t\tfinal InvoiceRule invoiceRule = getInvoiceRule(icRecord);\n+\t\tfinal Timestamp dateToInvoice = icRecord.getDateToInvoice();\n+\t\treturn InvoiceRule.OrderCompletelyDelivered.equals(invoiceRule) && dateToInvoice != null && dateToInvoice.before(Env.MAX_DATE);\n+\t}\n+\n+\tpublic Collection<I_C_Invoice_Candidate> getRefreshedAssociatedInvoiceCandidates(final Iterator<I_C_Invoice_Candidate> candidates, final Collection<Integer> processedRecords)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxOTM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param icRecord\n          \n          \n            \n            \t * @return\n          \n      \n    \n    \n  \n\nuseless javadoc", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545719395", "createdAt": "2020-12-18T09:48:34Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -2315,4 +2353,32 @@ else if (result.getInvoiceCount() > 1)\n \t\treturn new GetInvoiceCandidatesAmtSelectionSummaryCommand(extraWhereClause).execute();\n \t}\n \n+\t/**\n+\t * Tests whether it makes sense to update associated records for a given {@link I_C_Invoice_Candidate}\n+\t * That's currently the case if:\n+\t * <ul>\n+\t *     <li>{@link I_C_Invoice_Candidate#getInvoiceRule()}  return {@link InvoiceRule#OrderCompletelyDelivered}</li>\n+\t *     <li>{@link I_C_Invoice_Candidate#getDateToInvoice()} is not null and not{@link Env#MAX_DATE}</li>\n+\t * </ul>\n+\t *\n+\t * @param icRecord\n+\t * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTE5NA==", "bodyText": "I think we need a change here to avoid big performance penalties.\nwe generally have caching-support (de.metas.cache.CCache)...you  could make a cache<String, List<I_C_Invoice_Candidate>> for the duration of the update run.\nI think you can assume that there are not \"too many\" ICs with he same HeaderAggregationKey. (note that you need to invalidate when I_C_Invoice_Candidate.HeaderAggregationKey is updated)\nPlease research / consult with collegues/teo/me on this.", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545725194", "createdAt": "2020-12-18T09:58:29Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -276,6 +292,28 @@ private Timestamp computeDateToInvoice(@NonNull final I_C_Invoice_Candidate icRe\n \t\t}\n \t}\n \n+\tprivate boolean isAllCandidatesInGroupDelivered(final @NonNull I_C_Invoice_Candidate ic)\n+\t{\n+\t\tfinal IInvoiceCandDAO invoiceCandDAO = Services.get(IInvoiceCandDAO.class);\n+\t\tfinal Iterator<I_C_Invoice_Candidate> candidates = invoiceCandDAO.retrieveForHeaderAggregationKey(getCtx(ic), ic.getHeaderAggregationKey(), getTrxName(ic));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (!Check.isEmpty(bpartner.getInvoiceRule()))\n          \n          \n            \n            \t\tif (bpartner.getInvoiceRule() != null)\n          \n      \n    \n    \n  \n\ni know we do have that method, but as the Invoicerule can be just null or nut-null (unlike a String or List), i think the code is clearer like this", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545727881", "createdAt": "2020-12-18T10:03:47Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/bpartner/composite/repository/BPartnerCompositeSaver.java", "diffHunk": "@@ -159,9 +156,13 @@ private void saveBPartner(@NonNull final BPartner bpartner, @Nullable final OrgI\n \n \t\tbpartnerRecord.setIsVendor(bpartner.isVendor());\n \t\tbpartnerRecord.setIsCustomer(bpartner.isCustomer());\n-\t\t\n+\t\tif (!Check.isEmpty(bpartner.getInvoiceRule()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1247dfceab79125b33a5253e28ab489e93864b3c", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/1247dfceab79125b33a5253e28ab489e93864b3c", "committedDate": "2020-12-18T10:16:08Z", "message": "Update backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/common/JsonInvoiceRule.java\n\nCo-authored-by: Tobias Sch\u00f6neberg <metas-ts@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b0fb580f0953aa2667fbf33a14d58af61a38610", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/1b0fb580f0953aa2667fbf33a14d58af61a38610", "committedDate": "2020-12-18T10:16:16Z", "message": "Update backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java\n\nCo-authored-by: Tobias Sch\u00f6neberg <metas-ts@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c472edf89692954c610c5f920eceedcf03c2c99", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/6c472edf89692954c610c5f920eceedcf03c2c99", "committedDate": "2020-12-18T10:19:56Z", "message": "Update backend/de.metas.business/src/main/java/de/metas/bpartner/composite/repository/BPartnerCompositeSaver.java\n\nCo-authored-by: Tobias Sch\u00f6neberg <metas-ts@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44455d46d37f935d6e27f89f4cc1658f53a2bb71", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/44455d46d37f935d6e27f89f4cc1658f53a2bb71", "committedDate": "2020-12-21T06:08:37Z", "message": "annotate InvoiceCandDAO, please check if it works out\n\nalso minor improvements in CacheInterceptor, CacheModel, CacheModelId, CacheReloadIfTrue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1905df4d3c912bfe0d96bb33aeb3c7f147d9806d", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1905df4d3c912bfe0d96bb33aeb3c7f147d9806d", "committedDate": "2020-12-21T07:17:45Z", "message": "add a specialized cache for this occasion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f963d1259be20db4e04dd8962a0c74a807a4f3f6", "author": {"user": {"login": "adi-stefan", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/f963d1259be20db4e04dd8962a0c74a807a4f3f6", "committedDate": "2020-12-21T14:45:15Z", "message": "gh10448: cleanup/code readability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDMyOTM5", "url": "https://github.com/metasfresh/metasfresh/pull/10452#pullrequestreview-556432939", "createdAt": "2020-12-21T14:49:18Z", "commit": {"oid": "f963d1259be20db4e04dd8962a0c74a807a4f3f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}