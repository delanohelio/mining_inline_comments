{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NjAzMjgw", "number": 7068, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzozMDowMVrOEUmyCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMDowOFrOEU4ULg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDQyMzc2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.util/src/main/java/org/adempiere/util/lang/ExtendedMemorizingSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzozMDowMVrOG65kfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToxMTo0NlrOG7RVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxMzgyMg==", "bodyText": "yes it can, null is supported.\npls delete it and replace it with @Nullable.", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464413822", "createdAt": "2020-08-03T13:30:01Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.util/src/main/java/org/adempiere/util/lang/ExtendedMemorizingSupplier.java", "diffHunk": "@@ -48,13 +49,15 @@\n \t// on volatile read of \"initialized\".\n \t// metas-ts: Setting it to be volatile none the less, because we somehow managed to get an NPE with a delegate supplier that could not have returned null.\n \t// See https://github.com/metasfresh/metasfresh/issues/4985\n+\t@Nullable\n \tprivate transient volatile T value;\n \n \tprivate ExtendedMemorizingSupplier(final java.util.function.Supplier<T> delegate)\n \t{\n \t\tthis.delegate = delegate;\n \t}\n \n+\t@SuppressWarnings(\"ConstantConditions\") // TODO not sure if this is NonNull or Nullable. Can the supplier return null?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a1846e7f11797257acdc38d936b85d3b60e682e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMzE1OQ==", "bodyText": "thx for clarifying. Done", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464803159", "createdAt": "2020-08-04T05:11:46Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.util/src/main/java/org/adempiere/util/lang/ExtendedMemorizingSupplier.java", "diffHunk": "@@ -48,13 +49,15 @@\n \t// on volatile read of \"initialized\".\n \t// metas-ts: Setting it to be volatile none the less, because we somehow managed to get an NPE with a delegate supplier that could not have returned null.\n \t// See https://github.com/metasfresh/metasfresh/issues/4985\n+\t@Nullable\n \tprivate transient volatile T value;\n \n \tprivate ExtendedMemorizingSupplier(final java.util.function.Supplier<T> delegate)\n \t{\n \t\tthis.delegate = delegate;\n \t}\n \n+\t@SuppressWarnings(\"ConstantConditions\") // TODO not sure if this is NonNull or Nullable. Can the supplier return null?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxMzgyMg=="}, "originalCommit": {"oid": "2a1846e7f11797257acdc38d936b85d3b60e682e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDUwMjA3OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/OrderCandidateViewHeaderPropertiesProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzo1MDozNFrOG66Uag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToxMjozNlrOG7RWIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyNjA5MA==", "bodyText": "InvoiceCandidate...", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464426090", "createdAt": "2020-08-03T13:50:34Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/OrderCandidateViewHeaderPropertiesProvider.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.view;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.invoicecandidate.ui.spi.impl.HUInvoiceCandidatesSelectionSummaryInfo;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.invoicecandidate.api.IInvoiceCandBL;\n+import de.metas.invoicecandidate.api.impl.InvoiceCandidatesAmtSelectionSummary;\n+import de.metas.invoicecandidate.model.I_C_Invoice_Candidate;\n+import de.metas.ui.web.view.descriptor.SqlAndParams;\n+import de.metas.ui.web.view.descriptor.SqlViewRowsWhereClause;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.ui.web.window.model.sql.SqlOptions;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+@Component\n+public class OrderCandidateViewHeaderPropertiesProvider implements ViewHeaderPropertiesProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a1846e7f11797257acdc38d936b85d3b60e682e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMzM2Mw==", "bodyText": "You already fixed this. \ud83d\udc4d", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464803363", "createdAt": "2020-08-04T05:12:36Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/OrderCandidateViewHeaderPropertiesProvider.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.view;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.invoicecandidate.ui.spi.impl.HUInvoiceCandidatesSelectionSummaryInfo;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.invoicecandidate.api.IInvoiceCandBL;\n+import de.metas.invoicecandidate.api.impl.InvoiceCandidatesAmtSelectionSummary;\n+import de.metas.invoicecandidate.model.I_C_Invoice_Candidate;\n+import de.metas.ui.web.view.descriptor.SqlAndParams;\n+import de.metas.ui.web.view.descriptor.SqlViewRowsWhereClause;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.ui.web.window.model.sql.SqlOptions;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+@Component\n+public class OrderCandidateViewHeaderPropertiesProvider implements ViewHeaderPropertiesProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyNjA5MA=="}, "originalCommit": {"oid": "2a1846e7f11797257acdc38d936b85d3b60e682e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzI5NjQ2OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/app/RawModal.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMDowOFrOG7UevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozNzo0N1rOG7Utvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDcxNg==", "bodyText": "@siemiatj  in case of raw modals,\nwhy not  adding a group separator (e.g. <span key={${idx}_${cursor}} className=\"separator\" />) after each group?", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464854716", "createdAt": "2020-08-04T07:30:08Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -357,12 +361,14 @@ class RawModal extends Component {\n               </span>\n               {!!rawModal.headerProperties && (\n                 <div className=\"optional\">\n-                  {rawModal.headerProperties.entries.map((entry, idx) => (\n-                    <span key={idx} className=\"optional-name\">\n-                      <p className=\"caption\">{entry.caption}:</p>{' '}\n-                      <p className=\"value\">{entry.value}</p>\n-                    </span>\n-                  ))}\n+                  {rawModal.headerProperties.groups.map((group, idx) =>\n+                    group.entries.map((entry, idy) => (\n+                      <span key={`${idx}_${idy}`} className=\"optional-name\">\n+                        <p className=\"caption\">{entry.caption}:</p>{' '}\n+                        <p className=\"value\">{entry.value}</p>\n+                      </span>\n+                    ))\n+                  )}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93f0919c3f3a53511d2108f1d748c63dd10cad0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1ODU1OQ==", "bodyText": "Because it'll look stupid if there's a separator dangling at the end without anything following.", "url": "https://github.com/metasfresh/metasfresh/pull/7068#discussion_r464858559", "createdAt": "2020-08-04T07:37:47Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -357,12 +361,14 @@ class RawModal extends Component {\n               </span>\n               {!!rawModal.headerProperties && (\n                 <div className=\"optional\">\n-                  {rawModal.headerProperties.entries.map((entry, idx) => (\n-                    <span key={idx} className=\"optional-name\">\n-                      <p className=\"caption\">{entry.caption}:</p>{' '}\n-                      <p className=\"value\">{entry.value}</p>\n-                    </span>\n-                  ))}\n+                  {rawModal.headerProperties.groups.map((group, idx) =>\n+                    group.entries.map((entry, idy) => (\n+                      <span key={`${idx}_${idy}`} className=\"optional-name\">\n+                        <p className=\"caption\">{entry.caption}:</p>{' '}\n+                        <p className=\"value\">{entry.value}</p>\n+                      </span>\n+                    ))\n+                  )}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDcxNg=="}, "originalCommit": {"oid": "e93f0919c3f3a53511d2108f1d748c63dd10cad0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1336, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}