{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODkzMDA5", "number": 6089, "title": "Bank Statement Import directly in Bank Statement window", "bodyText": "#6061", "createdAt": "2020-01-28T08:52:00Z", "url": "https://github.com/metasfresh/metasfresh/pull/6089", "merged": true, "mergeCommit": {"oid": "6816892b45082f378d219bcfe9611916bd67214b"}, "closed": true, "closedAt": "2020-02-05T12:18:05Z", "author": {"login": "TheBestPessimist"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_UUdCABqjI5OTIwOTgwMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBR4S-gH2gAyMzY3ODkzMDA5OjM0ZjI3YzJmMTVmOTg1YTdlOTA2N2Y5ZDRhMmRlMDk0OGI2ZmNkMGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d20f95449b626f110b710492bb03665579477fc6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/d20f95449b626f110b710492bb03665579477fc6", "committedDate": "2020-01-28T05:52:57Z", "message": "Make all parameters of `C_BankStatement_AllocateInvoices` optional\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}, "afterCommit": {"oid": "56b2f22b92f6d7c4b4150c9c531f34ec360e61e8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/56b2f22b92f6d7c4b4150c9c531f34ec360e61e8", "committedDate": "2020-01-30T06:12:05Z", "message": "Add process `C_BankStatement_AddBpartnerAndPayment`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56b2f22b92f6d7c4b4150c9c531f34ec360e61e8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/56b2f22b92f6d7c4b4150c9c531f34ec360e61e8", "committedDate": "2020-01-30T06:12:05Z", "message": "Add process `C_BankStatement_AddBpartnerAndPayment`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}, "afterCommit": {"oid": "6d77a37be68eefe3a0c95f42a35050c3c9fa6714", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/6d77a37be68eefe3a0c95f42a35050c3c9fa6714", "committedDate": "2020-01-30T06:13:08Z", "message": "Add process `C_BankStatement_AddBpartnerAndPayment`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjI4MTI0", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-350628124", "createdAt": "2020-01-30T07:44:15Z", "commit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo0NDoxNVrOFjhwYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo0NDoxNVrOFjhwYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5NzUzOQ==", "bodyText": "this check is kind of futile", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r372797539", "createdAt": "2020-01-30T07:44:15Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/service/impl/BankStatementBL.java", "diffHunk": "@@ -97,16 +111,133 @@ public void handleAfterComplete(final I_C_BankStatement bankStatement)\n \t\t{\n \t\t\tfinal I_C_BankStatementLine line = InterfaceWrapperHelper.create(linePO, I_C_BankStatementLine.class);\n \n-\t\t\tif (line.isMultiplePaymentOrInvoice() && line.isMultiplePayment())\n+\t\t\tfindOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(line);\n+\t\t\treconcilePaymentsFromBankStatementLine_Ref(bankStatementDAO, line);\n+\t\t}\n+\t}\n+\n+\t@VisibleForTesting\n+\tvoid findOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(final I_C_BankStatementLine line)\n+\t{\n+\t\tfindAndLinkPaymentToBankStatementLineIfPossible(line);\n+\n+\t\tsetOrCreateAndLinkPaymentToBankStatementLine(line, null);\n+\t}\n+\n+\t@Override\n+\tpublic Optional<PaymentId> setOrCreateAndLinkPaymentToBankStatementLine(@NonNull final I_C_BankStatementLine line, @Nullable final PaymentId paymentIdToSet)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn Optional.of(PaymentId.ofRepoId(line.getC_Payment_ID()));\n+\t\t}\n+\n+\t\tif (paymentIdToSet != null)\n+\t\t{\n+\t\t\tline.setC_Payment_ID(paymentIdToSet.getRepoId());\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t\treturn Optional.of(paymentIdToSet);\n+\t\t}\n+\n+\t\tif (line.getC_BPartner_ID() <= 0)\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(line.getC_Currency_ID());\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(line.getC_BPartner_ID());\n+\t\tfinal OrgId orgId = OrgId.ofRepoId(line.getAD_Org_ID());\n+\t\tfinal LocalDate statementLineDate = TimeUtil.asLocalDate(line.getStatementLineDate());\n+\n+\t\tfinal Optional<BankAccountId> bankAccountIdOptional = Services.get(IBPBankAccountDAO.class).retrieveFirstIdByBPartnerAndCurrency(bpartnerId, currencyId);\n+\t\tif (!bankAccountIdOptional.isPresent())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal payAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal PaymentId createdPaymentId = createAndCompletePayment(bankAccountIdOptional.get(), statementLineDate, payAmount, isReceipt, orgId, bpartnerId, currencyId);\n+\t\tline.setC_Payment_ID(createdPaymentId.getRepoId());\n+\t\tInterfaceWrapperHelper.save(line);\n+\t\treturn Optional.of(createdPaymentId);\n+\t}\n+\n+\tprivate void findAndLinkPaymentToBankStatementLineIfPossible(final I_C_BankStatementLine line)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal expectedPaymentAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal ImmutableSet<PaymentId> possiblePayments = Services.get(IPaymentDAO.class).retrieveAllMatchingPayments(isReceipt, expectedPaymentAmount, CurrencyId.ofRepoId(line.getC_Currency_ID()), BPartnerId.ofRepoId(line.getC_BPartner_ID()));\n+\n+\t\t// don't create a new Payment and don't link any of the payments.\n+\t\t// the user must fix this case manually\n+\t\tif (possiblePayments.size() > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjI4NDM3", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-350628437", "createdAt": "2020-01-30T07:44:58Z", "commit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo0NDo1OFrOFjhxPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo0NDo1OFrOFjhxPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5Nzc1Nw==", "bodyText": "extract the IPaymentBL at least to a local variable", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r372797757", "createdAt": "2020-01-30T07:44:58Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/service/impl/BankStatementBL.java", "diffHunk": "@@ -97,16 +111,133 @@ public void handleAfterComplete(final I_C_BankStatement bankStatement)\n \t\t{\n \t\t\tfinal I_C_BankStatementLine line = InterfaceWrapperHelper.create(linePO, I_C_BankStatementLine.class);\n \n-\t\t\tif (line.isMultiplePaymentOrInvoice() && line.isMultiplePayment())\n+\t\t\tfindOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(line);\n+\t\t\treconcilePaymentsFromBankStatementLine_Ref(bankStatementDAO, line);\n+\t\t}\n+\t}\n+\n+\t@VisibleForTesting\n+\tvoid findOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(final I_C_BankStatementLine line)\n+\t{\n+\t\tfindAndLinkPaymentToBankStatementLineIfPossible(line);\n+\n+\t\tsetOrCreateAndLinkPaymentToBankStatementLine(line, null);\n+\t}\n+\n+\t@Override\n+\tpublic Optional<PaymentId> setOrCreateAndLinkPaymentToBankStatementLine(@NonNull final I_C_BankStatementLine line, @Nullable final PaymentId paymentIdToSet)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn Optional.of(PaymentId.ofRepoId(line.getC_Payment_ID()));\n+\t\t}\n+\n+\t\tif (paymentIdToSet != null)\n+\t\t{\n+\t\t\tline.setC_Payment_ID(paymentIdToSet.getRepoId());\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t\treturn Optional.of(paymentIdToSet);\n+\t\t}\n+\n+\t\tif (line.getC_BPartner_ID() <= 0)\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(line.getC_Currency_ID());\n+\t\tfinal BPartnerId bpartnerId = BPartnerId.ofRepoId(line.getC_BPartner_ID());\n+\t\tfinal OrgId orgId = OrgId.ofRepoId(line.getAD_Org_ID());\n+\t\tfinal LocalDate statementLineDate = TimeUtil.asLocalDate(line.getStatementLineDate());\n+\n+\t\tfinal Optional<BankAccountId> bankAccountIdOptional = Services.get(IBPBankAccountDAO.class).retrieveFirstIdByBPartnerAndCurrency(bpartnerId, currencyId);\n+\t\tif (!bankAccountIdOptional.isPresent())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal payAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal PaymentId createdPaymentId = createAndCompletePayment(bankAccountIdOptional.get(), statementLineDate, payAmount, isReceipt, orgId, bpartnerId, currencyId);\n+\t\tline.setC_Payment_ID(createdPaymentId.getRepoId());\n+\t\tInterfaceWrapperHelper.save(line);\n+\t\treturn Optional.of(createdPaymentId);\n+\t}\n+\n+\tprivate void findAndLinkPaymentToBankStatementLineIfPossible(final I_C_BankStatementLine line)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal expectedPaymentAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal ImmutableSet<PaymentId> possiblePayments = Services.get(IPaymentDAO.class).retrieveAllMatchingPayments(isReceipt, expectedPaymentAmount, CurrencyId.ofRepoId(line.getC_Currency_ID()), BPartnerId.ofRepoId(line.getC_BPartner_ID()));\n+\n+\t\t// don't create a new Payment and don't link any of the payments.\n+\t\t// the user must fix this case manually\n+\t\tif (possiblePayments.size() > 1)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (possiblePayments.size() == 1)\n+\t\t{\n+\t\t\tline.setC_Payment_ID(possiblePayments.iterator().next().getRepoId());\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t}\n+\t}\n+\n+\tprivate PaymentId createAndCompletePayment(\n+\t\t\t@NonNull final BankAccountId bankAccountId,\n+\t\t\t@NonNull final LocalDate dateAcct,\n+\t\t\t@NonNull final BigDecimal payAmt,\n+\t\t\tfinal boolean isReceipt,\n+\t\t\t@NonNull final OrgId adOrgId,\n+\t\t\t@NonNull final BPartnerId bpartnerId,\n+\t\t\t@NonNull final CurrencyId currencyId)\n+\t{\n+\t\tfinal DefaultPaymentBuilder paymentBuilder;\n+\n+\t\tif (isReceipt)\n+\t\t{\n+\t\t\tpaymentBuilder = Services.get(IPaymentBL.class).newInboundReceiptBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjMxMjIy", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-350631222", "createdAt": "2020-01-30T07:51:50Z", "commit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo1MTo1MFrOFjh58A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo1MTo1MFrOFjh58A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5OTk4NA==", "bodyText": "use Money instead of BigDecimal paymentAmount  and CurrencyId currencyId,", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r372799984", "createdAt": "2020-01-30T07:51:50Z", "author": {"login": "teosarca"}, "path": "de.metas.business/src/main/java/de/metas/payment/api/IPaymentDAO.java", "diffHunk": "@@ -113,4 +99,6 @@\n \t * Updates the discount and the payment based on DateTrx and the payment term policy.\n \t */\n \tvoid updateDiscountAndPayment(I_C_Payment payment, int c_Invoice_ID, I_C_DocType c_DocType);\n+\n+\tImmutableSet<PaymentId> retrieveAllMatchingPayments(boolean isReceipt, @NonNull BigDecimal paymentAmount, @NonNull CurrencyId currencyId, @NonNull BPartnerId bPartnerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjMxNDU2", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-350631456", "createdAt": "2020-01-30T07:52:22Z", "commit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo1MjoyMlrOFjh6pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzo1MjoyMlrOFjh6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwMDE2Ng==", "bodyText": "again, use  Money", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r372800166", "createdAt": "2020-01-30T07:52:22Z", "author": {"login": "teosarca"}, "path": "de.metas.business/src/main/java/de/metas/payment/api/impl/AbstractPaymentDAO.java", "diffHunk": "@@ -217,4 +219,20 @@ public BigDecimal getInvoiceOpenAmount(I_C_Payment payment, final boolean credit\n \t */\n \t@Override\n \tpublic abstract void updateDiscountAndPayment(I_C_Payment payment, int c_Invoice_ID, I_C_DocType c_DocType);\n+\n+\t@Override\n+\tpublic ImmutableSet<PaymentId> retrieveAllMatchingPayments(final boolean isReceipt, @NonNull final BigDecimal paymentAmount, @NonNull final CurrencyId currencyId, @NonNull final BPartnerId bPartnerId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjM1MTIw", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-350635120", "createdAt": "2020-01-30T08:00:49Z", "commit": {"oid": "8e483c8455e73d08ebd4f2cb513890451b55d94f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1fc3d2896a944c3ec9448c57de0c27f79e86982", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b1fc3d2896a944c3ec9448c57de0c27f79e86982", "committedDate": "2020-01-30T12:16:15Z", "message": "Add process C_BankStatementLine_AllocatePayment\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}, "afterCommit": {"oid": "f216bb1eda9f478ec0a057f33addff701842eb3b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f216bb1eda9f478ec0a057f33addff701842eb3b", "committedDate": "2020-01-30T12:34:25Z", "message": "Add process C_BankStatementLine_AllocatePayment\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ebecc63cb47a5a2d7a7e10136a377b0bab2e63d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7ebecc63cb47a5a2d7a7e10136a377b0bab2e63d", "committedDate": "2020-02-03T06:33:29Z", "message": "Remove legacy fields from Import Bank Statement window\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e1a3c5421ed738aba7a9495475978d56ef323a4", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4e1a3c5421ed738aba7a9495475978d56ef323a4", "committedDate": "2020-02-03T06:33:30Z", "message": "Fix for LogicExpression \"0\" != \"0.00\"\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4268b9536b0a5a57b3d151a162078be52a9c8c4", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b4268b9536b0a5a57b3d151a162078be52a9c8c4", "committedDate": "2020-02-03T06:33:30Z", "message": "Add column `C_BankStatementLine.ImportedBillPartnerName`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2414d02a11331d1d2bb96188b1dc6fdac05a0fd", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c2414d02a11331d1d2bb96188b1dc6fdac05a0fd", "committedDate": "2020-02-03T06:33:30Z", "message": "Update field C_BankStatementLine.ImportedBillPartnerName when running BankStatementImportProcess\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9f7d6c755622bfe8909ac9db1242c695464864", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9a9f7d6c755622bfe8909ac9db1242c695464864", "committedDate": "2020-02-03T06:33:30Z", "message": "Annotations, etc.\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e892c1c2e48c284bf2573a31fc13c0c260f07dc", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3e892c1c2e48c284bf2573a31fc13c0c260f07dc", "committedDate": "2020-02-03T06:33:30Z", "message": "Mark PO-using method as deprecated and add RepoId alternative\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4895578bf22952ad78f2f778e4826d684efe3d3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a4895578bf22952ad78f2f778e4826d684efe3d3", "committedDate": "2020-02-03T06:33:30Z", "message": "Add first draft of C_BankStatement_AllocateInvoice process and sql\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37915652870c9fec378121923aa486b69466be08", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/37915652870c9fec378121923aa486b69466be08", "committedDate": "2020-02-03T06:33:30Z", "message": "Add trl for Payment DocType\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cdcb68940080c86d087fc5c55ff89990fe7a52b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0cdcb68940080c86d087fc5c55ff89990fe7a52b", "committedDate": "2020-02-03T06:33:30Z", "message": "Add BankStatementId RepoIdAware\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69913f2177ad9932f167d7d91c0ee143607a930b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/69913f2177ad9932f167d7d91c0ee143607a930b", "committedDate": "2020-02-03T06:33:30Z", "message": "Add first test draft; refactor methods for easier testing\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846570b14d08607fc7126b19919c71bedd1c7411", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/846570b14d08607fc7126b19919c71bedd1c7411", "committedDate": "2020-02-03T06:33:30Z", "message": "Make all parameters of `C_BankStatement_AllocateInvoices` optional\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57ef71635034a61b59ad8112142e4f5c7170c9d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c57ef71635034a61b59ad8112142e4f5c7170c9d", "committedDate": "2020-02-03T06:33:30Z", "message": "Add field C_BankStatementLine.ImportedBillPartnerIBAN\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca4053ddbc94858281277be9d4eaddc0a53de877", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ca4053ddbc94858281277be9d4eaddc0a53de877", "committedDate": "2020-02-03T06:33:30Z", "message": "Add and remove fields from  C_BankStatementLine webui\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df9540f4f7745b8c99af4626795e6d397d64568", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9df9540f4f7745b8c99af4626795e6d397d64568", "committedDate": "2020-02-03T06:33:30Z", "message": "Save `ImportedBillPartnerIBAN` to BankStatementLine during import process\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581d771176af714507484b97dcc11ed6fa11b9c4", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/581d771176af714507484b97dcc11ed6fa11b9c4", "committedDate": "2020-02-03T06:33:30Z", "message": "Link/Create Payments onComplete of BankStatement\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7002738082b11a7459dbb9e0c05a8367054ee179", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7002738082b11a7459dbb9e0c05a8367054ee179", "committedDate": "2020-02-03T06:33:31Z", "message": "Add nullability annotations\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01797b09e0dbd38156da100ef9beecd4178e4673", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/01797b09e0dbd38156da100ef9beecd4178e4673", "committedDate": "2020-02-03T06:33:31Z", "message": "Handle the case where multiple payments might exist\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff61184bd050b749d1611c4d1db9e6f5d5ca232", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8ff61184bd050b749d1611c4d1db9e6f5d5ca232", "committedDate": "2020-02-03T06:33:31Z", "message": "Retrieve BankAccount by Bpartner and Currency\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db479283126713e544b7c9c5478a38803259ff7", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/6db479283126713e544b7c9c5478a38803259ff7", "committedDate": "2020-02-03T06:33:31Z", "message": "Refactor method name\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cffbb36ffbdf864241d56c1bab95cbb7fa8db7e", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3cffbb36ffbdf864241d56c1bab95cbb7fa8db7e", "committedDate": "2020-02-03T06:33:31Z", "message": "Add test depenency `de.metas.business` to `de.metas.banking`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06cb13d0d7f336b949fa87ea0900bee7cd283fef", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/06cb13d0d7f336b949fa87ea0900bee7cd283fef", "committedDate": "2020-02-03T06:33:31Z", "message": "Add test for BankStatement completion\n\nRefactor classes around\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0e49d4627df0b3e82b4dd585fc0fedad5c7fb90", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/d0e49d4627df0b3e82b4dd585fc0fedad5c7fb90", "committedDate": "2020-02-03T06:33:31Z", "message": "Add process `C_BankStatement_AddBpartnerAndPayment`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b076ae8f207f00af33129d5aac4fadca44dd55e8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b076ae8f207f00af33129d5aac4fadca44dd55e8", "committedDate": "2020-02-03T06:33:31Z", "message": "Attempt #1 to fix pom.\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27305330c3e30bbe7be815d4c7afbf923702c8db", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/27305330c3e30bbe7be815d4c7afbf923702c8db", "committedDate": "2020-02-03T06:33:31Z", "message": "Better handle the case where multiple Payments for the same BankStatementLine exist\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff53181b53a1431cdba03caf038a9f18ee0d48d7", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ff53181b53a1431cdba03caf038a9f18ee0d48d7", "committedDate": "2020-02-03T06:33:31Z", "message": "Extract duplicate code to variable\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0d143bb70112da5b29fd50cc48a3b9ca2a69d8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8a0d143bb70112da5b29fd50cc48a3b9ca2a69d8", "committedDate": "2020-02-03T06:33:31Z", "message": "Refactor: Use Money instead of BigDecimal/Currency pair\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0926b820fc7f10ac7522026d1fbfe0cefdeaf0ef", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0926b820fc7f10ac7522026d1fbfe0cefdeaf0ef", "committedDate": "2020-02-03T06:33:31Z", "message": "nullcheck\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62039a49f563310309bba9e2f8c367e4a4d5536d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/62039a49f563310309bba9e2f8c367e4a4d5536d", "committedDate": "2020-02-03T06:33:31Z", "message": "Add process C_BankStatementLine_AllocatePayment\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7383e999dcccd8f95a591f14f81ff36590876c94", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7383e999dcccd8f95a591f14f81ff36590876c94", "committedDate": "2020-02-03T06:33:31Z", "message": "Update trl\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777ae1a97711a7d27ab7cadf7a90702971b587ee", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/777ae1a97711a7d27ab7cadf7a90702971b587ee", "committedDate": "2020-02-03T06:33:32Z", "message": "Rename process\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccb986ec2e7729c854b705d5b41051d5a4c07521", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ccb986ec2e7729c854b705d5b41051d5a4c07521", "committedDate": "2020-02-03T06:33:32Z", "message": "Pass `additionalParameters` to `DataImportService`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4f32d0de7db16d82a215575add197997a4fce6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/eb4f32d0de7db16d82a215575add197997a4fce6", "committedDate": "2020-02-03T06:33:32Z", "message": "Add process for importing BankStatementLines from attachment\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74fa8956ee726923efc14f85cdc4b20a13c04534", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/74fa8956ee726923efc14f85cdc4b20a13c04534", "committedDate": "2020-02-03T06:33:32Z", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "697a9c319faea1e1cc448f4901083bca142d1fd8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/697a9c319faea1e1cc448f4901083bca142d1fd8", "committedDate": "2020-02-03T06:46:39Z", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182da6002d5fdf21d1bc9b61a4e002d2eb8ea3e7", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/182da6002d5fdf21d1bc9b61a4e002d2eb8ea3e7", "committedDate": "2020-02-03T07:37:08Z", "message": "Update doctype trl\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cc8c834b3eabcaa47d1606ed879b72a4e99ed8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c8cc8c834b3eabcaa47d1606ed879b72a4e99ed8", "committedDate": "2020-02-03T10:55:21Z", "message": "Move method to `IBankStatmentPaymentBL` from `BankStatementBL`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea13bc0d6d7f350ae6d15899c179ea21febe9bda", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ea13bc0d6d7f350ae6d15899c179ea21febe9bda", "committedDate": "2020-02-03T06:23:56Z", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}, "afterCommit": {"oid": "c8cc8c834b3eabcaa47d1606ed879b72a4e99ed8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c8cc8c834b3eabcaa47d1606ed879b72a4e99ed8", "committedDate": "2020-02-03T10:55:21Z", "message": "Move method to `IBankStatmentPaymentBL` from `BankStatementBL`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ce5904342cf33a6f8cbedad28345fa32aa93645", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3ce5904342cf33a6f8cbedad28345fa32aa93645", "committedDate": "2020-02-03T12:15:36Z", "message": "Update possible test case\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfa3e1ec4a56e0730a9788d04185c2c6e32b9f7", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/dbfa3e1ec4a56e0730a9788d04185c2c6e32b9f7", "committedDate": "2020-02-03T13:01:12Z", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f906c2f83a75e368b3844ae8beeeff5dca43871", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/2f906c2f83a75e368b3844ae8beeeff5dca43871", "committedDate": "2020-02-04T06:08:03Z", "message": "Deactivate redundant Process\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf598d34beb6a467d3e552dabb291eed9864ad32", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/bf598d34beb6a467d3e552dabb291eed9864ad32", "committedDate": "2020-02-04T06:21:58Z", "message": "Add hardcoded BankStatementDataImport using the default Bank Statement format\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "953ca9fed3de6bead4a72ab7bf3cc21e0c82b1a6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/953ca9fed3de6bead4a72ab7bf3cc21e0c82b1a6", "committedDate": "2020-02-04T06:16:16Z", "message": "Add hardcoded BankStatementDataImport using the default Bank Statement format\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}, "afterCommit": {"oid": "bf598d34beb6a467d3e552dabb291eed9864ad32", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/bf598d34beb6a467d3e552dabb291eed9864ad32", "committedDate": "2020-02-04T06:21:58Z", "message": "Add hardcoded BankStatementDataImport using the default Bank Statement format\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e203f19dbed48edbc92fee766d60354f5c5e388", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0e203f19dbed48edbc92fee766d60354f5c5e388", "committedDate": "2020-02-04T07:37:08Z", "message": "Add more trls\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e9a67b0a56371465b713b66cf7c4e1ca3b6938f", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1e9a67b0a56371465b713b66cf7c4e1ca3b6938f", "committedDate": "2020-02-04T09:00:36Z", "message": "Persist bpartner during the bank statement import\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd", "committedDate": "2020-02-04T09:10:54Z", "message": "Having DataImportConfigId hardcoded is fine\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTc3MzA2", "url": "https://github.com/metasfresh/metasfresh/pull/6089#pullrequestreview-352977306", "createdAt": "2020-02-04T13:35:48Z", "commit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzozNTo0OFrOFlUMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozMDoyMlrOFlYcRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3MjQ4MA==", "bodyText": "bankStatementDate shall be LocalDate.", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374672480", "createdAt": "2020-02-04T13:35:48Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportTableSqlUpdater.java", "diffHunk": "@@ -79,11 +94,24 @@ private void updateName(final ImportRecordsSelection selection)\n \t\t\t\t.append(\" AND i.I_IsImported<>'Y' \")\n \t\t\t\t.append(selection.toSqlWhereClause(\"i\"));\n \t\tDB.executeUpdateEx(sql.toString(), ITrx.TRXNAME_ThreadInherited);\n-\n \t}\n \n-\tprivate void updateStatementDate(final ImportRecordsSelection selection)\n+\tprivate void updateStatementDate(final ImportRecordsSelection selection, @Nullable final Timestamp bankStatementDate)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3MzE3MA==", "bodyText": "use DB.TO_DATE(LocalDate) (u have to introduce it :) )", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374673170", "createdAt": "2020-02-04T13:37:14Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportTableSqlUpdater.java", "diffHunk": "@@ -79,11 +94,24 @@ private void updateName(final ImportRecordsSelection selection)\n \t\t\t\t.append(\" AND i.I_IsImported<>'Y' \")\n \t\t\t\t.append(selection.toSqlWhereClause(\"i\"));\n \t\tDB.executeUpdateEx(sql.toString(), ITrx.TRXNAME_ThreadInherited);\n-\n \t}\n \n-\tprivate void updateStatementDate(final ImportRecordsSelection selection)\n+\tprivate void updateStatementDate(final ImportRecordsSelection selection, @Nullable final Timestamp bankStatementDate)\n \t{\n+\t\tif (bankStatementDate != null)\n+\t\t{\n+\t\t\tfinal StringBuilder sql = new StringBuilder(\"UPDATE \")\n+\t\t\t\t\t.append(I_I_BankStatement.Table_Name + \" i \")\n+\t\t\t\t\t.append(\" SET \"\n+\t\t\t\t\t\t\t+ I_I_BankStatement.COLUMNNAME_StatementDate\n+\t\t\t\t\t\t\t+ \" = '\" + bankStatementDate.toString() + \"':: timestamp without time zone\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzAzNA==", "bodyText": "consider saving the payment  in some payment DAO/repo class", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374733034", "createdAt": "2020-02-04T15:17:31Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/payment/impl/BankStatmentPaymentBL.java", "diffHunk": "@@ -102,23 +113,150 @@ public void setC_Payment(IBankStatementLineOrRef lineOrRef, I_C_Payment payment)\n \t\t// Bank Statement Line specific:\n \t\tif (lineOrRef instanceof org.compiere.model.I_C_BankStatementLine)\n \t\t{\n-\t\t\torg.compiere.model.I_C_BankStatementLine bsl = (org.compiere.model.I_C_BankStatementLine)lineOrRef;\n+\t\t\tfinal org.compiere.model.I_C_BankStatementLine bsl = (org.compiere.model.I_C_BankStatementLine)lineOrRef;\n \t\t\tbsl.setDescription(payment.getDescription());\n \t\t}\n \t}\n \n-\tpublic void setPayAmt(IBankStatementLineOrRef lineOrRef, BigDecimal payAmt)\n+\t@Override\n+\tpublic void findOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(final de.metas.banking.model.I_C_BankStatementLine line)\n+\t{\n+\t\tfinal boolean manualActionRequired = findAndLinkPaymentToBankStatementLineIfPossible(line);\n+\n+\t\tif (!manualActionRequired)\n+\t\t{\n+\t\t\tsetOrCreateAndLinkPaymentToBankStatementLine(line, null);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @return true if the automatic flow should STOP as manual action is required; false if the automatic flow should continue\n+\t */\n+\tprivate boolean findAndLinkPaymentToBankStatementLineIfPossible(final de.metas.banking.model.I_C_BankStatementLine line)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (line.getC_BPartner_ID() <= 0)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal expectedPaymentAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal Money money = Money.of(expectedPaymentAmount, CurrencyId.ofRepoId(line.getC_Currency_ID()));\n+\t\tfinal BPartnerId bPartnerId = BPartnerId.ofRepoId(line.getC_BPartner_ID());\n+\t\tfinal ImmutableSet<PaymentId> possiblePayments = Services.get(IPaymentDAO.class).retrieveAllMatchingPayments(isReceipt, bPartnerId, money);\n+\n+\t\t// Don't create a new Payment and don't link any of the existing payments if there are multiple payments found.\n+\t\t// The user must fix this case manually by choosing the correct Payment\n+\t\tif (possiblePayments.size() > 1)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (possiblePayments.size() == 1)\n+\t\t{\n+\t\t\tline.setC_Payment_ID(possiblePayments.iterator().next().getRepoId());\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic Optional<PaymentId> setOrCreateAndLinkPaymentToBankStatementLine(@NonNull final de.metas.banking.model.I_C_BankStatementLine line, @Nullable final PaymentId paymentIdToSet)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn Optional.of(PaymentId.ofRepoId(line.getC_Payment_ID()));\n+\t\t}\n+\n+\t\tif (paymentIdToSet != null)\n+\t\t{\n+\t\t\tfinal I_C_Payment payment = Services.get(IPaymentDAO.class).getById(paymentIdToSet);\n+\t\t\tsetC_Payment(line, payment);\n+\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t\tInterfaceWrapperHelper.save(payment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNjkzNw==", "bodyText": "pls deprecated getSelectedModel method\npls use IBankStatementDAO.getById", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374736937", "createdAt": "2020-02-04T15:22:46Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_BankStatement_ImportAttachment.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * #%L\n+ * de.metas.banking.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.banking.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.attachments.AttachmentEntryDataResource;\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.attachments.AttachmentEntryService;\n+import de.metas.banking.model.I_C_BankStatement;\n+import de.metas.banking.service.IBankStatementDAO;\n+import de.metas.document.engine.DocStatus;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.impexp.DataImportRequest;\n+import de.metas.impexp.DataImportService;\n+import de.metas.impexp.config.DataImportConfigId;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.process.RunOutOfTrx;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.util.api.Params;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.model.I_AD_AttachmentEntry;\n+import org.compiere.model.I_I_BankStatement;\n+\n+public class C_BankStatement_ImportAttachment extends JavaProcess implements IProcessPrecondition\n+{\n+\t/*\n+\tHaving DataImportConfigId hardcoded is fine.\n+\tWe could use a sysconfig, but what shall we store there? the ID? the InternalName? (internal name is editable by user). That won't change/fix anything.\n+\tIf you have a better suggestion, please ping me.\n+\t */\n+\tpublic static final DataImportConfigId HARDCODED_BANK_STATEMENT_DATA_IMPORT_REPO_ID = DataImportConfigId.ofRepoId(540009);\n+\n+\t@Param(parameterName = I_AD_AttachmentEntry.COLUMNNAME_AD_AttachmentEntry_ID, mandatory = true)\n+\tprivate AttachmentEntryId p_AD_AttachmentEntry_ID;\n+\n+\tprivate static final String BANK_STATEMENT_MUST_BE_IN_PROGRESS_MSG = \"Bank Statement must be in progress.\";\n+\n+\tprivate final IMsgBL iMsgBL = Services.get(IMsgBL.class);\n+\tprivate final AttachmentEntryService attachmentEntryService = SpringContextHolder.instance.getBean(AttachmentEntryService.class);\n+\tprivate final transient DataImportService dataImportService = SpringContextHolder.instance.getBean(DataImportService.class);\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(@NonNull final IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.isNoSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\n+\t\tif (!context.isSingleSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\tfinal I_C_BankStatement selectedBankStatement = context.getSelectedModel(I_C_BankStatement.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNzg0Nw==", "bodyText": "introduce Services.get(IBankStatementDAO.class) as a field.\nNote u will need it in checkPreconditionsApplicable too", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374737847", "createdAt": "2020-02-04T15:24:07Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_BankStatement_ImportAttachment.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * #%L\n+ * de.metas.banking.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.banking.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.attachments.AttachmentEntryDataResource;\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.attachments.AttachmentEntryService;\n+import de.metas.banking.model.I_C_BankStatement;\n+import de.metas.banking.service.IBankStatementDAO;\n+import de.metas.document.engine.DocStatus;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.impexp.DataImportRequest;\n+import de.metas.impexp.DataImportService;\n+import de.metas.impexp.config.DataImportConfigId;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.process.RunOutOfTrx;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.util.api.Params;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.model.I_AD_AttachmentEntry;\n+import org.compiere.model.I_I_BankStatement;\n+\n+public class C_BankStatement_ImportAttachment extends JavaProcess implements IProcessPrecondition\n+{\n+\t/*\n+\tHaving DataImportConfigId hardcoded is fine.\n+\tWe could use a sysconfig, but what shall we store there? the ID? the InternalName? (internal name is editable by user). That won't change/fix anything.\n+\tIf you have a better suggestion, please ping me.\n+\t */\n+\tpublic static final DataImportConfigId HARDCODED_BANK_STATEMENT_DATA_IMPORT_REPO_ID = DataImportConfigId.ofRepoId(540009);\n+\n+\t@Param(parameterName = I_AD_AttachmentEntry.COLUMNNAME_AD_AttachmentEntry_ID, mandatory = true)\n+\tprivate AttachmentEntryId p_AD_AttachmentEntry_ID;\n+\n+\tprivate static final String BANK_STATEMENT_MUST_BE_IN_PROGRESS_MSG = \"Bank Statement must be in progress.\";\n+\n+\tprivate final IMsgBL iMsgBL = Services.get(IMsgBL.class);\n+\tprivate final AttachmentEntryService attachmentEntryService = SpringContextHolder.instance.getBean(AttachmentEntryService.class);\n+\tprivate final transient DataImportService dataImportService = SpringContextHolder.instance.getBean(DataImportService.class);\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(@NonNull final IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.isNoSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\n+\t\tif (!context.isSingleSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\tfinal I_C_BankStatement selectedBankStatement = context.getSelectedModel(I_C_BankStatement.class);\n+\t\tfinal DocStatus docStatus = DocStatus.ofCode(selectedBankStatement.getDocStatus());\n+\t\tif (!docStatus.isDraftedOrInProgress())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.reject(iMsgBL.getTranslatableMsgText(BANK_STATEMENT_MUST_BE_IN_PROGRESS_MSG));\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@RunOutOfTrx\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal AttachmentEntryDataResource data = attachmentEntryService.retrieveDataResource(getAttachmentEntryId());\n+\n+\t\tdataImportService.importData(DataImportRequest.builder()\n+\t\t\t\t.data(data)\n+\t\t\t\t.dataImportConfigId(HARDCODED_BANK_STATEMENT_DATA_IMPORT_REPO_ID)\n+\t\t\t\t.clientId(getClientId())\n+\t\t\t\t.orgId(getOrgId())\n+\t\t\t\t.userId(getUserId())\n+\t\t\t\t.additionalParameters(computeImportProcessParams())\n+\t\t\t\t.build());\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate Params computeImportProcessParams()\n+\t{\n+\t\tfinal I_C_BankStatement bankStatement = Services.get(IBankStatementDAO.class).getById(getRecord_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczOTk2Ng==", "bodyText": "consider saving the line in BankStatementDAO  (basically in the same class which retrieved it)", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374739966", "createdAt": "2020-02-04T15:27:19Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/payment/impl/BankStatmentPaymentBL.java", "diffHunk": "@@ -102,23 +113,150 @@ public void setC_Payment(IBankStatementLineOrRef lineOrRef, I_C_Payment payment)\n \t\t// Bank Statement Line specific:\n \t\tif (lineOrRef instanceof org.compiere.model.I_C_BankStatementLine)\n \t\t{\n-\t\t\torg.compiere.model.I_C_BankStatementLine bsl = (org.compiere.model.I_C_BankStatementLine)lineOrRef;\n+\t\t\tfinal org.compiere.model.I_C_BankStatementLine bsl = (org.compiere.model.I_C_BankStatementLine)lineOrRef;\n \t\t\tbsl.setDescription(payment.getDescription());\n \t\t}\n \t}\n \n-\tpublic void setPayAmt(IBankStatementLineOrRef lineOrRef, BigDecimal payAmt)\n+\t@Override\n+\tpublic void findOrCreateUnreconciledPaymentsAndLinkToBankStatementLine(final de.metas.banking.model.I_C_BankStatementLine line)\n+\t{\n+\t\tfinal boolean manualActionRequired = findAndLinkPaymentToBankStatementLineIfPossible(line);\n+\n+\t\tif (!manualActionRequired)\n+\t\t{\n+\t\t\tsetOrCreateAndLinkPaymentToBankStatementLine(line, null);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @return true if the automatic flow should STOP as manual action is required; false if the automatic flow should continue\n+\t */\n+\tprivate boolean findAndLinkPaymentToBankStatementLineIfPossible(final de.metas.banking.model.I_C_BankStatementLine line)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (line.getC_BPartner_ID() <= 0)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal boolean isReceipt = line.getStmtAmt().signum() >= 0;\n+\t\tfinal BigDecimal expectedPaymentAmount = isReceipt ? line.getStmtAmt() : line.getStmtAmt().negate();\n+\n+\t\tfinal Money money = Money.of(expectedPaymentAmount, CurrencyId.ofRepoId(line.getC_Currency_ID()));\n+\t\tfinal BPartnerId bPartnerId = BPartnerId.ofRepoId(line.getC_BPartner_ID());\n+\t\tfinal ImmutableSet<PaymentId> possiblePayments = Services.get(IPaymentDAO.class).retrieveAllMatchingPayments(isReceipt, bPartnerId, money);\n+\n+\t\t// Don't create a new Payment and don't link any of the existing payments if there are multiple payments found.\n+\t\t// The user must fix this case manually by choosing the correct Payment\n+\t\tif (possiblePayments.size() > 1)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (possiblePayments.size() == 1)\n+\t\t{\n+\t\t\tline.setC_Payment_ID(possiblePayments.iterator().next().getRepoId());\n+\t\t\tInterfaceWrapperHelper.save(line);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic Optional<PaymentId> setOrCreateAndLinkPaymentToBankStatementLine(@NonNull final de.metas.banking.model.I_C_BankStatementLine line, @Nullable final PaymentId paymentIdToSet)\n+\t{\n+\t\t// a payment is already linked\n+\t\tif (line.getC_Payment_ID() > 0)\n+\t\t{\n+\t\t\treturn Optional.of(PaymentId.ofRepoId(line.getC_Payment_ID()));\n+\t\t}\n+\n+\t\tif (paymentIdToSet != null)\n+\t\t{\n+\t\t\tfinal I_C_Payment payment = Services.get(IPaymentDAO.class).getById(paymentIdToSet);\n+\t\t\tsetC_Payment(line, payment);\n+\n+\t\t\tInterfaceWrapperHelper.save(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0MjA4Nw==", "bodyText": "what's the status here.\nbasically implement it or delete it.", "url": "https://github.com/metasfresh/metasfresh/pull/6089#discussion_r374742087", "createdAt": "2020-02-04T15:30:22Z", "author": {"login": "teosarca"}, "path": "de.metas.banking/de.metas.banking.base/src/test/java/de/metas/banking/service/impl/BankStatementPaymentBLTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * #%L\n+ * de.metas.banking.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.banking.service.impl;\n+\n+import de.metas.banking.BankStatementTestHelper;\n+import de.metas.banking.api.BankAccountId;\n+import de.metas.banking.model.BankStatementId;\n+import de.metas.banking.model.I_C_BankStatement;\n+import de.metas.banking.model.I_C_BankStatementLine;\n+import de.metas.banking.model.I_C_Payment;\n+import de.metas.banking.model.validator.C_BankStatement;\n+import de.metas.banking.model.validator.C_BankStatementLine;\n+import de.metas.banking.model.validator.C_BankStatementLine_Ref;\n+import de.metas.banking.payment.impl.BankStatmentPaymentBL;\n+import de.metas.bpartner.BPartnerId;\n+import de.metas.business.BusinessTestHelper;\n+import de.metas.document.engine.DocStatus;\n+import de.metas.money.CurrencyId;\n+import de.metas.organization.OrgId;\n+import de.metas.payment.TenderType;\n+import de.metas.payment.api.IPaymentBL;\n+import de.metas.util.Services;\n+import de.metas.util.time.SystemTime;\n+import org.adempiere.ad.modelvalidator.IModelInterceptorRegistry;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.test.AdempiereTestHelper;\n+import org.compiere.model.I_C_BP_BankAccount;\n+import org.compiere.model.I_C_BPartner;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class BankStatementPaymentBLTest\n+{\n+\tprivate final Timestamp statementDate = SystemTime.asTimestamp();\n+\tprivate final String metasfreshIban = \"123456\";\n+\n+\tprivate final Timestamp valutaDate = SystemTime.asTimestamp();\n+\n+\t@BeforeEach\n+\tvoid setUp()\n+\t{\n+\t\tAdempiereTestHelper.get().init();\n+\n+\t\tfinal IModelInterceptorRegistry modelInterceptorRegistry = Services.get(IModelInterceptorRegistry.class);\n+\t\tmodelInterceptorRegistry.addModelInterceptor(C_BankStatementLine_Ref.instance);\n+\t\tmodelInterceptorRegistry.addModelInterceptor(C_BankStatement.instance);\n+\t\tmodelInterceptorRegistry.addModelInterceptor(C_BankStatementLine.instance);\n+\t}\n+\n+\tprivate void paymentChecks(final BigDecimal expectedPayAmt, final int expectedC_payment_id, final boolean expectedIsReceipt, final int expectedC_BP_BankAccount_ID)\n+\t{\n+\t\tfinal I_C_Payment payment = InterfaceWrapperHelper.load(expectedC_payment_id, I_C_Payment.class);\n+\t\tassertNotNull(payment);\n+\t\tassertEquals(expectedPayAmt, payment.getPayAmt());\n+\t\tassertTrue(payment.isReconciled());\n+\t\tassertEquals(expectedIsReceipt, payment.isReceipt());\n+\t\tassertEquals(DocStatus.Completed, DocStatus.ofCode(payment.getDocStatus()));\n+\t\tassertEquals(expectedC_BP_BankAccount_ID, payment.getC_BP_BankAccount_ID());\n+\n+\t\t// can't test `payment.getC_DocType_ID()` as it is set by `PaymentsForInvoicesCreator`, and during test there's no DocTypes\n+\t}\n+\n+\t@Nested\n+\tclass ExistingPayments\n+\t{\n+\t\t@Test\n+\t\tvoid vendorOneMatchingPaymentExists_DifferentInvoiceOnBSL()\n+\t\t{\n+\t\t\t// TODO tbp: check with mark in a followup task about this usecase.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d27ed29d5195fe90cee62eed0a1ba932ba9c1cd"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3bad37ff1e1c4dba90ab96b7541eeb4137c1170", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a3bad37ff1e1c4dba90ab96b7541eeb4137c1170", "committedDate": "2020-02-05T07:00:01Z", "message": "Ignore my test package\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d6112b0b782b8107d4d06da592a125fb99e775b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4d6112b0b782b8107d4d06da592a125fb99e775b", "committedDate": "2020-02-05T07:06:56Z", "message": "Use `LocalDate` instead of `Timestamp`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf46297e9ba7c0da724e7429a46f44976a9ce3d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7bf46297e9ba7c0da724e7429a46f44976a9ce3d", "committedDate": "2020-02-05T07:40:09Z", "message": "Use DAO for saving Payment\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55d65c4e927dd6a3d91ae19577a84f64a199a503", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/55d65c4e927dd6a3d91ae19577a84f64a199a503", "committedDate": "2020-02-05T07:44:16Z", "message": "Deprecate `IProcessPreconditionsContext.getSelectedModel` and use instead `getSingleSelectedRecordId`\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9104a784f7eb8936343539bccda4a4a24149d478", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9104a784f7eb8936343539bccda4a4a24149d478", "committedDate": "2020-02-05T07:54:45Z", "message": "Use DAO for saving BankStatement related POs\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a8f524a135ed1e3389cabfd3116c00dcfd4089", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/35a8f524a135ed1e3389cabfd3116c00dcfd4089", "committedDate": "2020-02-05T08:27:12Z", "message": "Use explicit type when saving a PO inside DAOs instead of Object\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34f27c2f15f985a7e9067f9d4a2de0948b6fcd0c", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/34f27c2f15f985a7e9067f9d4a2de0948b6fcd0c", "committedDate": "2020-02-05T08:29:53Z", "message": "Update followup task name\n\nhttps://github.com/metasfresh/metasfresh/issues/6061"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3677, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}