{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjE1ODYy", "number": 6512, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNTo0OFrOD1I4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoxNzo1M1rOD1lQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDQ2NjAwOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNTo0OFrOGKa_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNjoyNlrOGKe4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTE3Mw==", "bodyText": "pls introduce a POJO to be returned instead of I_CM_ChatEntry", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r413581173", "createdAt": "2020-04-23T07:35:48Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.notes;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+/**\n+ * A Note is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the note.\n+ * <p>\n+ * There can be multiple notes for a record.\n+ */\n+@Repository\n+public class NotesRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createNote(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_CM_Chat chat = getOrCreateChat(tableRecordReference);\n+\n+\t\tfinal I_CM_ChatEntry chatEntry = InterfaceWrapperHelper.newInstance(I_CM_ChatEntry.class);\n+\t\tchatEntry.setCM_Chat_ID(chat.getCM_Chat_ID());\n+\t\tchatEntry.setConfidentialType(X_CM_ChatEntry.CONFIDENTIALTYPE_PublicInformation);\n+\t\tchatEntry.setCharacterData(characterData);\n+\t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n+\t\tInterfaceWrapperHelper.save(chatEntry);\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_CM_ChatEntry> retrieveNotes(@NonNull final TableRecordReference tableRecordReference, final int maxNumberOfRecords)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66faf4423f2aa11c1ef3e4fdd9f675f4499eda31"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MjM5Ng==", "bodyText": "rename the method to retrieveLastNotes", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r413582396", "createdAt": "2020-04-23T07:37:45Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.notes;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+/**\n+ * A Note is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the note.\n+ * <p>\n+ * There can be multiple notes for a record.\n+ */\n+@Repository\n+public class NotesRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createNote(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_CM_Chat chat = getOrCreateChat(tableRecordReference);\n+\n+\t\tfinal I_CM_ChatEntry chatEntry = InterfaceWrapperHelper.newInstance(I_CM_ChatEntry.class);\n+\t\tchatEntry.setCM_Chat_ID(chat.getCM_Chat_ID());\n+\t\tchatEntry.setConfidentialType(X_CM_ChatEntry.CONFIDENTIALTYPE_PublicInformation);\n+\t\tchatEntry.setCharacterData(characterData);\n+\t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n+\t\tInterfaceWrapperHelper.save(chatEntry);\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_CM_ChatEntry> retrieveNotes(@NonNull final TableRecordReference tableRecordReference, final int maxNumberOfRecords)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTE3Mw=="}, "originalCommit": {"oid": "66faf4423f2aa11c1ef3e4fdd9f675f4499eda31"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDkwNA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r413644904", "createdAt": "2020-04-23T09:06:26Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.notes;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+/**\n+ * A Note is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the note.\n+ * <p>\n+ * There can be multiple notes for a record.\n+ */\n+@Repository\n+public class NotesRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createNote(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_CM_Chat chat = getOrCreateChat(tableRecordReference);\n+\n+\t\tfinal I_CM_ChatEntry chatEntry = InterfaceWrapperHelper.newInstance(I_CM_ChatEntry.class);\n+\t\tchatEntry.setCM_Chat_ID(chat.getCM_Chat_ID());\n+\t\tchatEntry.setConfidentialType(X_CM_ChatEntry.CONFIDENTIALTYPE_PublicInformation);\n+\t\tchatEntry.setCharacterData(characterData);\n+\t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n+\t\tInterfaceWrapperHelper.save(chatEntry);\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_CM_ChatEntry> retrieveNotes(@NonNull final TableRecordReference tableRecordReference, final int maxNumberOfRecords)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTE3Mw=="}, "originalCommit": {"oid": "66faf4423f2aa11c1ef3e4fdd9f675f4499eda31"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDQ2NjcxOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNTo1OFrOGKa_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxMToxOFrOGKfF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTI4MQ==", "bodyText": "pls introduce a POJO to be returned instead of I_CM_Chat", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r413581281", "createdAt": "2020-04-23T07:35:58Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.notes;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+/**\n+ * A Note is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the note.\n+ * <p>\n+ * There can be multiple notes for a record.\n+ */\n+@Repository\n+public class NotesRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createNote(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_CM_Chat chat = getOrCreateChat(tableRecordReference);\n+\n+\t\tfinal I_CM_ChatEntry chatEntry = InterfaceWrapperHelper.newInstance(I_CM_ChatEntry.class);\n+\t\tchatEntry.setCM_Chat_ID(chat.getCM_Chat_ID());\n+\t\tchatEntry.setConfidentialType(X_CM_ChatEntry.CONFIDENTIALTYPE_PublicInformation);\n+\t\tchatEntry.setCharacterData(characterData);\n+\t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n+\t\tInterfaceWrapperHelper.save(chatEntry);\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_CM_ChatEntry> retrieveNotes(@NonNull final TableRecordReference tableRecordReference, final int maxNumberOfRecords)\n+\t{\n+\t\tfinal ChatId chatId = getChatIdOrNull(tableRecordReference);\n+\n+\t\tif (chatId == null)\n+\t\t{\n+\t\t\treturn ImmutableList.of();\n+\t\t}\n+\n+\t\treturn queryBL.createQueryBuilder(I_CM_ChatEntry.class)\n+\t\t\t\t.addEqualsFilter(I_CM_ChatEntry.COLUMNNAME_CM_Chat_ID, chatId)\n+\t\t\t\t.orderByDescending(I_CM_ChatEntry.COLUMNNAME_Created)\n+\t\t\t\t.setLimit(maxNumberOfRecords)\n+\t\t\t\t.create()\n+\t\t\t\t.listImmutable(I_CM_ChatEntry.class);\n+\t}\n+\n+\t@NonNull\n+\tprivate I_CM_Chat getOrCreateChat(final @NonNull TableRecordReference tableRecordReference)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66faf4423f2aa11c1ef3e4fdd9f675f4499eda31"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODM2NQ==", "bodyText": "Fixed by returning ChatId since that's what i really need.", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r413648365", "createdAt": "2020-04-23T09:11:18Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/notes/NotesRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.notes;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+/**\n+ * A Note is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the note.\n+ * <p>\n+ * There can be multiple notes for a record.\n+ */\n+@Repository\n+public class NotesRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createNote(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_CM_Chat chat = getOrCreateChat(tableRecordReference);\n+\n+\t\tfinal I_CM_ChatEntry chatEntry = InterfaceWrapperHelper.newInstance(I_CM_ChatEntry.class);\n+\t\tchatEntry.setCM_Chat_ID(chat.getCM_Chat_ID());\n+\t\tchatEntry.setConfidentialType(X_CM_ChatEntry.CONFIDENTIALTYPE_PublicInformation);\n+\t\tchatEntry.setCharacterData(characterData);\n+\t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n+\t\tInterfaceWrapperHelper.save(chatEntry);\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_CM_ChatEntry> retrieveNotes(@NonNull final TableRecordReference tableRecordReference, final int maxNumberOfRecords)\n+\t{\n+\t\tfinal ChatId chatId = getChatIdOrNull(tableRecordReference);\n+\n+\t\tif (chatId == null)\n+\t\t{\n+\t\t\treturn ImmutableList.of();\n+\t\t}\n+\n+\t\treturn queryBL.createQueryBuilder(I_CM_ChatEntry.class)\n+\t\t\t\t.addEqualsFilter(I_CM_ChatEntry.COLUMNNAME_CM_Chat_ID, chatId)\n+\t\t\t\t.orderByDescending(I_CM_ChatEntry.COLUMNNAME_Created)\n+\t\t\t\t.setLimit(maxNumberOfRecords)\n+\t\t\t\t.create()\n+\t\t\t\t.listImmutable(I_CM_ChatEntry.class);\n+\t}\n+\n+\t@NonNull\n+\tprivate I_CM_Chat getOrCreateChat(final @NonNull TableRecordReference tableRecordReference)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTI4MQ=="}, "originalCommit": {"oid": "66faf4423f2aa11c1ef3e4fdd9f675f4499eda31"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTA5MTA5OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java-legacy/org/adempiere/ad/dao/impl/TypedSqlQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDowNzozMVrOGLFeSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo1MzoxNVrOGLHolw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3NzE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Override\n          \n          \n            \n            \t/**\n          \n          \n            \n            \t * @return first ID or -1 if not found\n          \n          \n            \n            \t */\n          \n          \n            \n            \t@Override\n          \n      \n    \n    \n  \n\ni think the behavior if nt found (0? Integer.MIN_VALUE? throws exception?)is a useful information", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414277193", "createdAt": "2020-04-24T04:07:31Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java-legacy/org/adempiere/ad/dao/impl/TypedSqlQuery.java", "diffHunk": "@@ -515,12 +515,6 @@ else if (postQueryFilter.accept(model))\n \t\treturn model;\n \t}\n \n-\t/**\n-\t * Return first ID\n-\t *\n-\t * @return first ID or -1 if not found\n-\t * @throws DBException\n-\t */\n \t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMjU5OQ==", "bodyText": "This is the implementation class. I removed the comments from here and added better comments in the interface\nI don't understand what you want to say in  if nt found (0? Integer.MIN_VALUE? throws exception?)", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414312599", "createdAt": "2020-04-24T05:53:15Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java-legacy/org/adempiere/ad/dao/impl/TypedSqlQuery.java", "diffHunk": "@@ -515,12 +515,6 @@ else if (postQueryFilter.accept(model))\n \t\treturn model;\n \t}\n \n-\t/**\n-\t * Return first ID\n-\t *\n-\t * @return first ID or -1 if not found\n-\t * @throws DBException\n-\t */\n \t@Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3NzE5Mw=="}, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTEwNTU3OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/ChatEntryId.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoxMzozN1rOGLFl3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoyMTo1OVrOGLQ-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3OTEzMw==", "bodyText": "I guess that this should be similar to e.g. BPartnerLocationId in containing also the ChatId.\nIf there are parts of the code where this is a problem, we shall take a look at them, probable a problem can be solved there.", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414279133", "createdAt": "2020-04-24T04:13:37Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/ChatEntryId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import de.metas.util.Check;\n+import de.metas.util.lang.RepoIdAware;\n+import lombok.Value;\n+\n+@Value\n+public class ChatEntryId implements RepoIdAware\n+{\n+\tint repoId;\n+\n+\t@JsonCreator\n+\tpublic static ChatEntryId ofRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMzA1MQ==", "bodyText": "Sounds like a good idea. Will implement.", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414313051", "createdAt": "2020-04-24T05:54:30Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/ChatEntryId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import de.metas.util.Check;\n+import de.metas.util.lang.RepoIdAware;\n+import lombok.Value;\n+\n+@Value\n+public class ChatEntryId implements RepoIdAware\n+{\n+\tint repoId;\n+\n+\t@JsonCreator\n+\tpublic static ChatEntryId ofRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3OTEzMw=="}, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NTYyMw==", "bodyText": "No longer implementing this. Explanation below.", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414465623", "createdAt": "2020-04-24T10:21:59Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/ChatEntryId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import de.metas.util.Check;\n+import de.metas.util.lang.RepoIdAware;\n+import lombok.Value;\n+\n+@Value\n+public class ChatEntryId implements RepoIdAware\n+{\n+\tint repoId;\n+\n+\t@JsonCreator\n+\tpublic static ChatEntryId ofRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3OTEzMw=="}, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTExNDUwOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoxNzoyNFrOGLFqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoxNzoyNFrOGLFqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDMyNg==", "bodyText": "For the record, i like such information. Ofc we want to avoid a code-dependency to I_CM_Chat, but still imho it's useful for a dev to know that under the hood we use them, (e.g. when she needs to do stuff in the application dictionary)", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414280326", "createdAt": "2020-04-24T04:17:24Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.user.UserId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+/**\n+ * A Comment is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTExNTIwOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoxNzo1M1rOGLFq_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo0MDo0MlrOGLI1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDQ0NQ==", "bodyText": "allright, let's rename this to CommentId / CommentLineId then", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414280445", "createdAt": "2020-04-24T04:17:53Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.user.UserId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+/**\n+ * A Comment is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the Comment.\n+ * <p>\n+ * There can be multiple Comments for a record.\n+ */\n+@Repository\n+public class CommentsRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createComment(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal ChatId chatId = getOrCreateChat(tableRecordReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxNTA2Nw==", "bodyText": "Instead of ChatId/ChatEntryId? What about the tables/POs?", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414315067", "createdAt": "2020-04-24T05:59:41Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.user.UserId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+/**\n+ * A Comment is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the Comment.\n+ * <p>\n+ * There can be multiple Comments for a record.\n+ */\n+@Repository\n+public class CommentsRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createComment(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal ChatId chatId = getOrCreateChat(tableRecordReference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDQ0NQ=="}, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMjI2Mg==", "bodyText": "The POs and tables will not be renamed.", "url": "https://github.com/metasfresh/metasfresh/pull/6512#discussion_r414332262", "createdAt": "2020-04-24T06:40:42Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentsRepository.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.comments;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.user.UserId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.table.api.IADTableDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_CM_Chat;\n+import org.compiere.model.I_CM_ChatEntry;\n+import org.compiere.model.X_CM_Chat;\n+import org.compiere.model.X_CM_ChatEntry;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+/**\n+ * A Comment is made of an {@link I_CM_Chat} as the parent storing the table and record IDs,\n+ * and an {@link I_CM_ChatEntry} as the children storing the text data of the Comment.\n+ * <p>\n+ * There can be multiple Comments for a record.\n+ */\n+@Repository\n+public class CommentsRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n+\n+\tpublic void createComment(final @NonNull String characterData, @NonNull final TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal ChatId chatId = getOrCreateChat(tableRecordReference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDQ0NQ=="}, "originalCommit": {"oid": "75103708810d7bc23c31bf2e7fcb0810a2bdc4d1"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1596, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}