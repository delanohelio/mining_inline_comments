{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDc3OTk0", "number": 10223, "title": "Rewrite quick actions", "bodyText": "Related to #10195\nNeed to fix and add tests but the code is ready for review.", "createdAt": "2020-11-12T18:35:37Z", "url": "https://github.com/metasfresh/metasfresh/pull/10223", "merged": true, "mergeCommit": {"oid": "7c13ca0b63d2c8a5f2597a57952947e0b18acd41"}, "closed": true, "closedAt": "2020-11-25T09:47:34Z", "author": {"login": "siemiatj"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeLti6AH2gAyNTIwMDc3OTk0OjcxNmVmMzU2ZTlmNDEyODkyODRjMDFmNTA3ZWU5N2JjNTc1MWRhNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfxd74AH2gAyNTIwMDc3OTk0OmMyZDIwMWQwZGE5M2RjYjNmYTk3ZDIxYTAzMGU3MjdiMzcwOTU2NGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "716ef356e9f41289284c01f507ee97bc5751da78", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/716ef356e9f41289284c01f507ee97bc5751da78", "committedDate": "2020-11-19T23:53:40Z", "message": "#10195 create actions reducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7256d5ac364ee7ab29add35b21aee4c484e67faa", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7256d5ac364ee7ab29add35b21aee4c484e67faa", "committedDate": "2020-11-19T23:56:02Z", "message": "#10195 actions plumbing and refactoring\n\n# Conflicts:\n#\tfrontend/src/components/widget/ActionButton.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d74f7e127cf92499b3865d6a9cec3ec23d257a0", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9d74f7e127cf92499b3865d6a9cec3ec23d257a0", "committedDate": "2020-11-19T23:56:06Z", "message": "#10195 cleanup the reducer and add missing action types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95aead2eef7d0393536bcee9fa8d972a4816358a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/95aead2eef7d0393536bcee9fa8d972a4816358a", "committedDate": "2020-11-19T23:56:06Z", "message": "#10195 basic plumbing to get the quick actions when the view data is fetched"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9f212e0d8dc81bc3c47de3bb521b7a49a3a4cd", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9b9f212e0d8dc81bc3c47de3bb521b7a49a3a4cd", "committedDate": "2020-11-19T23:56:07Z", "message": "#10195 fetch quick actions on selection change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdce022e92602112b74c23bf561fd0f117fec12b", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fdce022e92602112b74c23bf561fd0f117fec12b", "committedDate": "2020-11-19T23:56:07Z", "message": "#10195 cleanup and some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234b52e125fae42bbc060e8d2351b7470f3bbc96", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/234b52e125fae42bbc060e8d2351b7470f3bbc96", "committedDate": "2020-11-19T23:56:07Z", "message": "#10195 cleanup and remove/comment out some unused props"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a153fb3410aaf2f41b60c24e3c772d83ac3ab33", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4a153fb3410aaf2f41b60c24e3c772d83ac3ab33", "committedDate": "2020-11-19T23:56:07Z", "message": "#10195 fetch quick actions only for grids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfbe06f05ccfe663da543e105eec31e57481795", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/2bfbe06f05ccfe663da543e105eec31e57481795", "committedDate": "2020-11-19T23:56:08Z", "message": "#10195 work on fetching included/parent quick actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc04c4cd9ad874abee729c82e999c086912a9fa", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/adc04c4cd9ad874abee729c82e999c086912a9fa", "committedDate": "2020-11-19T23:56:08Z", "message": "#10195 cleanup action for fetching parent's/child's QA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d4f57bcdb7c211008b54037b626263a399a772", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/05d4f57bcdb7c211008b54037b626263a399a772", "committedDate": "2020-11-19T23:56:08Z", "message": "#10195 more actions cleaning & add missing params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98acc5af9d547130994e3b0fbf170cb65d7b39a4", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/98acc5af9d547130994e3b0fbf170cb65d7b39a4", "committedDate": "2020-11-19T23:56:08Z", "message": "#10195 properly fetch child/parent QA on selection change + more refactoring\n#10195 remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5841394df884e0635d55dd7d164c81ed67d2325a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5841394df884e0635d55dd7d164c81ed67d2325a", "committedDate": "2020-11-19T23:56:08Z", "message": "#10195 properly pass viewProfileId to quick actions\n#10195 small cleanup in DocumentList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3cd9d4a13d4f806074206f028b8c03ed1d176e", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8a3cd9d4a13d4f806074206f028b8c03ed1d176e", "committedDate": "2020-11-19T23:56:09Z", "message": "#10195 cleanup and add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc5c6137e9527a4e3876dffe9ad8b71a9198829", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1dc5c6137e9527a4e3876dffe9ad8b71a9198829", "committedDate": "2020-11-19T23:56:09Z", "message": "#10195 cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216a51e6fee9bb3a339e7cf1e713343713f2e924", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/216a51e6fee9bb3a339e7cf1e713343713f2e924", "committedDate": "2020-11-19T23:56:09Z", "message": "#10195 fix deselect when clicked outside"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ba6154f79448287985b6a826b2930682f60014", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a2ba6154f79448287985b6a826b2930682f60014", "committedDate": "2020-11-19T23:56:09Z", "message": "#10195 small refactor, remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96ba917e17a149b5b1dabd321b7283783027687e", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/96ba917e17a149b5b1dabd321b7283783027687e", "committedDate": "2020-11-19T23:56:09Z", "message": "#10195 don't fetch QA if a request is already pending"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1969932bcfe7fab0e45323dbd59bcce823322c", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/cf1969932bcfe7fab0e45323dbd59bcce823322c", "committedDate": "2020-11-19T23:56:10Z", "message": "#10195 some refactoring and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ec26ebe620152f1806889d73ca2ac9ffd9b5f9", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/02ec26ebe620152f1806889d73ca2ac9ffd9b5f9", "committedDate": "2020-11-19T23:56:10Z", "message": "#10195 control toggling included views after selection in redux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db65fd469854a6801d32c2c91c3273f850d16ec", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4db65fd469854a6801d32c2c91c3273f850d16ec", "committedDate": "2020-11-19T23:56:10Z", "message": "#10195 properly get the selected item when showing included view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8f550405f45c2171c86bafbe563bada0209dc6e2", "committedDate": "2020-11-19T23:56:10Z", "message": "#10195 limit requests on deselecting all"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "892d7eafdf27943d50156e9966f612b69c8ca53a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/892d7eafdf27943d50156e9966f612b69c8ca53a", "committedDate": "2020-11-19T20:02:07Z", "message": "#10195 properly get the selected item when showing included view"}, "afterCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8f550405f45c2171c86bafbe563bada0209dc6e2", "committedDate": "2020-11-19T23:56:10Z", "message": "#10195 limit requests on deselecting all"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTYxMzQ2", "url": "https://github.com/metasfresh/metasfresh/pull/10223#pullrequestreview-535161346", "createdAt": "2020-11-20T07:09:01Z", "commit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzowOTowMVrOH3C51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyNjo1NFrOH3FRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MTMwMQ==", "bodyText": "I would group the actions specific to QuickActions into src/constants/actions/QuickActions.js then in the Action types I would do\n export * from './actions/QuickActions'\nand in the end would import here like it's already done. wdyt ?", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527481301", "createdAt": "2020-11-20T07:09:01Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MjM4MA==", "bodyText": "this doesn't seem to be used", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527482380", "createdAt": "2020-11-20T07:11:43Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzY1MA==", "bodyText": "L:34-L38 can be written in just\nlet viewProfileId = includedView.windowId === windowId ? includedView.viewProfileId : null;", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527483650", "createdAt": "2020-11-20T07:15:00Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NDQ5Mg==", "bodyText": "this doesn't seem to be defined. Pls define it somewhere above before use and set a default value for it.", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527484492", "createdAt": "2020-11-20T07:17:09Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NzY3NQ==", "bodyText": "I would put this in just one line\nlet [fetch,fetchWindowId, fetchViewId, parentView, childView, viewProfileId ] = Array(6).fill(null);", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527487675", "createdAt": "2020-11-20T07:25:55Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4OTE0Mg==", "bodyText": "Actually if we set viewProfileId below we can just put\nlet [fetch,fetchWindowId, fetchViewId, parentView, childView ] = Array(5).fill(null);\nand down below\nlet viewProfileId = includedView.windowId === windowId ? includedView.viewProfileId : null;", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527489142", "createdAt": "2020-11-20T07:29:40Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NzY3NQ=="}, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MDg4NA==", "bodyText": "fetch = !childQuickActions.pending ? true : false;", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527490884", "createdAt": "2020-11-20T07:34:25Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MTEzOQ==", "bodyText": "same as above", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527491139", "createdAt": "2020-11-20T07:34:59Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzA2MA==", "bodyText": "dispatch({ type: FETCH_QUICK_ACTIONS, payload: { id }});", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527493060", "createdAt": "2020-11-20T07:39:36Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzYwNg==", "bodyText": "dispatch({ type: FETCH_QUICK_ACTIONS_FAILURE, payload: { id }});", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527493606", "createdAt": "2020-11-20T07:40:51Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDM1Mg==", "bodyText": "return { type: DELETE_QUICK_ACTIONS, payload: { id }};", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527494352", "createdAt": "2020-11-20T07:42:48Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDUyNw==", "bodyText": "return { type: DELETE_TOP_ACTIONS };", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527494527", "createdAt": "2020-11-20T07:43:22Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTA5NQ==", "bodyText": "@param {string} windowType aso, pls put the actual type of each param", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527495095", "createdAt": "2020-11-20T07:44:41Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {\n+    type: DELETE_TOP_ACTIONS,\n+  };\n+}\n+\n+/**\n+ * @method fetchTopActions\n+ * @summary Fetches tab's top actions\n+ *\n+ * @param {*} windowType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTQxNA==", "bodyText": "dispatch({ type: FETCH_TOP_ACTIONS_FAILURE });", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527495414", "createdAt": "2020-11-20T07:45:25Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {\n+    type: DELETE_TOP_ACTIONS,\n+  };\n+}\n+\n+/**\n+ * @method fetchTopActions\n+ * @summary Fetches tab's top actions\n+ *\n+ * @param {*} windowType\n+ * @param {*} docId\n+ * @param {*} tabId\n+ */\n+export function fetchTopActions(windowType, docId, tabId) {\n+  return (dispatch) => {\n+    dispatch({\n+      type: FETCH_TOP_ACTIONS,\n+    });\n+\n+    return topActionsRequest(windowType, docId, tabId)\n+      .then((response) => {\n+        dispatch({\n+          type: FETCH_TOP_ACTIONS_SUCCESS,\n+          payload: response.data.actions,\n+        });\n+\n+        return Promise.resolve(response.data.actions);\n+      })\n+      .catch((e) => {\n+        dispatch({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Njk5Ng==", "bodyText": "this fits in one line also\ndispatch({ type: types.DESELECT_TABLE_ROWS, payload: { id, selection } });", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527496996", "createdAt": "2020-11-20T07:49:15Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -547,14 +538,128 @@ export function collapseTableRow({ tableId, collapse, node }) {\n  * @param {array} selection - array of selected items. This will be validated\n  * for existence in the rows data by the reducer, but not for duplication\n  * @param {string} keyProperty=id - `id` or `rowId` depending on the table type\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n  */\n-export function updateTableSelection(id, selection, keyProperty = 'id') {\n+export function updateTableSelection({\n+  id,\n+  selection,\n+  keyProperty = 'id',\n+  windowId,\n+  viewId,\n+  isModal,\n+}) {\n   return (dispatch) => {\n     dispatch({\n       type: types.UPDATE_TABLE_SELECTION,\n       payload: { id, selection, keyProperty },\n     });\n \n+    if (viewId) {\n+      // update quick actions\n+      dispatch(getTableActions({ tableId: id, windowId, viewId, isModal }));\n+      // show included view\n+      dispatch(\n+        handleToggleIncludedView({ windowId, tableId: id, selection, isModal })\n+      );\n+    }\n+\n     return Promise.resolve(selection);\n   };\n }\n+\n+/**\n+ * @method deselectTableRows\n+ * @summary deselect rows or deselect all if an empty `ids` array is provided\n+ *\n+ * @param {string} id - table id\n+ * @param {array} selection - array of items to deselect\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function deselectTableRows({\n+  id,\n+  selection,\n+  windowId,\n+  viewId,\n+  isModal,\n+}) {\n+  return (dispatch) => {\n+    dispatch({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwMTI4Nw==", "bodyText": "id && dispatch(toggleIncludedView(id, showIncludedView, isModal));\n\n    showIncludedView &&\n      dispatch(\n        setIncludedView({ windowId, viewId, parentId: id, viewProfileId })\n      );\n\n    !showIncludedView &&\n      dispatch(unsetIncludedView({ windowId, viewId, forceClose }));", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527501287", "createdAt": "2020-11-20T07:58:59Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -542,14 +571,17 @@ export function showIncludedView({\n   viewId,\n   forceClose,\n   isModal,\n+  viewProfileId,\n } = {}) {\n   return (dispatch) => {\n     if (id) {\n       dispatch(toggleIncludedView(id, showIncludedView, isModal));\n     }\n \n     if (showIncludedView) {\n-      dispatch(setIncludedView({ windowId, viewId }));\n+      dispatch(\n+        setIncludedView({ windowId, viewId, parentId: id, viewProfileId })\n+      );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxOTAwNg==", "bodyText": "rem original if not in use", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527519006", "createdAt": "2020-11-20T08:25:02Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/actionsHandler.js", "diffHunk": "@@ -0,0 +1,73 @@\n+import { produce /*, original*/ } from 'immer';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyMDAxMQ==", "bodyText": "remove if no longer in use", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527520011", "createdAt": "2020-11-20T08:26:54Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/documentListHelper.js", "diffHunk": "@@ -21,7 +21,7 @@ const DLpropTypes = {\n   windowId: PropTypes.string.isRequired,\n   viewId: PropTypes.string,\n   queryViewId: PropTypes.string,\n-  updateParentSelectedIds: PropTypes.func,\n+  // updateParentSelectedIds: PropTypes.func,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4b17f120fc04abe21833e270495f73fdd7781f", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1a4b17f120fc04abe21833e270495f73fdd7781f", "committedDate": "2020-11-23T09:49:53Z", "message": "#10195 cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "158dfe0fc393ce719ed6a3413e11f998e16f23c7", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/158dfe0fc393ce719ed6a3413e11f998e16f23c7", "committedDate": "2020-11-23T09:59:07Z", "message": "#10195 remove unnecessary `deleteTable` when closing modal\n#10195 remove nonexisting prop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e56ea89bb4064bd6e4ce6cce3e4b568307723a5", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0e56ea89bb4064bd6e4ce6cce3e4b568307723a5", "committedDate": "2020-11-23T11:39:22Z", "message": "#10195 properly remove quick actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8affb69f8769d43ca1fe24f084334a5aaa04b8b", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c8affb69f8769d43ca1fe24f084334a5aaa04b8b", "committedDate": "2020-11-23T11:49:25Z", "message": "#10195 cleanup actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad34cc4b8426b6350046e958325fac8cbacbd9f", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8ad34cc4b8426b6350046e958325fac8cbacbd9f", "committedDate": "2020-11-23T14:15:21Z", "message": "#10195 modal without included view shouldn't fetch QA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5ac2cf9a8f577709f0f8fa221f36e2df940f52e", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f5ac2cf9a8f577709f0f8fa221f36e2df940f52e", "committedDate": "2020-11-24T00:11:43Z", "message": "#10195 fix process tests and rename some function params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c391ec3d9caa69fb31963a13271355e839a786", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c7c391ec3d9caa69fb31963a13271355e839a786", "committedDate": "2020-11-24T18:20:23Z", "message": "#10195 cleanup and fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868801937b33453f6d22d06c66dde1373808eb4f", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/868801937b33453f6d22d06c66dde1373808eb4f", "committedDate": "2020-11-24T18:41:13Z", "message": "#10195 fix quickactions tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64ad7cb56826ec11d26d038d40b060523a016f2", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c64ad7cb56826ec11d26d038d40b060523a016f2", "committedDate": "2020-11-24T18:45:09Z", "message": "Merge branch 'master' into frontend-10195"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49de7a20a09322759ad3d6efc0359d282fb32215", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/49de7a20a09322759ad3d6efc0359d282fb32215", "committedDate": "2020-11-24T21:50:22Z", "message": "#10195 fix deleting QA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2d201d0da93dcb3fa97d21a030e727b3709564a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c2d201d0da93dcb3fa97d21a030e727b3709564a", "committedDate": "2020-11-24T22:26:56Z", "message": "#10195 add missing param in test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}