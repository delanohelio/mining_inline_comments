{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTkyNDkx", "number": 6185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxMDoxMFrODgXilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxMDoxMFrODgXilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjY2NzExOnYy", "diffSide": "RIGHT", "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/OrderedDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxMDoxMFrOFqiRMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjoxMDoxMFrOFqiRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NTk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tlogger.debug(\"C_OrderLine has M_Product_ID={} with is not a (physical) item -> consider fully delivered\",\n          \n          \n            \n            \t\t\t\t\tlogger.debug(\"C_OrderLine has M_Product_ID={} which is not a (physical) item -> consider fully delivered\",", "url": "https://github.com/metasfresh/metasfresh/pull/6185#discussion_r380145968", "createdAt": "2020-02-17T12:10:10Z", "author": {"login": "metas-ts"}, "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/OrderedDataLoader.java", "diffHunk": "@@ -76,24 +89,40 @@ private boolean isOrderFullyDelivered()\n \t{\n \t\tif (invoiceCandidateRecord.getC_Order_ID() <= 0)\n \t\t{\n+\t\t\tlogger.debug(\"C_Order_ID={}; -> return false\");\n \t\t\treturn false;\n \t\t}\n \t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n \n \t\tfor (final I_C_OrderLine oLine : orderDAO.retrieveOrderLines(invoiceCandidateRecord.getC_Order()))\n \t\t{\n-\t\t\tfinal BigDecimal toInvoice = oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced());\n-\t\t\tif (toInvoice.signum() == 0 && oLine.getM_Product_ID() > 0)\n+\t\t\ttry (final MDCCloseable oLineMDC = TableRecordMDC.putTableRecordReference(oLine))\n \t\t\t{\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\t//\n-\t\t\tfinal boolean fullyDelivered = oLine.getQtyOrdered().compareTo(oLine.getQtyDelivered()) == 0;\n-\t\t\tif (!fullyDelivered)\n-\t\t\t{\n-\t\t\t\treturn false;\n+\t\t\t\tfinal BigDecimal toInvoice = oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced());\n+\t\t\t\tif (toInvoice.signum() == 0 && oLine.getM_Product_ID() > 0)\n+\t\t\t\t{\n+\t\t\t\t\tlogger.debug(\"C_OrderLine has QtyOrdered={}, QtyInvoiced={}, M_Product_ID={} and remaining qty to invoice={} -> consider fully delivered\",\n+\t\t\t\t\t\t\toLine.getQtyOrdered(), oLine.getQtyInvoiced(), oLine.getM_Product_ID(), toInvoice);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tfinal ProductId olProductId = ProductId.ofRepoIdOrNull(oLine.getM_Product_ID()); // in the DB it's mandatory, but in many unit tests it's not relevant and not set\n+\t\t\t\tif (!productBL.isStocked(olProductId))\n+\t\t\t\t{\n+\t\t\t\t\tlogger.debug(\"C_OrderLine has M_Product_ID={} with is not a (physical) item -> consider fully delivered\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291121cc5528f3aa40cb174af8f9e3c6f40d27a9"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1487, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}