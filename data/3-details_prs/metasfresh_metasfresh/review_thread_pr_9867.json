{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MjY0MTI2", "number": 9867, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoyNjoyOFrOE7alOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoyNjoyOFrOE7alOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzM2OTUzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/utils/OrgAndBPartnerCompositeLookupKeyList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoyNjoyOFrOH3DTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoyNjoyOFrOH3DTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NzkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor (OrgAndBPartnerCompositeLookupKey singleQueryLookupKey : singleQueryLookupKeys)\n          \n          \n            \n            \t\tfor (final OrgAndBPartnerCompositeLookupKey singleQueryLookupKey : singleQueryLookupKeys)", "url": "https://github.com/metasfresh/metasfresh/pull/9867#discussion_r527487919", "createdAt": "2020-11-20T07:26:28Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/utils/OrgAndBPartnerCompositeLookupKeyList.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.utils;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.organization.OrgId;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+@Value\n+public class OrgAndBPartnerCompositeLookupKeyList\n+{\n+\tpublic static OrgAndBPartnerCompositeLookupKeyList of(\n+\t\t\t@NonNull final OrgId orgId, @NonNull final ImmutableList<BPartnerCompositeLookupKey> compositeLookupKeys)\n+\t{\n+\t\treturn new OrgAndBPartnerCompositeLookupKeyList(orgId, compositeLookupKeys);\n+\t}\n+\n+\tpublic static OrgAndBPartnerCompositeLookupKeyList ofIdentifierString(\n+\t\t\t@NonNull final OrgId orgId, @NonNull final IdentifierString identifierString)\n+\t{\n+\t\treturn ofSingleLookupKey(\n+\t\t\t\torgId, BPartnerCompositeLookupKey.ofIdentifierString(identifierString)\n+\t\t);\n+\t}\n+\n+\tpublic static OrgAndBPartnerCompositeLookupKeyList ofSingleLookupKey(\n+\t\t\t@NonNull final OrgId orgId, @NonNull final BPartnerCompositeLookupKey bpartnerCompositeLookupKey)\n+\t{\n+\t\treturn new OrgAndBPartnerCompositeLookupKeyList(\n+\t\t\t\torgId, ImmutableList.of(bpartnerCompositeLookupKey)\n+\t\t);\n+\t}\n+\n+\tImmutableSet<BPartnerCompositeLookupKey> compositeLookupKeys;\n+\n+\tOrgId orgId;\n+\n+\tprivate OrgAndBPartnerCompositeLookupKeyList(\n+\t\t\t@NonNull final OrgId orgId, @NonNull final Collection<BPartnerCompositeLookupKey> compositeLookupKeys)\n+\t{\n+\t\tthis.compositeLookupKeys = ImmutableSet.copyOf(compositeLookupKeys);\n+\t\tthis.orgId = orgId;\n+\t}\n+\n+\tpublic static OrgAndBPartnerCompositeLookupKeyList ofSingleLookupKeys(\n+\t\t\t@NonNull final Collection<OrgAndBPartnerCompositeLookupKey> singleQueryLookupKeys)\n+\t{\n+\t\tif (singleQueryLookupKeys.isEmpty())\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"singleQueryLookupKeys - given collection may not be empty\");\n+\t\t}\n+\n+\t\tfinal ImmutableList.Builder<BPartnerCompositeLookupKey> result = ImmutableList.builder();\n+\t\tOrgId orgId = null;\n+\t\tfor (OrgAndBPartnerCompositeLookupKey singleQueryLookupKey : singleQueryLookupKeys)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991fdbb043f88dd8c340c15f06163d6acd25862e"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1261, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}