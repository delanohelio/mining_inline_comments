{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDc2NDQ0", "number": 10004, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MDozNlrOEm4ikw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMjo0OVrOEm42bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjA3Njk5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Invoice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MDozNlrOHXKpaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxMjoyOFrOHXO12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MzczNw==", "bodyText": "why is the Warehouse mandatory?", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494053737", "createdAt": "2020-09-24T05:50:36Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Invoice.java", "diffHunk": "@@ -1971,4 +1971,33 @@\n     public static final org.adempiere.model.ModelColumn<I_C_Invoice, Object> COLUMN_UserFlag = new org.adempiere.model.ModelColumn<I_C_Invoice, Object>(I_C_Invoice.class, \"UserFlag\", null);\n     /** Column name UserFlag */\n     public static final String COLUMNNAME_UserFlag = \"UserFlag\";\n+    \n+    \n+    /**\n+\t * Set Lager.\n+\t * Storage Warehouse and Service Point\n+\t *\n+\t * <br>Type: TableDir\n+\t * <br>Mandatory: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjQ1Nw==", "bodyText": "Copy - paste problem.\nRegenerated the classes and hey are now ok.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494122457", "createdAt": "2020-09-24T08:12:28Z", "author": {"login": "metas-rc"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Invoice.java", "diffHunk": "@@ -1971,4 +1971,33 @@\n     public static final org.adempiere.model.ModelColumn<I_C_Invoice, Object> COLUMN_UserFlag = new org.adempiere.model.ModelColumn<I_C_Invoice, Object>(I_C_Invoice.class, \"UserFlag\", null);\n     /** Column name UserFlag */\n     public static final String COLUMNNAME_UserFlag = \"UserFlag\";\n+    \n+    \n+    /**\n+\t * Set Lager.\n+\t * Storage Warehouse and Service Point\n+\t *\n+\t * <br>Type: TableDir\n+\t * <br>Mandatory: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MzczNw=="}, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjA4MjExOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MzoxM1rOHXKsfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MzoxM1rOHXKsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NDUyNg==", "bodyText": "why ctx is needed. For legacy APIs u can extract it from invoice.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494054526", "createdAt": "2020-09-24T05:53:13Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceBL.java", "diffHunk": "@@ -423,4 +424,6 @@ void registerLineCopyHandler(\n \t * - set Price_UOM_ID to C_InvoiceLine.C_UOM_ID\n \t */\n \tvoid ensureUOMsAreNotNull(@NonNull InvoiceId invoiceId);\n+\n+\tvoid setInvoiceLineTaxes(Properties ctx, de.metas.adempiere.model.@NonNull I_C_Invoice invoice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjA4MzE1OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1Mzo0NFrOHXKtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1Mzo0NFrOHXKtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NDY4OA==", "bodyText": "why ctx is needed. for legacy APIs u can extract it from il.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494054688", "createdAt": "2020-09-24T05:53:44Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineBL.java", "diffHunk": "@@ -98,4 +104,6 @@\n \tvoid updateLineNetAmt(I_C_InvoiceLine line, BigDecimal qtyEntered);\n \n \tvoid updatePrices(I_C_InvoiceLine invoiceLine);\n+\n+\tboolean setTaxForInvoiceLine(Properties ctx, org.compiere.model.I_C_InvoiceLine il, OrgId orgId, Timestamp taxDate, CountryId countryFromId, BPartnerLocationId partnerLocationId, boolean isSOTrx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjEyMTI0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMDoxMFrOHXLDGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMDoxMFrOHXLDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDMxMw==", "bodyText": "the fromCountryId in this method is computed in a different way compared with MInvoiceLine.setTax() method.\nPls make sure we are always computing things in one way.\nMore, I would advise to introduce some getFromCountryId(I_C_Invoice invoice, I_C_InvoiceLine invoiceLine) method in IInvoiceBL.\nYou could call that method from both places.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060313", "createdAt": "2020-09-24T06:10:10Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1371,6 +1383,66 @@ public final boolean isTaxIncluded(@NonNull final org.compiere.model.I_C_Invoice\n \t\treturn invoice.isTaxIncluded(); // 08486: use the invoice's flag, not whatever the PL sais right now\n \t}\n \n+\t@Override\n+\tpublic void setInvoiceLineTaxes(final Properties ctx, @NonNull final I_C_Invoice invoice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjEyMzkxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTowOVrOHXLEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTowOVrOHXLEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDY5OA==", "bodyText": "avoid duplicating the get countryFromId logic.\nsee above.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060698", "createdAt": "2020-09-24T06:11:09Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjEyNDg1OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTozOFrOHXLFPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTozOFrOHXLFPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDg2MA==", "bodyText": "minor: avoid ctx param", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060860", "createdAt": "2020-09-24T06:11:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjEyNzgyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMjo0OVrOHXLG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTowNDo0MlrOHXVI5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTI5NQ==", "bodyText": "rename partnerLocationId parameter to billLocationId or similar (to underline that we are talking about BILL BPartner and location)", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494061295", "createdAt": "2020-09-24T06:12:49Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,\n+\t\t\tfinal org.compiere.model.I_C_InvoiceLine il,\n+\t\t\tfinal OrgId orgId,\n+\t\t\tfinal Timestamp taxDate,\n+\t\t\tfinal CountryId countryFromId,\n+\t\t\tfinal BPartnerLocationId partnerLocationId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MjA1MA==", "bodyText": "... or is this the shipToLocation? can u pls clarify and name it correctly?", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494062050", "createdAt": "2020-09-24T06:15:00Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,\n+\t\t\tfinal org.compiere.model.I_C_InvoiceLine il,\n+\t\t\tfinal OrgId orgId,\n+\t\t\tfinal Timestamp taxDate,\n+\t\t\tfinal CountryId countryFromId,\n+\t\t\tfinal BPartnerLocationId partnerLocationId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTI5NQ=="}, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMjA0Mw==", "bodyText": "Hi, @teosarca\n\nI checked and saw that before, we took the shipment bp and location whensetting the tax from de.metas.invoice.service.impl.InvoiceLineBL.setTax(I_C_InvoiceLine, String) and the invoice bp and location when setting it from org.compiere.model.MInvoiceLine.setTax()\nNote that in the latter one the inout is not even searched for.\nWhich partner and location should be considered when computing the tax? How is this legally done in the real world?\nSimilar: Which date should be used on tax computation? The shipment date or the invoice date?", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494202043", "createdAt": "2020-09-24T10:20:04Z", "author": {"login": "metas-rc"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,\n+\t\t\tfinal org.compiere.model.I_C_InvoiceLine il,\n+\t\t\tfinal OrgId orgId,\n+\t\t\tfinal Timestamp taxDate,\n+\t\t\tfinal CountryId countryFromId,\n+\t\t\tfinal BPartnerLocationId partnerLocationId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTI5NQ=="}, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNTYzOQ==", "bodyText": "I renamed the method to make it obvious the data is based on the inoutLine linked to the invoice. If there is no inoutline, the tax is not set.\n\nIn the other places, I take the info from the inout if it is available and form the invoice otherwise.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494225639", "createdAt": "2020-09-24T11:04:42Z", "author": {"login": "metas-rc"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,\n+\t\t\tfinal org.compiere.model.I_C_InvoiceLine il,\n+\t\t\tfinal OrgId orgId,\n+\t\t\tfinal Timestamp taxDate,\n+\t\t\tfinal CountryId countryFromId,\n+\t\t\tfinal BPartnerLocationId partnerLocationId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTI5NQ=="}, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1188, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}