{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDYwNDc3", "number": 7086, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjowMzo0M1rOETpjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyNjoxNlrOETtAUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDM5Mjk0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/org/adempiere/mmovement/api/IMovementDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjowMzo0M1rOG5gEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjowMzo0M1rOG5gEvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0NzUxOA==", "bodyText": "makes no sense to have @NonNull on primitive types", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462947518", "createdAt": "2020-07-30T12:03:43Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/org/adempiere/mmovement/api/IMovementDAO.java", "diffHunk": "@@ -59,4 +60,6 @@\n \tvoid save(final I_M_Movement movement);\n \n \tvoid save(final I_M_MovementLine movementLine);\n+\n+\tList<I_M_Movement> retrieveMovementsForDDOrder(@NonNull int ddOrderId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c81c89c5615a87042d572b134ed2bd257db167b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQwODM4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjowODo1MlrOG5gN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjowODo1MlrOG5gN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0OTg3MQ==", "bodyText": "avoid model getter", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462949871", "createdAt": "2020-07-30T12:08:52Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -209,4 +233,119 @@ private BPartnerAndLocationId extractBPartnerAndLocationId(final HUToDistribute\n \t\tint bpartnerId;\n \t\tint bpartnerLocationId;\n \t}\n+\n+\t@Override\n+\tpublic void processDDOrderLines(@NonNull final I_DD_Order ddOrder)\n+\t{\n+\t\tfinal List<I_DD_OrderLine> ddOrderLines = ddOrderDAO.retrieveLines(ddOrder);\n+\n+\t\tfor (final I_DD_OrderLine ddOrderLine : ddOrderLines)\n+\t\t{\n+\t\t\tfinal List<I_M_HU> hus = retrieveNeededHusToMove(ddOrderLine);\n+\t\t\tif (hus.isEmpty())\n+\t\t\t{\n+\t\t\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\t\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\n+\t\t\t\tthrow new HUException(MSG_HU_for_product)\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"Product\", ddOrderLine.getM_Product())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQxNDc2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoxMDo0NVrOG5gR8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoxMToxM1rOG5gS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MDg5Nw==", "bodyText": "why not using Quantity instead of BigDecimal?", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462950897", "createdAt": "2020-07-30T12:10:45Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -209,4 +233,119 @@ private BPartnerAndLocationId extractBPartnerAndLocationId(final HUToDistribute\n \t\tint bpartnerId;\n \t\tint bpartnerLocationId;\n \t}\n+\n+\t@Override\n+\tpublic void processDDOrderLines(@NonNull final I_DD_Order ddOrder)\n+\t{\n+\t\tfinal List<I_DD_OrderLine> ddOrderLines = ddOrderDAO.retrieveLines(ddOrder);\n+\n+\t\tfor (final I_DD_OrderLine ddOrderLine : ddOrderLines)\n+\t\t{\n+\t\t\tfinal List<I_M_HU> hus = retrieveNeededHusToMove(ddOrderLine);\n+\t\t\tif (hus.isEmpty())\n+\t\t\t{\n+\t\t\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\t\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\n+\t\t\t\tthrow new HUException(MSG_HU_for_product)\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"Product\", ddOrderLine.getM_Product())\n+\t\t\t\t\t\t.setParameter(\"Warehouse\", warehouseId)\n+\t\t\t\t\t\t.setParameter(\"Locator\", locatorId);\n+\t\t\t}\n+\t\t\t\n+\t\t\tprocessDDOrderLine(ddOrderLine, hus);\n+\t\t}\n+\n+\t}\n+\n+\tprivate void processDDOrderLine(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final List<I_M_HU> hus)\n+\t{\n+\t\tcreateMovements()\n+\t\t\t\t.setDDOrderLine(ddOrderLine)\n+\t\t\t\t.allocateHUs(hus)\n+\t\t\t\t.setSkipCompletingDDOrder(true)\n+\t\t\t\t.process();\n+\t}\n+\t\n+\t@Override\n+\tpublic List<I_M_HU> retrieveAvailableHusToMove(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final IQueryOrderBy queryOrderBy)\n+\t{\n+\t\tfinal IHUQueryBuilder huQueryBuilder = handlingUnitsDAO.createHUQueryBuilder().setOnlyTopLevelHUs();\n+\n+\t\t\n+\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderLine.getM_Product_ID());\n+\t\t\n+\t\thuQueryBuilder.addOnlyInWarehouseId(warehouseId);\n+\t\thuQueryBuilder.addOnlyInLocatorId(locatorId.getRepoId());\n+\t\thuQueryBuilder.addOnlyWithProductId(productId);\n+\t\thuQueryBuilder.addHUStatusesToInclude(huStatusBL.getQtyOnHandStatuses());\n+\n+\t\treturn huQueryBuilder.createQuery()\n+\t\t\t\t.setOrderBy(queryOrderBy)\n+\t\t\t\t.list();\n+\t}\n+\t\n+\t/**\n+\t * retrieve the Hus needed to move in order to be able to move the dd orderline qty\n+\t * if the qty needed is less then one from storage, will split the HU\n+\t * @param ddOrderLine\n+\t */\n+\tprivate List<I_M_HU> retrieveNeededHusToMove(@NonNull final I_DD_OrderLine ddOrderLine)\n+\t{\n+\t\t// Order by\n+\t\tfinal IQueryOrderBy queryOrderBy = queryBL.createQueryOrderByBuilder(I_M_HU.class)\n+\t\t\t\t.addColumn(I_M_HU.COLUMNNAME_M_Locator_ID)\n+\t\t\t\t.addColumn(I_M_HU.COLUMN_Created)\n+\t\t\t\t.createQueryOrderBy();\n+\t\t\n+\t\tfinal List<I_M_HU> hus = retrieveAvailableHusToMove(ddOrderLine, queryOrderBy);\n+\t\tfinal I_C_UOM uom = uomDAO.getById(ddOrderLine.getC_UOM_ID());\n+\t\tBigDecimal qtyFromHus = BigDecimal.ZERO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTEyMA==", "bodyText": "the same question the qtys bellow too", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462951120", "createdAt": "2020-07-30T12:11:13Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -209,4 +233,119 @@ private BPartnerAndLocationId extractBPartnerAndLocationId(final HUToDistribute\n \t\tint bpartnerId;\n \t\tint bpartnerLocationId;\n \t}\n+\n+\t@Override\n+\tpublic void processDDOrderLines(@NonNull final I_DD_Order ddOrder)\n+\t{\n+\t\tfinal List<I_DD_OrderLine> ddOrderLines = ddOrderDAO.retrieveLines(ddOrder);\n+\n+\t\tfor (final I_DD_OrderLine ddOrderLine : ddOrderLines)\n+\t\t{\n+\t\t\tfinal List<I_M_HU> hus = retrieveNeededHusToMove(ddOrderLine);\n+\t\t\tif (hus.isEmpty())\n+\t\t\t{\n+\t\t\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\t\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\n+\t\t\t\tthrow new HUException(MSG_HU_for_product)\n+\t\t\t\t\t\t.appendParametersToMessage()\n+\t\t\t\t\t\t.setParameter(\"Product\", ddOrderLine.getM_Product())\n+\t\t\t\t\t\t.setParameter(\"Warehouse\", warehouseId)\n+\t\t\t\t\t\t.setParameter(\"Locator\", locatorId);\n+\t\t\t}\n+\t\t\t\n+\t\t\tprocessDDOrderLine(ddOrderLine, hus);\n+\t\t}\n+\n+\t}\n+\n+\tprivate void processDDOrderLine(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final List<I_M_HU> hus)\n+\t{\n+\t\tcreateMovements()\n+\t\t\t\t.setDDOrderLine(ddOrderLine)\n+\t\t\t\t.allocateHUs(hus)\n+\t\t\t\t.setSkipCompletingDDOrder(true)\n+\t\t\t\t.process();\n+\t}\n+\t\n+\t@Override\n+\tpublic List<I_M_HU> retrieveAvailableHusToMove(@NonNull final I_DD_OrderLine ddOrderLine, @NonNull final IQueryOrderBy queryOrderBy)\n+\t{\n+\t\tfinal IHUQueryBuilder huQueryBuilder = handlingUnitsDAO.createHUQueryBuilder().setOnlyTopLevelHUs();\n+\n+\t\t\n+\t\tfinal WarehouseId warehouseId = warehouseDAO.getWarehouseIdByLocatorRepoId(ddOrderLine.getM_Locator_ID());\n+\t\tfinal LocatorId locatorId = LocatorId.ofRepoId(warehouseId, ddOrderLine.getM_Locator_ID());\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderLine.getM_Product_ID());\n+\t\t\n+\t\thuQueryBuilder.addOnlyInWarehouseId(warehouseId);\n+\t\thuQueryBuilder.addOnlyInLocatorId(locatorId.getRepoId());\n+\t\thuQueryBuilder.addOnlyWithProductId(productId);\n+\t\thuQueryBuilder.addHUStatusesToInclude(huStatusBL.getQtyOnHandStatuses());\n+\n+\t\treturn huQueryBuilder.createQuery()\n+\t\t\t\t.setOrderBy(queryOrderBy)\n+\t\t\t\t.list();\n+\t}\n+\t\n+\t/**\n+\t * retrieve the Hus needed to move in order to be able to move the dd orderline qty\n+\t * if the qty needed is less then one from storage, will split the HU\n+\t * @param ddOrderLine\n+\t */\n+\tprivate List<I_M_HU> retrieveNeededHusToMove(@NonNull final I_DD_OrderLine ddOrderLine)\n+\t{\n+\t\t// Order by\n+\t\tfinal IQueryOrderBy queryOrderBy = queryBL.createQueryOrderByBuilder(I_M_HU.class)\n+\t\t\t\t.addColumn(I_M_HU.COLUMNNAME_M_Locator_ID)\n+\t\t\t\t.addColumn(I_M_HU.COLUMN_Created)\n+\t\t\t\t.createQueryOrderBy();\n+\t\t\n+\t\tfinal List<I_M_HU> hus = retrieveAvailableHusToMove(ddOrderLine, queryOrderBy);\n+\t\tfinal I_C_UOM uom = uomDAO.getById(ddOrderLine.getC_UOM_ID());\n+\t\tBigDecimal qtyFromHus = BigDecimal.ZERO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MDg5Nw=="}, "originalCommit": {"oid": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQyMDY4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoxMjozNlrOG5gVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoxMjozNlrOG5gVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTgwOA==", "bodyText": "IMHO this shall be part of the BL/Service and not HUDDOrderDAO", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r462951808", "createdAt": "2020-07-30T12:12:36Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderDAO.java", "diffHunk": "@@ -184,11 +184,19 @@ private final void removeFromHUsScheduledToMoveList(final IQueryBuilder<I_DD_Ord\n \t@Override\n \tpublic boolean existsDDOrderLineCandidateForHUId(final int huId)\n \t{\n-\t\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n \n \t\treturn queryBL.createQueryBuilder(I_DD_OrderLine_HU_Candidate.class)\n \t\t\t\t.addEqualsFilter(I_DD_OrderLine_HU_Candidate.COLUMN_M_HU_ID, huId)\n \t\t\t\t.create()\n \t\t\t\t.anyMatch();\n \t}\n+\t\n+\t@Override\n+\tpublic boolean isCreateMovementOnComplete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fffe0d2a244312a5d57d3b1f75ed0c9a86db49a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDk0ODI5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyNDoyMVrOG5lYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyNDoyMVrOG5lYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNDU1MQ==", "bodyText": "don't make it static", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r463034551", "createdAt": "2020-07-30T14:24:21Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ddorder/api/impl/HUDDOrderBL.java", "diffHunk": "@@ -1,54 +1,90 @@\n package de.metas.handlingunits.ddorder.api.impl;\n \n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryOrderBy;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.adempiere.warehouse.api.IWarehouseDAO;\n+import org.adempiere.warehouse.api.impl.WarehouseDAO;\n+import org.compiere.model.I_C_UOM;\n+import org.compiere.model.I_M_Locator;\n+import org.compiere.model.I_M_Warehouse;\n+import org.compiere.util.Env;\n+import org.eevolution.api.DDOrderLineId;\n+import org.eevolution.api.IDDOrderDAO;\n+import org.eevolution.model.I_DD_Order;\n+import org.eevolution.model.I_DD_OrderLine;\n+import org.eevolution.model.X_DD_OrderLine;\n+\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableListMultimap;\n import com.google.common.collect.ImmutableSet;\n+\n import de.metas.adempiere.gui.search.IHUPackingAware;\n import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n import de.metas.handlingunits.HUPIItemProductId;\n import de.metas.handlingunits.IHUAssignmentBL;\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHUStatusBL;\n+import de.metas.handlingunits.IHandlingUnitsBL;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.allocation.transfer.HUTransformService;\n import de.metas.handlingunits.ddorder.api.DDOrderLineCreateRequest;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n import de.metas.handlingunits.ddorder.api.IHUDDOrderDAO;\n import de.metas.handlingunits.ddorder.api.QuarantineInOutLine;\n import de.metas.handlingunits.ddorder.api.impl.HUs2DDOrderProducer.HUToDistribute;\n+import de.metas.handlingunits.exceptions.HUException;\n import de.metas.handlingunits.inout.IHUInOutDAO;\n import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.handlingunits.storage.IHUStorage;\n+import de.metas.handlingunits.storage.IHUStorageFactory;\n+import de.metas.i18n.AdMessageKey;\n import de.metas.product.IProductBL;\n import de.metas.product.ProductId;\n+import de.metas.quantity.Quantity;\n+import de.metas.uom.IUOMDAO;\n import de.metas.util.Services;\n import lombok.Builder;\n import lombok.NonNull;\n import lombok.Value;\n-import org.adempiere.exceptions.AdempiereException;\n-import org.adempiere.model.InterfaceWrapperHelper;\n-import org.adempiere.warehouse.LocatorId;\n-import org.adempiere.warehouse.WarehouseId;\n-import org.adempiere.warehouse.api.IWarehouseBL;\n-import org.adempiere.warehouse.api.IWarehouseDAO;\n-import org.adempiere.warehouse.api.impl.WarehouseDAO;\n-import org.compiere.model.I_M_Locator;\n-import org.compiere.model.I_M_Warehouse;\n-import org.compiere.util.Env;\n-import org.eevolution.api.DDOrderLineId;\n-import org.eevolution.model.I_DD_Order;\n-import org.eevolution.model.I_DD_OrderLine;\n-import org.eevolution.model.X_DD_OrderLine;\n-\n-import java.math.BigDecimal;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.function.Function;\n \n public class HUDDOrderBL implements IHUDDOrderBL\n {\n \n+\t\n+\tprivate static final String SYS_Config_DDOrder_isCreateMovementOnComplete = \"DDOrder_isCreateMovementOnComplete\";\n+\tprivate static final AdMessageKey MSG_HU_for_product = AdMessageKey.of(\"de.metas.handlingunits.ddorder.api.impl.HUDDOrderBL.NoHu_For_Product\");\n+\t\n+\tprivate static final ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8ae7a412f9bb7a0490bc0d8828cb71e152a973"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDk1NzYwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/DD_Order.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyNjoxNlrOG5leTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoyNjoxNlrOG5leTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNTk4MQ==", "bodyText": "pls avoid it", "url": "https://github.com/metasfresh/metasfresh/pull/7086#discussion_r463035981", "createdAt": "2020-07-30T14:26:16Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/DD_Order.java", "diffHunk": "@@ -43,9 +48,17 @@\n @Interceptor(I_DD_Order.class)\n public class DD_Order\n {\n-\n-\tprivate final IDDOrderDAO ddOrderDAO = Services.get(IDDOrderDAO.class);\n-\n+\tpublic static final DD_Order INSTANCE = new DD_Order();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8ae7a412f9bb7a0490bc0d8828cb71e152a973"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1341, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}