{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzgxNjkw", "number": 7053, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxNzowMVrOERhWKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNzoxMFrOESrukg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODA3NTk0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxNzowMVrOG2R4PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxNzowMVrOG2R4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2OTIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             * #%L\n          \n          \n            \n             * de.metas.swat.base\n          \n          \n            \n             * %%\n          \n          \n            \n             * Copyright (C) 2015 metas GmbH\n          \n          \n            \n             * %%\n          \n          \n            \n             * This program is free software: you can redistribute it and/or modify\n          \n          \n            \n             * it under the terms of the GNU General Public License as\n          \n          \n            \n             * published by the Free Software Foundation, either version 2 of the\n          \n          \n            \n             * License, or (at your option) any later version.\n          \n          \n            \n             *\n          \n          \n            \n             * This program is distributed in the hope that it will be useful,\n          \n          \n            \n             * but WITHOUT ANY WARRANTY; without even the implied warranty of\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n          \n          \n            \n             * GNU General Public License for more details.\n          \n          \n            \n             *\n          \n          \n            \n             * You should have received a copy of the GNU General Public\n          \n          \n            \n             * License along with this program. If not, see\n          \n          \n            \n             * <http://www.gnu.org/licenses/gpl-2.0.html>.\n          \n          \n            \n             * #L%\n          \n          \n            \n             */", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r459569212", "createdAt": "2020-07-23T16:17:01Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleBL.java", "diffHunk": "@@ -116,6 +44,102 @@\n import de.metas.util.Check;\n import de.metas.util.Services;\n import lombok.NonNull;\n+import org.adempiere.ad.dao.ICompositeQueryUpdater;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.AttributeSetInstanceId;\n+import org.adempiere.mm.attributes.api.ASICopy;\n+import org.adempiere.mm.attributes.api.AttributeConstants;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+import org.adempiere.mm.attributes.api.IAttributeSet;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceAware;\n+import org.adempiere.mm.attributes.api.IAttributeSetInstanceBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.model.PlainContextAware;\n+import org.adempiere.service.ClientId;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.util.lang.IAutoCloseable;\n+import org.adempiere.util.lang.NullAutoCloseable;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseDAO;\n+import org.compiere.model.I_C_BPartner;\n+import org.compiere.model.I_C_BPartner_Location;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_OrderLine;\n+import org.compiere.model.I_C_UOM;\n+import org.compiere.model.I_M_AttributeSetInstance;\n+import org.compiere.model.I_M_InOut;\n+import org.compiere.model.I_M_InOutLine;\n+import org.compiere.model.X_C_OrderLine;\n+import org.compiere.util.Env;\n+import org.compiere.util.TimeUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.MDC.MDCCloseable;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.createOld;\n+import static org.adempiere.model.InterfaceWrapperHelper.isNull;\n+import static org.adempiere.model.InterfaceWrapperHelper.save;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2015 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7df332b065b225090a502de716f4193955cadf"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk0NzkyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0MjoyM1rOG3XGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0MjoyM1rOG3XGBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzIzNw==", "bodyText": "use addInSubQueryFilter instead", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460703237", "createdAt": "2020-07-27T07:42:23Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/impl/BPartnerDAO.java", "diffHunk": "@@ -1155,6 +1157,34 @@ public BPartnerLocationId retrieveBPartnerLocationId(@NonNull final BPartnerLoca\n \t\treturn createLocationIdOrNull(bpartnerId, ownToLocation);\n \t}\n \n+\tprivate void appendLocationChecks(@NonNull final BPartnerLocationQuery query, @NonNull final IQueryBuilder<I_C_BPartner_Location> bpLocationQueryBuilder)\n+\t{\n+\t\tfinal boolean skipLocationChecks = !query.applyLocationChecks();\n+\n+\t\tif (skipLocationChecks)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IQueryBuilder<I_C_Location> locationIQueryBuilder = queryBL.createQueryBuilder(I_C_Location.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_C_Location.COLUMNNAME_C_Country_ID, query.getCountryId());\n+\n+\t\tif (Check.isNotBlank(query.getCity()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_City, query.getCity());\n+\t\t}\n+\n+\t\tif (Check.isNotBlank(query.getPostalCode()))\n+\t\t{\n+\t\t\tlocationIQueryBuilder.addEqualsFilter(I_C_Location.COLUMNNAME_Postal, query.getPostalCode());\n+\t\t}\n+\n+\t\tfinal List<Integer> ids = locationIQueryBuilder.create().listIds();\n+\n+\t\tbpLocationQueryBuilder.addInArrayFilter(I_C_BPartner_Location.COLUMNNAME_C_Location_ID, ids);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk2NjcwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0ODoxM1rOG3XRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0ODoxM1rOG3XRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNjE4Nw==", "bodyText": "return JsonError. u can use JsonErrors utility class", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460706187", "createdAt": "2020-07-27T07:48:13Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\treturn ResponseEntity.badRequest().body(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk3NDI5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1MDoyMVrOG3XV_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1MDoyMVrOG3XV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzMyNQ==", "bodyText": "why not using with \"is\" ?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460707325", "createdAt": "2020-07-27T07:50:21Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");\n+\t\t}\n+\n+\t\tthis.shipmentScheduleId = shipmentScheduleId;\n+\t\tthis.deliveryDate = deliveryDate;\n+\t\tthis.qtyToDeliver = qtyToDeliver;\n+\t\tthis.bPartnerLocation = bPartnerLocation;\n+\t\tthis.bPartnerCode = bPartnerCode;\n+\t\tthis.attributes = attributes;\n+\t\tthis.deliveryRuleCode = deliveryRuleCode;\n+\t}\n+\n+\tpublic boolean emptyRequest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk3OTQ3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1MTo1MVrOG3XZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1MTo1MVrOG3XZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODEzMg==", "bodyText": "Please improve the error message. e.g. \"When bPartnerLocation shall be set when bpartnerCode is set\".", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708132", "createdAt": "2020-07-27T07:51:51Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/UpdateShipmentScheduleRequest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import de.metas.common.rest_api.JsonAttributeInstance;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.exceptions.AdempiereException;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+public class UpdateShipmentScheduleRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliver;\n+\n+\t@Nullable\n+\tLocationBasicInfo bPartnerLocation;\n+\n+\t@Nullable\n+\tString bPartnerCode;\n+\n+\t@Nullable\n+\tList<JsonAttributeInstance> attributes;\n+\n+\t@Nullable\n+\tString deliveryRuleCode;\n+\n+\t@Builder\n+\tpublic UpdateShipmentScheduleRequest(@NonNull final ShipmentScheduleId shipmentScheduleId,\n+\t\t\t@Nullable final LocalDateTime deliveryDate,\n+\t\t\t@Nullable final BigDecimal qtyToDeliver,\n+\t\t\t@Nullable final LocationBasicInfo bPartnerLocation,\n+\t\t\t@Nullable final String bPartnerCode,\n+\t\t\t@Nullable final String deliveryRuleCode,\n+\t\t\t@Nullable final List<JsonAttributeInstance> attributes)\n+\t{\n+\t\tif (Check.isNotBlank(bPartnerCode) && bPartnerLocation == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Invalid request!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk4MjYxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Mjo0OFrOG3XbNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Mjo0OFrOG3XbNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwODY2Mg==", "bodyText": "consider using Optional instead of returning null.", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460708662", "createdAt": "2020-07-27T07:52:48Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/info/LocationBasicInfo.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping.info;\n+\n+import com.google.common.base.Joiner;\n+import de.metas.common.shipment.JsonLocation;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Value\n+@Builder\n+public class LocationBasicInfo\n+{\n+\t@NonNull\n+\tString countryCode;\n+\n+\t@NonNull\n+\tString city;\n+\n+\t@NonNull\n+\tString postalCode;\n+\n+\t@Nullable\n+\tString streetAndNumber;\n+\n+\t@Nullable\n+\tpublic static LocationBasicInfo of(@NonNull final JsonLocation location)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5NjM3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Njo1NlrOG3XjoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyOTozMVrOG3ie7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw==", "bodyText": "why not ZonedDateTime?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460710817", "createdAt": "2020-07-27T07:56:56Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.InOutId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class AddTrackingCodesForInOutWithoutHUReq\n+{\n+\t@NonNull\n+\tInOutId inOutId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4OTgzNw==", "bodyText": "mainly bc there is no timezone info coming from Siro, but I guess I could manually set Europe/Berlin as zone id when reading the date from the Siro xmls, in order to have ZonedDateTime in our api.", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460889837", "createdAt": "2020-07-27T13:29:31Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/AddTrackingCodesForInOutWithoutHUReq.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.InOutId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class AddTrackingCodesForInOutWithoutHUReq\n+{\n+\t@NonNull\n+\tInOutId inOutId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDgxNw=="}, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5ODQ2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NzozOFrOG3XlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NzozOFrOG3XlCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTE3OQ==", "bodyText": "consider using the builder()", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711179", "createdAt": "2020-07-27T07:57:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreatePackagesForInOutRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.inout.model.I_M_InOut;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class CreatePackagesForInOutRequest\n+{\n+\t@NonNull\n+\tI_M_InOut inOut;\n+\n+\tboolean processed;\n+\n+\t@Nullable\n+\tList<String> trackingNumbers;\n+\n+\tpublic static CreatePackagesForInOutRequest of(@NonNull final I_M_InOut inOut)\n+\t{\n+\t\treturn new CreatePackagesForInOutRequest(inOut, false, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5OTk2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1ODowNlrOG3XmAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozMTowOFrOG3ijBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg==", "bodyText": "why not ZonedDateTime?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460711426", "createdAt": "2020-07-27T07:58:06Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5MDg4Ng==", "bodyText": "same as above, will update", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460890886", "createdAt": "2020-07-27T13:31:08Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;\n+\n+\t@NonNull\n+\tLocalDateTime shipDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTQyNg=="}, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAxMzUxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjowMlrOG3XuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjowMlrOG3XuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzQ4MA==", "bodyText": "better call it warehouseBPLocationId", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713480", "createdAt": "2020-07-27T08:02:02Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAxNDQxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjoxOFrOG3XunA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjoxOFrOG3XunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzYyOA==", "bodyText": "better call it warehouseBPLocationInfo", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460713628", "createdAt": "2020-07-27T08:02:18Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAxOTYxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMzo0N1rOG3Xxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo0MjoxMFrOG3i_KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg==", "bodyText": "introduce and use IShipperTransportationDAO.save(I_M_ShipperTransportation)", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714402", "createdAt": "2020-07-27T08:03:47Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n+\n+\t\tsaveRecord(shipperTransportation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NDA4Mg==", "bodyText": "why not ShipperTransportationRepository spring component?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460894082", "createdAt": "2020-07-27T13:36:00Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n+\n+\t\tsaveRecord(shipperTransportation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODA4OA==", "bodyText": "even better :)", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460898088", "createdAt": "2020-07-27T13:42:10Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));\n+\n+\t\tsaveRecord(shipperTransportation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDQwMg=="}, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAyMTEzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNDoxNlrOG3XykQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNDoxNlrOG3XykQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNDY0MQ==", "bodyText": "use TimeUtil", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460714641", "createdAt": "2020-07-27T08:04:16Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HUShipperTransportationBL.java", "diffHunk": "@@ -327,4 +346,59 @@ public I_M_ShipperTransportation getCommonM_ShipperTransportationOrNull(final Co\n \t\tfinal I_M_ShippingPackage firstPackage = shippingPackages.iterator().next();\n \t\treturn firstPackage.getM_ShipperTransportation();\n \t}\n+\n+\t@NonNull\n+\tpublic I_M_ShipperTransportation getById(@NonNull final ShipperTransportationId shipperTransportationId)\n+\t{\n+\t\treturn load(shipperTransportationId, I_M_ShipperTransportation.class);\n+\t}\n+\n+\t@NonNull\n+\tpublic ShipperTransportationId addTrackingCodesForInOutWithoutHU(@NonNull final AddTrackingCodesForInOutWithoutHUReq req)\n+\t{\n+\t\tfinal I_M_InOut inOut = inOutDAO.getById(req.getInOutId());\n+\n+\t\tfinal WarehouseId warehouseId =  WarehouseId.ofRepoId(inOut.getM_Warehouse_ID());\n+\n+\t\tfinal I_M_Warehouse warehouse = warehouseDAO.getById(warehouseId);\n+\n+\t\tfinal int bPartnerLocationId = warehouse.getC_BPartner_Location_ID();\n+\n+\t\tfinal BPartnerLocationInfo bPartnerLocationInfo = bPartnerLocationInfoRepository.getById(bPartnerLocationId);\n+\n+\t\tfinal CreateShipperTransportationRequest createShipperTransportationRequest = CreateShipperTransportationRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.shipperId(req.getShipperId())\n+\t\t\t\t.bPartnerLocationId(bPartnerLocationInfo.getId())\n+\t\t\t\t.orgId(OrgId.ofRepoId(inOut.getAD_Org_ID()))\n+\t\t\t\t.shipDate(req.getShipDate())\n+\t\t\t\t.build();\n+\n+\t\tfinal ShipperTransportationId shipperTransportationId = createHUShipperTransportation(createShipperTransportationRequest);\n+\n+\t\tfinal CreatePackagesForInOutRequest createPackagesForInOutRequest = CreatePackagesForInOutRequest.builder()\n+\t\t\t\t.inOut(InterfaceWrapperHelper.create(inOut, de.metas.inout.model.I_M_InOut.class))\n+\t\t\t\t.trackingNumbers(req.getTrackingCodes())\n+\t\t\t\t.processed(true)//mark the M_Package records as processed\n+\t\t\t\t.build();\n+\n+\t\taddInOutWithoutHUToShipperTransportation(shipperTransportationId, ImmutableList.of(createPackagesForInOutRequest));\n+\n+\t\treturn shipperTransportationId;\n+\t}\n+\n+\tprivate ShipperTransportationId createHUShipperTransportation(@NonNull final CreateShipperTransportationRequest request)\n+\t{\n+\t\tfinal I_M_ShipperTransportation shipperTransportation = newInstance(I_M_ShipperTransportation.class);\n+\n+\t\tshipperTransportation.setAD_Org_ID(request.getOrgId().getRepoId());\n+\t\tshipperTransportation.setM_Shipper_ID(request.getShipperId().getRepoId());\n+\t\tshipperTransportation.setShipper_BPartner_ID(request.getBPartnerLocationId().getBpartnerId().getRepoId());\n+\t\tshipperTransportation.setShipper_Location_ID(request.getBPartnerLocationId().getRepoId());\n+\t\tshipperTransportation.setDateDoc(Timestamp.valueOf(request.getShipDate()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAyMzUwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNTowMlrOG3X0FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNTowMlrOG3X0FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTAyOQ==", "bodyText": "better call it shipperBPartnerAndLocationId", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715029", "createdAt": "2020-07-27T08:05:02Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tShipperId shipperId;\n+\n+\t@NonNull\n+\tBPartnerLocationId bPartnerLocationId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAyNTc3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNTo0MVrOG3X1cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNTo0MVrOG3X1cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTM3Nw==", "bodyText": "consider changing to package level access", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460715377", "createdAt": "2020-07-27T08:05:41Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/CreateShipperTransportationRequest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.organization.OrgId;\n+import de.metas.shipping.ShipperId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.time.LocalDateTime;\n+\n+@Value\n+@Builder\n+public class CreateShipperTransportationRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAzODQ3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowOTo0NFrOG3X9Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowOTo0NFrOG3X9Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNzMzMA==", "bodyText": "why not ZonedDateTime?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r460717330", "createdAt": "2020-07-27T08:09:44Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/ApplyShipmentScheduleChangesRequest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.swat.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.inoutcandidate.api;\n+\n+import de.metas.bpartner.BPartnerLocationId;\n+import de.metas.inoutcandidate.ShipmentScheduleId;\n+import de.metas.order.DeliveryRule;\n+import de.metas.util.Check;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.mm.attributes.api.CreateAttributeInstanceReq;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+@Value\n+@Builder\n+public class ApplyShipmentScheduleChangesRequest\n+{\n+\t@NonNull\n+\tShipmentScheduleId shipmentScheduleId;\n+\n+\t@Nullable\n+\tBPartnerLocationId bPartnerLocationIdOverride;\n+\n+\t@Nullable\n+\tBigDecimal qtyToDeliverStockingUOM;\n+\n+\t@Nullable\n+\tList<CreateAttributeInstanceReq> attributes;\n+\n+\t@Nullable\n+\tLocalDateTime deliveryDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ed1ea62a1e4b285870c986d725682c09c9fe20"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI0NjIyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMjoxMVrOG3_jcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMjoxMVrOG3_jcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjEzMA==", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366130", "createdAt": "2020-07-28T07:12:11Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/ShipperTransportationRepository.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.impl;\n+\n+import de.metas.shipping.model.I_M_ShipperTransportation;\n+import de.metas.shipping.model.ShipperTransportationId;\n+import lombok.NonNull;\n+import org.compiere.Adempiere;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.newInstance;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+@Repository\n+public class ShipperTransportationRepository\n+{\n+\tpublic static ShipperTransportationRepository get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46145f0fb57d1d396997049317a242f897dbc224"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI0Njk5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMjozMFrOG3_j9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMjozMFrOG3_j9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjI2MQ==", "bodyText": "IMHO this method is not needed.\nIn tests, you can simply register the service using SpringContextHolder.registerJUnitBean(...) methods.", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461366261", "createdAt": "2020-07-28T07:12:30Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/BPartnerLocationInfoRepository.java", "diffHunk": "@@ -35,6 +36,15 @@\n @Repository\n public class BPartnerLocationInfoRepository\n {\n+\tpublic static BPartnerLocationInfoRepository get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46145f0fb57d1d396997049317a242f897dbc224"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI2MjU4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNzoxMFrOG3_tQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzowMDozNVrOG43Q-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA==", "bodyText": "why not wrapping the whole thing in a try/catch block?", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r461368640", "createdAt": "2020-07-28T07:17:10Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.rest_api.utils.JsonErrors;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n+\t\t\treturn ResponseEntity.badRequest()\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t}\n+\n+\t\trequest.getCreateShipmentInfoList()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46145f0fb57d1d396997049317a242f897dbc224"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3ODkwNg==", "bodyText": "initially I had some logic for that, but after the latest changes it doesn't make sense anymore.", "url": "https://github.com/metasfresh/metasfresh/pull/7053#discussion_r462278906", "createdAt": "2020-07-29T13:00:35Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/shipping/ShipmentRestController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.shipping;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.Profiles;\n+import de.metas.common.rest_api.JsonMetasfreshId;\n+import de.metas.common.shipment.JsonCreateShipmentRequest;\n+import de.metas.common.shipment.JsonCreateShipmentResponse;\n+import de.metas.inout.model.I_M_InOut;\n+import de.metas.inoutcandidate.api.InOutGenerateResult;\n+import de.metas.logging.LogManager;\n+import de.metas.rest_api.shipping.info.GenerateShipmentsRequest;\n+import de.metas.rest_api.utils.JsonErrors;\n+import de.metas.util.web.MetasfreshRestAPIConstants;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RequestMapping(ShipmentRestController.ENDPOINT)\n+@RestController\n+@Profile(Profiles.PROFILE_App)\n+public class ShipmentRestController\n+{\n+\tpublic static final String ENDPOINT = MetasfreshRestAPIConstants.ENDPOINT_API + \"/shipment\";\n+\n+\tprivate static final Logger log = LogManager.getLogger(ShipmentRestController.class);\n+\n+\tprivate final de.metas.rest_api.shipping.ShipmentService shipmentService;\n+\n+\tpublic ShipmentRestController(final de.metas.rest_api.shipping.ShipmentService shipmentService)\n+\t{\n+\t\tthis.shipmentService = shipmentService;\n+\t}\n+\n+\t@PostMapping\n+\tpublic ResponseEntity<?> createShipments(@RequestBody final JsonCreateShipmentRequest request)\n+\t{\n+\t\tlog.debug(\"*** createShipments: Started with request: {}\", request);\n+\n+\t\ttry\n+\t\t{\n+\t\t\tshipmentService.validateRequest(request);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tfinal String adLanguage = Env.getADLanguageOrBaseLanguage();\n+\t\t\treturn ResponseEntity.badRequest()\n+\t\t\t\t\t.body(JsonErrors.ofThrowable(e, adLanguage));\n+\t\t}\n+\n+\t\trequest.getCreateShipmentInfoList()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2ODY0MA=="}, "originalCommit": {"oid": "46145f0fb57d1d396997049317a242f897dbc224"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1333, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}