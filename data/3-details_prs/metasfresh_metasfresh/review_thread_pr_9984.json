{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzI4MDc4", "number": 9984, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTowMzo1N1rOEl_Zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNzoxMFrOEl_uMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjcxNTM0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableHeader.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTowMzo1N1rOHVwxsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozNDoyOVrOHV1w3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4MTI5Nw==", "bodyText": "Why not add a named export of a component disconnected from the store ? This way you won't have to do the whole shenanigans in the tests and use what we've had instead. Then the reducers/actions can be tested separately. We know, that mapStateToProps works as redux has a pretty good test coverage.", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492581297", "createdAt": "2020-09-22T09:03:57Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/table/TableHeader.js", "diffHunk": "@@ -145,4 +145,23 @@ TableHeader.propTypes = {\n   cols: PropTypes.any,\n   indentSupported: PropTypes.any,\n   setActiveSort: PropTypes.func,\n+  headersFields: PropTypes.object,\n+  setActiveSortFields: PropTypes.func,\n };\n+\n+const mapStateToProps = (state, ownProps) => {\n+  const { viewId, windowType: windowId, docId, tabId } = ownProps;\n+  const tableId = getTableId({ windowId, viewId, docId, tabId });\n+\n+  return {\n+    headersFields:\n+      state.tables && state.tables.headers ? state.tables.headers[tableId] : {},\n+  };\n+};\n+\n+export default connect(\n+  mapStateToProps,\n+  {\n+    setActiveSortFields,\n+  }\n+)(TableHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwNTczMQ==", "bodyText": "Not sure what you mean in here. Don't we want the components to be independent of each other ?", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492605731", "createdAt": "2020-09-22T09:44:34Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableHeader.js", "diffHunk": "@@ -145,4 +145,23 @@ TableHeader.propTypes = {\n   cols: PropTypes.any,\n   indentSupported: PropTypes.any,\n   setActiveSort: PropTypes.func,\n+  headersFields: PropTypes.object,\n+  setActiveSortFields: PropTypes.func,\n };\n+\n+const mapStateToProps = (state, ownProps) => {\n+  const { viewId, windowType: windowId, docId, tabId } = ownProps;\n+  const tableId = getTableId({ windowId, viewId, docId, tabId });\n+\n+  return {\n+    headersFields:\n+      state.tables && state.tables.headers ? state.tables.headers[tableId] : {},\n+  };\n+};\n+\n+export default connect(\n+  mapStateToProps,\n+  {\n+    setActiveSortFields,\n+  }\n+)(TableHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4MTI5Nw=="}, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzAwNw==", "bodyText": "I believe you were thinking on importing directly the component disconnected from the file. Done that and replaced the test with old one. With some small adapts", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492663007", "createdAt": "2020-09-22T11:34:29Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableHeader.js", "diffHunk": "@@ -145,4 +145,23 @@ TableHeader.propTypes = {\n   cols: PropTypes.any,\n   indentSupported: PropTypes.any,\n   setActiveSort: PropTypes.func,\n+  headersFields: PropTypes.object,\n+  setActiveSortFields: PropTypes.func,\n };\n+\n+const mapStateToProps = (state, ownProps) => {\n+  const { viewId, windowType: windowId, docId, tabId } = ownProps;\n+  const tableId = getTableId({ windowId, viewId, docId, tabId });\n+\n+  return {\n+    headersFields:\n+      state.tables && state.tables.headers ? state.tables.headers[tableId] : {},\n+  };\n+};\n+\n+export default connect(\n+  mapStateToProps,\n+  {\n+    setActiveSortFields,\n+  }\n+)(TableHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4MTI5Nw=="}, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mjc1MzgxOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableHeader.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxMzo0NVrOHVxJWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0NTozM1rOHVyTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4NzM1Mg==", "bodyText": "I'm strongly against this. Since we have everything we need in the redux store already, why not use it when instantiating the table instead ? On FETCH_DOCUMENT_SUCCESS we get the orderBy value, and immediately update the table. So we can move this logic there and this whole lifecycle handler won't be needed anymore.", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492587352", "createdAt": "2020-09-22T09:13:45Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/table/TableHeader.js", "diffHunk": "@@ -1,27 +1,27 @@\n import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n import classnames from 'classnames';\n import PropTypes from 'prop-types';\n-\n+import { setActiveSortFields } from '../../actions/TableActions';\n import { shouldRenderColumn, getSizeClass } from '../../utils/tableHelpers';\n import { getTableId } from '../../reducers/tables';\n \n-export default class TableHeader extends PureComponent {\n+class TableHeader extends PureComponent {\n   UNSAFE_componentWillMount() {\n     this.setInitialState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwNjI3Nw==", "bodyText": "I agree. Will try to move it in there.", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492606277", "createdAt": "2020-09-22T09:45:33Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableHeader.js", "diffHunk": "@@ -1,27 +1,27 @@\n import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n import classnames from 'classnames';\n import PropTypes from 'prop-types';\n-\n+import { setActiveSortFields } from '../../actions/TableActions';\n import { shouldRenderColumn, getSizeClass } from '../../utils/tableHelpers';\n import { getTableId } from '../../reducers/tables';\n \n-export default class TableHeader extends PureComponent {\n+class TableHeader extends PureComponent {\n   UNSAFE_componentWillMount() {\n     this.setInitialState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4NzM1Mg=="}, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mjc2Nzg2OnYy", "diffSide": "RIGHT", "path": "frontend/src/reducers/tables.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNzoxMFrOHVxRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0MDoyNVrOHV0HAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4OTQ5MQ==", "bodyText": "Shouldn't this be in the tables[tableId].headers ? Or even with a more meaningful name like sortOptions or something ?", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492589491", "createdAt": "2020-09-22T09:17:10Z", "author": {"login": "siemiatj"}, "path": "frontend/src/reducers/tables.js", "diffHunk": "@@ -326,6 +326,13 @@ const reducer = produce((draftState, action) => {\n       const { id, active } = action.payload;\n \n       draftState[id].activeSort = active;\n+      return;\n+    }\n+    case types.SET_SORT_FIELDS: {\n+      const { id, fields } = action.payload;\n+      draftState.headers = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNTkwNg==", "bodyText": "whatever name we put if we put it under tables[tableId] it will be overwritten on refresh of the view so it must be outside like tables[sortOptions][id]", "url": "https://github.com/metasfresh/metasfresh/pull/9984#discussion_r492635906", "createdAt": "2020-09-22T10:40:25Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/tables.js", "diffHunk": "@@ -326,6 +326,13 @@ const reducer = produce((draftState, action) => {\n       const { id, active } = action.payload;\n \n       draftState[id].activeSort = active;\n+      return;\n+    }\n+    case types.SET_SORT_FIELDS: {\n+      const { id, fields } = action.payload;\n+      draftState.headers = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4OTQ5MQ=="}, "originalCommit": {"oid": "99eccfe7b0ef110221a6cfbfee97de8dd3e15041"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1311, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}