{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzc3MTA3", "number": 6700, "title": "Refactor DocList and it's child components", "bodyText": "Remove some unnecessary imports, empty objects/arrays, props etc. This limits the number of re-renders by a great deal.\nRelated to #6666\nTested on a sales order list with one order when logging renders, and on w101 for performance tests.\nBefore:\n\n\nAfter:", "createdAt": "2020-05-20T14:10:04Z", "url": "https://github.com/metasfresh/metasfresh/pull/6700", "merged": true, "mergeCommit": {"oid": "9cb1fbdd5e46aacb9970b21584e62a79ebfe1404"}, "closed": true, "closedAt": "2020-05-21T10:57:56Z", "author": {"login": "siemiatj"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjJjAmgH2gAyNDIwNzc3MTA3OmVlMDFhNTJjOTY4YWU3MDQyOTM3OGU3ZGE0YjE5Y2NlMWE2OWQ5YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcja1eFAH2gAyNDIwNzc3MTA3OjhhYzNlNWQ3ZDQ5OWY1ZDc4NTFhYjZmMGRhZjRmMWRjNTM0MDMxNDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee01a52c968ae70429378e7da4b19cce1a69d9a8", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ee01a52c968ae70429378e7da4b19cce1a69d9a8", "committedDate": "2020-05-20T14:00:49Z", "message": "#6666 refactor DocList and child components\n\nremove unnecessary object references, empty objects, imports etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/23b10160d9f87d9ae09a837829faf86e49605f7c", "committedDate": "2020-05-20T14:21:23Z", "message": "#6666 fix linter errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODk2MjA1", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415896205", "createdAt": "2020-05-21T05:55:49Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTo1NTo0OVrOGYnGUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjoyOTo1MVrOGYnuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTYwMw==", "bodyText": "this should be string all the time as I understand", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428459603", "createdAt": "2020-05-21T05:55:49Z", "author": {"login": "petrican"}, "path": "frontend/src/components/header/SubHeader.js", "diffHunk": "@@ -578,12 +579,11 @@ SubHeader.propTypes = {\n   notfound: PropTypes.any,\n   openModal: PropTypes.func,\n   openModalRow: PropTypes.func,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MDIxNw==", "bodyText": "Do you think we could put these two somewhere under src/constants ? I'm sure there are some other places where we could use them. Here we should just import them. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428460217", "createdAt": "2020-05-21T05:57:57Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MjAxNA==", "bodyText": "Do you think it would be opportune in here to define a const windowId = windowType  and use it along as a prerequisite for the time when BE will provide that windowId in params instead ?", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428462014", "createdAt": "2020-05-21T06:04:10Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+\n /**\n  * @file Class based component.\n  * @module DocList\n  * @extends Component\n  */\n class DocList extends Component {\n+  shouldComponentUpdate(nextProps) {\n+    const { query } = this.props;\n+    const { query: nextQuery } = nextProps;\n+\n+    if (_.isEqual(query, nextQuery)) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n   componentDidMount = () => {\n-    const { dispatch, windowType, latestNewDocument, query } = this.props;\n+    const {\n+      windowType,\n+      latestNewDocument,\n+      query,\n+      getWindowBreadcrumb,\n+      setLatestNewDocument,\n+      selectTableItems,\n+    } = this.props;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MzI0Nw==", "bodyText": "Like I said above. We can expect in here windowId and pass it along from the routes.js\nfile as windowId instead of windowType", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428463247", "createdAt": "2020-05-21T06:08:28Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -166,37 +193,46 @@ class DocList extends Component {\n  * @prop {object} windowType\n  */\n DocList.propTypes = {\n-  breadcrumb: PropTypes.array.isRequired,\n-  dispatch: PropTypes.func.isRequired,\n-  includedView: PropTypes.object.isRequired,\n-  indicator: PropTypes.string.isRequired,\n+  includedView: PropTypes.object,\n   latestNewDocument: PropTypes.any,\n   modal: PropTypes.object.isRequired,\n   overlay: PropTypes.object,\n-  pathname: PropTypes.string.isRequired,\n-  pluginModal: PropTypes.object,\n   processStatus: PropTypes.string.isRequired,\n   query: PropTypes.object.isRequired,\n+  pathname: PropTypes.string.isRequired,\n   rawModal: PropTypes.object.isRequired,\n-  windowType: PropTypes.any,\n+  windowType: PropTypes.string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2NTk3Mg==", "bodyText": "All this could be written as return _.isEqual(query, nextQuery) ? false : true;", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428465972", "createdAt": "2020-05-21T06:17:31Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+\n /**\n  * @file Class based component.\n  * @module DocList\n  * @extends Component\n  */\n class DocList extends Component {\n+  shouldComponentUpdate(nextProps) {\n+    const { query } = this.props;\n+    const { query: nextQuery } = nextProps;\n+\n+    if (_.isEqual(query, nextQuery)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2OTk1Nw==", "bodyText": "actually you can pass the windowId from the router.js directly", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428469957", "createdAt": "2020-05-21T06:29:51Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+\n /**\n  * @file Class based component.\n  * @module DocList\n  * @extends Component\n  */\n class DocList extends Component {\n+  shouldComponentUpdate(nextProps) {\n+    const { query } = this.props;\n+    const { query: nextQuery } = nextProps;\n+\n+    if (_.isEqual(query, nextQuery)) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n   componentDidMount = () => {\n-    const { dispatch, windowType, latestNewDocument, query } = this.props;\n+    const {\n+      windowType,\n+      latestNewDocument,\n+      query,\n+      getWindowBreadcrumb,\n+      setLatestNewDocument,\n+      selectTableItems,\n+    } = this.props;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MjAxNA=="}, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTI2ODc3", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415926877", "createdAt": "2020-05-21T07:11:10Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxMToxMVrOGYomhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxMToxMVrOGYomhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ==", "bodyText": "IMHO it's not a good approach to pass the whole modal (i don't know what's inside).\nWhy not explicitly sending the properties which are needed?", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428484231", "createdAt": "2020-05-21T07:11:11Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/Container.js", "diffHunk": "@@ -19,207 +19,210 @@ import Header from './header/Header';\n  * @module Container\n  * @extends Component\n  */\n-const Container = (props) => {\n-  const {\n-    docActionElem,\n-    docStatusData,\n-    docNoData,\n-    docId,\n-    processStatus,\n-    docSummaryData,\n-    dataId,\n-    windowType,\n-    breadcrumb,\n-    references,\n-    actions,\n-    showSidelist,\n-    siteName,\n-    connectionError,\n-    noMargin,\n-    entity,\n-    children,\n-    query,\n-    attachments,\n-    showIndicator,\n-    // TODO: We should be using indicator from the state instead of another variable\n-    isDocumentNotSaved,\n-    hideHeader,\n-    handleDeletedStatus,\n-    dropzoneFocused,\n-    notfound,\n-    rawModal,\n-    modal,\n-    pluginModal,\n-    indicator,\n-    includedView,\n-    closeModalCallback,\n-    editmode,\n-    handleEditModeToggle,\n-    activeTab,\n-    masterDocumentList,\n-    pluginComponents,\n-    setRawModalTitle,\n-    setRawModalDescription,\n-  } = props;\n-  const pluginModalVisible = pluginModal.visible;\n-  let PluginModalComponent = null;\n+class Container extends PureComponent {\n+  render() {\n+    const {\n+      docActionElem,\n+      docStatusData,\n+      docNoData,\n+      docId,\n+      processStatus,\n+      docSummaryData,\n+      dataId,\n+      windowType,\n+      breadcrumb,\n+      references,\n+      actions,\n+      showSidelist,\n+      siteName,\n+      connectionError,\n+      noMargin,\n+      entity,\n+      children,\n+      viewId,\n+      attachments,\n+      showIndicator,\n+      // TODO: We should be using indicator from the state instead of another variable\n+      isDocumentNotSaved,\n+      hideHeader,\n+      handleDeletedStatus,\n+      dropzoneFocused,\n+      notfound,\n+      rawModal,\n+      modal,\n+      pluginModal,\n+      indicator,\n+      includedView,\n+      closeModalCallback,\n+      editmode,\n+      handleEditModeToggle,\n+      activeTab,\n+      masterDocumentList,\n+      pluginComponents,\n+      setRawModalTitle,\n+      setRawModalDescription,\n+    } = this.props;\n+    const pluginModalVisible = pluginModal.visible;\n+    let PluginModalComponent = null;\n \n-  if (pluginModalVisible) {\n-    // check if pluginModal's component is saved in the redux state\n-    const modalPluginName = pluginComponents[pluginModal.id];\n+    if (pluginModalVisible) {\n+      // check if pluginModal's component is saved in the redux state\n+      const modalPluginName = pluginComponents[pluginModal.id];\n \n-    if (modalPluginName) {\n-      // get the plugin holding the required component\n-      const parentPlugin = window.META_HOST_APP.getRegistry().getEntry(\n-        modalPluginName\n-      );\n+      if (modalPluginName) {\n+        // get the plugin holding the required component\n+        const parentPlugin = window.META_HOST_APP.getRegistry().getEntry(\n+          modalPluginName\n+        );\n \n-      PluginModalComponent = parentPlugin.components.filter(\n-        (component) => component.id === pluginModal.id\n-      )[0].component;\n+        PluginModalComponent = parentPlugin.components.filter(\n+          (component) => component.id === pluginModal.id\n+        )[0].component;\n+      }\n     }\n-  }\n-\n-  return (\n-    <div>\n-      {!hideHeader && (\n-        // Forcing refresh component\n-        <Header\n-          docStatus={docActionElem}\n-          windowId={windowType}\n-          {...{\n-            entity,\n-            docStatusData,\n-            docNoData,\n-            docSummaryData,\n-            handleDeletedStatus,\n-            isDocumentNotSaved,\n-            showIndicator,\n-            query,\n-            siteName,\n-            showSidelist,\n-            attachments,\n-            actions,\n-            references,\n-            breadcrumb,\n-            dataId,\n-            dropzoneFocused,\n-            notfound,\n-            docId,\n-            editmode,\n-            handleEditModeToggle,\n-            activeTab,\n-          }}\n-        />\n-      )}\n-\n-      {connectionError && <ErrorScreen />}\n \n-      <div\n-        className={\n-          'header-sticky-distance js-unselect ' +\n-          (noMargin ? 'dashboard' : 'container-fluid')\n-        }\n-      >\n-        {modal.visible && (\n-          <Modal\n-            {...modal}\n-            windowType={modal.type}\n-            dataId={modal.dataId ? modal.dataId : dataId}\n-            modalTitle={modal.title}\n-            modalViewId={modal.viewId}\n-            parentType={windowType}\n-            parentDataId={dataId}\n-            query={query}\n-            viewId={query && query.viewId}\n-            rawModalVisible={rawModal.visible}\n-            indicator={indicator}\n-            modalViewDocumentIds={modal.viewDocumentIds}\n-            closeCallback={closeModalCallback}\n-            modalSaveStatus={\n-              modal.saveStatus && modal.saveStatus.saved !== undefined\n-                ? modal.saveStatus.saved\n-                : true\n-            }\n-            isDocumentNotSaved={\n-              modal.saveStatus &&\n-              !modal.saveStatus.saved &&\n-              (modal.validStatus && !modal.validStatus.initialValue)\n-            }\n+    return (\n+      <div>\n+        {!hideHeader && (\n+          // Forcing refresh component\n+          <Header\n+            docStatus={docActionElem}\n+            windowId={windowType}\n+            {...{\n+              entity,\n+              docStatusData,\n+              docNoData,\n+              docSummaryData,\n+              handleDeletedStatus,\n+              isDocumentNotSaved,\n+              showIndicator,\n+              viewId,\n+              siteName,\n+              showSidelist,\n+              attachments,\n+              actions,\n+              references,\n+              breadcrumb,\n+              dataId,\n+              dropzoneFocused,\n+              notfound,\n+              docId,\n+              editmode,\n+              handleEditModeToggle,\n+              activeTab,\n+            }}\n           />\n         )}\n \n-        {rawModal.visible && (\n-          <RawModal\n-            modalTitle={rawModal.title}\n-            modalDescription={rawModal.description}\n-            allowedCloseActions={rawModal.allowedCloseActions}\n-            windowType={rawModal.windowId}\n-            viewId={rawModal.viewId}\n-            masterDocumentList={masterDocumentList}\n-          >\n-            <div className=\"document-lists-wrapper\">\n-              <DocumentList\n-                type=\"grid\"\n-                windowType={rawModal.windowId}\n-                defaultViewId={rawModal.viewId}\n-                viewProfileId={rawModal.profileId}\n-                setModalTitle={setRawModalTitle}\n-                setModalDescription={setRawModalDescription}\n-                fetchQuickActionsOnInit={\n-                  !(\n+        {connectionError && <ErrorScreen />}\n+\n+        <div\n+          className={\n+            'header-sticky-distance js-unselect ' +\n+            (noMargin ? 'dashboard' : 'container-fluid')\n+          }\n+        >\n+          {modal.visible && (\n+            <Modal\n+              {...modal}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 261}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTI4MjY5", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415928269", "createdAt": "2020-05-21T07:14:15Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxNDoxNVrOGYoq9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxNDoxNVrOGYoq9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NTM2NQ==", "bodyText": "string", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428485365", "createdAt": "2020-05-21T07:14:15Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/Container.js", "diffHunk": "@@ -297,7 +300,7 @@ Container.propTypes = {\n   pluginModal: PropTypes.object,\n   pluginComponents: PropTypes.any,\n   processStatus: PropTypes.any,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 422}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTI4ODA1", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415928805", "createdAt": "2020-05-21T07:15:20Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxNToyMFrOGYosvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxNToyMFrOGYosvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NTgyMg==", "bodyText": "string", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428485822", "createdAt": "2020-05-21T07:15:20Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/header/Header.js", "diffHunk": "@@ -922,7 +921,7 @@ Header.propTypes = {\n   me: PropTypes.object.isRequired,\n   notfound: PropTypes.any,\n   plugins: PropTypes.any,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTMwNjMz", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415930633", "createdAt": "2020-05-21T07:19:07Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxOTowN1rOGYoyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxOTowN1rOGYoyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzI1MQ==", "bodyText": "btw, what's the javascript approach in this case. Don't we need to log the exception or something?", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428487251", "createdAt": "2020-05-21T07:19:07Z", "author": {"login": "teosarca"}, "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -65,36 +85,32 @@ class DocList extends Component {\n   render() {\n     const {\n       windowType,\n-      breadcrumb,\n       query,\n       modal,\n       rawModal,\n-      pluginModal,\n       overlay,\n-      indicator,\n       processStatus,\n       includedView,\n     } = this.props;\n-    let refRowIds = [];\n+    let refRowIds = EMPTY_ARRAY;\n+    const queryCopy = query ? query : EMPTY_OBJECT;\n \n-    if (query && query.refRowIds) {\n+    if (queryCopy.refRowIds) {\n       try {\n-        refRowIds = JSON.parse(query.refRowIds);\n+        refRowIds = JSON.parse(queryCopy.refRowIds);\n       } catch (e) {\n-        refRowIds = [];\n+        refRowIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTMxMjI4", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-415931228", "createdAt": "2020-05-21T07:20:17Z", "commit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMDoxOFrOGYo0Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMDoxOFrOGYo0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4Nzc1MA==", "bodyText": "not now... but it future we have to rename this to refWindowId", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428487750", "createdAt": "2020-05-21T07:20:18Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/documentListHelper.js", "diffHunk": "@@ -16,9 +16,13 @@ const DLpropTypes = {\n   // from parent\n   windowType: PropTypes.string.isRequired,\n   viewId: PropTypes.string,\n-\n-  // from <DocList>\n   updateParentSelectedIds: PropTypes.func,\n+  page: PropTypes.number,\n+  sort: PropTypes.string,\n+  defaultViewId: PropTypes.string,\n+  refType: PropTypes.string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87fd866d5a91bf0b83c926406cefac48a58531cc", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/87fd866d5a91bf0b83c926406cefac48a58531cc", "committedDate": "2020-05-21T09:47:38Z", "message": "#6666 review cleanup\n\n- rename `windowType` to `windowId`\n- comments\n- remove anonymous function for ref assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDIyMzg1", "url": "https://github.com/metasfresh/metasfresh/pull/6700#pullrequestreview-416022385", "createdAt": "2020-05-21T09:58:20Z", "commit": {"oid": "87fd866d5a91bf0b83c926406cefac48a58531cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac3e5d7d499f5d7851ab6f0daf4f1dc53403143", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8ac3e5d7d499f5d7851ab6f0daf4f1dc53403143", "committedDate": "2020-05-21T10:09:22Z", "message": "#6666 fix lint error"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}