{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDEyMjU0", "number": 6564, "title": "import GitHub labels as mf labels. Ref:", "bodyText": "#5816", "createdAt": "2020-05-05T09:47:50Z", "url": "https://github.com/metasfresh/metasfresh/pull/6564", "merged": true, "mergeCommit": {"oid": "768c0244806d7f6b67dace971897ea90bebca30a"}, "closed": true, "closedAt": "2020-05-07T11:31:21Z", "author": {"login": "pvpurcarcosmin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceQo6rgH2gAyNDEzNDEyMjU0OmUwZjQ2NDcwOGMzZjBkZDNhNDgzNTQzZTFhMWZiYjc5YTUwMWM4NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce7etSgH2gAyNDEzNDEyMjU0OmUxYTQwMWZjNTQ0ZTQzMjEzNzFlYzEzMzdiOTFkODA1YTM2NDE0ZGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0f464708c3f0dd3a483543e1a1fbb79a501c859", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/e0f464708c3f0dd3a483543e1a1fbb79a501c859", "committedDate": "2020-05-05T09:26:59Z", "message": "import GitHub labels as mf labels. Ref:\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06baf0066ae83c4f28d187247171f2c8884a26c", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d06baf0066ae83c4f28d187247171f2c8884a26c", "committedDate": "2020-05-05T11:25:50Z", "message": "import GitHub labels as mf labels. Ref:\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e376ae4e2487bcded0dd510987838d79640a8c22", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/e376ae4e2487bcded0dd510987838d79640a8c22", "committedDate": "2020-05-06T05:57:22Z", "message": "refresh cache after importing issues, fix latestActivity filter, order time bookings\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a724c987dc53c7f94ce035b4c4907236e92a7d", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/75a724c987dc53c7f94ce035b4c4907236e92a7d", "committedDate": "2020-05-06T09:34:27Z", "message": "convert ExternalIssueNo column to numeric and order desc by it\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/1f231baf075541e78209c3746b335fe6ef9c33e6", "committedDate": "2020-05-06T12:55:35Z", "message": "convert ExternalIssueNo column to numeric and order desc by it\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTkzMjk1", "url": "https://github.com/metasfresh/metasfresh/pull/6564#pullrequestreview-406593295", "createdAt": "2020-05-06T13:08:11Z", "commit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzowODoxMVrOGRSGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoyNTo0MlrOGRS1aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3NTQ2MA==", "bodyText": "can't this be immutable (=> @Value)?", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420775460", "createdAt": "2020-05-06T13:08:11Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/GetRefListRequest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.reflist;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+@Data\n+@Builder\n+public class GetRefListRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Njc3OA==", "bodyText": "we have a unique constraint on AD_Reference_ID and Value ..\ni think for that reason, the lookup should be only by AD_Reference_ID and Value AFAIS. and \"name\" should not be part of the key.", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420776778", "createdAt": "2020-05-06T13:10:11Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefListRepository.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.reflist;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_AD_Ref_List;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.loadOrNew;\n+import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n+\n+@Repository\n+public class RefListRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic RefListId save(@NonNull final RefList refList)\n+\t{\n+\t\tfinal I_AD_Ref_List record = loadOrNew(refList.getRefListId(), I_AD_Ref_List.class);\n+\n+\t\trecord.setAD_Org_ID(refList.getOrgId().getRepoId());\n+\t\trecord.setAD_Reference_ID(refList.getReferenceId().getRepoId());\n+\n+\t\trecord.setName(refList.getName());\n+\t\trecord.setValue(refList.getValue());\n+\n+\t\tsaveRecord(record);\n+\n+\t\treturn RefListId.ofRepoId(record.getAD_Ref_List_ID());\n+\t}\n+\n+\tpublic Optional<RefList> getByRequest(@NonNull final GetRefListRequest getRefListRequest)\n+\t{\n+\t\treturn queryBL.createQueryBuilder(I_AD_Ref_List.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDY0Mw==", "bodyText": "can we still have multiple bookings per day? or don't we (currently) need/want this?", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420780643", "createdAt": "2020-05-06T13:15:50Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.serviceprovider/src/main/java-gen/de/metas/serviceprovider/model/I_S_TimeBooking.java", "diffHunk": "@@ -82,7 +82,7 @@\n \t/**\n \t * Set Booked date.\n \t *\n-\t * <br>Type: DateTime\n+\t * <br>Type: Date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MTg3Mg==", "bodyText": "do you have an index on S_IssueLabel.S_Issue_ID ?", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420781872", "createdAt": "2020-05-06T13:17:39Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/label/IssueLabelRepository.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.label;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.model.I_S_IssueLabel;\n+import de.metas.util.Check;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Repository\n+public class IssueLabelRepository\n+{\n+\tprivate final IQueryBL queryBL;\n+\n+\tpublic IssueLabelRepository(final IQueryBL queryBL)\n+\t{\n+\t\tthis.queryBL = queryBL;\n+\t}\n+\n+\tpublic ImmutableList<IssueLabel> getByIssueId(@NonNull final IssueId issueId)\n+\t{\n+\t\treturn getRecordsByIssueId(issueId)\n+\t\t\t\t.stream()\n+\t\t\t\t.map(this::of)\n+\t\t\t\t.collect(ImmutableList.toImmutableList());\n+\t}\n+\n+\tpublic void persistLabels(@NonNull final IssueId issueId,\n+\t\t\t\t\t\t\t  @NonNull final ImmutableList<IssueLabel> issueLabels)\n+\t{\n+\t\tfinal ImmutableList<I_S_IssueLabel> newLabels =\n+\t\t\t\tissueLabels\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.map(label -> of(issueId, label))\n+\t\t\t\t\t\t.collect(ImmutableList.toImmutableList());\n+\n+\t\tfinal ImmutableList<I_S_IssueLabel> existingLabels = getRecordsByIssueId(issueId);\n+\n+\t\tpersistLabels(newLabels, existingLabels);\n+\t}\n+\n+\t@NonNull\n+\tprivate ImmutableList<I_S_IssueLabel> getRecordsByIssueId(@NonNull final IssueId issueId)\n+\t{\n+\t\treturn queryBL.createQueryBuilder(I_S_IssueLabel.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_IssueLabel.COLUMNNAME_S_Issue_ID, issueId.getRepoId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4NzU2MA==", "bodyText": "Ok, you also saw the UC i wrote about further up..but i think this is not a good idea in general.\nWhat's a \"legal\" scenario where we have two AD_Ref_Lists with same AD_Reference_ID, same Value and different name?\n@teosarca wdyt?", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420787560", "createdAt": "2020-05-06T13:25:42Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.serviceprovider/src/main/sql/postgresql/system/45-de.metas.serviceprovider/5558560_sys_gh5816-app_add_unique_index_IDX_AD_REF_LIST_AD_REFERENCE_ID_NAME_VALUE.sql", "diffHunk": "@@ -0,0 +1,35 @@\n+-- 2020-05-05T07:10:33.305Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Index_Table (AD_Client_ID,AD_Index_Table_ID,AD_Org_ID,AD_Table_ID,Created,CreatedBy,EntityType,IsActive,IsUnique,Name,Processing,Updated,UpdatedBy,WhereClause) VALUES (0,540538,0,104,TO_TIMESTAMP('2020-05-05 10:10:33','YYYY-MM-DD HH24:MI:SS'),100,'U','Y','Y','IDX_AD_REF_LIST_AD_REFERENCE_ID_NAME_VALUE','N',TO_TIMESTAMP('2020-05-05 10:10:33','YYYY-MM-DD HH24:MI:SS'),100,'AD_RE')\n+;\n+\n+-- 2020-05-05T07:10:33.310Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Index_Table_Trl (AD_Language,AD_Index_Table_ID, ErrorMsg, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Index_Table_ID, t.ErrorMsg, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Index_Table t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Index_Table_ID=540538 AND NOT EXISTS (SELECT 1 FROM AD_Index_Table_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Index_Table_ID=t.AD_Index_Table_ID)\n+;\n+\n+-- 2020-05-05T07:10:50.629Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+UPDATE AD_Index_Table SET EntityType='D', WhereClause='AD_Ref_List.isActive=''Y''',Updated=TO_TIMESTAMP('2020-05-05 10:10:50','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Index_Table_ID=540538\n+;\n+\n+-- 2020-05-05T07:11:55.097Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Index_Column (AD_Client_ID,AD_Column_ID,AD_Index_Column_ID,AD_Index_Table_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,SeqNo,Updated,UpdatedBy) VALUES (0,151,541016,540538,0,TO_TIMESTAMP('2020-05-05 10:11:54','YYYY-MM-DD HH24:MI:SS'),100,'D','Y',10,TO_TIMESTAMP('2020-05-05 10:11:54','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-05T07:12:01.747Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Index_Column (AD_Client_ID,AD_Column_ID,AD_Index_Column_ID,AD_Index_Table_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,SeqNo,Updated,UpdatedBy) VALUES (0,149,541017,540538,0,TO_TIMESTAMP('2020-05-05 10:12:01','YYYY-MM-DD HH24:MI:SS'),100,'D','Y',20,TO_TIMESTAMP('2020-05-05 10:12:01','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-05T07:12:41.294Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Index_Column (AD_Client_ID,AD_Column_ID,AD_Index_Column_ID,AD_Index_Table_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,SeqNo,Updated,UpdatedBy) VALUES (0,200,541018,540538,0,TO_TIMESTAMP('2020-05-05 10:12:41','YYYY-MM-DD HH24:MI:SS'),100,'D','Y',30,TO_TIMESTAMP('2020-05-05 10:12:41','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-05T07:12:51.362Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+CREATE UNIQUE INDEX IDX_AD_REF_LIST_AD_REFERENCE_ID_NAME_VALUE ON AD_Ref_List (AD_Reference_ID,Name,Value) WHERE AD_Ref_List.isActive='Y'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f231baf075541e78209c3746b335fe6ef9c33e6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af59e565a73994ed24d38f984a2abb244ca5cc24", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/af59e565a73994ed24d38f984a2abb244ca5cc24", "committedDate": "2020-05-06T13:55:33Z", "message": "remove IDX_AD_REF_LIST_AD_REFERENCE_ID_NAME_VALUE\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjQ5Mzg1", "url": "https://github.com/metasfresh/metasfresh/pull/6564#pullrequestreview-406649385", "createdAt": "2020-05-06T14:07:50Z", "commit": {"oid": "af59e565a73994ed24d38f984a2abb244ca5cc24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNzo1MVrOGRU1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNzo1MVrOGRU1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMDI0MA==", "bodyText": "see org.adempiere.ad.service.IADReferenceDAO.ADRefListItem.\nmight be what u want.\nalso pls note that usually, for names we use ITranslatableString instead of plain Strings.", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r420820240", "createdAt": "2020-05-06T14:07:51Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/reflist/RefList.java", "diffHunk": "@@ -20,29 +20,31 @@\n  * #L%\n  */\n \n-package de.metas.serviceprovider.external.issuedetails;\n+package de.metas.reflist;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n import lombok.NonNull;\n+import lombok.Value;\n \n-import java.util.Optional;\n-import java.util.stream.Stream;\n+import javax.annotation.Nullable;\n \n-@AllArgsConstructor\n-@Getter\n-public enum ExternalIssueDetailType\n+@Value\n+@Builder\n+public class RefList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af59e565a73994ed24d38f984a2abb244ca5cc24"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46bcf39ab044c9d07500b6c9260608f90f391aef", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/46bcf39ab044c9d07500b6c9260608f90f391aef", "committedDate": "2020-05-07T07:21:40Z", "message": "use ADRefListItem instead of RefList\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8565326fe1f30105d36c4f18933adaca41681152", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/8565326fe1f30105d36c4f18933adaca41681152", "committedDate": "2020-05-07T07:29:50Z", "message": "drop misspelled column invoicableeffort;\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32e06c35f7f14e25a1cbb9501f1d183af2bdea3", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/a32e06c35f7f14e25a1cbb9501f1d183af2bdea3", "committedDate": "2020-05-07T11:12:06Z", "message": "update retrieveListValuesMap to use CCache instead of `@Cached`\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Mzc1MzQy", "url": "https://github.com/metasfresh/metasfresh/pull/6564#pullrequestreview-407375342", "createdAt": "2020-05-07T11:16:54Z", "commit": {"oid": "a32e06c35f7f14e25a1cbb9501f1d183af2bdea3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxNjo1NFrOGR54lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxNjo1NFrOGR54lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNzM0OA==", "bodyText": "ImmutableMap", "url": "https://github.com/metasfresh/metasfresh/pull/6564#discussion_r421427348", "createdAt": "2020-05-07T11:16:54Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/ad/service/impl/ADReferenceDAO.java", "diffHunk": "@@ -26,11 +25,16 @@\n import java.util.Properties;\n import java.util.Set;\n \n-import static org.adempiere.model.InterfaceWrapperHelper.loadOrNew;\n+import static org.adempiere.model.InterfaceWrapperHelper.newInstanceOutOfTrx;\n import static org.adempiere.model.InterfaceWrapperHelper.saveRecord;\n \n public class ADReferenceDAO implements IADReferenceDAO\n {\n+\tprivate final CCache<ReferenceId, Map<String,ADRefListItem>> cache = CCache.<ReferenceId, Map<String,ADRefListItem>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32e06c35f7f14e25a1cbb9501f1d183af2bdea3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a401fc544e4321371ec1337b91d805a36414db", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/e1a401fc544e4321371ec1337b91d805a36414db", "committedDate": "2020-05-07T11:21:45Z", "message": "ImmutableMap\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3526, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}