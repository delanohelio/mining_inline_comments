{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODkwMzU3", "number": 7172, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTowODo1OFrOEbaH3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNToxNToyNFrOEbaMxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTc1MDA3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTowODo1OFrOHFUyag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToyMDozM1rOHFbgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NTUxNA==", "bodyText": "not a critical request, but please extract Services.get(...) to a field, so that the services are all visible at the class beginning and not stashed away in the code", "url": "https://github.com/metasfresh/metasfresh/pull/7172#discussion_r475345514", "createdAt": "2020-08-24T05:08:58Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -294,12 +297,34 @@ private void linkInvoiceToPaymentIfNeeded(final I_C_Invoice invoice)\n \t\t}\n \t}\n \n+\t@VisibleForTesting\n+\tstatic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = Services.get(IDocTypeBL.class).isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c469b4675e5c62add9a6a006eda8bc6875005b87"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1NTY1MA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7172#discussion_r475455650", "createdAt": "2020-08-24T09:20:33Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -294,12 +297,34 @@ private void linkInvoiceToPaymentIfNeeded(final I_C_Invoice invoice)\n \t\t}\n \t}\n \n+\t@VisibleForTesting\n+\tstatic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = Services.get(IDocTypeBL.class).isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NTUxNA=="}, "originalCommit": {"oid": "c469b4675e5c62add9a6a006eda8bc6875005b87"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTc2MjYwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNToxNToyNFrOHFU5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToyMTowNlrOHFbiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NzI2NQ==", "bodyText": "\u2757 why do the external IDs have to match? Mark doesn't know, maybe you discussed this with @metasnw ?\nTo put it differently:\n\nyou have a sales order that reverences a payment.\nyou invoice this sales order\n=> why not allocate the sales order's payment to the invoice?\n\nIf you need to keep it like this, please add it to the documentation of C_Order.C_Payment_ID, 'C_Order.ExternalIdandC_Payment.ExternalOrderId`, because i think it's intuitive to \"forward\" the referenced payment from the order..but if it's only forwarded if the external-ids match, then this needs to be be documented.", "url": "https://github.com/metasfresh/metasfresh/pull/7172#discussion_r475347265", "createdAt": "2020-08-24T05:15:24Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -294,12 +297,34 @@ private void linkInvoiceToPaymentIfNeeded(final I_C_Invoice invoice)\n \t\t}\n \t}\n \n+\t@VisibleForTesting\n+\tstatic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = Services.get(IDocTypeBL.class).isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal ExternalId paymentExternalId = Services.get(IPaymentDAO.class).getExternalId(PaymentId.ofRepoId(order.getC_Payment_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c469b4675e5c62add9a6a006eda8bc6875005b87"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1NjAwMQ==", "bodyText": "confirmed with torby: we allow any payment linked to the Sales Order, not just those with matching external ID.", "url": "https://github.com/metasfresh/metasfresh/pull/7172#discussion_r475456001", "createdAt": "2020-08-24T09:21:06Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -294,12 +297,34 @@ private void linkInvoiceToPaymentIfNeeded(final I_C_Invoice invoice)\n \t\t}\n \t}\n \n+\t@VisibleForTesting\n+\tstatic boolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = Services.get(IDocTypeBL.class).isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal ExternalId paymentExternalId = Services.get(IPaymentDAO.class).getExternalId(PaymentId.ofRepoId(order.getC_Payment_ID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NzI2NQ=="}, "originalCommit": {"oid": "c469b4675e5c62add9a6a006eda8bc6875005b87"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1383, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}