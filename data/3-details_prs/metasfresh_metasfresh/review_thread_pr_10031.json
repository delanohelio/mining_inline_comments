{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NzYyNzkw", "number": 10031, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDoxMzowMlrOEo3Niw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDoxMzowMlrOEo3Niw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjgzMDgzOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/DefaultView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDoxMzowMlrOHaMrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDoxMzowMlrOHaMrjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMjc4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn _addedFiltersNoDuplicates.add(filterToAdd.withId(\"1\"));\n          \n          \n            \n            \t\t\treturn _addedFiltersNoDuplicates.add(filterToAdd.withId(\"AvoidDuplicateFiltersThatOnlyDifferInTheirId\"));", "url": "https://github.com/metasfresh/metasfresh/pull/10031#discussion_r497232781", "createdAt": "2020-09-30T04:13:02Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/DefaultView.java", "diffHunk": "@@ -876,19 +877,36 @@ public Builder addStickyFilter(@Nullable final DocumentFilter stickyFilter)\n \t\t\t{\n \t\t\t\t_stickyFiltersById = new LinkedHashMap<>();\n \t\t\t}\n-\t\t\t_stickyFiltersById.put(stickyFilter.getFilterId(), stickyFilter);\n+\n+\t\t\tfinal boolean notDuplicate = isNotDuplicateDocumentFilter(stickyFilter);\n+\t\t\tif (notDuplicate)\n+\t\t\t{\n+\t\t\t\t_stickyFiltersById.put(stickyFilter.getFilterId(), stickyFilter);\n+\t\t\t}\n \n \t\t\treturn this;\n \t\t}\n \n+\t\t/**\n+\t\t * Check if the filter was already added in this view either as a normal or a sticky filter.\n+\t\t * <p>\n+\t\t * This can be seen as \"equals ignoring filterId\".\n+\t\t *\n+\t\t * @return true if the filter is a new one\n+\t\t */\n+\t\tprivate boolean isNotDuplicateDocumentFilter(@NonNull final DocumentFilter filterToAdd)\n+\t\t{\n+\t\t\treturn _addedFiltersNoDuplicates.add(filterToAdd.withId(\"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5e392810dec3e211e5772c78b318f9ac919667"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1197, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}