{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjQ0NTg5", "number": 7076, "title": "Gh7075", "bodyText": "", "createdAt": "2020-07-29T07:16:55Z", "url": "https://github.com/metasfresh/metasfresh/pull/7076", "merged": true, "mergeCommit": {"oid": "abb75ee2de127e7314233e28fcb58db57ed350bf"}, "closed": true, "closedAt": "2020-07-29T22:00:24Z", "author": {"login": "pvpurcarcosmin"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5lZrZAH2gAyNDU4MjQ0NTg5OjIwMmFlZjBjNWQ1OGZmMDFhOWVjOGQ5OTc3MWFmODljYTMzODU3ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5rODbAH2gAyNDU4MjQ0NTg5OjE2ZmNmNTc3ZDI2Y2JkZjJkYTBiMGQwMzk2MTRiZDZjOWM1MzUwYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "202aef0c5d58ff01a9ec8d99771af89ca33857eb", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/202aef0c5d58ff01a9ec8d99771af89ca33857eb", "committedDate": "2020-07-29T06:54:18Z", "message": "force pick to HU\nrefs: https://github.com/metasfresh/metasfresh/issues/7052"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2de6706329f473ce608aee7905e2be4ba89385c", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/c2de6706329f473ce608aee7905e2be4ba89385c", "committedDate": "2020-07-29T06:55:30Z", "message": "rename file\nrefs: https://github.com/metasfresh/metasfresh/issues/7052"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749ac07d305c4ef794297b5d5368f296a687c2bf", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/749ac07d305c4ef794297b5d5368f296a687c2bf", "committedDate": "2020-07-29T08:37:21Z", "message": "add trls\nrefs: https://github.com/metasfresh/metasfresh/issues/7052"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Mjk0MTU5", "url": "https://github.com/metasfresh/metasfresh/pull/7076#pullrequestreview-457294159", "createdAt": "2020-07-29T08:15:39Z", "commit": {"oid": "c2de6706329f473ce608aee7905e2be4ba89385c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoxNTo0MFrOG4tnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMToyODoyOFrOG40Nbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyMDg0Mg==", "bodyText": "pls avoid using SystemTime in services.\nBetter, introduce CreateVirtualInventoryWithQtyReq.movementDate and fill it with SystemTime somewhere on upper level.", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462120842", "createdAt": "2020-07-29T08:15:40Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryService.java", "diffHunk": "@@ -198,4 +206,48 @@ public Inventory createInventoryLine(@NonNull final InventoryLineCreateRequest r\n \t{\n \t\treturn inventoryRepository.createInventoryLine(request);\n \t}\n+\n+\t@NonNull\n+\tpublic HuId createInventoryForMissingQty(@NonNull final CreateVirtualInventoryWithQtyReq req)\n+\t{\n+\t\tfinal LocatorId locatorId = warehouseBL.getDefaultLocatorId(req.getWarehouseId());\n+\n+\t\tfinal InventoryHeaderCreateRequest createHeaderRequest = InventoryHeaderCreateRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.orgId(req.getOrgId())\n+\t\t\t\t.docTypeId(getVirtualInventoryDocTypeId(req.getClientId(), req.getOrgId()))\n+\t\t\t\t.movementDate(SystemTime.asZonedDateTime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6706329f473ce608aee7905e2be4ba89385c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyMTY4MA==", "bodyText": "it's a matter of taste...\nbut I want to make u aware that we also have Quantity.toZero()", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462121680", "createdAt": "2020-07-29T08:16:58Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inventory/InventoryService.java", "diffHunk": "@@ -198,4 +206,48 @@ public Inventory createInventoryLine(@NonNull final InventoryLineCreateRequest r\n \t{\n \t\treturn inventoryRepository.createInventoryLine(request);\n \t}\n+\n+\t@NonNull\n+\tpublic HuId createInventoryForMissingQty(@NonNull final CreateVirtualInventoryWithQtyReq req)\n+\t{\n+\t\tfinal LocatorId locatorId = warehouseBL.getDefaultLocatorId(req.getWarehouseId());\n+\n+\t\tfinal InventoryHeaderCreateRequest createHeaderRequest = InventoryHeaderCreateRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.orgId(req.getOrgId())\n+\t\t\t\t.docTypeId(getVirtualInventoryDocTypeId(req.getClientId(), req.getOrgId()))\n+\t\t\t\t.movementDate(SystemTime.asZonedDateTime())\n+\t\t\t\t.warehouseId(req.getWarehouseId())\n+\t\t\t\t.build();\n+\n+\t\tfinal InventoryId inventoryId = createInventoryHeader(createHeaderRequest).getId();\n+\n+\t\tfinal InventoryLineCreateRequest createLineRequest = InventoryLineCreateRequest\n+\t\t\t\t.builder()\n+\t\t\t\t.inventoryId(inventoryId)\n+\t\t\t\t.productId(req.getProductId())\n+\t\t\t\t.qtyBooked(Quantity.zero(req.getQty().getUOM()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6706329f473ce608aee7905e2be4ba89385c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyMjQyMw==", "bodyText": "u can use IQuery.listImmutable(I_M_Picking_Candidate.class)", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462122423", "createdAt": "2020-07-29T08:18:10Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/picking/PickingCandidateRepository.java", "diffHunk": "@@ -600,4 +597,17 @@ private void deleteIssuesToBOMLine(@NonNull final Collection<PickingCandidateId>\n \t\t\t\t.create()\n \t\t\t\t.delete();\n \t}\n+\n+\n+\tpublic ImmutableList<I_M_Picking_Candidate> retrieveCandidatesByHUId(@NonNull final HuId huId)\n+\t{\n+\t\treturn queryBL\n+\t\t\t\t.createQueryBuilder(I_M_Picking_Candidate.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_M_Picking_Candidate.COLUMNNAME_M_HU_ID, huId)\n+\t\t\t\t.create()\n+\t\t\t\t.list()\n+\t\t\t\t.stream()\n+\t\t\t\t.collect(ImmutableList.toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6706329f473ce608aee7905e2be4ba89385c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMzcwNw==", "bodyText": "u can use Map.merge", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462223707", "createdAt": "2020-07-29T11:18:00Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/picking/candidate/commands/ProcessHUsAndPickingCandidateCommand.java", "diffHunk": "@@ -138,23 +138,39 @@ private void allocateHUsToShipmentSchedule()\n \n \tprivate void allocateHUToShipmentSchedule(@NonNull final I_M_HU hu)\n \t{\n-\t\tfinal IPackingItem itemToPack = createItemToPack(HuId.ofRepoId(hu.getM_HU_ID()));\n-\n-\t\tHU2PackingItemsAllocator.builder()\n-\t\t\t\t.itemToPack(itemToPack)\n-\t\t\t\t.allowOverDelivery(allowOverDelivery)\n-\t\t\t\t.pickFromHU(hu)\n-\t\t\t\t.allocate();\n+\t\tfinal List<IPackingItem> itemsToPack = createItemsToPack(HuId.ofRepoId(hu.getM_HU_ID()));\n+\n+\t\titemsToPack.forEach(itemToPack -> {\n+\t\t\tHU2PackingItemsAllocator.builder()\n+\t\t\t\t\t.itemToPack(itemToPack)\n+\t\t\t\t\t.allowOverDelivery(allowOverDelivery)\n+\t\t\t\t\t.pickFromHU(hu)\n+\t\t\t\t\t.allocate();\n+\t\t});\n \t}\n \n-\tprivate IPackingItem createItemToPack(final HuId huId)\n+\tprivate ImmutableList<IPackingItem> createItemsToPack(final HuId huId)\n \t{\n-\t\tfinal PackingItemParts parts = getPickingCandidatesForHUId(huId)\n+\t\tfinal Map<PackingItemGroupingKey, IPackingItem> packingItems = new LinkedHashMap<>();\n+\n+\t\tgetPickingCandidatesForHUId(huId)\n \t\t\t\t.stream()\n \t\t\t\t.map(this::createPackingItemPart)\n-\t\t\t\t.collect(PackingItemParts.collect());\n-\n-\t\treturn PackingItems.newPackingItem(parts);\n+\t\t\t\t.map(PackingItems::newPackingItem)\n+\t\t\t\t.forEach(item -> {\n+\t\t\t\t\tfinal IPackingItem existingItem = packingItems.get(item.getGroupingKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749ac07d305c4ef794297b5d5368f296a687c2bf"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNjk4Mg==", "bodyText": "refactor this and introduce IHandlingUnits.isEmptyStorage(I_M_HU)", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462226982", "createdAt": "2020-07-29T11:24:31Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/picking/pickingslot/process/WEBUI_Picking_M_Picking_Candidate_Process.java", "diffHunk": "@@ -148,4 +154,18 @@ protected void postProcess(final boolean success)\n \t\tinvalidatePickingSlotsView();\n \t\tinvalidatePackablesView();\n \t}\n+\n+\tprivate boolean checkIsEmpty(final PickingSlotRow pickingSlotRowOrHU)\n+\t{\n+\t\tCheck.assume(pickingSlotRowOrHU.isPickedHURow(), \"Was expecting an HuId but found none!\");\n+\n+\t\tif (pickingSlotRowOrHU.getHuQtyCU() != null && pickingSlotRowOrHU.getHuQtyCU().signum() > 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal I_M_HU hu = handlingUnitsBL.getById(pickingSlotRowOrHU.getHuId());\n+\n+\t\treturn handlingUnitsBL.getStorageFactory().streamHUProductStorages(hu).allMatch(IProductStorage::isEmpty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749ac07d305c4ef794297b5d5368f296a687c2bf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODM1MA==", "bodyText": "refactor this in a new method, i.e. extractOrderIds(Set)", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462228350", "createdAt": "2020-07-29T11:27:23Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/picking/pickingslot/process/WEBUI_Picking_PickQtyToExistingHU.java", "diffHunk": "@@ -135,4 +129,76 @@ public Object getParameterDefaultValue(@NonNull final IProcessDefaultParameter p\n \t\t}\n \n \t}\n+\n+\tprotected void validatePickingToHU()\n+\t{\n+\t\tfinal PickingSlotRow pickingSlotRow = getSingleSelectedRow();\n+\n+\t\tfinal I_M_HU hu = handlingUnitsBL.getById(pickingSlotRow.getHuId());\n+\n+\t\tif (handlingUnitsBL.isVirtual(hu))\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_TO_EXISTING_CUS_NOT_ALLOWED));\n+\t\t}\n+\n+\t\tfinal Set<ShipmentScheduleId> shipmentScheduleIds = getPickingCandidateService().getScheduleIdsByHuId(pickingSlotRow.getHuId());\n+\n+\t\tif (shipmentScheduleIds.isEmpty())\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_NO_PICKED_HU_FOUND));\n+\t\t}\n+\n+\t\tfinal ImmutableSet<OrderId> orderIds = getShipmentSchedulePA().getByIds(shipmentScheduleIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749ac07d305c4ef794297b5d5368f296a687c2bf"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODg0Ng==", "bodyText": "only one asList() is enough :)", "url": "https://github.com/metasfresh/metasfresh/pull/7076#discussion_r462228846", "createdAt": "2020-07-29T11:28:28Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/picking/pickingslot/process/WEBUI_Picking_PickQtyToExistingHU.java", "diffHunk": "@@ -135,4 +129,76 @@ public Object getParameterDefaultValue(@NonNull final IProcessDefaultParameter p\n \t\t}\n \n \t}\n+\n+\tprotected void validatePickingToHU()\n+\t{\n+\t\tfinal PickingSlotRow pickingSlotRow = getSingleSelectedRow();\n+\n+\t\tfinal I_M_HU hu = handlingUnitsBL.getById(pickingSlotRow.getHuId());\n+\n+\t\tif (handlingUnitsBL.isVirtual(hu))\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_TO_EXISTING_CUS_NOT_ALLOWED));\n+\t\t}\n+\n+\t\tfinal Set<ShipmentScheduleId> shipmentScheduleIds = getPickingCandidateService().getScheduleIdsByHuId(pickingSlotRow.getHuId());\n+\n+\t\tif (shipmentScheduleIds.isEmpty())\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_NO_PICKED_HU_FOUND));\n+\t\t}\n+\n+\t\tfinal ImmutableSet<OrderId> orderIds = getShipmentSchedulePA().getByIds(shipmentScheduleIds)\n+\t\t\t\t.values()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(I_M_ShipmentSchedule::getC_Order_ID)\n+\t\t\t\t.map(OrderId::ofRepoIdOrNull)\n+\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t.collect(ImmutableSet.toImmutableSet());\n+\n+\t\tif (orderIds.isEmpty())\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_NO_PICKED_HU_FOUND));\n+\t\t}\n+\n+\t\tif (orderIds.size() > 1)\n+\t\t{\n+\t\t\tthrow new AdempiereException(msgBL.getTranslatableMsgText(MSG_WEBUI_PICKING_TO_THE_SAME_HU_FOR_MULTIPLE_ORDERS_NOT_ALLOWED));\n+\t\t}\n+\n+\t\tfinal OrderId orderIdOfThePickedHU = orderIds.asList().asList().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749ac07d305c4ef794297b5d5368f296a687c2bf"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de7607dfeab6c30a41a92ec10343d7b01829a1de", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/de7607dfeab6c30a41a92ec10343d7b01829a1de", "committedDate": "2020-07-29T12:47:08Z", "message": "requested changes\nrefs: https://github.com/metasfresh/metasfresh/issues/7075"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37ad10d2bfba4324d4d4cd398c8ddc69a7b4ebf", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d37ad10d2bfba4324d4d4cd398c8ddc69a7b4ebf", "committedDate": "2020-07-29T13:27:07Z", "message": "small fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7075"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16fcf577d26cbdf2da0b0d039614bd6c9c5350a0", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/16fcf577d26cbdf2da0b0d039614bd6c9c5350a0", "committedDate": "2020-07-29T13:41:02Z", "message": "small fix\nrefs: https://github.com/metasfresh/metasfresh/issues/7075"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3228, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}