{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDg5NTM1", "number": 6950, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNzo1M1rOELoIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMDoyM1rOELwojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI3NDA1OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNzo1NFrOGtRdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozNzowN1rOGtSB3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTE4Nw==", "bodyText": "suggestion: don't have to cache it here. relly entirely on PickingConfigRepositoryV2", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450125187", "createdAt": "2020-07-06T10:17:54Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzNDQ5Mw==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450134493", "createdAt": "2020-07-06T10:37:07Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTE4Nw=="}, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjMwNjg2OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODowOVrOGtRxgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDo1NTowOFrOGtSidg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDMwNw==", "bodyText": "instead of ImmutablePair<DocumentId, PickingCandidate> why not having a small class like\nclass WebuiPickHUResult { DocumentId rowId; PickingCadidate pickingCandidate } ?", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450130307", "createdAt": "2020-07-06T10:28:09Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0MjgzOA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450142838", "createdAt": "2020-07-06T10:55:08Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDMwNw=="}, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjMwODUxOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODo0M1rOGtRyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozODoyMVrOGtSEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDU2Ng==", "bodyText": "minor: u can use ImmutableList.toImmutableList()", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450130566", "createdAt": "2020-07-06T10:28:43Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)\n+\t{\n+\t\treturn streamRowsEligibleForPicking(selectedRows)\n+\t\t\t\t.map(row -> {\n+\t\t\t\t\tfinal PickHUResult result = pickingCandidateService.pickHU(createPickRequest(row));\n+\t\t\t\t\treturn ImmutablePair.of(row.getId(), result.getPickingCandidate());\n+\t\t\t\t})\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());\n+\t}\n+\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> setPackingInstruction(final List<ProductsToPickRow> selectedRows, final HuPackingInstructionsId huPackingInstructionsId)\n+\t{\n+\n+\t\tfinal Map<PickingCandidateId, DocumentId> rowIdsByPickingCandidateId = streamRowsEligibleForPacking(selectedRows)\n+\t\t\t\t.collect(ImmutableMap.toImmutableMap(ProductsToPickRow::getPickingCandidateId, ProductsToPickRow::getId));\n+\n+\t\tfinal Set<PickingCandidateId> pickingCandidateIds = rowIdsByPickingCandidateId.keySet();\n+\t\tfinal List<PickingCandidate> pickingCandidates = pickingCandidateService.setHuPackingInstructionId(pickingCandidateIds, huPackingInstructionsId);\n+\n+\t\treturn pickingCandidates.stream()\n+\t\t\t\t.map(cand -> ImmutablePair.of(rowIdsByPickingCandidateId.get(cand.getId()), cand))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzNTA2Mw==", "bodyText": "Pretty sure i looked for that one and missed it. no idea how.\nAnyway, done.", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450135063", "createdAt": "2020-07-06T10:38:21Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)\n+\t{\n+\t\treturn streamRowsEligibleForPicking(selectedRows)\n+\t\t\t\t.map(row -> {\n+\t\t\t\t\tfinal PickHUResult result = pickingCandidateService.pickHU(createPickRequest(row));\n+\t\t\t\t\treturn ImmutablePair.of(row.getId(), result.getPickingCandidate());\n+\t\t\t\t})\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());\n+\t}\n+\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> setPackingInstruction(final List<ProductsToPickRow> selectedRows, final HuPackingInstructionsId huPackingInstructionsId)\n+\t{\n+\n+\t\tfinal Map<PickingCandidateId, DocumentId> rowIdsByPickingCandidateId = streamRowsEligibleForPacking(selectedRows)\n+\t\t\t\t.collect(ImmutableMap.toImmutableMap(ProductsToPickRow::getPickingCandidateId, ProductsToPickRow::getId));\n+\n+\t\tfinal Set<PickingCandidateId> pickingCandidateIds = rowIdsByPickingCandidateId.keySet();\n+\t\tfinal List<PickingCandidate> pickingCandidates = pickingCandidateService.setHuPackingInstructionId(pickingCandidateIds, huPackingInstructionsId);\n+\n+\t\treturn pickingCandidates.stream()\n+\t\t\t\t.map(cand -> ImmutablePair.of(rowIdsByPickingCandidateId.get(cand.getId()), cand))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDU2Ng=="}, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjMxODQ1OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozMTo0OFrOGtR4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTowNzowN1rOGtS4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMjEwNw==", "bodyText": "not sure if it will work, but consider:\n\nmoving all methods of this class into ProductsToPickRowsService\ndelete this class", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450132107", "createdAt": "2020-07-06T10:31:48Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0ODQxNw==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450148417", "createdAt": "2020-07-06T11:07:07Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMjEwNw=="}, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjcyMjI4OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPick_PickAndPackSelected.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0NToyM1rOGtVuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoyMzowN1rOGtun_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDk5NQ==", "bodyText": "pls extract Services.get(IHandlingUnitsDAO.class) to be a field", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450194995", "createdAt": "2020-07-06T12:45:23Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPick_PickAndPackSelected.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_M_HU_PI;\n+import de.metas.i18n.AdMessageKey;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.process.RunOutOfTrx;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.WebuiPickHUResult;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+public class ProductsToPick_PickAndPackSelected extends ProductsToPickViewBasedProcess\n+{\n+\tprivate final ProductsToPickRowsService rowsService = SpringContextHolder.instance.getBean(ProductsToPickRowsService.class);\n+\n+\tprivate final AdMessageKey MSG_SET_DEFAULT_PACKING_INSTRUCTION = AdMessageKey.of(\"de.metas.ui.web.pickingV2.productsToPick.process.ProductsToPick_PickAndPackSelected.SetDefaultPackingInstruction\");\n+\n+\t@Override\n+\tprotected ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (!isPickerProfile())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"only picker shall pick\");\n+\t\t}\n+\n+\t\tif (!rowsService.anyRowsEligibleForPicking(getSelectedRows()))\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"select only rows that can be picked\");\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\t@RunOutOfTrx\n+\tprotected String doIt()\n+\t{\n+\t\tensureDefaultPackingInstructionExists();\n+\t\tpick();\n+\t\tpack();\n+\n+\t\tinvalidateView();\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate void pick()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.pick(getSelectedRows());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\tprivate void pack()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.setPackingInstruction(getSelectedRows(), getHuPackingInstructionsId());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\t@NonNull\n+\tprivate HuPackingInstructionsId getHuPackingInstructionsId()\n+\t{\n+\t\tfinal I_M_HU_PI defaultPIForPicking = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMzAwNw==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450603007", "createdAt": "2020-07-07T04:23:07Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPick_PickAndPackSelected.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_M_HU_PI;\n+import de.metas.i18n.AdMessageKey;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.process.RunOutOfTrx;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.WebuiPickHUResult;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+public class ProductsToPick_PickAndPackSelected extends ProductsToPickViewBasedProcess\n+{\n+\tprivate final ProductsToPickRowsService rowsService = SpringContextHolder.instance.getBean(ProductsToPickRowsService.class);\n+\n+\tprivate final AdMessageKey MSG_SET_DEFAULT_PACKING_INSTRUCTION = AdMessageKey.of(\"de.metas.ui.web.pickingV2.productsToPick.process.ProductsToPick_PickAndPackSelected.SetDefaultPackingInstruction\");\n+\n+\t@Override\n+\tprotected ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (!isPickerProfile())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"only picker shall pick\");\n+\t\t}\n+\n+\t\tif (!rowsService.anyRowsEligibleForPicking(getSelectedRows()))\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"select only rows that can be picked\");\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\t@RunOutOfTrx\n+\tprotected String doIt()\n+\t{\n+\t\tensureDefaultPackingInstructionExists();\n+\t\tpick();\n+\t\tpack();\n+\n+\t\tinvalidateView();\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate void pick()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.pick(getSelectedRows());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\tprivate void pack()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.setPackingInstruction(getSelectedRows(), getHuPackingInstructionsId());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\t@NonNull\n+\tprivate HuPackingInstructionsId getHuPackingInstructionsId()\n+\t{\n+\t\tfinal I_M_HU_PI defaultPIForPicking = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDk5NQ=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjc1Nzc5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo1NToxNFrOGtWDjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTowNDo1MlrOGtvNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDQ2MA==", "bodyText": "we usually ignore inactive records and in the AD_TableIndex-UC's whereclauses we have IsActive='Y'.\nThat way, some old stuff can be deactivated and doesn't play any role anymore and is also left untouched.\nThere are situations where we need also inactive records, but here I don't see why we should deviate from the default approach", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450200460", "createdAt": "2020-07-06T12:55:14Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "diffHunk": "@@ -487,6 +487,17 @@ public I_M_HU_Item retrieveAggregatedItemOrNull(final I_M_HU hu, final I_M_HU_PI\n \t\treturn Collections.unmodifiableList(piItems);\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic I_M_HU_PI retrievePIDefaultForPicking()\n+\t{\n+\t\treturn Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_PI.class)\n+\t\t\t\t.addEqualsFilter(I_M_HU_PI.COLUMNNAME_IsDefaultForPicking, true)\n+\t\t\t\t.create()\n+\t\t\t\t.setOnlyActiveRecords(false) // also return inactive PIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMzAzNA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450603034", "createdAt": "2020-07-07T04:23:16Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "diffHunk": "@@ -487,6 +487,17 @@ public I_M_HU_Item retrieveAggregatedItemOrNull(final I_M_HU hu, final I_M_HU_PI\n \t\treturn Collections.unmodifiableList(piItems);\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic I_M_HU_PI retrievePIDefaultForPicking()\n+\t{\n+\t\treturn Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_PI.class)\n+\t\t\t\t.addEqualsFilter(I_M_HU_PI.COLUMNNAME_IsDefaultForPicking, true)\n+\t\t\t\t.create()\n+\t\t\t\t.setOnlyActiveRecords(false) // also return inactive PIs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDQ2MA=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMzUyMA==", "bodyText": "this raises a question:\n\nPI1 = active\nPI1.IsDefaultForPicking = Y\nPI1 = inactive\nPI2.IsDefaultForPicking = Y\neverything is ok so far\n\nAt this point, if i activate PI1 again, ill get an error UQ key constraint violation. Is this acceptable?", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450603520", "createdAt": "2020-07-07T04:25:36Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "diffHunk": "@@ -487,6 +487,17 @@ public I_M_HU_Item retrieveAggregatedItemOrNull(final I_M_HU hu, final I_M_HU_PI\n \t\treturn Collections.unmodifiableList(piItems);\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic I_M_HU_PI retrievePIDefaultForPicking()\n+\t{\n+\t\treturn Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_PI.class)\n+\t\t\t\t.addEqualsFilter(I_M_HU_PI.COLUMNNAME_IsDefaultForPicking, true)\n+\t\t\t\t.create()\n+\t\t\t\t.setOnlyActiveRecords(false) // also return inactive PIs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDQ2MA=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMjY1MQ==", "bodyText": "At this point, if i activate PI1 again, ill get an error UQ key constraint violation. Is this acceptable?\n\nYou are right, that's also not great. I believe what i wrote above assumes that users don't have write acccess to the isactive flag.\nI think we can leave it here the way it is now, but the convention I described doesn't really seem valid anymore.", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450612651", "createdAt": "2020-07-07T05:04:52Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "diffHunk": "@@ -487,6 +487,17 @@ public I_M_HU_Item retrieveAggregatedItemOrNull(final I_M_HU hu, final I_M_HU_PI\n \t\treturn Collections.unmodifiableList(piItems);\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic I_M_HU_PI retrievePIDefaultForPicking()\n+\t{\n+\t\treturn Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_PI.class)\n+\t\t\t\t.addEqualsFilter(I_M_HU_PI.COLUMNNAME_IsDefaultForPicking, true)\n+\t\t\t\t.create()\n+\t\t\t\t.setOnlyActiveRecords(false) // also return inactive PIs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDQ2MA=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjc3NjIzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_HU_PI.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowMDoyMVrOGtWO7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoyODoxM1rOGtusYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMzM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (!newDefault.isDefaultForPicking())\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n          \n          \n            \n            \t\tif (previousDefault != null)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tpreviousDefault.setIsDefaultForPicking(false);\n          \n          \n            \n            \t\t\tInterfaceWrapperHelper.save(previousDefault);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(newDefault))\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tif (!newDefault.isDefaultForPicking())\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\treturn;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n          \n          \n            \n            \t\t\tif (previousDefault != null)\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\tlogger.debug(\"M_HU_PI={} is now IsDefaultForPicking; -> Change previousDefault M_HU_PI={} to IsDefaultForPicking='N'\",\n          \n          \n            \n            \t\t\t\t\t\tnewDefault.getM_HU_PI_ID(), previousDefault.getM_HU_PI_ID());\n          \n          \n            \n            \t\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n          \n          \n            \n            \t\t\t\tInterfaceWrapperHelper.save(previousDefault);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450203372", "createdAt": "2020-07-06T13:00:21Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_HU_PI.java", "diffHunk": "@@ -47,4 +46,22 @@ public void onDeleteMHUPI(final I_M_HU_PI pi)\n \t\t\tInterfaceWrapperHelper.delete(version);\n \t\t}\n \t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE },\n+\t\t\tifColumnsChanged = I_M_HU_PI.COLUMNNAME_IsDefaultForPicking\n+\t)\n+\tpublic void ensureOnlyOneDefaultForPicking(@NonNull final I_M_HU_PI newDefault)\n+\t{\n+\t\tif (!newDefault.isDefaultForPicking())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n+\t\tif (previousDefault != null)\n+\t\t{\n+\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n+\t\t\tInterfaceWrapperHelper.save(previousDefault);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDAyMQ==", "bodyText": "also, instead of\n\nInterfaceWrapperHelper.save(previousDefault);\n\npls introduce and use: IHandlingUnitsDAO.save(I_M_HU_PI)", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450340021", "createdAt": "2020-07-06T16:27:59Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_HU_PI.java", "diffHunk": "@@ -47,4 +46,22 @@ public void onDeleteMHUPI(final I_M_HU_PI pi)\n \t\t\tInterfaceWrapperHelper.delete(version);\n \t\t}\n \t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE },\n+\t\t\tifColumnsChanged = I_M_HU_PI.COLUMNNAME_IsDefaultForPicking\n+\t)\n+\tpublic void ensureOnlyOneDefaultForPicking(@NonNull final I_M_HU_PI newDefault)\n+\t{\n+\t\tif (!newDefault.isDefaultForPicking())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n+\t\tif (previousDefault != null)\n+\t\t{\n+\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n+\t\t\tInterfaceWrapperHelper.save(previousDefault);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMzM3Mg=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNDEyOA==", "bodyText": "done and done", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450604128", "createdAt": "2020-07-07T04:28:13Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_HU_PI.java", "diffHunk": "@@ -47,4 +46,22 @@ public void onDeleteMHUPI(final I_M_HU_PI pi)\n \t\t\tInterfaceWrapperHelper.delete(version);\n \t\t}\n \t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE },\n+\t\t\tifColumnsChanged = I_M_HU_PI.COLUMNNAME_IsDefaultForPicking\n+\t)\n+\tpublic void ensureOnlyOneDefaultForPicking(@NonNull final I_M_HU_PI newDefault)\n+\t{\n+\t\tif (!newDefault.isDefaultForPicking())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n+\t\tif (previousDefault != null)\n+\t\t{\n+\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n+\t\t\tInterfaceWrapperHelper.save(previousDefault);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMzM3Mg=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY2MjEyOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyMlrOGteoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMzo0NlrOGtuglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDkyOQ==", "bodyText": "@NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450340929", "createdAt": "2020-07-06T16:29:22Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMTExMQ==", "bodyText": "yes, i overlooked that.\ndone", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450601111", "createdAt": "2020-07-07T04:13:46Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDkyOQ=="}, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY2MjUyOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyOVrOGteofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMzo0MFrOGtughQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDk4OA==", "bodyText": "@NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450340988", "createdAt": "2020-07-06T16:29:29Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMTA5Mw==", "bodyText": "yes, i overlooked that.\ndone", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450601093", "createdAt": "2020-07-07T04:13:40Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDk4OA=="}, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY2NjA0OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/rows/WebuiPickHUResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMDoyM1rOGteqkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMzozNFrOGtugdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MTUyMw==", "bodyText": "mark those fields as @NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450341523", "createdAt": "2020-07-06T16:30:23Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/rows/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.rows;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMTA3OQ==", "bodyText": "yes, i overlooked that.\ndone", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450601079", "createdAt": "2020-07-07T04:13:34Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/rows/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.rows;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MTUyMw=="}, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1411, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}