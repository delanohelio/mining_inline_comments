{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDExNDYz", "number": 6084, "title": "5816-app - Effort based invoicing for service companies", "bodyText": "#5816", "createdAt": "2020-01-23T15:08:55Z", "url": "https://github.com/metasfresh/metasfresh/pull/6084", "merged": true, "mergeCommit": {"oid": "cb6adacfe3db1746ebc09f9b2c2e502f131c3e30"}, "closed": true, "closedAt": "2020-04-01T12:05:56Z", "author": {"login": "metas-ts"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbqEka8gH2gAyMzY2NDExNDYzOmYxM2VkNjI0YjgwNzU2YTI3MGZhZjFmZDQwY2JhMjczNGI1YmQ5ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTVbc3AH2gAyMzY2NDExNDYzOmQ3NjRjYmIyMjM2NDM5NmJmOGQxMTllZTJjMThmZDYwY2NjMTg4MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f13ed624b80756a270faf1fd40cba2734b5bd9d5", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f13ed624b80756a270faf1fd40cba2734b5bd9d5", "committedDate": "2019-11-25T05:59:09Z", "message": "5816-app - Effort based invoicing for service companies\n\nadd initial tables for issue and timebooking\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb4936f397c3779312c196aca1135f5b2fa5071", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/bbb4936f397c3779312c196aca1135f5b2fa5071", "committedDate": "2019-11-25T06:32:03Z", "message": "5816-app - Effort based invoicing for service companies\n\nadd initial generated model classes\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b99a2b03db742c13dd4906124859632f19003f", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/49b99a2b03db742c13dd4906124859632f19003f", "committedDate": "2019-11-25T09:17:34Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8324e21631ee1903621c2c998576496e675eeba2", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8324e21631ee1903621c2c998576496e675eeba2", "committedDate": "2019-11-25T09:41:24Z", "message": "minor typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cd28536952244ba1541d3d98dd92d6a94bd350", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/35cd28536952244ba1541d3d98dd92d6a94bd350", "committedDate": "2019-12-01T02:55:58Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06d9eb191683c3e9f451d7cbe7b059b35a08c748", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/06d9eb191683c3e9f451d7cbe7b059b35a08c748", "committedDate": "2019-12-01T03:36:28Z", "message": "5816-app - Effort based invoicing for service companies\n\nstart with domain model, repo and invoice candidate handler\n(WIP, compile errors)\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e5edee418d374a99a3f62a544926a1c6c5bc85", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c4e5edee418d374a99a3f62a544926a1c6c5bc85", "committedDate": "2019-12-01T20:24:45Z", "message": "5816-app - Effort based invoicing for service companies\n\nminor progress creating the IC\n(WIP, compile errors)\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba73496f9fc6db764a9634056253062bdd5ff2f8", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ba73496f9fc6db764a9634056253062bdd5ff2f8", "committedDate": "2019-12-26T10:10:54Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app\n\nsolved Conflicts:\n\tde.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerDAO.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a971ca5b751e8ea8b9aa12e6ba8b5f93e17fca00", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a971ca5b751e8ea8b9aa12e6ba8b5f93e17fca00", "committedDate": "2019-12-27T20:08:06Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a2b4df126002f601a00dc4a98055a75675c18fb", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3a2b4df126002f601a00dc4a98055a75675c18fb", "committedDate": "2020-01-23T15:12:48Z", "message": "Merge branch 'master' into gh5816-app\n\nsolved Conflicts:\n\tde.metas.adempiere.adempiere/base/src/main/java/de/metas/bpartner/service/IBPartnerDAO.java\n\tde.metas.material/material-dispo-service_log_to_logstash.launch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5fd241b6a1cd40ef2ad1ca3db4e6bab7498d3cc", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c5fd241b6a1cd40ef2ad1ca3db4e6bab7498d3cc", "committedDate": "2020-01-27T14:30:10Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169fb39d7955753483c11cb1f3036a3ff324a1b3", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/169fb39d7955753483c11cb1f3036a3ff324a1b3", "committedDate": "2020-01-27T14:42:17Z", "message": "solve compile problem by removing not-yet-clear code\n\nmuch easier to add later when the requirements presented themselves\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420610129a759a9b4190cfa038de5eff65aeff98", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/420610129a759a9b4190cfa038de5eff65aeff98", "committedDate": "2020-02-09T18:43:10Z", "message": "Merge branch 'gh5816-app' of github.com:metasfresh/metasfresh into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a508dd01385fe039f5793374866ddcf9104b7008", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a508dd01385fe039f5793374866ddcf9104b7008", "committedDate": "2020-02-09T18:43:16Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e754cd54b3e5d18865e253ab576250104df5dfff", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/e754cd54b3e5d18865e253ab576250104df5dfff", "committedDate": "2020-02-10T07:05:06Z", "message": "5816-app - Effort based invoicing for service companies\n\n* add further required tables\n* fix existing SQL's filename\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0728a9cc98ace6e3eea4f26b2c4f6116e45e794", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/c0728a9cc98ace6e3eea4f26b2c4f6116e45e794", "committedDate": "2020-02-10T13:21:28Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eef9d91bb1b826e49d5e5da60276d4e3fb2167d", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9eef9d91bb1b826e49d5e5da60276d4e3fb2167d", "committedDate": "2020-02-10T14:28:00Z", "message": "5816-app - Effort based invoicing for service companies\n\n* add further required tables\n* add windows&stuff\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeaed58cabaca28714343e85ec7d6327aae38052", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/eeaed58cabaca28714343e85ec7d6327aae38052", "committedDate": "2020-02-11T11:14:59Z", "message": "Merge remote-tracking branch 'origin/master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8a2eb83aa47cfa24c2b99607dfd7537c1a7405", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5c8a2eb83aa47cfa24c2b99607dfd7537c1a7405", "committedDate": "2020-02-11T11:45:58Z", "message": "5816-app - Effort based invoicing for service companies\n\n* attempts to fix SQL error\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0c86a4c31585026dc9ac2bd820a36bb0d26769", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5a0c86a4c31585026dc9ac2bd820a36bb0d26769", "committedDate": "2020-02-11T13:11:57Z", "message": "5816-app - Effort based invoicing for service companies\n\n* attempts to fix another SQL error\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f40ccb2bca6ba7a7201ff825ca52c21fc0df14", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/11f40ccb2bca6ba7a7201ff825ca52c21fc0df14", "committedDate": "2020-02-11T20:50:04Z", "message": "5816-app - Effort based invoicing for service companies\n\n* more SQL fixes\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea39e10f65576c74102168f4228833631fb26a8", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3ea39e10f65576c74102168f4228833631fb26a8", "committedDate": "2020-02-11T21:11:09Z", "message": "5816-app - Effort based invoicing for service companies\n\n* more SQL fixes\n#5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed765e976f174de9703ca8d79089e28f89fc8121", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ed765e976f174de9703ca8d79089e28f89fc8121", "committedDate": "2020-03-09T07:32:24Z", "message": "Merge branch 'master' into gh5816-app\n\nsolved Conflicts:\n\tde.metas.material/material-dispo-service_log_to_logstash.launch\n\tde.metas.payment.sepa/base/de.metas.payment.sepa.base_GenerateModels.launch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3683a4e1ba64cb56e47b7bbd312c428186b96e1b", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3683a4e1ba64cb56e47b7bbd312c428186b96e1b", "committedDate": "2020-03-09T07:32:53Z", "message": "Merge branch 'gh5816-app' of github.com:metasfresh/metasfresh into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f3732354679d888025b375463a1b271ad2059c", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d8f3732354679d888025b375463a1b271ad2059c", "committedDate": "2020-03-27T15:44:57Z", "message": "initial commit\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b31e2c73714641dc45a04f26d97854b3aedd222", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/5b31e2c73714641dc45a04f26d97854b3aedd222", "committedDate": "2020-03-27T15:51:33Z", "message": "add metasfresh.version tags in pom file\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ce8070ef4e635d02e0bcfd13903320d4bb14b4", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/80ce8070ef4e635d02e0bcfd13903320d4bb14b4", "committedDate": "2020-03-27T16:06:05Z", "message": "Merge branch 'master' into gh5816-app\n\n# Conflicts:\n#\tde.metas.banking/de.metas.banking-GenerateModel-table.launch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1958a74e6560d121a4b13845be50f0e10b2a025a", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/1958a74e6560d121a4b13845be50f0e10b2a025a", "committedDate": "2020-03-28T07:19:29Z", "message": "changed Nullable source lib\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb299a2143cf48aad5baf4dffed181315c5e82ad", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/eb299a2143cf48aad5baf4dffed181315c5e82ad", "committedDate": "2020-03-30T09:05:38Z", "message": "adjust issue windows\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/77a1a5a18ef82556af7ba7773aa7c28b23a141e6", "committedDate": "2020-03-30T09:30:14Z", "message": "Merge branch 'master' into gh5816-app\n\n# Conflicts:\n#\tde.metas.material/material-dispo-service.launch\n#\tde.metas.material/material-dispo-service_jrebel.launch\n#\tde.metas.printing.rest-api-impl/PrintServiceMain.launch\n#\tde.metas.report/metasfresh-report-service-standalone/metasfresh-report-service-standalone.launch\n#\tde.metas.report/metasfresh-report-service-standalone/metasfresh-report-service-standalone_jrebel.launch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjg2MTU3", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-383686157", "createdAt": "2020-03-30T09:38:40Z", "commit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTozODo0MVrOF9hf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTozODo0MVrOF9hf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NjMxOQ==", "bodyText": "why not using ofRepoIdOrNull like we have it everywhere (e.g. BPartnerId)?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400056319", "createdAt": "2020-03-30T09:38:41Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,9 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\tpublic static UserId ofNullableRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d7f8e7968d9df9ef81f558543cd563a714aa47d3", "committedDate": "2020-03-30T11:26:33Z", "message": "add ExternalSystemReference window\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzI3Mzk3", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-383727397", "createdAt": "2020-03-30T10:35:00Z", "commit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDozNTowMVrOF9jjrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMzozM1rOF9nIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5MDAzMA==", "bodyText": "weird, i wonder why de.metas.salescandidate.base wasn't there before..but seems to make sense", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400090030", "createdAt": "2020-03-30T10:35:01Z", "author": {"login": "metas-ts"}, "path": "de.metas.fresh/de.metas.fresh.base/pom.xml", "diffHunk": "@@ -281,6 +281,18 @@\n \t\t\t<version>${metasfresh.version}</version>\n \t\t</dependency>\n \n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODU3MQ==", "bodyText": "why optional (tbh i never really understood that flag)?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400098571", "createdAt": "2020-03-30T10:50:55Z", "author": {"login": "metas-ts"}, "path": "de.metas.issue.tracking.github/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>de.metas.parent</artifactId>\n+        <groupId>de.metas</groupId>\n+        <version>10.0.0</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>de.metas.issue.tracking</groupId>\n+    <artifactId>de.metas.issue.tracking.github</artifactId>\n+\n+    <properties>\n+        <migration-sql-basedir></migration-sql-basedir>\n+        <metasfresh.version>[1,10.0.0]</metasfresh.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-context</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTQ0NA==", "bodyText": "InterfaceWrapperHelper.loadOrNew does this already", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400125444", "createdAt": "2020-03-30T11:41:38Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.sql.Timestamp;\n+import java.util.Optional;\n+\n+@Repository\n+public class MilestoneRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic MilestoneId store(@NonNull final Milestone milestone)\n+\t{\n+\t\tfinal I_S_Milestone record = milestone.getMilestoneId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(milestone.getMilestoneId(), I_S_Milestone.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzAzMg==", "bodyText": "we have a dedicated method InterfaceWratterHelper.loadOrNew() for this", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137032", "createdAt": "2020-03-30T12:03:23Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzMzMQ==", "bodyText": "pls call it save to be in line with our conventions", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137331", "createdAt": "2020-03-30T12:03:52Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzU5NQ==", "bodyText": "here you should use saveRecord (conventions).", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137595", "createdAt": "2020-03-30T12:04:20Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODAzNg==", "bodyText": "i think here you forgot to load the details", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400138036", "createdAt": "2020-03-30T12:05:16Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\tfinal BudgetIssueId budgetIssueId = BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID());\n+\t\tbudgetIssue.setBudgetIssueId(budgetIssueId);\n+\n+\t\tpersistIssueDetails(budgetIssue);\n+\n+\t\treturn budgetIssue;\n+\t}\n+\n+\tpublic Optional<BudgetIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\t final I_S_Budget_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Budget_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Budget_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Budget_Issue.class);\n+\n+\t\t return budget_issue != null ? Optional.of(buildBudgetIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssueEntity(final I_S_Budget_Issue record)\n+\t{\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.budgetIssueId(BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Current_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(BudgetIssueType.getTypeByValue(record.getBudget_Issue_Type()))\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODk3MQ==", "bodyText": "all the same remarks as in BugdetIssueRepository", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400138971", "createdAt": "2020-03-30T12:07:02Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTI0Mg==", "bodyText": "check the annotation de.metas.process.Param and how it's used in other processes", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400141242", "createdAt": "2020-03-30T12:11:09Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImportProcess.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.process.JavaProcess;\n+import de.metas.serviceprovider.external.project.ExternalProjectReference;\n+import de.metas.serviceprovider.external.project.ExternalProjectReferenceId;\n+import de.metas.serviceprovider.external.project.ExternalProjectRepository;\n+import de.metas.serviceprovider.importer.IssueImporterService;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import org.adempiere.service.ISysConfigBL;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.serviceprovider.external.project.ExternalSystem.GITHUB;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.GitHubImporterSysConfig.ACCESS_TOKEN;\n+\n+public class GithubImportProcess extends JavaProcess\n+{\n+\tprivate final String PARAM_NAME_EXTERNAL_PROJECT_REFERENCE_ID = \"S_ExternalProjectReference_ID\";\n+\tprivate final String PARAM_NAME_ISSUE_NO = \"IssueNumbers\";\n+\n+\tprivate int externalProjectReferenceId;\n+\tprivate ImmutableList<String> issueNoList;\n+\n+\tprivate final ExternalProjectRepository externalProjectRepository = SpringContextHolder.instance.getBean(ExternalProjectRepository.class);\n+\tprivate final IssueImporterService issueImporterService = SpringContextHolder.instance.getBean(IssueImporterService.class);\n+\tprivate final GithubImporterService githubImporterService = SpringContextHolder.instance.getBean(GithubImporterService.class);\n+\tprivate final ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n+\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tgetParameters().forEach(param -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODYyOQ==", "bodyText": "i think this is something for Loggable, too", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400148629", "createdAt": "2020-03-30T12:23:33Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.issue.tracking.github.api.v3.model.FetchIssueByIdRequest;\n+import de.metas.issue.tracking.github.api.v3.model.GithubMilestone;\n+import de.metas.issue.tracking.github.api.v3.model.Issue;\n+import de.metas.issue.tracking.github.api.v3.model.Label;\n+import de.metas.issue.tracking.github.api.v3.model.ResourceState;\n+import de.metas.issue.tracking.github.api.v3.model.RetrieveIssuesRequest;\n+import de.metas.issue.tracking.github.api.v3.service.GithubClient;\n+import de.metas.logging.LogManager;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.importer.ImportIssuesQueue;\n+import de.metas.serviceprovider.importer.ImportService;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.user.UserId;\n+import de.metas.user.api.IUserDAO;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.BUDGET;\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.ESTIMATION;\n+import static de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailType.LABEL;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.CHUNK_SIZE;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.HOUR_UOM_ID;\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class GithubImporterService implements ImportService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(GithubImporterService.class);\n+\n+\tprivate final ReentrantLock lock = new ReentrantLock();\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final GithubClient githubClient;\n+\tprivate final IUserDAO userDAO = Services.get(IUserDAO.class);\n+\n+\tpublic GithubImporterService(final ImportIssuesQueue importIssuesQueue, final GithubClient githubClient)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.githubClient = githubClient;\n+\t}\n+\n+\tpublic void start(@NonNull final ImmutableList<ImportIssuesRequest> requestList)\n+\t{\n+\t\tacquireLock();\n+\t\ttry\n+\t\t{\n+\t\t\tfinal Stopwatch stopWatch = Stopwatch.createStarted();\n+\n+\t\t\trequestList.forEach(request -> {\n+\t\t\t\tif (request.importByIds())\n+\t\t\t\t{\n+\t\t\t\t\timportIssuesById(request);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\timportIssues(request);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tlog.info(IMPORT_LOG_MESSAGE_PREFIX + \" GithubImporterService#start() finished work in {} sec. \", stopWatch.stop().elapsed(TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODUzNjI0", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-383853624", "createdAt": "2020-03-30T13:29:34Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyOTozNVrOF9pvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyOTozNVrOF9pvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE5MTI1OQ==", "bodyText": "i think we don't need this anymore; pls remove", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400191259", "createdAt": "2020-03-30T13:29:35Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/ServiceProviderConstants.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.metas.serviceprovider;\n+\n+import de.metas.product.ProductId;\n+\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+\n+public class ServiceProviderConstants\n+{\n+\tpublic static final ProductId SERVICE_PRODUCT_ID = ProductId.ofRepoId(123);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTEwNTMx", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384510531", "createdAt": "2020-03-31T08:29:44Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyOTo0NFrOF-Kzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyOTo0NFrOF-Kzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMzEyMw==", "bodyText": ".filter(v -> v.getValue().equalsIgnoreCase(value))\n\nwhy equalsIgnoreCase?  ...i would avoid it. Go with equals.\n\n.orElse(null);\n\nConsider:\n\nreturning optional\nor throw an exception", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400733123", "createdAt": "2020-03-31T08:29:44Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.stream.Stream;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum BudgetIssueType\n+{\n+\tINTERNAL(\"Internal\"),\n+\tEXTERNAL(\"External\");\n+\n+\tprivate final String value;\n+\n+\tpublic static BudgetIssueType getTypeByValue(final String value)\n+\t{\n+\t\treturn Stream.of(values())\n+\t\t\t\t.filter(v -> v.getValue().equalsIgnoreCase(value))\n+\t\t\t\t.findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTExNjA3", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384511607", "createdAt": "2020-03-31T08:31:07Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMTowOFrOF-K3Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMTowOFrOF-K3Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDAxMA==", "bodyText": "why not this.estimatedEffort.signum() == 0?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400734010", "createdAt": "2020-03-31T08:31:08Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssue.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@Builder\n+public class EffortIssue\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\tprivate EffortIssueId effortIssueId;\n+\n+\tprivate UserId assigneeId;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\tprivate String description;\n+\n+\tprivate MilestoneId milestoneId;\n+\n+\tprivate BigDecimal estimatedEffort;\n+\n+\tprivate BigDecimal budgetedEffort;\n+\n+\t@NonNull\n+\tprivate UomId effortUomId;\n+\n+\tprivate boolean processed;\n+\n+\tprivate String externalIssueId;\n+\n+\tprivate String externalIssueNo;\n+\n+\tprivate String externalIssueURL;\n+\n+\tprivate List<ExternalIssueDetail> externalIssueDetailList;\n+\n+\tpublic void setEstimatedEffortIfNull(final BigDecimal estimatedEffort)\n+\t{\n+\t\tif ( NumberUtils.asBigDecimal(this.estimatedEffort,BigDecimal.ZERO).equals(BigDecimal.ZERO) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTEzMDQ1", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384513045", "createdAt": "2020-03-31T08:33:01Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMzowMVrOF-K7sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMzowMVrOF-K7sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNTE1NA==", "bodyText": "why do we have to return the parameter?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400735154", "createdAt": "2020-03-31T08:33:01Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE0NDIw", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384514420", "createdAt": "2020-03-31T08:34:45Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNDo0NlrOF-K_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNDo0NlrOF-K_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjIyMg==", "bodyText": "instead of passing the whole EffortIssue, why not pass the EffortIssueId and the details?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400736222", "createdAt": "2020-03-31T08:34:46Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;\n+\t}\n+\n+\tpublic Optional<EffortIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\n+\t\tfinal I_S_Effort_Issue effort_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Effort_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Effort_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Effort_Issue.class);\n+\n+\t\treturn effort_issue != null ? Optional.of(buildEffortIssueEntity(effort_issue)) : Optional.empty();\n+\t}\n+\n+\n+\tprivate EffortIssue buildEffortIssueEntity(final I_S_Effort_Issue record)\n+\t{\n+\t\treturn EffortIssue.builder()\n+\t\t\t\t.effortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()))\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate void persistIssueDetails(final EffortIssue effortIssue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE0Nzgx", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384514781", "createdAt": "2020-03-31T08:35:15Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNToxNlrOF-LBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNToxNlrOF-LBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjUxNQ==", "bodyText": "what is a detailValue?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400736515", "createdAt": "2020-03-31T08:35:16Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/issuedetails/ExternalIssueDetail.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.issuedetails;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+\n+@Builder\n+@Value\n+public class ExternalIssueDetail\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tExternalIssueDetailType type;\n+\n+\t@NonNull\n+\tString detailValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE3MjAw", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384517200", "createdAt": "2020-03-31T08:38:26Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODoyNlrOF-LIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODoyNlrOF-LIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODQwMQ==", "bodyText": "pls rename the method to getByExternalSystem", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400738401", "createdAt": "2020-03-31T08:38:26Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.model.I_S_ExternalProjectReference;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class ExternalProjectRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic ImmutableList<ExternalProjectReference> loadExternalProjectsBySystem(@NonNull final ExternalSystem externalSystem)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE4NzM5", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384518739", "createdAt": "2020-03-31T08:40:26Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MDoyNlrOF-LNMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MDoyNlrOF-LNMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTYzMw==", "bodyText": "why equals is not enough?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400739633", "createdAt": "2020-03-31T08:40:26Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum ExternalProjectType\n+{\n+\tEFFORT(\"effort\"),\n+\tBUDGET(\"budget\");\n+\n+\tprivate final String value;\n+\n+\tpublic static Optional<ExternalProjectType> getTypeByValue( final String value )\n+\t{\n+\t\treturn Arrays.stream(values())\n+\t\t\t\t.filter(projectType -> projectType.getValue().equalsIgnoreCase(value))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTI2NDA4", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384526408", "createdAt": "2020-03-31T08:50:14Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDoxNFrOF-LkgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDoxNFrOF-LkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTYwMA==", "bodyText": "use void return type", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400745600", "createdAt": "2020-03-31T08:50:14Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))\n+\t\t\t\t.orElseGet(() -> buildBudgetIssue(importIssueInfo));\n+\n+\t\tbudgetIssueRepository.store(budgetIssue);\n+\t}\n+\n+\tprivate BudgetIssue updateExistingBudgetIssue(@NonNull final BudgetIssue existingBudgetIssue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTI2NzQ4", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384526748", "createdAt": "2020-03-31T08:50:41Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDo0MVrOF-LlmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDo0MVrOF-LlmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTg4MA==", "bodyText": "that's not actually a mapping.\nconsider using ifPresent", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400745880", "createdAt": "2020-03-31T08:50:41Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTI3MDIw", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384527020", "createdAt": "2020-03-31T08:51:04Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MTowNFrOF-LmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MTowNFrOF-LmZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NjA4Nw==", "bodyText": "return void", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400746087", "createdAt": "2020-03-31T08:51:04Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))\n+\t\t\t\t.orElseGet(() -> buildBudgetIssue(importIssueInfo));\n+\n+\t\tbudgetIssueRepository.store(budgetIssue);\n+\t}\n+\n+\tprivate BudgetIssue updateExistingBudgetIssue(@NonNull final BudgetIssue existingBudgetIssue,\n+\t\t\t                                      @NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null\n+\t\t\t\t&& importIssueInfo.getMilestone().getMilestoneId() != null)\n+\t\t{\n+\t\t\texistingBudgetIssue.setMilestoneIdIfNull(importIssueInfo.getMilestone().getMilestoneId());\n+\t\t}\n+\t\texistingBudgetIssue.setAssigneeIdIfNull(importIssueInfo.getAssigneeId());\n+\t\texistingBudgetIssue.setDescriptionIfNull(importIssueInfo.getDescription());\n+\t\texistingBudgetIssue.setBudgetedEffortIfNull(importIssueInfo.getBudget());\n+\t\texistingBudgetIssue.setEstimatedEffortIfNull(importIssueInfo.getEstimation());\n+\n+\t\texistingBudgetIssue.setExternalIssueId(importIssueInfo.getExternalIssueId());\n+\t\texistingBudgetIssue.setExternalIssueNo(importIssueInfo.getExternalIssueNo());\n+\t\texistingBudgetIssue.setExternalIssueURL(importIssueInfo.getExternalIssueURL());\n+\t\texistingBudgetIssue.setExternalIssueDetails(importIssueInfo.getExternalIssueDetails());\n+\n+\t\treturn existingBudgetIssue;\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tfinal MilestoneId milestoneId = importIssueInfo.getMilestone() != null\n+\t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n+\t\t\t\t: null;\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.name(importIssueInfo.getName())\n+\t\t\t\t.description(importIssueInfo.getDescription())\n+\t\t\t\t.assigneeId(importIssueInfo.getAssigneeId())\n+\t\t\t\t.milestoneId(milestoneId)\n+\t\t\t\t.type(BudgetIssueType.EXTERNAL)\n+\t\t\t\t.externalIssueId(importIssueInfo.getExternalIssueId())\n+\t\t\t\t.externalIssueNo(importIssueInfo.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(importIssueInfo.getExternalIssueURL())\n+\t\t\t\t.effortUomId(importIssueInfo.getEffortUomId())\n+\t\t\t\t.estimatedEffort(importIssueInfo.getEstimation())\n+\t\t\t\t.budgetedEffort(importIssueInfo.getBudget())\n+\t\t\t\t.processed(importIssueInfo.isProcessed())\n+\t\t\t\t.orgId(importIssueInfo.getOrgId())\n+\t\t\t\t.externalIssueDetails(importIssueInfo.getExternalIssueDetails())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate void importEffortIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(milestoneId1 -> importIssueInfo.getMilestone().setMilestoneId(milestoneId1));\n+\t\t}\n+\n+\t\tfinal Optional<EffortIssue> existingEffortIssue =\n+\t\t\t\teffortIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal EffortIssue effortIssue;\n+\t\teffortIssue = existingEffortIssue\n+\t\t\t\t.map(issue -> updateExistingEffortIssue(importIssueInfo, issue))\n+\t\t\t\t.orElseGet(() -> buildEffortIssue(importIssueInfo));\n+\n+\t\teffortIssueRepository.store(effortIssue);\n+\t}\n+\n+\tprivate EffortIssue buildEffortIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tfinal MilestoneId milestoneId = importIssueInfo.getMilestone() != null\n+\t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n+\t\t\t\t: null;\n+\n+\t\treturn EffortIssue.builder()\n+\t\t\t\t.name(importIssueInfo.getName())\n+\t\t\t\t.description(importIssueInfo.getDescription())\n+\t\t\t\t.assigneeId(importIssueInfo.getAssigneeId())\n+\t\t\t\t.milestoneId(milestoneId)\n+\t\t\t\t.externalIssueId(importIssueInfo.getExternalIssueId())\n+\t\t\t\t.externalIssueNo(importIssueInfo.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(importIssueInfo.getExternalIssueURL())\n+\t\t\t\t.estimatedEffort(importIssueInfo.getEstimation())\n+\t\t\t\t.budgetedEffort(importIssueInfo.getBudget())\n+\t\t\t\t.effortUomId(importIssueInfo.getEffortUomId())\n+\t\t\t\t.processed(importIssueInfo.isProcessed())\n+\t\t\t\t.orgId(importIssueInfo.getOrgId())\n+\t\t\t\t.externalIssueDetailList(importIssueInfo.getExternalIssueDetails())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate EffortIssue updateExistingEffortIssue(@NonNull final ImportIssueInfo importIssueInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTI4MDAy", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384528002", "createdAt": "2020-03-31T08:52:19Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MjoxOVrOF-Lpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MjoxOVrOF-Lpdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0Njg3MA==", "bodyText": "why not ZonedDateTime?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400746870", "createdAt": "2020-03-31T08:52:19Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import javax.annotation.Nullable;\n+import java.time.LocalDateTime;\n+\n+@Data\n+@Builder\n+public class Milestone\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\t@Nullable\n+\tprivate MilestoneId milestoneId;\n+\n+\t@Nullable\n+\tprivate String externalId;\n+\n+\t@Nullable\n+\tprivate String description;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\t@NonNull\n+\tprivate String value;\n+\n+\t@Nullable\n+\tprivate LocalDateTime dueDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTI5NDEw", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-384529410", "createdAt": "2020-03-31T08:54:03Z", "commit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NDowM1rOF-LuBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NDowM1rOF-LuBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODAzOA==", "bodyText": "consider\n\nmilestone.setMilestoneId\nreturn void", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400748038", "createdAt": "2020-03-31T08:54:03Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.sql.Timestamp;\n+import java.util.Optional;\n+\n+@Repository\n+public class MilestoneRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic MilestoneId store(@NonNull final Milestone milestone)\n+\t{\n+\t\tfinal I_S_Milestone record = milestone.getMilestoneId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(milestone.getMilestoneId(), I_S_Milestone.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Milestone.class);\n+\n+\t\tif (milestone.getDueDate() != null)\n+\t\t{\n+\t\t\trecord.setMilestone_DueDate(Timestamp.valueOf(milestone.getDueDate()));\n+\t\t}\n+\n+\t\trecord.setAD_Org_ID(milestone.getOrgId().getRepoId());\n+\t\trecord.setName(milestone.getName());\n+\t\trecord.setValue(milestone.getValue());\n+\t\trecord.setDescription(milestone.getDescription());\n+\t\trecord.setProcessed(milestone.isProcessed());\n+\n+\t\trecord.setExternalId(milestone.getExternalId());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\treturn MilestoneId.ofRepoId(record.getS_Milestone_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c34d3efd227180713c3d9bc001dc000b7de678", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/80c34d3efd227180713c3d9bc001dc000b7de678", "committedDate": "2020-03-31T12:42:02Z", "message": "refactor to use a single table for both effort and budget issue\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19f2861b30319b2b9d91168e589f5ff5491e8f2", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/c19f2861b30319b2b9d91168e589f5ff5491e8f2", "committedDate": "2020-04-01T09:00:49Z", "message": "unit tests\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2518a42e34230a83f9883220cae9db6ae9dc66fa", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/2518a42e34230a83f9883220cae9db6ae9dc66fa", "committedDate": "2020-04-01T09:09:25Z", "message": "Merge branch 'master' into gh5816-app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/1945cfdec56fc155207fbdda283e001811dad166", "committedDate": "2020-04-01T09:37:46Z", "message": "unit tests\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDM4OTM5", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-385438939", "createdAt": "2020-04-01T10:02:06Z", "commit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowMjowNlrOF-5imA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowMjowNlrOF-5imA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5ODc3Ng==", "bodyText": "sry to bother you again with this, but there is an f missing \ud83d\ude0a", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401498776", "createdAt": "2020-04-01T10:02:06Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,10 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\t@Nullable\n+\tpublic static UserId ofRepoIdOrNullISystem(final int repoId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDU2NTIy", "url": "https://github.com/metasfresh/metasfresh/pull/6084#pullrequestreview-385456522", "createdAt": "2020-04-01T10:27:09Z", "commit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzoxMFrOF-6bQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzoxMFrOF-6bQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMzI4MQ==", "bodyText": "@teosarca if you see this, we are aware of the n+1 problem, but chose not to talked it this time. if mass-import (which happens very rarely) becomes too slow, we can still put a staging service in between.\n@pvpurcarcosmin please make sure to have an index on the issue-detail's issue-id column", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401513281", "createdAt": "2020-04-01T10:27:10Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.issue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.project.ProjectId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class IssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic IssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic void save(final IssueEntity issueEntity)\n+\t{\n+\t\tfinal I_S_Issue record;\n+\n+\t\trecord = InterfaceWrapperHelper.loadOrNew(issueEntity.getIssueId(), I_S_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(issueEntity.getOrgId().getRepoId());\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(issueEntity.getAssigneeId(), -1));\n+\t\trecord.setC_Project_ID(NumberUtils.asInt(issueEntity.getProjectId(), -1));\n+\n+\t\trecord.setName(issueEntity.getName());\n+\t\trecord.setValue(issueEntity.getSearchKey());\n+\t\trecord.setDescription(issueEntity.getDescription());\n+\n+\t\trecord.setIssueType(issueEntity.getType().getValue());\n+\t\trecord.setIsEffortIssue(issueEntity.isEffortIssue());\n+\t\trecord.setProcessed(issueEntity.isProcessed());\n+\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(issueEntity.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(issueEntity.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(issueEntity.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(issueEntity.getEffortUomId().getRepoId());\n+\n+\t\trecord.setExternalId(issueEntity.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(issueEntity.getExternalIssueNo());\n+\t\trecord.setIssueURL(issueEntity.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.saveRecord(record);\n+\n+\t\tfinal IssueId issueId = IssueId.ofRepoId(record.getS_Issue_ID());\n+\n+\t\tissueEntity.setIssueId(issueId);\n+\n+\t\texternalIssueDetailsRepository.persistIssueDetails(issueId, issueEntity.getExternalIssueDetails());\n+\t}\n+\n+\t@NonNull\n+\tpublic Optional<IssueEntity> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\tfinal I_S_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Issue.class);\n+\n+\t\treturn budget_issue != null ? Optional.of(buildIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate IssueEntity buildIssueEntity(final I_S_Issue record)\n+\t{\n+\t\tfinal Optional<IssueType> issueType = IssueType.getTypeByValue(record.getIssueType());\n+\n+\t\tif (!issueType.isPresent())\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Unknown IssueType!\").appendParametersToMessage()\n+\t\t\t\t\t.setParameter(\"I_S_Issue\", record);\n+\t\t}\n+\n+\t\treturn IssueEntity.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.projectId(ProjectId.ofRepoId(record.getC_Project_ID()))\n+\t\t\t\t.issueId(IssueId.ofRepoId(record.getS_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofRepoIdOrNullISystem(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.searchKey(record.getValue())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(issueType.get())\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.isEffortIssue(record.isEffortIssue())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())\n+\t\t\t\t.externalIssueDetails(externalIssueDetailsRepository.getByIssueId(IssueId.ofRepoId(record.getS_Issue_ID())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d764cbb22364396bf8d119ee2c18fd60ccc18834", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d764cbb22364396bf8d119ee2c18fd60ccc18834", "committedDate": "2020-04-01T10:48:38Z", "message": "referenced AD_Ref_List values in enums + created index on S_ExternalIssueDetails(S_Issue_ID)\nhttps://github.com/metasfresh/metasfresh/issues/6328"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}