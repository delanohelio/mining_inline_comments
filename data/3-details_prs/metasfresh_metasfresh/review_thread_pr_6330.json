{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTk0MzY3", "number": 6330, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMzo0MVrODmv2Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTowMFrODnhf7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU2NDE0OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMzo0MVrOF0V1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMzo0MVrOF0V1fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyODAyOA==", "bodyText": "pls move this method to TableAttachementListenerRepository because we want to  avoid using I_AD_Table_AttachmentListener outside repos.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390428028", "createdAt": "2020-03-10T16:03:41Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/AttachmentListenerSettings.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class AttachmentListenerSettings\n+{\n+\t@NonNull\n+\tJavaClassId listenerJavaClassId;\n+\n+\tboolean isSendNotification;\n+\n+\t@Nullable\n+\tAdMessageId adMessageId;\n+\n+\tpublic static AttachmentListenerSettings of(final I_AD_Table_AttachmentListener record)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cc4c406dd2ee9a08c128d2c03327f6dc845181"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU2Nzk2OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowNDozN1rOF0V34Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowNDozN1rOF0V34Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyODY0MQ==", "bodyText": "by convention we use getById", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390428641", "createdAt": "2020-03-10T16:04:37Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> findForId(final AdTableId adTableId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cc4c406dd2ee9a08c128d2c03327f6dc845181"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU4MTc3OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowNzozOVrOF0WAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NToyOVrOF0Xogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMDg3NQ==", "bodyText": "avoid ctors with a lot of params. Use lombok's @Builder", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390430875", "createdAt": "2020-03-10T16:07:39Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cc4c406dd2ee9a08c128d2c03327f6dc845181"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NzQ3NA==", "bodyText": "also, we usually call this kind of classes Requests. In this case the name would be RunESRImportRequest.\nNot sure if it's the best name, but so far that's what we use.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390457474", "createdAt": "2020-03-10T16:45:29Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMDg3NQ=="}, "originalCommit": {"oid": "98cc4c406dd2ee9a08c128d2c03327f6dc845181"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTY5OTQzOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNDoyMVrOF0XKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNDoyMVrOF0XKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTgxOQ==", "bodyText": "We use to call this methods something like 'retrieveAttachmentListenerSettings`.\nBasically we call it retrieve because they are retrieving (aka loading) from database.\ngetOrLoad is also misleading because we are always retrieving (aka loading).", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390449819", "createdAt": "2020-03-10T16:34:21Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> findForId(final AdTableId adTableId)\n+\t{\n+\t\treturn cache.getOrLoad(adTableId, this::getOrLoad);\n+\t}\n+\n+\t/**\n+\t * Queries {@link I_AD_Table_AttachmentListener} for listeners linked to the given {@link AdTableId}.\n+\t *\n+\t * @param adTableId DB identifier of the table.\n+\t * @return list of {@link AttachmentListenerSettings} ordered by {@link I_AD_Table_AttachmentListener#getSeqNo()}.\n+\t */\n+\tprivate ImmutableList<AttachmentListenerSettings> getOrLoad(final AdTableId adTableId )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcxMTU1OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNzoxNlrOF0XSbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNzoxNlrOF0XSbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTgyMg==", "bodyText": "pls use @Interceptor (sorry, i have to deprecate @Validator)", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390451822", "createdAt": "2020-03-10T16:37:16Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/org/adempiere/model/validator/AD_Table_AttachmentListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package org.adempiere.model.validator;\n+\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.adempiere.ad.modelvalidator.annotations.Validator;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.model.ModelValidator;\n+\n+@Validator(I_AD_Table_AttachmentListener.class)\n+public class AD_Table_AttachmentListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcyMTcwOnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozOTo0MlrOF0XY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozOTo0MlrOF0XY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MzUwMw==", "bodyText": "declare the Services.get(IESRImportBL.class) service as a class field", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390453503", "createdAt": "2020-03-10T16:39:42Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcyODM2OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0MToyMlrOF0XdXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0MToyMlrOF0XdXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDYyMw==", "bodyText": "objects shall be valid when u construct them.\nPls do this calidation when u construct AttachmentListenerSettings.\nHere i expect to be valid.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390454623", "createdAt": "2020-03-10T16:41:22Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTczNzg5OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0MzozMlrOF0XjQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0MzozMlrOF0XjQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjEzMA==", "bodyText": "wondering why not  having the adMessageContentValue in AttachmentListenerSettings instead of AdMessageId?\nI know it's a bit in the gray zone....\nBtw, in that case, u could use AdMessageKey (was newly introduced).", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390456130", "createdAt": "2020-03-10T16:43:32Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),\n+\t\t\t\t\t\"An AD_Message_ID must be present when notifications are enabled.\");\n+\n+\t\t\tfinal String adMessageContent = Services.get(IADMessageDAO.class)\n+\t\t\t\t\t.retrieveValueById( attachmentListenerSettings.getAdMessageId().getRepoId() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTczOTE4OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mzo0N1rOF0XkDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mzo0N1rOF0XkDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjMzNA==", "bodyText": "extract service as a field", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390456334", "createdAt": "2020-03-10T16:43:47Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/listener/ESRImportAttachmentListener.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.listener;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.attachments.listener.AttachmentListener;\n+import de.metas.attachments.listener.AttachmentListenerSettings;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.logging.LogManager;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.payment.esr.api.IESRImportBL;\n+import de.metas.payment.esr.api.RunESRImportCriteria;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.slf4j.Logger;\n+\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_DESC;\n+import static de.metas.payment.esr.ESRConstants.ESR_ASYNC_BATCH_NAME;\n+\n+public class ESRImportAttachmentListener implements AttachmentListener\n+{\n+\tprivate static final Logger logger = LogManager.getLogger(ESRImportAttachmentListener.class);\n+\n+\t@Override\n+\tpublic void afterPersist(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal AttachmentEntry attachmentEntry,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tfinal I_ESR_Import esrImport = InterfaceWrapperHelper.load(tableRecordReference.getRecord_ID(), I_ESR_Import.class);\n+\n+\t\tfinal RunESRImportCriteria runESRImportCriteria = new RunESRImportCriteria(esrImport,\n+\t\t\t\tattachmentEntry.getId(),\n+\t\t\t\tESR_ASYNC_BATCH_NAME,\n+\t\t\t\tESR_ASYNC_BATCH_DESC,\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG),\n+\t\t\t\tnull);\n+\n+\t\tServices.get(IESRImportBL.class).runESRImportFor(runESRImportCriteria);\n+\n+\t\tnotifyUser(attachmentListenerSettings, tableRecordReference);\n+\t}\n+\n+\t/**\n+\t *  Notifies the user about the process finalizing work if {@link AttachmentListenerSettings#isSendNotification()}\n+\t *\n+\t * @param attachmentListenerSettings\tdata from {@link I_AD_Table_AttachmentListener}\n+\t * @param tableRecordReference\t\t\treference of the table\n+\t */\n+\tprivate void notifyUser(final AttachmentListenerSettings attachmentListenerSettings,\n+\t\t\t\t\t\t\tfinal TableRecordReference tableRecordReference)\n+\t{\n+\t\tif ( attachmentListenerSettings.isSendNotification() )\n+\t\t{\n+\n+\t\t\t //see org.adempiere.model.validator.AD_Table_AttachmentListener#beforeSave(I_AD_Table_AttachmentListener)\n+\t\t\tCheck.assumeNotNull(attachmentListenerSettings.getAdMessageId(),\n+\t\t\t\t\t\"An AD_Message_ID must be present when notifications are enabled.\");\n+\n+\t\t\tfinal String adMessageContent = Services.get(IADMessageDAO.class)\n+\t\t\t\t\t.retrieveValueById( attachmentListenerSettings.getAdMessageId().getRepoId() );\n+\n+\t\t\tfinal UserNotificationRequest userNotificationRequest = UserNotificationRequest.builder()\n+\t\t\t\t\t.contentADMessage(adMessageContent)\n+\t\t\t\t\t.recipientUserId( Env.getLoggedUserId() )\n+\t\t\t\t\t.targetAction( UserNotificationRequest.TargetRecordAction.of(tableRecordReference) )\n+\t\t\t\t\t.build();\n+\t\t\tServices.get(INotificationBL.class).send(userNotificationRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc0OTgyOnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NjoyNFrOF0XrDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NjoyNFrOF0XrDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODEyNw==", "bodyText": "Instead of runESRImportFor woundering if it wouldn't be better to call it scheduleESRImport.\nschedule because it's gonna happen async.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390458127", "createdAt": "2020-03-10T16:46:24Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "diffHunk": "@@ -1248,6 +1232,26 @@ public void unlinkESRImportLinesFor(final I_C_BankStatementLine_Ref bankStatemen\n \t\t}\n \t}\n \n+\tpublic void runESRImportFor(final RunESRImportCriteria runESRImportCriteria)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc1MjM4OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NzowMFrOF0Xsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NzowMFrOF0Xsvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODU1OQ==", "bodyText": "avoid star imports.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390458559", "createdAt": "2020-03-10T16:47:00Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRImportBL.java", "diffHunk": "@@ -86,6 +35,41 @@\n import de.metas.util.Check;\n import de.metas.util.Services;\n import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.exceptions.PeriodClosedException;\n+import org.adempiere.invoice.service.IInvoiceBL;\n+import org.adempiere.invoice.service.IInvoiceDAO;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.service.ISysConfigBL;\n+import org.adempiere.util.lang.IMutable;\n+import org.adempiere.util.lang.Mutable;\n+import org.compiere.acct.Doc;\n+import org.compiere.model.I_C_BPartner;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.MAllocationHdr;\n+import org.compiere.util.Env;\n+import org.compiere.util.TimeUtil;\n+import org.compiere.util.TrxRunnable;\n+import org.compiere.util.Util;\n+import org.compiere.util.Util.ArrayKey;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.adempiere.model.InterfaceWrapperHelper.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc1NjM2OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0ODowNFrOF0XvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0ODowNFrOF0XvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTIyNw==", "bodyText": "call it loggable. The Class is misleading.", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390459227", "createdAt": "2020-03-10T16:48:04Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria\n+{\n+\t@NonNull\n+\tI_ESR_Import esrImport;\n+\n+\t@NonNull\n+\tAttachmentEntryId attachmentEntryId;\n+\n+\t@NonNull\n+\tString asyncBatchName;\n+\n+\t@NonNull\n+\tString asyncBatchDesc;\n+\n+\t@NonNull\n+\tILoggable loggableClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc2MDY3OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0OTowNlrOF0XyOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0OToxN1rOF0Xyvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTk2MQ==", "bodyText": "my ODD would like to call it asyncBatchDescription", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390459961", "createdAt": "2020-03-10T16:49:06Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria\n+{\n+\t@NonNull\n+\tI_ESR_Import esrImport;\n+\n+\t@NonNull\n+\tAttachmentEntryId attachmentEntryId;\n+\n+\t@NonNull\n+\tString asyncBatchName;\n+\n+\t@NonNull\n+\tString asyncBatchDesc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MDA5NA==", "bodyText": ":)", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r390460094", "createdAt": "2020-03-10T16:49:17Z", "author": {"login": "teosarca"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/RunESRImportCriteria.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api;\n+\n+import de.metas.attachments.AttachmentEntryId;\n+import de.metas.payment.esr.model.I_ESR_Import;\n+import de.metas.process.PInstanceId;\n+import de.metas.util.ILoggable;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import javax.annotation.Nullable;\n+\n+@Value\n+public class RunESRImportCriteria\n+{\n+\t@NonNull\n+\tI_ESR_Import esrImport;\n+\n+\t@NonNull\n+\tAttachmentEntryId attachmentEntryId;\n+\n+\t@NonNull\n+\tString asyncBatchName;\n+\n+\t@NonNull\n+\tString asyncBatchDesc;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTk2MQ=="}, "originalCommit": {"oid": "223d2bc46787132330d6486019efd9c99497b207"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjY2NjAyOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToxNjoyOFrOF1aepw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMToxNjoyOFrOF1aepw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjY3OQ==", "bodyText": "pls annotate with @NonNull; makes for much more helpful NPEs", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391552679", "createdAt": "2020-03-12T11:16:28Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerRepository.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.cache.CCache;\n+import de.metas.i18n.AdMessageId;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.table.api.AdTableId;\n+import org.adempiere.ad.trx.api.ITrx;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class TableAttachmentListenerRepository\n+{\n+\tprivate final CCache<AdTableId, ImmutableList<AttachmentListenerSettings>> cache = CCache.<AdTableId, ImmutableList<AttachmentListenerSettings>> builder()\n+\t\t\t.cacheName(\"listenersByAdTableId\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(100)\n+\t\t\t.tableName(I_AD_Table_AttachmentListener.Table_Name)\n+\t\t\t.build();\n+\n+\tpublic ImmutableList<AttachmentListenerSettings> getById(final AdTableId adTableId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd70ce2feda716b3bb6ff4eff767b618905c5f1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY1Njg0OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5554230_sys_gh6328_add_notification_logic_for_AttachmentListeners.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NDo1MlrOF1kNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NDo1MlrOF1kNYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMjA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            UPDATE AD_Column SET MandatoryLogic='@IsSendNotification@=''Y''',Updated=TO_TIMESTAMP('2020-03-12 13:39:34','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=570102\n          \n          \n            \n            UPDATE AD_Column SET MandatoryLogic='@IsSendNotification/''N''@=''Y''',Updated=TO_TIMESTAMP('2020-03-12 13:39:34','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=570102\n          \n      \n    \n    \n  \n\nas common practice, add a default value such that if IsSendNotification is not in the ctx for whatever reason (e.g. no such AD_Field) there is no error. i don'T expect it to be needed in this particular case, but..yeah, as i said: common practice", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391712096", "createdAt": "2020-03-12T15:44:52Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5554230_sys_gh6328_add_notification_logic_for_AttachmentListeners.sql", "diffHunk": "@@ -179,3 +179,8 @@ UPDATE AD_Message SET MsgText='Attached file was successfully imported.',Updated\n -- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n UPDATE AD_Message_Trl SET MsgText='Attached file was successfully imported.',Updated=TO_TIMESTAMP('2020-03-10 17:13:20','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Language='en_US' AND AD_Message_ID=544969\n ;\n+\n+-- 2020-03-12T11:39:34.185Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+UPDATE AD_Column SET MandatoryLogic='@IsSendNotification@=''Y''',Updated=TO_TIMESTAMP('2020-03-12 13:39:34','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=570102", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df58128d439b678343bed39dab5d38a26b555952"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY1OTUwOnYy", "diffSide": "LEFT", "path": "de.metas.business/src/main/java/org/adempiere/model/validator/AdempiereBaseValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NToyOVrOF1kPFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NToyOVrOF1kPFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMjUzNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391712535", "createdAt": "2020-03-12T15:45:29Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/org/adempiere/model/validator/AdempiereBaseValidator.java", "diffHunk": "@@ -140,7 +138,6 @@ protected void registerInterceptors(final IModelValidationEngine engine, final I\n \n \t\tengine.addModelValidator(de.metas.system.interceptor.AD_System.INSTANCE, client);\n \n-\t\tengine.addModelValidator(new org.adempiere.model.validator.AD_Table_AttachmentListener(), client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df58128d439b678343bed39dab5d38a26b555952"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY2ODMzOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/DumbAttachmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NzozM1rOF1kUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NzozM1rOF1kUmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMzk0Ng==", "bodyText": "pls move to test/main/java..or even add it to the test as inner class if you want", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391713946", "createdAt": "2020-03-12T15:47:33Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/DumbAttachmentListener.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import de.metas.attachments.AttachmentEntry;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+\n+import static de.metas.attachments.listener.AttachmentListenerConstants.ListenerWorkStatus.SUCCESS;\n+\n+/**\n+ *  Dumb attachment listener; created only for test purposes.\n+ */\n+public class DumbAttachmentListener implements AttachmentListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df58128d439b678343bed39dab5d38a26b555952"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY3MjkyOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0ODo0MlrOF1kXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0ODo0MlrOF1kXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDcyMw==", "bodyText": "annotate with @NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391714723", "createdAt": "2020-03-12T15:48:42Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/attachments/listener/TableAttachmentListenerService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * #%L\n+ * de.metas.adempiere.adempiere.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.attachments.listener;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.attachments.AttachmentEntry;\n+import de.metas.i18n.IADMessageDAO;\n+import de.metas.javaclasses.IJavaClassBL;\n+import de.metas.notification.INotificationBL;\n+import de.metas.notification.UserNotificationRequest;\n+import de.metas.util.Services;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.model.I_AD_Table_AttachmentListener;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collection;\n+\n+@Service\n+public class TableAttachmentListenerService\n+{\n+\tprivate final INotificationBL notificationBL = Services.get(INotificationBL.class);\n+\tprivate final IJavaClassBL javaClassBL = Services.get(IJavaClassBL.class);\n+\tprivate final IADMessageDAO adMessageDAO = Services.get(IADMessageDAO.class);\n+\tprivate final TableAttachmentListenerRepository tableAttachmentListenerRepository;\n+\n+\tpublic TableAttachmentListenerService(final TableAttachmentListenerRepository tableAttachmentListenerRepository)\n+\t{\n+\t\tthis.tableAttachmentListenerRepository = tableAttachmentListenerRepository;\n+\t}\n+\n+\tpublic ImmutableList<AttachmentListenerActionResult> notifyAttachmentListeners(final AttachmentEntry attachmentEntry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df58128d439b678343bed39dab5d38a26b555952"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY5OTAwOnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTowMFrOF1koPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTowMFrOF1koPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxODk3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t *\n          \n          \n            \n            \t * @param runESRImportRequest\n          \n          \n            \n            \t */\n          \n          \n            \n            \tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest);\n          \n          \n            \n            \tpublic void scheduleESRImportFor(RunESRImportRequest runESRImportRequest);\n          \n      \n    \n    \n  \n\n\navoid useless javadocs\nfinal makes no sense in this interface method", "url": "https://github.com/metasfresh/metasfresh/pull/6330#discussion_r391718975", "createdAt": "2020-03-12T15:55:00Z", "author": {"login": "metas-ts"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/IESRImportBL.java", "diffHunk": "@@ -122,4 +121,10 @@\n \t * @param bankStatementLineRef\n \t */\n \tvoid unlinkESRImportLinesFor(I_C_BankStatementLine_Ref bankStatementLineRef);\n+\n+\t/**\n+\t *\n+\t * @param runESRImportRequest\n+\t */\n+\tpublic void scheduleESRImportFor(final RunESRImportRequest runESRImportRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df58128d439b678343bed39dab5d38a26b555952"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1421, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}