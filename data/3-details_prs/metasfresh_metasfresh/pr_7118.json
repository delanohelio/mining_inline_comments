{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzQ0OTk4", "number": 7118, "title": "#7109 Initial commit.", "bodyText": "#7109", "createdAt": "2020-08-10T21:38:44Z", "url": "https://github.com/metasfresh/metasfresh/pull/7118", "merged": true, "mergeCommit": {"oid": "d38bc181055dfa193355d5d2a13368f8ba0ea10f"}, "closed": true, "closedAt": "2020-08-28T11:52:02Z", "author": {"login": "dragospodariu96"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9pN6bAH2gAyNDY1NzQ0OTk4OmQyNmVlOWJiNzA4NzZlODdjZDQxOTRhMzIxNDk1MWQzNzFmOWNmMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDSmyeAH2gAyNDY1NzQ0OTk4OjViOGEzNTcwYzgzMTI3NmIyY2QwN2FhNDY3ZmFmNWVlNWMzNDBmN2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d26ee9bb70876e87cd4194a3214951d371f9cf0a", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/d26ee9bb70876e87cd4194a3214951d371f9cf0a", "committedDate": "2020-08-10T21:36:46Z", "message": "#7109 Initial commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a5e3c1e6601c2600d17e15420b110bd2f7a9c73", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/6a5e3c1e6601c2600d17e15420b110bd2f7a9c73", "committedDate": "2020-08-10T21:47:09Z", "message": "#7109 Second commit - WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3c64d083856558d051ca5a55daffbc94efbea7", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/af3c64d083856558d051ca5a55daffbc94efbea7", "committedDate": "2020-08-11T11:36:31Z", "message": "#7109 Third commit - WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5", "committedDate": "2020-08-11T12:59:19Z", "message": "#7109 Fix querying for selected records."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NDMxOTIw", "url": "https://github.com/metasfresh/metasfresh/pull/7118#pullrequestreview-468431920", "createdAt": "2020-08-17T12:49:45Z", "commit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo0OTo0NVrOHBnWhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoyNzo1OVrOHBou3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTM2Nw==", "bodyText": "i doubt this will work..but maybe you meant display or read-only logic? anyways, i think it should go..\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -- 2020-08-11T07:37:32.107Z\n          \n          \n            \n            -- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n          \n          \n            \n            UPDATE AD_Column SET DefaultValue='@IsAllocated@=Y',Updated=TO_TIMESTAMP('2020-08-11 10:37:32','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=571098\n          \n          \n            \n            ;\n          \n          \n            \n            -- 2020-08-11T07:37:32.107Z\n          \n          \n            \n            -- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n          \n          \n            \n            -- UPDATE AD_Column SET DefaultValue='@IsAllocated@=Y',Updated=TO_TIMESTAMP('2020-08-11 10:37:32','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=571098\n          \n          \n            \n            --;", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471455367", "createdAt": "2020-08-17T12:49:45Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5564980_sys_gh7109PaymentRuleColumnAddedToCPaymentTable.sql", "diffHunk": "@@ -0,0 +1,35 @@\n+-- 2020-08-11T07:33:42.362Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column (AD_Client_ID,AD_Column_ID,AD_Element_ID,AD_Org_ID,AD_Reference_ID,AD_Reference_Value_ID,AD_Table_ID,AD_Val_Rule_ID,ColumnName,Created,CreatedBy,DDL_NoForeignKey,Description,EntityType,FacetFilterSeqNo,FieldLength,Help,IsActive,IsAdvancedText,IsAllowLogging,IsAlwaysUpdateable,IsAutoApplyValidationRule,IsAutocomplete,IsCalculated,IsDimension,IsDLMPartitionBoundary,IsEncrypted,IsFacetFilter,IsForceIncludeInGeneratedModel,IsGenericZoomKeyColumn,IsGenericZoomOrigin,IsIdentifier,IsKey,IsLazyLoading,IsMandatory,IsParent,IsRangeFilter,IsSelectionColumn,IsShowFilterIncrementButtons,IsStaleable,IsSyncDatabase,IsTranslated,IsUpdateable,IsUseDocSequence,MaxFacetsToFetch,Name,SelectionColumnSeqNo,SeqNo,Updated,UpdatedBy,Version) VALUES (0,571098,1143,0,17,195,335,52033,'PaymentRule',TO_TIMESTAMP('2020-08-11 10:33:42','YYYY-MM-DD HH24:MI:SS'),100,'N','Wie die Rechnung bezahlt wird','D',0,1,'Die Zahlungsweise zeigt die Art der Bezahlung der Rechnung an.','Y','N','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y','N',0,'Zahlungsweise',0,0,TO_TIMESTAMP('2020-08-11 10:33:42','YYYY-MM-DD HH24:MI:SS'),100,0)\n+;\n+\n+-- 2020-08-11T07:33:42.366Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column_Trl (AD_Language,AD_Column_ID, Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Column_ID, t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Column t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Column_ID=571098 AND NOT EXISTS (SELECT 1 FROM AD_Column_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Column_ID=t.AD_Column_ID)\n+;\n+\n+-- 2020-08-11T07:33:42.404Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_Column_Translation_From_AD_Element(1143) \n+;\n+\n+-- 2020-08-11T07:37:32.107Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+UPDATE AD_Column SET DefaultValue='@IsAllocated@=Y',Updated=TO_TIMESTAMP('2020-08-11 10:37:32','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=571098\n+;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1ODIwNw==", "bodyText": "Instead of having this method, you can use de.metas.util.collections.CollectionUtils#extractDistinctElements", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471458207", "createdAt": "2020-08-17T12:54:44Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1ODY0Nw==", "bodyText": "same here (de.metas.util.collections.CollectionUtils#extractDistinctElements)", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471458647", "createdAt": "2020-08-17T12:55:29Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTEzMA==", "bodyText": "payment can be final", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459130", "createdAt": "2020-08-17T12:56:19Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTcyMw==", "bodyText": "make sure to avoid an NPE if ids doesn't contain the current payment.getExternalOrderId()", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459723", "createdAt": "2020-08-17T12:57:18Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tpayment.setC_Order_ID(ids.get(ExternalId.of(payment.getExternalOrderId())).getRepoId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1OTgyNA==", "bodyText": "same (avoid NPE)", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471459824", "createdAt": "2020-08-17T12:57:30Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)\n+\t{\n+\n+\t\tfinal I_C_Order order = orderBL.getByExternalId(ExternalId.of(payment.getExternalOrderId()));\n+\t\tif (order.getAD_InputDataSource_ID() == paypalDataSourceId)\n+\t\t{\n+\t\t\treturn \"L\";\n+\t\t}\n+\n+\t\tif (order.getAD_InputDataSource_ID() == creditCardDataSourceId)\n+\t\t{\n+\t\t\treturn \"K\";\n+\t\t}\n+\n+\t\treturn \"P\";\n+\t}\n+\n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<ExternalId> externalIds = new ArrayList<ExternalId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\texternalIds.add(ExternalId.of(payment.getExternalOrderId()));\n+\t\t}\n+\t\treturn externalIds;\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<OrderId> orderIds = new ArrayList<OrderId>();\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\torderIds.add(OrderId.ofRepoId(payment.getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIds;\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tpayment.setC_Order_ID(ids.get(ExternalId.of(payment.getExternalOrderId())).getRepoId());\n+\t\t\tsave(payment);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentInvoiceIds(List<I_C_Payment> payments, Map<OrderId, InvoiceId> ids)\n+\t{\n+\t\tfor (I_C_Payment payment : payments)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MzEyMg==", "bodyText": "make sure the process has an understandable name and description", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471463122", "createdAt": "2020-08-17T13:03:11Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565000_sys_gh7109AddUpdateOrderAndInvoiceIdProcess.sql", "diffHunk": "@@ -0,0 +1,85 @@\n+-- 2020-08-11T09:03:36.811Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Process (AccessLevel,AD_Client_ID,AD_Org_ID,AD_Process_ID,AllowProcessReRun,Classname,CopyFromProcess,Created,CreatedBy,EntityType,IsActive,IsApplySecuritySettings,IsBetaFunctionality,IsDirectPrint,IsNotifyUserAfterExecution,IsOneInstanceOnly,IsReport,IsServerProcess,IsTranslateExcelHeaders,IsUseBPartnerLanguage,LockWaitTimeout,Name,RefreshAllAfterExecution,ShowHelp,Type,Updated,UpdatedBy,Value) VALUES ('3',0,0,584736,'Y','de.metas.banking.process.C_Payment_UpdateOrderAndInvoiceId','N',TO_TIMESTAMP('2020-08-11 12:03:36','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','N','N','N','N','N','N','N','Y','Y',0,'updateOrderAndInvoiceID','Y','N','Java',TO_TIMESTAMP('2020-08-11 12:03:36','YYYY-MM-DD HH24:MI:SS'),100,'updateOrderAndInvoiceID')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NDIwNw==", "bodyText": "that's OK, but then please remove this stuff from de.metas.order.model.I_C_Order", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471464207", "createdAt": "2020-08-17T13:04:58Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Order.java", "diffHunk": "@@ -8,6 +8,10 @@\n public interface I_C_Order \n {\n \n+\tString COLUMNNAME_AD_InputDataSource_ID = \"AD_InputDataSource_ID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n          \n          \n            \n            \tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(List<OrderId> orderIds);", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471465049", "createdAt": "2020-08-17T13:06:27Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java", "diffHunk": "@@ -57,6 +58,10 @@\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tI_C_Invoice getByOrderId(final OrderId orderId);\n          \n          \n            \n            \tI_C_Invoice getByOrderId(OrderId orderId);", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471465109", "createdAt": "2020-08-17T13:06:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceDAO.java", "diffHunk": "@@ -57,6 +58,10 @@\n \n \tvoid save(org.compiere.model.I_C_InvoiceLine invoiceLine);\n \n+\tMap<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds);\n+\n+\tI_C_Invoice getByOrderId(final OrderId orderId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2ODA5Nw==", "bodyText": "i think there is no point loading them one-by-one.\nyou can use IQueryBuilder.addInArrayFilter()", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471468097", "createdAt": "2020-08-17T13:12:04Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)\n+\t\t{\n+\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2ODM5Mg==", "bodyText": "i think the method is never used. can be removed or made private", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471468392", "createdAt": "2020-08-17T13:12:35Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)\n+\t\t{\n+\t\t\torderIdInvoiceIdMap.put(orderId, InvoiceId.ofRepoId(getByOrderId(orderId).getC_Order_ID()));\n+\t\t}\n+\t\treturn orderIdInvoiceIdMap;\n+\t}\n+\n+\t@Override\n+\tpublic I_C_Invoice getByOrderId(@NonNull final OrderId orderId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = Services.get(IQueryBL.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2OTUzMw==", "bodyText": "move this method into AbstractInvoiceDAO. Is has no hardcoded SQL-stuff, so we don't need a dedicated PlainInvoiceDAO.java implementation", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471469533", "createdAt": "2020-08-17T13:14:30Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceDAO.java", "diffHunk": "@@ -53,6 +62,33 @@ public I_C_Invoice createInvoice(String trxName)\n \t\treturn InterfaceWrapperHelper.create(Env.getCtx(), I_C_Invoice.class, trxName);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDEyNA==", "bodyText": "the same comments as in IInvoiceDAO", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471470124", "createdAt": "2020-08-17T13:15:28Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java", "diffHunk": "@@ -73,6 +77,34 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn order;\n \t}\n \n+\t@Override\n+\tpublic I_C_Order getByExternalId(@NonNull final ExternalId externalId)\n+\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MDQ0MA==", "bodyText": "why this method in OrderBL?", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471470440", "createdAt": "2020-08-17T13:16:02Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -113,6 +114,12 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn Services.get(IOrderDAO.class).getById(orderId);\n \t}\n \n+\t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3Nzk4MQ==", "bodyText": "this method and it's invocation in de.metas.banking.process.C_Payment_UpdateOrderAndInvoiceId#doIt is unneccesary complex.\nAlso:\n\nif it starts with is it should return a boolean\ndon't return a String constant, but (if this method is not removed), an enum", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r471477981", "createdAt": "2020-08-17T13:27:59Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +429,66 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic String isPaypalOrCreditCardPayment(final I_C_Payment payment, final int paypalDataSourceId, final int creditCardDataSourceId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333f32ead8aeda34f98ed2f0af0fdfe7cb891cf5"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/a9c7fe55902eaa2aca9c5fdbadaddb0698eb0652", "committedDate": "2020-08-23T20:15:12Z", "message": "#7109 - WIP - process now sets the c_order_id and  c_invoice_id for selected payments, if they are available.\n\nJust Need to add call to the payment allocation process after setting invoice and order ids."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a59155f71444838f26cceaf309474921176a1fa6", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/a59155f71444838f26cceaf309474921176a1fa6", "committedDate": "2020-08-23T20:23:36Z", "message": "#7109 - Function name refractoring."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee040d87d1461e870486db1d51d7ab04c7d79a47", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/ee040d87d1461e870486db1d51d7ab04c7d79a47", "committedDate": "2020-08-23T21:27:21Z", "message": "#7109 - Also setting payment rule column."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0e8c4d6d8cbe0d3347376c21b1dede63cb98d9", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/9f0e8c4d6d8cbe0d3347376c21b1dede63cb98d9", "committedDate": "2020-08-23T21:43:26Z", "message": "#7109 - Also displaying newly added payment rule column."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5520a32c4228018a56eecc0a9e4f7a307ff8134", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/a5520a32c4228018a56eecc0a9e4f7a307ff8134", "committedDate": "2020-08-24T21:34:22Z", "message": "Merge remote-tracking branch 'origin/blonde_monkey_uat' into gh7109"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b94c8291f60ac3256cf55c0930eadc5a28cab25", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/6b94c8291f60ac3256cf55c0930eadc5a28cab25", "committedDate": "2020-08-25T10:15:54Z", "message": "#7109 - Refractored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d899762e25ef1393bc73019b29f2c48fba8143", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/49d899762e25ef1393bc73019b29f2c48fba8143", "committedDate": "2020-08-25T10:34:52Z", "message": "#7109 - Avoiding NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9150bceb91da663e6509fff69ffd2e89eeeb08", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/7f9150bceb91da663e6509fff69ffd2e89eeeb08", "committedDate": "2020-08-25T12:25:53Z", "message": "#7109 - Added payment interceptor to make allocations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/4ed0541af2342d5a9806b3307d7d2173b75d5be2", "committedDate": "2020-08-25T12:40:36Z", "message": "#7109 - Reverted Input Data Source Modifications since we no longer need them."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTgwMzEw", "url": "https://github.com/metasfresh/metasfresh/pull/7118#pullrequestreview-475180310", "createdAt": "2020-08-26T06:17:24Z", "commit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxNzoyNFrOHG9WpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0NjoxNlrOHHCL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1ODcyNA==", "bodyText": "this import is probably not needed..", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477058724", "createdAt": "2020-08-26T06:17:24Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/payment/PaymentRule.java", "diffHunk": "@@ -5,6 +5,7 @@\n \n import javax.annotation.Nullable;\n \n+import com.google.common.collect.ImmutableSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3MjQ1OQ==", "bodyText": "make sure the process has an understandable name and description\n\n\ni'm still missing understandable name & description; the user needs to know how the C_Order_ID and C_Invoice_ID is set (functional).\nYou can either do this via a really clever process name (which i don't know how), or via a process description that is shown to the user\n\"Bestellung\" means purchase order in the metasfresh-terminology. For this case, i thing you need to write \"Auftrag/Bestellung\".\n\"festlegen\" is also a bit misleading. I think you should go with \"ermitteln\"", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477072459", "createdAt": "2020-08-26T06:50:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565000_sys_gh7109AddUpdateOrderAndInvoiceIdProcess.sql", "diffHunk": "@@ -0,0 +1,145 @@\n+-- 2020-08-11T09:03:36.811Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Process (AccessLevel,AD_Client_ID,AD_Org_ID,AD_Process_ID,AllowProcessReRun,Classname,CopyFromProcess,Created,CreatedBy,EntityType,IsActive,IsApplySecuritySettings,IsBetaFunctionality,IsDirectPrint,IsNotifyUserAfterExecution,IsOneInstanceOnly,IsReport,IsServerProcess,IsTranslateExcelHeaders,IsUseBPartnerLanguage,LockWaitTimeout,Name,RefreshAllAfterExecution,ShowHelp,Type,Updated,UpdatedBy,Value) VALUES ('3',0,0,584736,'Y','de.metas.banking.process.C_Payment_UpdateOrderAndInvoiceId','N',TO_TIMESTAMP('2020-08-11 12:03:36','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','N','N','N','N','N','N','N','Y','Y',0,'updateOrderAndInvoiceID','Y','N','Java',TO_TIMESTAMP('2020-08-11 12:03:36','YYYY-MM-DD HH24:MI:SS'),100,'updateOrderAndInvoiceID')\n+;\n+\n+-- 2020-08-11T09:03:36.821Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Process_Trl (AD_Language,AD_Process_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Process_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Process t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Process_ID=584736 AND NOT EXISTS (SELECT 1 FROM AD_Process_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Process_ID=t.AD_Process_ID)\n+;\n+\n+-- 2020-08-11T09:04:55.750Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Process_Para (AD_Client_ID,AD_Element_ID,AD_Org_ID,AD_Process_ID,AD_Process_Para_ID,AD_Reference_ID,ColumnName,Created,CreatedBy,Description,EntityType,FieldLength,Help,IsActive,IsAutocomplete,IsCentrallyMaintained,IsEncrypted,IsMandatory,IsRange,Name,SeqNo,Updated,UpdatedBy) VALUES (0,1143,0,584736,541852,10,'PaymentRule',TO_TIMESTAMP('2020-08-11 12:04:55','YYYY-MM-DD HH24:MI:SS'),100,'Wie die Rechnung bezahlt wird','D',0,'Die Zahlungsweise zeigt die Art der Bezahlung der Rechnung an.','Y','N','Y','N','N','N','Zahlungsweise',10,TO_TIMESTAMP('2020-08-11 12:04:55','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-08-11T09:04:55.753Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Process_Para_Trl (AD_Language,AD_Process_Para_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Process_Para_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Process_Para t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Process_Para_ID=541852 AND NOT EXISTS (SELECT 1 FROM AD_Process_Para_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Process_Para_ID=t.AD_Process_Para_ID)\n+;\n+\n+-- 2020-08-11T09:07:16.706Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Reference (AD_Client_ID,AD_Org_ID,AD_Reference_ID,Created,CreatedBy,Description,EntityType,IsActive,IsOrderByValue,Name,Updated,UpdatedBy,ValidationType) VALUES (0,0,541169,TO_TIMESTAMP('2020-08-11 12:07:16','YYYY-MM-DD HH24:MI:SS'),100,'In & Out Payment Options','D','Y','N','_Payment Rule - Paypal & Credit Card',TO_TIMESTAMP('2020-08-11 12:07:16','YYYY-MM-DD HH24:MI:SS'),100,'L')\n+;\n+\n+-- 2020-08-11T09:07:16.710Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Reference_Trl (AD_Language,AD_Reference_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Reference_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Reference t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Reference_ID=541169 AND NOT EXISTS (SELECT 1 FROM AD_Reference_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Reference_ID=t.AD_Reference_ID)\n+;\n+\n+-- 2020-08-11T09:07:48.648Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Ref_List (AD_Client_ID,AD_Org_ID,AD_Ref_List_ID,AD_Reference_ID,Created,CreatedBy,EntityType,IsActive,Name,Updated,UpdatedBy,Value,ValueName) VALUES (0,0,542175,541169,TO_TIMESTAMP('2020-08-11 12:07:48','YYYY-MM-DD HH24:MI:SS'),100,'de.metas.payment.paypal','Y','Paypal',TO_TIMESTAMP('2020-08-11 12:07:48','YYYY-MM-DD HH24:MI:SS'),100,'L','Paypal')\n+;\n+\n+-- 2020-08-11T09:07:48.652Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Ref_List_Trl (AD_Language,AD_Ref_List_ID, Description,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Ref_List_ID, t.Description,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Ref_List t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Ref_List_ID=542175 AND NOT EXISTS (SELECT 1 FROM AD_Ref_List_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Ref_List_ID=t.AD_Ref_List_ID)\n+;\n+\n+-- 2020-08-11T09:08:21.855Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Ref_List (AD_Client_ID,AD_Org_ID,AD_Ref_List_ID,AD_Reference_ID,Created,CreatedBy,EntityType,IsActive,Name,Updated,UpdatedBy,Value,ValueName) VALUES (0,0,542176,541169,TO_TIMESTAMP('2020-08-11 12:08:21','YYYY-MM-DD HH24:MI:SS'),100,'U','Y','Zahlung via Kreditkarte',TO_TIMESTAMP('2020-08-11 12:08:21','YYYY-MM-DD HH24:MI:SS'),100,'K','Zahlung via Kreditkarte')\n+;\n+\n+-- 2020-08-11T09:08:21.859Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Ref_List_Trl (AD_Language,AD_Ref_List_ID, Description,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Ref_List_ID, t.Description,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Ref_List t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Ref_List_ID=542176 AND NOT EXISTS (SELECT 1 FROM AD_Ref_List_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Ref_List_ID=t.AD_Ref_List_ID)\n+;\n+\n+-- 2020-08-11T09:08:51.019Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+UPDATE AD_Ref_List SET EntityType='D',Updated=TO_TIMESTAMP('2020-08-11 12:08:51','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Ref_List_ID=542176\n+;\n+\n+-- 2020-08-11T09:11:35.360Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+UPDATE AD_Process_Para SET AD_Reference_ID=17, AD_Reference_Value_ID=541169, AD_Val_Rule_ID=52033,Updated=TO_TIMESTAMP('2020-08-11 12:11:35','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Process_Para_ID=541852\n+;\n+\n+-- 2020-08-11T09:12:36.979Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM  AD_Process_Para_Trl WHERE AD_Process_Para_ID=541852\n+;\n+\n+-- 2020-08-11T09:12:36.987Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM AD_Process_Para WHERE AD_Process_Para_ID=541852\n+;\n+\n+-- 2020-08-11T09:12:48.217Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM  AD_Reference_Trl WHERE AD_Reference_ID=541169\n+;\n+\n+-- 2020-08-11T09:12:48.225Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM AD_Reference WHERE AD_Reference_ID=541169\n+;\n+\n+-- 2020-08-11T09:13:43.302Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Table_Process (AD_Client_ID,AD_Org_ID,AD_Process_ID,AD_Table_ID,AD_Table_Process_ID,Created,CreatedBy,EntityType,IsActive,Updated,UpdatedBy,WEBUI_DocumentAction,WEBUI_IncludedTabTopAction,WEBUI_ViewAction,WEBUI_ViewQuickAction,WEBUI_ViewQuickAction_Default) VALUES (0,0,584736,335,540846,TO_TIMESTAMP('2020-08-11 12:13:43','YYYY-MM-DD HH24:MI:SS'),100,'D','Y',TO_TIMESTAMP('2020-08-11 12:13:43','YYYY-MM-DD HH24:MI:SS'),100,'Y','N','Y','N','N')\n+;\n+\n+-- 2020-08-23T21:28:18.864Z\n+-- URL zum Konzept\n+INSERT INTO AD_Field (AD_Client_ID,AD_Column_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,ColumnDisplayLength,Created,CreatedBy,Description,DisplayLength,EntityType,Help,IncludedTabHeight,IsActive,IsDisplayed,IsDisplayedGrid,IsEncrypted,IsFieldOnly,IsHeading,IsReadOnly,IsSameLine,Name,SeqNo,SeqNoGrid,SortNo,SpanX,SpanY,Updated,UpdatedBy) VALUES (0,571098,616260,0,330,0,TO_TIMESTAMP('2020-08-24 00:28:17','YYYY-MM-DD HH24:MI:SS'),100,'Wie die Rechnung bezahlt wird',0,'D','Die Zahlungsweise zeigt die Art der Bezahlung der Rechnung an.',0,'Y','Y','Y','N','N','N','N','N','Zahlungsweise',680,670,0,1,1,TO_TIMESTAMP('2020-08-24 00:28:17','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-08-23T21:28:19.336Z\n+-- URL zum Konzept\n+INSERT INTO AD_Field_Trl (AD_Language,AD_Field_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Field_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Field t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Field_ID=616260 AND NOT EXISTS (SELECT 1 FROM AD_Field_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Field_ID=t.AD_Field_ID)\n+;\n+\n+-- 2020-08-23T21:28:19.431Z\n+-- URL zum Konzept\n+/* DDL */  select update_FieldTranslation_From_AD_Name_Element(1143)\n+;\n+\n+-- 2020-08-23T21:28:19.595Z\n+-- URL zum Konzept\n+DELETE FROM AD_Element_Link WHERE AD_Field_ID=616260\n+;\n+\n+-- 2020-08-23T21:28:19.651Z\n+-- URL zum Konzept\n+/* DDL */ select AD_Element_Link_Create_Missing_Field(616260)\n+;\n+\n+-- 2020-08-23T21:40:23.838Z\n+-- URL zum Konzept\n+INSERT INTO AD_UI_Element (AD_Client_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,AD_UI_ElementGroup_ID,AD_UI_Element_ID,AD_UI_ElementType,Created,CreatedBy,Description,Help,IsActive,IsAdvancedField,IsAllowFiltering,IsDisplayed,IsDisplayedGrid,IsDisplayed_SideList,IsMultiLine,MultiLine_LinesCount,Name,SeqNo,SeqNoGrid,SeqNo_SideList,Updated,UpdatedBy) VALUES (0,616260,0,330,543263,570776,'F',TO_TIMESTAMP('2020-08-24 00:40:23','YYYY-MM-DD HH24:MI:SS'),100,'Wie die Rechnung bezahlt wird','Die Zahlungsweise zeigt die Art der Bezahlung der Rechnung an.','Y','N','N','Y','N','N','N',0,'Zahlungsweise',20,0,0,TO_TIMESTAMP('2020-08-24 00:40:23','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-08-25T07:33:00.291Z\n+-- URL zum Konzept\n+UPDATE AD_Process SET Name=' Bestellung und Rechnung festlegen',Updated=TO_TIMESTAMP('2020-08-25 10:32:59','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Process_ID=584736\n+;\n+\n+-- 2020-08-25T07:33:14.116Z\n+-- URL zum Konzept\n+UPDATE AD_Process SET Name='Bestellung und Rechnung festlegen',Updated=TO_TIMESTAMP('2020-08-25 10:33:13','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Process_ID=584736\n+;\n+\n+-- 2020-08-25T07:33:31.256Z\n+-- URL zum Konzept\n+UPDATE AD_Process_Trl SET Name='Bestellung und Rechnung festlegen',Updated=TO_TIMESTAMP('2020-08-25 10:33:31','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Language='de_CH' AND AD_Process_ID=584736\n+;\n+\n+-- 2020-08-25T07:33:49.222Z\n+-- URL zum Konzept\n+UPDATE AD_Process_Trl SET Name='Bestellung und Rechnung festlegen',Updated=TO_TIMESTAMP('2020-08-25 10:33:49','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Language='de_DE' AND AD_Process_ID=584736\n+;\n+\n+-- 2020-08-25T07:34:01.397Z\n+-- URL zum Konzept\n+UPDATE AD_Process_Trl SET IsTranslated='Y', Name='Set Order and Invoice',Updated=TO_TIMESTAMP('2020-08-25 10:34:01','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Language='en_US' AND AD_Process_ID=584736\n+;\n+\n+-- 2020-08-25T07:34:47.225Z\n+-- URL zum Konzept\n+UPDATE AD_Process_Trl SET Name='Bestellung und Rechnung festlegen',Updated=TO_TIMESTAMP('2020-08-25 10:34:47','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Language='nl_NL' AND AD_Process_ID=584736\n+;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3ODU0Ng==", "bodyText": "here i think you also need to filter for document status; see de.metas.document.engine.DocStatus#isCompleted", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477078546", "createdAt": "2020-08-26T07:03:22Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/process/C_Payment_UpdateOrderAndInvoiceId.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * #%L\n+ * de.metas.banking.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.banking.process;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.impex.InputDataSourceId;\n+import de.metas.impex.api.IInputDataSourceDAO;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderBL;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentRule;\n+import de.metas.payment.api.IPaymentBL;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessInfo;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.util.Services;\n+import de.metas.util.lang.ExternalId;\n+import lombok.NonNull;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.compiere.model.I_C_Payment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static de.metas.payment.PaymentRule.CreditCard;\n+import static de.metas.payment.PaymentRule.PayPal;\n+\n+public class C_Payment_UpdateOrderAndInvoiceId extends JavaProcess implements IProcessPrecondition\n+{\n+\n+\tprivate final IPaymentBL paymentBL = Services.get(IPaymentBL.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IInputDataSourceDAO inputDataSourceDAO = Services.get(IInputDataSourceDAO.class);\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(@NonNull final IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.isNoSelection())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"No Selection\");\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tList<I_C_Payment> payments = getSelectedPayments();\n+\n+\t\tList<I_C_Payment> filteredPayments = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !p.isAllocated())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MDMxNw==", "bodyText": "avoid the n+1 problem by loading all I_C_Invoices at once. Consider using org.compiere.model.IQuery#listDistinct(java.lang.String...) or listIds", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477080317", "createdAt": "2020-08-26T07:07:16Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceDAO.java", "diffHunk": "@@ -78,6 +79,23 @@ public void save(@NonNull final org.compiere.model.I_C_InvoiceLine invoiceLine)\n \t\tsaveRecord(invoiceLine);\n \t}\n \n+\t@Override\n+\tpublic Map<OrderId, InvoiceId> getInvoiceIdsForOrderIds(final List<OrderId> orderIds)\n+\t{\n+\t\tMap<OrderId, InvoiceId> orderIdInvoiceIdMap = new HashMap<OrderId, InvoiceId>();\n+\n+\t\tfor (OrderId orderId : orderIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MTM5NQ==", "bodyText": "Avoid the n+1 problem; load all records..see that other \"n+1\" comment of this review", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477081395", "createdAt": "2020-08-26T07:09:41Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/AbstractOrderDAO.java", "diffHunk": "@@ -73,6 +73,36 @@ public I_C_Order getById(@NonNull final OrderId orderId)\n \t\treturn order;\n \t}\n \n+\t@Nullable\n+\tprivate I_C_Order getByExternalId(@Nullable final ExternalId externalId)\n+\t{\n+\t\tfinal I_C_Order order = Services.get(IQueryBL.class)\n+\t\t\t\t.createQueryBuilder(I_C_Order.class)\n+\t\t\t\t.addEqualsFilter(I_C_Order.COLUMNNAME_ExternalId, externalId.getValue())\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\treturn order;\n+\t}\n+\n+\t@Override\n+\tpublic Map<ExternalId, OrderId> getOrderIdsForExternalIds(final List<ExternalId> externalIds)\n+\t{\n+\t\tMap<ExternalId, OrderId> externalIdOrderIdMap = new HashMap<ExternalId, OrderId>();\n+\n+\t\tfor (final ExternalId externalId : externalIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NDQzNg==", "bodyText": "I understand that this is aiming at completed payments that get their respective invoice from your process.\nSo here as well (if i understand it right), you need to check if the payment is even completed.\nPS: that check is done in autoAllocateSpecificPayment still i would like the check also in here, to avoid FUD about this method", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477084436", "createdAt": "2020-08-26T07:16:01Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment\n+{\n+\tpublic static final C_Payment INSTANCE = new C_Payment();\n+\n+\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n+\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n+\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)\n+\t{\n+\t\tif (order == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (order.getC_Payment_ID() <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal boolean isPrepayOrder = docTypeBL.isPrepay(DocTypeId.ofRepoId(order.getC_DocType_ID()));\n+\t\tif (isPrepayOrder)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal I_C_Payment payment = paymentDAO.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));\n+\t\treturn payment.getC_Order_ID() == order.getC_Order_ID();\n+\t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_AFTER_CHANGE }, ifColumnsChanged = { I_C_Payment.COLUMNNAME_C_Invoice_ID })\n+\tpublic void allocateInvoiceAgainstPaymentIfNecessary(final I_C_Payment payment)\n+\t{\n+\t\tfinal I_C_Invoice invoice;\n+\t\tfinal I_C_Order order;\n+\t\tif (payment.getC_Order_ID() > 0)\n+\t\t{\n+\t\t\torder = orderDAO.getById(OrderId.ofRepoId(payment.getC_Order_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NTYzMg==", "bodyText": "This method and also allocateInvoiceAgainstPaymentIfNecessary seems to me very similar to the one i recently saw in a PR from @TheBestPessimist (AFAIR).\nDo we have two versions of it now? If yes, please make sure to consolidate it.", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477085632", "createdAt": "2020-08-26T07:18:34Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment\n+{\n+\tpublic static final C_Payment INSTANCE = new C_Payment();\n+\n+\tprivate final IDocTypeBL docTypeBL = Services.get(IDocTypeBL.class);\n+\tprivate final IPaymentDAO paymentDAO = Services.get(IPaymentDAO.class);\n+\tprivate final IAllocationBL allocationBL = Services.get(IAllocationBL.class);\n+\tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tprivate final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n+\n+\tboolean canAllocateOrderPaymentToInvoice(final I_C_Order order)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MDcxMQ==", "bodyText": "Avoid passing I_C_Payments. Suggestion: instead of driving the BL from the JavaProcess and, hava just one public method and call that from the process", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477090711", "createdAt": "2020-08-26T07:28:02Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/IPaymentBL.java", "diffHunk": "@@ -97,6 +101,14 @@\n \t */\n \tboolean isMatchInvoice(I_C_Payment payment, I_C_Invoice invoice);\n \n+\tList<ExternalId> getExternalIdsList(List<I_C_Payment> payments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjEwNw==", "bodyText": "is seems as if you accidentally fromatted this file; in that case, please revert that; Also, please make sure that intellij horons the // @formatter:off, or if that comment is maybe wrong..", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477092107", "createdAt": "2020-08-26T07:30:38Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/model/I_C_Order.java", "diffHunk": "@@ -33,42 +32,66 @@\n \tvoid setAD_InputDataSource_ID(int AD_InputDataSource_ID);\n \n \tString COLUMNNAME_InvoiceStatus = \"InvoiceStatus\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5Mjc1NQ==", "bodyText": "this import is not used", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477092755", "createdAt": "2020-08-26T07:31:46Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/impl/OrderBL.java", "diffHunk": "@@ -69,6 +69,7 @@\n import de.metas.util.Services;\n import de.metas.util.collections.CollectionUtils;\n import de.metas.common.util.CoalesceUtil;\n+import de.metas.util.lang.ExternalId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNTc5NA==", "bodyText": "import not used", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477105794", "createdAt": "2020-08-26T07:54:53Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/order/IOrderBL.java", "diffHunk": "@@ -25,6 +25,7 @@\n import java.time.ZoneId;\n import java.util.Properties;\n \n+import de.metas.util.lang.ExternalId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNzM1Nw==", "bodyText": "can't you simply use ids.get(..) here?", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477107357", "createdAt": "2020-08-26T07:57:15Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +427,54 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getExternalOrderId() == null))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithExternalIds, p -> ExternalId.ofOrNull(p.getExternalOrderId()));\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithOrderIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getC_Order_ID() == 0))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithOrderIds, p -> OrderId.ofRepoId(p.getC_Order_ID()));\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal OrderId orderId = ids.getOrDefault(ExternalId.ofOrNull(payment.getExternalOrderId()), OrderId.ofRepoIdOrNull(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNzY4Nw==", "bodyText": "same..i think you can sim,ply use ids.get(...)", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477107687", "createdAt": "2020-08-26T07:57:45Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/api/impl/PaymentBL.java", "diffHunk": "@@ -419,6 +427,54 @@ public boolean isMatchInvoice(final I_C_Payment payment, final I_C_Invoice invoi\n \t\treturn false;\n \t}\n \n+\t@Override\n+\tpublic List<ExternalId> getExternalIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithExternalIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getExternalOrderId() == null))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithExternalIds, p -> ExternalId.ofOrNull(p.getExternalOrderId()));\n+\t}\n+\n+\t@Override\n+\tpublic List<OrderId> getOrderIdsList(List<I_C_Payment> payments)\n+\t{\n+\t\tfinal List<I_C_Payment> paymentsWithOrderIds = payments\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(p -> !(p.getC_Order_ID() == 0))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn CollectionUtils.extractDistinctElements(paymentsWithOrderIds, p -> OrderId.ofRepoId(p.getC_Order_ID()));\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentOrderIds(List<I_C_Payment> payments, Map<ExternalId, OrderId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal OrderId orderId = ids.getOrDefault(ExternalId.ofOrNull(payment.getExternalOrderId()), OrderId.ofRepoIdOrNull(0));\n+\t\t\tif (orderId != null)\n+\t\t\t{\n+\t\t\t\tpayment.setC_Order_ID(orderId.getRepoId());\n+\t\t\t\tsave(payment);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setPaymentInvoiceIds(List<I_C_Payment> payments, Map<OrderId, InvoiceId> ids)\n+\t{\n+\t\tfor (final I_C_Payment payment : payments)\n+\t\t{\n+\t\t\tfinal InvoiceId invoiceId = ids.getOrDefault(OrderId.ofRepoIdOrNull(payment.getC_Order_ID()), InvoiceId.ofRepoIdOrNull(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzMzIwOA==", "bodyText": "(i wrote this comment after the two that follow in this class)\nI understand that this is aiming at completed payments that get their respective invoice from your process.\n\nI think that your process is the only one to set C_Order_ID and C_Invoice_ID on an already completed payment\nfor not-yet-completed payment, we AFAIU have Cristian's code\n\n=> so, rather that have this model interceptor that \"incidentally\" allocated the payment,\nmake the allocation explicitly in the PaymentBL-code that also sets the C_Order_ID and C_Invoice_ID", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477133208", "createdAt": "2020-08-26T08:38:57Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/C_Payment.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import de.metas.adempiere.model.I_C_Invoice;\n+import de.metas.allocation.api.IAllocationBL;\n+import de.metas.document.DocTypeId;\n+import de.metas.document.IDocTypeBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.order.IOrderDAO;\n+import de.metas.order.OrderId;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.api.IPaymentDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.I_C_Order;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_C_Payment.class)\n+@Component\n+public class C_Payment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNzg5OA==", "bodyText": "C_Payment has no callout methods AFAIU\nGenerally, think we should ditch the whole intercheptor; see my comment at C_Payment", "url": "https://github.com/metasfresh/metasfresh/pull/7118#discussion_r477137898", "createdAt": "2020-08-26T08:46:16Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/payment/interceptor/PaymentModuleInterceptor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.business\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.interceptor;\n+\n+import org.adempiere.ad.callout.spi.IProgramaticCalloutProvider;\n+import org.adempiere.ad.modelvalidator.AbstractModuleInterceptor;\n+import org.adempiere.ad.modelvalidator.IModelValidationEngine;\n+\n+public class PaymentModuleInterceptor extends AbstractModuleInterceptor\n+{\n+\tpublic static final PaymentModuleInterceptor INSTANCE = new PaymentModuleInterceptor();\n+\n+\tprivate PaymentModuleInterceptor()\n+\t{\n+\t}\n+\n+\t@Override\n+\tprotected void registerInterceptors(final IModelValidationEngine engine)\n+\t{\n+\t\tengine.addModelValidator(C_Payment.INSTANCE); // FRESH-348\n+\n+\t}\n+\n+\t@Override\n+\tprotected void registerCallouts(final IProgramaticCalloutProvider calloutsRegistry)\n+\t{\n+\t\tcalloutsRegistry.registerAnnotatedCallout(C_Payment.INSTANCE); // FRESH-348", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed0541af2342d5a9806b3307d7d2173b75d5be2"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0353008a2e047f7e836312b980550a7ffcdc5a9f", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/0353008a2e047f7e836312b980550a7ffcdc5a9f", "committedDate": "2020-08-27T12:30:28Z", "message": "#7109 - Reverted I_C_Order modifications."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcfd5892fd229c9314336893a0b290a9102b3a96", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/fcfd5892fd229c9314336893a0b290a9102b3a96", "committedDate": "2020-08-27T18:29:24Z", "message": "#7109 - Implemented Review Notes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6101baf420e972a005aa42b9f934951a3b394c66", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/6101baf420e972a005aa42b9f934951a3b394c66", "committedDate": "2020-08-27T18:39:55Z", "message": "#7109 - Updated Description."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cd8ef353d6d2772b083c8cd4d5f9d5c902c9a80", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0cd8ef353d6d2772b083c8cd4d5f9d5c902c9a80", "committedDate": "2020-08-28T05:42:30Z", "message": "div minor changes\n\n* use DocStatus.isCompleted()\n* C_Invoice: get rid of private one-line deletegate method; also move corresponding tests\n* IInvoiceDAO: clean up\n* InvoiceDAO: clean up; addInArrayFilter supports RepoIdAware, see javadoc; pulled not-SQL depending method up into AbstractInvoiceDAO\n* AbstractInvoiceDAO remove useless methods\n* PaymentBL: add `@NonNull final`s\n\nhttps://github.com/metasfresh/metasfresh/issues/7109"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjU0Njkx", "url": "https://github.com/metasfresh/metasfresh/pull/7118#pullrequestreview-477254691", "createdAt": "2020-08-28T05:47:26Z", "commit": {"oid": "0cd8ef353d6d2772b083c8cd4d5f9d5c902c9a80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f516edfc9e51f89f7dc6df30fffa3810cb7f0d3", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4f516edfc9e51f89f7dc6df30fffa3810cb7f0d3", "committedDate": "2020-08-28T05:48:03Z", "message": "Merge branch 'blonde_monkey_uat' into gh7109"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18c49ff64d9a34e594042bce84a0eaa64f617322", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/18c49ff64d9a34e594042bce84a0eaa64f617322", "committedDate": "2020-08-28T10:39:08Z", "message": "Merge remote-tracking branch 'origin/blonde_monkey_uat' into gh7109"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8a3570c831276b2cd07aa467faf5ee5c340f7b", "author": {"user": {"login": "dragospodariu96", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/5b8a3570c831276b2cd07aa467faf5ee5c340f7b", "committedDate": "2020-08-28T10:39:40Z", "message": "Merge remote-tracking branch 'origin/gh7109' into gh7109"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3257, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}