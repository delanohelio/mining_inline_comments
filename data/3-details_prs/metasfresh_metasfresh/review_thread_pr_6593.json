{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDY1NjI2", "number": 6593, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0OToyMVrOD6LMEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo1MDozN1rOD6LNyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzI3MzE0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0OToyMVrOGR3BDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0MTozOFrOGR4yiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MDM2NQ==", "bodyText": "pls add @NonNull at least to public methods like this one", "url": "https://github.com/metasfresh/metasfresh/pull/6593#discussion_r421380365", "createdAt": "2020-05-07T09:49:21Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "diffHunk": "@@ -64,13 +68,18 @@\n \tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n \tprivate final IContractsDAO contractsDAO = Services.get(IContractsDAO.class);\n \tprivate final ContractInvoiceService contractInvoiceService;\n-\t\n+\n+\tpublic I_C_Customer_Retention getById(final CustomerRetentionId customerRetentionId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc2900ec42e52da88c383e73e29dae208535c4f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQwOTQxNg==", "bodyText": "Done.", "url": "https://github.com/metasfresh/metasfresh/pull/6593#discussion_r421409416", "createdAt": "2020-05-07T10:41:38Z", "author": {"login": "metas-rc"}, "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "diffHunk": "@@ -64,13 +68,18 @@\n \tprivate final IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n \tprivate final IContractsDAO contractsDAO = Services.get(IContractsDAO.class);\n \tprivate final ContractInvoiceService contractInvoiceService;\n-\t\n+\n+\tpublic I_C_Customer_Retention getById(final CustomerRetentionId customerRetentionId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MDM2NQ=="}, "originalCommit": {"oid": "dfc2900ec42e52da88c383e73e29dae208535c4f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzI3NzU0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo1MDozN1rOGR3D3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo0MjowNFrOGR4zaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MTA4Ng==", "bodyText": "please add a comment or better an Check.assumeNotNull here to make it explicit the you made sure elsewhere this won't be null\nPS: if you need to rely on something outside this class, such as the model interceptors, i suggest to invoke that getCreate createUpdate method instead..", "url": "https://github.com/metasfresh/metasfresh/pull/6593#discussion_r421381086", "createdAt": "2020-05-07T09:50:37Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "diffHunk": "@@ -80,134 +89,111 @@ public I_C_Customer_Retention createNewCustomerRetention(@NonNull final BPartner\n \n \t\tsave(customerRetention);\n \n-\t\treturn customerRetention;\n+\t\treturn CustomerRetentionId.ofRepoId(customerRetention.getC_Customer_Retention_ID());\n \t}\n \n-\tpublic void setNewCustomer(@NonNull final BPartnerId bpartnerId)\n+\t@VisibleForTesting\n+\tvoid setNewCustomer(@NonNull final CustomerRetentionId customerRetentionId)\n \t{\n-\t\tI_C_Customer_Retention customerRetention = retrieveCustomerRetention(bpartnerId);\n-\n-\t\tif (customerRetention == null)\n-\t\t{\n-\t\t\tcustomerRetention = createNewCustomerRetention(bpartnerId);\n-\t\t}\n+\t\tfinal I_C_Customer_Retention customerRetention = getById(customerRetentionId);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc2900ec42e52da88c383e73e29dae208535c4f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQwOTY0MQ==", "bodyText": "Check.assumeNotNull done.", "url": "https://github.com/metasfresh/metasfresh/pull/6593#discussion_r421409641", "createdAt": "2020-05-07T10:42:04Z", "author": {"login": "metas-rc"}, "path": "backend/de.metas.contracts/src/main/java/de/metas/contracts/impl/CustomerRetentionRepository.java", "diffHunk": "@@ -80,134 +89,111 @@ public I_C_Customer_Retention createNewCustomerRetention(@NonNull final BPartner\n \n \t\tsave(customerRetention);\n \n-\t\treturn customerRetention;\n+\t\treturn CustomerRetentionId.ofRepoId(customerRetention.getC_Customer_Retention_ID());\n \t}\n \n-\tpublic void setNewCustomer(@NonNull final BPartnerId bpartnerId)\n+\t@VisibleForTesting\n+\tvoid setNewCustomer(@NonNull final CustomerRetentionId customerRetentionId)\n \t{\n-\t\tI_C_Customer_Retention customerRetention = retrieveCustomerRetention(bpartnerId);\n-\n-\t\tif (customerRetention == null)\n-\t\t{\n-\t\t\tcustomerRetention = createNewCustomerRetention(bpartnerId);\n-\t\t}\n+\t\tfinal I_C_Customer_Retention customerRetention = getById(customerRetentionId);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MTA4Ng=="}, "originalCommit": {"oid": "dfc2900ec42e52da88c383e73e29dae208535c4f"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1501, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}