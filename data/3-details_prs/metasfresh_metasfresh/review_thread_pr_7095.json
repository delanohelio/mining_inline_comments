{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDI1ODcw", "number": 7095, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowMjo1N1rOEWp_JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowNzowN1rOEWqBMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTkyMDM3OnYy", "diffSide": "RIGHT", "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowMjo1N1rOG-Bd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowMjo1N1rOG-Bd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4ODk0MQ==", "bodyText": "I believe L:3 can be removed", "url": "https://github.com/metasfresh/metasfresh/pull/7095#discussion_r467688941", "createdAt": "2020-08-10T05:02:57Z", "author": {"login": "petrican"}, "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "diffHunk": "@@ -1,56 +1,52 @@\n import React from 'react';\n-import { mount } from 'enzyme';\n-// import { ShortcutProvider } from '../../../components/keyshortcuts/ShortcutProvider';\n-import { initialState as appHandlerState } from '../../../reducers/appHandler';\n-import { initialState as windowHandlerState } from '../../../reducers/windowHandler';\n-import { Provider } from 'react-redux';\n-import configureStore from 'redux-mock-store';\n-import merge from 'merge';\n-import tableQuickInputProps from '../../../../test_setup/fixtures/table/table_quick_input.json';\n+import { shallow, render } from 'enzyme';\n+import renderer from 'react-test-renderer';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb13786fb10927d292e7194080f540e7f1d43d1c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTkyNDA1OnYy", "diffSide": "RIGHT", "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowNTo1MFrOG-Bf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowNTo1MFrOG-Bf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4OTQ2MA==", "bodyText": "const wrapperTableCMenu = shallow(<TableQuickInput {...initialProps} />);  // prettify it", "url": "https://github.com/metasfresh/metasfresh/pull/7095#discussion_r467689460", "createdAt": "2020-08-10T05:05:50Z", "author": {"login": "petrican"}, "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "diffHunk": "@@ -1,56 +1,52 @@\n import React from 'react';\n-import { mount } from 'enzyme';\n-// import { ShortcutProvider } from '../../../components/keyshortcuts/ShortcutProvider';\n-import { initialState as appHandlerState } from '../../../reducers/appHandler';\n-import { initialState as windowHandlerState } from '../../../reducers/windowHandler';\n-import { Provider } from 'react-redux';\n-import configureStore from 'redux-mock-store';\n-import merge from 'merge';\n-import tableQuickInputProps from '../../../../test_setup/fixtures/table/table_quick_input.json';\n+import { shallow, render } from 'enzyme';\n+import renderer from 'react-test-renderer';\n+import nock from 'nock';\n+\n+import quickInputData from '../../../../test_setup/fixtures/table/table_quickinput.json';\n import TableQuickInput from '../../../components/table/TableQuickInput';\n-import { getSizeClass } from '../../../utils/tableHelpers'; // imported as it is passed as a prop..\n-\n-const mockStore = configureStore([]);\n-tableQuickInputProps.getSizeClass = getSizeClass;\n-const createStore = function(state = {}) {\n-  const res = merge.recursive(\n-    true,\n-    {\n-      appHandler: {\n-        ...appHandlerState,\n-        me: { timeZone: 'America/Los_Angeles' },\n-      },\n-      windowHandler: { ...windowHandlerState },\n-    },\n-    state\n-  );\n-\n-  return res;\n+\n+const initialProps = {\n+  ...quickInputData.basicProps,\n+  addNotification: jest.fn(),\n };\n-const initialState = createStore({\n-  windowHandler: {\n-    allowShortcut: true,\n-    modal: {\n-      visible: false,\n-    },\n-  },\n-});\n-const store = mockStore(initialState);\n \n-tableQuickInputProps.selected = [];\n+// leaving this so that I won't have to look it up again in case we need it\n+// nock.recorder.rec({\n+//   output_objects: true,\n+// }) \n \n describe('TableQuickInput', () => {\n-  it('renders without errors with the given props', () => {\n-    const wrapperTableCMenu = mount(\n-      <Provider store={store}>\n-        <TableQuickInput {...tableQuickInputProps} />\n-      </Provider>\n-    );\n-    const html = wrapperTableCMenu.html();\n+  beforeEach(() => {\n+    const { docType, docId, tabId } = initialProps;\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .post(`/window/${docType}/${docId}/${tabId}/quickInput`)\n+      .reply(200, quickInputData.data1);\n \n-    expect(html).toContain(\n-      `<form class=\"row quick-input-container\"><div class=\"col-sm-12 col-md-3 col-lg-2 hint\">(Press 'Enter' to add)</div><button type=\"submit\" class=\"hidden-up\"></button></form>`\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/${docType}/${docId}/${tabId}/quickInput/layout`)\n+      .reply(200, quickInputData.layout1); \n+  });\n+\n+  it('renders without errors', () => {\n+    const wrapperTableCMenu = shallow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb13786fb10927d292e7194080f540e7f1d43d1c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTkyNTYxOnYy", "diffSide": "RIGHT", "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowNzowOFrOG-Bg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTowNzowOFrOG-Bg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4OTY4Mw==", "bodyText": "const wrapperTableCMenu = render(<TableQuickInput {...initialProps} />);  // prettify it in one line pls also", "url": "https://github.com/metasfresh/metasfresh/pull/7095#discussion_r467689683", "createdAt": "2020-08-10T05:07:08Z", "author": {"login": "petrican"}, "path": "frontend/src/__tests__/components/table/TableQuickInput.test.js", "diffHunk": "@@ -1,56 +1,52 @@\n import React from 'react';\n-import { mount } from 'enzyme';\n-// import { ShortcutProvider } from '../../../components/keyshortcuts/ShortcutProvider';\n-import { initialState as appHandlerState } from '../../../reducers/appHandler';\n-import { initialState as windowHandlerState } from '../../../reducers/windowHandler';\n-import { Provider } from 'react-redux';\n-import configureStore from 'redux-mock-store';\n-import merge from 'merge';\n-import tableQuickInputProps from '../../../../test_setup/fixtures/table/table_quick_input.json';\n+import { shallow, render } from 'enzyme';\n+import renderer from 'react-test-renderer';\n+import nock from 'nock';\n+\n+import quickInputData from '../../../../test_setup/fixtures/table/table_quickinput.json';\n import TableQuickInput from '../../../components/table/TableQuickInput';\n-import { getSizeClass } from '../../../utils/tableHelpers'; // imported as it is passed as a prop..\n-\n-const mockStore = configureStore([]);\n-tableQuickInputProps.getSizeClass = getSizeClass;\n-const createStore = function(state = {}) {\n-  const res = merge.recursive(\n-    true,\n-    {\n-      appHandler: {\n-        ...appHandlerState,\n-        me: { timeZone: 'America/Los_Angeles' },\n-      },\n-      windowHandler: { ...windowHandlerState },\n-    },\n-    state\n-  );\n-\n-  return res;\n+\n+const initialProps = {\n+  ...quickInputData.basicProps,\n+  addNotification: jest.fn(),\n };\n-const initialState = createStore({\n-  windowHandler: {\n-    allowShortcut: true,\n-    modal: {\n-      visible: false,\n-    },\n-  },\n-});\n-const store = mockStore(initialState);\n \n-tableQuickInputProps.selected = [];\n+// leaving this so that I won't have to look it up again in case we need it\n+// nock.recorder.rec({\n+//   output_objects: true,\n+// }) \n \n describe('TableQuickInput', () => {\n-  it('renders without errors with the given props', () => {\n-    const wrapperTableCMenu = mount(\n-      <Provider store={store}>\n-        <TableQuickInput {...tableQuickInputProps} />\n-      </Provider>\n-    );\n-    const html = wrapperTableCMenu.html();\n+  beforeEach(() => {\n+    const { docType, docId, tabId } = initialProps;\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .post(`/window/${docType}/${docId}/${tabId}/quickInput`)\n+      .reply(200, quickInputData.data1);\n \n-    expect(html).toContain(\n-      `<form class=\"row quick-input-container\"><div class=\"col-sm-12 col-md-3 col-lg-2 hint\">(Press 'Enter' to add)</div><button type=\"submit\" class=\"hidden-up\"></button></form>`\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/${docType}/${docId}/${tabId}/quickInput/layout`)\n+      .reply(200, quickInputData.layout1); \n+  });\n+\n+  it('renders without errors', () => {\n+    const wrapperTableCMenu = shallow(\n+      <TableQuickInput {...initialProps} />\n     );\n+    expect(wrapperTableCMenu.find('.quick-input-container').length).toBe(1);\n+\n+    // const nockCalls = nock.recorder.play() // \"play\" the recording into a variable\n+    // console.log(`Nock Captured Calls: \\n${JSON.stringify(nockCalls,null,2)}`) // inspect calls that Nock recorder\n+\n+    // nock.restore();\n   });\n \n+  it('renders without error 22s', () => {\n+    const wrapperTableCMenu = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb13786fb10927d292e7194080f540e7f1d43d1c"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1353, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}