{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDc2NDQ0", "number": 10004, "title": "Gh10001 Compute taxes based on C_Invoice.M_Warehouse_ID", "bodyText": "#10001", "createdAt": "2020-09-23T22:37:41Z", "url": "https://github.com/metasfresh/metasfresh/pull/10004", "merged": true, "mergeCommit": {"oid": "d0eb896525b1e7dd0b904270339ea632e4d7a881"}, "closed": true, "closedAt": "2020-09-24T11:52:08Z", "author": {"login": "metas-rc"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLzuPWAH2gAyNDkyMDc2NDQ0OjU2MDVhM2IwOWIwMWZlNThjNDgzY2UzZDBiY2I2ODVhZGVmMjc5NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL_MvKAH2gAyNDkyMDc2NDQ0OmQzMjI0OGVjNWIxNDE1YWE5OWZlY2NmZjcwNTllNmJiOTJiNGVjOTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5605a3b09b01fe58c483ce3d0bcb685adef27956", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5605a3b09b01fe58c483ce3d0bcb685adef27956", "committedDate": "2020-09-23T21:46:04Z", "message": "#10001 Warehouse_ID in C_Invoice\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7463a17d0f01a2dd6ee7c66133f6ae9e2e95e86f", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7463a17d0f01a2dd6ee7c66133f6ae9e2e95e86f", "committedDate": "2020-09-23T21:46:38Z", "message": "#10001 compute taxes based on invoice warehouse if set\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1281b3ea248e73cfc2f82056828704c46209d3d5", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1281b3ea248e73cfc2f82056828704c46209d3d5", "committedDate": "2020-09-23T22:26:07Z", "message": "#10001 improve interceptor\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea0a496fb4df61ecd2cbef4a1b32a318fc789b0", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4ea0a496fb4df61ecd2cbef4a1b32a318fc789b0", "committedDate": "2020-09-23T22:36:43Z", "message": "#10001 take warehouse form invoice in this old callout too\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/980c191607bd0b36611883f48869266e5244febf", "committedDate": "2020-09-23T23:21:03Z", "message": "#10001 refactroring broke tests so I reverted it\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM3MjUx", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495237251", "createdAt": "2020-09-24T05:50:36Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MDozNlrOHXKpaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MDozNlrOHXKpaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1MzczNw==", "bodyText": "why is the Warehouse mandatory?", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494053737", "createdAt": "2020-09-24T05:50:36Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java-gen/org/compiere/model/I_C_Invoice.java", "diffHunk": "@@ -1971,4 +1971,33 @@\n     public static final org.adempiere.model.ModelColumn<I_C_Invoice, Object> COLUMN_UserFlag = new org.adempiere.model.ModelColumn<I_C_Invoice, Object>(I_C_Invoice.class, \"UserFlag\", null);\n     /** Column name UserFlag */\n     public static final String COLUMNNAME_UserFlag = \"UserFlag\";\n+    \n+    \n+    /**\n+\t * Set Lager.\n+\t * Storage Warehouse and Service Point\n+\t *\n+\t * <br>Type: TableDir\n+\t * <br>Mandatory: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM4MjU2", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495238256", "createdAt": "2020-09-24T05:53:13Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MzoxM1rOHXKsfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1MzoxM1rOHXKsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NDUyNg==", "bodyText": "why ctx is needed. For legacy APIs u can extract it from invoice.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494054526", "createdAt": "2020-09-24T05:53:13Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceBL.java", "diffHunk": "@@ -423,4 +424,6 @@ void registerLineCopyHandler(\n \t * - set Price_UOM_ID to C_InvoiceLine.C_UOM_ID\n \t */\n \tvoid ensureUOMsAreNotNull(@NonNull InvoiceId invoiceId);\n+\n+\tvoid setInvoiceLineTaxes(Properties ctx, de.metas.adempiere.model.@NonNull I_C_Invoice invoice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjM4NDYz", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495238463", "createdAt": "2020-09-24T05:53:44Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1Mzo0NFrOHXKtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNTo1Mzo0NFrOHXKtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NDY4OA==", "bodyText": "why ctx is needed. for legacy APIs u can extract it from il.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494054688", "createdAt": "2020-09-24T05:53:44Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/IInvoiceLineBL.java", "diffHunk": "@@ -98,4 +104,6 @@\n \tvoid updateLineNetAmt(I_C_InvoiceLine line, BigDecimal qtyEntered);\n \n \tvoid updatePrices(I_C_InvoiceLine invoiceLine);\n+\n+\tboolean setTaxForInvoiceLine(Properties ctx, org.compiere.model.I_C_InvoiceLine il, OrgId orgId, Timestamp taxDate, CountryId countryFromId, BPartnerLocationId partnerLocationId, boolean isSOTrx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjQ1NDQ1", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495245445", "createdAt": "2020-09-24T06:10:10Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMDoxMFrOHXLDGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMDoxMFrOHXLDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDMxMw==", "bodyText": "the fromCountryId in this method is computed in a different way compared with MInvoiceLine.setTax() method.\nPls make sure we are always computing things in one way.\nMore, I would advise to introduce some getFromCountryId(I_C_Invoice invoice, I_C_InvoiceLine invoiceLine) method in IInvoiceBL.\nYou could call that method from both places.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060313", "createdAt": "2020-09-24T06:10:10Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1371,6 +1383,66 @@ public final boolean isTaxIncluded(@NonNull final org.compiere.model.I_C_Invoice\n \t\treturn invoice.isTaxIncluded(); // 08486: use the invoice's flag, not whatever the PL sais right now\n \t}\n \n+\t@Override\n+\tpublic void setInvoiceLineTaxes(final Properties ctx, @NonNull final I_C_Invoice invoice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjQ1OTI0", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495245924", "createdAt": "2020-09-24T06:11:09Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTowOVrOHXLEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTowOVrOHXLEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDY5OA==", "bodyText": "avoid duplicating the get countryFromId logic.\nsee above.", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060698", "createdAt": "2020-09-24T06:11:09Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjQ2MTI3", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495246127", "createdAt": "2020-09-24T06:11:38Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTozOFrOHXLFPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMTozOFrOHXLFPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDg2MA==", "bodyText": "minor: avoid ctx param", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494060860", "createdAt": "2020-09-24T06:11:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjQ2NjUw", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495246650", "createdAt": "2020-09-24T06:12:49Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMjo0OVrOHXLG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMjo0OVrOHXLG7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MTI5NQ==", "bodyText": "rename partnerLocationId parameter to billLocationId or similar (to underline that we are talking about BILL BPartner and location)", "url": "https://github.com/metasfresh/metasfresh/pull/10004#discussion_r494061295", "createdAt": "2020-09-24T06:12:49Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/InvoiceLineBL.java", "diffHunk": "@@ -108,6 +114,68 @@ public void setTaxAmtInfo(final Properties ctx, final I_C_InvoiceLine il, final\n \t@Override\n \tpublic boolean setTax(final Properties ctx, final org.compiere.model.I_C_InvoiceLine il, final String trxName)\n \t{\n+\t\tfinal IInOutDAO inoutDAO = Services.get(IInOutDAO.class);\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoId(il.getC_Invoice_ID());\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tif (il.getM_InOutLine_ID() <= 0)\n+\t\t{\n+\t\t\tlogger.debug(il + \"has M_InOutLine_ID=\" + il.getM_InOutLine_ID() + \": returning\");\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tfinal InOutLineId inoutLineId = InOutLineId.ofRepoId(il.getM_InOutLine_ID());\n+\t\tfinal I_M_InOutLine inoutLineRecord = inoutDAO.getLineById(inoutLineId);\n+\n+\t\tfinal I_M_InOut io = inoutDAO.getById(InOutId.ofRepoId(inoutLineRecord.getM_InOut_ID()));\n+\n+\t\tfinal OrgId inOutOrgId = OrgId.ofRepoId(io.getAD_Org_ID());\n+\n+\t\tfinal Timestamp shipDate = io.getMovementDate();\n+\n+\t\tfinal BPartnerLocationId partnerLocationId = BPartnerLocationId.ofRepoId(io.getC_BPartner_ID(), io.getC_BPartner_Location_ID());\n+\n+\t\tfinal WarehouseId warehouseId = WarehouseId.ofRepoId(io.getM_Warehouse_ID());\n+\n+\t\tfinal boolean isSOTrx = io.isSOTrx();\n+\n+\t\tfinal CountryId countryFromId;\n+\t\tfinal WarehouseId invoiceWarehouseId = WarehouseId.ofRepoIdOrNull(invoice.getM_Warehouse_ID());\n+\n+\t\tif (invoiceWarehouseId != null)\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(invoiceWarehouseId);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcountryFromId = warehouseBL.getCountryId(warehouseId);\n+\t\t}\n+\n+\t\treturn setTaxForInvoiceLine(ctx, il, inOutOrgId, shipDate, countryFromId, partnerLocationId, isSOTrx);\n+\t}\n+\n+\t@Override\n+\tpublic boolean setTaxForInvoiceLine(final Properties ctx,\n+\t\t\tfinal org.compiere.model.I_C_InvoiceLine il,\n+\t\t\tfinal OrgId orgId,\n+\t\t\tfinal Timestamp taxDate,\n+\t\t\tfinal CountryId countryFromId,\n+\t\t\tfinal BPartnerLocationId partnerLocationId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjQ4MjMw", "url": "https://github.com/metasfresh/metasfresh/pull/10004#pullrequestreview-495248230", "createdAt": "2020-09-24T06:16:32Z", "commit": {"oid": "980c191607bd0b36611883f48869266e5244febf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82026ada03c98536427c694e3b85fb36041f24ea", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/82026ada03c98536427c694e3b85fb36041f24ea", "committedDate": "2020-09-24T07:54:36Z", "message": "#10001 repair script\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdc5e087aa4f547c411c52585327aaefdcc94a6a", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fdc5e087aa4f547c411c52585327aaefdcc94a6a", "committedDate": "2020-09-24T08:10:53Z", "message": "#10001 invoice classes  regenerated -> warehouse\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ccb8eeb4b2b68557515f521c0f81a5e344adb23", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7ccb8eeb4b2b68557515f521c0f81a5e344adb23", "committedDate": "2020-09-24T10:16:18Z", "message": "#10001 Refactoring, cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59f0e43500759fe23f04fa3a64ebb647d3ac65a", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/d59f0e43500759fe23f04fa3a64ebb647d3ac65a", "committedDate": "2020-09-24T10:58:26Z", "message": "#10001 harmonize tax calculation\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32248ec5b1415aa99feccff7059e6bb92b4ec90", "author": {"user": {"login": "metas-rc", "name": "Ruxandra Craciunescu"}}, "url": "https://github.com/metasfresh/metasfresh/commit/d32248ec5b1415aa99feccff7059e6bb92b4ec90", "committedDate": "2020-09-24T11:08:20Z", "message": "#10001 small cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/10001"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}