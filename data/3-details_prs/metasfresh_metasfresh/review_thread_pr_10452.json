{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjA4NTg5", "number": 10452, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMTowN1rOFHGZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowMzo0N1rOFHHjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTg5MjA4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/common/JsonInvoiceRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMTowN1rOIIa2oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMTowN1rOIIa2oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY5OTQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped\")\n          \n          \n            \n            \t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped.\\nNote: what belongs to one invoice is determined by the respective business partner's aggregation rule.\")", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545699488", "createdAt": "2020-12-18T09:21:07Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business.rest-api/src/main/java/de/metas/rest_api/common/JsonInvoiceRule.java", "diffHunk": "@@ -26,12 +26,15 @@\n \n public enum JsonInvoiceRule\n {\n-\t@ApiEnum(\"Specifies that only *delivered* quanties will be invoiced\")\n+\t@ApiEnum(\"Specifies that only *delivered* quantities will be invoiced\")\n \tAfterDelivery,\n \n \t@ApiEnum(\"Like `AfterDelivery`, but the invoicing date is also set according to the respective bill partner's invoicing schedule (e.g. once per month)\")\n \tCustomerScheduleAfterDelivery,\n \n+\t@ApiEnum(\"Specifies that no invoicing should take place until all quantities belonging to the same invoice have been shipped\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTkwODM5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMzo1M1rOIIbAWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOToyMzo1M1rOIIbAWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcwMTk3Ng==", "bodyText": "fine - order.getC_Payment_ID() be <=0 at this point", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545701976", "createdAt": "2020-12-18T09:23:53Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/interceptor/C_Invoice.java", "diffHunk": "@@ -300,7 +302,7 @@ private void linkInvoiceToPaymentIfNeeded(@NonNull final I_C_Invoice invoice)\n \t\tfinal I_C_Order order = invoice.getC_Order();\n \t\tif (paymentBL.canAllocateOrderPaymentToInvoice(order))\n \t\t{\n-\t\t\tfinal I_C_Payment payment = order.getC_Payment();\n+\t\t\tfinal I_C_Payment payment = paymentBL.getById(PaymentId.ofRepoId(order.getC_Payment_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTk3ODM3OnYy", "diffSide": "LEFT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/InvoiceCandidate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozNjozNlrOIIbp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxNTowOFrOIIc9Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMjYwMQ==", "bodyText": "why remove this?", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545712601", "createdAt": "2020-12-18T09:36:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/InvoiceCandidate.java", "diffHunk": "@@ -307,15 +307,7 @@ private ToInvoiceExclOverride computeToInvoiceExclOverride()\n \t\tswitch (invoiceRule)\n \t\t{\n \t\t\tcase AfterDelivery:\n-\t\t\t\tif (product.isStocked())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzk4Nw==", "bodyText": "That logic was duplicated below, on the CustomerScheduleAfterDelivery branch of the case", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545733987", "createdAt": "2020-12-18T10:15:08Z", "author": {"login": "adi-stefan"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/internalbusinesslogic/InvoiceCandidate.java", "diffHunk": "@@ -307,15 +307,7 @@ private ToInvoiceExclOverride computeToInvoiceExclOverride()\n \t\tswitch (invoiceRule)\n \t\t{\n \t\t\tcase AfterDelivery:\n-\t\t\t\tif (product.isStocked())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMjYwMQ=="}, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDAyMTIzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0NzozNlrOIIcCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0NzozNlrOIIcCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxODg3OA==", "bodyText": "this is a very specific method..i think it would better belong into the InvoiceCandidateValidationCollector.\n(i'm assuming it's used only there)", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545718878", "createdAt": "2020-12-18T09:47:36Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -2315,4 +2353,32 @@ else if (result.getInvoiceCount() > 1)\n \t\treturn new GetInvoiceCandidatesAmtSelectionSummaryCommand(extraWhereClause).execute();\n \t}\n \n+\t/**\n+\t * Tests whether it makes sense to update associated records for a given {@link I_C_Invoice_Candidate}\n+\t * That's currently the case if:\n+\t * <ul>\n+\t *     <li>{@link I_C_Invoice_Candidate#getInvoiceRule()}  return {@link InvoiceRule#OrderCompletelyDelivered}</li>\n+\t *     <li>{@link I_C_Invoice_Candidate#getDateToInvoice()} is not null and not{@link Env#MAX_DATE}</li>\n+\t * </ul>\n+\t *\n+\t * @param icRecord\n+\t * @return\n+\t */\n+\tpublic boolean isCandidateForRecalculate(final I_C_Invoice_Candidate icRecord)\n+\t{\n+\t\tfinal InvoiceRule invoiceRule = getInvoiceRule(icRecord);\n+\t\tfinal Timestamp dateToInvoice = icRecord.getDateToInvoice();\n+\t\treturn InvoiceRule.OrderCompletelyDelivered.equals(invoiceRule) && dateToInvoice != null && dateToInvoice.before(Env.MAX_DATE);\n+\t}\n+\n+\tpublic Collection<I_C_Invoice_Candidate> getRefreshedAssociatedInvoiceCandidates(final Iterator<I_C_Invoice_Candidate> candidates, final Collection<Integer> processedRecords)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDAyNDYyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0ODozNFrOIIcEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0ODozNFrOIIcEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxOTM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param icRecord\n          \n          \n            \n            \t * @return\n          \n      \n    \n    \n  \n\nuseless javadoc", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545719395", "createdAt": "2020-12-18T09:48:34Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -2315,4 +2353,32 @@ else if (result.getInvoiceCount() > 1)\n \t\treturn new GetInvoiceCandidatesAmtSelectionSummaryCommand(extraWhereClause).execute();\n \t}\n \n+\t/**\n+\t * Tests whether it makes sense to update associated records for a given {@link I_C_Invoice_Candidate}\n+\t * That's currently the case if:\n+\t * <ul>\n+\t *     <li>{@link I_C_Invoice_Candidate#getInvoiceRule()}  return {@link InvoiceRule#OrderCompletelyDelivered}</li>\n+\t *     <li>{@link I_C_Invoice_Candidate#getDateToInvoice()} is not null and not{@link Env#MAX_DATE}</li>\n+\t * </ul>\n+\t *\n+\t * @param icRecord\n+\t * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDA2MzcyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoyOVrOIIcbCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoyOVrOIIcbCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTE5NA==", "bodyText": "I think we need a change here to avoid big performance penalties.\nwe generally have caching-support (de.metas.cache.CCache)...you  could make a cache<String, List<I_C_Invoice_Candidate>> for the duration of the update run.\nI think you can assume that there are not \"too many\" ICs with he same HeaderAggregationKey. (note that you need to invalidate when I_C_Invoice_Candidate.HeaderAggregationKey is updated)\nPlease research / consult with collegues/teo/me on this.", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545725194", "createdAt": "2020-12-18T09:58:29Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandBL.java", "diffHunk": "@@ -276,6 +292,28 @@ private Timestamp computeDateToInvoice(@NonNull final I_C_Invoice_Candidate icRe\n \t\t}\n \t}\n \n+\tprivate boolean isAllCandidatesInGroupDelivered(final @NonNull I_C_Invoice_Candidate ic)\n+\t{\n+\t\tfinal IInvoiceCandDAO invoiceCandDAO = Services.get(IInvoiceCandDAO.class);\n+\t\tfinal Iterator<I_C_Invoice_Candidate> candidates = invoiceCandDAO.retrieveForHeaderAggregationKey(getCtx(ic), ic.getHeaderAggregationKey(), getTrxName(ic));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDA4MTQ4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/bpartner/composite/repository/BPartnerCompositeSaver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowMzo0N1rOIIcliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowMzo0N1rOIIcliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (!Check.isEmpty(bpartner.getInvoiceRule()))\n          \n          \n            \n            \t\tif (bpartner.getInvoiceRule() != null)\n          \n      \n    \n    \n  \n\ni know we do have that method, but as the Invoicerule can be just null or nut-null (unlike a String or List), i think the code is clearer like this", "url": "https://github.com/metasfresh/metasfresh/pull/10452#discussion_r545727881", "createdAt": "2020-12-18T10:03:47Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business/src/main/java/de/metas/bpartner/composite/repository/BPartnerCompositeSaver.java", "diffHunk": "@@ -159,9 +156,13 @@ private void saveBPartner(@NonNull final BPartner bpartner, @Nullable final OrgI\n \n \t\tbpartnerRecord.setIsVendor(bpartner.isVendor());\n \t\tbpartnerRecord.setIsCustomer(bpartner.isCustomer());\n-\t\t\n+\t\tif (!Check.isEmpty(bpartner.getInvoiceRule()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02919355c068c3465d34658d727aea44b34375af"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}