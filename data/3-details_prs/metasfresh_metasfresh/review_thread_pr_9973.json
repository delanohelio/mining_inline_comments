{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MjA2MDM2", "number": 9973, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNDo1MTo0N1rOElgCkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozNToxM1rOElga5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzU3NzE0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/Window.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNDo1MTo0N1rOHVAomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo1MzozMVrOHVRIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5MjUzOQ==", "bodyText": "can be put under Constants and imported above together with INITIALLY_CLOSED", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491792539", "createdAt": "2020-09-21T04:51:47Z", "author": {"login": "petrican"}, "path": "frontend/src/components/Window.js", "diffHunk": "@@ -12,6 +12,7 @@ import Section from './window/Section';\n import Dropzone from './Dropzone';\n import { INITIALLY_CLOSED } from '../constants/Constants';\n \n+const EMPTY_OBJECT = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2MjgyOQ==", "bodyText": "We've already talked about this during a frontend meeting with Teo. We want to be sure what is used and that it wasn't altered in any way bo some other component, since it'll be a reference to a js object.", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r492062829", "createdAt": "2020-09-21T13:53:31Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/Window.js", "diffHunk": "@@ -12,6 +12,7 @@ import Section from './window/Section';\n import Dropzone from './Dropzone';\n import { INITIALLY_CLOSED } from '../constants/Constants';\n \n+const EMPTY_OBJECT = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5MjUzOQ=="}, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzU4MjQ4OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/app/OverlayField.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNDo1NTozNFrOHVArgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjo1MzozOVrOHVOimg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5MzI4MQ==", "bodyText": "Might worth adding some safety checks in here, also a default fallback for the timeZone.", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491793281", "createdAt": "2020-09-21T04:55:34Z", "author": {"login": "petrican"}, "path": "frontend/src/components/app/OverlayField.js", "diffHunk": "@@ -195,6 +221,15 @@ class OverlayField extends Component {\n   }\n }\n \n+const mapStateToProps = (state) => {\n+  const { appHandler, windowHandler } = state;\n+\n+  return {\n+    modalVisible: windowHandler.modal.visible,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyMDM3OA==", "bodyText": "There's the default data for windowHandler in the redux state, and timeZone will just be undefined. It's just for the sake of using the same API as the WidgetWrapper provides until the component is rewritten.", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r492020378", "createdAt": "2020-09-21T12:53:39Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/app/OverlayField.js", "diffHunk": "@@ -195,6 +221,15 @@ class OverlayField extends Component {\n   }\n }\n \n+const mapStateToProps = (state) => {\n+  const { appHandler, windowHandler } = state;\n+\n+  return {\n+    modalVisible: windowHandler.modal.visible,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5MzI4MQ=="}, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzYwMjEwOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableItem.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxMDoxMlrOHVA2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxMDoxMlrOHVA2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NjAxMg==", "bodyText": "Pls rename the file to match the component name -> TableRow . Also this implies updates in all the files that do import that.", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491796012", "createdAt": "2020-09-21T05:10:12Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableItem.js", "diffHunk": "@@ -9,18 +8,22 @@ import {\n   prepareWidgetData,\n   isEditableOnDemand,\n   isCellEditable,\n+  tableRowPropTypes,\n   getCellWidgetData,\n+  getDescription,\n+  getTdValue,\n+  nestedSelect,\n } from '../../utils/tableHelpers';\n \n import TableCell from './TableCell';\n import WithMobileDoubleTap from '../WithMobileDoubleTap';\n \n /**\n  * @file Class based component.\n- * @module TableItem\n+ * @module TableRow\n  * @extends PureComponent\n  */\n-class TableItem extends PureComponent {\n+class TableRow extends PureComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzYxMDA4OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableItem.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxNTo0N1rOHVA6gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxNTo0N1rOHVA6gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NzEyMw==", "bodyText": "logic from here can be put in a separate function that returns the needed data", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491797123", "createdAt": "2020-09-21T05:15:47Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableItem.js", "diffHunk": "@@ -463,11 +448,35 @@ class TableItem extends PureComponent {\n             const isEditable = isCellEditable(item, cells);\n             const isEdited = edited === property;\n             const extendLongText = multilineText ? multilineTextLines : 0;\n-            const widgetData = this.getWidgetData(\n+            const widgetData = getCellWidgetData(\n+              cells,\n               item,\n               isEditable,\n               supportFieldEdit\n             );\n+            const isReadonly = widgetData[0].readonly;\n+            const isMandatory = widgetData[0].mandatory;\n+            const tdValue = getTdValue({\n+              widgetData,\n+              item,\n+              isEdited,\n+              isGerman,\n+            });\n+            const description = getDescription({ widgetData, tdValue });\n+            let tooltipData = null;\n+            let tooltipWidget =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzYyNDUzOnYy", "diffSide": "RIGHT", "path": "frontend/src/containers/WidgetWrapper.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToyNToyMVrOHVBCEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToyNToyMVrOHVBCEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5OTA1Nw==", "bodyText": "I believe you could write here some docs explaining briefly how this is functioning since that would be the central logic component. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491799057", "createdAt": "2020-09-21T05:25:21Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,137 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getMasterData,\n+  getMasterWidgetData,\n+  getMasterWidgetFields,\n+  getMasterDocStatus,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzYzODY3OnYy", "diffSide": "RIGHT", "path": "frontend/src/reducers/windowHandler.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozNDo1MlrOHVBJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozNDo1MlrOHVBJ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwMTA0NQ==", "bodyText": "Document here pls", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491801045", "createdAt": "2020-09-21T05:34:52Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/windowHandler.js", "diffHunk": "@@ -139,6 +140,69 @@ export const getQuickactions = createSelector(\n   (actions) => actions\n );\n \n+export const getMasterData = (state) => state.windowHandler.master.data;\n+const getMasterLayout = (state, layoutPath) => {\n+  const layout = state.windowHandler.master.layout;\n+  const [\n+    sectionIdx,\n+    columnIdx,\n+    elGroupIdx,\n+    elLineIdx,\n+    elIdx,\n+  ] = layoutPath.split('_');\n+\n+  return layout.sections[sectionIdx].columns[columnIdx].elementGroups[\n+    elGroupIdx\n+  ].elementsLine[elLineIdx].elements[elIdx];\n+};\n+\n+const selectWidgetData = (data, layout) => {\n+  let widgetData = null;\n+\n+  widgetData = layout.fields.reduce((result, item) => {\n+    data[item.field] && result.push(data[item.field]);\n+\n+    return result;\n+  }, []);\n+\n+  if (!widgetData.length) {\n+    widgetData = [{}];\n+  }\n+\n+  return widgetData;\n+};\n+\n+/**\n+ * @method getMasterWidgetData\n+ * @summary cached selector for picking widget data for a desired element\n+ *\n+ * @param {object} state - redux state\n+ * @param {string} layoutPath - indexes of element in the layout structure\n+ */\n+export const getMasterWidgetData = createCachedSelector(\n+  getMasterData,\n+  getMasterLayout,\n+  (data, layout) => selectWidgetData(data, layout)\n+)((_state_, layoutPath) => layoutPath);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzYzOTQyOnYy", "diffSide": "RIGHT", "path": "frontend/src/reducers/windowHandler.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozNToxM1rOHVBKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNTozNToxM1rOHVBKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwMTE0MQ==", "bodyText": "Also Document this as well", "url": "https://github.com/metasfresh/metasfresh/pull/9973#discussion_r491801141", "createdAt": "2020-09-21T05:35:13Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/windowHandler.js", "diffHunk": "@@ -139,6 +140,69 @@ export const getQuickactions = createSelector(\n   (actions) => actions\n );\n \n+export const getMasterData = (state) => state.windowHandler.master.data;\n+const getMasterLayout = (state, layoutPath) => {\n+  const layout = state.windowHandler.master.layout;\n+  const [\n+    sectionIdx,\n+    columnIdx,\n+    elGroupIdx,\n+    elLineIdx,\n+    elIdx,\n+  ] = layoutPath.split('_');\n+\n+  return layout.sections[sectionIdx].columns[columnIdx].elementGroups[\n+    elGroupIdx\n+  ].elementsLine[elLineIdx].elements[elIdx];\n+};\n+\n+const selectWidgetData = (data, layout) => {\n+  let widgetData = null;\n+\n+  widgetData = layout.fields.reduce((result, item) => {\n+    data[item.field] && result.push(data[item.field]);\n+\n+    return result;\n+  }, []);\n+\n+  if (!widgetData.length) {\n+    widgetData = [{}];\n+  }\n+\n+  return widgetData;\n+};\n+\n+/**\n+ * @method getMasterWidgetData\n+ * @summary cached selector for picking widget data for a desired element\n+ *\n+ * @param {object} state - redux state\n+ * @param {string} layoutPath - indexes of element in the layout structure\n+ */\n+export const getMasterWidgetData = createCachedSelector(\n+  getMasterData,\n+  getMasterLayout,\n+  (data, layout) => selectWidgetData(data, layout)\n+)((_state_, layoutPath) => layoutPath);\n+\n+export const getMasterWidgetFields = createCachedSelector(\n+  getMasterLayout,\n+  (layout) => layout.fields\n+)((_state, layoutPath) => layoutPath);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392924ce7f288d65116b93ffed7b739513e05895"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1309, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}