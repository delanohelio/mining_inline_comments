{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzM5NDk0", "number": 6681, "title": "Budget issue window adjustments", "bodyText": "#5816", "createdAt": "2020-05-18T20:59:59Z", "url": "https://github.com/metasfresh/metasfresh/pull/6681", "merged": true, "mergeCommit": {"oid": "7100c911fea0a3c556960994be6647a2174afc60"}, "closed": true, "closedAt": "2020-05-19T11:08:32Z", "author": {"login": "pvpurcarcosmin"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcimVfBAH2gAyNDE5NzM5NDk0OmVkMzBiZTkwNzc5ODY5ZTEyZjA1ZWU2NTQyYjg1MTc1YjYxOTg0ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciyPvMgH2gAyNDE5NzM5NDk0OmI0YzM3NmU4MWZhZjIxYzE1YTI2MWFhZDJhMjc2NmVmMzE3NWUxMzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed30be90779869e12f05ee6542b85175b6198480", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/ed30be90779869e12f05ee6542b85175b6198480", "committedDate": "2020-05-18T20:59:22Z", "message": "Budget issue window adjustments\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/599ee9397de9bc6823e32357a97a68c7593dcb89", "committedDate": "2020-05-19T08:08:40Z", "message": "enable change log\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjAxNDM1", "url": "https://github.com/metasfresh/metasfresh/pull/6681#pullrequestreview-414201435", "createdAt": "2020-05-19T08:09:26Z", "commit": {"oid": "ed30be90779869e12f05ee6542b85175b6198480"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowOToyNlrOGXUtVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNzo0MlrOGXVahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTcxOQ==", "bodyText": "next time pls consider introducing Estimation class instead of using BigDecimal. It's not clear, what's the UoM of estimation, hours, days, points etc?", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427109719", "createdAt": "2020-05-19T08:09:26Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -73,6 +74,12 @@\n \t@Nullable\n \tprivate BigDecimal budgetedEffort;\n \n+\t@Nullable\n+\tprivate BigDecimal roughEstimation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed30be90779869e12f05ee6542b85175b6198480"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTkxMw==", "bodyText": "consider using Effort class", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427109913", "createdAt": "2020-05-19T08:09:45Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -73,6 +74,12 @@\n \t@Nullable\n \tprivate BigDecimal budgetedEffort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed30be90779869e12f05ee6542b85175b6198480"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTI3Ng==", "bodyText": "I would rename Effort.of(long)  method to Effort.ofSeconds.\nReason:\n\nmuch more descriptive\ni have the feeling soon we will introduce ofHours(int) method too.", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427111276", "createdAt": "2020-05-19T08:11:59Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/timebooking/S_TimeBooking.java", "diffHunk": "@@ -93,21 +99,25 @@ public void recomputeIssueProgress(@NonNull final I_S_TimeBooking record)\n \n \t\tif (record.getS_Issue_ID() != oldRecord.getS_Issue_ID())\n \t\t{\n+\t\t\tfinal Effort bookedEffort = Effort.of(record.getBookedSeconds().longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed30be90779869e12f05ee6542b85175b6198480"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMjgxNQ==", "bodyText": "do we have a test which, at least indirectly, uses LabelType enum?\nreason: make sure those Patterns are compiled without exceptions.", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427112815", "createdAt": "2020-05-19T08:14:27Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterConstants.java", "diffHunk": "@@ -50,4 +47,18 @@\n \n \t\tprivate final String name;\n \t}\n+\n+\t@AllArgsConstructor\n+\t@Getter\n+\tenum LabelType{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNTg4Nw==", "bodyText": "pls document why we keep INVOICED status, but in other cases, we are using the status from ImportIssueInfo", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427115887", "createdAt": "2020-05-19T08:19:23Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/importer/IssueImporterService.java", "diffHunk": "@@ -249,6 +253,10 @@ private IssueEntity mergeIssueInfoWithEntity(@NonNull final ImportIssueInfo impo\n \t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n \t\t\t\t: null;\n \n+\t\tfinal Status status = INVOICED.equals(existingEffortIssue.getStatus())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODM2MQ==", "bodyText": "pls use TimeUtil.toLocalDate method", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427118361", "createdAt": "2020-05-19T08:23:18Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -216,6 +217,10 @@ private IssueEntity buildIssueEntity(@NonNull final I_S_Issue record)\n \t\t\t\t.orElseThrow( () ->new AdempiereException(\"Unknown Status!\").appendParametersToMessage()\n \t\t\t\t\t\t.setParameter(\"I_S_Issue\", record));\n \n+\t\tfinal LocalDate plannedUATDate = record.getPlannedUATDate() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODc1MQ==", "bodyText": "pls use TimeUtil.asTimestamp", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427118751", "createdAt": "2020-05-19T08:23:54Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -279,6 +287,10 @@ private I_S_Issue buildRecord(@NonNull final IssueEntity issueEntity)\n \t\t\trecord.setStatus(issueEntity.getStatus().getCode());\n \t\t}\n \n+\t\trecord.setPlannedUATDate(issueEntity.getPlannedUATDate() != null\n+\t\t\t\t? Timestamp.valueOf(issueEntity.getPlannedUATDate().atStartOfDay())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDU1Mg==", "bodyText": "really loud thinking: somehow i feel like i would avoid the Null term because it's implementation detail (u internally decided to consider null roughEstimation as not already set).\nMaybe setRoughEstimationIfNotSet  or setRoughEstimationIfNotAlreadySet would be much more descriptive.", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427120552", "createdAt": "2020-05-19T08:26:36Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -127,6 +134,14 @@ public void setBudgetedEffortIfNull(@Nullable final BigDecimal budgetedEffort)\n \t\t}\n \t}\n \n+\tpublic void setRoughEstimationIfNull(@Nullable final BigDecimal roughEstimation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTI4Nw==", "bodyText": "log the exception too", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427121287", "createdAt": "2020-05-19T08:27:42Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -313,27 +322,50 @@ private void processLabels(final List<Label> labelList,\n \t}\n \n \t@NonNull\n-\tprivate BigDecimal getValueFromLabel(final Label label, final Pattern valuePattern)\n+\tprivate BigDecimal getValueFromLabel(final Label label, final GithubImporterConstants.LabelType labelType)\n \t{\n-\t\tfinal Matcher matcher = valuePattern.matcher(label.getName());\n+\t\tfinal Matcher matcher = labelType.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(1)) : BigDecimal.ZERO;\n+\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(labelType.getGroupName())) : BigDecimal.ZERO;\n \t}\n \n \t@NonNull\n \tprivate Optional<Status> getStatusFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = STATUS_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = STATUS.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS_GROUP)) : Optional.empty();\n+\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS.getGroupName())) : Optional.empty();\n \t}\n \n \t@NonNull\n \tprivate Optional<String> getDeliveryPlatformFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = DELIVERY_PLATFORM_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = DELIVERY_PLATFORM.getPattern().matcher(label.getName());\n+\n+\t\treturn matcher.matches() ? Optional.of(matcher.group(DELIVERY_PLATFORM.getGroupName())) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<LocalDate> getPlannedUATDateFromLabel(final Label label)\n+\t{\n+\t\tfinal Matcher matcher = PLANNED_UAT.getPattern().matcher(label.getName());\n+\n+\t\tif (!matcher.matches())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tLocalDate plannedUATDate = null;\n+\t\ttry\n+\t\t{\n+\t\t\tplannedUATDate = LocalDate.from(PLANNED_UAT_DATE_FORMAT.parse(matcher.group(PLANNED_UAT.getGroupName())));\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tlog.error(\"{} : cannot extract planned UAT date from : {}\", IMPORT_LOG_MESSAGE_PREFIX, label.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf0ff13cae08b764d867b5333cec09cb719a0088", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/cf0ff13cae08b764d867b5333cec09cb719a0088", "committedDate": "2020-05-19T08:53:35Z", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f86dd76246e866aaaedd36d51372da6e86e138bf", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/f86dd76246e866aaaedd36d51372da6e86e138bf", "committedDate": "2020-05-19T09:26:10Z", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MzI1MjY3", "url": "https://github.com/metasfresh/metasfresh/pull/6681#pullrequestreview-414325267", "createdAt": "2020-05-19T10:49:09Z", "commit": {"oid": "f86dd76246e866aaaedd36d51372da6e86e138bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDo0OTowOVrOGXar_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDo0OTowOVrOGXar_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwNzY3OQ==", "bodyText": "without , ex: {}", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427207679", "createdAt": "2020-05-19T10:49:09Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -313,27 +322,51 @@ private void processLabels(final List<Label> labelList,\n \t}\n \n \t@NonNull\n-\tprivate BigDecimal getValueFromLabel(final Label label, final Pattern valuePattern)\n+\tprivate BigDecimal getValueFromLabel(final Label label, final GithubImporterConstants.LabelType labelType)\n \t{\n-\t\tfinal Matcher matcher = valuePattern.matcher(label.getName());\n+\t\tfinal Matcher matcher = labelType.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(1)) : BigDecimal.ZERO;\n+\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(labelType.getGroupName())) : BigDecimal.ZERO;\n \t}\n \n \t@NonNull\n \tprivate Optional<Status> getStatusFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = STATUS_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = STATUS.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS_GROUP)) : Optional.empty();\n+\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS.getGroupName())) : Optional.empty();\n \t}\n \n \t@NonNull\n \tprivate Optional<String> getDeliveryPlatformFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = DELIVERY_PLATFORM_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = DELIVERY_PLATFORM.getPattern().matcher(label.getName());\n+\n+\t\treturn matcher.matches() ? Optional.of(matcher.group(DELIVERY_PLATFORM.getGroupName())) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<LocalDate> getPlannedUATDateFromLabel(final Label label)\n+\t{\n+\t\tfinal Matcher matcher = PLANNED_UAT.getPattern().matcher(label.getName());\n+\n+\t\tif (!matcher.matches())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tLocalDate plannedUATDate = null;\n+\t\ttry\n+\t\t{\n+\t\t\tplannedUATDate = LocalDate.from(PLANNED_UAT_DATE_FORMAT.parse(matcher.group(PLANNED_UAT.getGroupName())));\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tlog.error(\"{} : cannot extract planned UAT date from : {}, ex: {} \",\n+\t\t\t\t\tIMPORT_LOG_MESSAGE_PREFIX, label.getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86dd76246e866aaaedd36d51372da6e86e138bf"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c376e81faf21c15a261aad2a2766ef3175e136", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/b4c376e81faf21c15a261aad2a2766ef3175e136", "committedDate": "2020-05-19T10:51:57Z", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3421, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}