{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzQ1NDE4", "number": 6178, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDo0NlrODffy6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxMDoxM1rODfieBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUzMzg1OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDo0NlrOFpO6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToxNDo1OVrOFpP_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDI0Nw==", "bodyText": "use TMP_AccountSheetReport tablename instead of tbpFilteredFactAcct", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378780247", "createdAt": "2020-02-13T10:40:46Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5Nzg5Mw==", "bodyText": "renamed", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378797893", "createdAt": "2020-02-13T11:14:59Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDI0Nw=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzU0MDI3OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0Mjo0M1rOFpO-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjo0Nzo1NFrOFpSeww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA==", "bodyText": "don't filter by AccountType", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378781288", "createdAt": "2020-02-13T10:42:43Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMDk4Mg==", "bodyText": "Filtered instead by fact_acct.postingType=A", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378800982", "createdAt": "2020-02-13T11:22:04Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzODcyMw==", "bodyText": "fixed", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378838723", "createdAt": "2020-02-13T12:47:54Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzU0NzE4OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0NDozMFrOFpPClw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToyNDozNlrOFpQQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ==", "bodyText": "use\nGET DIAGNOSTICS v_temp = ROW_COUNT; instead of actually counting for logging...", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782359", "createdAt": "2020-02-13T10:44:30Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MzU4Mw==", "bodyText": "didn't know about get diagnostics.", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378793583", "createdAt": "2020-02-13T11:05:40Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMjIyOA==", "bodyText": "fixed", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378802228", "createdAt": "2020-02-13T11:24:36Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzU1MDA3OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0NToyMVrOFpPEZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToyNDo0M1rOFpQQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjgyMQ==", "bodyText": "same, avoid using select count(1) for logging purposes", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782821", "createdAt": "2020-02-13T10:45:21Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tbp.beginningBalance::numeric beginningBalance,\n+                        tbp.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN tbpFilteredFactAcct tbp ON tbp.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+                 WHERE TRUE\n+                   -- AND ev.accounttype = 'A' -- no longer needed here, since we're joining with the already filtered tbpFilteredFactAcct\n+                   AND fa.c_acctschema_id = p_c_acctschema_id\n+                   AND (fa.dateacct >= p_dateFrom AND fa.dateacct <= p_dateTo)\n+                   AND (p_account_id IS NULL OR fa.account_id = p_account_id)\n+                   AND (p_c_activity_id IS NULL OR fa.c_activity_id = p_c_activity_id)\n+                   AND (p_c_project_id IS NULL OR fa.c_project_id = p_c_project_id)\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct\n+    SELECT *\n+    FROM filteredFactAcct;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMjI5OA==", "bodyText": "fixed", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378802298", "createdAt": "2020-02-13T11:24:43Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tbp.beginningBalance::numeric beginningBalance,\n+                        tbp.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN tbpFilteredFactAcct tbp ON tbp.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+                 WHERE TRUE\n+                   -- AND ev.accounttype = 'A' -- no longer needed here, since we're joining with the already filtered tbpFilteredFactAcct\n+                   AND fa.c_acctschema_id = p_c_acctschema_id\n+                   AND (fa.dateacct >= p_dateFrom AND fa.dateacct <= p_dateTo)\n+                   AND (p_account_id IS NULL OR fa.account_id = p_account_id)\n+                   AND (p_c_activity_id IS NULL OR fa.c_activity_id = p_c_activity_id)\n+                   AND (p_c_project_id IS NULL OR fa.c_project_id = p_c_project_id)\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct\n+    SELECT *\n+    FROM filteredFactAcct;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjgyMQ=="}, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzk1NDcyOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzowNDo0M1rOFpS9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoyODo1OVrOFpuyRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw==", "bodyText": "don't need this join", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846523", "createdAt": "2020-02-13T13:04:43Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1OTM0Nw==", "bodyText": "which join? (from the comment/preview i don't understand to which join you're referring to)", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378859347", "createdAt": "2020-02-13T13:30:27Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTUyNQ==", "bodyText": "was talking about tax category..... but now u need it because u need tax category's name", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379299525", "createdAt": "2020-02-14T08:21:07Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMjQ3MQ==", "bodyText": "okay. marking as resolved", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379302471", "createdAt": "2020-02-14T08:28:59Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzk1NzMwOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzowNToyOVrOFpS-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxNzo0NlrOFpTVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjkwNg==", "bodyText": "just create the table with precisely the columns u need; avoid using this \"tricky\" SELECT", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846906", "createdAt": "2020-02-13T13:05:29Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MjgwOA==", "bodyText": "done;", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378852808", "createdAt": "2020-02-13T13:17:46Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjkwNg=="}, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzk3MTg5OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxMDoxM1rOFpTHtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNjoyMDo0MFrOFpsmeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0OTIwNg==", "bodyText": "export doc type name instead of c_doctype_id\nsame of the other ID columns", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378849206", "createdAt": "2020-02-13T13:10:13Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2NjY4MA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379266680", "createdAt": "2020-02-14T06:20:40Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0OTIwNg=="}, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1484, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}