{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDI0Nzkz", "number": 709, "title": "CLDR-8654 parallelize VettingViewer - 25-50% speed improvement", "bodyText": "CLDR-8654\n\nuse a ForkJoinPool to parallelize the VV generation\nwrite to separate Appendable buffers and then join them all at once\nadd CLDRConfig.get(String, int default) for fetching numeric config parameters\nDefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n\nnumber of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n\nnumber of threads (0 means 'one per CPU')", "createdAt": "2020-09-15T16:46:09Z", "url": "https://github.com/unicode-org/cldr/pull/709", "merged": true, "mergeCommit": {"oid": "f24087b56a1d7bcd6202d3a01b461082c142bbd9"}, "closed": true, "closedAt": "2020-09-21T22:45:06Z", "author": {"login": "srl295"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJLPJLgFqTQ4ODg5NzE1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLKnr4AFqTQ5MzAwNjUyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODk3MTUx", "url": "https://github.com/unicode-org/cldr/pull/709#pullrequestreview-488897151", "createdAt": "2020-09-15T17:16:04Z", "commit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjowNFrOHSL1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyNjozOVrOHSMWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDMwMg==", "bodyText": "The name of this is very obscure. It appears that this calls get(key) which calls getProperty() \u2014 which does have a meaningful name. The get() methods should be renamed to getProperty()", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488830302", "createdAt": "2020-09-15T17:16:04Z", "author": {"login": "macchiati"}, "path": "tools/java/org/unicode/cldr/util/CLDRConfig.java", "diffHunk": "@@ -794,4 +794,23 @@ public static VersionInfo getVersion(int... versionInput) {\n         return VersionInfo.getInstance(version[0], version[1], version[2],\n             version[3]);\n     }\n+\n+    /**\n+     * Get a config value as an integer.\n+     * @param key key name\n+     * @param defaultValue default value\n+     * @return the value, or defaultValue if missing or unparseable.\n+     * @see CLDRConfig#get(Object)\n+     */\n+    public int get(String key, int defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMjE4Ng==", "bodyText": "It seems like it would be simpler and more understandable to use parallel streams. Or is there a problem with that?", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488832186", "createdAt": "2020-09-15T17:19:20Z", "author": {"login": "macchiati"}, "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();\n+        private List<String> locales = new ArrayList<>();\n+        private StringBuffer[] outputs;\n+        private EnumSet<Choice> choices;\n+        private EnumSet<Choice> thingsThatRequireOldFile;\n+        private EnumSet<Choice> ourChoicesThatRequireOldFile;\n+        private T organization;\n+        private VettingViewer<T>.FileInfo totals;\n+        private Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo;\n+        private String header;\n+        private int configParallel; // parallelism. 0 means \"let Java decide\"\n+        private int configChunkSize; // Number of locales to process at once, minimum 1\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public WriteContext(Set<Entry<String, String>> entrySet, EnumSet<Choice> choices, T organization, FileInfo totals, Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo, String header) {\n+            for(Entry<String, String> e : entrySet) {\n+                names.add(e.getKey());\n+                locales.add(e.getValue());\n+            }\n+            int count = names.size();\n+            this.outputs = new StringBuffer[count];\n+            for(int i=0;i<count;i++) {\n+                outputs[i] = new StringBuffer();\n+            }\n+            if(DEBUG_THREADS) System.err.println(\"Initted \" + this.outputs.length + \" outputs\");\n+\n+            // other data\n+            this.choices = choices;\n+\n+            thingsThatRequireOldFile = EnumSet.of(Choice.englishChanged, Choice.missingCoverage, Choice.changedOldValue);\n+            ourChoicesThatRequireOldFile = choices.clone();\n+            ourChoicesThatRequireOldFile.retainAll(thingsThatRequireOldFile);\n+\n+            this.organization = organization;\n+            this.totals = totals;\n+            this.localeNameToFileInfo = localeNameToFileInfo;\n+            this.header = header;\n+\n+            if(DEBUG_THREADS) System.err.println(\"writeContext for \" + organization.toString() + \" booted with \" + count + \" locales\");\n+\n+            // setup env\n+            CLDRConfig config = CLDRConfig.getInstance();\n+\n+            this.configParallel = Math.max(config.get(\"CLDR_VETTINGVIEWER_PARALLEL\", 0), 0);\n+            if(this.configParallel < 1) {\n+                this.configParallel = java.lang.Runtime.getRuntime().availableProcessors(); // matches ForkJoinPool() behavior\n+            }\n+            this.configChunkSize = Math.max(config.get(\"CLDR_VETTINGVIEWER_CHUNKSIZE\", 1), 1);\n+            System.err.println(\"vv: CLDR_VETTINGVIEWER_PARALLEL=\"+configParallel+\", CLDR_VETTINGVIEWER_CHUNKSIZE=\"+configChunkSize);\n+        }\n+\n+        public void append(Appendable output) throws IOException {\n+            // all done, append all\n+            char lastChar = ' ';\n+\n+            for(int n=0;n<outputs.length;n++) {\n+              final String name = names.get(n);\n+              if(DEBUG_THREADS) System.err.println(\"Appending \" + name + \" - \" + outputs[n].length());\n+              output.append(outputs[n]);\n+\n+              char nextChar = name.charAt(0);\n+              if (lastChar != nextChar) {\n+                  output.append(this.header);\n+                  lastChar = nextChar;\n+              }\n+            }\n+        }\n+\n+        public int size() {\n+            return names.size();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNzUxNQ==", "bodyText": "This name is misleading. It is appending this to output, rather than the reverse, so should be appendto.", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488837515", "createdAt": "2020-09-15T17:24:46Z", "author": {"login": "macchiati"}, "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();\n+        private List<String> locales = new ArrayList<>();\n+        private StringBuffer[] outputs;\n+        private EnumSet<Choice> choices;\n+        private EnumSet<Choice> thingsThatRequireOldFile;\n+        private EnumSet<Choice> ourChoicesThatRequireOldFile;\n+        private T organization;\n+        private VettingViewer<T>.FileInfo totals;\n+        private Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo;\n+        private String header;\n+        private int configParallel; // parallelism. 0 means \"let Java decide\"\n+        private int configChunkSize; // Number of locales to process at once, minimum 1\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public WriteContext(Set<Entry<String, String>> entrySet, EnumSet<Choice> choices, T organization, FileInfo totals, Map<String, VettingViewer<T>.FileInfo> localeNameToFileInfo, String header) {\n+            for(Entry<String, String> e : entrySet) {\n+                names.add(e.getKey());\n+                locales.add(e.getValue());\n+            }\n+            int count = names.size();\n+            this.outputs = new StringBuffer[count];\n+            for(int i=0;i<count;i++) {\n+                outputs[i] = new StringBuffer();\n+            }\n+            if(DEBUG_THREADS) System.err.println(\"Initted \" + this.outputs.length + \" outputs\");\n+\n+            // other data\n+            this.choices = choices;\n+\n+            thingsThatRequireOldFile = EnumSet.of(Choice.englishChanged, Choice.missingCoverage, Choice.changedOldValue);\n+            ourChoicesThatRequireOldFile = choices.clone();\n+            ourChoicesThatRequireOldFile.retainAll(thingsThatRequireOldFile);\n+\n+            this.organization = organization;\n+            this.totals = totals;\n+            this.localeNameToFileInfo = localeNameToFileInfo;\n+            this.header = header;\n+\n+            if(DEBUG_THREADS) System.err.println(\"writeContext for \" + organization.toString() + \" booted with \" + count + \" locales\");\n+\n+            // setup env\n+            CLDRConfig config = CLDRConfig.getInstance();\n+\n+            this.configParallel = Math.max(config.get(\"CLDR_VETTINGVIEWER_PARALLEL\", 0), 0);\n+            if(this.configParallel < 1) {\n+                this.configParallel = java.lang.Runtime.getRuntime().availableProcessors(); // matches ForkJoinPool() behavior\n+            }\n+            this.configChunkSize = Math.max(config.get(\"CLDR_VETTINGVIEWER_CHUNKSIZE\", 1), 1);\n+            System.err.println(\"vv: CLDR_VETTINGVIEWER_PARALLEL=\"+configParallel+\", CLDR_VETTINGVIEWER_CHUNKSIZE=\"+configChunkSize);\n+        }\n+\n+        public void append(Appendable output) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzODc2OQ==", "bodyText": "I'm guessing these are localeNames and localeIds\nI know our code has lots of bad names, but for new code we should be clearer.", "url": "https://github.com/unicode-org/cldr/pull/709#discussion_r488838769", "createdAt": "2020-09-15T17:26:39Z", "author": {"login": "macchiati"}, "path": "tools/java/org/unicode/cldr/util/VettingViewer.java", "diffHunk": "@@ -805,6 +807,161 @@ public void generateSummaryHtmlErrorTables(Appendable output, EnumSet<Choice> ch\n \n     }\n \n+    private class WriteContext {\n+\n+        private List<String> names = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f72cb59bcf9b7372d31f612de3855dd323d5d22c", "author": {"user": {"login": "srl295", "name": "Steven R. Loomis"}}, "url": "https://github.com/unicode-org/cldr/commit/f72cb59bcf9b7372d31f612de3855dd323d5d22c", "committedDate": "2020-09-21T19:04:59Z", "message": "CLDR-8654 parallellize VettingViewer - 25-50% speed improvement\n\n- use a ForkJoinPool to parallelize the VV generation\n- write to separate Appendable buffers and then join them all at once\n- add CLDRConfig.get(String, int default) for fetching numeric config parameters\n- DefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\n\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n- number of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n- number of threads (0 means 'one per CPU')"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "889cf42b05815614e386264e86b48308d329b7e4", "author": {"user": {"login": "srl295", "name": "Steven R. Loomis"}}, "url": "https://github.com/unicode-org/cldr/commit/889cf42b05815614e386264e86b48308d329b7e4", "committedDate": "2020-09-15T16:37:52Z", "message": "CLDR-8654 parallellize VettingViewer - 25-50% speed improvement\n\n- use a ForkJoinPool to parallelize the VV generation\n- write to separate Appendable buffers and then join them all at once\n- add CLDRConfig.get(String, int default) for fetching numeric config parameters\n- DefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\n\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n- number of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n- number of threads (0 means 'one per CPU')"}, "afterCommit": {"oid": "f72cb59bcf9b7372d31f612de3855dd323d5d22c", "author": {"user": {"login": "srl295", "name": "Steven R. Loomis"}}, "url": "https://github.com/unicode-org/cldr/commit/f72cb59bcf9b7372d31f612de3855dd323d5d22c", "committedDate": "2020-09-21T19:04:59Z", "message": "CLDR-8654 parallellize VettingViewer - 25-50% speed improvement\n\n- use a ForkJoinPool to parallelize the VV generation\n- write to separate Appendable buffers and then join them all at once\n- add CLDRConfig.get(String, int default) for fetching numeric config parameters\n- DefaultErrorStatus errorStatus was moved into getFileInfo() as it did not\nhave any long running state, and produced concurrency issues.\n\nparameters:\n\nCLDR_VETTINGVIEWER_CHUNKSIZE=1\n- number of locales each thread should process before getting\nmore work\n\nCLDR_VETTINGVIEWER_PARALLEL=0\n- number of threads (0 means 'one per CPU')"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDA2NTIx", "url": "https://github.com/unicode-org/cldr/pull/709#pullrequestreview-493006521", "createdAt": "2020-09-21T21:52:48Z", "commit": {"oid": "f72cb59bcf9b7372d31f612de3855dd323d5d22c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1948, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}