{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMTM0MDk1", "number": 740, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowMjo1NFrOEnhBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjoxMDo1M1rOEnhMIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODcwODY1OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowMjo1NFrOHYJsIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjo0MzowMlrOHYLBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4NjYyNA==", "bodyText": "minor: it's already been asserted as not-null on the prior line, so this is an unnecessary ifdef.", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495086624", "createdAt": "2020-09-25T16:02:54Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwODQxMg==", "bodyText": "the assertNotNull wouldn't stop execution of the rest of the method, though, would it? I didn't want to trigger a null pointer exception in that case", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495108412", "createdAt": "2020-09-25T16:43:02Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4NjYyNA=="}, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODcxMzUxOnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowNDoxNFrOHYJvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjo1NjowMFrOHYLbzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4NzM5NQ==", "bodyText": "it could be 'unknown' if git is missing or if the code was compiled from a source tarball?maybe this should be a warning?", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495087395", "createdAt": "2020-09-25T16:04:14Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {\n+            if (!hash.matches(\"[0-9a-f]+\")) {\n+                errln(\"\u274c getCldrBaseDirHash is not hex: \" + hash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNTIxNQ==", "bodyText": "That's a good point. On the other hand, if anyone runs Survey Tool in a context where the hash is unknown, cache busting will be broken. Warnings aren't always noticed in a timely fashion. It seems more important to prevent a regression in our actual usage, than to accommodate a hypothetical scenario.", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495115215", "createdAt": "2020-09-25T16:56:00Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {\n+            if (!hash.matches(\"[0-9a-f]+\")) {\n+                errln(\"\u274c getCldrBaseDirHash is not hex: \" + hash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4NzM5NQ=="}, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODcyNzc0OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowODozMVrOHYJ4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxNjowOFrOHYME-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4OTczNw==", "bodyText": "So, in a test environment, you definitely don't have cldr-apps.war and thus no manifest to read \"CLDR-Apps\" from. You also might not have cldr*.jar for its tools manifest, if the tests are run in eclipse let's say.  So this might be a warning, but a challenge to get from the test environment.\nI don't know if you can use a warfile as if it were a jar on the classpath? If so, we could have a post build step, something like:   java -DCLDR_APPS_VERSION_TEST -classpath \u2026:\u2026:cldr*.jar:cldr-apps.war TestAll or something like that?", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495089737", "createdAt": "2020-09-25T16:08:31Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {\n+            if (!hash.matches(\"[0-9a-f]+\")) {\n+                errln(\"\u274c getCldrBaseDirHash is not hex: \" + hash);\n+            } else if (hash.length() < 8) {\n+                errln(\"\u274c getCldrBaseDirHash is shorter than 8 chars: \" + hash);\n+            }\n+        }\n+        final String strings[] = {\"CLDR-Apps\", \"CLDR-Tools\"};\n+        for (String s : strings) {\n+            final String version = CLDRConfigImpl.getGitHashForSlug(s);\n+            assertNotNull(\"getting \" + s + \" version\", version);\n+            /*\n+             * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(version).\n+             * Currently they do equal CLDRURLS.UNKNOWN_REVISION, since SurveyMain.init isn't called for TestAll.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNTc1Mg==", "bodyText": "I considered removing the getGitHashForSlug test entirely, or just the TODO. If you'd prefer either of those changes, that's OK with me.\nThat's all tangential to the cache-busting issue. I'm just concerned that a lot of code isn't under test at all, and the tight coupling with SurveyMain.init makes a lot of code hard to test. A unit test for getGitHashForSlug could be implemented using some other jar file, maybe a small one just for testing; or some other means of dependency injection. I don't know if you can use a warfile as if it were a jar on the classpath; it's very mysterious territory for me!", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495125752", "createdAt": "2020-09-25T17:16:08Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/org/unicode/cldr/unittest/web/TestMisc.java", "diffHunk": "@@ -82,27 +83,26 @@ public void TestIsCoverageOrganization() {\n     }\n \n     public void TestGitHash() {\n-        final String appsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Apps\");\n-        assertNotNull(\"getting CLDR-Apps version\", appsVersion);\n-        /*\n-         * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(appsVersion))\n-         * and likewise for toolsVersion\n-         */\n-        // if (CLDRURLS.UNKNOWN_REVISION.equals(appsVersion)) {\n-        //    errln(\"\u274c appsVersion = UNKNOWN_REVISION: \" + appsVersion);\n-        // }\n-\n-        final String toolsVersion = CLDRConfigImpl.getGitHashForSlug(\"CLDR-Tools\");\n-        assertNotNull(\"getting CLDR-Tools version\", toolsVersion);\n-\n-        /*\n-         * TODO: add a regression test here for CLDR_DATA_HASH\n-         * Reference: https://unicode-org.atlassian.net/browse/CLDR-13582\n-         */\n-        // final String hash = CLDRConfig.getInstance().getProperty(\"CLDR_DATA_HASH\");\n-        // assertNotNull(\"getting CLDR_DATA_HASH\", hash);\n-        // if (hash != null && !hash.matches(\"[0-9a-f]+\")) {\n-        //    errln(\"\u274c CLDR_DATA_HASH is not hex: \" + hash);\n-        // }\n+        final String hash = CldrUtility.getCldrBaseDirHash();\n+        assertNotNull(\"getCldrBaseDirHash\", hash);\n+        if (hash != null) {\n+            if (!hash.matches(\"[0-9a-f]+\")) {\n+                errln(\"\u274c getCldrBaseDirHash is not hex: \" + hash);\n+            } else if (hash.length() < 8) {\n+                errln(\"\u274c getCldrBaseDirHash is shorter than 8 chars: \" + hash);\n+            }\n+        }\n+        final String strings[] = {\"CLDR-Apps\", \"CLDR-Tools\"};\n+        for (String s : strings) {\n+            final String version = CLDRConfigImpl.getGitHashForSlug(s);\n+            assertNotNull(\"getting \" + s + \" version\", version);\n+            /*\n+             * TODO: fail if CLDRURLS.UNKNOWN_REVISION.equals(version).\n+             * Currently they do equal CLDRURLS.UNKNOWN_REVISION, since SurveyMain.init isn't called for TestAll.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4OTczNw=="}, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODczMDIzOnYy", "diffSide": "LEFT", "path": "tools/cldr-apps/src/org/unicode/cldr/util/CLDRConfigImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowOTowNVrOHYJ5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjowOTowNVrOHYJ5uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MDEwNQ==", "bodyText": "\ud83d\udc4d \"some time\" has passed, whatever it was :)", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495090105", "createdAt": "2020-09-25T16:09:05Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/org/unicode/cldr/util/CLDRConfigImpl.java", "diffHunk": "@@ -80,13 +78,6 @@ protected Environment getDefaultEnvironment() {\n     }\n \n     CLDRConfigImpl() {\n-        // TODO remove this after some time- just warn people about the old message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODczNjk2OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/org/unicode/cldr/util/CLDRConfigImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNjoxMDo1M1rOHYJ9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyMToyMVrOHYMPgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MTEzMA==", "bodyText": "There's no comnon init() for CLDRConfig, but if there were, this line could move there.", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495091130", "createdAt": "2020-09-25T16:10:53Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/org/unicode/cldr/util/CLDRConfigImpl.java", "diffHunk": "@@ -180,7 +171,7 @@ private synchronized void init() {\n         // The git version of the cldr.jar file embedded in cldr-apps.\n         survprops.put(\"CLDR_UTILITIES_HASH\", getGitHashForSlug(\"CLDR-Tools\"));\n         // The git version of the CLDR_DIR currently in use.\n-        survprops.put(\"CLDR_DATA_HASH\", getGitHashForDir(survprops.getProperty(\"CLDR_DIR\", null)));\n+        survprops.put(\"CLDR_DATA_HASH\", CldrUtility.getGitHashForDir(survprops.getProperty(\"CLDR_DIR\", null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyODQ1MQ==", "bodyText": "At first I tried to call getCldrBaseDirHash there but got \"Error: setDir() was already called once.\" Somehow putting the cart before the horse, I guess -- getCldrBaseDirHash calls getCldrBaseDirectory...", "url": "https://github.com/unicode-org/cldr/pull/740#discussion_r495128451", "createdAt": "2020-09-25T17:21:21Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/org/unicode/cldr/util/CLDRConfigImpl.java", "diffHunk": "@@ -180,7 +171,7 @@ private synchronized void init() {\n         // The git version of the cldr.jar file embedded in cldr-apps.\n         survprops.put(\"CLDR_UTILITIES_HASH\", getGitHashForSlug(\"CLDR-Tools\"));\n         // The git version of the CLDR_DIR currently in use.\n-        survprops.put(\"CLDR_DATA_HASH\", getGitHashForDir(survprops.getProperty(\"CLDR_DIR\", null)));\n+        survprops.put(\"CLDR_DATA_HASH\", CldrUtility.getGitHashForDir(survprops.getProperty(\"CLDR_DIR\", null)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA5MTEzMA=="}, "originalCommit": {"oid": "618f4414cc1c56560cd18a32dc1489d152cf3d8c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 401, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}