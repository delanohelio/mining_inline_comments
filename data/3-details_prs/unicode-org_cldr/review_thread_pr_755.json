{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDY3NjUz", "number": 755, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTozMzoyNVrOEtGY9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo0ODo1MVrOE-H6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzI2MDcwOnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/webapp/tc-all-errors.jsp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTozMzoyNVrOHgs4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMzowMzo0NFrOH7Kuvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1MTc5Mg==", "bodyText": "Could we avoid adding any new jsp files? It's a legacy technology and we should be getting rid of the ones we have rather than adding new ones", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r504051792", "createdAt": "2020-10-13T15:33:25Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/webapp/tc-all-errors.jsp", "diffHunk": "@@ -0,0 +1,109 @@\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTcwNQ==", "bodyText": "OK. They are easier to create for simpler pages like this- but, I will rewrite it.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r523245705", "createdAt": "2020-11-13T21:38:07Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/webapp/tc-all-errors.jsp", "diffHunk": "@@ -0,0 +1,109 @@\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1MTc5Mg=="}, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMzgzOQ==", "bodyText": "decided to not rewrite(for this PR), could be done as a followon", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531803839", "createdAt": "2020-11-27T23:03:44Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/webapp/tc-all-errors.jsp", "diffHunk": "@@ -0,0 +1,109 @@\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1MTc5Mg=="}, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzMwMTM0OnYy", "diffSide": "RIGHT", "path": "tools/java/org/unicode/cldr/util/data/subtypeMapping.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTo0MTo0MlrOHgtQ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0MToxMFrOHzAddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1ODExMQ==", "bodyText": "Should be https -- but I see that currently fails for cldr.unicode.org. Can the distinction be encapsulated in a single place?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r504058111", "createdAt": "2020-10-13T15:41:42Z", "author": {"login": "btangmu"}, "path": "tools/java/org/unicode/cldr/util/data/subtypeMapping.txt", "diffHunk": "@@ -0,0 +1,28 @@\n+# -*- BEGIN CheckCLDR.Subtype Mapping -*-\n+# Format is URL \"http...\" followed by Subtype values, the latter separated by commas.\n+# Each of the Subtypes is covered by documentation at that URL.\n+# Comment lines must START with a #, because # is used for HTML fragments.\n+\n+\n+\n+http://cldr.unicode.org/translation/timezones#metazones", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njk2Ng==", "bodyText": "I think for editing purposes it would be easiest to have full URLs. Doesn't look like we aren't going to get https on google sites.  Since it's plain text, I think we can do a bulk rename when/if we move to something else.\nSo, I would like to keep http://cldr.unicode.org for now, pending the overall discussion about moving the content somewhere else.  The goal of this ticket is to be an improvement of what we have and decouple the URLs from the source code.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r523246966", "createdAt": "2020-11-13T21:41:10Z", "author": {"login": "srl295"}, "path": "tools/java/org/unicode/cldr/util/data/subtypeMapping.txt", "diffHunk": "@@ -0,0 +1,28 @@\n+# -*- BEGIN CheckCLDR.Subtype Mapping -*-\n+# Format is URL \"http...\" followed by Subtype values, the latter separated by commas.\n+# Each of the Subtypes is covered by documentation at that URL.\n+# Comment lines must START with a #, because # is used for HTML fragments.\n+\n+\n+\n+http://cldr.unicode.org/translation/timezones#metazones", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1ODExMQ=="}, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzMwNzM4OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SurveyAjax.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTo0MzowMFrOHgtUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDozNTo0OFrOHkgrNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1OTA4MA==", "bodyText": "How about \"Convert this CheckStatus to JSON\"?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r504059080", "createdAt": "2020-10-13T15:43:00Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SurveyAjax.java", "diffHunk": "@@ -113,6 +113,12 @@ public final String toString() {\n             return j.toString();\n         }\n \n+        /**\n+         * This converts a CheckStatus object to JSON.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0NjEzNA==", "bodyText": "Yes, that would be a clearer name.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r508046134", "createdAt": "2020-10-19T20:35:48Z", "author": {"login": "macchiati"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SurveyAjax.java", "diffHunk": "@@ -113,6 +113,12 @@ public final String toString() {\n             return j.toString();\n         }\n \n+        /**\n+         * This converts a CheckStatus object to JSON.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1OTA4MA=="}, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzMzMDA2OnYy", "diffSide": "RIGHT", "path": "tools/java/org/unicode/cldr/util/SubtypeToURLMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTo0Nzo1MlrOHgtjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo1MDo0MlrOHzAseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2Mjc0NQ==", "bodyText": "How about a subroutine for the \"for\" loop?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r504062745", "createdAt": "2020-10-13T15:47:52Z", "author": {"login": "btangmu"}, "path": "tools/java/org/unicode/cldr/util/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.unicode.cldr.util;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a subtype map and check, otherwise print the default map\")\n+public class SubtypeToURLMap {\n+\n+    /**\n+     * Path of the default mapping file\n+     */\n+    public static final String DEFAULT_MAPPING = \"subtypeMapping.txt\";\n+    private Map<Subtype, String> map;\n+\n+\n+    public SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{\n+        final Map<Subtype, String> newMap = new HashMap<>();\n+        int n = 0;\n+        try {\n+            int urlLast = 0;\n+            int subtypeLast = 0;\n+            String url = null;\n+            int urlCount = 0;\n+            for(String ln; (ln=utf8Data.readLine())!=null;) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDgwOQ==", "bodyText": "Not sure how that would help here - this function consists of several state variables, and then the loop, and then several lines of error checking which all depend on the state variables.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r523250809", "createdAt": "2020-11-13T21:50:42Z", "author": {"login": "srl295"}, "path": "tools/java/org/unicode/cldr/util/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.unicode.cldr.util;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a subtype map and check, otherwise print the default map\")\n+public class SubtypeToURLMap {\n+\n+    /**\n+     * Path of the default mapping file\n+     */\n+    public static final String DEFAULT_MAPPING = \"subtypeMapping.txt\";\n+    private Map<Subtype, String> map;\n+\n+\n+    public SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{\n+        final Map<Subtype, String> newMap = new HashMap<>();\n+        int n = 0;\n+        try {\n+            int urlLast = 0;\n+            int subtypeLast = 0;\n+            String url = null;\n+            int urlCount = 0;\n+            for(String ln; (ln=utf8Data.readLine())!=null;) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2Mjc0NQ=="}, "originalCommit": {"oid": "41a8bae6a007400cfced45e0c6db0e9401f67a56"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTczMTAxOnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxMzo0MFrOH7KUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo1MjozOFrOH7KpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzAyNg==", "bodyText": "Is this a TODO for the current ticket?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531797026", "createdAt": "2020-11-27T22:13:40Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.unicode.cldr.web;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * This class caches the status (200, 404, etc.) of a set of pages, attempting to\n+ * avoid unnecessary server traffic. At present the cache is a singleton.\n+ * @author srl\n+ *\n+ */\n+public class HttpStatusCache {\n+    /**\n+     * Main entrypoint. Check a URL for its status (i.e., is the page found or not?)\n+     * @param url\n+     * @return\n+     */\n+    public static final boolean check(final String url) {\n+        try {\n+            return isGoodStatus(check(new URL(url)));\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static final Integer check(final URL url) {\n+        try {\n+            Integer status = urlCache.get(url, () -> internalCheck(url));\n+            // TODO: if the status is a retry here, retry.\n+            return status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMjQzMQ==", "bodyText": "Not for the current ticket.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531802431", "createdAt": "2020-11-27T22:52:38Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.unicode.cldr.web;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * This class caches the status (200, 404, etc.) of a set of pages, attempting to\n+ * avoid unnecessary server traffic. At present the cache is a singleton.\n+ * @author srl\n+ *\n+ */\n+public class HttpStatusCache {\n+    /**\n+     * Main entrypoint. Check a URL for its status (i.e., is the page found or not?)\n+     * @param url\n+     * @return\n+     */\n+    public static final boolean check(final String url) {\n+        try {\n+            return isGoodStatus(check(new URL(url)));\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static final Integer check(final URL url) {\n+        try {\n+            Integer status = urlCache.get(url, () -> internalCheck(url));\n+            // TODO: if the status is a retry here, retry.\n+            return status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzAyNg=="}, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTczMTQ4OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNDoxNFrOH7KUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNDoxNFrOH7KUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzA4Ng==", "bodyText": "Delete this second TODO comment?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531797086", "createdAt": "2020-11-27T22:14:14Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.unicode.cldr.web;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * This class caches the status (200, 404, etc.) of a set of pages, attempting to\n+ * avoid unnecessary server traffic. At present the cache is a singleton.\n+ * @author srl\n+ *\n+ */\n+public class HttpStatusCache {\n+    /**\n+     * Main entrypoint. Check a URL for its status (i.e., is the page found or not?)\n+     * @param url\n+     * @return\n+     */\n+    public static final boolean check(final String url) {\n+        try {\n+            return isGoodStatus(check(new URL(url)));\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static final Integer check(final URL url) {\n+        try {\n+            Integer status = urlCache.get(url, () -> internalCheck(url));\n+            // TODO: if the status is a retry here, retry.\n+            return status;\n+        } catch (ExecutionException e) {\n+            // TODO Auto-generated catch block\n+            System.err.println(\"HttpStatusCache: Err in check of URL \" + url.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTczMzIxOnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjoxNToyOVrOH7KVOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo1MzowNlrOH7KpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzMwNw==", "bodyText": "println for debugging only?", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531797307", "createdAt": "2020-11-27T22:15:29Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.unicode.cldr.web;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * This class caches the status (200, 404, etc.) of a set of pages, attempting to\n+ * avoid unnecessary server traffic. At present the cache is a singleton.\n+ * @author srl\n+ *\n+ */\n+public class HttpStatusCache {\n+    /**\n+     * Main entrypoint. Check a URL for its status (i.e., is the page found or not?)\n+     * @param url\n+     * @return\n+     */\n+    public static final boolean check(final String url) {\n+        try {\n+            return isGoodStatus(check(new URL(url)));\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static final Integer check(final URL url) {\n+        try {\n+            Integer status = urlCache.get(url, () -> internalCheck(url));\n+            // TODO: if the status is a retry here, retry.\n+            return status;\n+        } catch (ExecutionException e) {\n+            // TODO Auto-generated catch block\n+            System.err.println(\"HttpStatusCache: Err in check of URL \" + url.toString());\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Flush the cache of a specific URL or all of them\n+     * @param url ('all' if null)\n+     */\n+    public static final void flush(final URL url) {\n+        if(url == null) {\n+            System.err.println(\"HTTP Status Cache: invalidating all \" + urlCache.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMjQ4NQ==", "bodyText": "flush() is called from the JSP, so it is an administrative task.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531802485", "createdAt": "2020-11-27T22:53:06Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/HttpStatusCache.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.unicode.cldr.web;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * This class caches the status (200, 404, etc.) of a set of pages, attempting to\n+ * avoid unnecessary server traffic. At present the cache is a singleton.\n+ * @author srl\n+ *\n+ */\n+public class HttpStatusCache {\n+    /**\n+     * Main entrypoint. Check a URL for its status (i.e., is the page found or not?)\n+     * @param url\n+     * @return\n+     */\n+    public static final boolean check(final String url) {\n+        try {\n+            return isGoodStatus(check(new URL(url)));\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    public static final Integer check(final URL url) {\n+        try {\n+            Integer status = urlCache.get(url, () -> internalCheck(url));\n+            // TODO: if the status is a retry here, retry.\n+            return status;\n+        } catch (ExecutionException e) {\n+            // TODO Auto-generated catch block\n+            System.err.println(\"HttpStatusCache: Err in check of URL \" + url.toString());\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Flush the cache of a specific URL or all of them\n+     * @param url ('all' if null)\n+     */\n+    public static final void flush(final URL url) {\n+        if(url == null) {\n+            System.err.println(\"HTTP Status Cache: invalidating all \" + urlCache.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5NzMwNw=="}, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTc2NDU0OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo0NToxNFrOH7KlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo0NToxNFrOH7KlAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMTM0NA==", "bodyText": "this constructor is too long to see all at once on the screen, making the logic harder to check; it could be shortened with subroutines, maybe an object containing the variables newMap ... urlCount\njust a suggestion for future improvement, not a blocker for this review", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531801344", "createdAt": "2020-11-27T22:45:14Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// \u00a9 2020 and later: Unicode, Inc. and others.\n+// License & terms of use: http://www.unicode.org/copyright.html\n+\n+package org.unicode.cldr.web;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRTool;\n+\n+import com.ibm.icu.text.MessageFormat;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a path or URL to a subtype map and check.\")\n+public class SubtypeToURLMap {\n+    /**\n+     * Little tool for validating input data.\n+     * @param args list of files to validate, if empty runs against default data.\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     */\n+     public static void main(String args[]) throws FileNotFoundException, IOException {\n+        if(args.length == 0) {\n+            System.err.println(\"Usage: SubtypeToURLMap (url or file path). The default map is \" + DEFAULT_URL);\n+            return;\n+        } else {\n+            int problems = 0;\n+            for(final String fn : args) {\n+                System.out.println(\"data: \" + fn);\n+                SubtypeToURLMap map = getInstance(new File(fn));\n+                problems += map.dump();\n+            }\n+            if(problems > 0) {\n+                throw new IllegalArgumentException(MessageFormat.format(\"Total problem(s) found: {0} in {1} items(s)\", problems, args.length));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Map from Subtype to URL\n+     */\n+    private Map<Subtype, String> map;\n+\n+    /**\n+     * The set of URLs is kept as a List so the original order is retained.\n+     */\n+    private List<String> urlList;\n+\n+    /**\n+     * Internal constructor for\n+     * @param utf8Data for cleaned input data (i.e. not HTML)\n+     * @throws IllegalArgumentException\n+     */\n+    protected SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTc2ODU2OnYy", "diffSide": "RIGHT", "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMjo0ODo1MVrOH7Km_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMzo0NTozOFrOH7LBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMTg1Mw==", "bodyText": "here again, subroutines would be nice to avoid having to scroll up and down to see the whole method; the subroutine names could help to clarify what it's doing from a top-down perspective", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531801853", "createdAt": "2020-11-27T22:48:51Z", "author": {"login": "btangmu"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// \u00a9 2020 and later: Unicode, Inc. and others.\n+// License & terms of use: http://www.unicode.org/copyright.html\n+\n+package org.unicode.cldr.web;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRTool;\n+\n+import com.ibm.icu.text.MessageFormat;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a path or URL to a subtype map and check.\")\n+public class SubtypeToURLMap {\n+    /**\n+     * Little tool for validating input data.\n+     * @param args list of files to validate, if empty runs against default data.\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     */\n+     public static void main(String args[]) throws FileNotFoundException, IOException {\n+        if(args.length == 0) {\n+            System.err.println(\"Usage: SubtypeToURLMap (url or file path). The default map is \" + DEFAULT_URL);\n+            return;\n+        } else {\n+            int problems = 0;\n+            for(final String fn : args) {\n+                System.out.println(\"data: \" + fn);\n+                SubtypeToURLMap map = getInstance(new File(fn));\n+                problems += map.dump();\n+            }\n+            if(problems > 0) {\n+                throw new IllegalArgumentException(MessageFormat.format(\"Total problem(s) found: {0} in {1} items(s)\", problems, args.length));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Map from Subtype to URL\n+     */\n+    private Map<Subtype, String> map;\n+\n+    /**\n+     * The set of URLs is kept as a List so the original order is retained.\n+     */\n+    private List<String> urlList;\n+\n+    /**\n+     * Internal constructor for\n+     * @param utf8Data for cleaned input data (i.e. not HTML)\n+     * @throws IllegalArgumentException\n+     */\n+    protected SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{\n+        final Map<Subtype, String> newMap = new HashMap<>();\n+        final List<String> newList = new ArrayList<>();\n+        int n = 0;\n+        boolean started = false; // Are we in started state?\n+        boolean everStarted = false; // did we ever start?\n+        boolean hadSubtype = false; // did we have a subtype for this URL?\n+        try {\n+            int urlLast = 0; // line number of the last URL\n+            int subtypeLast = 0; // line number of the last subtype\n+            String url = null; // last URL seen\n+            int urlCount = 0; // number of urls\n+            for(String ln; (ln=utf8Data.readLine())!=null;) {\n+                ++n;\n+                ln = ln.trim();\n+                if(ln.isEmpty()) continue;\n+\n+                if(!started) {\n+                    if(ln.contains(BEGIN_MARKER)) {\n+                        started = everStarted = true;\n+                    }\n+                    continue;\n+                }\n+\n+                if(ln.contains(END_MARKER)) {\n+                    started = false;\n+                    break; // exit loop, got end\n+                } else if(ln.isEmpty() || ln.startsWith(COMMENT)) {\n+                    continue;\n+                } else if(ln.startsWith(\"http:\") || ln.startsWith(\"https:\")) {\n+                    urlLast = n;\n+                    url = ln;\n+                    urlCount++;\n+                    hadSubtype = false; // reset this\n+                    try {\n+                        new java.net.URL(ln);\n+                    } catch(MalformedURLException mfe) {\n+                        throw new IllegalArgumentException(\"Line \" + n + \": malformed URL: \" + ln);\n+                    }\n+                    newList.add(ln);\n+                } else {\n+                    for(String str : ln.split(\"[, ]\")) {\n+                        str = str.trim();\n+                        if(str.isEmpty()) continue;\n+                        if(url == null) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No page URL has been found yet for \" + str);\n+                        }\n+                        try {\n+                            Subtype subtype = Subtype.valueOf(str);\n+                            newMap.put(subtype, url);\n+                            subtypeLast = n;\n+                            hadSubtype = true;\n+                        } catch(IllegalArgumentException iae) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No subtype named '\"+str+\"'. See CheckCLDR.Subtype.\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if(started) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No END line after line \" + urlLast + \".\");\n+            } else if (!everStarted) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No BEGIN line \");\n+            }\n+            if(urlCount>0 && !hadSubtype) { // had URLs, but did not end with a subtype\n+                throw new IllegalArgumentException(\"Error: Dangling URL \" + url.toString() + \" from line \" + urlLast + \" with no subtypes. Comment out that line.\");\n+            } else if(subtypeLast == 0) {\n+                System.err.println(\"SubtypeToURLMap: Warning: no subtypes specified or no BEGIN line detected.\");\n+            } else {\n+                System.out.println(\"SubtypeToURLMap: read \" + n + \" lines, \" + urlCount + \" urls and \" + newMap.size() + \" subtypes mapped.\");\n+            }\n+            this.map = Collections.unmodifiableMap(newMap);\n+            this.urlList = Collections.unmodifiableList(newList);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Line \" + n + \": Could not read subtypeMapping file\", e);\n+        }\n+    }\n+    public static final String COMMENT = \"#\";\n+    public static final String END_MARKER = \"-*- END CheckCLDR.Subtype Mapping -*-\";\n+    public static final String BEGIN_MARKER = \"-*- BEGIN CheckCLDR.Subtype Mapping -*-\";\n+\n+    /**\n+     * Dump a subtype map to stderr.\n+     * @return unhandled type count, or zero\n+     */\n+    public int dump() {\n+        int count = 0;\n+        for(final Subtype s : getHandledTypes()) {\n+            System.err.println(s + \" => \" + get(s));\n+        }\n+\n+        System.err.println(\"Not Handled:\");\n+        for(final Subtype s : getUnhandledTypes()) {\n+            count++;\n+            System.err.println(\"  \" + s.name()+\",\");\n+        }\n+        return count;\n+    }\n+\n+    /**\n+     * Write the URLMap to a file\n+     * @param pw\n+     * @throws IOException\n+     */\n+    public void write(PrintWriter pw) throws IOException {\n+        pw.println(COMMENT + \" \" + \"dumped by \" + getClass().getSimpleName());\n+        pw.println(COMMENT + \" \" + BEGIN_MARKER);\n+        for (final String url : getUrls()) {\n+            pw.println(url);\n+            for(final Subtype type : getSubtypesForUrl(url)) {\n+                pw.println(type.name()+\",\");\n+            }\n+            pw.println();\n+        }\n+        pw.println(COMMENT + \" \" + END_MARKER);\n+    }\n+\n+    /**\n+     * Get a list of the URLs, in original order\n+     * @return\n+     */\n+    public List<String> getUrls() {\n+        return urlList;\n+    }\n+    /**\n+     * get the subtypes that match a certain URL\n+     */\n+    public Set<Subtype> getSubtypesForUrl(final String url) {\n+        Set<Subtype> set = new TreeSet<>();\n+        map.forEach((Subtype t, String s) -> {\n+            if(s.equals(url)) set.add(t);\n+        });\n+        return set;\n+    }\n+\n+    /**\n+     * Get the URL with more information about a subtype.\n+     * @param subtype the subtype to fetch\n+     * @return url or null\n+     */\n+    public String get(Subtype subtype) {\n+        return map.get(subtype);\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getHandledTypes() {\n+        return Collections.unmodifiableSet(map.keySet());\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE NOT handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getUnhandledTypes() {\n+        Set<Subtype> ts = createExpectedSubtypes();\n+        ts.removeAll(map.keySet());\n+        return Collections.unmodifiableSet(ts);\n+    }\n+\n+    /**\n+     * Create a set with the expected subtypes (minus 'none') in name order.\n+     * The set is mutable, with the expectation that the caller may use the set\n+     * for verification.\n+     * @return\n+     */\n+    static Set<Subtype> createExpectedSubtypes() {\n+        return Arrays.stream(Subtype.values())\n+        .filter(s -> !(s == Subtype.none)) // do not expect \"none\"\n+        .collect(Collectors.toCollection(\n+            () -> new TreeSet<>((Subtype s1, Subtype s2)->s1.name().compareTo(s2.name()))));\n+    }\n+\n+    /**\n+     * Get the subtypes that are expected to be handled by this map.\n+     * (i.e. minus Subtype.none)\n+     * @return\n+     */\n+    public static Collection<Subtype> getExpectedSubtypes() {\n+        return Collections.unmodifiableCollection(createExpectedSubtypes());\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final BufferedReader bufferedReader) {\n+        return new SubtypeToURLMap(bufferedReader);\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final File fn) throws IOException, FileNotFoundException {\n+        try (InputStream fis = new FileInputStream(fn);\n+            InputStreamReader inputStreamReader = new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            ) {\n+            return SubtypeToURLMap.getInstance(bufferedReader);\n+        }\n+    }\n+\n+    /**\n+     * Fetch from a URL.\n+     *\n+     * @param resource\n+     * @return\n+     * @throws IOException\n+     */\n+    public static SubtypeToURLMap getInstance(URL resource) throws IOException, URISyntaxException {\n+        if(resource.toString().endsWith(\".txt\")) {\n+            // plain text\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                Reader isr = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader br = new BufferedReader(isr);\n+                ) {\n+                return new SubtypeToURLMap(br);\n+            }\n+        } else if(resource.getProtocol().equals(\"http\") || resource.getProtocol().equals(\"https\")) {\n+\n+            Document doc = Jsoup.connect(resource.toString()).get();\n+            SubtypeToURLMap newMap = getInstance(resource, doc);\n+            try(PrintWriter pw = new PrintWriter(new File(\"/tmp/mymap.txt\"), \"UTF-8\")) { // TODO: in later Java, we can use StandardCharsets.UTF8\n+                newMap.write(pw);\n+            }\n+            return newMap;\n+        } else {\n+            // assume HTML to parse\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                ) {\n+                Document doc = Jsoup.parse(is, \"UTF-8\", resource.toString());\n+                return getInstance(resource, doc);\n+            }\n+        }\n+    }\n+\n+    private static SubtypeToURLMap getInstance(URL resource, Document doc) throws IOException {\n+        StringBuffer sb = new StringBuffer();\n+        doc.select(\"div code\").forEach(n ->\n+            n.textNodes()\n+                .forEach(tn -> sb.append(tn.text()).append('\\n')));\n+        System.err.println(\"Read \" + sb.length() + \" chars from \" + resource.toString());\n+        try (Reader sr = new StringReader(sb.toString());\n+            BufferedReader br = new BufferedReader(sr);) {\n+            return new SubtypeToURLMap(br);\n+        }\n+    }\n+    static final String DEFAULT_URL = /*CLDRConfig.getInstance().getProperty(\"CLDR_SUBTYPE_URL\", */\n+        \"https://sites.google.com/site/cldr/development/subtypes\" /* ) */;\n+\n+    private static String CACHE_SUBTYPE_FILE = \"urlmap-cache.txt\";\n+\n+    private final static class SubtypeToURLMapHelper {\n+        static File cacheFile = new File(CLDRConfig.getInstance().get(\"CLDRHOME\"), CACHE_SUBTYPE_FILE);\n+        static SubtypeToURLMap INSTANCE = make(); // not final, may be reloaded.\n+        static SubtypeToURLMap make() {\n+            SubtypeToURLMap map = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMjU0Nw==", "bodyText": "makes sense.", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531802547", "createdAt": "2020-11-27T22:53:45Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// \u00a9 2020 and later: Unicode, Inc. and others.\n+// License & terms of use: http://www.unicode.org/copyright.html\n+\n+package org.unicode.cldr.web;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRTool;\n+\n+import com.ibm.icu.text.MessageFormat;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a path or URL to a subtype map and check.\")\n+public class SubtypeToURLMap {\n+    /**\n+     * Little tool for validating input data.\n+     * @param args list of files to validate, if empty runs against default data.\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     */\n+     public static void main(String args[]) throws FileNotFoundException, IOException {\n+        if(args.length == 0) {\n+            System.err.println(\"Usage: SubtypeToURLMap (url or file path). The default map is \" + DEFAULT_URL);\n+            return;\n+        } else {\n+            int problems = 0;\n+            for(final String fn : args) {\n+                System.out.println(\"data: \" + fn);\n+                SubtypeToURLMap map = getInstance(new File(fn));\n+                problems += map.dump();\n+            }\n+            if(problems > 0) {\n+                throw new IllegalArgumentException(MessageFormat.format(\"Total problem(s) found: {0} in {1} items(s)\", problems, args.length));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Map from Subtype to URL\n+     */\n+    private Map<Subtype, String> map;\n+\n+    /**\n+     * The set of URLs is kept as a List so the original order is retained.\n+     */\n+    private List<String> urlList;\n+\n+    /**\n+     * Internal constructor for\n+     * @param utf8Data for cleaned input data (i.e. not HTML)\n+     * @throws IllegalArgumentException\n+     */\n+    protected SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{\n+        final Map<Subtype, String> newMap = new HashMap<>();\n+        final List<String> newList = new ArrayList<>();\n+        int n = 0;\n+        boolean started = false; // Are we in started state?\n+        boolean everStarted = false; // did we ever start?\n+        boolean hadSubtype = false; // did we have a subtype for this URL?\n+        try {\n+            int urlLast = 0; // line number of the last URL\n+            int subtypeLast = 0; // line number of the last subtype\n+            String url = null; // last URL seen\n+            int urlCount = 0; // number of urls\n+            for(String ln; (ln=utf8Data.readLine())!=null;) {\n+                ++n;\n+                ln = ln.trim();\n+                if(ln.isEmpty()) continue;\n+\n+                if(!started) {\n+                    if(ln.contains(BEGIN_MARKER)) {\n+                        started = everStarted = true;\n+                    }\n+                    continue;\n+                }\n+\n+                if(ln.contains(END_MARKER)) {\n+                    started = false;\n+                    break; // exit loop, got end\n+                } else if(ln.isEmpty() || ln.startsWith(COMMENT)) {\n+                    continue;\n+                } else if(ln.startsWith(\"http:\") || ln.startsWith(\"https:\")) {\n+                    urlLast = n;\n+                    url = ln;\n+                    urlCount++;\n+                    hadSubtype = false; // reset this\n+                    try {\n+                        new java.net.URL(ln);\n+                    } catch(MalformedURLException mfe) {\n+                        throw new IllegalArgumentException(\"Line \" + n + \": malformed URL: \" + ln);\n+                    }\n+                    newList.add(ln);\n+                } else {\n+                    for(String str : ln.split(\"[, ]\")) {\n+                        str = str.trim();\n+                        if(str.isEmpty()) continue;\n+                        if(url == null) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No page URL has been found yet for \" + str);\n+                        }\n+                        try {\n+                            Subtype subtype = Subtype.valueOf(str);\n+                            newMap.put(subtype, url);\n+                            subtypeLast = n;\n+                            hadSubtype = true;\n+                        } catch(IllegalArgumentException iae) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No subtype named '\"+str+\"'. See CheckCLDR.Subtype.\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if(started) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No END line after line \" + urlLast + \".\");\n+            } else if (!everStarted) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No BEGIN line \");\n+            }\n+            if(urlCount>0 && !hadSubtype) { // had URLs, but did not end with a subtype\n+                throw new IllegalArgumentException(\"Error: Dangling URL \" + url.toString() + \" from line \" + urlLast + \" with no subtypes. Comment out that line.\");\n+            } else if(subtypeLast == 0) {\n+                System.err.println(\"SubtypeToURLMap: Warning: no subtypes specified or no BEGIN line detected.\");\n+            } else {\n+                System.out.println(\"SubtypeToURLMap: read \" + n + \" lines, \" + urlCount + \" urls and \" + newMap.size() + \" subtypes mapped.\");\n+            }\n+            this.map = Collections.unmodifiableMap(newMap);\n+            this.urlList = Collections.unmodifiableList(newList);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Line \" + n + \": Could not read subtypeMapping file\", e);\n+        }\n+    }\n+    public static final String COMMENT = \"#\";\n+    public static final String END_MARKER = \"-*- END CheckCLDR.Subtype Mapping -*-\";\n+    public static final String BEGIN_MARKER = \"-*- BEGIN CheckCLDR.Subtype Mapping -*-\";\n+\n+    /**\n+     * Dump a subtype map to stderr.\n+     * @return unhandled type count, or zero\n+     */\n+    public int dump() {\n+        int count = 0;\n+        for(final Subtype s : getHandledTypes()) {\n+            System.err.println(s + \" => \" + get(s));\n+        }\n+\n+        System.err.println(\"Not Handled:\");\n+        for(final Subtype s : getUnhandledTypes()) {\n+            count++;\n+            System.err.println(\"  \" + s.name()+\",\");\n+        }\n+        return count;\n+    }\n+\n+    /**\n+     * Write the URLMap to a file\n+     * @param pw\n+     * @throws IOException\n+     */\n+    public void write(PrintWriter pw) throws IOException {\n+        pw.println(COMMENT + \" \" + \"dumped by \" + getClass().getSimpleName());\n+        pw.println(COMMENT + \" \" + BEGIN_MARKER);\n+        for (final String url : getUrls()) {\n+            pw.println(url);\n+            for(final Subtype type : getSubtypesForUrl(url)) {\n+                pw.println(type.name()+\",\");\n+            }\n+            pw.println();\n+        }\n+        pw.println(COMMENT + \" \" + END_MARKER);\n+    }\n+\n+    /**\n+     * Get a list of the URLs, in original order\n+     * @return\n+     */\n+    public List<String> getUrls() {\n+        return urlList;\n+    }\n+    /**\n+     * get the subtypes that match a certain URL\n+     */\n+    public Set<Subtype> getSubtypesForUrl(final String url) {\n+        Set<Subtype> set = new TreeSet<>();\n+        map.forEach((Subtype t, String s) -> {\n+            if(s.equals(url)) set.add(t);\n+        });\n+        return set;\n+    }\n+\n+    /**\n+     * Get the URL with more information about a subtype.\n+     * @param subtype the subtype to fetch\n+     * @return url or null\n+     */\n+    public String get(Subtype subtype) {\n+        return map.get(subtype);\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getHandledTypes() {\n+        return Collections.unmodifiableSet(map.keySet());\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE NOT handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getUnhandledTypes() {\n+        Set<Subtype> ts = createExpectedSubtypes();\n+        ts.removeAll(map.keySet());\n+        return Collections.unmodifiableSet(ts);\n+    }\n+\n+    /**\n+     * Create a set with the expected subtypes (minus 'none') in name order.\n+     * The set is mutable, with the expectation that the caller may use the set\n+     * for verification.\n+     * @return\n+     */\n+    static Set<Subtype> createExpectedSubtypes() {\n+        return Arrays.stream(Subtype.values())\n+        .filter(s -> !(s == Subtype.none)) // do not expect \"none\"\n+        .collect(Collectors.toCollection(\n+            () -> new TreeSet<>((Subtype s1, Subtype s2)->s1.name().compareTo(s2.name()))));\n+    }\n+\n+    /**\n+     * Get the subtypes that are expected to be handled by this map.\n+     * (i.e. minus Subtype.none)\n+     * @return\n+     */\n+    public static Collection<Subtype> getExpectedSubtypes() {\n+        return Collections.unmodifiableCollection(createExpectedSubtypes());\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final BufferedReader bufferedReader) {\n+        return new SubtypeToURLMap(bufferedReader);\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final File fn) throws IOException, FileNotFoundException {\n+        try (InputStream fis = new FileInputStream(fn);\n+            InputStreamReader inputStreamReader = new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            ) {\n+            return SubtypeToURLMap.getInstance(bufferedReader);\n+        }\n+    }\n+\n+    /**\n+     * Fetch from a URL.\n+     *\n+     * @param resource\n+     * @return\n+     * @throws IOException\n+     */\n+    public static SubtypeToURLMap getInstance(URL resource) throws IOException, URISyntaxException {\n+        if(resource.toString().endsWith(\".txt\")) {\n+            // plain text\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                Reader isr = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader br = new BufferedReader(isr);\n+                ) {\n+                return new SubtypeToURLMap(br);\n+            }\n+        } else if(resource.getProtocol().equals(\"http\") || resource.getProtocol().equals(\"https\")) {\n+\n+            Document doc = Jsoup.connect(resource.toString()).get();\n+            SubtypeToURLMap newMap = getInstance(resource, doc);\n+            try(PrintWriter pw = new PrintWriter(new File(\"/tmp/mymap.txt\"), \"UTF-8\")) { // TODO: in later Java, we can use StandardCharsets.UTF8\n+                newMap.write(pw);\n+            }\n+            return newMap;\n+        } else {\n+            // assume HTML to parse\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                ) {\n+                Document doc = Jsoup.parse(is, \"UTF-8\", resource.toString());\n+                return getInstance(resource, doc);\n+            }\n+        }\n+    }\n+\n+    private static SubtypeToURLMap getInstance(URL resource, Document doc) throws IOException {\n+        StringBuffer sb = new StringBuffer();\n+        doc.select(\"div code\").forEach(n ->\n+            n.textNodes()\n+                .forEach(tn -> sb.append(tn.text()).append('\\n')));\n+        System.err.println(\"Read \" + sb.length() + \" chars from \" + resource.toString());\n+        try (Reader sr = new StringReader(sb.toString());\n+            BufferedReader br = new BufferedReader(sr);) {\n+            return new SubtypeToURLMap(br);\n+        }\n+    }\n+    static final String DEFAULT_URL = /*CLDRConfig.getInstance().getProperty(\"CLDR_SUBTYPE_URL\", */\n+        \"https://sites.google.com/site/cldr/development/subtypes\" /* ) */;\n+\n+    private static String CACHE_SUBTYPE_FILE = \"urlmap-cache.txt\";\n+\n+    private final static class SubtypeToURLMapHelper {\n+        static File cacheFile = new File(CLDRConfig.getInstance().get(\"CLDRHOME\"), CACHE_SUBTYPE_FILE);\n+        static SubtypeToURLMap INSTANCE = make(); // not final, may be reloaded.\n+        static SubtypeToURLMap make() {\n+            SubtypeToURLMap map = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMTg1Mw=="}, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwODY3OQ==", "bodyText": "refactored", "url": "https://github.com/unicode-org/cldr/pull/755#discussion_r531808679", "createdAt": "2020-11-27T23:45:38Z", "author": {"login": "srl295"}, "path": "tools/cldr-apps/src/main/java/org/unicode/cldr/web/SubtypeToURLMap.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// \u00a9 2020 and later: Unicode, Inc. and others.\n+// License & terms of use: http://www.unicode.org/copyright.html\n+\n+package org.unicode.cldr.web;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.unicode.cldr.test.CheckCLDR.CheckStatus.Subtype;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRTool;\n+\n+import com.ibm.icu.text.MessageFormat;\n+\n+@CLDRTool(alias=\"subtype-to-url-map\", description = \"parse each of the params as a path or URL to a subtype map and check.\")\n+public class SubtypeToURLMap {\n+    /**\n+     * Little tool for validating input data.\n+     * @param args list of files to validate, if empty runs against default data.\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     */\n+     public static void main(String args[]) throws FileNotFoundException, IOException {\n+        if(args.length == 0) {\n+            System.err.println(\"Usage: SubtypeToURLMap (url or file path). The default map is \" + DEFAULT_URL);\n+            return;\n+        } else {\n+            int problems = 0;\n+            for(final String fn : args) {\n+                System.out.println(\"data: \" + fn);\n+                SubtypeToURLMap map = getInstance(new File(fn));\n+                problems += map.dump();\n+            }\n+            if(problems > 0) {\n+                throw new IllegalArgumentException(MessageFormat.format(\"Total problem(s) found: {0} in {1} items(s)\", problems, args.length));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Map from Subtype to URL\n+     */\n+    private Map<Subtype, String> map;\n+\n+    /**\n+     * The set of URLs is kept as a List so the original order is retained.\n+     */\n+    private List<String> urlList;\n+\n+    /**\n+     * Internal constructor for\n+     * @param utf8Data for cleaned input data (i.e. not HTML)\n+     * @throws IllegalArgumentException\n+     */\n+    protected SubtypeToURLMap(BufferedReader utf8Data) throws IllegalArgumentException{\n+        final Map<Subtype, String> newMap = new HashMap<>();\n+        final List<String> newList = new ArrayList<>();\n+        int n = 0;\n+        boolean started = false; // Are we in started state?\n+        boolean everStarted = false; // did we ever start?\n+        boolean hadSubtype = false; // did we have a subtype for this URL?\n+        try {\n+            int urlLast = 0; // line number of the last URL\n+            int subtypeLast = 0; // line number of the last subtype\n+            String url = null; // last URL seen\n+            int urlCount = 0; // number of urls\n+            for(String ln; (ln=utf8Data.readLine())!=null;) {\n+                ++n;\n+                ln = ln.trim();\n+                if(ln.isEmpty()) continue;\n+\n+                if(!started) {\n+                    if(ln.contains(BEGIN_MARKER)) {\n+                        started = everStarted = true;\n+                    }\n+                    continue;\n+                }\n+\n+                if(ln.contains(END_MARKER)) {\n+                    started = false;\n+                    break; // exit loop, got end\n+                } else if(ln.isEmpty() || ln.startsWith(COMMENT)) {\n+                    continue;\n+                } else if(ln.startsWith(\"http:\") || ln.startsWith(\"https:\")) {\n+                    urlLast = n;\n+                    url = ln;\n+                    urlCount++;\n+                    hadSubtype = false; // reset this\n+                    try {\n+                        new java.net.URL(ln);\n+                    } catch(MalformedURLException mfe) {\n+                        throw new IllegalArgumentException(\"Line \" + n + \": malformed URL: \" + ln);\n+                    }\n+                    newList.add(ln);\n+                } else {\n+                    for(String str : ln.split(\"[, ]\")) {\n+                        str = str.trim();\n+                        if(str.isEmpty()) continue;\n+                        if(url == null) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No page URL has been found yet for \" + str);\n+                        }\n+                        try {\n+                            Subtype subtype = Subtype.valueOf(str);\n+                            newMap.put(subtype, url);\n+                            subtypeLast = n;\n+                            hadSubtype = true;\n+                        } catch(IllegalArgumentException iae) {\n+                            throw new IllegalArgumentException(\"Line \" + n + \": No subtype named '\"+str+\"'. See CheckCLDR.Subtype.\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if(started) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No END line after line \" + urlLast + \".\");\n+            } else if (!everStarted) {\n+                throw new IllegalArgumentException(\"line \" + n + \" - Error: No BEGIN line \");\n+            }\n+            if(urlCount>0 && !hadSubtype) { // had URLs, but did not end with a subtype\n+                throw new IllegalArgumentException(\"Error: Dangling URL \" + url.toString() + \" from line \" + urlLast + \" with no subtypes. Comment out that line.\");\n+            } else if(subtypeLast == 0) {\n+                System.err.println(\"SubtypeToURLMap: Warning: no subtypes specified or no BEGIN line detected.\");\n+            } else {\n+                System.out.println(\"SubtypeToURLMap: read \" + n + \" lines, \" + urlCount + \" urls and \" + newMap.size() + \" subtypes mapped.\");\n+            }\n+            this.map = Collections.unmodifiableMap(newMap);\n+            this.urlList = Collections.unmodifiableList(newList);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Line \" + n + \": Could not read subtypeMapping file\", e);\n+        }\n+    }\n+    public static final String COMMENT = \"#\";\n+    public static final String END_MARKER = \"-*- END CheckCLDR.Subtype Mapping -*-\";\n+    public static final String BEGIN_MARKER = \"-*- BEGIN CheckCLDR.Subtype Mapping -*-\";\n+\n+    /**\n+     * Dump a subtype map to stderr.\n+     * @return unhandled type count, or zero\n+     */\n+    public int dump() {\n+        int count = 0;\n+        for(final Subtype s : getHandledTypes()) {\n+            System.err.println(s + \" => \" + get(s));\n+        }\n+\n+        System.err.println(\"Not Handled:\");\n+        for(final Subtype s : getUnhandledTypes()) {\n+            count++;\n+            System.err.println(\"  \" + s.name()+\",\");\n+        }\n+        return count;\n+    }\n+\n+    /**\n+     * Write the URLMap to a file\n+     * @param pw\n+     * @throws IOException\n+     */\n+    public void write(PrintWriter pw) throws IOException {\n+        pw.println(COMMENT + \" \" + \"dumped by \" + getClass().getSimpleName());\n+        pw.println(COMMENT + \" \" + BEGIN_MARKER);\n+        for (final String url : getUrls()) {\n+            pw.println(url);\n+            for(final Subtype type : getSubtypesForUrl(url)) {\n+                pw.println(type.name()+\",\");\n+            }\n+            pw.println();\n+        }\n+        pw.println(COMMENT + \" \" + END_MARKER);\n+    }\n+\n+    /**\n+     * Get a list of the URLs, in original order\n+     * @return\n+     */\n+    public List<String> getUrls() {\n+        return urlList;\n+    }\n+    /**\n+     * get the subtypes that match a certain URL\n+     */\n+    public Set<Subtype> getSubtypesForUrl(final String url) {\n+        Set<Subtype> set = new TreeSet<>();\n+        map.forEach((Subtype t, String s) -> {\n+            if(s.equals(url)) set.add(t);\n+        });\n+        return set;\n+    }\n+\n+    /**\n+     * Get the URL with more information about a subtype.\n+     * @param subtype the subtype to fetch\n+     * @return url or null\n+     */\n+    public String get(Subtype subtype) {\n+        return map.get(subtype);\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getHandledTypes() {\n+        return Collections.unmodifiableSet(map.keySet());\n+    }\n+\n+    /**\n+     * Get the subtypes that ARE NOT handled by this map.\n+     * @return\n+     */\n+    public Collection<Subtype> getUnhandledTypes() {\n+        Set<Subtype> ts = createExpectedSubtypes();\n+        ts.removeAll(map.keySet());\n+        return Collections.unmodifiableSet(ts);\n+    }\n+\n+    /**\n+     * Create a set with the expected subtypes (minus 'none') in name order.\n+     * The set is mutable, with the expectation that the caller may use the set\n+     * for verification.\n+     * @return\n+     */\n+    static Set<Subtype> createExpectedSubtypes() {\n+        return Arrays.stream(Subtype.values())\n+        .filter(s -> !(s == Subtype.none)) // do not expect \"none\"\n+        .collect(Collectors.toCollection(\n+            () -> new TreeSet<>((Subtype s1, Subtype s2)->s1.name().compareTo(s2.name()))));\n+    }\n+\n+    /**\n+     * Get the subtypes that are expected to be handled by this map.\n+     * (i.e. minus Subtype.none)\n+     * @return\n+     */\n+    public static Collection<Subtype> getExpectedSubtypes() {\n+        return Collections.unmodifiableCollection(createExpectedSubtypes());\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final BufferedReader bufferedReader) {\n+        return new SubtypeToURLMap(bufferedReader);\n+    }\n+\n+    public static SubtypeToURLMap getInstance(final File fn) throws IOException, FileNotFoundException {\n+        try (InputStream fis = new FileInputStream(fn);\n+            InputStreamReader inputStreamReader = new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+            ) {\n+            return SubtypeToURLMap.getInstance(bufferedReader);\n+        }\n+    }\n+\n+    /**\n+     * Fetch from a URL.\n+     *\n+     * @param resource\n+     * @return\n+     * @throws IOException\n+     */\n+    public static SubtypeToURLMap getInstance(URL resource) throws IOException, URISyntaxException {\n+        if(resource.toString().endsWith(\".txt\")) {\n+            // plain text\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                Reader isr = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader br = new BufferedReader(isr);\n+                ) {\n+                return new SubtypeToURLMap(br);\n+            }\n+        } else if(resource.getProtocol().equals(\"http\") || resource.getProtocol().equals(\"https\")) {\n+\n+            Document doc = Jsoup.connect(resource.toString()).get();\n+            SubtypeToURLMap newMap = getInstance(resource, doc);\n+            try(PrintWriter pw = new PrintWriter(new File(\"/tmp/mymap.txt\"), \"UTF-8\")) { // TODO: in later Java, we can use StandardCharsets.UTF8\n+                newMap.write(pw);\n+            }\n+            return newMap;\n+        } else {\n+            // assume HTML to parse\n+            Class<?> classes[] = {InputStream.class};\n+            try (InputStream is  = (InputStream)resource.getContent(classes);\n+                ) {\n+                Document doc = Jsoup.parse(is, \"UTF-8\", resource.toString());\n+                return getInstance(resource, doc);\n+            }\n+        }\n+    }\n+\n+    private static SubtypeToURLMap getInstance(URL resource, Document doc) throws IOException {\n+        StringBuffer sb = new StringBuffer();\n+        doc.select(\"div code\").forEach(n ->\n+            n.textNodes()\n+                .forEach(tn -> sb.append(tn.text()).append('\\n')));\n+        System.err.println(\"Read \" + sb.length() + \" chars from \" + resource.toString());\n+        try (Reader sr = new StringReader(sb.toString());\n+            BufferedReader br = new BufferedReader(sr);) {\n+            return new SubtypeToURLMap(br);\n+        }\n+    }\n+    static final String DEFAULT_URL = /*CLDRConfig.getInstance().getProperty(\"CLDR_SUBTYPE_URL\", */\n+        \"https://sites.google.com/site/cldr/development/subtypes\" /* ) */;\n+\n+    private static String CACHE_SUBTYPE_FILE = \"urlmap-cache.txt\";\n+\n+    private final static class SubtypeToURLMapHelper {\n+        static File cacheFile = new File(CLDRConfig.getInstance().get(\"CLDRHOME\"), CACHE_SUBTYPE_FILE);\n+        static SubtypeToURLMap INSTANCE = make(); // not final, may be reloaded.\n+        static SubtypeToURLMap make() {\n+            SubtypeToURLMap map = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwMTg1Mw=="}, "originalCommit": {"oid": "c3017e41ed1e2a44dec0e0b32521c6afcdb05343"}, "originalPosition": 335}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 308, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}