{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTgwMzMz", "number": 291, "title": "CLDR-13488 add unit conversions", "bodyText": "Checklist\n\n Issue filed: https://unicode-org.atlassian.net/browse/CLDR-13488\n Updated PR title and link in previous line to include Issue number\n\nRough draft at this point.", "createdAt": "2020-01-09T14:13:33Z", "url": "https://github.com/unicode-org/cldr/pull/291", "merged": true, "mergeCommit": {"oid": "4887892a46c356f538a723decf44877fb4841d99"}, "closed": true, "closedAt": "2020-02-10T19:03:54Z", "author": {"login": "macchiati"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4_1H-ABqjI5Mzg3ODczMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDAq_qgFqTM1NjEyODk5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "202a9af81bb3dc0804b6845db48d26ee1b70f544", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/202a9af81bb3dc0804b6845db48d26ee1b70f544", "committedDate": "2020-01-09T14:11:52Z", "message": "CLDR-13488 rough draft"}, "afterCommit": {"oid": "96e135148e57ed44ce04bd745b7eae04cf9e8a03", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/96e135148e57ed44ce04bd745b7eae04cf9e8a03", "committedDate": "2020-01-10T14:56:42Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzYxMTU5", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-348361159", "createdAt": "2020-01-26T06:38:27Z", "commit": {"oid": "710c3d2ba0619b49cfa7b0dcc254434715c7fcbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjozODoyN1rOFhypBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjozODoyN1rOFhypBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NzAzMQ==", "bodyText": "I think this factor/offset may be incorrect. If Fahrenheit is 0 then if I've understood correctly the result will be (0 * 5 / 9) - (-2618.35 / 9) ~= 291 when the correct result is ~= 255.3.", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r370977031", "createdAt": "2020-01-26T06:38:27Z", "author": {"login": "kipcole9"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -60,10 +102,10 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t<convertUnit source='pound' target='kilogram' factor='lb2kg'/>\n \t\t<convertUnit source='stone' target='kilogram' factor='lb2kg*14'/>\n \t\t<convertUnit source='ton' target='kilogram' factor='lb2kg*2000'/>\n-\t\t<convertUnit source='horsepower' target='square-meter-kilogram-per-cubic-second' factor='ft2m * lb2kg * gravity * 550'/>\n+\t\t<convertUnit source='horsepower' target='kilogram-square-meter-per-cubic-second' factor='ft2m * lb2kg * gravity * 550'/>\n \t\t<convertUnit source='inch-hg' target='kilogram-per-meter-square-second' factor='3386.389'/>\n \t\t<convertUnit source='knot' target='meter-per-second' factor='1852/3600'/>\n-\t\t<convertUnit source='fahrenheit' target='celsius' factor='5/9' offset='-160/9'/>\n+\t\t<convertUnit source='fahrenheit' target='kelvin' factor='5/9' offset='-2618.35/9'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "710c3d2ba0619b49cfa7b0dcc254434715c7fcbf"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzYyMDcx", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-348362071", "createdAt": "2020-01-26T07:08:32Z", "commit": {"oid": "6c4548ac6f6dbfd5b1d43752ec47eb1fd6747fed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNzowODozMlrOFhytmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNzowODozMlrOFhytmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3ODIwMQ==", "bodyText": "I think the factor for minute to seconds should be 60, not 3600", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r370978201", "createdAt": "2020-01-26T07:08:32Z", "author": {"login": "kipcole9"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -8,11 +8,89 @@ For terms of use, see http://www.unicode.org/copyright.html\n \n <supplementalData>\n \t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"f2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\"/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231/16\"/> <!-- cup = 1/16 gal = 231/16 in3 = 231 / 16 * 12 * 12 * 12-->\n+\t</unitConstants>\n \t<convertUnits>\n-\t\t<convertUnit source='kilometer' target='meter' factor='1000'/>\n-\t\t<convertUnit source='inch' target='foot' factor='1/12'/>\n-\t\t<convertUnit source='kelvin' target='celsius' factor='1' offset='273.15'/>\n-\t\t<convertUnit source='mile-per-gallon' target='liter-per-kilometer' factor='2.3521' reciprocal='TRUE'/>\n+\t\t<convertUnit source='atmosphere' target='kilogram-per-meter-square-second' factor='101325'/>\n+\t\t<convertUnit source='one' target='1' factor='1'/>\n+\t\t<convertUnit source='byte' target='bit' factor='8'/>\n+\t\t<convertUnit source='day' target='second' factor='86400'/>\n+\t\t<convertUnit source='day-person' target='second' factor='86400'/>\n+\t\t<convertUnit source='hour' target='second' factor='3600'/>\n+\t\t<convertUnit source='minute' target='second' factor='3600'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4548ac6f6dbfd5b1d43752ec47eb1fd6747fed"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NDYxMDUx", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-348461051", "createdAt": "2020-01-27T06:41:14Z", "commit": {"oid": "b840e1019ca7577600fcf6c8808742639d5b1420"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjo0MToxNVrOFh4_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjo0ODo1M1rOFh5EfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MTAyNg==", "bodyText": "Duplicate quantity", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r371081026", "createdAt": "2020-01-27T06:41:15Z", "author": {"login": "sffc"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,174 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\" status='approximate'/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231*ft2m*ft2m*ft2m/16*12*12*12\"/>\n+\t\t<unitConstant constant=\"G\" value=\"6.67408E-11\"/>   <!-- https://arxiv.org/abs/1510.07674 -->\n+\t</unitConstants>\n+\t<unitQuantities>\n+\t\t<unitQuantity quantity='time' baseUnit='second'/>\n+\t\t<unitQuantity quantity='length' baseUnit='meter'/>\n+\t\t<unitQuantity quantity='mass' baseUnit='kilogram'/>\n+\t\t<unitQuantity quantity='electric-current' baseUnit='ampere'/>\n+\t\t<unitQuantity quantity='temperature' baseUnit='kelvin'/>\n+\t\t<unitQuantity quantity='substance-amount' baseUnit='mole'/>\n+\t\t<unitQuantity quantity='luminous-intensity' baseUnit='candela'/>\n+\t\t<unitQuantity quantity='frequency' baseUnit='per-second'/>\n+\t\t<unitQuantity quantity='angle' baseUnit='meter-per-meter'/>\n+\t\t<unitQuantity quantity='solid-angle' baseUnit='square-meter-per-square-meter'/>\n+\t\t<unitQuantity quantity='force' baseUnit='kilogram-meter-per-square-second'/>\n+\t\t<unitQuantity quantity='pressure' baseUnit='kilogram-per-meter-square-second'/>\n+\t\t<unitQuantity quantity='energy' baseUnit='kilogram-square-meter-per-square-second'/>\n+\t\t<unitQuantity quantity='power' baseUnit='kilogram-square-meter-per-cubic-second'/>\n+\t\t<unitQuantity quantity='electric-charge' baseUnit='second-ampere'/>\n+\t\t<unitQuantity quantity='voltage' baseUnit='kilogram-square-meter-per-cubic-second-ampere'/>\n+\t\t<unitQuantity quantity='electric-capacitance' baseUnit='pow4-second-square-ampere-per-kilogram-square-meter'/>\n+\t\t<unitQuantity quantity='electric-resistance' baseUnit='kilogram-square-meter-per-cubic-second-square-ampere'/>\n+\t\t<unitQuantity quantity='electric-conductance' baseUnit='cubic-second-square-ampere-per-kilogram-square-meter'/>\n+\t\t<unitQuantity quantity='magnetic-flux' baseUnit='kilogram-square-meter-per-square-second-ampere'/>\n+\t\t<unitQuantity quantity='magnetic-induction' baseUnit='kilogram-per-square-second-ampere'/>\n+\t\t<unitQuantity quantity='electric-inductance' baseUnit='kilogram-square-meter-per-square-second-square-ampere'/>\n+\t\t<unitQuantity quantity='luminous-flux' baseUnit='candela-square-meter-per-square-meter'/>\n+\t\t<unitQuantity quantity='dose' baseUnit='square-meter-per-square-second'/>\n+\t\t<unitQuantity quantity='catalytic-activity' baseUnit='mole-per-second'/>\n+\t\t<unitQuantity quantity='area' baseUnit='square-meter'/>\n+\t\t<unitQuantity quantity='volume' baseUnit='cubic-meter'/>\n+\t\t<unitQuantity quantity='speed' baseUnit='meter-per-second'/>\n+\t\t<unitQuantity quantity='acceleration' baseUnit='meter-per-square-second'/>\n+\t\t<unitQuantity quantity='wave-number' baseUnit='per-meter'/>\n+\t\t<unitQuantity quantity='mass-density' baseUnit='kilogram-per-cubic-meter'/>\n+\t\t<unitQuantity quantity='specific-volume' baseUnit='cubic-meter-per-kilogram'/>\n+\t\t<unitQuantity quantity='current-density' baseUnit='ampere-per-square-meter'/>\n+\t\t<unitQuantity quantity='magnetic-field-strength' baseUnit='ampere-per-meter'/>\n+\t\t<unitQuantity quantity='concentration' baseUnit='mole-per-cubic-meter'/>\n+\t\t<unitQuantity quantity='luminance' baseUnit='candela-per-square-meter'/>\n+\t\t<unitQuantity quantity='mass-fraction' baseUnit='kilogram-per-kilogram'/>\n+\t\t<!-- additional units -->\n+\t\t<unitQuantity quantity='torque' baseUnit='kilogram-meter-per-meter-square-second'/>\n+\t\t<unitQuantity quantity='year-duration' baseUnit='year'/>\n+\t\t<unitQuantity quantity='angle' baseUnit='circle'/>\n+\t\t<unitQuantity quantity='consumption' baseUnit='cubic-meter-per-meter'/>\n+\t\t<unitQuantity quantity='consumption-inverse' baseUnit='meter-per-cubic-meter'/>\t\t\n+\t\t<unitQuantity quantity='digital' baseUnit='bit'/>\t\t\n+\t\t<unitQuantity quantity='graphics' baseUnit='pixel'/>\t\t\n+\t\t<unitQuantity quantity='digital' baseUnit='cycle-per-second'/>\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b840e1019ca7577600fcf6c8808742639d5b1420"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MjA3Nw==", "bodyText": "\"pow\"?", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r371082077", "createdAt": "2020-01-27T06:47:12Z", "author": {"login": "sffc"}, "path": "tools/java/org/unicode/cldr/util/UnitConverter.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package org.unicode.cldr.util;\n+\n+import java.math.MathContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.util.Rational.RationalParser;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.TreeMultimap;\n+import com.ibm.icu.util.Freezable;\n+import com.ibm.icu.util.Output;\n+\n+public class UnitConverter implements Freezable<UnitConverter> {\n+\n+    static final Splitter BAR_SPLITTER = Splitter.on('-');\n+\n+    final RationalParser rationalParser;\n+\n+    Map<String, Map<String,UnitInfo>> sourceToTargetToInfo = new TreeMap<>();\n+    Map<String, String> toBaseUnit = new TreeMap<>();\n+    Set<String> baseUnits;\n+    Multimap<String, Continuation> continuations = TreeMultimap.create();\n+\n+    private boolean frozen = false;\n+\n+    @Override\n+    public boolean isFrozen() {\n+        return frozen;\n+    }\n+\n+    @Override\n+    public UnitConverter freeze() {\n+        frozen = true;\n+        rationalParser.freeze();\n+        sourceToTargetToInfo = ImmutableMap.copyOf(sourceToTargetToInfo);\n+        toBaseUnit = ImmutableMap.copyOf(toBaseUnit);\n+        baseUnits = ImmutableSet.<String>builder()\n+            .addAll(BASE_UNITS)\n+            .addAll(toBaseUnit.values())\n+            .build();\n+        continuations = ImmutableMultimap.copyOf(continuations);\n+        return this;\n+    }\n+\n+    @Override\n+    public UnitConverter cloneAsThawed() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+\n+    public static final class UnitInfo {\n+        public final Rational factor;\n+        public final Rational offset;\n+        public final boolean reciprocal;\n+\n+        static final UnitInfo IDENTITY = new UnitInfo(Rational.ONE, Rational.ZERO, false);\n+\n+        public UnitInfo(Rational factor, Rational offset, boolean reciprocal) {\n+            this.factor = factor;\n+            this.offset = offset;\n+            this.reciprocal = reciprocal;\n+        }\n+\n+        /** For now, just convert with doubles */\n+        public Rational convert(Rational source) {\n+            if (reciprocal) {\n+                source = source.reciprocal();\n+            }\n+            return source.multiply(factor).add(offset);\n+        }\n+\n+        public UnitInfo invert() {\n+            Rational factor2 = factor.reciprocal();\n+            Rational offset2 = offset.equals(Rational.ZERO) ? Rational.ZERO : offset.divide(factor).negate();\n+            return new UnitInfo(factor2, offset2, reciprocal);\n+            // TODO fix reciprocal\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return factor \n+                + (reciprocal ? \" / x\" : \" * x\") \n+                + (offset.equals(Rational.ZERO) ? \"\" : \n+                    (offset.compareTo(Rational.ZERO) < 0 ? \" - \" : \" - \")\n+                    + offset.abs());\n+        }\n+\n+        public String toDecimal() {\n+            return factor.toBigDecimal(MathContext.DECIMAL64) \n+                + (reciprocal ? \" / x\" : \" * x\") \n+                + (offset.equals(Rational.ZERO) ? \"\" : \n+                    (offset.compareTo(Rational.ZERO) < 0 ? \" - \" : \" - \")\n+                    + offset.toBigDecimal(MathContext.DECIMAL64).abs());\n+        }\n+    }\n+\n+    static class Continuation implements Comparable<Continuation> {\n+        public final List<String> remainder;\n+        public final String result;\n+\n+        public static void addIfNeeded(String source, Multimap<String, Continuation> data) {\n+            List<String> sourceParts = BAR_SPLITTER.splitToList(source);\n+            if (sourceParts.size() > 1) {\n+                Continuation continuation = new Continuation(ImmutableList.copyOf(sourceParts.subList(1, sourceParts.size())), source);\n+                data.put(sourceParts.get(0), continuation);\n+            }\n+        }\n+        private Continuation(List<String> remainder, String source) {\n+            this.remainder = remainder;\n+            this.result = source;\n+        }\n+        /**\n+         * The ordering is designed to have longest continuation first so that matching works.\n+         * Otherwise the ordering doesn't matter, so we just use the result.\n+         */\n+        @Override\n+        public int compareTo(Continuation other) {\n+            int diff = other.remainder.size() - remainder.size();\n+            if (diff < 0) {\n+                return diff;\n+            }\n+            return result.compareTo(other.result);\n+        }\n+\n+        public boolean match(List<String> parts, final int startIndex) {\n+            if (remainder.size() > parts.size() - startIndex) {\n+                return false;\n+            }\n+            int i = startIndex;\n+            for (String unitPart : remainder) {\n+                if (!unitPart.equals(parts.get(i++))) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return remainder + \" \ud83e\udca3 \" + result;\n+        }\n+\n+        public static Iterable<String> split(String derivedUnit, Multimap<String, Continuation> continuations) {\n+            return new UnitIterator(derivedUnit, continuations);\n+        }\n+\n+        public static class UnitIterator implements Iterable<String>, Iterator<String> {\n+            final List<String> parts;\n+            final Multimap<String, Continuation> continuations;\n+            int nextIndex = 0;\n+\n+            public UnitIterator(String derivedUnit, Multimap<String, Continuation> continuations) {\n+                parts = BAR_SPLITTER.splitToList(derivedUnit);\n+                this.continuations = continuations;\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                return nextIndex < parts.size();\n+            }\n+\n+            @Override\n+            public String next() {\n+                String result = parts.get(nextIndex++);\n+                Collection<Continuation> continuationOptions = continuations.get(result);\n+                for (Continuation option : continuationOptions) {\n+                    if (option.match(parts, nextIndex)) {\n+                        nextIndex += option.remainder.size();\n+                        return option.result;\n+                    }\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public Iterator<String> iterator() {\n+                return this;\n+            }\n+\n+        }\n+    }\n+\n+    public UnitConverter(RationalParser rationalParser) {\n+        this.rationalParser = rationalParser;\n+    }\n+\n+    public void addRaw(String source, String target, String factor, String offset, String reciprocal) {\n+        UnitInfo info = new UnitInfo(\n+            factor == null ? Rational.ONE : rationalParser.parse(factor), \n+                offset == null ? Rational.ZERO : rationalParser.parse(offset), \n+                    reciprocal == null ? false : reciprocal.equalsIgnoreCase(\"true\") ? true : false);\n+\n+        addToSourceToTarget(source, target, info);\n+        addToSourceToTarget(target, source, info.invert());\n+        toBaseUnit.put(source, target);\n+        Continuation.addIfNeeded(source, continuations);\n+    }\n+\n+    private void addToSourceToTarget(String source, String target, UnitInfo info) {\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(source);\n+        if (targetToInfo == null) {\n+            sourceToTargetToInfo.put(source, targetToInfo = new TreeMap<>());\n+        }\n+        if (targetToInfo.containsKey(target)) {\n+            throw new IllegalArgumentException(\"Duplicate source/target: \" + source + \", \" + target);\n+        }\n+        targetToInfo.put(target, info);\n+    }\n+\n+    public Set<String> canConvertBetween(String unit) {\n+        Set<String> result = new TreeSet<>();\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(unit);\n+        if (targetToInfo == null) {\n+            return Collections.emptySet();\n+        }\n+        result.addAll(targetToInfo.keySet());\n+        for (String pivot : targetToInfo.keySet()) {\n+            Map<String, UnitInfo> pivotToInfo = sourceToTargetToInfo.get(pivot);\n+            result.addAll(pivotToInfo.keySet());\n+        }\n+        return result;\n+    }\n+\n+    public Set<String> canConvert() {\n+        return sourceToTargetToInfo.keySet();\n+    }\n+\n+    public Map<String, String> simpleToBaseUnits() {\n+        return toBaseUnit;\n+    }\n+\n+\n+    public Rational convert(Rational source, String sourceUnit, String targetUnit) {\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(sourceUnit);\n+        if (targetToInfo == null) {\n+            return Rational.NaN;\n+        }\n+        UnitInfo info = targetToInfo.get(targetUnit); \n+        if (info != null) {\n+            return info.convert(source);\n+        }\n+        // try pivot\n+        Map<String, UnitInfo> sourceToInfo = sourceToTargetToInfo.get(targetUnit);\n+        if (sourceToInfo == null) {\n+            return Rational.NaN;\n+        }\n+        HashSet<String> pivots = new HashSet<>(targetToInfo.keySet());\n+        pivots.retainAll(sourceToInfo.keySet());\n+        if (pivots.isEmpty()) {\n+            return Rational.NaN;\n+        }\n+        String pivot = pivots.iterator().next();\n+        info = targetToInfo.get(pivot);\n+        Rational temp = info.convert(source);\n+\n+        Map<String, UnitInfo> pivotToInfo = sourceToTargetToInfo.get(pivot);\n+        UnitInfo info2 = pivotToInfo.get(targetUnit);\n+        return info2.convert(temp);\n+    }\n+\n+    // TODO fix to guarantee single mapping\n+\n+    public UnitInfo getUnitInfo(String sourceUnit, Output<String> baseUnit) {\n+        if (isBaseUnit(sourceUnit)) {\n+            return null;\n+        }\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(sourceUnit);\n+        if (targetToInfo == null) {\n+            return null;\n+        }\n+        Entry<String, UnitInfo> data = targetToInfo.entrySet().iterator().next();\n+        baseUnit.value = data.getKey();\n+        return data.getValue();\n+    }\n+\n+    static final ImmutableMap<String, String> FIX_DENORMALIZED = ImmutableMap.of(\n+        \"meter-per-second-squared\", \"meter-per-square-second\",\n+        \"liter-per-100kilometers\", \"liter-per-100-kilometer\",\n+        \"pound-foot\", \"pound-force-foot\",\n+        \"pound-per-square-inch\", \"pound-force-per-square-inch\");\n+\n+    /**\n+     * Takes a derived unit id, and produces the equivalent derived base unit id and UnitInfo to convert to it\n+     * @author markdavis\n+     *\n+     */\n+    public UnitInfo parseUnitId (String derivedUnit, Output<String> metricUnit) {\n+        metricUnit.value = null;\n+\n+        if (derivedUnit.equals(\"liter-per-100kilometers\")) {\n+            int debug = 0;\n+        }\n+        UnitId outputUnit = new UnitId();\n+        Rational numerator = Rational.ONE;\n+        Rational denominator = Rational.ONE;\n+        boolean inNumerator = true;\n+        int power = 1;\n+\n+        Output<Rational> deprefix = new Output<>();\n+\n+        String fixed = FIX_DENORMALIZED.get(derivedUnit);\n+        if (fixed != null) {\n+            derivedUnit = fixed;\n+        }\n+\n+        for (String unit : Continuation.split(derivedUnit, continuations)) {\n+\n+            if (unit.equals(\"square\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                power = 2;\n+            } else if (unit.equals(\"cubic\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                power = 3;\n+            } else if (unit.startsWith(\"pow\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b840e1019ca7577600fcf6c8808742639d5b1420"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MjM2NQ==", "bodyText": "We still need to discuss putting rationals into the unit identifier", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r371082365", "createdAt": "2020-01-27T06:48:53Z", "author": {"login": "sffc"}, "path": "tools/java/org/unicode/cldr/util/UnitConverter.java", "diffHunk": "@@ -0,0 +1,553 @@\n+package org.unicode.cldr.util;\n+\n+import java.math.MathContext;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.unicode.cldr.util.Rational.RationalParser;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.TreeMultimap;\n+import com.ibm.icu.util.Freezable;\n+import com.ibm.icu.util.Output;\n+\n+public class UnitConverter implements Freezable<UnitConverter> {\n+\n+    static final Splitter BAR_SPLITTER = Splitter.on('-');\n+\n+    final RationalParser rationalParser;\n+\n+    Map<String, Map<String,UnitInfo>> sourceToTargetToInfo = new TreeMap<>();\n+    Map<String, String> toBaseUnit = new TreeMap<>();\n+    Set<String> baseUnits;\n+    Multimap<String, Continuation> continuations = TreeMultimap.create();\n+\n+    private boolean frozen = false;\n+\n+    @Override\n+    public boolean isFrozen() {\n+        return frozen;\n+    }\n+\n+    @Override\n+    public UnitConverter freeze() {\n+        frozen = true;\n+        rationalParser.freeze();\n+        sourceToTargetToInfo = ImmutableMap.copyOf(sourceToTargetToInfo);\n+        toBaseUnit = ImmutableMap.copyOf(toBaseUnit);\n+        baseUnits = ImmutableSet.<String>builder()\n+            .addAll(BASE_UNITS)\n+            .addAll(toBaseUnit.values())\n+            .build();\n+        continuations = ImmutableMultimap.copyOf(continuations);\n+        return this;\n+    }\n+\n+    @Override\n+    public UnitConverter cloneAsThawed() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+\n+    public static final class UnitInfo {\n+        public final Rational factor;\n+        public final Rational offset;\n+        public final boolean reciprocal;\n+\n+        static final UnitInfo IDENTITY = new UnitInfo(Rational.ONE, Rational.ZERO, false);\n+\n+        public UnitInfo(Rational factor, Rational offset, boolean reciprocal) {\n+            this.factor = factor;\n+            this.offset = offset;\n+            this.reciprocal = reciprocal;\n+        }\n+\n+        /** For now, just convert with doubles */\n+        public Rational convert(Rational source) {\n+            if (reciprocal) {\n+                source = source.reciprocal();\n+            }\n+            return source.multiply(factor).add(offset);\n+        }\n+\n+        public UnitInfo invert() {\n+            Rational factor2 = factor.reciprocal();\n+            Rational offset2 = offset.equals(Rational.ZERO) ? Rational.ZERO : offset.divide(factor).negate();\n+            return new UnitInfo(factor2, offset2, reciprocal);\n+            // TODO fix reciprocal\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return factor \n+                + (reciprocal ? \" / x\" : \" * x\") \n+                + (offset.equals(Rational.ZERO) ? \"\" : \n+                    (offset.compareTo(Rational.ZERO) < 0 ? \" - \" : \" - \")\n+                    + offset.abs());\n+        }\n+\n+        public String toDecimal() {\n+            return factor.toBigDecimal(MathContext.DECIMAL64) \n+                + (reciprocal ? \" / x\" : \" * x\") \n+                + (offset.equals(Rational.ZERO) ? \"\" : \n+                    (offset.compareTo(Rational.ZERO) < 0 ? \" - \" : \" - \")\n+                    + offset.toBigDecimal(MathContext.DECIMAL64).abs());\n+        }\n+    }\n+\n+    static class Continuation implements Comparable<Continuation> {\n+        public final List<String> remainder;\n+        public final String result;\n+\n+        public static void addIfNeeded(String source, Multimap<String, Continuation> data) {\n+            List<String> sourceParts = BAR_SPLITTER.splitToList(source);\n+            if (sourceParts.size() > 1) {\n+                Continuation continuation = new Continuation(ImmutableList.copyOf(sourceParts.subList(1, sourceParts.size())), source);\n+                data.put(sourceParts.get(0), continuation);\n+            }\n+        }\n+        private Continuation(List<String> remainder, String source) {\n+            this.remainder = remainder;\n+            this.result = source;\n+        }\n+        /**\n+         * The ordering is designed to have longest continuation first so that matching works.\n+         * Otherwise the ordering doesn't matter, so we just use the result.\n+         */\n+        @Override\n+        public int compareTo(Continuation other) {\n+            int diff = other.remainder.size() - remainder.size();\n+            if (diff < 0) {\n+                return diff;\n+            }\n+            return result.compareTo(other.result);\n+        }\n+\n+        public boolean match(List<String> parts, final int startIndex) {\n+            if (remainder.size() > parts.size() - startIndex) {\n+                return false;\n+            }\n+            int i = startIndex;\n+            for (String unitPart : remainder) {\n+                if (!unitPart.equals(parts.get(i++))) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return remainder + \" \ud83e\udca3 \" + result;\n+        }\n+\n+        public static Iterable<String> split(String derivedUnit, Multimap<String, Continuation> continuations) {\n+            return new UnitIterator(derivedUnit, continuations);\n+        }\n+\n+        public static class UnitIterator implements Iterable<String>, Iterator<String> {\n+            final List<String> parts;\n+            final Multimap<String, Continuation> continuations;\n+            int nextIndex = 0;\n+\n+            public UnitIterator(String derivedUnit, Multimap<String, Continuation> continuations) {\n+                parts = BAR_SPLITTER.splitToList(derivedUnit);\n+                this.continuations = continuations;\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                return nextIndex < parts.size();\n+            }\n+\n+            @Override\n+            public String next() {\n+                String result = parts.get(nextIndex++);\n+                Collection<Continuation> continuationOptions = continuations.get(result);\n+                for (Continuation option : continuationOptions) {\n+                    if (option.match(parts, nextIndex)) {\n+                        nextIndex += option.remainder.size();\n+                        return option.result;\n+                    }\n+                }\n+                return result;\n+            }\n+\n+            @Override\n+            public Iterator<String> iterator() {\n+                return this;\n+            }\n+\n+        }\n+    }\n+\n+    public UnitConverter(RationalParser rationalParser) {\n+        this.rationalParser = rationalParser;\n+    }\n+\n+    public void addRaw(String source, String target, String factor, String offset, String reciprocal) {\n+        UnitInfo info = new UnitInfo(\n+            factor == null ? Rational.ONE : rationalParser.parse(factor), \n+                offset == null ? Rational.ZERO : rationalParser.parse(offset), \n+                    reciprocal == null ? false : reciprocal.equalsIgnoreCase(\"true\") ? true : false);\n+\n+        addToSourceToTarget(source, target, info);\n+        addToSourceToTarget(target, source, info.invert());\n+        toBaseUnit.put(source, target);\n+        Continuation.addIfNeeded(source, continuations);\n+    }\n+\n+    private void addToSourceToTarget(String source, String target, UnitInfo info) {\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(source);\n+        if (targetToInfo == null) {\n+            sourceToTargetToInfo.put(source, targetToInfo = new TreeMap<>());\n+        }\n+        if (targetToInfo.containsKey(target)) {\n+            throw new IllegalArgumentException(\"Duplicate source/target: \" + source + \", \" + target);\n+        }\n+        targetToInfo.put(target, info);\n+    }\n+\n+    public Set<String> canConvertBetween(String unit) {\n+        Set<String> result = new TreeSet<>();\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(unit);\n+        if (targetToInfo == null) {\n+            return Collections.emptySet();\n+        }\n+        result.addAll(targetToInfo.keySet());\n+        for (String pivot : targetToInfo.keySet()) {\n+            Map<String, UnitInfo> pivotToInfo = sourceToTargetToInfo.get(pivot);\n+            result.addAll(pivotToInfo.keySet());\n+        }\n+        return result;\n+    }\n+\n+    public Set<String> canConvert() {\n+        return sourceToTargetToInfo.keySet();\n+    }\n+\n+    public Map<String, String> simpleToBaseUnits() {\n+        return toBaseUnit;\n+    }\n+\n+\n+    public Rational convert(Rational source, String sourceUnit, String targetUnit) {\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(sourceUnit);\n+        if (targetToInfo == null) {\n+            return Rational.NaN;\n+        }\n+        UnitInfo info = targetToInfo.get(targetUnit); \n+        if (info != null) {\n+            return info.convert(source);\n+        }\n+        // try pivot\n+        Map<String, UnitInfo> sourceToInfo = sourceToTargetToInfo.get(targetUnit);\n+        if (sourceToInfo == null) {\n+            return Rational.NaN;\n+        }\n+        HashSet<String> pivots = new HashSet<>(targetToInfo.keySet());\n+        pivots.retainAll(sourceToInfo.keySet());\n+        if (pivots.isEmpty()) {\n+            return Rational.NaN;\n+        }\n+        String pivot = pivots.iterator().next();\n+        info = targetToInfo.get(pivot);\n+        Rational temp = info.convert(source);\n+\n+        Map<String, UnitInfo> pivotToInfo = sourceToTargetToInfo.get(pivot);\n+        UnitInfo info2 = pivotToInfo.get(targetUnit);\n+        return info2.convert(temp);\n+    }\n+\n+    // TODO fix to guarantee single mapping\n+\n+    public UnitInfo getUnitInfo(String sourceUnit, Output<String> baseUnit) {\n+        if (isBaseUnit(sourceUnit)) {\n+            return null;\n+        }\n+        Map<String, UnitInfo> targetToInfo = sourceToTargetToInfo.get(sourceUnit);\n+        if (targetToInfo == null) {\n+            return null;\n+        }\n+        Entry<String, UnitInfo> data = targetToInfo.entrySet().iterator().next();\n+        baseUnit.value = data.getKey();\n+        return data.getValue();\n+    }\n+\n+    static final ImmutableMap<String, String> FIX_DENORMALIZED = ImmutableMap.of(\n+        \"meter-per-second-squared\", \"meter-per-square-second\",\n+        \"liter-per-100kilometers\", \"liter-per-100-kilometer\",\n+        \"pound-foot\", \"pound-force-foot\",\n+        \"pound-per-square-inch\", \"pound-force-per-square-inch\");\n+\n+    /**\n+     * Takes a derived unit id, and produces the equivalent derived base unit id and UnitInfo to convert to it\n+     * @author markdavis\n+     *\n+     */\n+    public UnitInfo parseUnitId (String derivedUnit, Output<String> metricUnit) {\n+        metricUnit.value = null;\n+\n+        if (derivedUnit.equals(\"liter-per-100kilometers\")) {\n+            int debug = 0;\n+        }\n+        UnitId outputUnit = new UnitId();\n+        Rational numerator = Rational.ONE;\n+        Rational denominator = Rational.ONE;\n+        boolean inNumerator = true;\n+        int power = 1;\n+\n+        Output<Rational> deprefix = new Output<>();\n+\n+        String fixed = FIX_DENORMALIZED.get(derivedUnit);\n+        if (fixed != null) {\n+            derivedUnit = fixed;\n+        }\n+\n+        for (String unit : Continuation.split(derivedUnit, continuations)) {\n+\n+            if (unit.equals(\"square\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                power = 2;\n+            } else if (unit.equals(\"cubic\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                power = 3;\n+            } else if (unit.startsWith(\"pow\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                power = Integer.parseInt(unit.substring(3));\n+            } else if (unit.equals(\"per\")) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of per\");\n+                }\n+                inNumerator = false; // ignore multiples\n+            } else if ('9' >= unit.charAt(0)) {\n+                if (power != 1) {\n+                    throw new IllegalArgumentException(\"Can't have power of \" + unit);\n+                }\n+                Rational factor = Rational.of(Integer.parseInt(unit));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b840e1019ca7577600fcf6c8808742639d5b1420"}, "originalPosition": 346}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjI1OTE3", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-348625917", "createdAt": "2020-01-27T12:27:23Z", "commit": {"oid": "f590d63a071931cdb1a9d7d630d2386b1b7dcc43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoyNzoyM1rOFiBBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoyNzoyM1rOFiBBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIxMjc0Mw==", "bodyText": "May I suggest also adding the following since they exist directly in the CLDR locale files?\n    <convertUnit source='millimeter' target='meter' factor='1/1000'/>\n    <convertUnit source='kilometer' target='meter' factor='1000'/>", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r371212743", "createdAt": "2020-01-27T12:27:23Z", "author": {"login": "kipcole9"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -90,7 +92,22 @@ For terms of use, see http://www.unicode.org/copyright.html\n \t\t<convertUnit source='cup-metric' target='cubic-meter' factor='0.00025'/>\n \t\t<convertUnit source='liter' target='cubic-meter' factor='0.001'/>\n \t\t<convertUnit source='pint-metric' target='cubic-meter' factor='0.0005'/>\n-\t\t<convertUnit source='mile-per-gallon' target='liter-per-kilometer' factor='235.215' reciprocal='TRUE'/>\n-\t\t<convertUnit source='centimeter' target='meter' factor='1/100'/>\n+\t\t<convertUnit source='centimeter' target='meter' factor='1/100'/><convertUnit source='century' target='year' factor='100'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f590d63a071931cdb1a9d7d630d2386b1b7dcc43"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f43359c586b1780458e69380a90c8463551b49d", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/9f43359c586b1780458e69380a90c8463551b49d", "committedDate": "2020-01-30T21:58:35Z", "message": "CLDR-13488 change to use revolution instead of circle, cycle; reorder unitQualities to be source to target; add more tests"}, "afterCommit": {"oid": "1bb416eb98600ca0cdefc5c4e0596cf3f92925b1", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/1bb416eb98600ca0cdefc5c4e0596cf3f92925b1", "committedDate": "2020-01-30T22:02:31Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTI0Nzkw", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-351924790", "createdAt": "2020-02-02T07:55:12Z", "commit": {"oid": "1bb416eb98600ca0cdefc5c4e0596cf3f92925b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzo1NToxMlrOFkgkgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzo1NToxMlrOFkgkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNjY4OA==", "bodyText": "I believe the sign of the offset for celsius should by +. ie 273.15 to be consistent with the direction of the other offset in fahrenheit (that being the only other offset so far).  In any case, the signs for both fahrenheit and celsius offsets should be the same.", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r373826688", "createdAt": "2020-02-02T07:55:12Z", "author": {"login": "kipcole9"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,174 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\" status='approximate'/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231*ft2m*ft2m*ft2m/16*12*12*12\"/>\n+\t\t<unitConstant constant=\"G\" value=\"6.67408E-11\"/>   <!-- https://arxiv.org/abs/1510.07674 -->\n+\t</unitConstants>\n+\t<unitQuantities>\n+\t\t<!--  SI Base Units -->\n+\t\t<unitQuantity baseUnit='second' quantity='time'/>\n+        <unitQuantity baseUnit='meter' quantity='length'/>\n+        <unitQuantity baseUnit='kilogram' quantity='mass'/>\n+        <unitQuantity baseUnit='ampere' quantity='electric-current'/>\n+        <unitQuantity baseUnit='kelvin' quantity='temperature'/>\n+        <unitQuantity baseUnit='mole' quantity='substance-amount'/>\n+        <unitQuantity baseUnit='candela' quantity='luminous-intensity'/>\n+        \n+        <!--  SI Derived Units -->\n+        <unitQuantity baseUnit='revolution-per-second' quantity='frequency'/>\n+        <unitQuantity baseUnit='revolution' quantity='angle'/>\n+        <unitQuantity baseUnit='square-revolution' quantity='solid-angle'/>\n+        <unitQuantity baseUnit='kilogram-meter-per-square-second' quantity='force'/>\n+        <unitQuantity baseUnit='kilogram-per-meter-square-second' quantity='pressure'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second' quantity='energy'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second' quantity='power'/>\n+        <unitQuantity baseUnit='second-ampere' quantity='electric-charge'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-ampere' quantity='voltage'/>\n+        <unitQuantity baseUnit='pow4-second-square-ampere-per-kilogram-square-meter' quantity='electric-capacitance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-square-ampere' quantity='electric-resistance'/>\n+        <unitQuantity baseUnit='cubic-second-square-ampere-per-kilogram-square-meter' quantity='electric-conductance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-ampere' quantity='magnetic-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-square-second-ampere' quantity='magnetic-induction'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-square-ampere' quantity='electric-inductance'/>\n+        <unitQuantity baseUnit='square-meter-per-square-second' quantity='dose'/>\n+        <unitQuantity baseUnit='mole-per-second' quantity='catalytic-activity'/>\n+        <unitQuantity baseUnit='square-meter' quantity='area'/>\n+        <unitQuantity baseUnit='cubic-meter' quantity='volume'/>\n+        <unitQuantity baseUnit='meter-per-second' quantity='speed'/>\n+        <unitQuantity baseUnit='meter-per-square-second' quantity='acceleration'/>\n+        <unitQuantity baseUnit='per-meter' quantity='wave-number'/>\n+        <unitQuantity baseUnit='kilogram-per-cubic-meter' quantity='mass-density'/>\n+        <unitQuantity baseUnit='cubic-meter-per-kilogram' quantity='specific-volume'/>\n+        <unitQuantity baseUnit='ampere-per-square-meter' quantity='current-density'/>\n+        <unitQuantity baseUnit='ampere-per-meter' quantity='magnetic-field-strength'/>\n+        <unitQuantity baseUnit='mole-per-cubic-meter' quantity='concentration'/>\n+        <unitQuantity baseUnit='candela-per-square-meter' quantity='luminance'/>\n+        <unitQuantity baseUnit='candela-square-meter-per-square-meter' quantity='luminous-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-kilogram' quantity='mass-fraction'/>\n+        \n+        <!-- Additional units -->\n+        <unitQuantity baseUnit='kilogram-meter-per-meter-square-second' quantity='torque'/>\n+        <unitQuantity baseUnit='year' quantity='year-duration'/>\n+        <unitQuantity baseUnit='cubic-meter-per-meter' quantity='consumption'/>\n+        <unitQuantity baseUnit='meter-per-cubic-meter' quantity='consumption-inverse'/>\n+        <unitQuantity baseUnit='bit' quantity='digital'/>\n+        <unitQuantity baseUnit='pixel' quantity='graphics'/>\n+        <unitQuantity baseUnit='portion' quantity='portion'/>\n+        <unitQuantity baseUnit='pixel-per-meter' quantity='resolution'/>\n+\n+\t</unitQuantities>\t\n+\t\t<!-- Values where possible from NIST Special Publication 1038 \n+\t\thttps://www.govinfo.gov/content/pkg/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4/pdf/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4.pdf -->\n+\t<convertUnits>\n+\t\t<convertUnit source='atmosphere' target='kilogram-per-meter-square-second' factor='101325'/>\n+\t\t<convertUnit source='byte' target='bit' factor='8'/>\n+\t\t<convertUnit source='day' target='second' factor='86400'/>\n+\t\t<convertUnit source='day-person' target='second' factor='86400'/>\n+\t\t<convertUnit source='hour' target='second' factor='3600'/>\n+\t\t<convertUnit source='minute' target='second' factor='60'/>\n+\t\t<convertUnit source='week' target='second' factor='604800'/>\n+\t\t<convertUnit source='week-person' target='second' factor='604800'/>\n+\t\t<convertUnit source='ohm' target='kilogram-square-meter-per-cubic-second-square-ampere' factor='1'/>\n+\t\t<convertUnit source='volt' target='kilogram-square-meter-per-cubic-second-ampere' factor='1'/>\n+\t\t<convertUnit source='light-year' target='meter' factor='9460730000000000'/>\n+\t\t<convertUnit source='parsec' target='meter' factor='30856780000000000'/>\n+\t\t<convertUnit source='g-force' target='meter-per-square-second' factor='gravity'/>\n+\t\t<convertUnit source='degree' target='revolution' factor='1/360'/>\n+\t\t<convertUnit source='arc-minute' target='revolution' factor='1/360*60'/>\n+\t\t<convertUnit source='arc-second' target='revolution' factor='1/360*60*60'/>\n+\t\t<convertUnit source='radian' target='revolution' factor='1/2*PI'/>\n+\t\t<convertUnit source='mole' target='item' factor='6.02214076E+23'/>\n+\t\t<convertUnit source='percent' target='portion' factor='1/100'/>\n+\t\t<convertUnit source='permille' target='portion' factor='1/1000'/>\n+\t\t<convertUnit source='permyriad' target='portion' factor='1/10000'/>\n+\t\t<convertUnit source='calorie' target='kilogram-square-meter-per-square-second' factor='4.184'/>\n+\t\t<convertUnit source='electronvolt' target='kilogram-square-meter-per-square-second' factor='1.602177E-19'/>\n+\t\t<convertUnit source='foodcalorie' target='kilogram-square-meter-per-square-second' factor='4184'/>\n+\t\t<convertUnit source='hertz' target='revolution-per-second' factor='1'/>\n+\t\t<convertUnit source='astronomical-unit' target='meter' factor='149597900000'/>\n+\t\t<convertUnit source='acre' target='square-meter' factor='ft2m^2 * 43560'/>\n+\t\t<convertUnit source='therm-us' target='kilogram-square-meter-per-square-second' factor='105506000'/>\n+\t\t<convertUnit source='pound-force' target='kilogram-meter-per-square-second' factor='lb2kg * gravity'/>\n+\t\t<convertUnit source='fathom' target='meter' factor='ft2m * 6'/>\n+\t\t<convertUnit source='foot' target='meter' factor='ft2m'/>\n+\t\t<convertUnit source='furlong' target='meter' factor='ft2m*660'/>\n+\t\t<convertUnit source='inch' target='meter' factor='ft2m/12'/>\n+\t\t<convertUnit source='mile' target='meter' factor='ft2m*5280'/>\n+\t\t<convertUnit source='nautical-mile' target='meter' factor='1852'/>\n+\t\t<convertUnit source='yard' target='meter' factor='ft2m*3'/>\n+\t\t<convertUnit source='ounce' target='kilogram' factor='lb2kg/16'/>\n+\t\t<convertUnit source='ounce-troy' target='kilogram' factor='0.03110348'/>\n+\t\t<convertUnit source='pound' target='kilogram' factor='lb2kg'/>\n+\t\t<convertUnit source='stone' target='kilogram' factor='lb2kg*14'/>\n+\t\t<convertUnit source='ton' target='kilogram' factor='lb2kg*2000'/>\n+\t\t<convertUnit source='horsepower' target='kilogram-square-meter-per-cubic-second' factor='ft2m * lb2kg * gravity * 550'/>\n+\t\t<convertUnit source='inch-hg' target='kilogram-per-meter-square-second' factor='3386.389'/>\n+\t\t<convertUnit source='knot' target='meter-per-second' factor='1852/3600'/>\n+\t\t<convertUnit source='fahrenheit' target='kelvin' factor='5/9' offset='2298.35/9'/>\n+\t\t<convertUnit source='acre-foot' target='cubic-meter' factor='ft2m^3 * 43560'/>\n+\t\t<convertUnit source='barrel' target='cubic-meter' factor='cup2m3 * 672'/>\n+\t\t<convertUnit source='bushel' target='cubic-meter' factor='0.03523907'/>\n+\t\t<convertUnit source='cup' target='cubic-meter' factor='cup2m3'/>\n+\t\t<convertUnit source='fluid-ounce' target='cubic-meter' factor='cup2m3/8'/>\n+\t\t<convertUnit source='gallon' target='cubic-meter' factor='cup2m3*16'/>\n+\t\t<convertUnit source='tablespoon' target='cubic-meter' factor='cup2m3/16'/>\n+\t\t<convertUnit source='teaspoon' target='cubic-meter' factor='cup2m3/48'/>\n+\t\t<convertUnit source='karat' target='portion' factor='1/24'/>\n+\t\t<convertUnit source='pint' target='cubic-meter' factor='cup2m3 * 2'/>\n+\t\t<convertUnit source='quart' target='cubic-meter' factor='cup2m3 * 4'/>\n+\t\t<convertUnit source='fluid-ounce-imperial' target='cubic-meter' factor='0.00002841306'/>\n+\t\t<convertUnit source='gallon-imperial' target='cubic-meter' factor='0.00454609'/>\n+\t\t<convertUnit source='dunam' target='square-meter' factor='1000'/>\n+\t\t<convertUnit source='mile-scandinavian' target='meter' factor='10000'/>\n+\t\t<convertUnit source='hectare' target='square-meter' factor='10000'/>\n+\t\t<convertUnit source='joule' target='kilogram-square-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='newton' target='kilogram-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='carat' target='kilogram' factor='0.0002'/>\n+\t\t<convertUnit source='gram' target='kilogram' factor='0.001'/>\n+\t\t<convertUnit source='metric-ton' target='kilogram' factor='1000'/>\n+\t\t<convertUnit source='watt' target='kilogram-square-meter-per-cubic-second' factor='1'/>\n+\t\t<convertUnit source='bar' target='kilogram-per-meter-square-second' factor='100000'/>\n+\t\t<convertUnit source='pascal' target='kilogram-per-meter-square-second' factor='1'/>\n+\t\t<convertUnit source='celsius' target='kelvin' factor='1' offset='-273.15'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb416eb98600ca0cdefc5c4e0596cf3f92925b1"}, "originalPosition": 144}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee2e27a015ab5a5cf52bdaadc302b6b9b86dabd3", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/ee2e27a015ab5a5cf52bdaadc302b6b9b86dabd3", "committedDate": "2020-02-09T01:10:26Z", "message": "CLDR-13488 order the conversion lines by quantity then size; fix some incorrect values (acre, bushel, barrel); add systems attribute; add tests for order, systems; regenerate unitsTest.txt file"}, "afterCommit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/cb1253249298711af824a01bddd8059da2c971a1", "committedDate": "2020-02-09T01:56:31Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjI2NDI5", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-355626429", "createdAt": "2020-02-09T19:05:01Z", "commit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTowNTowMVrOFnWfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTowNTowMVrOFnWfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwNzIxMw==", "bodyText": "Using '2' to mean \"To\" here seems to invite confusion with 2 as an exponent, especially in constructs like \"cup2m3\" (what if we want square inches to square cm, is that in22cm2?); why not just spell out \"To\"?", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r376807213", "createdAt": "2020-02-09T19:05:01Z", "author": {"login": "pedberg-icu"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,247 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjI2NTc3", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-355626577", "createdAt": "2020-02-09T19:08:27Z", "commit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTowODoyOFrOFnWf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOTowODoyOFrOFnWf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwNzQwNw==", "bodyText": "There is a mix of spaces and tabs for indenting here, please fix", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r376807407", "createdAt": "2020-02-09T19:08:28Z", "author": {"login": "pedberg-icu"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,247 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\" status='approximate'/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231*ft2m*ft2m*ft2m/16*12*12*12\"/>\n+\t\t<unitConstant constant=\"G\" value=\"6.67408E-11\" status='approximate'/>   <!-- https://arxiv.org/pdf/1510.07674.pdf see 2014 CODATA -->\n+\t</unitConstants>\n+\t<unitQuantities> \n+\t\t<!-- NB: quantity ordering is used in canonical order of derived units. -->\n+\t\t<!--  SI Base Units -->\n+        <unitQuantity baseUnit='candela' quantity='luminous-intensity' status='simple'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjI2NzMz", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-355626733", "createdAt": "2020-02-09T19:11:36Z", "commit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOToxMTozNlrOFnWgxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOToxMTozNlrOFnWgxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwNzYyMQ==", "bodyText": "Shouldn't this have system=\"UK\"?", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r376807621", "createdAt": "2020-02-09T19:11:36Z", "author": {"login": "pedberg-icu"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,247 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\" status='approximate'/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231*ft2m*ft2m*ft2m/16*12*12*12\"/>\n+\t\t<unitConstant constant=\"G\" value=\"6.67408E-11\" status='approximate'/>   <!-- https://arxiv.org/pdf/1510.07674.pdf see 2014 CODATA -->\n+\t</unitConstants>\n+\t<unitQuantities> \n+\t\t<!-- NB: quantity ordering is used in canonical order of derived units. -->\n+\t\t<!--  SI Base Units -->\n+        <unitQuantity baseUnit='candela' quantity='luminous-intensity' status='simple'/>\n+        <unitQuantity baseUnit='kilogram' quantity='mass' status='simple'/>\n+        <unitQuantity baseUnit='meter' quantity='length' status='simple'/>\n+\t\t<unitQuantity baseUnit='second' quantity='time' status='simple'/>\n+        <unitQuantity baseUnit='year' quantity='year-duration' status='simple'/> <!-- non-SI but here for ordering -->\n+        <unitQuantity baseUnit='ampere' quantity='electric-current' status='simple'/>\n+        <unitQuantity baseUnit='kelvin' quantity='temperature' status='simple'/>\n+        \n+        <!-- Additional base units -->\n+        \n+        <unitQuantity baseUnit='revolution' quantity='angle' status='simple'/> <!-- = circle, cycle for base -->\n+        <unitQuantity baseUnit='item' quantity='substance-amount' status='simple'/> <!-- use instead of mole -->\n+        <unitQuantity baseUnit='portion' quantity='portion' status='simple'/>\n+        <unitQuantity baseUnit='bit' quantity='digital' status='simple'/>\n+        <unitQuantity baseUnit='pixel' quantity='graphics' status='simple'/>\n+        <unitQuantity baseUnit='em' quantity='typewidth' status='simple'/>\n+        \n+        <!--  SI Derived Units -->\n+        \n+        <unitQuantity baseUnit='revolution-per-second' quantity='frequency'/>\n+        <unitQuantity baseUnit='square-revolution' quantity='solid-angle'/>\n+        <unitQuantity baseUnit='kilogram-meter-per-square-second' quantity='force'/>\n+        <unitQuantity baseUnit='kilogram-per-meter-square-second' quantity='pressure'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second' quantity='energy'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second' quantity='power'/>\n+        <unitQuantity baseUnit='second-ampere' quantity='electric-charge'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-ampere' quantity='voltage'/>\n+        <unitQuantity baseUnit='pow4-second-square-ampere-per-kilogram-square-meter' quantity='electric-capacitance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-square-ampere' quantity='electric-resistance'/>\n+        <unitQuantity baseUnit='cubic-second-square-ampere-per-kilogram-square-meter' quantity='electric-conductance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-ampere' quantity='magnetic-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-square-second-ampere' quantity='magnetic-induction'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-square-ampere' quantity='electric-inductance'/>\n+        <unitQuantity baseUnit='square-meter-per-square-second' quantity='dose'/>\n+        <unitQuantity baseUnit='square-meter' quantity='area'/>\n+        <unitQuantity baseUnit='cubic-meter' quantity='volume'/>\n+        <unitQuantity baseUnit='meter-per-second' quantity='speed'/>\n+        <unitQuantity baseUnit='meter-per-square-second' quantity='acceleration'/>\n+        <unitQuantity baseUnit='revolution-per-meter' quantity='wave-number'/>\n+        <unitQuantity baseUnit='kilogram-per-cubic-meter' quantity='mass-density'/>\n+        <unitQuantity baseUnit='cubic-meter-per-kilogram' quantity='specific-volume'/>\n+        <unitQuantity baseUnit='ampere-per-square-meter' quantity='current-density'/>\n+        <unitQuantity baseUnit='ampere-per-meter' quantity='magnetic-field-strength'/>\n+        <unitQuantity baseUnit='item-per-cubic-meter' quantity='concentration'/>\n+        <unitQuantity baseUnit='candela-per-square-meter' quantity='luminance'/>\n+        <unitQuantity baseUnit='candela-square-meter-per-square-meter' quantity='luminous-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-kilogram' quantity='mass-fraction'/>\n+        \n+        <!-- Additional derived units -->\n+        <unitQuantity baseUnit='kilogram-meter-per-meter-square-second' quantity='torque'/>\n+        <unitQuantity baseUnit='cubic-meter-per-meter' quantity='consumption'/>\n+        <unitQuantity baseUnit='meter-per-cubic-meter' quantity='consumption-inverse'/>\n+        <unitQuantity baseUnit='pixel-per-meter' quantity='resolution'/>\n+\n+\t</unitQuantities>\t\n+\t<convertUnits>\n+\t\t<!-- TODO: double-check system=\"US..\"  -->\n+\t\t<!-- Values where possible from:\n+\t\ta) NIST Special Publication 1038 \n+\t\thttps://www.govinfo.gov/content/pkg/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4/pdf/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4.pdf\n+\t\tb) https://arxiv.org/pdf/1510.07674.pdf\n+\t\t -->\n+\n+\t\t<!-- luminous-intensity -->\n+\t\t<convertUnit source='candela' baseUnit='candela'/>\n+\t\t\n+\t\t<!-- mass -->\n+\t\t<convertUnit source='carat' baseUnit='kilogram' factor='0.0002'/>\n+\t\t<convertUnit source='gram' baseUnit='kilogram' factor='0.001'/>\n+\t\t<convertUnit source='ounce' baseUnit='kilogram' factor='lb2kg/16' systems=\"US UK\"/>\n+\t\t<convertUnit source='ounce-troy' baseUnit='kilogram' factor='0.03110348' systems=\"US UK\"/>\n+\t\t<convertUnit source='pound' baseUnit='kilogram' factor='lb2kg' systems=\"US UK\"/>\n+\t\t<convertUnit source='kilogram' baseUnit='kilogram'/>\n+\t\t<convertUnit source='stone' baseUnit='kilogram' factor='lb2kg*14' systems=\"UK\"/>\n+\t\t<convertUnit source='ton' baseUnit='kilogram' factor='lb2kg*2000' systems=\"US UK\"/>\n+\t\t<convertUnit source='metric-ton' baseUnit='kilogram' factor='1000'/>\n+\t\t<convertUnit source='earth-mass' baseUnit='kilogram' factor='5.9722E+24'/>\n+\t\t<convertUnit source='solar-mass' baseUnit='kilogram' factor='1.98847E+30'/>\n+\t\t\n+\t\t<!-- length -->\n+\t\t<convertUnit source='point' baseUnit='meter' factor='ft2m/864' systems=\"US UK\"/>\n+\t\t<convertUnit source='centimeter' baseUnit='meter' factor='1/100'/>\n+\t\t<convertUnit source='inch' baseUnit='meter' factor='ft2m/12' systems=\"US UK\"/>\n+\t\t<convertUnit source='foot' baseUnit='meter' factor='ft2m' systems=\"US UK\"/>\n+\t\t<convertUnit source='yard' baseUnit='meter' factor='ft2m*3' systems=\"US UK\"/>\n+\t\t<convertUnit source='meter' baseUnit='meter'/>\n+\t\t<convertUnit source='fathom' baseUnit='meter' factor='ft2m * 6' systems=\"US UK\"/>\n+\t\t<convertUnit source='furlong' baseUnit='meter' factor='ft2m*660' systems=\"US UK\"/>\n+\t\t<convertUnit source='mile' baseUnit='meter' factor='ft2m*5280' systems=\"US UK\"/>\n+\t\t<convertUnit source='nautical-mile' baseUnit='meter' factor='1852' systems=\"US UK\"/>\n+\t\t<convertUnit source='mile-scandinavian' baseUnit='meter' factor='10000'/>\n+\t\t<convertUnit source='100-kilometer' baseUnit='meter' factor='100000'/>\n+\t\t<convertUnit source='earth-radius' baseUnit='meter' factor='6.3781E6'/>\n+\t\t<convertUnit source='solar-radius' baseUnit='meter' factor='695700000'/>\n+\t\t<convertUnit source='astronomical-unit' baseUnit='meter' factor='149597900000'/>\n+\t\t<convertUnit source='light-year' baseUnit='meter' factor='9460730000000000'/>\n+\t\t<convertUnit source='parsec' baseUnit='meter' factor='30856780000000000'/>\n+\t\t\n+\t\t<!-- time -->\n+\t\t<convertUnit source='second' baseUnit='second'/>\n+\t\t<convertUnit source='minute' baseUnit='second' factor='60'/>\n+\t\t<convertUnit source='hour' baseUnit='second' factor='3600'/>\n+\t\t<convertUnit source='day' baseUnit='second' factor='86400'/>\n+\t\t<convertUnit source='day-person' baseUnit='second' factor='86400'/>\n+\t\t<convertUnit source='week' baseUnit='second' factor='604800'/>\n+\t\t<convertUnit source='week-person' baseUnit='second' factor='604800'/>\n+\t\t\n+\t\t<!-- year-duration -->\n+\t\t<convertUnit source='year' baseUnit='year'/>\n+\t\t<convertUnit source='year-person' baseUnit='year'/>\n+\t\t<convertUnit source='decade' baseUnit='year' factor='10'/>\n+\t\t<convertUnit source='month' baseUnit='year' factor='12'/>\n+\t\t<convertUnit source='month-person' baseUnit='year' factor='12'/>\n+\t\t<convertUnit source='century' baseUnit='year' factor='100'/>\n+\t\t\n+\t\t<!-- electric-current -->\n+\t\t<convertUnit source='ampere' baseUnit='ampere'/>\n+\t\t\n+\t\t<!-- temperature -->\n+\t\t<convertUnit source='fahrenheit' baseUnit='kelvin' factor='5/9' offset='2298.35/9' systems=\"US UK\"/>\n+\t\t<convertUnit source='celsius' baseUnit='kelvin' factor='1' offset='-273.15'/>\n+\t\t<convertUnit source='kelvin' baseUnit='kelvin'/>\n+\t\t\n+\t\t<!-- angle -->\n+\t\t<convertUnit source='arc-second' baseUnit='revolution' factor='1/360*60*60'/>\n+\t\t<convertUnit source='arc-minute' baseUnit='revolution' factor='1/360*60'/>\n+\t\t<convertUnit source='degree' baseUnit='revolution' factor='1/360'/>\n+\t\t<convertUnit source='radian' baseUnit='revolution' factor='1/2*PI'/>\n+\t\t<convertUnit source='revolution' baseUnit='revolution'/>\n+\t\t\n+\t\t<!-- substance-amount -->\n+\t\t<convertUnit source='item' baseUnit='item'/>\n+\t\t<convertUnit source='mole' baseUnit='item' factor='6.02214076E+23'/>\n+\t\t\n+\t\t<!-- portion -->\n+\t\t<convertUnit source='part-per-million' baseUnit='portion' factor='1/1000000'/>\n+\t\t<convertUnit source='permyriad' baseUnit='portion' factor='1/10000'/>\n+\t\t<convertUnit source='permille' baseUnit='portion' factor='1/1000'/>\n+\t\t<convertUnit source='percent' baseUnit='portion' factor='1/100'/>\n+\t\t<convertUnit source='karat' baseUnit='portion' factor='1/24'/>\n+\t\t<convertUnit source='portion' baseUnit='portion'/>\n+\t\t\n+\t\t<!-- digital -->\n+\t\t<convertUnit source='bit' baseUnit='bit'/>\n+\t\t<convertUnit source='byte' baseUnit='bit' factor='8'/>\n+\t\t\n+\t\t<!-- graphics -->\n+\t\t<convertUnit source='pixel' baseUnit='pixel'/>\n+\t\t<convertUnit source='dot' baseUnit='pixel' factor='100'/>\n+\t\t\n+\t\t<!-- typewidth -->\n+\t\t<convertUnit source='em' baseUnit='em'/>\n+\t\t\n+\t\t<!-- frequency -->\n+\t\t<convertUnit source='hertz' baseUnit='revolution-per-second' factor='1'/>\n+\t\t\n+\t\t<!-- force -->\n+\t\t<convertUnit source='newton' baseUnit='kilogram-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='pound-force' baseUnit='kilogram-meter-per-square-second' factor='lb2kg * gravity' systems=\"US UK\"/>\n+\t\t\n+\t\t<!-- pressure -->\n+\t\t<convertUnit source='pascal' baseUnit='kilogram-per-meter-square-second' factor='1'/>\n+\t\t<convertUnit source='millimeter-of-mercury' baseUnit='kilogram-per-meter-square-second' factor='10132500/760000'/>\n+\t\t<convertUnit source='inch-hg' baseUnit='kilogram-per-meter-square-second' factor='3386.389' systems=\"US UK\"/>\n+\t\t<convertUnit source='bar' baseUnit='kilogram-per-meter-square-second' factor='100000'/>\n+\t\t<convertUnit source='atmosphere' baseUnit='kilogram-per-meter-square-second' factor='101325'/>\n+\t\t\n+\t\t<!-- energy -->\n+\t\t<convertUnit source='electronvolt' baseUnit='kilogram-square-meter-per-square-second' factor='1.602177E-19'/>\n+\t\t<convertUnit source='dalton' baseUnit='kilogram-square-meter-per-square-second' factor='1.49241808560E-10'/>\n+\t\t<convertUnit source='joule' baseUnit='kilogram-square-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='calorie' baseUnit='kilogram-square-meter-per-square-second' factor='4.184'/>\n+\t\t<convertUnit source='british-thermal-unit' baseUnit='kilogram-square-meter-per-square-second' factor='1055.06' systems=\"US UK\"/>\n+\t\t<convertUnit source='foodcalorie' baseUnit='kilogram-square-meter-per-square-second' factor='4184' systems=\"US UK\"/>\n+\t\t<convertUnit source='therm-us' baseUnit='kilogram-square-meter-per-square-second' factor='105506000' systems=\"US\"/>\n+\t\t\n+\t\t<!-- power -->\n+\t\t<convertUnit source='watt' baseUnit='kilogram-square-meter-per-cubic-second' factor='1'/>\n+\t\t<convertUnit source='horsepower' baseUnit='kilogram-square-meter-per-cubic-second' factor='ft2m * lb2kg * gravity * 550' systems=\"US UK\"/>\n+\t\t<convertUnit source='solar-luminosity' baseUnit='kilogram-square-meter-per-cubic-second' factor='3.828E+26'/>\n+\t\t\n+\t\t<!-- voltage -->\n+\t\t<convertUnit source='volt' baseUnit='kilogram-square-meter-per-cubic-second-ampere' factor='1'/>\n+\t\t\n+\t\t<!-- electric-resistance -->\n+\t\t<convertUnit source='ohm' baseUnit='kilogram-square-meter-per-cubic-second-square-ampere' factor='1'/>\n+\t\t\n+\t\t<!-- area -->\n+\t\t<convertUnit source='dunam' baseUnit='square-meter' factor='1000'/>\n+\t\t<convertUnit source='acre' baseUnit='square-meter' factor='ft2m*ft2m * 43560' systems=\"US UK\"/>\n+\t\t<convertUnit source='hectare' baseUnit='square-meter' factor='10000'/>\n+\t\t\n+\t\t<!-- volume -->\n+\t\t<convertUnit source='teaspoon' baseUnit='cubic-meter' factor='cup2m3/48' systems=\"US UK\"/>\n+\t\t<convertUnit source='tablespoon' baseUnit='cubic-meter' factor='cup2m3/16' systems=\"US UK\"/>\n+\t\t<convertUnit source='fluid-ounce-imperial' baseUnit='cubic-meter' factor='0.00002841306'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjI2NzU1", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-355626755", "createdAt": "2020-02-09T19:12:04Z", "commit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOToxMjowNFrOFnWg5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxOToxMjowNFrOFnWg5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwNzY1NQ==", "bodyText": "And shouldn't this have ONLY system=\"US\"?", "url": "https://github.com/unicode-org/cldr/pull/291#discussion_r376807655", "createdAt": "2020-02-09T19:12:04Z", "author": {"login": "pedberg-icu"}, "path": "common/supplemental/units.xml", "diffHunk": "@@ -0,0 +1,247 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!DOCTYPE supplementalData SYSTEM \"../../common/dtd/ldmlSupplemental.dtd\">\n+<!--\n+Copyright \u00a9 1991-2013 Unicode, Inc.\n+CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n+For terms of use, see http://www.unicode.org/copyright.html\n+-->\n+\n+<supplementalData>\n+\t<version number=\"$Revision$\"/>\n+\t<unitConstants>\n+\t\t<unitConstant constant=\"ft2m\" value=\"0.3048\"/>\n+\t\t<unitConstant constant=\"lb2kg\" value=\"0.45359237\"/>\n+\t\t<unitConstant constant=\"gravity\" value=\"9.80665\"/>\n+\t\t<unitConstant constant=\"PI\" value=\"3.1415926535897932384626433832795\" status='approximate'/>\n+\t\t<unitConstant constant=\"cup2m3\" value=\"231*ft2m*ft2m*ft2m/16*12*12*12\"/>\n+\t\t<unitConstant constant=\"G\" value=\"6.67408E-11\" status='approximate'/>   <!-- https://arxiv.org/pdf/1510.07674.pdf see 2014 CODATA -->\n+\t</unitConstants>\n+\t<unitQuantities> \n+\t\t<!-- NB: quantity ordering is used in canonical order of derived units. -->\n+\t\t<!--  SI Base Units -->\n+        <unitQuantity baseUnit='candela' quantity='luminous-intensity' status='simple'/>\n+        <unitQuantity baseUnit='kilogram' quantity='mass' status='simple'/>\n+        <unitQuantity baseUnit='meter' quantity='length' status='simple'/>\n+\t\t<unitQuantity baseUnit='second' quantity='time' status='simple'/>\n+        <unitQuantity baseUnit='year' quantity='year-duration' status='simple'/> <!-- non-SI but here for ordering -->\n+        <unitQuantity baseUnit='ampere' quantity='electric-current' status='simple'/>\n+        <unitQuantity baseUnit='kelvin' quantity='temperature' status='simple'/>\n+        \n+        <!-- Additional base units -->\n+        \n+        <unitQuantity baseUnit='revolution' quantity='angle' status='simple'/> <!-- = circle, cycle for base -->\n+        <unitQuantity baseUnit='item' quantity='substance-amount' status='simple'/> <!-- use instead of mole -->\n+        <unitQuantity baseUnit='portion' quantity='portion' status='simple'/>\n+        <unitQuantity baseUnit='bit' quantity='digital' status='simple'/>\n+        <unitQuantity baseUnit='pixel' quantity='graphics' status='simple'/>\n+        <unitQuantity baseUnit='em' quantity='typewidth' status='simple'/>\n+        \n+        <!--  SI Derived Units -->\n+        \n+        <unitQuantity baseUnit='revolution-per-second' quantity='frequency'/>\n+        <unitQuantity baseUnit='square-revolution' quantity='solid-angle'/>\n+        <unitQuantity baseUnit='kilogram-meter-per-square-second' quantity='force'/>\n+        <unitQuantity baseUnit='kilogram-per-meter-square-second' quantity='pressure'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second' quantity='energy'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second' quantity='power'/>\n+        <unitQuantity baseUnit='second-ampere' quantity='electric-charge'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-ampere' quantity='voltage'/>\n+        <unitQuantity baseUnit='pow4-second-square-ampere-per-kilogram-square-meter' quantity='electric-capacitance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-cubic-second-square-ampere' quantity='electric-resistance'/>\n+        <unitQuantity baseUnit='cubic-second-square-ampere-per-kilogram-square-meter' quantity='electric-conductance'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-ampere' quantity='magnetic-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-square-second-ampere' quantity='magnetic-induction'/>\n+        <unitQuantity baseUnit='kilogram-square-meter-per-square-second-square-ampere' quantity='electric-inductance'/>\n+        <unitQuantity baseUnit='square-meter-per-square-second' quantity='dose'/>\n+        <unitQuantity baseUnit='square-meter' quantity='area'/>\n+        <unitQuantity baseUnit='cubic-meter' quantity='volume'/>\n+        <unitQuantity baseUnit='meter-per-second' quantity='speed'/>\n+        <unitQuantity baseUnit='meter-per-square-second' quantity='acceleration'/>\n+        <unitQuantity baseUnit='revolution-per-meter' quantity='wave-number'/>\n+        <unitQuantity baseUnit='kilogram-per-cubic-meter' quantity='mass-density'/>\n+        <unitQuantity baseUnit='cubic-meter-per-kilogram' quantity='specific-volume'/>\n+        <unitQuantity baseUnit='ampere-per-square-meter' quantity='current-density'/>\n+        <unitQuantity baseUnit='ampere-per-meter' quantity='magnetic-field-strength'/>\n+        <unitQuantity baseUnit='item-per-cubic-meter' quantity='concentration'/>\n+        <unitQuantity baseUnit='candela-per-square-meter' quantity='luminance'/>\n+        <unitQuantity baseUnit='candela-square-meter-per-square-meter' quantity='luminous-flux'/>\n+        <unitQuantity baseUnit='kilogram-per-kilogram' quantity='mass-fraction'/>\n+        \n+        <!-- Additional derived units -->\n+        <unitQuantity baseUnit='kilogram-meter-per-meter-square-second' quantity='torque'/>\n+        <unitQuantity baseUnit='cubic-meter-per-meter' quantity='consumption'/>\n+        <unitQuantity baseUnit='meter-per-cubic-meter' quantity='consumption-inverse'/>\n+        <unitQuantity baseUnit='pixel-per-meter' quantity='resolution'/>\n+\n+\t</unitQuantities>\t\n+\t<convertUnits>\n+\t\t<!-- TODO: double-check system=\"US..\"  -->\n+\t\t<!-- Values where possible from:\n+\t\ta) NIST Special Publication 1038 \n+\t\thttps://www.govinfo.gov/content/pkg/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4/pdf/GOVPUB-C13-f10c2ff9e7af2091314396a2d53213e4.pdf\n+\t\tb) https://arxiv.org/pdf/1510.07674.pdf\n+\t\t -->\n+\n+\t\t<!-- luminous-intensity -->\n+\t\t<convertUnit source='candela' baseUnit='candela'/>\n+\t\t\n+\t\t<!-- mass -->\n+\t\t<convertUnit source='carat' baseUnit='kilogram' factor='0.0002'/>\n+\t\t<convertUnit source='gram' baseUnit='kilogram' factor='0.001'/>\n+\t\t<convertUnit source='ounce' baseUnit='kilogram' factor='lb2kg/16' systems=\"US UK\"/>\n+\t\t<convertUnit source='ounce-troy' baseUnit='kilogram' factor='0.03110348' systems=\"US UK\"/>\n+\t\t<convertUnit source='pound' baseUnit='kilogram' factor='lb2kg' systems=\"US UK\"/>\n+\t\t<convertUnit source='kilogram' baseUnit='kilogram'/>\n+\t\t<convertUnit source='stone' baseUnit='kilogram' factor='lb2kg*14' systems=\"UK\"/>\n+\t\t<convertUnit source='ton' baseUnit='kilogram' factor='lb2kg*2000' systems=\"US UK\"/>\n+\t\t<convertUnit source='metric-ton' baseUnit='kilogram' factor='1000'/>\n+\t\t<convertUnit source='earth-mass' baseUnit='kilogram' factor='5.9722E+24'/>\n+\t\t<convertUnit source='solar-mass' baseUnit='kilogram' factor='1.98847E+30'/>\n+\t\t\n+\t\t<!-- length -->\n+\t\t<convertUnit source='point' baseUnit='meter' factor='ft2m/864' systems=\"US UK\"/>\n+\t\t<convertUnit source='centimeter' baseUnit='meter' factor='1/100'/>\n+\t\t<convertUnit source='inch' baseUnit='meter' factor='ft2m/12' systems=\"US UK\"/>\n+\t\t<convertUnit source='foot' baseUnit='meter' factor='ft2m' systems=\"US UK\"/>\n+\t\t<convertUnit source='yard' baseUnit='meter' factor='ft2m*3' systems=\"US UK\"/>\n+\t\t<convertUnit source='meter' baseUnit='meter'/>\n+\t\t<convertUnit source='fathom' baseUnit='meter' factor='ft2m * 6' systems=\"US UK\"/>\n+\t\t<convertUnit source='furlong' baseUnit='meter' factor='ft2m*660' systems=\"US UK\"/>\n+\t\t<convertUnit source='mile' baseUnit='meter' factor='ft2m*5280' systems=\"US UK\"/>\n+\t\t<convertUnit source='nautical-mile' baseUnit='meter' factor='1852' systems=\"US UK\"/>\n+\t\t<convertUnit source='mile-scandinavian' baseUnit='meter' factor='10000'/>\n+\t\t<convertUnit source='100-kilometer' baseUnit='meter' factor='100000'/>\n+\t\t<convertUnit source='earth-radius' baseUnit='meter' factor='6.3781E6'/>\n+\t\t<convertUnit source='solar-radius' baseUnit='meter' factor='695700000'/>\n+\t\t<convertUnit source='astronomical-unit' baseUnit='meter' factor='149597900000'/>\n+\t\t<convertUnit source='light-year' baseUnit='meter' factor='9460730000000000'/>\n+\t\t<convertUnit source='parsec' baseUnit='meter' factor='30856780000000000'/>\n+\t\t\n+\t\t<!-- time -->\n+\t\t<convertUnit source='second' baseUnit='second'/>\n+\t\t<convertUnit source='minute' baseUnit='second' factor='60'/>\n+\t\t<convertUnit source='hour' baseUnit='second' factor='3600'/>\n+\t\t<convertUnit source='day' baseUnit='second' factor='86400'/>\n+\t\t<convertUnit source='day-person' baseUnit='second' factor='86400'/>\n+\t\t<convertUnit source='week' baseUnit='second' factor='604800'/>\n+\t\t<convertUnit source='week-person' baseUnit='second' factor='604800'/>\n+\t\t\n+\t\t<!-- year-duration -->\n+\t\t<convertUnit source='year' baseUnit='year'/>\n+\t\t<convertUnit source='year-person' baseUnit='year'/>\n+\t\t<convertUnit source='decade' baseUnit='year' factor='10'/>\n+\t\t<convertUnit source='month' baseUnit='year' factor='12'/>\n+\t\t<convertUnit source='month-person' baseUnit='year' factor='12'/>\n+\t\t<convertUnit source='century' baseUnit='year' factor='100'/>\n+\t\t\n+\t\t<!-- electric-current -->\n+\t\t<convertUnit source='ampere' baseUnit='ampere'/>\n+\t\t\n+\t\t<!-- temperature -->\n+\t\t<convertUnit source='fahrenheit' baseUnit='kelvin' factor='5/9' offset='2298.35/9' systems=\"US UK\"/>\n+\t\t<convertUnit source='celsius' baseUnit='kelvin' factor='1' offset='-273.15'/>\n+\t\t<convertUnit source='kelvin' baseUnit='kelvin'/>\n+\t\t\n+\t\t<!-- angle -->\n+\t\t<convertUnit source='arc-second' baseUnit='revolution' factor='1/360*60*60'/>\n+\t\t<convertUnit source='arc-minute' baseUnit='revolution' factor='1/360*60'/>\n+\t\t<convertUnit source='degree' baseUnit='revolution' factor='1/360'/>\n+\t\t<convertUnit source='radian' baseUnit='revolution' factor='1/2*PI'/>\n+\t\t<convertUnit source='revolution' baseUnit='revolution'/>\n+\t\t\n+\t\t<!-- substance-amount -->\n+\t\t<convertUnit source='item' baseUnit='item'/>\n+\t\t<convertUnit source='mole' baseUnit='item' factor='6.02214076E+23'/>\n+\t\t\n+\t\t<!-- portion -->\n+\t\t<convertUnit source='part-per-million' baseUnit='portion' factor='1/1000000'/>\n+\t\t<convertUnit source='permyriad' baseUnit='portion' factor='1/10000'/>\n+\t\t<convertUnit source='permille' baseUnit='portion' factor='1/1000'/>\n+\t\t<convertUnit source='percent' baseUnit='portion' factor='1/100'/>\n+\t\t<convertUnit source='karat' baseUnit='portion' factor='1/24'/>\n+\t\t<convertUnit source='portion' baseUnit='portion'/>\n+\t\t\n+\t\t<!-- digital -->\n+\t\t<convertUnit source='bit' baseUnit='bit'/>\n+\t\t<convertUnit source='byte' baseUnit='bit' factor='8'/>\n+\t\t\n+\t\t<!-- graphics -->\n+\t\t<convertUnit source='pixel' baseUnit='pixel'/>\n+\t\t<convertUnit source='dot' baseUnit='pixel' factor='100'/>\n+\t\t\n+\t\t<!-- typewidth -->\n+\t\t<convertUnit source='em' baseUnit='em'/>\n+\t\t\n+\t\t<!-- frequency -->\n+\t\t<convertUnit source='hertz' baseUnit='revolution-per-second' factor='1'/>\n+\t\t\n+\t\t<!-- force -->\n+\t\t<convertUnit source='newton' baseUnit='kilogram-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='pound-force' baseUnit='kilogram-meter-per-square-second' factor='lb2kg * gravity' systems=\"US UK\"/>\n+\t\t\n+\t\t<!-- pressure -->\n+\t\t<convertUnit source='pascal' baseUnit='kilogram-per-meter-square-second' factor='1'/>\n+\t\t<convertUnit source='millimeter-of-mercury' baseUnit='kilogram-per-meter-square-second' factor='10132500/760000'/>\n+\t\t<convertUnit source='inch-hg' baseUnit='kilogram-per-meter-square-second' factor='3386.389' systems=\"US UK\"/>\n+\t\t<convertUnit source='bar' baseUnit='kilogram-per-meter-square-second' factor='100000'/>\n+\t\t<convertUnit source='atmosphere' baseUnit='kilogram-per-meter-square-second' factor='101325'/>\n+\t\t\n+\t\t<!-- energy -->\n+\t\t<convertUnit source='electronvolt' baseUnit='kilogram-square-meter-per-square-second' factor='1.602177E-19'/>\n+\t\t<convertUnit source='dalton' baseUnit='kilogram-square-meter-per-square-second' factor='1.49241808560E-10'/>\n+\t\t<convertUnit source='joule' baseUnit='kilogram-square-meter-per-square-second' factor='1'/>\n+\t\t<convertUnit source='calorie' baseUnit='kilogram-square-meter-per-square-second' factor='4.184'/>\n+\t\t<convertUnit source='british-thermal-unit' baseUnit='kilogram-square-meter-per-square-second' factor='1055.06' systems=\"US UK\"/>\n+\t\t<convertUnit source='foodcalorie' baseUnit='kilogram-square-meter-per-square-second' factor='4184' systems=\"US UK\"/>\n+\t\t<convertUnit source='therm-us' baseUnit='kilogram-square-meter-per-square-second' factor='105506000' systems=\"US\"/>\n+\t\t\n+\t\t<!-- power -->\n+\t\t<convertUnit source='watt' baseUnit='kilogram-square-meter-per-cubic-second' factor='1'/>\n+\t\t<convertUnit source='horsepower' baseUnit='kilogram-square-meter-per-cubic-second' factor='ft2m * lb2kg * gravity * 550' systems=\"US UK\"/>\n+\t\t<convertUnit source='solar-luminosity' baseUnit='kilogram-square-meter-per-cubic-second' factor='3.828E+26'/>\n+\t\t\n+\t\t<!-- voltage -->\n+\t\t<convertUnit source='volt' baseUnit='kilogram-square-meter-per-cubic-second-ampere' factor='1'/>\n+\t\t\n+\t\t<!-- electric-resistance -->\n+\t\t<convertUnit source='ohm' baseUnit='kilogram-square-meter-per-cubic-second-square-ampere' factor='1'/>\n+\t\t\n+\t\t<!-- area -->\n+\t\t<convertUnit source='dunam' baseUnit='square-meter' factor='1000'/>\n+\t\t<convertUnit source='acre' baseUnit='square-meter' factor='ft2m*ft2m * 43560' systems=\"US UK\"/>\n+\t\t<convertUnit source='hectare' baseUnit='square-meter' factor='10000'/>\n+\t\t\n+\t\t<!-- volume -->\n+\t\t<convertUnit source='teaspoon' baseUnit='cubic-meter' factor='cup2m3/48' systems=\"US UK\"/>\n+\t\t<convertUnit source='tablespoon' baseUnit='cubic-meter' factor='cup2m3/16' systems=\"US UK\"/>\n+\t\t<convertUnit source='fluid-ounce-imperial' baseUnit='cubic-meter' factor='0.00002841306'/>\n+\t\t<convertUnit source='fluid-ounce' baseUnit='cubic-meter' factor='cup2m3/8' systems=\"US UK\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1253249298711af824a01bddd8059da2c971a1"}, "originalPosition": 218}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12c8bb1d86dc73f47c0dd2aa7b5b0769f9e0fcbd", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/12c8bb1d86dc73f47c0dd2aa7b5b0769f9e0fcbd", "committedDate": "2020-02-10T07:38:51Z", "message": "CLDR-13488 change format of units; rework systems & constants"}, "afterCommit": {"oid": "c1245046fddf0d4d1fcf6084649da7078633c680", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/c1245046fddf0d4d1fcf6084649da7078633c680", "committedDate": "2020-02-10T07:46:01Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87e492eb16eaa438b33414f05518237dd32f3eab", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/87e492eb16eaa438b33414f05518237dd32f3eab", "committedDate": "2020-02-10T07:47:08Z", "message": "Merge branch 'CLDR-13488-add-unit-conversions' of github.com:macchiati/cldr into CLDR-13488-add-unit-conversions"}, "afterCommit": {"oid": "fbf9472dbca89d6f590017440d859a01f6f29f0d", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/fbf9472dbca89d6f590017440d859a01f6f29f0d", "committedDate": "2020-02-10T07:48:10Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975b1180492c779d81f671595238c5ab1a389115", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/975b1180492c779d81f671595238c5ab1a389115", "committedDate": "2020-02-10T07:48:35Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbf9472dbca89d6f590017440d859a01f6f29f0d", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/fbf9472dbca89d6f590017440d859a01f6f29f0d", "committedDate": "2020-02-10T07:48:10Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}, "afterCommit": {"oid": "975b1180492c779d81f671595238c5ab1a389115", "author": {"user": {"login": "macchiati", "name": "Mark Davis"}}, "url": "https://github.com/unicode-org/cldr/commit/975b1180492c779d81f671595238c5ab1a389115", "committedDate": "2020-02-10T07:48:35Z", "message": "CLDR-13488 add unit conversions\n\nSee #291"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTI4OTk3", "url": "https://github.com/unicode-org/cldr/pull/291#pullrequestreview-356128997", "createdAt": "2020-02-10T17:34:49Z", "commit": {"oid": "975b1180492c779d81f671595238c5ab1a389115"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2151, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}