{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDI3ODg0", "number": 414, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjozOToyMFrODsX1YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjozOToyMFrODsX1YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODU0NDMzOnYy", "diffSide": "RIGHT", "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCompactNumbers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjozOToyMFrOF9N78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDowNzozM1rOF9QUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTc5Mg==", "bodyText": "What is the problem with \"cs\" compact decimals? Is there a ticket?", "url": "https://github.com/unicode-org/cldr/pull/414#discussion_r399735792", "createdAt": "2020-03-29T02:39:20Z", "author": {"login": "pedberg-icu"}, "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCompactNumbers.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.unicode.cldr.unittest;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.unicode.cldr.test.BuildIcuCompactDecimalFormat;\n+import org.unicode.cldr.test.BuildIcuCompactDecimalFormat.CurrencyStyle;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRFile;\n+import org.unicode.cldr.util.Factory;\n+import org.unicode.cldr.util.ICUServiceBuilder;\n+import org.unicode.cldr.util.StandardCodes;\n+import org.unicode.cldr.util.SupplementalDataInfo;\n+import org.unicode.cldr.util.VerifyCompactNumbers;\n+\n+import com.ibm.icu.text.CompactDecimalFormat;\n+import com.ibm.icu.text.CompactDecimalFormat.CompactStyle;\n+import com.ibm.icu.text.NumberFormat;\n+import com.ibm.icu.util.ULocale;\n+\n+public class TestCompactNumbers  extends TestFmwkPlus {\n+    static final boolean DEBUG = false;\n+    private static StandardCodes sc = StandardCodes.make();\n+    private static final CLDRConfig CLDRCONFIG = CLDRConfig.getInstance();\n+    private static final SupplementalDataInfo SDI = CLDRCONFIG.getSupplementalDataInfo();\n+    private static final CLDRFile ENGLISH = CLDRCONFIG.getEnglish();\n+    private static final Factory factory2 = CLDRCONFIG.getCldrFactory();\n+\n+    public static void main(String[] args) {\n+        new TestCompactNumbers().run(args);\n+    }\n+\n+    public void TestVerify() {\n+        // Just verify no crashes\n+        CLDRFile cldrFile = factory2.make(\"it\", true);\n+        Appendable out = new StringBuilder();\n+        VerifyCompactNumbers.showNumbers(cldrFile, true, \"EUR\", out, factory2);\n+        if (DEBUG) {\n+            System.out.println(out);\n+        }\n+    }\n+\n+    public void TestInternals() {\n+        // Just verify no crashes\n+        String locale = \"it\";\n+        String currencyCode = \"EUR\";\n+        ULocale locale2 = ULocale.forLanguageTag(locale);\n+        CLDRFile cldrFile = factory2.make(locale, true);\n+        Set<String> debugCreationErrors = new LinkedHashSet<>();\n+        String[] debugOriginals = null;\n+\n+        ICUServiceBuilder builder = new ICUServiceBuilder().setCldrFile(cldrFile);\n+        NumberFormat nf = builder.getNumberFormat(1);\n+\n+        CompactDecimalFormat cdf = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.SHORT, locale2, CurrencyStyle.PLAIN, currencyCode);\n+\n+        Map<String, Map<String, String>> data = BuildIcuCompactDecimalFormat.buildCustomData(cldrFile, CompactStyle.SHORT, CurrencyStyle.PLAIN);\n+        if (DEBUG) {\n+            for (Entry<String, Map<String, String>> entry : data.entrySet()) {\n+                System.out.println(entry);\n+            }\n+        }\n+\n+        CompactDecimalFormat cdfs = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.LONG, locale2, CurrencyStyle.PLAIN, currencyCode);\n+        CompactDecimalFormat cdfCurr = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.SHORT, locale2, CurrencyStyle.CURRENCY, currencyCode);\n+\n+        Set<Double> allSamples = VerifyCompactNumbers.collectSamplesAndSetFormats(currencyCode, locale, SDI, cdf, cdfs, cdfCurr);\n+\n+        for (double source : allSamples) {\n+            if (false && source == 22000000 && locale.equals(\"cs\")) {\n+                System.out.println(\"**\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "531e2b3d041324292bb1f89789c1c6461d688216"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDkwMg==", "bodyText": "That's just debugging code. (there a bunch of that that could be cleaned up in various areas, but I'd rather not try to address in v37)", "url": "https://github.com/unicode-org/cldr/pull/414#discussion_r399774902", "createdAt": "2020-03-29T10:07:33Z", "author": {"login": "macchiati"}, "path": "tools/cldr-unittest/src/org/unicode/cldr/unittest/TestCompactNumbers.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.unicode.cldr.unittest;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.unicode.cldr.test.BuildIcuCompactDecimalFormat;\n+import org.unicode.cldr.test.BuildIcuCompactDecimalFormat.CurrencyStyle;\n+import org.unicode.cldr.util.CLDRConfig;\n+import org.unicode.cldr.util.CLDRFile;\n+import org.unicode.cldr.util.Factory;\n+import org.unicode.cldr.util.ICUServiceBuilder;\n+import org.unicode.cldr.util.StandardCodes;\n+import org.unicode.cldr.util.SupplementalDataInfo;\n+import org.unicode.cldr.util.VerifyCompactNumbers;\n+\n+import com.ibm.icu.text.CompactDecimalFormat;\n+import com.ibm.icu.text.CompactDecimalFormat.CompactStyle;\n+import com.ibm.icu.text.NumberFormat;\n+import com.ibm.icu.util.ULocale;\n+\n+public class TestCompactNumbers  extends TestFmwkPlus {\n+    static final boolean DEBUG = false;\n+    private static StandardCodes sc = StandardCodes.make();\n+    private static final CLDRConfig CLDRCONFIG = CLDRConfig.getInstance();\n+    private static final SupplementalDataInfo SDI = CLDRCONFIG.getSupplementalDataInfo();\n+    private static final CLDRFile ENGLISH = CLDRCONFIG.getEnglish();\n+    private static final Factory factory2 = CLDRCONFIG.getCldrFactory();\n+\n+    public static void main(String[] args) {\n+        new TestCompactNumbers().run(args);\n+    }\n+\n+    public void TestVerify() {\n+        // Just verify no crashes\n+        CLDRFile cldrFile = factory2.make(\"it\", true);\n+        Appendable out = new StringBuilder();\n+        VerifyCompactNumbers.showNumbers(cldrFile, true, \"EUR\", out, factory2);\n+        if (DEBUG) {\n+            System.out.println(out);\n+        }\n+    }\n+\n+    public void TestInternals() {\n+        // Just verify no crashes\n+        String locale = \"it\";\n+        String currencyCode = \"EUR\";\n+        ULocale locale2 = ULocale.forLanguageTag(locale);\n+        CLDRFile cldrFile = factory2.make(locale, true);\n+        Set<String> debugCreationErrors = new LinkedHashSet<>();\n+        String[] debugOriginals = null;\n+\n+        ICUServiceBuilder builder = new ICUServiceBuilder().setCldrFile(cldrFile);\n+        NumberFormat nf = builder.getNumberFormat(1);\n+\n+        CompactDecimalFormat cdf = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.SHORT, locale2, CurrencyStyle.PLAIN, currencyCode);\n+\n+        Map<String, Map<String, String>> data = BuildIcuCompactDecimalFormat.buildCustomData(cldrFile, CompactStyle.SHORT, CurrencyStyle.PLAIN);\n+        if (DEBUG) {\n+            for (Entry<String, Map<String, String>> entry : data.entrySet()) {\n+                System.out.println(entry);\n+            }\n+        }\n+\n+        CompactDecimalFormat cdfs = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.LONG, locale2, CurrencyStyle.PLAIN, currencyCode);\n+        CompactDecimalFormat cdfCurr = BuildIcuCompactDecimalFormat.build(cldrFile, debugCreationErrors,\n+            debugOriginals, CompactStyle.SHORT, locale2, CurrencyStyle.CURRENCY, currencyCode);\n+\n+        Set<Double> allSamples = VerifyCompactNumbers.collectSamplesAndSetFormats(currencyCode, locale, SDI, cdf, cdfs, cdfCurr);\n+\n+        for (double source : allSamples) {\n+            if (false && source == 22000000 && locale.equals(\"cs\")) {\n+                System.out.println(\"**\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTc5Mg=="}, "originalCommit": {"oid": "531e2b3d041324292bb1f89789c1c6461d688216"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 554, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}