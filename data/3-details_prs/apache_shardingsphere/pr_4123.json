{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDQxNzg5", "number": 4123, "title": "Add MySQL DDLStatement antlr visitor", "bodyText": "Fixes #3914.\nMySQLVisitor lacks of visitor for DDLStatement.g4. It is necessary to add DDLStatement.g4 antlr visitor.\nChanges proposed in this pull request:\n\nMySQLVisitor adds DDLStatement.g4 antlr visitor.", "createdAt": "2020-01-31T07:07:08Z", "url": "https://github.com/apache/shardingsphere/pull/4123", "merged": true, "mergeCommit": {"oid": "fa961d97c9647f2f4ada369f241c96d87ff2dae2"}, "closed": true, "closedAt": "2020-02-01T13:22:27Z", "author": {"login": "SteNicholas"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_pR-dAH2gAyMzY5NDQxNzg5OmI0ZDViNGUzNzNlZGFmNzAxMzcyNGUzMWE4YTJkZDIwOGRkOTE4ZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcADqc9AFqTM1MTg4NDE5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b4d5b4e373edaf7013724e31a8a2dd208dd918e1", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/b4d5b4e373edaf7013724e31a8a2dd208dd918e1", "committedDate": "2020-01-31T06:37:54Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e99f14ffa0b9f2834a8fa30bdee9ad6347c845", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/e2e99f14ffa0b9f2834a8fa30bdee9ad6347c845", "committedDate": "2020-01-31T06:42:08Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c803ee5d66e3253097ee522dd930e1c880ffc1b", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/2c803ee5d66e3253097ee522dd930e1c880ffc1b", "committedDate": "2020-01-31T06:42:23Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd5e4be60bc48234e11e353820a08473445ddccc", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/fd5e4be60bc48234e11e353820a08473445ddccc", "committedDate": "2020-01-31T06:43:56Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4581f92c15f0c09bf2bb85e3d5f7c766695761c", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/c4581f92c15f0c09bf2bb85e3d5f7c766695761c", "committedDate": "2020-01-31T06:45:30Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c8c7c8d2475bb6bc226a5ec5d13dafdd1e4b55", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/25c8c7c8d2475bb6bc226a5ec5d13dafdd1e4b55", "committedDate": "2020-01-31T06:46:05Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e94f521c9cdb598a76fe1dd2700ea32ec7460aec", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/e94f521c9cdb598a76fe1dd2700ea32ec7460aec", "committedDate": "2020-01-31T06:47:26Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edad872f80008b123fb32beb11ea131f2978391a", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/edad872f80008b123fb32beb11ea131f2978391a", "committedDate": "2020-01-31T06:48:30Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680a6b4a27d1350a8f5a49da7530fd1c129c5955", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/680a6b4a27d1350a8f5a49da7530fd1c129c5955", "committedDate": "2020-01-31T06:52:40Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e275773531fa560eb1a9a520b5dc66bb4944fa93", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/e275773531fa560eb1a9a520b5dc66bb4944fa93", "committedDate": "2020-01-31T07:00:55Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34179b37ddeb6a1b41d9578398724669f4565a9", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/a34179b37ddeb6a1b41d9578398724669f4565a9", "committedDate": "2020-01-31T07:24:39Z", "message": "Merge branch 'master' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor\n\n\u0001 Conflicts:\n\u0001\tshardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5731197d0ccd63fa8d0d08c4f69f2144a5e6ccb2", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/5731197d0ccd63fa8d0d08c4f69f2144a5e6ccb2", "committedDate": "2020-01-31T07:30:15Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e501f33022d016305a9d3e581cb7ff891ab1d0a8", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/e501f33022d016305a9d3e581cb7ff891ab1d0a8", "committedDate": "2020-01-31T07:32:20Z", "message": "mysql ddlstatement visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09926d5902f984f45b71cf77ee89a7c681f6c969", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/09926d5902f984f45b71cf77ee89a7c681f6c969", "committedDate": "2020-01-31T13:14:40Z", "message": "Merge branch 'master' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c2cfad37366e6ba05debfa6e21f5728bb29f7e", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/a8c2cfad37366e6ba05debfa6e21f5728bb29f7e", "committedDate": "2020-01-31T13:55:57Z", "message": "mysql spatial function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/96b2f39695e13177964edf5534f87463e90efb0e", "committedDate": "2020-01-31T14:44:04Z", "message": "mysql statement visitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODY0NDYw", "url": "https://github.com/apache/shardingsphere/pull/4123#pullrequestreview-351864460", "createdAt": "2020-02-01T04:19:33Z", "commit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoxOTozM1rOFkcTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDo0NDo1OVrOFkcXWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY4OA==", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756688", "createdAt": "2020-02-01T04:19:33Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY5NA==", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756694", "createdAt": "2020-02-01T04:19:47Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());\n+        result.setIndex(index);\n+        result.getAllSQLSegments().add(index);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropIndex(final DropIndexContext ctx) {\n+        DropIndexStatement result = new DropIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ==", "bodyText": "IMO, it is better to put it to visitCreateDefinitionClause(). Parent visior has no reposibility to visit its child visitor, and just gets the result returned by its child.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757511", "createdAt": "2020-02-01T04:37:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4NQ==", "bodyText": "The above suggestion applied to the following visitors. Could you review those rather long visitors for optimizing?", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757785", "createdAt": "2020-02-01T04:44:59Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODY1NDk2", "url": "https://github.com/apache/shardingsphere/pull/4123#pullrequestreview-351865496", "createdAt": "2020-02-01T04:47:23Z", "commit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb13e229120a044c03ea6921cee9dceb05ae834", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/fdb13e229120a044c03ea6921cee9dceb05ae834", "committedDate": "2020-02-01T09:10:09Z", "message": "Merge branches 'master' and 'mysql-statement-visitor' of github.com:SteNicholas/incubator-shardingsphere into mysql-statement-visitor\n\n\u0001 Conflicts:\n\u0001\tshardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/shardingsphere/commit/32356e4a0a27dec836875c4ed5dc53abdcf1b83c", "committedDate": "2020-02-01T11:09:33Z", "message": "mysql statement visitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODgzMzI5", "url": "https://github.com/apache/shardingsphere/pull/4123#pullrequestreview-351883329", "createdAt": "2020-02-01T12:55:24Z", "commit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMjo1NToyNFrOFkdo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMzowMjo1MFrOFkdqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODY3NA==", "bodyText": "@SteNicholas Could get ListValue<ColumnDefinitionSegment> from visitCreateDefinitionClause() and add it to columnDefinitions in CreateTableStatement", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778674", "createdAt": "2020-02-01T12:55:24Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg==", "bodyText": "To create visitReferenceDefinition_() is better. Short and simple function always make peple easy to read. Other than, one function is supposed to focus on itself, not include its child.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778942", "createdAt": "2020-02-01T13:02:12Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -871,6 +1051,53 @@ private ASTNode createExpressionSegment(final ASTNode astNode, final ParserRuleC\n         return astNode;\n     }\n     \n+    private ColumnDefinitionSegment createColumnDefinitionSegment(final ColumnDefinitionContext columnDefinition, final DDLStatement statement) {\n+        ColumnSegment column = (ColumnSegment) visit(columnDefinition.columnName());\n+        LiteralValue dataType = (LiteralValue) visit(columnDefinition.dataType().dataTypeName_());\n+        boolean isPrimaryKey = false;\n+        for (InlineDataType_Context inlineDataType : columnDefinition.inlineDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = inlineDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        for (GeneratedDataType_Context generatedDataType: columnDefinition.generatedDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = generatedDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk3MA==", "bodyText": "Could give more review on other long funcions?", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778970", "createdAt": "2020-02-01T13:02:50Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -871,6 +1051,53 @@ private ASTNode createExpressionSegment(final ASTNode astNode, final ParserRuleC\n         return astNode;\n     }\n     \n+    private ColumnDefinitionSegment createColumnDefinitionSegment(final ColumnDefinitionContext columnDefinition, final DDLStatement statement) {\n+        ColumnSegment column = (ColumnSegment) visit(columnDefinition.columnName());\n+        LiteralValue dataType = (LiteralValue) visit(columnDefinition.dataType().dataTypeName_());\n+        boolean isPrimaryKey = false;\n+        for (InlineDataType_Context inlineDataType : columnDefinition.inlineDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = inlineDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        for (GeneratedDataType_Context generatedDataType: columnDefinition.generatedDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = generatedDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg=="}, "originalCommit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "originalPosition": 295}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODg0MTk3", "url": "https://github.com/apache/shardingsphere/pull/4123#pullrequestreview-351884197", "createdAt": "2020-02-01T13:22:11Z", "commit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4173, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}