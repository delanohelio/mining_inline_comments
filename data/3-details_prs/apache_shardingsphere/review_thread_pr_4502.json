{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzcwODA5", "number": 4502, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNDozOFrODjcNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNDozOFrODjcNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg5MDMzOnYy", "diffSide": "RIGHT", "path": "sharding-proxy/sharding-proxy-frontend/sharding-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/shardingproxy/frontend/mysql/command/query/binary/prepare/MySQLComStmtPrepareExecutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxNDozOFrOFvP_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTozMTo0M1rOFxCLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4OTMzMw==", "bodyText": "Can we move the SQL parser logic into parser module?", "url": "https://github.com/apache/shardingsphere/pull/4502#discussion_r385089333", "createdAt": "2020-02-27T12:14:38Z", "author": {"login": "terrymanu"}, "path": "sharding-proxy/sharding-proxy-frontend/sharding-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/shardingproxy/frontend/mysql/command/query/binary/prepare/MySQLComStmtPrepareExecutor.java", "diffHunk": "@@ -17,38 +17,79 @@\n \n package org.apache.shardingsphere.shardingproxy.frontend.mysql.command.query.binary.prepare;\n \n-import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.shardingproxy.backend.communication.jdbc.connection.BackendConnection;\n import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchema;\n import org.apache.shardingsphere.shardingproxy.frontend.api.CommandExecutor;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLColumnType;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLServerErrorCode;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.MySQLBinaryStatementRegistry;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPrepareOKPacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPreparePacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLErrPacket;\n import org.apache.shardingsphere.shardingproxy.transport.packet.DatabasePacket;\n+import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.LinkedList;\n+import java.util.Set;\n \n /**\n  * COM_STMT_PREPARE command executor for MySQL.\n+ *\n+ * @see <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html\">SQL Syntax Allowed in Prepared Statements</a>\n  */\n public final class MySQLComStmtPrepareExecutor implements CommandExecutor {\n     \n+    private static final Set<String> SQL_SYNTAX_ALLOWED = new HashSet<>();\n+    \n+    private static final int MAX_CHECK_TOKENS = \"FLUSH TABLES WITH READ LOCK\".split(\"\\\\W+\").length;\n+    \n     private static final MySQLBinaryStatementRegistry PREPARED_STATEMENT_REGISTRY = MySQLBinaryStatementRegistry.getInstance();\n     \n     private final MySQLComStmtPreparePacket packet;\n     \n     private final LogicSchema logicSchema;\n     \n+    static {\n+        SQL_SYNTAX_ALLOWED.addAll(Arrays.asList(\"ALTER\" + \"TABLE\", \"ALTER\" + \"USER\", \"ANALYZE\" + \"TABLE\",\n+            \"CACHE\" + \"INDEX\", \"CALL\", \"CHANGE\" + \"MASTER\", \"CHECKSUM\" + \"TABLE\", \"CHECKSUM\" + \"TABLES\",\n+            \"COMMIT\", \"CREATE\" + \"INDEX\", \"DROP\" + \"INDEX\", \"CREATE\" + \"DATABASE\", \"RENAME\" + \"DATABASE\",\n+            \"DROP\" + \"DATABASE\", \"CREATE\" + \"TABLE\", \"DROP\" + \"TABLE\", \"CREATE\" + \"USER\", \"RENAME\" + \"USER\",\n+            \"DROP\" + \"USER\", \"CREATE\" + \"VIEW\", \"DROP\" + \"VIEW\", \"DELETE\", \"DO\", \"FLUSH\" + \"TABLE\",\n+            \"FLUSH\" + \"TABLES\", \"FLUSH\" + \"TABLES\" + \"WITH\" + \"READ\" + \"LOCK\", \"FLUSH\" + \"HOSTS\",\n+            \"FLUSH\" + \"PRIVILEGES\", \"FLUSH\" + \"LOGS\", \"FLUSH\" + \"STATUS\", \"FLUSH\" + \"MASTER\", \"FLUSH\" + \"SLAVE\",\n+            \"FLUSH\" + \"DES_KEY_FILE\", \"FLUSH\" + \"USER\" + \"RESOURCES\", \"GRANT\", \"INSERT\", \"INSTALL\" + \"PLUGIN\",\n+            \"KILL\", \"LOAD\" + \"INDEX\" + \"INTO\" + \"CACHE\", \"OPTIMIZE\" + \"TABLE\", \"RENAME\" + \"TABLE\",\n+            \"REPAIR\" + \"TABLE\", \"REPLACE\", \"RESET\" + \"MASTER\", \"RESET\" + \"SLAVE\", \"RESET\" + \"QUERY CACHE\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7af2e3115fbe38ffdeb0d38035e16f05d92404"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODU3Ng==", "bodyText": "Yes, the logic should be moved to parser module.", "url": "https://github.com/apache/shardingsphere/pull/4502#discussion_r385508576", "createdAt": "2020-02-28T05:02:39Z", "author": {"login": "tuohai666"}, "path": "sharding-proxy/sharding-proxy-frontend/sharding-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/shardingproxy/frontend/mysql/command/query/binary/prepare/MySQLComStmtPrepareExecutor.java", "diffHunk": "@@ -17,38 +17,79 @@\n \n package org.apache.shardingsphere.shardingproxy.frontend.mysql.command.query.binary.prepare;\n \n-import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.shardingproxy.backend.communication.jdbc.connection.BackendConnection;\n import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchema;\n import org.apache.shardingsphere.shardingproxy.frontend.api.CommandExecutor;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLColumnType;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLServerErrorCode;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.MySQLBinaryStatementRegistry;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPrepareOKPacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPreparePacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLErrPacket;\n import org.apache.shardingsphere.shardingproxy.transport.packet.DatabasePacket;\n+import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.LinkedList;\n+import java.util.Set;\n \n /**\n  * COM_STMT_PREPARE command executor for MySQL.\n+ *\n+ * @see <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html\">SQL Syntax Allowed in Prepared Statements</a>\n  */\n public final class MySQLComStmtPrepareExecutor implements CommandExecutor {\n     \n+    private static final Set<String> SQL_SYNTAX_ALLOWED = new HashSet<>();\n+    \n+    private static final int MAX_CHECK_TOKENS = \"FLUSH TABLES WITH READ LOCK\".split(\"\\\\W+\").length;\n+    \n     private static final MySQLBinaryStatementRegistry PREPARED_STATEMENT_REGISTRY = MySQLBinaryStatementRegistry.getInstance();\n     \n     private final MySQLComStmtPreparePacket packet;\n     \n     private final LogicSchema logicSchema;\n     \n+    static {\n+        SQL_SYNTAX_ALLOWED.addAll(Arrays.asList(\"ALTER\" + \"TABLE\", \"ALTER\" + \"USER\", \"ANALYZE\" + \"TABLE\",\n+            \"CACHE\" + \"INDEX\", \"CALL\", \"CHANGE\" + \"MASTER\", \"CHECKSUM\" + \"TABLE\", \"CHECKSUM\" + \"TABLES\",\n+            \"COMMIT\", \"CREATE\" + \"INDEX\", \"DROP\" + \"INDEX\", \"CREATE\" + \"DATABASE\", \"RENAME\" + \"DATABASE\",\n+            \"DROP\" + \"DATABASE\", \"CREATE\" + \"TABLE\", \"DROP\" + \"TABLE\", \"CREATE\" + \"USER\", \"RENAME\" + \"USER\",\n+            \"DROP\" + \"USER\", \"CREATE\" + \"VIEW\", \"DROP\" + \"VIEW\", \"DELETE\", \"DO\", \"FLUSH\" + \"TABLE\",\n+            \"FLUSH\" + \"TABLES\", \"FLUSH\" + \"TABLES\" + \"WITH\" + \"READ\" + \"LOCK\", \"FLUSH\" + \"HOSTS\",\n+            \"FLUSH\" + \"PRIVILEGES\", \"FLUSH\" + \"LOGS\", \"FLUSH\" + \"STATUS\", \"FLUSH\" + \"MASTER\", \"FLUSH\" + \"SLAVE\",\n+            \"FLUSH\" + \"DES_KEY_FILE\", \"FLUSH\" + \"USER\" + \"RESOURCES\", \"GRANT\", \"INSERT\", \"INSTALL\" + \"PLUGIN\",\n+            \"KILL\", \"LOAD\" + \"INDEX\" + \"INTO\" + \"CACHE\", \"OPTIMIZE\" + \"TABLE\", \"RENAME\" + \"TABLE\",\n+            \"REPAIR\" + \"TABLE\", \"REPLACE\", \"RESET\" + \"MASTER\", \"RESET\" + \"SLAVE\", \"RESET\" + \"QUERY CACHE\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4OTMzMw=="}, "originalCommit": {"oid": "4a7af2e3115fbe38ffdeb0d38035e16f05d92404"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDE0NA==", "bodyText": "Finish.", "url": "https://github.com/apache/shardingsphere/pull/4502#discussion_r386960144", "createdAt": "2020-03-03T11:31:43Z", "author": {"login": "tuohai666"}, "path": "sharding-proxy/sharding-proxy-frontend/sharding-proxy-frontend-mysql/src/main/java/org/apache/shardingsphere/shardingproxy/frontend/mysql/command/query/binary/prepare/MySQLComStmtPrepareExecutor.java", "diffHunk": "@@ -17,38 +17,79 @@\n \n package org.apache.shardingsphere.shardingproxy.frontend.mysql.command.query.binary.prepare;\n \n-import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.shardingproxy.backend.communication.jdbc.connection.BackendConnection;\n import org.apache.shardingsphere.shardingproxy.backend.schema.LogicSchema;\n import org.apache.shardingsphere.shardingproxy.frontend.api.CommandExecutor;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLColumnType;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.constant.MySQLServerErrorCode;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.MySQLColumnDefinition41Packet;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.MySQLBinaryStatementRegistry;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPrepareOKPacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.command.query.binary.prepare.MySQLComStmtPreparePacket;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLEofPacket;\n+import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.generic.MySQLErrPacket;\n import org.apache.shardingsphere.shardingproxy.transport.packet.DatabasePacket;\n+import org.apache.shardingsphere.sql.parser.sql.statement.SQLStatement;\n import org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.LinkedList;\n+import java.util.Set;\n \n /**\n  * COM_STMT_PREPARE command executor for MySQL.\n+ *\n+ * @see <a href=\"https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html\">SQL Syntax Allowed in Prepared Statements</a>\n  */\n public final class MySQLComStmtPrepareExecutor implements CommandExecutor {\n     \n+    private static final Set<String> SQL_SYNTAX_ALLOWED = new HashSet<>();\n+    \n+    private static final int MAX_CHECK_TOKENS = \"FLUSH TABLES WITH READ LOCK\".split(\"\\\\W+\").length;\n+    \n     private static final MySQLBinaryStatementRegistry PREPARED_STATEMENT_REGISTRY = MySQLBinaryStatementRegistry.getInstance();\n     \n     private final MySQLComStmtPreparePacket packet;\n     \n     private final LogicSchema logicSchema;\n     \n+    static {\n+        SQL_SYNTAX_ALLOWED.addAll(Arrays.asList(\"ALTER\" + \"TABLE\", \"ALTER\" + \"USER\", \"ANALYZE\" + \"TABLE\",\n+            \"CACHE\" + \"INDEX\", \"CALL\", \"CHANGE\" + \"MASTER\", \"CHECKSUM\" + \"TABLE\", \"CHECKSUM\" + \"TABLES\",\n+            \"COMMIT\", \"CREATE\" + \"INDEX\", \"DROP\" + \"INDEX\", \"CREATE\" + \"DATABASE\", \"RENAME\" + \"DATABASE\",\n+            \"DROP\" + \"DATABASE\", \"CREATE\" + \"TABLE\", \"DROP\" + \"TABLE\", \"CREATE\" + \"USER\", \"RENAME\" + \"USER\",\n+            \"DROP\" + \"USER\", \"CREATE\" + \"VIEW\", \"DROP\" + \"VIEW\", \"DELETE\", \"DO\", \"FLUSH\" + \"TABLE\",\n+            \"FLUSH\" + \"TABLES\", \"FLUSH\" + \"TABLES\" + \"WITH\" + \"READ\" + \"LOCK\", \"FLUSH\" + \"HOSTS\",\n+            \"FLUSH\" + \"PRIVILEGES\", \"FLUSH\" + \"LOGS\", \"FLUSH\" + \"STATUS\", \"FLUSH\" + \"MASTER\", \"FLUSH\" + \"SLAVE\",\n+            \"FLUSH\" + \"DES_KEY_FILE\", \"FLUSH\" + \"USER\" + \"RESOURCES\", \"GRANT\", \"INSERT\", \"INSTALL\" + \"PLUGIN\",\n+            \"KILL\", \"LOAD\" + \"INDEX\" + \"INTO\" + \"CACHE\", \"OPTIMIZE\" + \"TABLE\", \"RENAME\" + \"TABLE\",\n+            \"REPAIR\" + \"TABLE\", \"REPLACE\", \"RESET\" + \"MASTER\", \"RESET\" + \"SLAVE\", \"RESET\" + \"QUERY CACHE\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4OTMzMw=="}, "originalCommit": {"oid": "4a7af2e3115fbe38ffdeb0d38035e16f05d92404"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1195, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}