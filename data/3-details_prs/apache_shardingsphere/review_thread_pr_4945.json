{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzU2Njcz", "number": 4945, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1MVrODrc5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMDowOFrODsuVpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg4NzU4OnYy", "diffSide": "LEFT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1MVrOF7zl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1MVrOF7zl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTU5NQ==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255595", "createdAt": "2020-03-26T00:47:51Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -130,9 +130,9 @@ private void addActualTable(final String datasourceName, final String tableName)\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final TableRuleConfiguration tableRuleConfiguration) {\n-        return null != tableRuleConfiguration.getKeyGeneratorConfig() && !Strings.isNullOrEmpty(tableRuleConfiguration.getKeyGeneratorConfig().getType());\n+        return null != tableRuleConfiguration.getKeyGeneratorConfig() && null != tableRuleConfiguration.getKeyGeneratorConfig().getKeyGenerator();\n     }\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg4NzY5OnYy", "diffSide": "LEFT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1NVrOF7zl_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1NVrOF7zl_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTYxNQ==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255615", "createdAt": "2020-03-26T00:47:55Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -217,10 +217,10 @@ private void checkRule(final List<String> dataNodes) {\n             throw new ShardingSphereConfigurationException(\"ActualDataNodes must be configured if want to shard tables for logicTable [%s]\", logicTable);\n         }\n     }\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg4Nzc3OnYy", "diffSide": "LEFT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0ODowMFrOF7zmEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0ODowMFrOF7zmEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTYzMg==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255632", "createdAt": "2020-03-26T00:48:00Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -217,10 +217,10 @@ private void checkRule(final List<String> dataNodes) {\n             throw new ShardingSphereConfigurationException(\"ActualDataNodes must be configured if want to shard tables for logicTable [%s]\", logicTable);\n         }\n     }\n-    \n+\n     /**\n      * Get generate key column.\n-     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg5MzI3OnYy", "diffSide": "RIGHT", "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/shardingNamespace.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo1MTowNFrOF7zpQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo1MTowNFrOF7zpQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NjQ1MA==", "bodyText": "keep origin indent", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398256450", "createdAt": "2020-03-26T00:51:04Z", "author": {"login": "kimmking"}, "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/shardingNamespace.xml", "diffHunk": "@@ -17,18 +17,19 @@\n   -->\n \n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:master-slave=\"http://shardingsphere.apache.org/schema/shardingsphere/masterslave\"\n-       xmlns:sharding=\"http://shardingsphere.apache.org/schema/shardingsphere/sharding\"\n-       xmlns:bean=\"http://www.springframework.org/schema/util\"\n-       xmlns:encrypt=\"http://shardingsphere.apache.org/schema/shardingsphere/encrypt\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg5NzExOnYy", "diffSide": "RIGHT", "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/withNamespaceGenerateKeyColumns.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo1MzoyMlrOF7zrnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo1MzoyMlrOF7zrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NzA1Mw==", "bodyText": "is there will be puzzle to users:\na key-generator  and referred a XXKeyGenerator \uff1f", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398257053", "createdAt": "2020-03-26T00:53:22Z", "author": {"login": "kimmking"}, "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/withNamespaceGenerateKeyColumns.xml", "diffHunk": "@@ -31,10 +31,18 @@\n     \n     <sharding:standard-strategy id=\"databaseStrategy\" sharding-column=\"user_id\" precise-algorithm-ref=\"preciseModuloDatabaseShardingAlgorithm\" />\n     <sharding:standard-strategy id=\"tableStrategy\" sharding-column=\"order_id\" precise-algorithm-ref=\"preciseModuloTableShardingAlgorithm\" />\n-    \n-    <sharding:key-generator id=\"defaultKeyGenerator\" type=\"INCREMENT\" column=\"id\" />\n-    <sharding:key-generator id=\"itemKeyGenerator\" type=\"DECREMENT\" column=\"order_item_id\" />\n-    <sharding:key-generator id=\"orderKeyGenerator\" type=\"INCREMENT\" column=\"order_id\" />\n+\n+    <bean id=\"incrementKeyGenerator\" class=\"org.apache.shardingsphere.shardingjdbc.spring.namespace.factorybean.KeyGeneratorFactoryBean\">\n+        <constructor-arg value=\"INCREMENT\"/>\n+    </bean>\n+\n+    <bean id=\"decrementKeyGenerator\" class=\"org.apache.shardingsphere.shardingjdbc.spring.namespace.factorybean.KeyGeneratorFactoryBean\">\n+        <constructor-arg value=\"DECREMENT\"/>\n+    </bean>\n+\n+    <sharding:key-generator id=\"defaultKeyGenerator\" column=\"id\" generator-ref=\"incrementKeyGenerator\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDQ0MjIwOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/api/config/sharding/KeyGeneratorConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxNDowOVrOF8ovew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0MDo1MlrOF9Swbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNjM5NQ==", "bodyText": "here we should rename ShardingKeyGenerator SPI to KeyGenerateAlgorithm.\nBe care about modifying all sub class of ShardingKeyGenerator", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r399126395", "createdAt": "2020-03-27T09:14:09Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/api/config/sharding/KeyGeneratorConfiguration.java", "diffHunk": "@@ -20,27 +20,21 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n import lombok.Getter;\n-import org.apache.shardingsphere.underlying.common.config.TypeBasedSPIConfiguration;\n-\n-import java.util.Properties;\n+import org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator;\n \n /**\n  * Key generator configuration.\n */\n @Getter\n-public final class KeyGeneratorConfiguration extends TypeBasedSPIConfiguration {\n+public final class KeyGeneratorConfiguration {\n     \n     private final String column;\n     \n-    public KeyGeneratorConfiguration(final String type, final String column) {\n-        super(type);\n-        Preconditions.checkArgument(!Strings.isNullOrEmpty(column), \"Column is required.\");\n-        this.column = column;\n-    }\n+    private final ShardingKeyGenerator keyGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe90913711b0aa5c4bfb35baad8dc8ea0a515101"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNDc2Nw==", "bodyText": "here we should rename ShardingKeyGenerator SPI to KeyGenerateAlgorithm.\nBe care about modifying all sub class of ShardingKeyGenerator\n\nShardingKeyGenerator has renamed to KeyGenerateAlgorithm, including all sub class of ShardingKeyGenerator and ShardingKeyGeneratorServiceLoader.", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r399814767", "createdAt": "2020-03-29T15:40:52Z", "author": {"login": "TaoZhiMLND"}, "path": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/api/config/sharding/KeyGeneratorConfiguration.java", "diffHunk": "@@ -20,27 +20,21 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n import lombok.Getter;\n-import org.apache.shardingsphere.underlying.common.config.TypeBasedSPIConfiguration;\n-\n-import java.util.Properties;\n+import org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator;\n \n /**\n  * Key generator configuration.\n */\n @Getter\n-public final class KeyGeneratorConfiguration extends TypeBasedSPIConfiguration {\n+public final class KeyGeneratorConfiguration {\n     \n     private final String column;\n     \n-    public KeyGeneratorConfiguration(final String type, final String column) {\n-        super(type);\n-        Preconditions.checkArgument(!Strings.isNullOrEmpty(column), \"Column is required.\");\n-        this.column = column;\n-    }\n+    private final ShardingKeyGenerator keyGenerator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNjM5NQ=="}, "originalCommit": {"oid": "fe90913711b0aa5c4bfb35baad8dc8ea0a515101"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjIxMDQ2OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToxNjowNFrOF9uyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToxNjowNFrOF9uyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3Mzk3Ng==", "bodyText": "containsKeyGeneratorConfiguration => containsKeyGenerateAlgorithm is better", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r400273976", "createdAt": "2020-03-30T15:16:04Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "diffHunk": "@@ -108,14 +108,14 @@ private ShardingStrategy createDefaultShardingStrategy(final ShardingStrategyCon\n         return Optional.ofNullable(shardingStrategyConfiguration).map(ShardingStrategyFactory::newInstance).orElse(new NoneShardingStrategy());\n     }\n     \n-    private ShardingKeyGenerator createDefaultKeyGenerator(final KeyGeneratorConfiguration keyGeneratorConfiguration) {\n-        ShardingKeyGeneratorServiceLoader serviceLoader = new ShardingKeyGeneratorServiceLoader();\n+    private KeyGenerateAlgorithm createDefaultKeyGenerateAlgorithm(final KeyGeneratorConfiguration keyGeneratorConfiguration) {\n+        KeyGenerateAlgorithmServiceLoader serviceLoader = new KeyGenerateAlgorithmServiceLoader();\n         return containsKeyGeneratorConfiguration(keyGeneratorConfiguration)\n-                ? serviceLoader.newService(keyGeneratorConfiguration.getType(), keyGeneratorConfiguration.getProperties()) : serviceLoader.newService();\n+                ? keyGeneratorConfiguration.getKeyGenerateAlgorithm() : serviceLoader.newService();\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final KeyGeneratorConfiguration keyGeneratorConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106d76e5f60b05c7e7dd575b260accef5fe74268"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjIzMTQyOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMDowOFrOF9u_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMDowOFrOF9u_BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3NzI1Mg==", "bodyText": "containsKeyGeneratorConfiguration => containsKeyGenerateAlgorithm is better", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r400277252", "createdAt": "2020-03-30T15:20:08Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -130,7 +129,7 @@ private void addActualTable(final String datasourceName, final String tableName)\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final TableRuleConfiguration tableRuleConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106d76e5f60b05c7e7dd575b260accef5fe74268"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1095, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}