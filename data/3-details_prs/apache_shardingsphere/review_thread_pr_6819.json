{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjQxNjM1", "number": 6819, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozNzozN1rOEYqKPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMToxNFrOEZjr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjkyMDMwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/hint/HintManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozNzozN1rOHBHIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDowODoyM1rOHBLMww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNzQ0MQ==", "bodyText": "Is it necessary to call close again?\nTry with resources is close the resource.", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r470927441", "createdAt": "2020-08-15T02:37:37Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/hint/HintManagerTest.java", "diffHunk": "@@ -111,6 +111,32 @@ public void assertIsDatabaseShardingOnlyWithoutSet() {\n         assertFalse(HintManager.isDatabaseShardingOnly());\n     }\n     \n+    @Test\n+    public void assertAddDatabaseShardingValueOnlyDatabaseSharding() {\n+        try (HintManager hintManager = HintManager.getInstance()) {\n+            hintManager.setDatabaseShardingValue(1);\n+            assertTrue(HintManager.isDatabaseShardingOnly());\n+            hintManager.addDatabaseShardingValue(\"logic_table\", 2);\n+            assertFalse(HintManager.isDatabaseShardingOnly());\n+            assertThat(HintManager.getDatabaseShardingValues(\"logic_table\").size(), is(1));\n+            assertTrue(HintManager.getDatabaseShardingValues(\"logic_table\").contains(2));\n+            hintManager.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbb2339d83e2aaeff173fe63f729963a81381ee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDExNQ==", "bodyText": "ok, i fix it now.", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r470994115", "createdAt": "2020-08-15T14:08:23Z", "author": {"login": "GeniusQ"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/hint/HintManagerTest.java", "diffHunk": "@@ -111,6 +111,32 @@ public void assertIsDatabaseShardingOnlyWithoutSet() {\n         assertFalse(HintManager.isDatabaseShardingOnly());\n     }\n     \n+    @Test\n+    public void assertAddDatabaseShardingValueOnlyDatabaseSharding() {\n+        try (HintManager hintManager = HintManager.getInstance()) {\n+            hintManager.setDatabaseShardingValue(1);\n+            assertTrue(HintManager.isDatabaseShardingOnly());\n+            hintManager.addDatabaseShardingValue(\"logic_table\", 2);\n+            assertFalse(HintManager.isDatabaseShardingOnly());\n+            assertThat(HintManager.getDatabaseShardingValues(\"logic_table\").size(), is(1));\n+            assertTrue(HintManager.getDatabaseShardingValues(\"logic_table\").contains(2));\n+            hintManager.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNzQ0MQ=="}, "originalCommit": {"oid": "bcbb2339d83e2aaeff173fe63f729963a81381ee"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjkyMDU2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/hint/HintManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozNzo1N1rOHBHIbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozNzo1N1rOHBHIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNzQ2OQ==", "bodyText": "Is it necessary to call close again?\nTry with resources is close the resource.", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r470927469", "createdAt": "2020-08-15T02:37:57Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/hint/HintManagerTest.java", "diffHunk": "@@ -111,6 +111,32 @@ public void assertIsDatabaseShardingOnlyWithoutSet() {\n         assertFalse(HintManager.isDatabaseShardingOnly());\n     }\n     \n+    @Test\n+    public void assertAddDatabaseShardingValueOnlyDatabaseSharding() {\n+        try (HintManager hintManager = HintManager.getInstance()) {\n+            hintManager.setDatabaseShardingValue(1);\n+            assertTrue(HintManager.isDatabaseShardingOnly());\n+            hintManager.addDatabaseShardingValue(\"logic_table\", 2);\n+            assertFalse(HintManager.isDatabaseShardingOnly());\n+            assertThat(HintManager.getDatabaseShardingValues(\"logic_table\").size(), is(1));\n+            assertTrue(HintManager.getDatabaseShardingValues(\"logic_table\").contains(2));\n+            hintManager.close();\n+        }\n+    }\n+    \n+    @Test\n+    public void assertAddTableShardingValueOnlyDatabaseSharding() {\n+        try (HintManager hintManager = HintManager.getInstance()) {\n+            hintManager.setDatabaseShardingValue(1);\n+            assertTrue(HintManager.isDatabaseShardingOnly());\n+            hintManager.addTableShardingValue(\"logic_table\", 2);\n+            assertFalse(HintManager.isDatabaseShardingOnly());\n+            assertThat(HintManager.getTableShardingValues(\"logic_table\").size(), is(1));\n+            assertTrue(HintManager.getTableShardingValues(\"logic_table\").contains(2));\n+            hintManager.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbb2339d83e2aaeff173fe63f729963a81381ee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjkyMTA4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/RuleSchemaMetaDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozODo1NVrOHBHIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDowODo0MVrOHBLM0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNzUyNw==", "bodyText": "The assertion of new instance does not make sense.\nPlease add test case for getSchemaMetaData", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r470927527", "createdAt": "2020-08-15T02:38:55Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/RuleSchemaMetaDataTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.infra.metadata.schema;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleSchemaMetaDataTest {\n+    @Test\n+    public void assertNewInstance() {\n+        RuleSchemaMetaData obj = new RuleSchemaMetaData(null, null);\n+        assertNotNull(\"RuleSchemaMetaData is null\", obj);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbb2339d83e2aaeff173fe63f729963a81381ee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDEzMQ==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r470994131", "createdAt": "2020-08-15T14:08:41Z", "author": {"login": "GeniusQ"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/RuleSchemaMetaDataTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.infra.metadata.schema;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleSchemaMetaDataTest {\n+    @Test\n+    public void assertNewInstance() {\n+        RuleSchemaMetaData obj = new RuleSchemaMetaData(null, null);\n+        assertNotNull(\"RuleSchemaMetaData is null\", obj);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNzUyNw=="}, "originalCommit": {"oid": "bcbb2339d83e2aaeff173fe63f729963a81381ee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjM0NTE1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/RuleSchemaMetaDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMToxNFrOHCcKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMToxNFrOHCcKtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMDY5Mg==", "bodyText": "Please add final if the class is not design for extension;\nPlease keep one blank line between class definition and method.", "url": "https://github.com/apache/shardingsphere/pull/6819#discussion_r472320692", "createdAt": "2020-08-18T16:21:14Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/metadata/schema/RuleSchemaMetaDataTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.infra.metadata.schema;\n+\n+import org.apache.shardingsphere.sql.parser.binder.metadata.schema.SchemaMetaData;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+import org.junit.Test;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleSchemaMetaDataTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd26bfba7fa06042f594eacbad57ede941d1477"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 341, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}