{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMjc4Mjc0", "number": 7292, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwMjo0Mzo1MlrOEhD6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjo0MjoxNlrOEhe9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTAyNjA1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dal/ChecksumTableStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwMjo0Mzo1MlrOHOK4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1ODoxOFrOHOMsZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyMDM0Mg==", "bodyText": "Hi @strongduanmu Here ChecksumTableStatement is an abstract class. Does that mean we will have MySQL ChecksumTableStatement, or OracleChecksumTableStatement? But I only saw the definition of MySQL ChecksumTableStatement. Therefore, do you think the abstract class ChecksumTableStatement is required? Or maybe it is more suitable just to have a class named MySQL ChecksumTableStatement?\nOther abstract classes have such an issue as well, so I would like to listen to what you think.", "url": "https://github.com/apache/shardingsphere/pull/7292#discussion_r484620342", "createdAt": "2020-09-08T02:43:52Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dal/ChecksumTableStatement.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.statement.dal;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement;\n+\n+/**\n+ * Checksum table statement.\n+ */\n+public abstract class ChecksumTableStatement extends AbstractSQLStatement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd4ebc2a3411601078187cacd8d1e63dc18803f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1MDA4NQ==", "bodyText": "@tristaZero This way is to ensure the consistency of the processing logic. Whether there is one subclass or multiple subclasses, it can be processed towards the parent class. Only when there is a special SQL dialect, the subclass will be used. \ud83d\ude02\nOf course, when the SQL statement has only one dialect, this may cause users to misunderstand that it is a general statement.", "url": "https://github.com/apache/shardingsphere/pull/7292#discussion_r484650085", "createdAt": "2020-09-08T04:58:18Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dal/ChecksumTableStatement.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.statement.dal;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement;\n+\n+/**\n+ * Checksum table statement.\n+ */\n+public abstract class ChecksumTableStatement extends AbstractSQLStatement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYyMDM0Mg=="}, "originalCommit": {"oid": "dbd4ebc2a3411601078187cacd8d1e63dc18803f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTQ1NzM2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/statement/mysql/dal/MySQLAnalyzeTableStatement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjo0MjoxNlrOHO0mOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzoxMTozMVrOHO1C4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzg2NA==", "bodyText": "Hi @strongduanmu\nWhere is MySQLAnalyzeTableStatement used?", "url": "https://github.com/apache/shardingsphere/pull/7292#discussion_r485303864", "createdAt": "2020-09-09T02:42:16Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/statement/mysql/dal/MySQLAnalyzeTableStatement.java", "diffHunk": "@@ -17,12 +17,12 @@\n \n package org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal;\n \n-import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.AnalyzeTableStatement;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n \n /**\n- * Analyze table statement.\n+ * MySQL analyze table statement.\n  */\n-public final class MySQLAnalyzeTableStatement extends AbstractSQLStatement implements DALStatement, MySQLStatement {\n+public final class MySQLAnalyzeTableStatement extends AnalyzeTableStatement implements DALStatement, MySQLStatement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cd1eb6cfeacc31ccb326293e63debc3cc82614"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwODUwNw==", "bodyText": "Hi @strongduanmu\nWhere is MySQLAnalyzeTableStatement used?\n\n@tristaZero Now, MySQLAnalyzeTableStatement is only used in the MySQLDALVisitor class for parsing. The execution of anlyze table statement is not yet supported.", "url": "https://github.com/apache/shardingsphere/pull/7292#discussion_r485308507", "createdAt": "2020-09-09T03:00:48Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/statement/mysql/dal/MySQLAnalyzeTableStatement.java", "diffHunk": "@@ -17,12 +17,12 @@\n \n package org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal;\n \n-import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.AnalyzeTableStatement;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n \n /**\n- * Analyze table statement.\n+ * MySQL analyze table statement.\n  */\n-public final class MySQLAnalyzeTableStatement extends AbstractSQLStatement implements DALStatement, MySQLStatement {\n+public final class MySQLAnalyzeTableStatement extends AnalyzeTableStatement implements DALStatement, MySQLStatement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzg2NA=="}, "originalCommit": {"oid": "e2cd1eb6cfeacc31ccb326293e63debc3cc82614"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMTIwMw==", "bodyText": "Thanks for your explanation. Merged.", "url": "https://github.com/apache/shardingsphere/pull/7292#discussion_r485311203", "createdAt": "2020-09-09T03:11:31Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/statement/mysql/dal/MySQLAnalyzeTableStatement.java", "diffHunk": "@@ -17,12 +17,12 @@\n \n package org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal;\n \n-import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.AnalyzeTableStatement;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n \n /**\n- * Analyze table statement.\n+ * MySQL analyze table statement.\n  */\n-public final class MySQLAnalyzeTableStatement extends AbstractSQLStatement implements DALStatement, MySQLStatement {\n+public final class MySQLAnalyzeTableStatement extends AnalyzeTableStatement implements DALStatement, MySQLStatement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzg2NA=="}, "originalCommit": {"oid": "e2cd1eb6cfeacc31ccb326293e63debc3cc82614"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 710, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}