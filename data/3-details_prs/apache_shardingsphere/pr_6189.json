{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTc1NjYw", "number": 6189, "title": "add unit test for sharding-transaction-xa-narayana-manager module.", "bodyText": "For #5302.", "createdAt": "2020-06-26T13:06:50Z", "url": "https://github.com/apache/shardingsphere/pull/6189", "merged": true, "mergeCommit": {"oid": "013e035e609174a92635749669dd71c8c48c45cc"}, "closed": true, "closedAt": "2020-07-25T14:32:59Z", "author": {"login": "TaoZhiMLND"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvC6FzgH2gAyNDQwNTc1NjYwOjdlNzk3M2YzZTczMTQ3NjgxZGNmZThhOGNjY2YwYzcxYmNkNmM2Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4Zj7vgFqTQ1NTI4ODU3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e7973f3e73147681dcfe8a8cccf0c71bcd6c668", "author": {"user": {"login": "TaoZhiMLND", "name": "TaoZhi"}}, "url": "https://github.com/apache/shardingsphere/commit/7e7973f3e73147681dcfe8a8cccf0c71bcd6c668", "committedDate": "2020-06-26T13:03:47Z", "message": "add unit test for sharding-transaction-xa-narayana-manager module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f22e91ed8185084dc1e42d55519ab5f735fcebd9", "author": {"user": {"login": "TaoZhiMLND", "name": "TaoZhi"}}, "url": "https://github.com/apache/shardingsphere/commit/f22e91ed8185084dc1e42d55519ab5f735fcebd9", "committedDate": "2020-06-26T13:37:24Z", "message": "add apache license."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM2Mzg1", "url": "https://github.com/apache/shardingsphere/pull/6189#pullrequestreview-438736385", "createdAt": "2020-06-28T01:59:30Z", "commit": {"oid": "f22e91ed8185084dc1e42d55519ab5f735fcebd9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTo1OTozMVrOGp5n_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjowMzoyNFrOGp5pCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4ODkyNQ==", "bodyText": "for checkstyle: this.delegate == null => null == this.delegate", "url": "https://github.com/apache/shardingsphere/pull/6189#discussion_r446588925", "createdAt": "2020-06-28T01:59:31Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-transaction/shardingsphere-transaction-2pc/shardingsphere-transaction-xa/shardingsphere-transaction-xa-narayana/src/main/java/org/apache/shardingsphere/transaction/xa/narayana/manager/DataSourceXAResourceRecoveryHelper.java", "diffHunk": "@@ -124,51 +124,51 @@ private void disconnect() {\n     \n     @Override\n     public void start(final Xid xid, final int flags) throws XAException {\n-        getDelegate(true).start(xid, flags);\n+        getDelegate().start(xid, flags);\n     }\n     \n     @Override\n     public void end(final Xid xid, final int flags) throws XAException {\n-        getDelegate(true).end(xid, flags);\n+        getDelegate().end(xid, flags);\n     }\n     \n     @Override\n     public int prepare(final Xid xid) throws XAException {\n-        return getDelegate(true).prepare(xid);\n+        return getDelegate().prepare(xid);\n     }\n     \n     @Override\n     public void commit(final Xid xid, final boolean onePhase) throws XAException {\n-        getDelegate(true).commit(xid, onePhase);\n+        getDelegate().commit(xid, onePhase);\n     }\n     \n     @Override\n     public void rollback(final Xid xid) throws XAException {\n-        getDelegate(true).rollback(xid);\n+        getDelegate().rollback(xid);\n     }\n     \n     @Override\n     public boolean isSameRM(final XAResource xaResource) throws XAException {\n-        return getDelegate(true).isSameRM(xaResource);\n+        return getDelegate().isSameRM(xaResource);\n     }\n     \n     @Override\n     public void forget(final Xid xid) throws XAException {\n-        getDelegate(true).forget(xid);\n+        getDelegate().forget(xid);\n     }\n     \n     @Override\n     public int getTransactionTimeout() throws XAException {\n-        return getDelegate(true).getTransactionTimeout();\n+        return getDelegate().getTransactionTimeout();\n     }\n     \n     @Override\n     public boolean setTransactionTimeout(final int seconds) throws XAException {\n-        return getDelegate(true).setTransactionTimeout(seconds);\n+        return getDelegate().setTransactionTimeout(seconds);\n     }\n     \n-    private XAResource getDelegate(final boolean required) {\n-        if (this.delegate == null && required) {\n+    private XAResource getDelegate() {\n+        if (this.delegate == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22e91ed8185084dc1e42d55519ab5f735fcebd9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTE5NA==", "bodyText": "for check style: we can import static import Assert.assert here\nAssert.assertThat() => assertThat()", "url": "https://github.com/apache/shardingsphere/pull/6189#discussion_r446589194", "createdAt": "2020-06-28T02:03:24Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-transaction/shardingsphere-transaction-2pc/shardingsphere-transaction-xa/shardingsphere-transaction-xa-narayana/src/test/java/org/apache/shardingsphere/transaction/xa/narayana/manager/DataSourceXAResourceRecoveryHelperTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.transaction.xa.narayana.manager;\n+\n+import javax.sql.XAConnection;\n+import javax.sql.XADataSource;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.transaction.xa.narayana.manager.fixture.ReflectiveUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DataSourceXAResourceRecoveryHelperTest {\n+    \n+    @Mock\n+    private XADataSource xaDataSource;\n+    \n+    @Mock\n+    private XAResource xaResource;\n+    \n+    @Mock\n+    private XAConnection xaConnection;\n+    \n+    private DataSourceXAResourceRecoveryHelper recoveryHelper;\n+    \n+    @SneakyThrows\n+    @Before\n+    public void setUp() {\n+        when(xaConnection.getXAResource()).thenReturn(xaResource);\n+        when(xaDataSource.getXAConnection()).thenReturn(xaConnection);\n+        recoveryHelper = new DataSourceXAResourceRecoveryHelper(xaDataSource);\n+    }\n+    \n+    @SneakyThrows\n+    @Test\n+    public void assertGetXAResourcesCreatingConnecting() {\n+        recoveryHelper.getXAResources();\n+        XAResource[] xaResources = recoveryHelper.getXAResources();\n+        assertEquals(1, xaResources.length);\n+        Assert.assertThat(xaResources[0], sameInstance(recoveryHelper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22e91ed8185084dc1e42d55519ab5f735fcebd9"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Mjg4NTc3", "url": "https://github.com/apache/shardingsphere/pull/6189#pullrequestreview-455288577", "createdAt": "2020-07-25T14:32:43Z", "commit": {"oid": "f22e91ed8185084dc1e42d55519ab5f735fcebd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}