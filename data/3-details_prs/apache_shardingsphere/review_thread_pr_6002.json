{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTg1MDUx", "number": 6002, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNDoxNlrOEEtBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNTowNVrOEEtCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzY3MzE0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/circuit/connection/CircuitBreakerConnection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNDoxNlrOGifW2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTowNDoxMFrOGsZ3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODUyMw==", "bodyText": "why true?", "url": "https://github.com/apache/shardingsphere/pull/6002#discussion_r438818523", "createdAt": "2020-06-11T14:14:16Z", "author": {"login": "kimmking"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/circuit/connection/CircuitBreakerConnection.java", "diffHunk": "@@ -127,7 +128,12 @@ public PreparedStatement prepareStatement(final String sql, final int[] columnIn\n     public PreparedStatement prepareStatement(final String sql, final String[] columnNames) {\n         return new CircuitBreakerPreparedStatement();\n     }\n-    \n+\n+    @Override\n+    public boolean isValid(final int timeout) throws SQLException {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c191c9571ab5a2e9e6d3f0c0f84c8bb6cd36d851"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4NzA2MQ==", "bodyText": "As far as the health check is concerned, the service should still be up when the CircuitBreak  is open, so I think isValid method returns true.", "url": "https://github.com/apache/shardingsphere/pull/6002#discussion_r439187061", "createdAt": "2020-06-12T03:26:59Z", "author": {"login": "WEIZIBIN"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/circuit/connection/CircuitBreakerConnection.java", "diffHunk": "@@ -127,7 +128,12 @@ public PreparedStatement prepareStatement(final String sql, final int[] columnIn\n     public PreparedStatement prepareStatement(final String sql, final String[] columnNames) {\n         return new CircuitBreakerPreparedStatement();\n     }\n-    \n+\n+    @Override\n+    public boolean isValid(final int timeout) throws SQLException {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODUyMw=="}, "originalCommit": {"oid": "c191c9571ab5a2e9e6d3f0c0f84c8bb6cd36d851"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxNDM1NA==", "bodyText": "After upgrading spring-boot to version 2.3.1, I also encountered \"new SQLFeatureNotSupportedException(\"isValid\")\".\nspring-boot-actuator will perform database heartbeat detection according to the configuration file.\nIn the \"org.springframework.boot.actuate.jdbc.DataSourceHealthIndicator#doDataSourceHealthCheck\" method, different heartbeats will be detected based on whether the'query' variable in the DataSourceHealthIndicator class has a value.\nIf'query' is not assigned, it will directly call java .sql.Connection#isValid This specific implementation method.\nBecause shardingJDBC does not implement the java.sql.Connection#isValid method, it will directly report the error \"new SQLFeatureNotSupportedException(\"isValid\")\".\nCurrently shardingJDBC does not support the java.sql.Connection#isValid method.\nIn order to solve the above problem, you can inherit the \"DataSourceHealthContributorAutoConfiguration\" method, override the createIndicator method, and set the \"query\" variable in the DataSourceHealthIndicator class, for example, set it to \"select 1\".\nAfter setting the variable \"query\",\nthe doDataSourceHealthCheck method will call the \"org.springframework.jdbc.core.JdbcTemplate#query(java.lang.String, org.springframework.jdbc.core.RowMapper)\" method to complete the database Heartbeat detection.", "url": "https://github.com/apache/shardingsphere/pull/6002#discussion_r449214354", "createdAt": "2020-07-02T19:04:10Z", "author": {"login": "DeShun-1024"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/circuit/connection/CircuitBreakerConnection.java", "diffHunk": "@@ -127,7 +128,12 @@ public PreparedStatement prepareStatement(final String sql, final int[] columnIn\n     public PreparedStatement prepareStatement(final String sql, final String[] columnNames) {\n         return new CircuitBreakerPreparedStatement();\n     }\n-    \n+\n+    @Override\n+    public boolean isValid(final int timeout) throws SQLException {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODUyMw=="}, "originalCommit": {"oid": "c191c9571ab5a2e9e6d3f0c0f84c8bb6cd36d851"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzY3NjQ2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNTowNlrOGifZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzozMToyMlrOGi157w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxOTEwMA==", "bodyText": "is there some cases need return true, such as m-s?", "url": "https://github.com/apache/shardingsphere/pull/6002#discussion_r438819100", "createdAt": "2020-06-11T14:15:06Z", "author": {"login": "kimmking"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java", "diffHunk": "@@ -239,6 +239,16 @@ public final void setTransactionIsolation(final int level) throws SQLException {\n         recordMethodInvocation(Connection.class, \"setTransactionIsolation\", new Class[]{int.class}, new Object[]{level});\n         forceExecuteTemplate.execute(cachedConnections.values(), connection -> connection.setTransactionIsolation(level));\n     }\n+\n+    @Override\n+    public final boolean isValid(final int timeout) throws SQLException {\n+        for (Connection connection : cachedConnections.values()) {\n+            if (!connection.isValid(timeout)) {\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c191c9571ab5a2e9e6d3f0c0f84c8bb6cd36d851"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4Nzk1MQ==", "bodyText": "Do you mean when master is up and slave goes down, it should return true?\nThis seems better, i will try to identify which connections are from the master data source.", "url": "https://github.com/apache/shardingsphere/pull/6002#discussion_r439187951", "createdAt": "2020-06-12T03:31:22Z", "author": {"login": "WEIZIBIN"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java", "diffHunk": "@@ -239,6 +239,16 @@ public final void setTransactionIsolation(final int level) throws SQLException {\n         recordMethodInvocation(Connection.class, \"setTransactionIsolation\", new Class[]{int.class}, new Object[]{level});\n         forceExecuteTemplate.execute(cachedConnections.values(), connection -> connection.setTransactionIsolation(level));\n     }\n+\n+    @Override\n+    public final boolean isValid(final int timeout) throws SQLException {\n+        for (Connection connection : cachedConnections.values()) {\n+            if (!connection.isValid(timeout)) {\n+                return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxOTEwMA=="}, "originalCommit": {"oid": "c191c9571ab5a2e9e6d3f0c0f84c8bb6cd36d851"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 793, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}