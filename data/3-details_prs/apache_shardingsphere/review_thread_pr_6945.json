{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTM3Nzg2", "number": 6945, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNDowMFrOEadZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNDowMFrOEadZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTgwMTk0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-boot-starter/src/test/java/org/apache/shardingsphere/sharding/spring/boot/ShardingSpringBootStarterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNDowMFrOHD588g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0OTo0MlrOHEZw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r473857266", "createdAt": "2020-08-20T10:24:00Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-boot-starter/src/test/java/org/apache/shardingsphere/sharding/spring/boot/ShardingSpringBootStarterTest.java", "diffHunk": "@@ -68,6 +74,47 @@ public void assertKeyGenerateAlgorithm() {\n     @Test\n     public void assertShardingConfiguration() {\n         assertThat(shardingRuleConfiguration.getTables().size(), is(2));\n-        // TODO assert sharding configuration\n+        List<ShardingTableRuleConfiguration> shardingTableRuleConfigurationList = Lists.newArrayList(shardingRuleConfiguration.getTables());\n+        assertThat(shardingTableRuleConfigurationList.get(0).getLogicTable(), is(\"t_order\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(0).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getLogicTable(), is(\"t_order_item\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_item_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(1).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderItemTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getColumn(), is(\"order_item_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+\n+        assertThat(shardingRuleConfiguration.getBindingTableGroups().size(), is(2));\n+        List<String> bindingTableGroupsList = new ArrayList<>(shardingRuleConfiguration.getBindingTableGroups());\n+        assertThat(bindingTableGroupsList.get(0), is(\"t_order\"));\n+        assertThat(bindingTableGroupsList.get(1), is(\"t_order_item\"));\n+\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().size(), is(1));\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().iterator().next(), is(\"t_config\"));\n+\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingRuleConfiguration.getDefaultDatabaseShardingStrategy()).getShardingColumn(), is(\"user_id\"));\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"databaseShardingAlgorithm\"));\n+    \n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().size(), is(3));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_item_$->{order_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{user_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 2}\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e505fac588c6a36e496a3b53740e213ff1ae52"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMTY1Mg==", "bodyText": "that's for separete the different case . is that not the ss coding rule ?", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r473921652", "createdAt": "2020-08-20T12:09:58Z", "author": {"login": "taojintianxia"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-boot-starter/src/test/java/org/apache/shardingsphere/sharding/spring/boot/ShardingSpringBootStarterTest.java", "diffHunk": "@@ -68,6 +74,47 @@ public void assertKeyGenerateAlgorithm() {\n     @Test\n     public void assertShardingConfiguration() {\n         assertThat(shardingRuleConfiguration.getTables().size(), is(2));\n-        // TODO assert sharding configuration\n+        List<ShardingTableRuleConfiguration> shardingTableRuleConfigurationList = Lists.newArrayList(shardingRuleConfiguration.getTables());\n+        assertThat(shardingTableRuleConfigurationList.get(0).getLogicTable(), is(\"t_order\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(0).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getLogicTable(), is(\"t_order_item\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_item_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(1).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderItemTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getColumn(), is(\"order_item_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+\n+        assertThat(shardingRuleConfiguration.getBindingTableGroups().size(), is(2));\n+        List<String> bindingTableGroupsList = new ArrayList<>(shardingRuleConfiguration.getBindingTableGroups());\n+        assertThat(bindingTableGroupsList.get(0), is(\"t_order\"));\n+        assertThat(bindingTableGroupsList.get(1), is(\"t_order_item\"));\n+\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().size(), is(1));\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().iterator().next(), is(\"t_config\"));\n+\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingRuleConfiguration.getDefaultDatabaseShardingStrategy()).getShardingColumn(), is(\"user_id\"));\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"databaseShardingAlgorithm\"));\n+    \n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().size(), is(3));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_item_$->{order_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{user_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 2}\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng=="}, "originalCommit": {"oid": "48e505fac588c6a36e496a3b53740e213ff1ae52"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3ODQ1MQ==", "bodyText": "For example:\nassertShardingConfiguration can be composited by assertTableShardingStrategy, assertDatabaseShardingStrategy, assertKeyGenerator etc...", "url": "https://github.com/apache/shardingsphere/pull/6945#discussion_r474378451", "createdAt": "2020-08-21T02:49:42Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-boot-starter/src/test/java/org/apache/shardingsphere/sharding/spring/boot/ShardingSpringBootStarterTest.java", "diffHunk": "@@ -68,6 +74,47 @@ public void assertKeyGenerateAlgorithm() {\n     @Test\n     public void assertShardingConfiguration() {\n         assertThat(shardingRuleConfiguration.getTables().size(), is(2));\n-        // TODO assert sharding configuration\n+        List<ShardingTableRuleConfiguration> shardingTableRuleConfigurationList = Lists.newArrayList(shardingRuleConfiguration.getTables());\n+        assertThat(shardingTableRuleConfigurationList.get(0).getLogicTable(), is(\"t_order\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(0).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(0).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getLogicTable(), is(\"t_order_item\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getActualDataNodes(), is(\"ds_$->{0..1}.t_order_item_$->{0..1}\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingTableRuleConfigurationList.get(1).getTableShardingStrategy()).getShardingColumn(), is(\"order_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderItemTableShardingAlgorithm\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getColumn(), is(\"order_item_id\"));\n+        assertThat(shardingTableRuleConfigurationList.get(1).getKeyGenerateStrategy().getKeyGeneratorName(), is(\"keyGenerator\"));\n+\n+        assertThat(shardingRuleConfiguration.getBindingTableGroups().size(), is(2));\n+        List<String> bindingTableGroupsList = new ArrayList<>(shardingRuleConfiguration.getBindingTableGroups());\n+        assertThat(bindingTableGroupsList.get(0), is(\"t_order\"));\n+        assertThat(bindingTableGroupsList.get(1), is(\"t_order_item\"));\n+\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().size(), is(1));\n+        assertThat(shardingRuleConfiguration.getBroadcastTables().iterator().next(), is(\"t_config\"));\n+\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy(), instanceOf(StandardShardingStrategyConfiguration.class));\n+        assertThat(((StandardShardingStrategyConfiguration) shardingRuleConfiguration.getDefaultDatabaseShardingStrategy()).getShardingColumn(), is(\"user_id\"));\n+        assertThat(shardingRuleConfiguration.getDefaultDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"databaseShardingAlgorithm\"));\n+    \n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().size(), is(3));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderItemTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_item_$->{order_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"databaseShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{user_id % 2}\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\"), instanceOf(InlineShardingAlgorithm.class));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getType(), is(\"INLINE\"));\n+        assertThat(shardingRuleConfiguration.getShardingAlgorithms().get(\"orderTableShardingAlgorithm\").getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 2}\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzI2Ng=="}, "originalCommit": {"oid": "48e505fac588c6a36e496a3b53740e213ff1ae52"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 366, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}