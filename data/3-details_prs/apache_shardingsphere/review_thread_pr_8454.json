{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMjI5MTMw", "number": 8454, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODoyNVrOE_G3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODo0NlrOE_G3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjA4MTgzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/update/UpdateResponseHeaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODoyNVrOH8oVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODoyNVrOH8oVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzNzU0MQ==", "bodyText": "Please remove unnecessary comment", "url": "https://github.com/apache/shardingsphere/pull/8454#discussion_r533337541", "createdAt": "2020-12-01T11:28:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/update/UpdateResponseHeaderTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.response.header.update;\n+\n+import org.apache.shardingsphere.infra.executor.sql.execute.result.ExecuteResult;\n+import org.apache.shardingsphere.infra.executor.sql.execute.result.update.UpdateResult;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+public final class UpdateResponseHeaderTest {\n+\n+    @Test\n+    public void assertPropertiesWhenExecuteResultOfEmptyList() {\n+        UpdateResponseHeader updateResponseHeader = new UpdateResponseHeader(mock(SQLStatement.class));\n+        assertThat(updateResponseHeader.getLastInsertId(), is(0L));\n+        //before mergeUpdateCount", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18660374eeeddbf02b49fe60a691ea5c9a38e599"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjA4MzAzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/update/UpdateResponseHeaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODo0NlrOH8oWhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyODo0NlrOH8oWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzNzczMg==", "bodyText": "Please remove unnecessary blank lines", "url": "https://github.com/apache/shardingsphere/pull/8454#discussion_r533337732", "createdAt": "2020-12-01T11:28:46Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/response/header/update/UpdateResponseHeaderTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.response.header.update;\n+\n+import org.apache.shardingsphere.infra.executor.sql.execute.result.ExecuteResult;\n+import org.apache.shardingsphere.infra.executor.sql.execute.result.update.UpdateResult;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+public final class UpdateResponseHeaderTest {\n+\n+    @Test\n+    public void assertPropertiesWhenExecuteResultOfEmptyList() {\n+        UpdateResponseHeader updateResponseHeader = new UpdateResponseHeader(mock(SQLStatement.class));\n+        assertThat(updateResponseHeader.getLastInsertId(), is(0L));\n+        //before mergeUpdateCount\n+        assertThat(updateResponseHeader.getUpdateCount(), is(0L));\n+        updateResponseHeader.mergeUpdateCount();\n+        //after mergeUpdateCount\n+        assertThat(updateResponseHeader.getUpdateCount(), is(0L));\n+    }\n+\n+    @Test\n+    public void assertPropertiesWhenExecuteResultOfNotEmptyList() {\n+        UpdateResponseHeader updateResponseHeader = new UpdateResponseHeader(mock(SQLStatement.class), getExecuteUpdateResults());\n+        assertThat(updateResponseHeader.getLastInsertId(), is(4L));\n+        //before mergeUpdateCount\n+        assertThat(updateResponseHeader.getUpdateCount(), is(1L));\n+        updateResponseHeader.mergeUpdateCount();\n+        //after mergeUpdateCount\n+        assertThat(updateResponseHeader.getUpdateCount(), is(4L));\n+    }\n+\n+    private Collection<ExecuteResult> getExecuteUpdateResults() {\n+        UpdateResult updateResult1 = new UpdateResult(1, 2L);\n+        UpdateResult updateResult2 = new UpdateResult(3, 4L);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18660374eeeddbf02b49fe60a691ea5c9a38e599"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 516, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}