{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTU3OTM3", "number": 8141, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1NzowMlrOE4lHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzozNjo0MFrOE5QkQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzYzODY2OnYy", "diffSide": "LEFT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1NzowMlrOHyl48A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1NzowMlrOHyl48A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMTYzMg==", "bodyText": "keep four blank.", "url": "https://github.com/apache/shardingsphere/pull/8141#discussion_r522811632", "createdAt": "2020-11-13T08:57:02Z", "author": {"login": "kimmking"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "diffHunk": "@@ -40,59 +39,60 @@\n import static org.mockito.Mockito.when;\n \n public final class DataNodesTest {\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5e1aeadaa834346612c3e4dc2e8ca7ba2340f8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDc1NzEyOnYy", "diffSide": "LEFT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzozNjo0MFrOHznTAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMTo0MVrOH0r9dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4MzI2Ng==", "bodyText": "Hi @wenweibin\nDo you think TestShardingSphereRule is no longer needed? If so, please delete them. Thanks.", "url": "https://github.com/apache/shardingsphere/pull/8141#discussion_r523883266", "createdAt": "2020-11-16T03:36:40Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "diffHunk": "@@ -79,18 +77,19 @@ public void assertGetDataNodeGroups() {\n     }\n     \n     private DataNodes getRoutedRuleDataNodes() {\n-        TestTableRule tableRule1 = new TestTableRule(dataSourceNames1, logicTableName1);\n-        TestTableRule tableRule2 = new TestTableRule(dataSourceNames2, logicTableName2);\n-        List<TestTableRule> tableRules = Arrays.asList(tableRule1, tableRule2);\n-        ShardingSphereRule rule1 = new TestShardingRule(tableRules);\n+        Map<String, Collection<DataNode>> nodeMap = new HashMap<>();\n+        nodeMap.put(logicTableName1, getExpectedDataNodes(dataSourceNames1, logicTableName1));\n+        nodeMap.put(logicTableName2, getExpectedDataNodes(dataSourceNames2, logicTableName2));\n+        DataNodeContainedRule rule1 = mock(DataNodeContainedRule.class);\n+        when(rule1.getAllDataNodes()).thenReturn(nodeMap);\n         Map<String, Collection<String>> dataSourceMapper = Collections.singletonMap(logicDataSourceName, replicaDataSourceNames);\n         DataSourceContainedRule rule2 = mock(DataSourceContainedRule.class);\n         when(rule2.getDataSourceMapper()).thenReturn(dataSourceMapper);\n         return new DataNodes(Arrays.asList(rule1, rule2));\n     }\n     \n     private DataNodes getNonRoutedRuleDataNodes() {\n-        return new DataNodes(Collections.singleton(new TestShardingSphereRule()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef2a176893a8b4d4beab76d611570b95954fdc18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NzcwNQ==", "bodyText": "Yes.I will delete them.", "url": "https://github.com/apache/shardingsphere/pull/8141#discussion_r524277705", "createdAt": "2020-11-16T13:46:10Z", "author": {"login": "wenweibin"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "diffHunk": "@@ -79,18 +77,19 @@ public void assertGetDataNodeGroups() {\n     }\n     \n     private DataNodes getRoutedRuleDataNodes() {\n-        TestTableRule tableRule1 = new TestTableRule(dataSourceNames1, logicTableName1);\n-        TestTableRule tableRule2 = new TestTableRule(dataSourceNames2, logicTableName2);\n-        List<TestTableRule> tableRules = Arrays.asList(tableRule1, tableRule2);\n-        ShardingSphereRule rule1 = new TestShardingRule(tableRules);\n+        Map<String, Collection<DataNode>> nodeMap = new HashMap<>();\n+        nodeMap.put(logicTableName1, getExpectedDataNodes(dataSourceNames1, logicTableName1));\n+        nodeMap.put(logicTableName2, getExpectedDataNodes(dataSourceNames2, logicTableName2));\n+        DataNodeContainedRule rule1 = mock(DataNodeContainedRule.class);\n+        when(rule1.getAllDataNodes()).thenReturn(nodeMap);\n         Map<String, Collection<String>> dataSourceMapper = Collections.singletonMap(logicDataSourceName, replicaDataSourceNames);\n         DataSourceContainedRule rule2 = mock(DataSourceContainedRule.class);\n         when(rule2.getDataSourceMapper()).thenReturn(dataSourceMapper);\n         return new DataNodes(Arrays.asList(rule1, rule2));\n     }\n     \n     private DataNodes getNonRoutedRuleDataNodes() {\n-        return new DataNodes(Collections.singleton(new TestShardingSphereRule()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4MzI2Ng=="}, "originalCommit": {"oid": "ef2a176893a8b4d4beab76d611570b95954fdc18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyOTUyMA==", "bodyText": "You will remove them in the next PR, won't you?", "url": "https://github.com/apache/shardingsphere/pull/8141#discussion_r524829520", "createdAt": "2020-11-17T01:40:13Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "diffHunk": "@@ -79,18 +77,19 @@ public void assertGetDataNodeGroups() {\n     }\n     \n     private DataNodes getRoutedRuleDataNodes() {\n-        TestTableRule tableRule1 = new TestTableRule(dataSourceNames1, logicTableName1);\n-        TestTableRule tableRule2 = new TestTableRule(dataSourceNames2, logicTableName2);\n-        List<TestTableRule> tableRules = Arrays.asList(tableRule1, tableRule2);\n-        ShardingSphereRule rule1 = new TestShardingRule(tableRules);\n+        Map<String, Collection<DataNode>> nodeMap = new HashMap<>();\n+        nodeMap.put(logicTableName1, getExpectedDataNodes(dataSourceNames1, logicTableName1));\n+        nodeMap.put(logicTableName2, getExpectedDataNodes(dataSourceNames2, logicTableName2));\n+        DataNodeContainedRule rule1 = mock(DataNodeContainedRule.class);\n+        when(rule1.getAllDataNodes()).thenReturn(nodeMap);\n         Map<String, Collection<String>> dataSourceMapper = Collections.singletonMap(logicDataSourceName, replicaDataSourceNames);\n         DataSourceContainedRule rule2 = mock(DataSourceContainedRule.class);\n         when(rule2.getDataSourceMapper()).thenReturn(dataSourceMapper);\n         return new DataNodes(Arrays.asList(rule1, rule2));\n     }\n     \n     private DataNodes getNonRoutedRuleDataNodes() {\n-        return new DataNodes(Collections.singleton(new TestShardingSphereRule()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4MzI2Ng=="}, "originalCommit": {"oid": "ef2a176893a8b4d4beab76d611570b95954fdc18"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwODI0Nw==", "bodyText": "OK.I will finish it in next pr.", "url": "https://github.com/apache/shardingsphere/pull/8141#discussion_r525008247", "createdAt": "2020-11-17T09:31:41Z", "author": {"login": "wenweibin"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/rule/DataNodesTest.java", "diffHunk": "@@ -79,18 +77,19 @@ public void assertGetDataNodeGroups() {\n     }\n     \n     private DataNodes getRoutedRuleDataNodes() {\n-        TestTableRule tableRule1 = new TestTableRule(dataSourceNames1, logicTableName1);\n-        TestTableRule tableRule2 = new TestTableRule(dataSourceNames2, logicTableName2);\n-        List<TestTableRule> tableRules = Arrays.asList(tableRule1, tableRule2);\n-        ShardingSphereRule rule1 = new TestShardingRule(tableRules);\n+        Map<String, Collection<DataNode>> nodeMap = new HashMap<>();\n+        nodeMap.put(logicTableName1, getExpectedDataNodes(dataSourceNames1, logicTableName1));\n+        nodeMap.put(logicTableName2, getExpectedDataNodes(dataSourceNames2, logicTableName2));\n+        DataNodeContainedRule rule1 = mock(DataNodeContainedRule.class);\n+        when(rule1.getAllDataNodes()).thenReturn(nodeMap);\n         Map<String, Collection<String>> dataSourceMapper = Collections.singletonMap(logicDataSourceName, replicaDataSourceNames);\n         DataSourceContainedRule rule2 = mock(DataSourceContainedRule.class);\n         when(rule2.getDataSourceMapper()).thenReturn(dataSourceMapper);\n         return new DataNodes(Arrays.asList(rule1, rule2));\n     }\n     \n     private DataNodes getNonRoutedRuleDataNodes() {\n-        return new DataNodes(Collections.singleton(new TestShardingSphereRule()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4MzI2Ng=="}, "originalCommit": {"oid": "ef2a176893a8b4d4beab76d611570b95954fdc18"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}