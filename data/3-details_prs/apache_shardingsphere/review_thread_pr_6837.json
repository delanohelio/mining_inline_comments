{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODIxMjEy", "number": 6837, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzo1MDo0NlrOEYqdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzo1MDo0NlrOEYqdiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk2OTY4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzo1MDo0N1rOHBHffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzo1MDo0N1rOHBHffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMzM3Mg==", "bodyText": "What's the difference between TableExtractUtils.getRealTableFromSelect(getSqlStatement()); and TableExtractUtils.getTableFromSelect(getSqlStatement());?\nBesides, can we consider another function name full of description  for getRealTableFromSelect ?", "url": "https://github.com/apache/shardingsphere/pull/6837#discussion_r470933372", "createdAt": "2020-08-15T03:50:47Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -194,68 +178,7 @@ public boolean isSameGroupByAndOrderByItems() {\n     \n     @Override\n     public Collection<SimpleTableSegment> getAllTables() {\n-        return getTableFromSelect(getSqlStatement());\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromWhere(final WhereSegment where, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (AndPredicate each : where.getAndPredicates()) {\n-            for (PredicateSegment predicate : each.getPredicates()) {\n-                result.addAll(new PredicateExtractor(tableSegments, predicate).extractTables());\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromProjections(final ProjectionsSegment projections, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (ProjectionSegment each : projections.getProjections()) {\n-            Optional<SimpleTableSegment> table = getTableSegment(each, tableSegments);\n-            table.ifPresent(result::add);\n-        }\n-        return result;\n-    }\n-    \n-    private Optional<SimpleTableSegment> getTableSegment(final ProjectionSegment each, final Collection<TableSegment> tableSegments) {\n-        Optional<OwnerSegment> owner = getTableOwner(each);\n-        if (owner.isPresent() && isTable(owner.get(), tableSegments)) {\n-            return Optional .of(new SimpleTableSegment(owner.get().getStartIndex(), owner.get().getStopIndex(), owner.get().getIdentifier()));\n-        }\n-        return Optional.empty();\n-    }\n-    \n-    private Optional<OwnerSegment> getTableOwner(final ProjectionSegment each) {\n-        if (each instanceof OwnerAvailable) {\n-            return ((OwnerAvailable) each).getOwner();\n-        }\n-        if (each instanceof ColumnProjectionSegment) {\n-            return ((ColumnProjectionSegment) each).getColumn().getOwner();\n-        }\n-        return Optional.empty();\n-    }\n-    \n-    private Collection<SimpleTableSegment> getAllTablesFromOrderByItems(final Collection<OrderByItemSegment> orderByItems, final Collection<TableSegment> tableSegments) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>();\n-        for (OrderByItemSegment each : orderByItems) {\n-            if (each instanceof ColumnOrderByItemSegment) {\n-                Optional<OwnerSegment> owner = ((ColumnOrderByItemSegment) each).getColumn().getOwner();\n-                if (owner.isPresent() && isTable(owner.get(), tableSegments)) {\n-                    Preconditions.checkState(((ColumnOrderByItemSegment) each).getColumn().getOwner().isPresent());\n-                    OwnerSegment segment = ((ColumnOrderByItemSegment) each).getColumn().getOwner().get();\n-                    result.add(new SimpleTableSegment(segment.getStartIndex(), segment.getStopIndex(), segment.getIdentifier()));\n-                }\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private boolean isTable(final OwnerSegment owner, final Collection<TableSegment> tables) {\n-        for (TableSegment each : tables) {\n-            if (owner.getIdentifier().getValue().equals(each.getAlias().orElse(null))) {\n-                return false;\n-            }\n-        }\n-        return true;\n+        return TableExtractUtils.getTableFromSelect(getSqlStatement());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746299ceffe4e81a60efcbb1d910a9634ef12d47"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 346, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}