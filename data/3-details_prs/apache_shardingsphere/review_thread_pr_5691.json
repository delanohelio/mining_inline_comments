{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDkwNDgy", "number": 5691, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNjozOVrOD-EI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNzoyOVrOD-EJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDA2MTA0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNjo0MFrOGX76mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNjo0MFrOGX76mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjA5MA==", "bodyText": "keep a blank line after line 45", "url": "https://github.com/apache/shardingsphere/pull/5691#discussion_r427752090", "createdAt": "2020-05-20T05:36:40Z", "author": {"login": "kimmking"}, "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.state;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.state.enums.NodeState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+/**\n+ * Cluster state instance.\n+ */\n+public final class ClusterStateInstance {\n+    \n+    private ClusterStateInstance() {\n+    }\n+    \n+    /**\n+     * Get cluster state instance.\n+     * @return cluster state instance\n+     */\n+    public static ClusterStateInstance getInstance() {\n+        return ClusterStateInstanceHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Persist data source state.\n+     * @param dataSourceName data source name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f84d40addca067e4d0b68d592248af277167ff0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDA2MjY1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNzoyOVrOGX77iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNzoyOVrOGX77iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjMzMQ==", "bodyText": "check null.", "url": "https://github.com/apache/shardingsphere/pull/5691#discussion_r427752331", "createdAt": "2020-05-20T05:37:29Z", "author": {"login": "kimmking"}, "path": "shardingsphere-control-panel/shardingsphere-cluster/shardingsphere-cluster-state/src/main/java/org/apache/shardingsphere/cluster/state/ClusterStateInstance.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.cluster.state;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.state.enums.NodeState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.orchestration.core.facade.ShardingOrchestrationFacade;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+/**\n+ * Cluster state instance.\n+ */\n+public final class ClusterStateInstance {\n+    \n+    private ClusterStateInstance() {\n+    }\n+    \n+    /**\n+     * Get cluster state instance.\n+     * @return cluster state instance\n+     */\n+    public static ClusterStateInstance getInstance() {\n+        return ClusterStateInstanceHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Persist data source state.\n+     * @param dataSourceName data source name\n+     * @param dataSourceState data source state\n+     */\n+    public void persistDataSourceState(final String dataSourceName, final DataSourceState dataSourceState) {\n+        String instanceData = ShardingOrchestrationFacade.getInstance().getRegistryCenter().loadInstanceData();\n+        InstanceState instanceState = Optional.ofNullable(YamlEngine.unmarshal(instanceData, InstanceState.class)).orElse(new InstanceState(new HashMap<>()));\n+        instanceState.getDataSources().put(dataSourceName, dataSourceState);\n+        ShardingOrchestrationFacade.getInstance().getRegistryCenter().persistInstanceData(YamlEngine.marshal(instanceState));\n+    }\n+    \n+    /**\n+     * Load instance state.\n+     * @return instance state\n+     */\n+    public InstanceState loadInstanceState() {\n+        String instanceData = ShardingOrchestrationFacade.getInstance().getRegistryCenter().loadInstanceData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f84d40addca067e4d0b68d592248af277167ff0"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 837, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}