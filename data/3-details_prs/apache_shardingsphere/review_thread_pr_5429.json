{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTc3NDUx", "number": 5429, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo0MDoyNVrOD5pkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo0ODoxOVrOD5poxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzc2NDE2OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/StandardRangeShardingAlgorithm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo0MDoyNVrOGRCRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0MTo1MlrOGRD1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjE1Nw==", "bodyText": "A redundant blank line is expected to remove.", "url": "https://github.com/apache/shardingsphere/pull/5429#discussion_r420516157", "createdAt": "2020-05-06T02:40:25Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/StandardRangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.range;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.math.LongMath;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+\n+import java.math.RoundingMode;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Standard range sharding algorithm.\n+ * <p>\n+ * Standard range sharding algorithm is similar to the rule of partition table, but it can only be split by the same size.\n+ * User can specify the range by setting `partition.lower`, `partition.upper` and `partition.volume` parameters.\n+ * The `partition.volume` parameter determines the size of each partition.\n+ * </p>\n+ * <p>\n+ * For example: If the `partition.lower` parameter is set to `10`, the `partition.upper` parameter is set to `45`,\n+ * and the `partition.volume` parameter is set to `10`. The values in range [10,45] will be split to different partitions\n+ * \u2014\u2014[10,20), [20, 30), [30, 40), [40, 45), and other values will be split to (-\u221e, 10) and [45, +\u221e).\n+ * </p>\n+ */\n+public final class StandardRangeShardingAlgorithm extends AbstractRangeShardingAlgorithm {\n+\n+    private static final String PARTITION_LOWER = \"partition.lower\";\n+\n+    private static final String PARTITION_UPPER = \"partition.upper\";\n+\n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+\n+    private Map<Integer, Range<Long>> partitionRangeMap;\n+\n+    @Getter\n+    @Setter\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        checkInit();\n+        return getTargetNameByPreciseShardingValue(availableTargetNames, shardingValue, partitionRangeMap);\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        checkInit();\n+        return getTargetNameByRangeShardingValue(availableTargetNames, shardingValue, partitionRangeMap);\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"STANDARD_RANGE\";\n+    }\n+\n+    @Override\n+    public void initProperties() {\n+        Preconditions.checkNotNull(properties.get(PARTITION_LOWER), \"Standard range sharding algorithm partition lower cannot be null.\");\n+        Preconditions.checkNotNull(properties.get(PARTITION_UPPER), \"Standard range sharding algorithm partition upper cannot be null.\");\n+        Preconditions.checkNotNull(properties.get(PARTITION_VOLUME), \"Standard range sharding algorithm partition volume cannot be null.\");\n+        long lower = Long.parseLong(properties.get(PARTITION_LOWER).toString());\n+        long upper = Long.parseLong(properties.get(PARTITION_UPPER).toString());\n+        long volume = Long.parseLong(properties.get(PARTITION_VOLUME).toString());\n+        Preconditions.checkArgument(upper - lower >= volume, \"Standard range sharding algorithm partition range can not be smaller than volume.\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c44e2df8d19500359e7c6053b5faad4ebf1a9a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0MTczNg==", "bodyText": "A redundant blank line is expected to remove.\n\nOk, I will modify it.", "url": "https://github.com/apache/shardingsphere/pull/5429#discussion_r420541736", "createdAt": "2020-05-06T04:41:52Z", "author": {"login": "strongduanmu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/StandardRangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.range;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.math.LongMath;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+\n+import java.math.RoundingMode;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Standard range sharding algorithm.\n+ * <p>\n+ * Standard range sharding algorithm is similar to the rule of partition table, but it can only be split by the same size.\n+ * User can specify the range by setting `partition.lower`, `partition.upper` and `partition.volume` parameters.\n+ * The `partition.volume` parameter determines the size of each partition.\n+ * </p>\n+ * <p>\n+ * For example: If the `partition.lower` parameter is set to `10`, the `partition.upper` parameter is set to `45`,\n+ * and the `partition.volume` parameter is set to `10`. The values in range [10,45] will be split to different partitions\n+ * \u2014\u2014[10,20), [20, 30), [30, 40), [40, 45), and other values will be split to (-\u221e, 10) and [45, +\u221e).\n+ * </p>\n+ */\n+public final class StandardRangeShardingAlgorithm extends AbstractRangeShardingAlgorithm {\n+\n+    private static final String PARTITION_LOWER = \"partition.lower\";\n+\n+    private static final String PARTITION_UPPER = \"partition.upper\";\n+\n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+\n+    private Map<Integer, Range<Long>> partitionRangeMap;\n+\n+    @Getter\n+    @Setter\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        checkInit();\n+        return getTargetNameByPreciseShardingValue(availableTargetNames, shardingValue, partitionRangeMap);\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        checkInit();\n+        return getTargetNameByRangeShardingValue(availableTargetNames, shardingValue, partitionRangeMap);\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"STANDARD_RANGE\";\n+    }\n+\n+    @Override\n+    public void initProperties() {\n+        Preconditions.checkNotNull(properties.get(PARTITION_LOWER), \"Standard range sharding algorithm partition lower cannot be null.\");\n+        Preconditions.checkNotNull(properties.get(PARTITION_UPPER), \"Standard range sharding algorithm partition upper cannot be null.\");\n+        Preconditions.checkNotNull(properties.get(PARTITION_VOLUME), \"Standard range sharding algorithm partition volume cannot be null.\");\n+        long lower = Long.parseLong(properties.get(PARTITION_LOWER).toString());\n+        long upper = Long.parseLong(properties.get(PARTITION_UPPER).toString());\n+        long volume = Long.parseLong(properties.get(PARTITION_VOLUME).toString());\n+        Preconditions.checkArgument(upper - lower >= volume, \"Standard range sharding algorithm partition range can not be smaller than volume.\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjE1Nw=="}, "originalCommit": {"oid": "40c44e2df8d19500359e7c6053b5faad4ebf1a9a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzc3NjA3OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/CustomRangeShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo0ODoxOVrOGRCXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzowMjoxM1rOGRGTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNzgyOQ==", "bodyText": "Hi, do you think it is appropriate to move partitionRangeMap to AbstractRangeShardingAlgorithm ?", "url": "https://github.com/apache/shardingsphere/pull/5429#discussion_r420517829", "createdAt": "2020-05-06T02:48:19Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/CustomRangeShardingAlgorithm.java", "diffHunk": "@@ -51,61 +49,39 @@\n  * The sharding values will be divided into different partition by its value.\n  * </p>\n  */\n-public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+public final class CustomRangeShardingAlgorithm extends AbstractRangeShardingAlgorithm {\n \n     private static final String PARTITION_RANGES = \"partition.ranges\";\n \n     private Map<Integer, Range<Long>> partitionRangeMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c44e2df8d19500359e7c6053b5faad4ebf1a9a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDk0Mg==", "bodyText": "Hi, do you think it is appropriate to move partitionRangeMap to AbstractRangeShardingAlgorithm ?\n\n@tristaZero Before I submit the pr, I hava already tried to put the partitionRangeMap in the AbstractRangeShardingAlgorithm class, decorated with a protected identifier, but the CheckStyle detection prompt that it should be defined as a private type, and accessed through the getter/setter method. I think it is not elegant if we use the getter/setter method in the subclass to operate the partitionRangeMap.", "url": "https://github.com/apache/shardingsphere/pull/5429#discussion_r420544942", "createdAt": "2020-05-06T04:55:57Z", "author": {"login": "strongduanmu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/CustomRangeShardingAlgorithm.java", "diffHunk": "@@ -51,61 +49,39 @@\n  * The sharding values will be divided into different partition by its value.\n  * </p>\n  */\n-public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+public final class CustomRangeShardingAlgorithm extends AbstractRangeShardingAlgorithm {\n \n     private static final String PARTITION_RANGES = \"partition.ranges\";\n \n     private Map<Integer, Range<Long>> partitionRangeMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNzgyOQ=="}, "originalCommit": {"oid": "40c44e2df8d19500359e7c6053b5faad4ebf1a9a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MjI0Mw==", "bodyText": "Got your idea, it is not a big deal, and thanks for the clarification. :)", "url": "https://github.com/apache/shardingsphere/pull/5429#discussion_r420582243", "createdAt": "2020-05-06T07:02:13Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/CustomRangeShardingAlgorithm.java", "diffHunk": "@@ -51,61 +49,39 @@\n  * The sharding values will be divided into different partition by its value.\n  * </p>\n  */\n-public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+public final class CustomRangeShardingAlgorithm extends AbstractRangeShardingAlgorithm {\n \n     private static final String PARTITION_RANGES = \"partition.ranges\";\n \n     private Map<Integer, Range<Long>> partitionRangeMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNzgyOQ=="}, "originalCommit": {"oid": "40c44e2df8d19500359e7c6053b5faad4ebf1a9a"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 899, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}