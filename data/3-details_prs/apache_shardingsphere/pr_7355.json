{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzIxNzQ4", "number": 7355, "title": "Support multi replica extension", "bodyText": "Changes proposed in this pull request:\n-Support multi replica extension", "createdAt": "2020-09-09T09:54:37Z", "url": "https://github.com/apache/shardingsphere/pull/7355", "merged": true, "mergeCommit": {"oid": "cca800aece30251bf630da1a8910ae9cdd231ba3"}, "closed": true, "closedAt": "2020-09-10T10:02:39Z", "author": {"login": "juaby"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHET90AH2gAyNDgyNzIxNzQ4OjAxZTE0YzE4MDFhNTAzMzhmMjEyMTcxYjFhZGQ1Y2M2OTFiYjhlZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHd3bvAFqTQ4NTc3Njk5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01e14c1801a50338f212171b1add5cc691bb8ef7", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/01e14c1801a50338f212171b1add5cc691bb8ef7", "committedDate": "2020-09-09T04:16:08Z", "message": "Support multi replica extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85df10184354919254818a89bd50cefb0fec8a6d", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/85df10184354919254818a89bd50cefb0fec8a6d", "committedDate": "2020-09-09T10:18:38Z", "message": "Merge branch 'master' into features/replica\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-rewrite/src/test/java/org/apache/shardingsphere/encrypt/rewrite/parameterized/EncryptSQLRewriterParameterizedTest.java\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/MixSQLRewriterParameterizedTest.java\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-rewrite/src/test/java/org/apache/shardingsphere/sharding/rewrite/parameterized/ShardingSQLRewriterParameterizedTest.java\n#\tshardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-context/src/main/java/org/apache/shardingsphere/governance/context/schema/GovernanceSchemaContexts.java\n#\tshardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/ShardingSphereMetaData.java\n#\tshardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilder.java\n#\tshardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilderTest.java\n#\tshardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java\n#\tshardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java\n#\tshardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/wrapper/PreparedStatementExecutorWrapper.java\n#\tshardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/sctl/hint/ShardingCTLHintBackendHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/981f6b080832a44b6c20d67d6415aa4aa60c2e72", "committedDate": "2020-09-09T10:36:58Z", "message": "merge from apache/master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTI2MTYz", "url": "https://github.com/apache/shardingsphere/pull/7355#pullrequestreview-485126163", "createdAt": "2020-09-09T15:24:14Z", "commit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNDoxNFrOHPMx2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo1N1rOHPM-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMDA1OQ==", "bodyText": "Please add a blank line in the end of file", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485700059", "createdAt": "2020-09-09T15:24:14Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-replica/shardingsphere-replica-execute/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.executor.sql.raw.execute.callback.RawExecutorCallback", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.apache.shardingsphere.replica.execute.callback.DefaultReplicaExecutorCallback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMjEyNw==", "bodyText": "Please rename primaryKeyColumns as result for return value", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485702127", "createdAt": "2020-09-09T15:27:07Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilder.java", "diffHunk": "@@ -42,22 +50,77 @@\n      * \n      * @param metaData meta data\n      * @param sqlRewriteResult SQL rewrite result\n+     * @param sqlStatementContext SQL statement context\n      * @return execution contexts\n      */\n-    public static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final SQLRewriteResult sqlRewriteResult) {\n-        return sqlRewriteResult instanceof GenericSQLRewriteResult ? build(metaData, (GenericSQLRewriteResult) sqlRewriteResult) : build((RouteSQLRewriteResult) sqlRewriteResult);\n+    public static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final SQLRewriteResult sqlRewriteResult, final SQLStatementContext sqlStatementContext) {\n+        return sqlRewriteResult instanceof GenericSQLRewriteResult ? build(metaData, (GenericSQLRewriteResult) sqlRewriteResult, sqlStatementContext)\n+                : build(metaData, (RouteSQLRewriteResult) sqlRewriteResult);\n     }\n     \n-    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final GenericSQLRewriteResult sqlRewriteResult) {\n+    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final GenericSQLRewriteResult sqlRewriteResult, final SQLStatementContext sqlStatementContext) {\n         String dataSourceName = metaData.getDataSourceMetaDatas().getAllInstanceDataSourceNames().iterator().next();\n-        return Collections.singletonList(new ExecutionUnit(dataSourceName, new SQLUnit(sqlRewriteResult.getSqlRewriteUnit().getSql(), sqlRewriteResult.getSqlRewriteUnit().getParameters())));\n+        return Collections.singletonList(new ExecutionUnit(dataSourceName,\n+                new SQLUnit(sqlRewriteResult.getSqlRewriteUnit().getSql(), sqlRewriteResult.getSqlRewriteUnit().getParameters(), getActualTableNames(sqlStatementContext),\n+                        getPrimaryKeyColumns(metaData, sqlStatementContext))));\n     }\n     \n-    private static Collection<ExecutionUnit> build(final RouteSQLRewriteResult sqlRewriteResult) {\n+    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final RouteSQLRewriteResult sqlRewriteResult) {\n         Collection<ExecutionUnit> result = new LinkedHashSet<>();\n         for (Entry<RouteUnit, SQLRewriteUnit> entry : sqlRewriteResult.getSqlRewriteUnits().entrySet()) {\n-            result.add(new ExecutionUnit(entry.getKey().getDataSourceMapper().getActualName(), new SQLUnit(entry.getValue().getSql(), entry.getValue().getParameters())));\n+            Collection<RouteMapper> tableMappers = entry.getKey().getTableMappers();\n+            result.add(new ExecutionUnit(entry.getKey().getDataSourceMapper().getActualName(),\n+                    new SQLUnit(entry.getValue().getSql(), entry.getValue().getParameters(), getActualTableNames(tableMappers), getPrimaryKeyColumns(metaData, tableMappers))));\n         }\n         return result;\n     }\n+    \n+    private static Set<String> getActualTableNames(final SQLStatementContext sqlStatementContext) {\n+        return getGenericTableNames(sqlStatementContext);\n+    }\n+\n+    private static Set<String> getActualTableNames(final Collection<RouteMapper> tableMappers) {\n+        if (null == tableMappers) {\n+            return Collections.emptySet();\n+        }\n+        return tableMappers.stream().map(RouteMapper::getActualName).collect(Collectors.toSet());\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final SQLStatementContext sqlStatementContext) {\n+        return getPrimaryKeyColumns(metaData, getLogicTableNames(sqlStatementContext));\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final Collection<RouteMapper> tableMappers) {\n+        return getPrimaryKeyColumns(metaData, getLogicTableNames(tableMappers));\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final Set<String> logicTableNames) {\n+        Map<String, List<String>> primaryKeyColumns = new HashMap<>(logicTableNames.size());\n+        for (String each: logicTableNames) {\n+            primaryKeyColumns.put(each, metaData.getRuleSchemaMetaData().getSchemaMetaData().get(each).getPrimaryKeyColumns());\n+        }\n+        return primaryKeyColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMzQyMA==", "bodyText": "What is the useful of the structure of Map<String, List<String>>?\nCan we use a object to define this structure?", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485703420", "createdAt": "2020-09-09T15:28:57Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/SQLUnit.java", "diffHunk": "@@ -36,4 +40,15 @@\n     private final String sql;\n     \n     private final List<Object> parameters;\n+\n+    private final Set<String> actualTables;\n+    \n+    private final Map<String, List<String>> primaryKeyColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cad6075621983d49787a1ec5217d4767a596dd4c", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/cad6075621983d49787a1ec5217d4767a596dd4c", "committedDate": "2020-09-10T03:24:23Z", "message": "add a blank line in the end of RawExecutorCallback's SPI META-INF file\nrename primaryKeyColumns as result for return value in ExecutionContextBuilder\nuse a object to define Map<String, List<String>> structure for primaryKeyColumns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5106743a8a71399ef86f0abc6c2ddbfa89853f69", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/5106743a8a71399ef86f0abc6c2ddbfa89853f69", "committedDate": "2020-09-10T09:04:31Z", "message": "refactor SQLUnit, add SQLRuntimeContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "019949a37a28d9ce639d3ea970be56a235efc02e", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/019949a37a28d9ce639d3ea970be56a235efc02e", "committedDate": "2020-09-10T09:10:28Z", "message": "Merge branch 'master' into features/replica\n\n# Conflicts:\n#\tshardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/execute/engine/jdbc/JDBCExecuteEngine.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d37777c11f5d9f706f6835b9b1e1b5b3d3bc436", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/4d37777c11f5d9f706f6835b9b1e1b5b3d3bc436", "committedDate": "2020-09-10T09:31:12Z", "message": "merge from master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Nzc2OTk0", "url": "https://github.com/apache/shardingsphere/pull/7355#pullrequestreview-485776994", "createdAt": "2020-09-10T10:02:30Z", "commit": {"oid": "4d37777c11f5d9f706f6835b9b1e1b5b3d3bc436"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4073, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}