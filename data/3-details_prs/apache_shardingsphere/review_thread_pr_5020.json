{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTY4NzYx", "number": 5020, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozOTo0MlrODtBsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0Mjo0MlrODt2rOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTQwMjQzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozOTo0MlrOF-NdQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo1Nzo1MFrOF-OJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjUxMg==", "bodyText": "Please check with other javadoc and make the format consist", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400776512", "createdAt": "2020-03-31T09:39:42Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.JoinTableAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.TableFactorAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedJoinTable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinedTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * TableReferences assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableReferencesAssert {\n+    \n+    /**\n+     * Assert actual TableReferences segments is correct with expected TableReferences.\n+     *\n+     * @param assertContext assert context\n+     * @param actual        actual TableReferences", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fee8c2c6f8d6c68834421c631116fc9d474d57"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4Nzg3NA==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400787874", "createdAt": "2020-03-31T09:57:50Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.JoinTableAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.TableFactorAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedJoinTable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinedTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * TableReferences assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableReferencesAssert {\n+    \n+    /**\n+     * Assert actual TableReferences segments is correct with expected TableReferences.\n+     *\n+     * @param assertContext assert context\n+     * @param actual        actual TableReferences", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjUxMg=="}, "originalCommit": {"oid": "05fee8c2c6f8d6c68834421c631116fc9d474d57"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTQwMzg3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0MDowN1rOF-NeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0MDowN1rOF-NeNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3Njc1OA==", "bodyText": "Please remove useless empty line", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r400776758", "createdAt": "2020-03-31T09:40:07Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/TableReferencesAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.JoinTableAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table.TableFactorAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedJoinTable;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinedTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * TableReferences assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableReferencesAssert {\n+    \n+    /**\n+     * Assert actual TableReferences segments is correct with expected TableReferences.\n+     *\n+     * @param assertContext assert context\n+     * @param actual        actual TableReferences\n+     * @param expected      expected TableReferences\n+     */\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final List<TableReferenceSegment> actual, final List<ExpectedTableReference> expected) {\n+        assertThat(assertContext.getText(\"TableReferences assert error\"), actual.size(), is(expected.size()));\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fee8c2c6f8d6c68834421c631116fc9d474d57"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg3MDUzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/TableFactorAssert.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1MTozOFrOF-vCfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxOTozM1rOF-yQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA==", "bodyText": "It seems you forgot this one.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401326718", "createdAt": "2020-04-01T02:51:38Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/TableFactorAssert.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.TableReferencesAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedTableFactor;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableFactorSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.List;\n+\n+/**\n+ * TableFactor assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableFactorAssert {\n+    \n+    /**\n+     * Assert actual TableFactor segments is correct with expected TableFactor.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual TableFactor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMjExNw==", "bodyText": "The same to other javadoc,the empty line?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401332117", "createdAt": "2020-04-01T03:13:44Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/TableFactorAssert.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.TableReferencesAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedTableFactor;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableFactorSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.List;\n+\n+/**\n+ * TableFactor assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableFactorAssert {\n+    \n+    /**\n+     * Assert actual TableFactor segments is correct with expected TableFactor.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual TableFactor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA=="}, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTUzOQ==", "bodyText": "Sorry, my mistake", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401379539", "createdAt": "2020-04-01T06:19:33Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/TableFactorAssert.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment.table;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.segment.TableReferencesAssert;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table.ExpectedTableFactor;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableFactorSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.List;\n+\n+/**\n+ * TableFactor assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TableFactorAssert {\n+    \n+    /**\n+     * Assert actual TableFactor segments is correct with expected TableFactor.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual TableFactor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjcxOA=="}, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI0OTA3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/ExpectedJoinSpecification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjozMDoyNVrOF-ygLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODozODozMFrOF_g9Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MzQ3MA==", "bodyText": "Why are they not ExpectedPredicate and ExpectedColumn?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401383470", "createdAt": "2020-04-01T06:30:25Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/ExpectedJoinSpecification.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+\n+/**\n+ * Expected JoinSpecification.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedJoinSpecification extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlAttribute\n+    private String expr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NDU3OA==", "bodyText": "Fix them later?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402144578", "createdAt": "2020-04-02T08:38:30Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/ExpectedJoinSpecification.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+\n+/**\n+ * Expected JoinSpecification.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedJoinSpecification extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlAttribute\n+    private String expr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MzQ3MA=="}, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI1NDQzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjozMjo0MFrOF-yjbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NjoxM1rOF-7DkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NDMwMQ==", "bodyText": "It will be filled with content later, right?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401384301", "createdAt": "2020-04-01T06:32:40Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedJoinSpecification;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinSpecificationSegment;\n+\n+/**\n+ * JoinSpecification assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class JoinSpecificationAssert {\n+    \n+    /**\n+     * Assert actual JoinSpecification segments is correct with expected JoinSpecification.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual JoinSpecification\n+     * @param expected expected JoinSpecification\n+     */\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzYwMQ==", "bodyText": "yes", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401523601", "createdAt": "2020-04-01T10:46:13Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.asserts.segment;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.integrate.asserts.SQLCaseAssertContext;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedJoinSpecification;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.JoinSpecificationSegment;\n+\n+/**\n+ * JoinSpecification assert.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class JoinSpecificationAssert {\n+    \n+    /**\n+     * Assert actual JoinSpecification segments is correct with expected JoinSpecification.\n+     *\n+     * @param assertContext assert context\n+     * @param actual actual JoinSpecification\n+     * @param expected expected JoinSpecification\n+     */\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NDMwMQ=="}, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI2NjYxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/table/ExpectedTableFactor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjozNzoyNlrOF-yqkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NTowOVrOF-7VmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NjEyOQ==", "bodyText": "Do you think a collection of expectedColumn is needed?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401386129", "createdAt": "2020-04-01T06:37:26Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/table/ExpectedTableFactor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.expr.simple.ExpectedSubquery;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.Collection;\n+\n+/**\n+ * Expected TableFactor.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedTableFactor extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlElement\n+    private ExpectedSimpleTable table;\n+    \n+    @XmlElement\n+    private ExpectedSubquery subquery;\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODIxNw==", "bodyText": "Add it later.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401528217", "createdAt": "2020-04-01T10:55:09Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/jaxb/domain/segment/impl/table/ExpectedTableFactor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.AbstractExpectedDelimiterSQLSegment;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.ExpectedTableReference;\n+import org.apache.shardingsphere.sql.parser.integrate.jaxb.domain.segment.impl.expr.simple.ExpectedSubquery;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.Collection;\n+\n+/**\n+ * Expected TableFactor.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedTableFactor extends AbstractExpectedDelimiterSQLSegment {\n+    \n+    @XmlElement\n+    private ExpectedSimpleTable table;\n+    \n+    @XmlElement\n+    private ExpectedSubquery subquery;\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NjEyOQ=="}, "originalCommit": {"oid": "ebbe2c928eb2a93640a8a70549a0b7831915db03"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDIxNDYwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToxMTo0OVrOF-71nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToxMTo0OVrOF-71nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzNjQxNQ==", "bodyText": "Please remove them", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401536415", "createdAt": "2020-04-01T11:11:49Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "diffHunk": "@@ -133,6 +133,9 @@ private static boolean isPlaceholderWithoutParameter(final Object[] sqlTestParam\n     \n     @Test\n     public void assertSupportedSQL() {\n+        if (\"select_sharding_route_with_broadcast_table\".equals(sqlCaseId) && \"MySQL\".equals(databaseType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI0MTM0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToxOTo1NVrOF-8GAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyODoxMlrOF-8WtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDYxMQ==", "bodyText": "What's the difference?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401540611", "createdAt": "2020-04-01T11:19:55Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "diffHunk": "@@ -39,12 +41,26 @@\n      * get table.\n      * @return tableSegment.\n      */\n-    public TableSegment getTable() {\n-        if (null != tableFactor.getTable()) {\n-            if (tableFactor.getTable() instanceof SimpleTableSegment) {\n-                return tableFactor.getTable();\n-            }\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getSimpleTableSegments());\n+        }\n+        if (null != joinSpecification) {\n+            tables.addAll(joinSpecification.getSimpleTableSegments());\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getTables());\n         }\n-        return null;\n+        return tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NDg4NA==", "bodyText": "getTables has no duplicate table.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401544884", "createdAt": "2020-04-01T11:28:12Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "diffHunk": "@@ -39,12 +41,26 @@\n      * get table.\n      * @return tableSegment.\n      */\n-    public TableSegment getTable() {\n-        if (null != tableFactor.getTable()) {\n-            if (tableFactor.getTable() instanceof SimpleTableSegment) {\n-                return tableFactor.getTable();\n-            }\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getSimpleTableSegments());\n+        }\n+        if (null != joinSpecification) {\n+            tables.addAll(joinSpecification.getSimpleTableSegments());\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != tableFactor) {\n+            tables.addAll(tableFactor.getTables());\n         }\n-        return null;\n+        return tables;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MDYxMQ=="}, "originalCommit": {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI0NDI4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyMDo1MFrOF-8H2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyODo1NVrOF-8YIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTA4Mw==", "bodyText": "What is the difference?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401541083", "createdAt": "2020-04-01T11:20:50Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -39,4 +40,38 @@\n     private final Collection<ColumnSegment> columns = new LinkedList<>();\n     \n     private Collection<TableReferenceSegment> tableReferences = new LinkedList<>();\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);\n+        }\n+        if (null != tableReferences && !tableReferences.isEmpty()) {\n+            for (TableReferenceSegment each: tableReferences) {\n+                tables.addAll(each.getSimpleTableSegments());\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTI1MQ==", "bodyText": "getTables has no duplicate table.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r401545251", "createdAt": "2020-04-01T11:28:55Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -39,4 +40,38 @@\n     private final Collection<ColumnSegment> columns = new LinkedList<>();\n     \n     private Collection<TableReferenceSegment> tableReferences = new LinkedList<>();\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);\n+        }\n+        if (null != tableReferences && !tableReferences.isEmpty()) {\n+            for (TableReferenceSegment each: tableReferences) {\n+                tables.addAll(each.getSimpleTableSegments());\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        if (null != table && table instanceof SimpleTableSegment) {\n+            tables.add((SimpleTableSegment) table);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTA4Mw=="}, "originalCommit": {"oid": "25e508b3c0675f8c08746e279d7af7e3121dbea0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAxNTUyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTowOFrOF_gdoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNTowOFrOF_gdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjQ4MQ==", "bodyText": "I suggest you rename it as getSimpleTableSegment();", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402136481", "createdAt": "2020-04-02T08:25:08Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/JoinedTableSegment.java", "diffHunk": "@@ -39,12 +41,14 @@\n      * get table.\n      * @return tableSegment.\n      */\n-    public TableSegment getTable() {\n-        if (null != tableFactor.getTable()) {\n-            if (tableFactor.getTable() instanceof SimpleTableSegment) {\n-                return tableFactor.getTable();\n-            }\n+    public Collection<SimpleTableSegment> getTables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAyMjMxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNzowMFrOF_gh1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNzowMFrOF_gh1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNzU1OA==", "bodyText": "Why do not you remove this one?", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402137558", "createdAt": "2020-04-02T08:27:00Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "diffHunk": "@@ -52,11 +55,16 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final SelectStatement actual, final SelectStatementTestCase expected) {\n         assertProjection(assertContext, actual, expected);\n-        assertTable(assertContext, actual, expected);\n+//        assertTable(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDA4MDY1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-aggregate.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0MjowNlrOF_hGIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1NzoxMVrOF_hrmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0Njg1MQ==", "bodyText": "Please consider remove <table>.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402146851", "createdAt": "2020-04-02T08:42:06Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-aggregate.xml", "diffHunk": "@@ -21,6 +21,11 @@\n         <tables>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NjQ0MA==", "bodyText": "Fix ExpectedJoinSpecification later.", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402156440", "createdAt": "2020-04-02T08:57:11Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-aggregate.xml", "diffHunk": "@@ -21,6 +21,11 @@\n         <tables>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0Njg1MQ=="}, "originalCommit": {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDA4MzEzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0Mjo0MlrOF_hHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0Mjo0MlrOF_hHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzI1NQ==", "bodyText": "I suggest you rename it as getSimpleTableSegment();", "url": "https://github.com/apache/shardingsphere/pull/5020#discussion_r402147255", "createdAt": "2020-04-02T08:42:42Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -39,4 +40,21 @@\n     private final Collection<ColumnSegment> columns = new LinkedList<>();\n     \n     private Collection<TableReferenceSegment> tableReferences = new LinkedList<>();\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getTables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b2d347735abd1d094a7d278936fcf6d9f9748f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1119, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}