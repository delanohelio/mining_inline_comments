{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTYyMjM1", "number": 6187, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1ODowOFrOEJTv3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NDozN1rOEKxM0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2MTg4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1ODowOVrOGpyuig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjowODozMFrOGp1T3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NTkxNA==", "bodyText": "UUID should be kept", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446475914", "createdAt": "2020-06-27T02:58:09Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -30,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int port) {\n+        instanceId = IpUtils.getIp() + DELIMITER + port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODIzNw==", "bodyText": "I believe instance-ip + port combination generates a unique identifier. Not sure why uuid will still be required?", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446518237", "createdAt": "2020-06-27T12:08:30Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -30,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int port) {\n+        instanceId = IpUtils.getIp() + DELIMITER + port;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NTkxNA=="}, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NjkwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNTowOFrOGpyw3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjowOTozOFrOGp1UJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjUxMQ==", "bodyText": "OrchestrationShardingSphereDataSource is provided for sharding-jdbc, can not specify a fixed port , sharding-jdbc should still retain threadId as the unique identifier of the instance.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446476511", "createdAt": "2020-06-27T03:05:08Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -69,7 +69,7 @@\n     private ShardingSphereDataSource dataSource;\n     \n     public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration orchestrationConfig) throws SQLException {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODMwOA==", "bodyText": "Agreed! This looks to be a mistake at my end", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446518308", "createdAt": "2020-06-27T12:09:38Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -69,7 +69,7 @@\n     private ShardingSphereDataSource dataSource;\n     \n     public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration orchestrationConfig) throws SQLException {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjUxMQ=="}, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NzQ2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNTozNFrOGpyxGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjowOTo1NVrOGp1UPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU3MQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446476571", "createdAt": "2020-06-27T03:05:34Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -82,7 +82,7 @@ public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration or\n     }\n     \n     public OrchestrationShardingSphereDataSource(final ShardingSphereDataSource shardingSphereDataSource, final OrchestrationConfiguration orchestrationConfig) {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODMzMw==", "bodyText": "Will fix this", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446518333", "createdAt": "2020-06-27T12:09:55Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -82,7 +82,7 @@ public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration or\n     }\n     \n     public OrchestrationShardingSphereDataSource(final ShardingSphereDataSource shardingSphereDataSource, final OrchestrationConfiguration orchestrationConfig) {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU3MQ=="}, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NzYxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNTo1MVrOGpyxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNTo1MVrOGpyxLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU4OA==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446476588", "createdAt": "2020-06-27T03:05:51Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -92,7 +92,7 @@ public OrchestrationShardingSphereDataSource(final ShardingSphereDataSource shar\n     }\n     \n     public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration orchestrationConfig, final ClusterConfiguration clusterConfiguration) throws SQLException {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NzY2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNjowNFrOGpyxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNjowNFrOGpyxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU5Ng==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446476596", "createdAt": "2020-06-27T03:06:04Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-orchestration/src/main/java/org/apache/shardingsphere/driver/orchestration/internal/datasource/OrchestrationShardingSphereDataSource.java", "diffHunk": "@@ -106,7 +106,7 @@ public OrchestrationShardingSphereDataSource(final OrchestrationConfiguration or\n     \n     public OrchestrationShardingSphereDataSource(final ShardingSphereDataSource shardingSphereDataSource,\n                                                  final OrchestrationConfiguration orchestrationConfig, final ClusterConfiguration clusterConfiguration) {\n-        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME)));\n+        super(new ShardingOrchestrationFacade(orchestrationConfig, Collections.singletonList(DefaultSchema.LOGIC_NAME), 3307));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3MDk3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxMDo1MlrOGpyywA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjoxMjowMVrOGp1U_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Njk5Mg==", "bodyText": "ShardingOrchestrationFacade is provided to both proxy and sharding-jdbc, may be the variable defined as port is not suitable, It should describe a unique identifier of the orchestration instance, for proxy, it's a port, and for sharding-jdbc, it's a threadId.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446476992", "createdAt": "2020-06-27T03:10:52Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxODUyNw==", "bodyText": "Thanks for pointing this out, will update this", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r446518527", "createdAt": "2020-06-27T12:12:01Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Njk5Mg=="}, "originalCommit": {"oid": "3881ed6810094cdda5fb0da8a8760ea2148b1177"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIxODk4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNDozMFrOGr_OGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo0Mzo0MlrOGstvuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3Nzc1Mw==", "bodyText": "The parameter identifier cannot correctly describe the meaning of orchestration instance unique identification,  my suggestion is instanceId, and i think it's better to define it as String type.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448777753", "createdAt": "2020-07-02T06:34:30Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int identifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMTgzMQ==", "bodyText": "keeping this as instanceId also does not seem to be justified since this is only a part of the actual instanceId.\nShould we keep this as instanceSubId?", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449001831", "createdAt": "2020-07-02T13:29:01Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int identifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3Nzc1Mw=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0MzEzNA==", "bodyText": "keeping this as instanceId also does not seem to be justified since this is only a part of the actual instanceId.\nShould we keep this as instanceSubId?\n\nHow about instanceSign or instanceTag, my understanding, this parameter is just a sign or tag of instanceId.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449443134", "createdAt": "2020-07-03T08:13:01Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int identifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3Nzc1Mw=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MjIwMw==", "bodyText": "instanceTag sounds good!", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449462203", "createdAt": "2020-07-03T08:51:22Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int identifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3Nzc1Mw=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MDAyNA==", "bodyText": "Looking forward to your submission for optimization.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449540024", "createdAt": "2020-07-03T11:43:42Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-facade/src/main/java/org/apache/shardingsphere/orchestration/core/facade/ShardingOrchestrationFacade.java", "diffHunk": "@@ -81,7 +81,7 @@\n     \n     private final ShardingOrchestrationListenerManager listenerManager;\n     \n-    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames) {\n+    public ShardingOrchestrationFacade(final OrchestrationConfiguration orchestrationConfig, final Collection<String> shardingSchemaNames, final int identifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3Nzc1Mw=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyMTk2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/RegistryCenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNTozM1rOGr_P0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNTozM1rOGr_P0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODE5Mw==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448778193", "createdAt": "2020-07-02T06:35:33Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/RegistryCenter.java", "diffHunk": "@@ -34,11 +34,11 @@\n     private final RegistryCenterRepository repository;\n     \n     private final OrchestrationInstance instance;\n-    \n-    public RegistryCenter(final String name, final RegistryCenterRepository registryCenterRepository) {\n+\n+    public RegistryCenter(final String name, final int port, final RegistryCenterRepository registryCenterRepository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1MTkwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0Njo1MVrOGr_iBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0Njo1MVrOGr_iBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4Mjg1Mg==", "bodyText": "This method is unnecessary.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448782852", "createdAt": "2020-07-02T06:46:51Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();\n     }\n-    \n+\n     /**\n      * Get instance.\n-     * \n-     * @return instance\n+     *\n+     * @param   identifier  identifier on which the instance is running\n+     * @return  instance    the orchestration instance\n      */\n-    public static OrchestrationInstance getInstance() {\n-        return INSTANCE;\n+    public static OrchestrationInstance getInstance(final int identifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1NTgzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0ODoxMFrOGr_kbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo0MjoxOFrOGu-xIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA==", "bodyText": "How about add instance = this;", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448783468", "createdAt": "2020-07-02T06:48:10Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2ODA3Nw==", "bodyText": "what we really want is a singleton instance with the property accessible everywhere.\nprobably we should keep the constructor as it is and provide a getInstance() method throwing IllegalStateException if instance object is not created\nI do not think making an assignment like instance = this is a good idea.\n@menghaoranss thoughts?", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449068077", "createdAt": "2020-07-02T15:04:50Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NTg5MA==", "bodyText": "what we really want is a singleton instance with the property accessible everywhere.\nprobably we should keep the constructor as it is and provide a getInstance() method throwing IllegalStateException if instance object is not created\nI do not think making an assignment like instance = this is a good idea.\n@menghaoranss thoughts?\n\nAgree with you, may be we can keep the no arguments constructor , and then add a new method to generate instanceId. Generate instanceId when OrchestrationInstance is initialized in RegistryCenter.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449445890", "createdAt": "2020-07-03T08:18:49Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NzY2MA==", "bodyText": "@menghaoranss\ni am thinking of keeping the impl like this,\npublic static OrchestrationInstance init(final String instanceTag) {\n        if (null == instance) {\n            synchronized (OrchestrationInstance.class) {\n                if (null == instance) {\n                    instance = new OrchestrationInstance(instanceTag);\n                }\n            }\n        }\n        return instance;\n    }\n\n    public static String getInstanceId() {\n        if (null == instance) {\n            throw new IllegalStateException(\"OrchestrationInstance not initialized!\");\n        }\n        return instance.instanceId;\n    }\n\nbut because of this code InstanceStateChangedListenerTest.setUp() throws the IllegalStateException.\nWill need to refactor the test-case as well.\nShould this be ok? I believe in reality there will be no case when getInstanceId() will be called before setting up of RegistryCenter and its just how TC are written.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r449677660", "createdAt": "2020-07-03T18:26:48Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MzMyNQ==", "bodyText": "I can understand the meaning of your code above, but I think it is too complicated, below is my suggestion:\n@Getter\npublic final class OrchestrationInstance {\n    \n    private static final String DELIMITER = \"@\";\n    \n    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n    \n    private String instanceId;\n    \n    private OrchestrationInstance() {\n    \n    }\n    \n    public void init(final String instanceTag) {\n        instanceId = IpUtils.getIp() + DELIMITER + instanceTag + DELIMITER + UUID.randomUUID().toString();\n    }\n    \n    /**\n     * Get instance.\n     * \n     * @return instance\n     */\n    public static OrchestrationInstance getInstance() {\n        return INSTANCE;\n    }\n}", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r450773325", "createdAt": "2020-07-07T10:44:38Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Njc3Nw==", "bodyText": "@menghaoranss  If we go ahead with this approach, we will risk someone calling getInstance() without ensuring init() was called and then returning an empty string as instanceId.\nMoreover, this makes instanceId mutable i.e. anyone can do OrchestrationInstance.getInstance().init(\"a\") and then OrchestrationInstance.getInstance().init(\"b\")", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r450786777", "createdAt": "2020-07-07T11:11:55Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NzkxMg==", "bodyText": "@menghaoranss If we go ahead with this approach, we will risk someone calling getInstance() without ensuring init() was called and then returning an empty string as instanceId.\nMoreover, this makes instanceId mutable i.e. anyone can do OrchestrationInstance.getInstance().init(\"a\") and then OrchestrationInstance.getInstance().init(\"b\")\n\nYes, we must guarantee that OrchestrationInstance only initialize once in the code\uff0cthis is what we need to do.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r451377912", "createdAt": "2020-07-08T08:37:27Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjYyNg==", "bodyText": "@menghaoranss If we go ahead with this approach, we will risk someone calling getInstance() without ensuring init() was called and then returning an empty string as instanceId.\nMoreover, this makes instanceId mutable i.e. anyone can do OrchestrationInstance.getInstance().init(\"a\") and then OrchestrationInstance.getInstance().init(\"b\")\n\nCould you perfect this pr?", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r451382626", "createdAt": "2020-07-08T08:45:03Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzMjgzNw==", "bodyText": "I have committed new changes, can you please review that.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r451432837", "createdAt": "2020-07-08T10:10:35Z", "author": {"login": "swayamraina"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNjA2Nw==", "bodyText": "I have reviewed your last submission, and the points that we discussed above still need to be optimized.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r451916067", "createdAt": "2020-07-09T01:42:18Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/instance/OrchestrationInstance.java", "diffHunk": "@@ -29,21 +28,30 @@\n public final class OrchestrationInstance {\n     \n     private static final String DELIMITER = \"@\";\n-    \n-    private static final OrchestrationInstance INSTANCE = new OrchestrationInstance();\n+\n+    private static OrchestrationInstance instance;\n     \n     private final String instanceId;\n-    \n-    private OrchestrationInstance() {\n-        instanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split(DELIMITER)[0] + DELIMITER + UUID.randomUUID().toString();\n+\n+    public OrchestrationInstance(final int identifier) {\n+        instanceId = IpUtils.getIp() + DELIMITER + identifier + DELIMITER + UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzQ2OA=="}, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1NzI5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/RegistryCenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0ODo1MVrOGr_ldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0ODo1MVrOGr_ldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzczNA==", "bodyText": "this.instance = new OrchestrationInstance(port);", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448783734", "createdAt": "2020-07-02T06:48:51Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/RegistryCenter.java", "diffHunk": "@@ -34,11 +34,11 @@\n     private final RegistryCenterRepository repository;\n     \n     private final OrchestrationInstance instance;\n-    \n-    public RegistryCenter(final String name, final RegistryCenterRepository registryCenterRepository) {\n+\n+    public RegistryCenter(final String name, final int port, final RegistryCenterRepository registryCenterRepository) {\n         this.node = new RegistryCenterNode(name);\n         this.repository = registryCenterRepository;\n-        this.instance = OrchestrationInstance.getInstance();\n+        this.instance = OrchestrationInstance.getInstance(port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI2ODIzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/InstanceStateChangedListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1Mjo0NlrOGr_sPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1Mjo0NlrOGr_sPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NTQ3MQ==", "bodyText": "The port is unnecessary.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448785471", "createdAt": "2020-07-02T06:52:46Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/InstanceStateChangedListener.java", "diffHunk": "@@ -35,8 +35,8 @@\n  */\n public final class InstanceStateChangedListener extends PostShardingCenterRepositoryEventListener {\n     \n-    public InstanceStateChangedListener(final String name, final RegistryCenterRepository registryCenterRepository) {\n-        super(registryCenterRepository, Collections.singleton(new RegistryCenterNode(name).getInstancesNodeFullPath(OrchestrationInstance.getInstance().getInstanceId())));\n+    public InstanceStateChangedListener(final String name, final int port, final RegistryCenterRepository registryCenterRepository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3MDUzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/InstanceStateChangedListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MzozOVrOGr_ttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MzozOVrOGr_ttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NTg0Ng==", "bodyText": "OrchestrationInstance.getInstance().getInstanceId()", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448785846", "createdAt": "2020-07-02T06:53:39Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/InstanceStateChangedListener.java", "diffHunk": "@@ -35,8 +35,8 @@\n  */\n public final class InstanceStateChangedListener extends PostShardingCenterRepositoryEventListener {\n     \n-    public InstanceStateChangedListener(final String name, final RegistryCenterRepository registryCenterRepository) {\n-        super(registryCenterRepository, Collections.singleton(new RegistryCenterNode(name).getInstancesNodeFullPath(OrchestrationInstance.getInstance().getInstanceId())));\n+    public InstanceStateChangedListener(final String name, final int port, final RegistryCenterRepository registryCenterRepository) {\n+        super(registryCenterRepository, Collections.singleton(new RegistryCenterNode(name).getInstancesNodeFullPath(OrchestrationInstance.getInstance(port).getInstanceId())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3MzE0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/RegistryListenerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NDozN1rOGr_vPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NDozN1rOGr_vPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NjIzOA==", "bodyText": "The port is unnecessary.", "url": "https://github.com/apache/shardingsphere/pull/6187#discussion_r448786238", "createdAt": "2020-07-02T06:54:37Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-control-panel/shardingsphere-orchestration/shardingsphere-orchestration-core/shardingsphere-orchestration-core-registrycenter/src/main/java/org/apache/shardingsphere/orchestration/core/registrycenter/listener/RegistryListenerManager.java", "diffHunk": "@@ -29,8 +29,8 @@\n     \n     private final DataSourceStateChangedListener dataSourceStateChangedListener;\n     \n-    public RegistryListenerManager(final String name, final RegistryCenterRepository registryCenterRepository) {\n-        instanceStateChangedListener = new InstanceStateChangedListener(name, registryCenterRepository);\n+    public RegistryListenerManager(final String name, final int port, final RegistryCenterRepository registryCenterRepository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df10436ed059b3b3c7ad84b5e5081a52f3737a17"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 764, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}