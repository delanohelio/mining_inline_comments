{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODg4NjEx", "number": 7151, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNTo1NVrOEeFAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNTo0NlrOEeVISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTc0NzgzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNTo1NVrOHJjkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNTozMTo0M1rOHJjqbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MTk4Mg==", "bodyText": "Why use @RunWith(MockitoJUnitRunner.class) if not filed use @mock?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479781982", "createdAt": "2020-08-30T15:15:55Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUzMg==", "bodyText": "sorry , forgot to remove", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783532", "createdAt": "2020-08-30T15:31:43Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MTk4Mg=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTc0ODU4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNjo1MFrOHJjkug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNTozMTozMVrOHJjqVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjA3NA==", "bodyText": "It is better to rename Mysql to MySQL", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782074", "createdAt": "2020-08-30T15:16:50Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUwOQ==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783509", "createdAt": "2020-08-30T15:31:31Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjA3NA=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTc0ODk0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNzoyNVrOHJjk6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNTozMjoyNlrOHJjqvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjEyMQ==", "bodyText": "Please use static import for Assert.assertNotNull", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782121", "createdAt": "2020-08-30T15:17:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {\n+        DatabaseProtocolFrontendEngine databaseProtocolFrontendEngine = DatabaseProtocolFrontendEngineFactory.newInstance(new MySQLDatabaseType());\n+        Assert.assertNotNull(databaseProtocolFrontendEngine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzYxMw==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783613", "createdAt": "2020-08-30T15:32:26Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {\n+        DatabaseProtocolFrontendEngine databaseProtocolFrontendEngine = DatabaseProtocolFrontendEngineFactory.newInstance(new MySQLDatabaseType());\n+        Assert.assertNotNull(databaseProtocolFrontendEngine);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjEyMQ=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTc0OTYzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxODoxNFrOHJjlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1MjowOVrOHJuV1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ==", "bodyText": "Do we really need this class? Can we use mock to instead this one?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782209", "createdAt": "2020-08-30T15:18:14Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MzUwNQ==", "bodyText": "Nop, Currently implement of DatabaseProtocolFrontendEngineFactory is using class newInstance method to renew a instance of class, it is hard to mock.", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479783505", "createdAt": "2020-08-30T15:31:28Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg2NTM0Nw==", "bodyText": "I went deep into the mockito fr\namework,  it is not easy to mock static method,\nIf we want to use this, we need update version to 3.x,  is it necessary?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479865347", "createdAt": "2020-08-31T03:06:33Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODQ4Nw==", "bodyText": "It is unnecessary update mockito now.\nWe can leave MockDatabaseProtocolFrontendEngine there.\nBut I find the problem is the class MockDatabaseProtocolFrontendEngine is not load via SPI, is it?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479958487", "createdAt": "2020-08-31T07:52:09Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM4MTY1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMzo1OVrOHJ6-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMzo1OVrOHJ6-9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NTYyMw==", "bodyText": "It is better to define a new type here, FIXTURE maybe a good name than MySQL", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480165623", "createdAt": "2020-08-31T14:23:59Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {\n+    \n+    public MockDatabaseProtocolFrontendEngine() {\n+    }\n+    \n+    @Override\n+    public String getDatabaseType() {\n+        return new MySQLDatabaseType().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM4NTEyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNDo1MFrOHJ7BEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNDo1MFrOHJ7BEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjE2MA==", "bodyText": "The class MockDatabaseProtocolFrontendEngine is not really mocked. DatabaseProtocolFrontendEngineFixture may better.", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166160", "createdAt": "2020-08-31T14:24:50Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM4OTIyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNTo0NlrOHJ7Dgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNTo0NlrOHJ7Dgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2Njc4Ng==", "bodyText": "The name of assertNewInstanceMySQL is inaccurate, please consider change it.", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166786", "createdAt": "2020-08-31T14:25:46Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,22 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertNotNull;\n+\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMySQL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 298, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}