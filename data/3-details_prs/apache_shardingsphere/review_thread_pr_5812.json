{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzc2MTg2", "number": 5812, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MzoyMFrOEADNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0OTo0MVrOEAEnFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDg4MDg2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MzoyMFrOGbFcWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowMTo0NFrOGbITEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MzkxMg==", "bodyText": "redundant {}", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431053912", "createdAt": "2020-05-27T11:43:20Z", "author": {"login": "kimmking"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwMDY4OA==", "bodyText": "i will fix.", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431100688", "createdAt": "2020-05-27T13:01:44Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MzkxMg=="}, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTEwOTk3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0OTo0MVrOGbHtmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMTozNjo0MVrOGbixhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTA5Ng==", "bodyText": "try-catch outside of the forEach is considered as a bad idea, if an item throws, all the following items are skipped\nSimply swallowing the exception is also a bad idea IMO, if I were you, I'll consider the instance state as something like \"Unknown\" if it throws", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431091096", "createdAt": "2020-05-27T12:49:41Z", "author": {"login": "kezhenxu94"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));\n+            });\n+        } catch (Exception ex) {\n+            log.error(\"Load all instance states error\", ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzNDQ3MA==", "bodyText": "Thanks for your comment, my consideration before was if one instance load failed, the wrong data should not be returned . I agree with your suggestion\uff0c\u2018Unknown\u2019 state is a good idea.\nThanks again.", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431534470", "createdAt": "2020-05-28T01:36:41Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));\n+            });\n+        } catch (Exception ex) {\n+            log.error(\"Load all instance states error\", ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTA5Ng=="}, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 816, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}