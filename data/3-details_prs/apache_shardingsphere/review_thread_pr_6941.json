{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDg2MTE2", "number": 6941, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNjoxMVrOEadeSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNjoxMVrOEadeSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTgxMzIyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNjoxMVrOHD6EBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNjoyM1rOHD-cYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1OTA3OA==", "bodyText": "It is unnecessary for assert both broadcastTables.isEmpty() and assert size is 2", "url": "https://github.com/apache/shardingsphere/pull/6941#discussion_r473859078", "createdAt": "2020-08-20T10:26:11Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -163,26 +185,70 @@ public void assertOrderKeyGenerator() {\n     \n     @Test\n     public void assertSimpleRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n+        assertFalse(actualSimpleRuleConfigurations.isEmpty());\n+        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n+        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n+        assertFalse(actualComplexRuleConfigurations.isEmpty());\n+        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualComplexRuleConfiguration = actualComplexRuleConfigurations.iterator().next();\n+        assertThat(actualComplexRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualComplexRuleConfiguration.getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n+        assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        \n     }\n     \n     @Test\n     public void assertBindingRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables();\n+        assertFalse(actualBindingTableRuleConfigurations.isEmpty());\n+        assertThat(actualBindingTableRuleConfigurations.size(), is(4));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user_detail\"));\n+        Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups();\n+        assertFalse(actualBindingTableGroups.isEmpty());\n+        assertThat(actualBindingTableGroups.size(), is(2));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertBroadcastRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables();\n+        assertFalse(actualBroadcastTableConfigurations.isEmpty());\n+        assertThat(actualBroadcastTableConfigurations.size(), is(2));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        Collection<String> broadcastTables = broadcastRule.getBroadcastTables();\n+        assertFalse(broadcastTables.isEmpty());\n+        assertThat(broadcastTables.size(), is(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95bffb3d56eb42d219b6b74cdd9da3e4db6036c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDg1MQ==", "bodyText": "fixed", "url": "https://github.com/apache/shardingsphere/pull/6941#discussion_r473930851", "createdAt": "2020-08-20T12:26:23Z", "author": {"login": "jacksparrow414"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -163,26 +185,70 @@ public void assertOrderKeyGenerator() {\n     \n     @Test\n     public void assertSimpleRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n+        assertFalse(actualSimpleRuleConfigurations.isEmpty());\n+        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n+        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n+        assertFalse(actualComplexRuleConfigurations.isEmpty());\n+        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        ShardingTableRuleConfiguration actualComplexRuleConfiguration = actualComplexRuleConfigurations.iterator().next();\n+        assertThat(actualComplexRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        assertThat(actualComplexRuleConfiguration.getActualDataNodes(), is(\"ds_$->{0..1}.t_order_$->{0..3}\"));\n+        assertThat(actualComplexRuleConfiguration.getDatabaseShardingStrategy().getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getTableShardingStrategy().getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        assertThat(actualComplexRuleConfiguration.getKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        assertThat(complexRule.getDefaultKeyGenerateStrategy().getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        \n     }\n     \n     @Test\n     public void assertBindingRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBindingTableRuleConfigurations = bindingRule.getTables();\n+        assertFalse(actualBindingTableRuleConfigurations.isEmpty());\n+        assertThat(actualBindingTableRuleConfigurations.size(), is(4));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBindingTableRuleConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_user_detail\"));\n+        Collection<String> actualBindingTableGroups = bindingRule.getBindingTableGroups();\n+        assertFalse(actualBindingTableGroups.isEmpty());\n+        assertThat(actualBindingTableGroups.size(), is(2));\n+        assertTrue(actualBindingTableGroups.containsAll(Arrays.asList(\"t_order, t_order_item\", \"t_order, t_order_item\")));\n     }\n     \n     @Test\n     public void assertBroadcastRule() {\n-        // TODO\n+        Collection<ShardingTableRuleConfiguration> actualBroadcastTableConfigurations = broadcastRule.getTables();\n+        assertFalse(actualBroadcastTableConfigurations.isEmpty());\n+        assertThat(actualBroadcastTableConfigurations.size(), is(2));\n+        Iterator<ShardingTableRuleConfiguration> actualIterator = actualBroadcastTableConfigurations.iterator();\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order\"));\n+        assertThat(actualIterator.next().getLogicTable(), is(\"t_order_item\"));\n+        Collection<String> broadcastTables = broadcastRule.getBroadcastTables();\n+        assertFalse(broadcastTables.isEmpty());\n+        assertThat(broadcastTables.size(), is(2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1OTA3OA=="}, "originalCommit": {"oid": "95bffb3d56eb42d219b6b74cdd9da3e4db6036c2"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 362, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}