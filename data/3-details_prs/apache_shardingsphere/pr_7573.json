{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTExNTM2", "number": 7573, "title": "migrate some methods in InsertStatement to InsertStatementContext", "bodyText": "Ref #7170.\nChanges proposed in this pull request:\n\nmigrate some methods in InsertStatement to InsertStatementContext", "createdAt": "2020-09-23T04:41:03Z", "url": "https://github.com/apache/shardingsphere/pull/7573", "merged": true, "mergeCommit": {"oid": "c40cd5149e71dc4a11783fe8a143532a2d2a9409"}, "closed": true, "closedAt": "2020-09-25T03:06:36Z", "author": {"login": "strongduanmu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLipSIAH2gAyNDkxNTExNTM2OjUyZjIwMDllMmZhOTExMWI0OWFiZWI3YTQ2NjBkMzg0NjA1NjYwOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMM5mTAFqTQ5NjA4MTEwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52f2009e2fa9111b49abeb7a4660d38460566098", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/52f2009e2fa9111b49abeb7a4660d38460566098", "committedDate": "2020-09-23T01:52:16Z", "message": "migrate some methods in InsertStatement to InsertStatementContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d", "committedDate": "2020-09-23T04:42:03Z", "message": "Merge branch 'issue-7170-dev-0923' into issue-7170-dev-0922"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzYzNTUy", "url": "https://github.com/apache/shardingsphere/pull/7573#pullrequestreview-494363552", "createdAt": "2020-09-23T07:37:20Z", "commit": {"oid": "b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozNzoyMFrOHWaV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzo1MjoyOVrOHWa8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MjI4OQ==", "bodyText": "Since getValueCountForPerGroup is only used by GeneratedKeyContextEngine, do you think it is better to move it to GeneratedKeyContextEngine?", "url": "https://github.com/apache/shardingsphere/pull/7573#discussion_r493262289", "createdAt": "2020-09-23T07:37:20Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/handler/dml/InsertStatementHandler.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.dialect.handler.dml;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.InsertValuesSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.SetAssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.OnDuplicateKeyColumnsSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.WithSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.PostgreSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.SQLServerStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * InsertStatement handler for different dialect SQLStatements.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class InsertStatementHandler {\n+\n+    /**\n+     * Get OnDuplicateKeyColumnsSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return OnDuplicateKeyColumnsSegment\n+     */\n+    public static Optional<OnDuplicateKeyColumnsSegment> getOnDuplicateKeyColumnsSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getOnDuplicateKeyColumns();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get SetAssignmentSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return SetAssignmentSegment\n+     */\n+    public static Optional<SetAssignmentSegment> getSetAssignmentSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getSetAssignment();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get WithSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return WithSegment\n+     */\n+    public static Optional<WithSegment> getWithSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof PostgreSQLStatement) {\n+            return ((PostgreSQLInsertStatement) insertStatement).getWithSegment();\n+        }\n+        if (insertStatement instanceof SQLServerStatement) {\n+            return ((SQLServerInsertStatement) insertStatement).getWithSegment();\n+        }\n+        return Optional.empty();\n+    }\n+    \n+    /**\n+     * Get column names.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return column names collection\n+     */\n+    public static List<String> getColumnNames(final InsertStatement insertStatement) {\n+        Optional<SetAssignmentSegment> setAssignment = getSetAssignmentSegment(insertStatement);\n+        return setAssignment.isPresent() ? getColumnNamesForSetAssignment(setAssignment.get()) : getColumnNamesForInsertColumns(insertStatement.getColumns());\n+    }\n+    \n+    private static List<String> getColumnNamesForSetAssignment(final SetAssignmentSegment setAssignment) {\n+        List<String> result = new LinkedList<>();\n+        for (AssignmentSegment each : setAssignment.getAssignments()) {\n+            result.add(each.getColumn().getIdentifier().getValue().toLowerCase());\n+        }\n+        return result;\n+    }\n+    \n+    private static List<String> getColumnNamesForInsertColumns(final Collection<ColumnSegment> columns) {\n+        List<String> result = new LinkedList<>();\n+        for (ColumnSegment each : columns) {\n+            result.add(each.getIdentifier().getValue().toLowerCase());\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Get value count for per value list.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return value count\n+     */\n+    public static int getValueCountForPerGroup(final InsertStatement insertStatement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NzY2Mg==", "bodyText": "How about moving getColumnNames and getAllValueExpressions to InsertStatementContext.java?\nAccordingly, please consider the following code clip as well.\ngeneratedKeyContext = new GeneratedKeyContextEngine(schemaMetaData).createGenerateKeyContext(parameters, sqlStatement).orElse(null);\n\n-->\n\ngeneratedKeyContext = new GeneratedKeyContextEngine(sqlStatement, schemaMetaData).createGenerateKeyContext(columnNames, valueExpressions, parameters).orElse(null);", "url": "https://github.com/apache/shardingsphere/pull/7573#discussion_r493267662", "createdAt": "2020-09-23T07:45:42Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/handler/dml/InsertStatementHandler.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.dialect.handler.dml;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.InsertValuesSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.SetAssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.OnDuplicateKeyColumnsSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.WithSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.PostgreSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.SQLServerStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * InsertStatement handler for different dialect SQLStatements.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class InsertStatementHandler {\n+\n+    /**\n+     * Get OnDuplicateKeyColumnsSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return OnDuplicateKeyColumnsSegment\n+     */\n+    public static Optional<OnDuplicateKeyColumnsSegment> getOnDuplicateKeyColumnsSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getOnDuplicateKeyColumns();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get SetAssignmentSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return SetAssignmentSegment\n+     */\n+    public static Optional<SetAssignmentSegment> getSetAssignmentSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getSetAssignment();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get WithSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return WithSegment\n+     */\n+    public static Optional<WithSegment> getWithSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof PostgreSQLStatement) {\n+            return ((PostgreSQLInsertStatement) insertStatement).getWithSegment();\n+        }\n+        if (insertStatement instanceof SQLServerStatement) {\n+            return ((SQLServerInsertStatement) insertStatement).getWithSegment();\n+        }\n+        return Optional.empty();\n+    }\n+    \n+    /**\n+     * Get column names.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return column names collection\n+     */\n+    public static List<String> getColumnNames(final InsertStatement insertStatement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MjI2MQ==", "bodyText": "Here is my thought about this point,\nI am a little worried that we mix up the handler and context for one SQLStatement. For me, handler is to hide the handling for database dialects and provide the basic functions to get the dialect segments. While, context is to give some of the functions containing ShardingSphere logics (or simply speaking, for routing and rewriting)\nI'd like to listen to your thinking. If I missed something, please let me know. :-)", "url": "https://github.com/apache/shardingsphere/pull/7573#discussion_r493272261", "createdAt": "2020-09-23T07:52:29Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/dialect/handler/dml/InsertStatementHandler.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.dialect.handler.dml;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.AssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.InsertValuesSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.SetAssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.OnDuplicateKeyColumnsSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.WithSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.PostgreSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.SQLServerStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * InsertStatement handler for different dialect SQLStatements.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class InsertStatementHandler {\n+\n+    /**\n+     * Get OnDuplicateKeyColumnsSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return OnDuplicateKeyColumnsSegment\n+     */\n+    public static Optional<OnDuplicateKeyColumnsSegment> getOnDuplicateKeyColumnsSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getOnDuplicateKeyColumns();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get SetAssignmentSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return SetAssignmentSegment\n+     */\n+    public static Optional<SetAssignmentSegment> getSetAssignmentSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof MySQLStatement) {\n+            return ((MySQLInsertStatement) insertStatement).getSetAssignment();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get WithSegment.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return WithSegment\n+     */\n+    public static Optional<WithSegment> getWithSegment(final InsertStatement insertStatement) {\n+        if (insertStatement instanceof PostgreSQLStatement) {\n+            return ((PostgreSQLInsertStatement) insertStatement).getWithSegment();\n+        }\n+        if (insertStatement instanceof SQLServerStatement) {\n+            return ((SQLServerInsertStatement) insertStatement).getWithSegment();\n+        }\n+        return Optional.empty();\n+    }\n+    \n+    /**\n+     * Get column names.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return column names collection\n+     */\n+    public static List<String> getColumnNames(final InsertStatement insertStatement) {\n+        Optional<SetAssignmentSegment> setAssignment = getSetAssignmentSegment(insertStatement);\n+        return setAssignment.isPresent() ? getColumnNamesForSetAssignment(setAssignment.get()) : getColumnNamesForInsertColumns(insertStatement.getColumns());\n+    }\n+    \n+    private static List<String> getColumnNamesForSetAssignment(final SetAssignmentSegment setAssignment) {\n+        List<String> result = new LinkedList<>();\n+        for (AssignmentSegment each : setAssignment.getAssignments()) {\n+            result.add(each.getColumn().getIdentifier().getValue().toLowerCase());\n+        }\n+        return result;\n+    }\n+    \n+    private static List<String> getColumnNamesForInsertColumns(final Collection<ColumnSegment> columns) {\n+        List<String> result = new LinkedList<>();\n+        for (ColumnSegment each : columns) {\n+            result.add(each.getIdentifier().getValue().toLowerCase());\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Get value count for per value list.\n+     *\n+     * @param insertStatement InsertStatement\n+     * @return value count\n+     */\n+    public static int getValueCountForPerGroup(final InsertStatement insertStatement) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MjI4OQ=="}, "originalCommit": {"oid": "b7b4c07f3f1cf1157785c3c2741f02f3b1d5696d"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2c732cb81180d017baf4702b58396cfc7eb3fc9", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/f2c732cb81180d017baf4702b58396cfc7eb3fc9", "committedDate": "2020-09-24T04:34:26Z", "message": "Merge branch 'issue-7170-dev-0924' into issue-7170-dev-0922"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b502daed017446a0da5dbe4a34ed35455ff322", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/d4b502daed017446a0da5dbe4a34ed35455ff322", "committedDate": "2020-09-24T11:14:12Z", "message": "optimize code review problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d5e6b970fae06ec75a1c76762893d5937a1595", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/59d5e6b970fae06ec75a1c76762893d5937a1595", "committedDate": "2020-09-24T14:22:49Z", "message": "optimize refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa25b94e0006456e67d091abe883b8faf1eff7db", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/fa25b94e0006456e67d091abe883b8faf1eff7db", "committedDate": "2020-09-24T14:34:59Z", "message": "optimize parameter name and javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDgxMTAy", "url": "https://github.com/apache/shardingsphere/pull/7573#pullrequestreview-496081102", "createdAt": "2020-09-25T03:06:06Z", "commit": {"oid": "fa25b94e0006456e67d091abe883b8faf1eff7db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3988, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}