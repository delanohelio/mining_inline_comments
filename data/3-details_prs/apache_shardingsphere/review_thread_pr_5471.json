{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTQzNTc4", "number": 5471, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxM1rOD6qxbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxN1rOD6qxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQ0NzgxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxM1rOGSoVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxM1rOGSoVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4ODM5NQ==", "bodyText": "It is better to rename return value as result", "url": "https://github.com/apache/shardingsphere/pull/5471#discussion_r422188395", "createdAt": "2020-05-08T14:51:13Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "diffHunk": "@@ -142,6 +144,40 @@ public RuleSchemaMetaData load(final DatabaseType databaseType, final DataSource\n         return load(databaseType, dataSourceMap, tableName, properties);\n     }\n     \n+    private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n+                                                  final int maxConnectionCount, final Collection<String> excludedTableNames) {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n+            try {\n+                SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+                if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                }\n+            } catch (SQLException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        })).forEach(listenableFuture -> {\n+            try {\n+                listenableFuture.get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        });\n+        return unconfiguredSchemaMetaDataMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f412fa8f499bf72e0ebd758ead4e1bed264e08"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQ0ODYxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxN1rOGSoVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MToxN1rOGSoVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4ODQ4Ng==", "bodyText": "It is better to rename return value as result", "url": "https://github.com/apache/shardingsphere/pull/5471#discussion_r422188486", "createdAt": "2020-05-08T14:51:17Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-underlying/shardingsphere-common/src/main/java/org/apache/shardingsphere/underlying/common/metadata/schema/RuleSchemaMetaDataLoader.java", "diffHunk": "@@ -142,6 +144,40 @@ public RuleSchemaMetaData load(final DatabaseType databaseType, final DataSource\n         return load(databaseType, dataSourceMap, tableName, properties);\n     }\n     \n+    private Map<String, SchemaMetaData> asyncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap, final ListeningExecutorService executorService,\n+                                                  final int maxConnectionCount, final Collection<String> excludedTableNames) {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new ConcurrentHashMap<>(dataSourceMap.size(), 1);\n+        dataSourceMap.entrySet().stream().map(each -> executorService.submit(() -> {\n+            try {\n+                SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(each.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+                if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                    unconfiguredSchemaMetaDataMap.put(each.getKey(), schemaMetaData);\n+                }\n+            } catch (SQLException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        })).forEach(listenableFuture -> {\n+            try {\n+                listenableFuture.get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new ShardingSphereException(\"RuleSchemaMetaData load faild\", e);\n+            }\n+        });\n+        return unconfiguredSchemaMetaDataMap;\n+    }\n+    \n+    private Map<String, SchemaMetaData> syncLoad(final DatabaseType databaseType, final Map<String, DataSource> dataSourceMap,\n+                                                 final int maxConnectionCount, final Collection<String> excludedTableNames) throws SQLException {\n+        Map<String, SchemaMetaData> unconfiguredSchemaMetaDataMap = new HashMap<>(dataSourceMap.size(), 1);\n+        for (Entry<String, DataSource> entry : dataSourceMap.entrySet()) {\n+            SchemaMetaData schemaMetaData = SchemaMetaDataLoader.load(entry.getValue(), maxConnectionCount, databaseType.getName(), excludedTableNames);\n+            if (!schemaMetaData.getAllTableNames().isEmpty()) {\n+                unconfiguredSchemaMetaDataMap.put(entry.getKey(), schemaMetaData);\n+            }\n+        }\n+        return unconfiguredSchemaMetaDataMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f412fa8f499bf72e0ebd758ead4e1bed264e08"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}