{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzg2MDAy", "number": 8508, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNTo1NFrOFAs-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDo0MlrOFAte4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjgxMjI3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNTo1NFrOH_HwOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNTo1NFrOH_HwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0OTM2OA==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535949368", "createdAt": "2020-12-04T09:15:54Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);\n+        Preconditions.checkNotNull(strategyStr, \"The props`%s` cannot be null when uses class based sharding strategy.\", STRATEGY_KEY);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjgxODUyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNzoxNVrOH_Hz0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTo0OTo0OVrOH_JH6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDI4OA==", "bodyText": "strategyKey may better than strategyStr for variable name", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535950288", "createdAt": "2020-12-04T09:17:15Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3MTgxOQ==", "bodyText": "Yes it is, thanks", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535971819", "createdAt": "2020-12-04T09:49:49Z", "author": {"login": "RaigorJiang"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDI4OA=="}, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjgzMzY2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMDo1OFrOH_H8yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozMTo1MlrOH_Kwiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjU4NQ==", "bodyText": "There are ShardingStrategy and ShardingAlgorithm in current ShardingSphere,\nSo name of class ClassBasedShardingAlgorithmStrategy maybe not good enough.\nMaybe ClassBasedShardingAlgorithmType is better, what do you think?", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535952585", "createdAt": "2020-12-04T09:20:58Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Class based sharding strategy.\n+ */\n+@RequiredArgsConstructor\n+@Getter\n+public enum ClassBasedShardingAlgorithmStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3Njg5OQ==", "bodyText": "I think it is not good enough too, but our props key is 'strategy', if the class named 'type', is it strange?", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535976899", "createdAt": "2020-12-04T09:57:30Z", "author": {"login": "RaigorJiang"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Class based sharding strategy.\n+ */\n+@RequiredArgsConstructor\n+@Getter\n+public enum ClassBasedShardingAlgorithmStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjU4NQ=="}, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODYwMw==", "bodyText": "How about strategy_type?", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535998603", "createdAt": "2020-12-04T10:31:52Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Class based sharding strategy.\n+ */\n+@RequiredArgsConstructor\n+@Getter\n+public enum ClassBasedShardingAlgorithmStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjU4NQ=="}, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg0MDU0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMjozMVrOH_IAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMjozMVrOH_IAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MzYwNw==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535953607", "createdAt": "2020-12-04T09:22:31Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);\n+        Preconditions.checkNotNull(strategyStr, \"The props`%s` cannot be null when uses class based sharding strategy.\", STRATEGY_KEY);\n+\n+        strategy = ClassBasedShardingAlgorithmStrategy.valueFrom(strategyStr.trim());\n+        Preconditions.checkArgument(Objects.nonNull(strategy), \"Unknown class based sharding strategy %s.\", strategy);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg0NzM3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyNDowNlrOH_IExw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyNDowNlrOH_IExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NDYzMQ==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535954631", "createdAt": "2020-12-04T09:24:06Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);\n+        Preconditions.checkNotNull(strategyStr, \"The props`%s` cannot be null when uses class based sharding strategy.\", STRATEGY_KEY);\n+\n+        strategy = ClassBasedShardingAlgorithmStrategy.valueFrom(strategyStr.trim());\n+        Preconditions.checkArgument(Objects.nonNull(strategy), \"Unknown class based sharding strategy %s.\", strategy);\n+\n+        algorithmClassName = props.getProperty(ALGORITHM_CLASS_NAME_KEY);\n+        Preconditions.checkNotNull(algorithmClassName, \"The props `%s` cannot be null when uses class based sharding strategy.\", ALGORITHM_CLASS_NAME_KEY);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg1MTAyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyNDo1NFrOH_IG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyNDo1NFrOH_IG3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NTE2NQ==", "bodyText": "Switch case may better than multiple if statements", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535955165", "createdAt": "2020-12-04T09:24:54Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Class based sharding algorithm.\n+ */\n+public class ClassBasedShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>>, ComplexKeysShardingAlgorithm<Comparable<?>>, HintShardingAlgorithm<Comparable<?>> {\n+\n+    private static final String STRATEGY_KEY = \"strategy\";\n+\n+    private static final String ALGORITHM_CLASS_NAME_KEY = \"algorithmClassName\";\n+\n+    private StandardShardingAlgorithm standardShardingAlgorithm;\n+\n+    private ComplexKeysShardingAlgorithm complexKeysShardingAlgorithm;\n+\n+    private HintShardingAlgorithm hintShardingAlgorithm;\n+\n+    @Getter\n+    private ClassBasedShardingAlgorithmStrategy strategy;\n+\n+    @Getter\n+    private String algorithmClassName;\n+\n+    @Getter\n+    @Setter\n+    private Properties props = new Properties();\n+\n+    @Override\n+    public void init() {\n+        String strategyStr = props.getProperty(STRATEGY_KEY);\n+        Preconditions.checkNotNull(strategyStr, \"The props`%s` cannot be null when uses class based sharding strategy.\", STRATEGY_KEY);\n+\n+        strategy = ClassBasedShardingAlgorithmStrategy.valueFrom(strategyStr.trim());\n+        Preconditions.checkArgument(Objects.nonNull(strategy), \"Unknown class based sharding strategy %s.\", strategy);\n+\n+        algorithmClassName = props.getProperty(ALGORITHM_CLASS_NAME_KEY);\n+        Preconditions.checkNotNull(algorithmClassName, \"The props `%s` cannot be null when uses class based sharding strategy.\", ALGORITHM_CLASS_NAME_KEY);\n+\n+        createAlgorithmInstance(strategy, algorithmClassName);\n+    }\n+\n+    private void createAlgorithmInstance(final ClassBasedShardingAlgorithmStrategy classBasedShardingAlgorithmStrategy, final String algorithmClassName) {\n+        if (ClassBasedShardingAlgorithmStrategy.STANDARD == classBasedShardingAlgorithmStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg4MjgxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMjowOVrOH_IZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMjowOVrOH_IZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1OTk0MA==", "bodyText": "Class can be final if not for extend", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535959940", "createdAt": "2020-12-04T09:32:09Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.sharding.spi.ShardingAlgorithm;\n+\n+/**\n+ * ShardingSphere class based algorithm factory.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public class ClassBasedShardingAlgorithmFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg4NzUwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzowM1rOH_IcSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzowM1rOH_IcSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MDY1MA==", "bodyText": "Value may instead of enum.name()", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535960650", "createdAt": "2020-12-04T09:33:03Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Class based sharding strategy.\n+ */\n+@RequiredArgsConstructor\n+@Getter\n+public enum ClassBasedShardingAlgorithmStrategy {\n+\n+    /**\n+     * The sharding strategy is standard.\n+     */\n+    STANDARD(\"standard\"),\n+\n+    /**\n+     * The sharding strategy is complex.\n+     */\n+    COMPLEX(\"complex\"),\n+\n+    /**\n+     * The sharding strategy is hint.\n+     */\n+    HINT(\"hint\");\n+\n+    private final String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg4OTY1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzozNlrOH_Idow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozMzozNlrOH_Idow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MDk5NQ==", "bodyText": "@return javadoc should not upper case for first letter", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535960995", "createdAt": "2020-12-04T09:33:36Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Class based sharding strategy.\n+ */\n+@RequiredArgsConstructor\n+@Getter\n+public enum ClassBasedShardingAlgorithmStrategy {\n+\n+    /**\n+     * The sharding strategy is standard.\n+     */\n+    STANDARD(\"standard\"),\n+\n+    /**\n+     * The sharding strategy is complex.\n+     */\n+    COMPLEX(\"complex\"),\n+\n+    /**\n+     * The sharding strategy is hint.\n+     */\n+    HINT(\"hint\");\n+\n+    private final String value;\n+\n+    /**\n+     * Value of Class based sharding strategy.\n+     *\n+     * @param value value\n+     * @return Class based sharding strategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg5MjA1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDowOVrOH_Ie-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDowOVrOH_Ie-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MTMzNw==", "bodyText": "Class can be final if not for extend", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535961337", "createdAt": "2020-12-04T09:34:09Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/algorithm/sharding/classbased/ClassBasedShardingAlgorithmTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.algorithm.sharding.classbased;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.fixture.ClassBasedComplexKeysShardingAlgorithmFixture;\n+import org.apache.shardingsphere.sharding.fixture.ClassBasedHintShardingAlgorithmFixture;\n+import org.apache.shardingsphere.sharding.fixture.ClassBasedStandardShardingAlgorithmFixture;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class ClassBasedShardingAlgorithmTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg5MzMyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedComplexKeysShardingAlgorithmFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDoyMVrOH_IfpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDoyMVrOH_IfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MTUwOA==", "bodyText": "Class can be final if not for extend", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535961508", "createdAt": "2020-12-04T09:34:21Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedComplexKeysShardingAlgorithmFixture.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.fixture;\n+\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;\n+\n+import java.util.Collection;\n+\n+public class ClassBasedComplexKeysShardingAlgorithmFixture implements ComplexKeysShardingAlgorithm<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg5NDY0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedHintShardingAlgorithmFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDozNFrOH_IgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDozNFrOH_IgVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MTY4NQ==", "bodyText": "Class can be final if not for extend", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535961685", "createdAt": "2020-12-04T09:34:34Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedHintShardingAlgorithmFixture.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.fixture;\n+\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingAlgorithm;\n+import org.apache.shardingsphere.sharding.api.sharding.hint.HintShardingValue;\n+\n+import java.util.Collection;\n+\n+public class ClassBasedHintShardingAlgorithmFixture implements HintShardingAlgorithm<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjg5NTA2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedStandardShardingAlgorithmFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDo0MlrOH_Igmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozNDo0MlrOH_Igmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2MTc1NA==", "bodyText": "Class can be final if not for extend", "url": "https://github.com/apache/shardingsphere/pull/8508#discussion_r535961754", "createdAt": "2020-12-04T09:34:42Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/test/java/org/apache/shardingsphere/sharding/fixture/ClassBasedStandardShardingAlgorithmFixture.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.fixture;\n+\n+import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+\n+public class ClassBasedStandardShardingAlgorithmFixture implements StandardShardingAlgorithm<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333d82ae4911d0a2e23c2011037cdaeda1dffc26"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 528, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}