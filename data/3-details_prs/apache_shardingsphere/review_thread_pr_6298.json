{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTA1NDQy", "number": 6298, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozMzo0NlrOEMaMBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNzo0MFrOEMbVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQ3NDI4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozMzo0NlrOGugAUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozMzo0NlrOGugAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMjA1MA==", "bodyText": "extract a new method", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451412050", "createdAt": "2020-07-08T09:33:46Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/ProxyConfigurationConverterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Optional;\n+import org.apache.shardingsphere.infra.spi.exception.ServiceProviderNotFoundException;\n+import org.apache.shardingsphere.infra.spi.singleton.SingletonServiceLoader;\n+\n+/**\n+ * Proxy configuration converter factory.\n+ */\n+public final class ProxyConfigurationConverterFactory {\n+    \n+    /**\n+     * New proxy configuration converter instances.\n+     *\n+     * @param isOrchestration is orchestration\n+     * @return proxy configuration converter\n+     */\n+    public static ProxyConfigurationConverter newInstances(final boolean isOrchestration) {\n+        if (isOrchestration) {\n+            Optional<ProxyConfigurationConverter> configurationConverter = SingletonServiceLoader.getServiceLoader(ProxyConfigurationConverter.class).newServiceInstances();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQ4MzgwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozNjoyMlrOGugGUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo0MjoxNlrOGugTjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzU4NQ==", "bodyText": "final", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451413585", "createdAt": "2020-07-08T09:36:22Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.swapper.ClusterConfigurationYamlSwapper;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsAware;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsBuilder;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.ShardingConfiguration;\n+\n+/**\n+ * Default configuration converter.\n+ */\n+public class DefaultConfigurationConverter extends AbstractConfigurationConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNjk3NA==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451416974", "createdAt": "2020-07-08T09:42:16Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/DefaultConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.swapper.ClusterConfigurationYamlSwapper;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsAware;\n+import org.apache.shardingsphere.kernel.context.SchemaContextsBuilder;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.ShardingConfiguration;\n+\n+/**\n+ * Default configuration converter.\n+ */\n+public class DefaultConfigurationConverter extends AbstractConfigurationConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzU4NQ=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQ4NjU4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozNzowOFrOGugICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo0ODo0MlrOGugh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDAyNQ==", "bodyText": "why not add a setter?", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414025", "createdAt": "2020-07-08T09:37:08Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMDY1NQ==", "bodyText": "is areadly exist in before\uff0c mybe use Field more reasonable", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451420655", "createdAt": "2020-07-08T09:48:42Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDAyNQ=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQ4ODI3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozNzozOFrOGugJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozNzozOFrOGugJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDMwMg==", "bodyText": "remove 10, default is 16", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414302", "createdAt": "2020-07-08T09:37:38Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxySchemaContexts.getInstance(), getSchemaContexts(authentication));\n+    }\n+    \n+    private SchemaContexts getSchemaContexts(final Authentication authentication) {\n+        return new SchemaContexts(getSchemaContextMap(), new ConfigurationProperties(new Properties()), authentication);\n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        Map<String, SchemaContext> result = new HashMap<>(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQ4OTUyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozNzo1OVrOGugJ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo1MDozOFrOGugmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDUyMQ==", "bodyText": "constants", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451414521", "createdAt": "2020-07-08T09:37:59Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxySchemaContexts.getInstance(), getSchemaContexts(authentication));\n+    }\n+    \n+    private SchemaContexts getSchemaContexts(final Authentication authentication) {\n+        return new SchemaContexts(getSchemaContextMap(), new ConfigurationProperties(new Properties()), authentication);\n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        Map<String, SchemaContext> result = new HashMap<>(10);\n+        for (int i = 0; i < 10; i++) {\n+            String name = \"schema_\" + i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMTc0MA==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451421740", "createdAt": "2020-07-08T09:50:38Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-mysql/src/test/java/org/apache/shardingsphere/proxy/frontend/mysql/MySQLProtocolFrontendEngineTest.java", "diffHunk": "@@ -171,4 +142,26 @@ private void setConnectionPhase(final MySQLConnectionPhase connectionPhase) {\n         field.setAccessible(true);\n         field.set(mysqlProtocolFrontendEngine.getAuthEngine(), connectionPhase);\n     }\n+    \n+    @SneakyThrows\n+    private void initProxySchemaContexts(final Authentication authentication) {\n+        Field field = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxySchemaContexts.getInstance(), getSchemaContexts(authentication));\n+    }\n+    \n+    private SchemaContexts getSchemaContexts(final Authentication authentication) {\n+        return new SchemaContexts(getSchemaContextMap(), new ConfigurationProperties(new Properties()), authentication);\n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        Map<String, SchemaContext> result = new HashMap<>(10);\n+        for (int i = 0; i < 10; i++) {\n+            String name = \"schema_\" + i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDUyMQ=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDY1MjMyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNDo1MFrOGuhuaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNzo1M1rOGuh0mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDIzMw==", "bodyText": "May be Get", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451440233", "createdAt": "2020-07-08T10:24:50Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTgxOA==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441818", "createdAt": "2020-07-08T10:27:53Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDIzMw=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDY1MzU5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNToxMVrOGuhvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNzo0N1rOGuh0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDQzMA==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451440430", "createdAt": "2020-07-08T10:25:11Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return data source parameters map\n+     */\n+    protected Map<String, Map<String, DataSourceParameter>> getDataSourceParametersMap(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> getDataSourceParameters(entry.getValue().getDataSources())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTc2MQ==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441761", "createdAt": "2020-07-08T10:27:47Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return rule configurations\n+     */\n+    protected Map<String, Collection<RuleConfiguration>> getRuleConfigurations(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        YamlRuleConfigurationSwapperEngine swapperEngine = new YamlRuleConfigurationSwapperEngine();\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> swapperEngine.swapToRuleConfigurations(entry.getValue().getRules())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters map.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.\n+     * @return data source parameters map\n+     */\n+    protected Map<String, Map<String, DataSourceParameter>> getDataSourceParametersMap(final Map<String, YamlProxyRuleConfiguration> localRuleConfigs) {\n+        return localRuleConfigs.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> getDataSourceParameters(entry.getValue().getDataSources())));\n+    }\n+    \n+    /**\n+     * Gets data source parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDQzMA=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDY2MTY2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoyNzo0MFrOGuh0IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDozNDoxNFrOGuiAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTY5Nw==", "bodyText": "param comment should not end with '.'", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451441697", "createdAt": "2020-07-08T10:27:40Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0NDkzMg==", "bodyText": "ok\uff0cwill fix", "url": "https://github.com/apache/shardingsphere/pull/6298#discussion_r451444932", "createdAt": "2020-07-08T10:34:14Z", "author": {"login": "yu199195"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/converter/AbstractConfigurationConverter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.converter;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.swapper.MetricsConfigurationYamlSwapper;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+\n+/**\n+ * Abstract configuration converter.\n+ */\n+public abstract class AbstractConfigurationConverter implements ProxyConfigurationConverter {\n+    \n+    /**\n+     * Get rule configurations.\n+     *\n+     * @param localRuleConfigs rule configs for YAML.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTY5Nw=="}, "originalCommit": {"oid": "db4ca85d4b9be3fbd6d130f37b2357ec319a6f04"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 462, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}