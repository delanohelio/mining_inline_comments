{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDc1MTA4", "number": 7740, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMTowMjoyMlrOEsXwIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxODozMVrOEs2YhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTYxOTUzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/util/StatementValidatorUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMTowMjoyMlrOHfmlOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzozNToxOFrOHfnl2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMDAyNQ==", "bodyText": "Is this class just for some of the unsupported DDLSQLStataments?  In that case, do you think an abstract class to carry these functions will be better?\nStatementValidatorUtil gives me a  feeling that it is born for all the statements.", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502900025", "createdAt": "2020-10-11T11:02:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/util/StatementValidatorUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.validator.util;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.sharding.route.engine.exception.NoSuchTableException;\n+import org.apache.shardingsphere.sharding.route.engine.exception.TableExistsException;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Statement validator utility class.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class StatementValidatorUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNjU2OQ==", "bodyText": "Is this class just for some of the unsupported DDLSQLStataments? In that case, do you think an abstract class to carry these functions will be better?\nStatementValidatorUtil gives me a feeling that it is born for all the statements.\n\n@tristaZero I agree with your point, how about adding a new abstract class ShardingDDLStatementValidator to carry these functions\uff1f", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502916569", "createdAt": "2020-10-11T13:35:18Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/util/StatementValidatorUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.validator.util;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.sharding.route.engine.exception.NoSuchTableException;\n+import org.apache.shardingsphere.sharding.route.engine.exception.TableExistsException;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Statement validator utility class.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class StatementValidatorUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMDAyNQ=="}, "originalCommit": {"oid": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTYyNzc2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/ShardingStatementValidatorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMToxMTo1MFrOHfmpRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMzo0NDo0NVrOHfnp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMTA2Mg==", "bodyText": "If Create view SQL can work well for single table currently, do you think ShardingUnconfiguredTablesRoutingEngine will be a better match?", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502901062", "createdAt": "2020-10-11T11:11:50Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/ShardingStatementValidatorFactory.java", "diffHunk": "@@ -66,6 +73,25 @@\n         if (sqlStatement instanceof CreateProcedureStatement) {\n             return Optional.of(new ShardingCreateProcedureStatementValidator());\n         }\n+        if (sqlStatement instanceof CreateViewStatement) {\n+            return Optional.of(new ShardingCreateViewStatementValidator());\n+        }\n+        if (sqlStatement instanceof AlterViewStatement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkxNzU4OA==", "bodyText": "If Create view SQL can work well for single table currently, do you think ShardingUnconfiguredTablesRoutingEngine will be a better match?\n\n@tristaZero ShardingUnconfiguredTablesRoutingEngine can meet the needs of creating views on a single data source. I think it is a better choice. \ud83d\udc4d", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r502917588", "createdAt": "2020-10-11T13:44:45Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/ShardingStatementValidatorFactory.java", "diffHunk": "@@ -66,6 +73,25 @@\n         if (sqlStatement instanceof CreateProcedureStatement) {\n             return Optional.of(new ShardingCreateProcedureStatementValidator());\n         }\n+        if (sqlStatement instanceof CreateViewStatement) {\n+            return Optional.of(new ShardingCreateViewStatementValidator());\n+        }\n+        if (sqlStatement instanceof AlterViewStatement) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwMTA2Mg=="}, "originalCommit": {"oid": "d40f65bfc98f7ac94f2ed4388e9b525fbe7f7910"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYzNjUwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxNzoxOFrOHgT8Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxNzoxOFrOHgT8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzIyNg==", "bodyText": "Oh, you did it!", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503643226", "createdAt": "2020-10-13T03:17:18Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n+\n+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n+import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n+\n+/**\n+ * Sharding dml statement validator.\n+ */\n+public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYzODEzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/model/schema/model/schema/SchemaMetaDataLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxODozMVrOHgT9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzozMDo1NVrOHgUJYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzQ3NQ==", "bodyText": "Why do we need VIEW_TYPE?", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503643475", "createdAt": "2020-10-13T03:18:31Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/model/schema/model/schema/SchemaMetaDataLoader.java", "diffHunk": "@@ -42,6 +42,8 @@\n     \n     private static final String TABLE_TYPE = \"TABLE\";\n     \n+    private static final String VIEW_TYPE = \"VIEW\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjU2MQ==", "bodyText": "Why do we need VIEW_TYPE?\n\n@tristaZero In order to support select view statement.", "url": "https://github.com/apache/shardingsphere/pull/7740#discussion_r503646561", "createdAt": "2020-10-13T03:30:55Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/metadata/model/schema/model/schema/SchemaMetaDataLoader.java", "diffHunk": "@@ -42,6 +42,8 @@\n     \n     private static final String TABLE_TYPE = \"TABLE\";\n     \n+    private static final String VIEW_TYPE = \"VIEW\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MzQ3NQ=="}, "originalCommit": {"oid": "05cffa61e4f9b4c8b6844d0caa2e388c1a07455b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 641, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}