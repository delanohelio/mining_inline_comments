{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzM5OTI1", "number": 3899, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0OToxM1rODWeNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMToxNDo0NFrODWtypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODkwMjcyOnYy", "diffSide": "RIGHT", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/reader/AbstractJdbcReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0OToxM1rOFbQBPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo0OToxM1rOFbQBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExODMzMg==", "bodyText": "Abstract class should not perceive the specific type, it can use abstract method replace, and let subClass to implement.", "url": "https://github.com/apache/shardingsphere/pull/3899#discussion_r364118332", "createdAt": "2020-01-08T08:49:13Z", "author": {"login": "KomachiSion"}, "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/reader/AbstractJdbcReader.java", "diffHunk": "@@ -48,46 +48,44 @@\n  */\n @Slf4j\n public abstract class AbstractJdbcReader extends AbstractSyncRunner implements JdbcReader {\n-\n+    \n     @Getter(AccessLevel.PROTECTED)\n     private final RdbmsConfiguration rdbmsConfiguration;\n     \n     private final DataSourceFactory dataSourceFactory;\n-\n+    \n     @Setter\n     private Channel channel;\n-\n+    \n     public AbstractJdbcReader(final RdbmsConfiguration rdbmsConfiguration, final DataSourceFactory dataSourceFactory) {\n         if (!JdbcDataSourceConfiguration.class.equals(rdbmsConfiguration.getDataSourceConfiguration().getClass())) {\n             throw new UnsupportedOperationException(\"AbstractJdbcReader only support JdbcDataSourceConfiguration\");\n         }\n         this.rdbmsConfiguration = rdbmsConfiguration;\n         this.dataSourceFactory = dataSourceFactory;\n     }\n-\n+    \n     @Override\n     public final void run() {\n         start();\n         read(channel);\n     }\n-\n+    \n     @Override\n     public final void read(final Channel channel) {\n         try (Connection conn = dataSourceFactory.getDataSource(rdbmsConfiguration.getDataSourceConfiguration()).getConnection()) {\n             String sql = String.format(\"select * from %s %s\", rdbmsConfiguration.getTableName(), rdbmsConfiguration.getWhereCondition());\n             PreparedStatement ps = conn.prepareStatement(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n-            ps.setFetchSize(100);\n-            ps.setFetchDirection(ResultSet.FETCH_REVERSE);\n+            ps.setFetchSize(Integer.MIN_VALUE);\n             ResultSet rs = ps.executeQuery();\n             ResultSetMetaData metaData = rs.getMetaData();\n             while (isRunning() && rs.next()) {\n                 DataRecord record = new DataRecord(new NopLogPosition(), metaData.getColumnCount());\n                 record.setType(\"bootstrap-insert\");\n                 record.setTableName(rdbmsConfiguration.getTableNameMap().get(rdbmsConfiguration.getTableName()));\n                 for (int i = 1; i <= metaData.getColumnCount(); i++) {\n-                    if (Types.TIME == rs.getMetaData().getColumnType(i)\n-                            || Types.DATE == rs.getMetaData().getColumnType(i)\n-                            || Types.TIMESTAMP == rs.getMetaData().getColumnType(i)) {\n+                    if (\"MySQL\".equals(rdbmsConfiguration.getDataSourceConfiguration().getDatabaseType().getName())\n+                            && isDateTimeValue(rs.getMetaData().getColumnType(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d83d4189ba4930a2fa5cf4e41a2169f60dbd4a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODkwNzkxOnYy", "diffSide": "RIGHT", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1MTowM1rOFbQETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1MTowM1rOFbQETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExOTExNg==", "bodyText": "Similar problem as AbstractJdbcReader.\nThis can abstract a protect method, and let subClass to implement.\nOr create a new interface to handle this situation.\neach type database has implement, SQLBuilder only call interface.", "url": "https://github.com/apache/shardingsphere/pull/3899#discussion_r364119116", "createdAt": "2020-01-08T08:51:03Z", "author": {"login": "KomachiSion"}, "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "diffHunk": "@@ -66,6 +66,23 @@ public String load(final String key) {\n                     }\n                 });\n     }\n+    \n+    private void initIdentifierQuoteString(final String databaseType) {\n+        switch (databaseType) {\n+            case \"MySQL\":\n+                leftIdentifierQuoteString = \"`\";\n+                rightIdentifierQuoteString = \"`\";\n+                break;\n+            case \"PostgreSQL\":\n+                leftIdentifierQuoteString = \"\\\"\";\n+                rightIdentifierQuoteString = \"\\\"\";\n+                break;\n+            default:\n+                leftIdentifierQuoteString = \"\";\n+                rightIdentifierQuoteString = \"\";\n+                break;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d83d4189ba4930a2fa5cf4e41a2169f60dbd4a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ0MjkzOnYy", "diffSide": "RIGHT", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/reader/AbstractJdbcReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTowNjo1MVrOFbocqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTowNjo1MVrOFbocqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxODU2OA==", "bodyText": "protected may be enough.", "url": "https://github.com/apache/shardingsphere/pull/3899#discussion_r364518568", "createdAt": "2020-01-09T01:06:51Z", "author": {"login": "KomachiSion"}, "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/reader/AbstractJdbcReader.java", "diffHunk": "@@ -102,7 +93,19 @@ public final void read(final Channel channel) {\n             pushRecord(new FinishedRecord(new NopLogPosition()));\n         }\n     }\n-\n+    \n+    /**\n+     * Read value from {@code ResultSet}.\n+     *\n+     * @param resultSet result set\n+     * @param index of read column\n+     * @return value\n+     * @throws SQLException sql exception\n+     */\n+    public Object readValue(final ResultSet resultSet, final int index) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa5224364259e2c4675fc48e6355b4ccb73c73f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ0NTg4OnYy", "diffSide": "RIGHT", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTowODo0MlrOFboeXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMTowODo0MlrOFboeXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxOTAwNQ==", "bodyText": "Should we rename the class?", "url": "https://github.com/apache/shardingsphere/pull/3899#discussion_r364519005", "createdAt": "2020-01-09T01:08:42Z", "author": {"login": "KomachiSion"}, "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "diffHunk": "@@ -20,33 +20,28 @@\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import org.apache.shardingsphere.shardingscaling.core.metadata.ColumnMetaData;\n+import org.apache.shardingsphere.shardingscaling.core.util.DbMetaDataUtil;\n \n import javax.sql.DataSource;\n import java.util.List;\n import java.util.concurrent.ExecutionException;\n \n-import org.apache.shardingsphere.shardingscaling.core.util.DbMetaDataUtil;\n-import org.apache.shardingsphere.shardingscaling.core.metadata.ColumnMetaData;\n-\n /**\n  * Sql builder.\n  *\n  * @author avalon566\n  */\n-public final class SqlBuilder {\n-    \n-    private static final String LEFT_ESCAPE_QUOTE = \"`\";\n-\n-    private static final String RIGHT_ESCAPE_QUOTE = \"`\";\n+public abstract class SqlBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa5224364259e2c4675fc48e6355b4ccb73c73f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTQ1NTExOnYy", "diffSide": "RIGHT", "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMToxNDo0NFrOFbojmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMToxNDo0NFrOFbojmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyMDM0NA==", "bodyText": "protected may be enough.", "url": "https://github.com/apache/shardingsphere/pull/3899#discussion_r364520344", "createdAt": "2020-01-09T01:14:44Z", "author": {"login": "KomachiSion"}, "path": "sharding-scaling/sharding-scaling-core/src/main/java/org/apache/shardingsphere/shardingscaling/core/execute/executor/writer/SqlBuilder.java", "diffHunk": "@@ -66,6 +61,20 @@ public String load(final String key) {\n                     }\n                 });\n     }\n+    \n+    /**\n+     * Get left identifier quote string.\n+     *\n+     * @return string\n+     */\n+    public abstract String getLeftIdentifierQuoteString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa5224364259e2c4675fc48e6355b4ccb73c73f"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 997, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}