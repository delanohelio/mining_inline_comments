{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzM0Njgy", "number": 6042, "title": "optimize lifecycle management of ShardingTransactionType", "bodyText": "Fixes #ISSUSE_ID.\nChanges proposed in this pull request:\n-ShardingTransactionTypeInterceptor maintains the creation of TransactionType in the thread, and it should also manage its destruction.\n-Let @ShardingTransactionType's value support transfer in multiple connections.\n-Disadvantages: If the TransactionType is assigned to the thread through api(TransactionTypeHolder.set), it needs to be manually(TransactionTypeHolder.clear) destroyed.", "createdAt": "2020-06-15T07:07:38Z", "url": "https://github.com/apache/shardingsphere/pull/6042", "merged": true, "mergeCommit": {"oid": "c4ee9d192cb689de348f177a5be8910e6771fdf1"}, "closed": true, "closedAt": "2020-06-16T08:01:31Z", "author": {"login": "zjinlei"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrbFNQgH2gAyNDM0MzM0NjgyOjBmZTQyNGUzMTQ4MzhmYTM3ZDNjZmY2NGI0MzY2YTFhMWM2ODczNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrwk_EAFqTQzMTI1MzY4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/0fe424e314838fa37d3cff64b4366a1a1c687360", "committedDate": "2020-06-15T06:57:57Z", "message": "optimize lifecycle management of ShardingTransactionType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTAzOTY2", "url": "https://github.com/apache/shardingsphere/pull/6042#pullrequestreview-431103966", "createdAt": "2020-06-16T01:47:13Z", "commit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo0NzoxNFrOGkIZ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjowMToxOFrOGkIonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTYxMw==", "bodyText": "ThreadLocal value will be cleared in connection.close method, see more detail in AbstractConndectionAdapter#close", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440539613", "createdAt": "2020-06-16T01:47:14Z", "author": {"login": "cherrylzhao"}, "path": "examples/shardingsphere-jdbc-example/transaction-example/transaction-2pc-xa-bitronix-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/bitronix/raw/jdbc/OrderServiceImpl.java", "diffHunk": "@@ -65,6 +65,8 @@ public void processSuccess() throws SQLException {\n             doInsert(preparedStatement);\n             connection.commit();\n             System.out.println(\"INSERT 10 orders success\");\n+        } finally {\n+            TransactionTypeHolder.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTgzMA==", "bodyText": "should keep incident in new line", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440539830", "createdAt": "2020-06-16T01:48:02Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractConnectionAdapter.java", "diffHunk": "@@ -74,7 +73,7 @@\n     private volatile boolean closed;\n     \n     private int transactionIsolation = TRANSACTION_READ_UNCOMMITTED;\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MTczOQ==", "bodyText": "for checkstyle: preTransactionType != null => null != preTransactionType", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440541739", "createdAt": "2020-06-16T01:55:19Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java", "diffHunk": "@@ -37,8 +38,16 @@\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n         ShardingTransactionType shardingTransactionType = getAnnotation(methodInvocation);\n         Objects.requireNonNull(shardingTransactionType, \"could not found sharding transaction type annotation\");\n+        TransactionType preTransactionType = TransactionTypeHolder.get();\n         TransactionTypeHolder.set(shardingTransactionType.value());\n-        return methodInvocation.proceed();\n+        try {\n+            return methodInvocation.proceed();\n+        } finally {\n+            TransactionTypeHolder.clear();\n+            if (preTransactionType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MzM4OA==", "bodyText": "it's better to add a unit test to verify this feature. current implementation will not work in multiple @ShardingTransactionType ?", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440543388", "createdAt": "2020-06-16T02:01:18Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java", "diffHunk": "@@ -37,8 +38,16 @@\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n         ShardingTransactionType shardingTransactionType = getAnnotation(methodInvocation);\n         Objects.requireNonNull(shardingTransactionType, \"could not found sharding transaction type annotation\");\n+        TransactionType preTransactionType = TransactionTypeHolder.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5224a7afc079fa7461dd201a1b43754cf1e271c8", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/5224a7afc079fa7461dd201a1b43754cf1e271c8", "committedDate": "2020-06-16T03:22:07Z", "message": "fix review"}, "afterCommit": {"oid": "6f9434d53e1d01778396df52a7b739f73c697df9", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/6f9434d53e1d01778396df52a7b739f73c697df9", "committedDate": "2020-06-16T03:26:29Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9434d53e1d01778396df52a7b739f73c697df9", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/6f9434d53e1d01778396df52a7b739f73c697df9", "committedDate": "2020-06-16T03:26:29Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTU0MTIy", "url": "https://github.com/apache/shardingsphere/pull/6042#pullrequestreview-431154122", "createdAt": "2020-06-16T04:38:44Z", "commit": {"oid": "6f9434d53e1d01778396df52a7b739f73c697df9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozODo0NFrOGkK92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTowNTo0OVrOGkLXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MTU5NQ==", "bodyText": "agree with it", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440581595", "createdAt": "2020-06-16T04:38:44Z", "author": {"login": "cherrylzhao"}, "path": "examples/shardingsphere-jdbc-example/transaction-example/transaction-2pc-xa-bitronix-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/bitronix/raw/jdbc/OrderServiceImpl.java", "diffHunk": "@@ -65,6 +65,8 @@ public void processSuccess() throws SQLException {\n             doInsert(preparedStatement);\n             connection.commit();\n             System.out.println(\"INSERT 10 orders success\");\n+        } finally {\n+            TransactionTypeHolder.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTYxMw=="}, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4ODE5Nw==", "bodyText": "Got it, @ShardingTransactionType was designed together with @transactional before.\nthis feature will provide a raw jdbc way to support multiple connection transaction in shardingpshere.\nappreciate you add a unit test to verify above code will be work fine.", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440588197", "createdAt": "2020-06-16T05:05:49Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/main/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeInterceptor.java", "diffHunk": "@@ -37,8 +38,16 @@\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n         ShardingTransactionType shardingTransactionType = getAnnotation(methodInvocation);\n         Objects.requireNonNull(shardingTransactionType, \"could not found sharding transaction type annotation\");\n+        TransactionType preTransactionType = TransactionTypeHolder.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MzM4OA=="}, "originalCommit": {"oid": "0fe424e314838fa37d3cff64b4366a1a1c687360"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f", "committedDate": "2020-06-16T07:10:04Z", "message": "add test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjE5ODk5", "url": "https://github.com/apache/shardingsphere/pull/6042#pullrequestreview-431219899", "createdAt": "2020-06-16T07:14:04Z", "commit": {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzoxNDowNFrOGkOKSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzozNTo1N1rOGkO30g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzMzkyOA==", "bodyText": "actual.close() can be removed, try() statement will invoke close method automatically", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440633928", "createdAt": "2020-06-16T07:14:04Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java", "diffHunk": "@@ -172,6 +169,17 @@ private void assertClose(final ShardingSphereConnection actual) {\n         assertTrue(cachedConnections.isEmpty());\n     }\n     \n+    @Test\n+    public void assertCloseShouldNotClearTransactionType() throws SQLException {\n+        TransactionTypeHolder.set(TransactionType.XA);\n+        TransactionType currentTransactionType = TransactionTypeHolder.get();\n+        try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n+            actual.createStatement().executeQuery(sql);\n+            actual.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MjM0OQ==", "bodyText": "we usually use assertThat(TransactionTypeHolder.get(), is(Transactiontype.XA)) to do assert. you can see more detail in our test case requirement from https://shardingsphere.apache.org/community/cn/contribute/code-conduct/", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440642349", "createdAt": "2020-06-16T07:30:17Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/ConnectionAdapterTest.java", "diffHunk": "@@ -172,6 +169,17 @@ private void assertClose(final ShardingSphereConnection actual) {\n         assertTrue(cachedConnections.isEmpty());\n     }\n     \n+    @Test\n+    public void assertCloseShouldNotClearTransactionType() throws SQLException {\n+        TransactionTypeHolder.set(TransactionType.XA);\n+        TransactionType currentTransactionType = TransactionTypeHolder.get();\n+        try (ShardingSphereConnection actual = getShardingSphereDataSource().getConnection()) {\n+            actual.createStatement().executeQuery(sql);\n+            actual.close();\n+        }\n+        assertEquals(currentTransactionType, TransactionTypeHolder.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NTU4Ng==", "bodyText": "I think we can assertThat a precise value here, i.g. asserThat(TransactionTypeHolder.get(), is(TransactionType.LOCAL)).", "url": "https://github.com/apache/shardingsphere/pull/6042#discussion_r440645586", "createdAt": "2020-06-16T07:35:57Z", "author": {"login": "cherrylzhao"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-transaction-spring/src/test/java/org/apache/shardingsphere/spring/transaction/ShardingTransactionTypeScannerTest.java", "diffHunk": "@@ -42,4 +44,15 @@ public void assertShardingTransaction() {\n         assertThat(mockService.executeBase(), is(TransactionType.BASE));\n         assertThat(mockService.execute(), is(TransactionType.XA));\n     }\n+    \n+    @Test\n+    public void assertShardingTransactionType() {\n+        TransactionType preTransactionType = TransactionTypeHolder.get();\n+        mockService.executeLocal();\n+        assertEquals(preTransactionType, TransactionTypeHolder.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ecba13d7e63f3500fce61b2c1d5bdcdd3d765f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/f974d6a9313a5bbd2e641581da05da6a41ee9dbf", "committedDate": "2020-06-16T07:50:51Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjUzNjgz", "url": "https://github.com/apache/shardingsphere/pull/6042#pullrequestreview-431253683", "createdAt": "2020-06-16T08:00:40Z", "commit": {"oid": "f974d6a9313a5bbd2e641581da05da6a41ee9dbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}