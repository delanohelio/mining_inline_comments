{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0OTk2ODE5", "number": 6701, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOToyOTowMlrOEWc-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNTozN1rOEWe1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTc4ODIyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOToyOTowMlrOG9xDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOToyOTowMlrOG9xDFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQxOTkyNg==", "bodyText": "Please do not add other dependency if unnecessary, the reason are:\n\nIt is better to use one mock framework\nIf we need add more mock framework, please add the notice and licenses too", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467419926", "createdAt": "2020-08-08T09:29:02Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/pom.xml", "diffHunk": "@@ -132,5 +132,18 @@\n             <artifactId>postgresql</artifactId>\n             <scope>runtime</scope>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-junit4</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito2</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a220cf5632db4c4e77b06b68c50e8a9b9d2c35"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MTU0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMzoyMlrOG9zx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMzoyMlrOG9zx2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY2NA==", "bodyText": "Please remove useless comment.\nInclude Javadoc, todo and fixme only in the comments.\nFYI: https://shardingsphere.apache.org/community/en/contribute/code-conduct/", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464664", "createdAt": "2020-08-08T13:23:22Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MTYyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMzozOVrOG9zx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMzozOVrOG9zx4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY3NQ==", "bodyText": "Please use static import for Mockito", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464675", "createdAt": "2020-08-08T13:23:39Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MTk4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDoxMFrOG9zyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDoxMFrOG9zyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDcxOA==", "bodyText": "Please use assertThat and InstanceOf to assert", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464718", "createdAt": "2020-08-08T13:24:10Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));\n+        build(jdbcRawBackendDataSourceFactory);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    @Test\n+    public void assertRightMysqlSchemaDataSources() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenReturn(new HikariDataSource());\n+        ProxyDataSourceContext proxyDataSourceContext = build(jdbcRawBackendDataSourceFactory);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MjM1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDoyNVrOG9zyNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDoyNVrOG9zyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDc1Nw==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464757", "createdAt": "2020-08-08T13:24:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));\n+        build(jdbcRawBackendDataSourceFactory);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    @Test\n+    public void assertRightMysqlSchemaDataSources() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenReturn(new HikariDataSource());\n+        ProxyDataSourceContext proxyDataSourceContext = build(jdbcRawBackendDataSourceFactory);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().size() == 1);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    private ProxyDataSourceContext build(final JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory) throws Exception {\n+        JDBCRawBackendDataSourceFactory jdbcBackendDataSourceFactory = (JDBCRawBackendDataSourceFactory) JDBCRawBackendDataSourceFactory.getInstance();\n+        Class<?> jdbcBackendDataSourceFactoryClass = jdbcBackendDataSourceFactory.getClass();\n+        Field field = jdbcBackendDataSourceFactoryClass.getDeclaredField(\"INSTANCE\");\n+        Field modifiers = field.getClass().getDeclaredField(\"modifiers\");\n+        modifiers.setAccessible(true);\n+        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+        field.setAccessible(true);\n+        field.set(field, jdbcRawBackendDataSourceFactory);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MjU3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDo1MlrOG9zyTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNDo1MlrOG9zyTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDc4Mg==", "bodyText": "Please do not leave the comment codes", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464782", "createdAt": "2020-08-08T13:24:52Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MzA5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNToxNVrOG9zyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNToxNVrOG9zyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDgzNw==", "bodyText": "Please use assertThat and InstanceOf to assert", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464837", "createdAt": "2020-08-08T13:25:15Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDA5MzM3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNTozN1rOG9zypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNTozN1rOG9zypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDg2OQ==", "bodyText": "Please add final if the class is not design for extension", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464869", "createdAt": "2020-08-08T13:25:37Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 378, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}