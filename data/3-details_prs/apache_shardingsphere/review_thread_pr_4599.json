{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTA5MTQy", "number": 4599, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNDoyOFrODlGrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNjo1M1rODlGvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMzMjY2OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNDoyOFrOFxzaTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNDoyOFrOFxzaTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Njg2Mg==", "bodyText": "Please add final if the class is not for extend", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387766862", "createdAt": "2020-03-04T16:04:28Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -17,28 +17,44 @@\n \n package org.apache.shardingsphere.orchestration.center.instance;\n \n+import com.google.common.util.concurrent.SettableFuture;\n+import lombok.SneakyThrows;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n \n+import org.apache.shardingsphere.orchestration.center.listener.DataChangedEvent;\n import org.apache.shardingsphere.orchestration.center.util.EmbedTestingServer;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.util.List;\n import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n \n public class CuratorZookeeperInstanceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMzOTc3OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNjoxMVrOFxzezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNjoxMVrOFxzezw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODAxNQ==", "bodyText": "Just throw exception from method signature, @SneakyThrows should use only in the situation for exception never occur", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387768015", "createdAt": "2020-03-04T16:06:11Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -67,4 +83,114 @@ public void assertGetChildrenKeys() {\n         List<String> childrenKeys = curatorZookeeperInstance.getChildrenKeys(\"/test/children\");\n         assertThat(childrenKeys.size(), is(3));\n     }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchUpdatedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value1\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> future.set(dataChangedEvent));\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value2\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value2\"));\n+        assertThat(curatorZookeeperInstance.get(\"/test/children/1\"), is(\"value2\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/5\", \"value5\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children/5\", dataChangedEvent -> future.set(dataChangedEvent));\n+        client.delete().forPath(\"/test/children/5\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/5\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value5\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjM0MzIwOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNjo1NFrOFxzgvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjozMjo0NFrOFyElWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODUxMA==", "bodyText": "Please add L is the number is long type", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r387768510", "createdAt": "2020-03-04T16:06:54Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -67,4 +83,114 @@ public void assertGetChildrenKeys() {\n         List<String> childrenKeys = curatorZookeeperInstance.getChildrenKeys(\"/test/children\");\n         assertThat(childrenKeys.size(), is(3));\n     }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchUpdatedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value1\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> future.set(dataChangedEvent));\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value2\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value2\"));\n+        assertThat(curatorZookeeperInstance.get(\"/test/children/1\"), is(\"value2\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/5\", \"value5\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children/5\", dataChangedEvent -> future.set(dataChangedEvent));\n+        client.delete().forPath(\"/test/children/5\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/5\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value5\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/4\", \"value4\");\n+        final AtomicReference<DataChangedEvent> actualDataChangedEvent = new AtomicReference<>();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> actualDataChangedEvent.set(dataChangedEvent));\n+        Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0ODIxNg==", "bodyText": "I will pay more attention next time.", "url": "https://github.com/apache/shardingsphere/pull/4599#discussion_r388048216", "createdAt": "2020-03-05T02:32:44Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/CuratorZookeeperInstanceTest.java", "diffHunk": "@@ -67,4 +83,114 @@ public void assertGetChildrenKeys() {\n         List<String> childrenKeys = curatorZookeeperInstance.getChildrenKeys(\"/test/children\");\n         assertThat(childrenKeys.size(), is(3));\n     }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchUpdatedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value1\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> future.set(dataChangedEvent));\n+        curatorZookeeperInstance.persist(\"/test/children/1\", \"value2\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value2\"));\n+        assertThat(curatorZookeeperInstance.get(\"/test/children/1\"), is(\"value2\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/5\", \"value5\");\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        curatorZookeeperInstance.watch(\"/test/children/5\", dataChangedEvent -> future.set(dataChangedEvent));\n+        client.delete().forPath(\"/test/children/5\");\n+        DataChangedEvent dataChangedEvent = future.get(5, TimeUnit.SECONDS);\n+        assertNotNull(dataChangedEvent);\n+        assertThat(dataChangedEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertThat(dataChangedEvent.getKey(), is(\"/test/children/5\"));\n+        assertThat(dataChangedEvent.getValue(), is(\"value5\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddedChangedType() {\n+        curatorZookeeperInstance.persist(\"/test/children/4\", \"value4\");\n+        final AtomicReference<DataChangedEvent> actualDataChangedEvent = new AtomicReference<>();\n+        curatorZookeeperInstance.watch(\"/test/children\", dataChangedEvent -> actualDataChangedEvent.set(dataChangedEvent));\n+        Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODUxMA=="}, "originalCommit": {"oid": "9b5bd4db783c649e5a397b50a61b2136fa5a4fa2"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}