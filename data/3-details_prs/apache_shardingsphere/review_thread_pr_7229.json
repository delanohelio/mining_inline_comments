{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3Nzg2MDIw", "number": 7229, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNjoyNlrOEf1a-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo0NTowMlrOEf-Shw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE2NTY4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNjoyNlrOHMXKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1NzoyMlrOHMYfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQ0NA==", "bodyText": "Please import CoreMatchers, so that we can change all the CoreMatchers.is as is.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482724444", "createdAt": "2020-09-03T06:06:26Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 4}\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n-        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding.count\"), is(\"2\"));\n+        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n+        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n+        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n+        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n+        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n-        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n+        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n+        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n+        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        assertNotNull(noneStrategy);\n+        Assert.assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n+        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n-        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n+        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n-        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjI5Ng==", "bodyText": "It will cause code check error. I have be suggested to avoid startic import.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482746296", "createdAt": "2020-09-03T06:57:22Z", "author": {"login": "291277058"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 4}\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n-        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding.count\"), is(\"2\"));\n+        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n+        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n+        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n+        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n+        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n-        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n+        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n+        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n+        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        assertNotNull(noneStrategy);\n+        Assert.assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n+        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n-        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n+        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n-        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQ0NA=="}, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE3NjE2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxMDo1N1rOHMXQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxMDo1N1rOHMXQlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNjAzNg==", "bodyText": "Please rollback this change to focus on props issue solely.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482726036", "createdAt": "2020-09-03T06:10:57Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java", "diffHunk": "@@ -67,7 +69,8 @@ public void preValidate(final ShardingRule shardingRule, final RouteContext rout\n                 if (shardingColumnSetAssignmentValue.isPresent() && shardingValue.isPresent() && shardingColumnSetAssignmentValue.get().equals(shardingValue.get())) {\n                     continue;\n                 }\n-                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);\n+                log.warn(\"should not update sharding key, logic table: {}, column: {}\", tableName, each);\n+//                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE4NjAyOnYy", "diffSide": "LEFT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNDo1OVrOHMXWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNDo1OVrOHMXWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzQ2OA==", "bodyText": "What changes did make ShardingSphereException removed?", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727468", "createdAt": "2020-09-03T06:14:59Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java", "diffHunk": "@@ -96,7 +96,7 @@ public void assertValidateUpdateWithShardingKeyAndShardingParameterEquals() {\n         new ShardingUpdateStatementValidator().preValidate(shardingRule, routeContext, mock(ShardingSphereMetaData.class));\n     }\n     \n-    @Test(expected = ShardingSphereException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE4ODAxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNTo1NFrOHMXXaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNTo1NFrOHMXXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzc4NQ==", "bodyText": "Unexpected keyword replacement.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727785", "createdAt": "2020-09-03T06:15:54Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -9,18 +9,14 @@\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * distributed under the LicenseCoreMatchers.is distributed on an \"ASCoreMatchers.is\" BASIS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE4ODc1OnYy", "diffSide": "LEFT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNjoxNFrOHMXX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNjoxNFrOHMXX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzg5OA==", "bodyText": "Same issue for CoreMatchers.is.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727898", "createdAt": "2020-09-03T06:16:14Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE5NjAyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxOToyMlrOHMXcRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxOToyMlrOHMXcRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTAyOA==", "bodyText": "Here, we no longer need RC4_KEY_COMPATIBLE.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729028", "createdAt": "2020-09-03T06:19:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -34,7 +34,9 @@\n  */\n public final class RC4EncryptAlgorithm implements EncryptAlgorithm {\n     \n-    private static final String RC4_KEY = \"rc4.key.value\";\n+    private static final String RC4_KEY = \"rc4-key-value\";\n+    \n+    private static final String RC4_KEY_COMPATIBLE = \"rc4-key-value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE5NzIzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxOTo1MVrOHMXc-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxOTo1MVrOHMXc-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTIwOA==", "bodyText": "Why did you add a new blank line?", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729208", "createdAt": "2020-09-03T06:19:51Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -88,6 +94,7 @@ private void reset() {\n     \n     /**\n      * Crypt given byte array. Be aware, that you must init key, before using.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTU5ODA1OnYy", "diffSide": "RIGHT", "path": "RELEASE-NOTES.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjozOTozNlrOHMkqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDoyMDoxNVrOHM-_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NTY3Ng==", "bodyText": "previous release notes should be reserved.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482945676", "createdAt": "2020-09-03T12:39:36Z", "author": {"login": "kimmking"}, "path": "RELEASE-NOTES.md", "diffHunk": "@@ -33,7 +33,7 @@\n \n 1. Optimization for Sharing Parser with ANTLR Visitor improving the parsing performance of long SQL by 100%~1000%\n 1. Use multiple threads to load metadata for different data sources\n-1. Support `allow.range.query.with.inline.sharding` option\n+1. Support `allow-range-query-with-inline-sharding` option", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyMzE0OQ==", "bodyText": "All .md field keep previous code form?How about after 4.1.1. or rewrite doc as Update to 4.*.* - 4.1.1", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r483123149", "createdAt": "2020-09-03T16:54:51Z", "author": {"login": "291277058"}, "path": "RELEASE-NOTES.md", "diffHunk": "@@ -33,7 +33,7 @@\n \n 1. Optimization for Sharing Parser with ANTLR Visitor improving the parsing performance of long SQL by 100%~1000%\n 1. Use multiple threads to load metadata for different data sources\n-1. Support `allow.range.query.with.inline.sharding` option\n+1. Support `allow-range-query-with-inline-sharding` option", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NTY3Ng=="}, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NDE0MA==", "bodyText": "release-note is a history. just keep it original.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r483364140", "createdAt": "2020-09-04T03:25:38Z", "author": {"login": "kimmking"}, "path": "RELEASE-NOTES.md", "diffHunk": "@@ -33,7 +33,7 @@\n \n 1. Optimization for Sharing Parser with ANTLR Visitor improving the parsing performance of long SQL by 100%~1000%\n 1. Use multiple threads to load metadata for different data sources\n-1. Support `allow.range.query.with.inline.sharding` option\n+1. Support `allow-range-query-with-inline-sharding` option", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NTY3Ng=="}, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3Njk0MA==", "bodyText": "I mean what about doc like  _index.cn.md,not only release note\n1. Update to 4.0.1 above.\n2. Configure`allow-range-query-with-inline-sharding` to `true` (Default value is `false`).\n3. A tip here: then each range query will be broadcast to every sharding table.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r483376940", "createdAt": "2020-09-04T04:20:15Z", "author": {"login": "291277058"}, "path": "RELEASE-NOTES.md", "diffHunk": "@@ -33,7 +33,7 @@\n \n 1. Optimization for Sharing Parser with ANTLR Visitor improving the parsing performance of long SQL by 100%~1000%\n 1. Use multiple threads to load metadata for different data sources\n-1. Support `allow.range.query.with.inline.sharding` option\n+1. Support `allow-range-query-with-inline-sharding` option", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NTY3Ng=="}, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTYxODYzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo0NTowM1rOHMk3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo0NTowM1rOHMk3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0ODk1OA==", "bodyText": "replace allow-range-query-with-inline-sharding with constant", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482948958", "createdAt": "2020-09-03T12:45:03Z", "author": {"login": "kimmking"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java", "diffHunk": "@@ -76,7 +76,7 @@ public String doSharding(final Collection<String> availableTargetNames, final Pr\n         if (allowRangeQuery) {\n             return availableTargetNames;\n         }\n-        throw new UnsupportedOperationException(\"Since the property of `allow.range.query.with.inline.sharding` is false, inline sharding algorithm can not tackle with range query.\");\n+        throw new UnsupportedOperationException(\"Since the property of `allow-range-query-with-inline-sharding` is false, inline sharding algorithm can not tackle with range query.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 311, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}