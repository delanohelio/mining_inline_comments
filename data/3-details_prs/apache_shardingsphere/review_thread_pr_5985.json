{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDI2OTIx", "number": 5985, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMToxMDo1M1rOEF5BaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMToxMDo1M1rOEF5BaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjEyNTg0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMToxMDo1M1rOGkWhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo0NDoxMVrOGkXgYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3MDgzNw==", "bodyText": "Hi, These codes appear twice, do you think it is better to exact a function for them?", "url": "https://github.com/apache/shardingsphere/pull/5985#discussion_r440770837", "createdAt": "2020-06-16T11:10:53Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java", "diffHunk": "@@ -133,7 +133,8 @@ private void encryptToken(final InsertValue insertValueToken, final String table\n     private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                 final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n         if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n-            DerivedSimpleExpressionSegment derivedExpressionSegment = insertValueContext.getParameters().isEmpty()\n+            DerivedSimpleExpressionSegment derivedExpressionSegment = (insertValueContext.getParameters().isEmpty()\n+                    || insertValueContext.getValueExpressions().get(columnIndex) instanceof LiteralExpressionSegment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788a3a8104663aadbc9878bd9b837aba860e6cc5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NzA0MQ==", "bodyText": "Done.", "url": "https://github.com/apache/shardingsphere/pull/5985#discussion_r440787041", "createdAt": "2020-06-16T11:44:11Z", "author": {"login": "DemonLms"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptInsertValuesTokenGenerator.java", "diffHunk": "@@ -133,7 +133,8 @@ private void encryptToken(final InsertValue insertValueToken, final String table\n     private void addPlainColumn(final InsertValue insertValueToken, final int columnIndex,\n                                 final String tableName, final String columnName, final InsertValueContext insertValueContext, final Object originalValue) {\n         if (getEncryptRule().findPlainColumn(tableName, columnName).isPresent()) {\n-            DerivedSimpleExpressionSegment derivedExpressionSegment = insertValueContext.getParameters().isEmpty()\n+            DerivedSimpleExpressionSegment derivedExpressionSegment = (insertValueContext.getParameters().isEmpty()\n+                    || insertValueContext.getValueExpressions().get(columnIndex) instanceof LiteralExpressionSegment)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3MDgzNw=="}, "originalCommit": {"oid": "788a3a8104663aadbc9878bd9b837aba860e6cc5"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}