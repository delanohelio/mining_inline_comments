{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjM1MTY2", "number": 4511, "title": "T0 add ut for sharding-orchestration-core module", "bodyText": "For  #4452", "createdAt": "2020-02-28T06:59:10Z", "url": "https://github.com/apache/shardingsphere/pull/4511", "merged": true, "mergeCommit": {"oid": "4c6210fc92461558bc3b49797c9064546442f2aa"}, "closed": true, "closedAt": "2020-03-02T01:36:48Z", "author": {"login": "zjcnb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIqU0rAH2gAyMzgxMjM1MTY2OmU2ODVlMzJiNjZmNTYzZGExOTkwOGIzYjYxNTQ5NThhMjcyZjc1Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJjiUnAFqTM2NjkxMTgwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/e685e32b66f563da19908b3b6154958a272f7567", "committedDate": "2020-02-28T06:56:14Z", "message": "T0 add ut"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjA1ODI4", "url": "https://github.com/apache/shardingsphere/pull/4511#pullrequestreview-366205828", "createdAt": "2020-02-28T07:38:47Z", "commit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzozODo0N1rOFvr51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MDoxNlrOFvr7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NjcxMA==", "bodyText": "encrypt_db is exist schema, the dataChangedEvent will not be created for new schema.", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385546710", "createdAt": "2020-02-28T07:38:47Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzAzOQ==", "bodyText": "same problem as above", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547039", "createdAt": "2020-02-28T07:39:50Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzEzOQ==", "bodyText": "same problem as above", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547139", "createdAt": "2020-02-28T07:40:16Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(ShardingRuleChangedEvent.class));\n+        assertThat(((ShardingRuleChangedEvent) actual).getShardingRuleConfiguration(), instanceOf(ShardingRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithMasterSlaveRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/masterslave_db/rule\", MASTER_SLAVE_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a15b2b26b9b348c0fa926492b14f30a75c91b8", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/46a15b2b26b9b348c0fa926492b14f30a75c91b8", "committedDate": "2020-02-29T05:12:39Z", "message": "fixed ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe37948e0666cabd56ea12f74b7c132c3487f523", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/fe37948e0666cabd56ea12f74b7c132c3487f523", "committedDate": "2020-02-29T05:15:26Z", "message": "Merge https://github.com/apache/incubator-shardingsphere into amster"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTAyMTU2", "url": "https://github.com/apache/shardingsphere/pull/4511#pullrequestreview-366902156", "createdAt": "2020-03-02T00:23:32Z", "commit": {"oid": "fe37948e0666cabd56ea12f74b7c132c3487f523"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTExODA5", "url": "https://github.com/apache/shardingsphere/pull/4511#pullrequestreview-366911809", "createdAt": "2020-03-02T01:35:34Z", "commit": {"oid": "fe37948e0666cabd56ea12f74b7c132c3487f523"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3869, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}