{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzc2MTg2", "number": 5812, "title": "Add load all instance states api for UI # control-panel-cluster", "bodyText": "For #5666 .\nChanges proposed in this pull request:\n\nadd load all instance states api for UI", "createdAt": "2020-05-27T11:07:23Z", "url": "https://github.com/apache/shardingsphere/pull/5812", "merged": true, "mergeCommit": {"oid": "5e4fa1a76b3fbd38ec2136d6cc809b7b77d227bf"}, "closed": true, "closedAt": "2020-05-28T05:30:31Z", "author": {"login": "menghaoranss"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclXO1bAH2gAyNDIzNzc2MTg2OjU0N2NlOTVkN2NhZjU3NzU0MTdhNGQ4MTE4OTVkYTFmNWNiOGI5Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclnClYAFqTQxOTc4NzU2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979", "author": {"user": {"login": "menghaoranss", "name": "Haoran Meng"}}, "url": "https://github.com/apache/shardingsphere/commit/547ce95d7caf5775417a4d811895da1f5cb8b979", "committedDate": "2020-05-27T11:05:18Z", "message": "Add load all instance states api for UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTA5Mzc4", "url": "https://github.com/apache/shardingsphere/pull/5812#pullrequestreview-419109378", "createdAt": "2020-05-27T11:43:19Z", "commit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MzoyMFrOGbFcWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MzoyMFrOGbFcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MzkxMg==", "bodyText": "redundant {}", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431053912", "createdAt": "2020-05-27T11:43:20Z", "author": {"login": "kimmking"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTY0MDg0", "url": "https://github.com/apache/shardingsphere/pull/5812#pullrequestreview-419164084", "createdAt": "2020-05-27T12:49:41Z", "commit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0OTo0MVrOGbHtmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0OTo0MVrOGbHtmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTA5Ng==", "bodyText": "try-catch outside of the forEach is considered as a bad idea, if an item throws, all the following items are skipped\nSimply swallowing the exception is also a bad idea IMO, if I were you, I'll consider the instance state as something like \"Unknown\" if it throws", "url": "https://github.com/apache/shardingsphere/pull/5812#discussion_r431091096", "createdAt": "2020-05-27T12:49:41Z", "author": {"login": "kezhenxu94"}, "path": "shardingsphere-ui/shardingsphere-ui-backend/src/main/java/org/apache/shardingsphere/ui/servcie/impl/ClusterServiceImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.ui.servcie.impl;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shardingsphere.cluster.state.InstanceState;\n+import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n+import org.apache.shardingsphere.ui.servcie.ClusterService;\n+import org.apache.shardingsphere.ui.servcie.RegistryCenterService;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.Resource;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of cluster service.\n+ */\n+@Service\n+@Slf4j\n+public final class ClusterServiceImpl implements ClusterService {\n+    \n+    @Resource\n+    private RegistryCenterService registryCenterService;\n+    \n+    @Override\n+    public Map<String, InstanceState> loadAllInstanceStates() {\n+        List<String> instanceIds = registryCenterService.getActivatedRegistryCenter()\n+                .getChildrenKeys(registryCenterService.getActivatedStateNode().getInstanceNodeRootPath());\n+        Map<String, InstanceState> instanceStateMap = new HashMap<>();\n+        try {\n+            instanceIds.forEach(each -> {\n+                instanceStateMap.put(each, loadInstanceState(each));\n+            });\n+        } catch (Exception ex) {\n+            log.error(\"Load all instance states error\", ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547ce95d7caf5775417a4d811895da1f5cb8b979"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1ab3259d65df724af1d9ea278a9b2589732f1d", "author": {"user": {"login": "menghaoranss", "name": "Haoran Meng"}}, "url": "https://github.com/apache/shardingsphere/commit/cd1ab3259d65df724af1d9ea278a9b2589732f1d", "committedDate": "2020-05-28T00:43:03Z", "message": "remove redundant code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ca0b021749495c7687ed5e299bcaba34810171", "author": {"user": {"login": "menghaoranss", "name": "Haoran Meng"}}, "url": "https://github.com/apache/shardingsphere/commit/a0ca0b021749495c7687ed5e299bcaba34810171", "committedDate": "2020-05-28T01:52:16Z", "message": "optimize code about load state failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzg3NTY5", "url": "https://github.com/apache/shardingsphere/pull/5812#pullrequestreview-419787569", "createdAt": "2020-05-28T05:30:24Z", "commit": {"oid": "a0ca0b021749495c7687ed5e299bcaba34810171"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4971, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}