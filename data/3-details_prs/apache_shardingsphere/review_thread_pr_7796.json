{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODAwNDkx", "number": 7796, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTo0NTozM1rOEt9HpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNDo1MjoyN1rOEu4Qtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjIyNzU3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTo0NTozM1rOHiDzkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowODowOFrOHiMqfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA==", "bodyText": "From my perspective, It is unnecessary to have SQL as an input parameter. Precisely speaking, It is a little heavy to pass SQL just for an exception. Maybe Cannot support such a Multiple-Table query for '$tableNames' is enough. What do you think?\nThe constrictions for multi-tables looks like incomplete? How about broadcast tables or the single table in the same instance with sharding tables (Maybe a postValidate()?).", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505475984", "createdAt": "2020-10-15T11:45:33Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -31,11 +34,14 @@\n     /**\n      * Validate multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n+     * @param sql sql\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext, final String sql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8640a3f08fac23f1dcdebe071e835b25cbef9e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4NDYwNQ==", "bodyText": "From my perspective, It is unnecessary to have SQL as an input parameter. Precisely speaking, It is a little heavy to pass SQL just for an exception. Maybe Cannot support such a Multiple-Table query for '$tableNames' is enough. What do you think?\n\n@tristaZero I agree with you that the inclusion of SQL in the exception is indeed a bit verbose, especially when the SQL is very complex.", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505584605", "createdAt": "2020-10-15T14:23:19Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -31,11 +34,14 @@\n     /**\n      * Validate multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n+     * @param sql sql\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext, final String sql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA=="}, "originalCommit": {"oid": "7b8640a3f08fac23f1dcdebe071e835b25cbef9e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMTExOQ==", "bodyText": "The constrictions for multi-tables looks like incomplete? How about broadcast tables or the single table in the same instance with sharding tables (Maybe a postValidate()?).\n\n@tristaZero I'm very sorry, I will support the check of broadcast tables and single tables.\nIn addition, I think these check should be placed in preValidate, because they should be executed before routing. \ud83e\udd14", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r505621119", "createdAt": "2020-10-15T15:08:08Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -31,11 +34,14 @@\n     /**\n      * Validate multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n+     * @param sql sql\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext, final String sql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ3NTk4NA=="}, "originalCommit": {"oid": "7b8640a3f08fac23f1dcdebe071e835b25cbef9e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTkxNjE5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNDo1MDozMlrOHjh18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNTozNDo0NFrOHjiBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjY4OA==", "bodyText": "What's the string output of tableNames? Do you think that will be Cannot support Multiple-Table for 'tb1tb2tb3'?", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507016688", "createdAt": "2020-10-18T04:50:32Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {\n+            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", tableNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a000811276c29352df7994b62b7bc026b65d35"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxOTcwOQ==", "bodyText": "What's the string output of tableNames? Do you think that will be Cannot support Multiple-Table for 'tb1tb2tb3'?\n\n@tristaZero The error message may like Cannot support Multiple-Table for '[user, order, order_item]'.", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507019709", "createdAt": "2020-10-18T05:34:44Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {\n+            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", tableNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjY4OA=="}, "originalCommit": {"oid": "59a000811276c29352df7994b62b7bc026b65d35"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTkxNzM1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNDo1MjoyN1rOHjh2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwNTo0NToyOVrOHjiEzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjgxNg==", "bodyText": "Do you think if ( !isAllValidTables(shardingRule, tableNames)) is enough?", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507016816", "createdAt": "2020-10-18T04:52:27Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a000811276c29352df7994b62b7bc026b65d35"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAyMDQ5Mw==", "bodyText": "Do you think if ( !isAllValidTables(shardingRule, tableNames)) is enough?\n\n@tristaZero In order to prevent it from affecting all the RoutineEngine, temporarily use the condition (1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) to ensure that only the ShardingStandardRoutingEngine is checked.\nAfter I investigate the logic of all RouteEngine, I will optimize this logic in the future.", "url": "https://github.com/apache/shardingsphere/pull/7796#discussion_r507020493", "createdAt": "2020-10-18T05:45:29Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/dml/ShardingDMLStatementValidator.java", "diffHunk": "@@ -18,24 +18,38 @@\n package org.apache.shardingsphere.sharding.route.engine.validator.dml;\n \n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n-import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n import org.apache.shardingsphere.sharding.route.engine.validator.ShardingStatementValidator;\n+import org.apache.shardingsphere.sharding.rule.ShardingRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n /**\n  * Sharding dml statement validator.\n  */\n public abstract class ShardingDMLStatementValidator<T extends SQLStatement> implements ShardingStatementValidator<T> {\n     \n     /**\n-     * Validate multiple table.\n+     * Validate sharding multiple table.\n      *\n+     * @param shardingRule sharding rule\n      * @param sqlStatementContext sqlStatementContext\n      */\n-    protected void validateMultipleTable(final SQLStatementContext<T> sqlStatementContext) {\n-        if (1 != ((TableAvailable) sqlStatementContext).getAllTables().size()) {\n-            throw new ShardingSphereException(\"Cannot support Multiple-Table for '%s'.\", sqlStatementContext.getSqlStatement());\n+    protected void validateShardingMultipleTable(final ShardingRule shardingRule, final SQLStatementContext<T> sqlStatementContext) {\n+        Collection<String> tableNames = sqlStatementContext.getTablesContext().getTableNames();\n+        Collection<String> shardingTableNames = shardingRule.getShardingLogicTableNames(tableNames);\n+        if ((1 == shardingTableNames.size() || shardingRule.isAllBindingTables(shardingTableNames)) && !isAllValidTables(shardingRule, tableNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxNjgxNg=="}, "originalCommit": {"oid": "59a000811276c29352df7994b62b7bc026b65d35"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 651, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}