{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzA3MjQ4", "number": 8307, "title": "feature: introduce shardingsphere agent", "bodyText": "Fixes #8206.", "createdAt": "2020-11-23T12:46:48Z", "url": "https://github.com/apache/shardingsphere/pull/8307", "merged": true, "mergeCommit": {"oid": "0bfe11eb839d1bb2bda84ae1cf7495eb6c0c8bda"}, "closed": true, "closedAt": "2020-11-23T14:54:12Z", "author": {"login": "dmsolr"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfUh7jgH2gAyNTI1NzA3MjQ4OmJlNjMwYjgyNGY1ZmE4YTAxNzU1M2M0MzdjMTZiM2VjZGUxN2RlMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfWY07gFqTUzNjU0NzU3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/be630b824f5fa8a017553c437c16b3ecde17de08", "committedDate": "2020-11-23T12:44:03Z", "message": "feature: introduce shardingsphere agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcdcc0578abf0d1ea77803dd97075c353f9990c2", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/dcdcc0578abf0d1ea77803dd97075c353f9990c2", "committedDate": "2020-11-23T12:51:09Z", "message": "replace version with property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDQzNjcx", "url": "https://github.com/apache/shardingsphere/pull/8307#pullrequestreview-536443671", "createdAt": "2020-11-23T12:52:26Z", "commit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1MjoyN1rOH4MI-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1MjoyN1rOH4MI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTIxMQ==", "bodyText": "param may be a space", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681211", "createdAt": "2020-11-23T12:52:27Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/StaticMethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the static methods of target class.\n+ */\n+public interface StaticMethodAroundAdvice {\n+    \n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling. \n+     * @param klass     the target class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDQ0MDAz", "url": "https://github.com/apache/shardingsphere/pull/8307#pullrequestreview-536444003", "createdAt": "2020-11-23T12:52:52Z", "commit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1Mjo1MlrOH4MJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1NDoyNVrOH4MNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTQ3MA==", "bodyText": "keep a space", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681470", "createdAt": "2020-11-23T12:52:52Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/MethodAroundInterceptor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.implementation.bind.annotation.AllArguments;\n+import net.bytebuddy.implementation.bind.annotation.Origin;\n+import net.bytebuddy.implementation.bind.annotation.RuntimeType;\n+import net.bytebuddy.implementation.bind.annotation.This;\n+import net.bytebuddy.implementation.bind.annotation.SuperCall;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * A proxy class for ByteBuddy to intercept methods of target and weave pre- and post-method around the target method.\n+ */\n+@Slf4j\n+public class MethodAroundInterceptor {\n+    private final MethodAroundAdvice advice;\n+    \n+    public MethodAroundInterceptor(final MethodAroundAdvice advice) {\n+        this.advice = advice;\n+    }\n+\n+    /**\n+     * Only intercept instance method.\n+     * @param target    the target object\n+     * @param method    the intercepted method\n+     * @param args      the all arguments of method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTY4MQ==", "bodyText": "remove A", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681681", "createdAt": "2020-11-23T12:53:18Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/MethodAroundInterceptor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.implementation.bind.annotation.AllArguments;\n+import net.bytebuddy.implementation.bind.annotation.Origin;\n+import net.bytebuddy.implementation.bind.annotation.RuntimeType;\n+import net.bytebuddy.implementation.bind.annotation.This;\n+import net.bytebuddy.implementation.bind.annotation.SuperCall;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * A proxy class for ByteBuddy to intercept methods of target and weave pre- and post-method around the target method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTczOQ==", "bodyText": "keep a space", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681739", "createdAt": "2020-11-23T12:53:26Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/MethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the target method.\n+ */\n+public interface MethodAroundAdvice {\n+    \n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling. \n+     * @param target    the target object\n+     * @param method    the target method\n+     * @param args      the all method arguments\n+     * @param result    A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void beforeMethod(TargetObject target, Method method, Object[] args, MethodInvocationResult result);\n+    \n+    /**\n+     * Intercept the target method and weave the method after origin method.  It will invoke after the origin calling. \n+     * @param target    the target object\n+     * @param method    the target method\n+     * @param args      the all method arguments\n+     * @param result    A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void afterMethod(TargetObject target, Method method, Object[] args, MethodInvocationResult result);\n+    \n+    /**\n+     * Weaving the method after origin method throwing.\n+     * @param target    the target object\n+     * @param method    the target method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTgxOA==", "bodyText": "keep a space", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681818", "createdAt": "2020-11-23T12:53:35Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/ConstructorAdvice.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+/**\n+ * Weaving the advice around the constructor of target class.\n+ */\n+public interface ConstructorAdvice {\n+    \n+    /**\n+     * Intercept the target's constructor. This method is weaved after the constructor execution.\n+     * @param target    Intercepted target object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTk2NA==", "bodyText": "keep a space", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528681964", "createdAt": "2020-11-23T12:53:50Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginLoader.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import lombok.SneakyThrows;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Plugins loader.\n+ * TODO not-implemented yet\n+ */\n+public class PluginLoader extends ClassLoader {\n+\n+    private final ConcurrentHashMap<String, Object> objectPool = new ConcurrentHashMap<>();\n+\n+    private final ReentrantLock lock = new ReentrantLock();\n+\n+    /**\n+     * to find all intercepting target classes then to build TypeMatcher.\n+     *\n+     * @return TypeMatcher\n+     */\n+    public ElementMatcher<? super TypeDescription> typeMatcher() {\n+        return null;\n+    }\n+\n+    /**\n+     * to detect the type whether or not exists.\n+     *\n+     * @param typeDescription TypeDescription\n+     * @return contains when it is true.\n+     */\n+    public boolean containsType(final TypeDescription typeDescription) {\n+        return false;\n+    }\n+\n+    /**\n+     * Load the definition configuration by TypeDescription.\n+     *\n+     * @param typeDescription TypeDescription\n+     * @return the plugin definition configurations.\n+     */\n+    public PluginAdviceDefine loadPluginAdviceDefine(final TypeDescription typeDescription) {\n+        return null;\n+    }\n+\n+    /**\n+     * get or create instance of the advice class. Create new one and caching when it is not exist.\n+     *\n+     * @param classNameOfAdvice the class name of advice\n+     * @param <T>               the advice type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjE2Mw==", "bodyText": "add doc", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528682163", "createdAt": "2020-11-23T12:54:12Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/ShardingSphereTransformer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.implementation.FieldAccessor;\n+import net.bytebuddy.implementation.MethodDelegation;\n+import net.bytebuddy.implementation.SuperMethodCall;\n+import net.bytebuddy.jar.asm.Opcodes;\n+import net.bytebuddy.utility.JavaModule;\n+import org.apache.shardingsphere.agent.core.plugin.PluginAdviceDefine;\n+import org.apache.shardingsphere.agent.core.plugin.PluginLoader;\n+import org.apache.shardingsphere.agent.core.plugin.advice.ConstructorMethodInterceptor;\n+import org.apache.shardingsphere.agent.core.plugin.advice.MethodAroundInterceptor;\n+import org.apache.shardingsphere.agent.core.plugin.advice.StaticMethodAroundInterceptor;\n+import org.apache.shardingsphere.agent.core.plugin.advice.TargetObject;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.Map;\n+\n+@Slf4j", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjI3Ng==", "bodyText": "remove A", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528682276", "createdAt": "2020-11-23T12:54:25Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/LoggingListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.utility.JavaModule;\n+\n+/**\n+ * A listener to log what is informed about events that occur during an instrumentation process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be630b824f5fa8a017553c437c16b3ecde17de08"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b57fc1d624182801cb1e045899f8fdeefa08e8d", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/9b57fc1d624182801cb1e045899f8fdeefa08e8d", "committedDate": "2020-11-23T12:56:01Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/58a8164e4fb60d4265c28b55aedc86dd611a843e", "committedDate": "2020-11-23T13:11:13Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/1700cbdcfd1d31d92a1ee167d55b2c0078299c58", "committedDate": "2020-11-23T13:15:29Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDYxMDkz", "url": "https://github.com/apache/shardingsphere/pull/8307#pullrequestreview-536461093", "createdAt": "2020-11-23T13:15:55Z", "commit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxNTo1NVrOH4M-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxODo1MlrOH4NE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NDg4OA==", "bodyText": "Static method point builder", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528694888", "createdAt": "2020-11-23T13:15:55Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+                this.overrideArgs = overrideArgs;\n+                return this;\n+            }\n+\n+            /**\n+             * to build instance methods configuration.\n+             *\n+             * @return Plugin advice builder.\n+             */\n+            public Builder build() {\n+                builder.instanceMethodPoints.add(new InstanceMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n+                return builder;\n+            }\n+        }\n+\n+        /**\n+         * Static method intercepting point configuration builder.\n+         */\n+        public static final class StaticMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = ElementMatchers.isStatic().and(matcher);\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Static method point configurer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTI1NA==", "bodyText": "type description.", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528695254", "createdAt": "2020-11-23T13:16:33Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginLoader.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import lombok.SneakyThrows;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Plugins loader.\n+ * TODO not-implemented yet\n+ */\n+public class PluginLoader extends ClassLoader {\n+\n+    private final ConcurrentHashMap<String, Object> objectPool = new ConcurrentHashMap<>();\n+\n+    private final ReentrantLock lock = new ReentrantLock();\n+\n+    /**\n+     * To find all intercepting target classes then to build TypeMatcher.\n+     *\n+     * @return TypeMatcher\n+     */\n+    public ElementMatcher<? super TypeDescription> typeMatcher() {\n+        return null;\n+    }\n+\n+    /**\n+     * To detect the type whether or not exists.\n+     *\n+     * @param typeDescription TypeDescription\n+     * @return contains when it is true.\n+     */\n+    public boolean containsType(final TypeDescription typeDescription) {\n+        return false;\n+    }\n+\n+    /**\n+     * Load the definition configuration by TypeDescription.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTc2OQ==", "bodyText": "remove A worlds", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528695769", "createdAt": "2020-11-23T13:17:25Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/MethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the target method.\n+ */\n+public interface MethodAroundAdvice {\n+\n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling.\n+     *\n+     * @param target the target object\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void beforeMethod(TargetObject target, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Intercept the target method and weave the method after origin method.  It will invoke after the origin calling.\n+     *\n+     * @param target the target object\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTg4Mg==", "bodyText": "remove an", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528695882", "createdAt": "2020-11-23T13:17:35Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/MethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the target method.\n+ */\n+public interface MethodAroundAdvice {\n+\n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling.\n+     *\n+     * @param target the target object\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void beforeMethod(TargetObject target, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Intercept the target method and weave the method after origin method.  It will invoke after the origin calling.\n+     *\n+     * @param target the target object\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void afterMethod(TargetObject target, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Weaving the method after origin method throwing.\n+     *\n+     * @param target the target object\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param throwable an exception from target method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjM3MQ==", "bodyText": "invocation  may be Invocation", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528696371", "createdAt": "2020-11-23T13:18:33Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/OverrideArgsInvoker.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+/**\n+ * Super(origin) method invoker for ByteBuddy only.\n+ */\n+public interface OverrideArgsInvoker {\n+\n+    /**\n+     * invocation origin method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjQ2OQ==", "bodyText": "remove A", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528696469", "createdAt": "2020-11-23T13:18:44Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/StaticMethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the static methods of target class.\n+ */\n+public interface StaticMethodAroundAdvice {\n+\n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling.\n+     *\n+     * @param klass the target class\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void beforeMethod(Class<?> klass, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Intercept the target method and weave the method after origin method. It will invoke after the origin calling.\n+     *\n+     * @param klass the target class\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjU0Mg==", "bodyText": "remove an", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528696542", "createdAt": "2020-11-23T13:18:52Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/advice/StaticMethodAroundAdvice.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin.advice;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Weaving the advice around the static methods of target class.\n+ */\n+public interface StaticMethodAroundAdvice {\n+\n+    /**\n+     * Intercept the target method and weave the method before origin method. It will invoke before the origin calling.\n+     *\n+     * @param klass the target class\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void beforeMethod(Class<?> klass, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Intercept the target method and weave the method after origin method. It will invoke after the origin calling.\n+     *\n+     * @param klass the target class\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param result A wrapped class of result to detect whether or not to execute the origin method.\n+     */\n+    void afterMethod(Class<?> klass, Method method, Object[] args, MethodInvocationResult result);\n+\n+    /**\n+     * Weaving the method after origin method throwing.\n+     *\n+     * @param klass the target class\n+     * @param method the target method\n+     * @param args the all method arguments\n+     * @param throwable an exception from target method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8164e4fb60d4265c28b55aedc86dd611a843e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDY2ODgz", "url": "https://github.com/apache/shardingsphere/pull/8307#pullrequestreview-536466883", "createdAt": "2020-11-23T13:23:28Z", "commit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyMzoyOFrOH4NP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyODo1OVrOH4NdJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTM1Nw==", "bodyText": "remove a", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528699357", "createdAt": "2020-11-23T13:23:28Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTY1OQ==", "bodyText": "Configurer  ---> builder", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528699659", "createdAt": "2020-11-23T13:23:52Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTcyNA==", "bodyText": "remove a", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528699724", "createdAt": "2020-11-23T13:23:59Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTc4MQ==", "bodyText": "remove a", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528699781", "createdAt": "2020-11-23T13:24:07Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTk0Mw==", "bodyText": "remove a", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528699943", "createdAt": "2020-11-23T13:24:24Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMDI5Mw==", "bodyText": "Configuration  --> configuration", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528700293", "createdAt": "2020-11-23T13:24:50Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMDQ2Ng==", "bodyText": "Configuration  --> configuration", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528700466", "createdAt": "2020-11-23T13:25:08Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMDYwOA==", "bodyText": "Configuration --> configuration", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528700608", "createdAt": "2020-11-23T13:25:20Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMDk5OA==", "bodyText": "build --> Build", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528700998", "createdAt": "2020-11-23T13:26:00Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTE1OQ==", "bodyText": "Plugin --> plugin", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528701159", "createdAt": "2020-11-23T13:26:16Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTQ5NQ==", "bodyText": "to configure implementation for intercepting point  --> Configure implementation for interceptor point", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528701495", "createdAt": "2020-11-23T13:26:47Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTc5Nw==", "bodyText": "to configure whether or not override the origin method arguments.  -- > Configure whether or not override the origin method arguments.", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528701797", "createdAt": "2020-11-23T13:27:19Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTkxNQ==", "bodyText": "Instance  -- > instance", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528701915", "createdAt": "2020-11-23T13:27:32Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMjA4Nw==", "bodyText": "to build instance methods configuration. -- > Build  instance methods configuration", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528702087", "createdAt": "2020-11-23T13:27:50Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+                this.overrideArgs = overrideArgs;\n+                return this;\n+            }\n+\n+            /**\n+             * to build instance methods configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMjI3Ng==", "bodyText": "Plugin-- > plugin", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528702276", "createdAt": "2020-11-23T13:28:08Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+                this.overrideArgs = overrideArgs;\n+                return this;\n+            }\n+\n+            /**\n+             * to build instance methods configuration.\n+             *\n+             * @return Plugin advice builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMjUwNg==", "bodyText": "to configure --> Configure", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528702506", "createdAt": "2020-11-23T13:28:33Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+                this.overrideArgs = overrideArgs;\n+                return this;\n+            }\n+\n+            /**\n+             * to build instance methods configuration.\n+             *\n+             * @return Plugin advice builder.\n+             */\n+            public Builder build() {\n+                builder.instanceMethodPoints.add(new InstanceMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n+                return builder;\n+            }\n+        }\n+\n+        /**\n+         * Static method intercepting point configuration builder.\n+         */\n+        public static final class StaticMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = ElementMatchers.isStatic().and(matcher);\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Static method point configurer.\n+             */\n+            public StaticMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMjc1OA==", "bodyText": "Static method point configurer. -- > static method point builder.", "url": "https://github.com/apache/shardingsphere/pull/8307#discussion_r528702758", "createdAt": "2020-11-23T13:28:59Z", "author": {"login": "yu199195"}, "path": "shardingsphere-agent/shardingsphere-agent-core/src/main/java/org/apache/shardingsphere/agent/core/plugin/PluginAdviceDefine.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.shardingsphere.agent.core.plugin;\n+\n+import com.google.common.collect.Lists;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n+import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n+\n+import java.util.List;\n+\n+/**\n+ * The advice of plugin configurer.\n+ *\n+ * <code>\n+ * PluginAdviceDefine.intercept(\"Target.class\")\n+ * .onConstructor(ElementMatchers.any()).implement(\"Advice.class\").build()\n+ * .method(ElementMatchers.named(\"greet\").implement(\"Advice.class\").build()\n+ * .staticMethod(ElementMatchers.named(\"of\").implement(\"OfAdvice.class\").build()\n+ * .install();\n+ * </code>\n+ */\n+public final class PluginAdviceDefine {\n+\n+    private final List<ConstructorPoint> constructorPoints;\n+\n+    private final List<InstanceMethodPoint> instanceMethodPoints;\n+\n+    private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n+\n+    private PluginAdviceDefine(final List<ConstructorPoint> constructorPoints,\n+                               final List<InstanceMethodPoint> instanceMethodPoints,\n+                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+        this.constructorPoints = constructorPoints;\n+        this.instanceMethodPoints = instanceMethodPoints;\n+        this.classStaticMethodPoints = classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * Intercept target class.\n+     *\n+     * @param classNameOfTarget a class name of wanted advice target.\n+     * @return Configurer.\n+     */\n+    public static Builder intercept(final String classNameOfTarget) {\n+        return new Builder(classNameOfTarget);\n+    }\n+\n+    /**\n+     * To get static method point configurations.\n+     *\n+     * @return a series of static method point configuration.\n+     */\n+    public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n+        return classStaticMethodPoints;\n+    }\n+\n+    /**\n+     * To get constructor point configurations.\n+     *\n+     * @return a series of constructor point configuration.\n+     */\n+    public List<ConstructorPoint> getConstructorPoints() {\n+        return constructorPoints;\n+    }\n+\n+    /**\n+     * To get instance point configurations.\n+     *\n+     * @return a series of instance method point configuration.\n+     */\n+    public List<InstanceMethodPoint> getInstanceMethodPoints() {\n+        return instanceMethodPoints;\n+    }\n+\n+    /**\n+     * Plugin advice configuration builder.\n+     */\n+    public static final class Builder {\n+        private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n+\n+        private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n+\n+        private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n+\n+        private final String classNameOfTarget;\n+\n+        private Builder(final String classNameOfTarget) {\n+            this.classNameOfTarget = classNameOfTarget;\n+        }\n+\n+        /**\n+         * Intercept the new target.\n+         *\n+         * @param classNameOfTarget the class name of target.\n+         * @return Configuration builder.\n+         */\n+        public Builder intercept(final String classNameOfTarget) {\n+            // TODO not-implemented yet\n+            return this;\n+        }\n+\n+        /**\n+         * to configure the intercepting point on constructor.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new ConstructorPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public InstanceMethodPointBuilder method(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new InstanceMethodPointBuilder(this, matcher);\n+        }\n+\n+        /**\n+         * to configure the intercepting point around instance method.\n+         *\n+         * @param matcher constraints\n+         * @return Configuration builder\n+         */\n+        public StaticMethodPointBuilder staticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+            return new StaticMethodPointBuilder(this, matcher);\n+        }\n+\n+\n+        /**\n+         * build configuration.\n+         *\n+         * @return Plugin advice definition.\n+         */\n+        public PluginAdviceDefine install() {\n+            return new PluginAdviceDefine(constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n+        }\n+\n+        /**\n+         * Instance method intercepting point configuration builder.\n+         */\n+        public static final class InstanceMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = matcher;\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Instance method point configurer.\n+             */\n+            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+                this.overrideArgs = overrideArgs;\n+                return this;\n+            }\n+\n+            /**\n+             * to build instance methods configuration.\n+             *\n+             * @return Plugin advice builder.\n+             */\n+            public Builder build() {\n+                builder.instanceMethodPoints.add(new InstanceMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n+                return builder;\n+            }\n+        }\n+\n+        /**\n+         * Static method intercepting point configuration builder.\n+         */\n+        public static final class StaticMethodPointBuilder {\n+            private final Builder builder;\n+\n+            private String classNameOfAdvice;\n+\n+            private boolean overrideArgs;\n+\n+            private ElementMatcher<? super MethodDescription> matcher;\n+\n+            private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n+                this.builder = builder;\n+                this.matcher = ElementMatchers.isStatic().and(matcher);\n+            }\n+\n+            /**\n+             * to configure implementation for intercepting point.\n+             *\n+             * @param classNameOfAdvice the class name of advice\n+             * @return Static method point configurer.\n+             */\n+            public StaticMethodPointBuilder implement(final String classNameOfAdvice) {\n+                this.classNameOfAdvice = classNameOfAdvice;\n+                return this;\n+            }\n+\n+            /**\n+             * to configure whether or not override the origin method arguments.\n+             *\n+             * @param overrideArgs whether to override origin method arguments.\n+             * @return Static method point configurer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1700cbdcfd1d31d92a1ee167d55b2c0078299c58"}, "originalPosition": 244}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa911f922feced7f13a5f3bbf1a349b67296fad", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/eaa911f922feced7f13a5f3bbf1a349b67296fad", "committedDate": "2020-11-23T13:42:31Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "724a9e81175d081096b81feb1f655500428ac1eb", "author": {"user": {"login": "dmsolr", "name": "Daming"}}, "url": "https://github.com/apache/shardingsphere/commit/724a9e81175d081096b81feb1f655500428ac1eb", "committedDate": "2020-11-23T13:57:55Z", "message": "fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTQ3NTcw", "url": "https://github.com/apache/shardingsphere/pull/8307#pullrequestreview-536547570", "createdAt": "2020-11-23T14:53:55Z", "commit": {"oid": "724a9e81175d081096b81feb1f655500428ac1eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4320, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}