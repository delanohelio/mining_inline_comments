{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODA3NTI2", "number": 5110, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzoxN1rODwWDLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMDo0MVrODwWUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDE5NTAyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxNzoxN1rOGDSnGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjozNzoxN1rOGDvbIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw==", "bodyText": "Why is the expr visited twice?", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406103833", "createdAt": "2020-04-09T10:17:17Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjEzNw==", "bodyText": "In order to ensure that the previous integration test can pass, in the past, only tables with only one condition was taken, but it may be multiple conditions", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132137", "createdAt": "2020-04-09T11:14:50Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjk0NA==", "bodyText": "Not only test code,it's related to the business code, I can't change it", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406132944", "createdAt": "2020-04-09T11:16:32Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTkwNg==", "bodyText": "If so, could we reomve private PredicateSegment predicateSegment;?", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406575906", "createdAt": "2020-04-10T02:37:17Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -551,16 +551,21 @@ public ASTNode visitJoinSpecification(final JoinSpecificationContext ctx) {\n         if (null != ctx.expr()) {\n             ASTNode expr = visit(ctx.expr());\n             if (expr instanceof PredicateSegment) {\n-                PredicateSegment predicate = (PredicateSegment) expr;\n-                result.setPredicateSegment(predicate);\n+                result.setPredicateSegment((PredicateSegment) expr);\n+                AndPredicate andPredicate = new AndPredicate();\n+                andPredicate.getPredicates().add((PredicateSegment) expr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwMzgzMw=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDIyNDY5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyNjoyNFrOGDS5fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToxOTowNlrOGDUdYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw==", "bodyText": "Those functions are the same as these in WhereClauseAssert. My suggestion is to extract PredicatesAssert, which will be used by WhereClauseAssert and this one.", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406108543", "createdAt": "2020-04-09T10:26:24Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -37,5 +64,142 @@\n      * @param expected expected JoinSpecification\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+        assertThat(assertContext.getText(\"startindex assert error\"), actual.getStartIndex(), is(expected.getStartIndex()));\n+        assertThat(assertContext.getText(\"stopindex assert error\"), actual.getStopIndex(), is(expected.getStopIndex()));\n+        assertAndPredicates(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n+    \n+    }\n+    \n+    private static void assertAndPredicates(final SQLCaseAssertContext assertContext, final Collection<AndPredicate> actual, final List<ExpectedAndPredicate> expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNDExNA==", "bodyText": "Ok.", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406134114", "createdAt": "2020-04-09T11:19:06Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/JoinSpecificationAssert.java", "diffHunk": "@@ -37,5 +64,142 @@\n      * @param expected expected JoinSpecification\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinSpecificationSegment actual, final ExpectedJoinSpecification expected) {\n+        assertThat(assertContext.getText(\"startindex assert error\"), actual.getStartIndex(), is(expected.getStartIndex()));\n+        assertThat(assertContext.getText(\"stopindex assert error\"), actual.getStopIndex(), is(expected.getStopIndex()));\n+        assertAndPredicates(assertContext, actual.getAndPredicates(), expected.getAndPredicates());\n+    \n+    }\n+    \n+    private static void assertAndPredicates(final SQLCaseAssertContext assertContext, final Collection<AndPredicate> actual, final List<ExpectedAndPredicate> expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwODU0Mw=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDIzMTUwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/JoinTableAssert.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoyODoyMFrOGDS9iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTowNjo0MVrOGDUGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ==", "bodyText": "This sentence has the same meaning as line 58, please delete it.", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406109579", "createdAt": "2020-04-09T10:28:20Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/JoinTableAssert.java", "diffHunk": "@@ -44,14 +46,21 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinedTableSegment actual, final ExpectedJoinTable expected) {\n         TableFactorAssert.assertIs(assertContext, actual.getTableFactor(), expected.getTableFactor());\n-        JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        if (null != actual.getJoinSpecification()) {\n+            JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        }\n     }\n     \n     public static void assertIs(final SQLCaseAssertContext assertContext, final List<JoinedTableSegment> actual, final List<ExpectedJoinTable> expected) {\n         assertThat(assertContext.getText(\"JoinTable size assert error\"), actual.size(), is(null == expected ? 0 : expected.size()));\n         for (int i = 0; i < actual.size(); i++) {\n             TableFactorAssert.assertIs(assertContext, actual.get(i).getTableFactor(), expected.get(i).getTableFactor());\n-            JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            if (null != expected.get(i).getJoinSpecification()) {\n+                assertNotNull(assertContext.getText(\"Actual JoinSpecification segment should exist.\"), actual.get(i).getJoinSpecification());\n+                JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            } else {\n+                assertNull(assertContext.getText(\"Actual JoinSpecification segment should not exist.\"), actual.get(i).getJoinSpecification());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODI2NA==", "bodyText": "Not the same, there is a similar use in file shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/statement/dml/impl/SelectStatementAssert.java", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406128264", "createdAt": "2020-04-09T11:06:41Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/asserts/segment/table/JoinTableAssert.java", "diffHunk": "@@ -44,14 +46,21 @@\n      */\n     public static void assertIs(final SQLCaseAssertContext assertContext, final JoinedTableSegment actual, final ExpectedJoinTable expected) {\n         TableFactorAssert.assertIs(assertContext, actual.getTableFactor(), expected.getTableFactor());\n-        JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        if (null != actual.getJoinSpecification()) {\n+            JoinSpecificationAssert.assertIs(assertContext, actual.getJoinSpecification(), expected.getJoinSpecification());\n+        }\n     }\n     \n     public static void assertIs(final SQLCaseAssertContext assertContext, final List<JoinedTableSegment> actual, final List<ExpectedJoinTable> expected) {\n         assertThat(assertContext.getText(\"JoinTable size assert error\"), actual.size(), is(null == expected ? 0 : expected.size()));\n         for (int i = 0; i < actual.size(); i++) {\n             TableFactorAssert.assertIs(assertContext, actual.get(i).getTableFactor(), expected.get(i).getTableFactor());\n-            JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            if (null != expected.get(i).getJoinSpecification()) {\n+                assertNotNull(assertContext.getText(\"Actual JoinSpecification segment should exist.\"), actual.get(i).getJoinSpecification());\n+                JoinSpecificationAssert.assertIs(assertContext, actual.get(i).getJoinSpecification(), expected.get(i).getJoinSpecification());\n+            } else {\n+                assertNull(assertContext.getText(\"Actual JoinSpecification segment should not exist.\"), actual.get(i).getJoinSpecification());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEwOTU3OQ=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDI0MDA1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-or.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMDo0MVrOGDTCkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDo1ODoxN1rOGDT3fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMDg2Nw==", "bodyText": "Where are these SQL Cases?", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406110867", "createdAt": "2020-04-09T10:30:41Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-or.xml", "diffHunk": "@@ -291,6 +291,26 @@\n                 <table-factor>\n                     <table name=\"t_order_item\" alias=\"i\" start-index=\"31\" stop-index=\"42\" />\n                 </table-factor>\n+                <joinSpecification>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyNDQxNQ==", "bodyText": "In sharding-sql-test/src/main/resources/sql/supported/dml/select-or.xml", "url": "https://github.com/apache/shardingsphere/pull/5110#discussion_r406124415", "createdAt": "2020-04-09T10:58:17Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-or.xml", "diffHunk": "@@ -291,6 +291,26 @@\n                 <table-factor>\n                     <table name=\"t_order_item\" alias=\"i\" start-index=\"31\" stop-index=\"42\" />\n                 </table-factor>\n+                <joinSpecification>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMDg2Nw=="}, "originalCommit": {"oid": "4b823ea2cbacebcae560ae27198efe76993a31d3"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}