{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODAxNTI2", "number": 5387, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxODowMlrOD3_8fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMzoyMVrOD4ACoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ1OTQ5OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/orchestration/encrypt.en.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxODowM1rOGOk0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxODowM1rOGOk0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjQ4Mg==", "bodyText": "a redundant underscore here", "url": "https://github.com/apache/shardingsphere/pull/5387#discussion_r417936482", "createdAt": "2020-04-30T11:18:03Z", "author": {"login": "kimmking"}, "path": "docs/document/content/features/orchestration/encrypt.en.md", "diffHunk": "@@ -12,6 +12,196 @@ Because of that, ShardingSphere has provided data masking, which stores users' s\n \n ShardingSphere has made the encryption and decryption processes totally transparent to users, who can store desensitized data and acquire original data without any awareness. In addition, ShardingSphere has provided internal masking algorithms, which can be directly used by users. In the same time, we have also provided masking algorithm related interfaces, which can be implemented by users themselves. After simple configurations, ShardingSphere can use algorithms provided by users to perform encryption, decryption and masking.\n \n+## Preface\n+\n+Apache ShardingSphere is an ecosystem of open source distributed database middleware solutions. It consists of Sharding-JDBC, Sharding-Proxy, and Sharding-Sidecar (in planning) which are independent of each other, but can be used in mixed deployment. All of these can provide standardized data sharding, distributed transactions, and distributed governance functions, and can be applied to various situation such as Java homogeneous, heterogeneous languages, containers, cloud native, and so on.\n+\n+The data encryption module belongs to the sub-function module under the core function of ShardingSphere distributed governance. It parses the SQL input by the user and rewrites the SQL according to the encryption configuration provided by the user, thereby encrypting the original data and storing the original data and store the original data (optional) and cipher data to database at the same time. When the user queries the data, it takes the cipher data from the database and decrypts it, and finally returns the decrypted original data to the user. Apache ShardingSphere distributed database middleware automates and transparentizes the process of data encryption, so that users do not need to pay attention to the details of data decryption and use decrypted data like ordinary data.  In addition, ShardingSphere can provide a relatively complete set of solutions for the encryption of online services or the encryption function of new services.\n+\n+## Demand Analysis\n+\n+The demand for data encryption is generally divided into two situations in real business scenarios:\n+\n+1. When the new business start to launch, and the security department stipulates that the sensitive information related to users, such as banks and mobile phone numbers, should be encrypted and stored in the database, and then decrypted when used. Because it is a brand new system, there is no inventory data cleaning problem, so the implementation is relatively simple.\n+\n+2. For the service has been launched, and plaintext has been stored in the database before. The relevant department suddenly needs to encrypt the data from the on-line business. This scenario generally needs to deal with three issues as followings:\n+__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887444092053a140b40b0a74be61833d45834aa8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ2NDIzOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/orchestration/encrypt.en.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxOTozNVrOGOk3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxOTozNVrOGOk3Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNzIzNQ==", "bodyText": "wash number should be clean data", "url": "https://github.com/apache/shardingsphere/pull/5387#discussion_r417937235", "createdAt": "2020-04-30T11:19:35Z", "author": {"login": "kimmking"}, "path": "docs/document/content/features/orchestration/encrypt.en.md", "diffHunk": "@@ -12,6 +12,196 @@ Because of that, ShardingSphere has provided data masking, which stores users' s\n \n ShardingSphere has made the encryption and decryption processes totally transparent to users, who can store desensitized data and acquire original data without any awareness. In addition, ShardingSphere has provided internal masking algorithms, which can be directly used by users. In the same time, we have also provided masking algorithm related interfaces, which can be implemented by users themselves. After simple configurations, ShardingSphere can use algorithms provided by users to perform encryption, decryption and masking.\n \n+## Preface\n+\n+Apache ShardingSphere is an ecosystem of open source distributed database middleware solutions. It consists of Sharding-JDBC, Sharding-Proxy, and Sharding-Sidecar (in planning) which are independent of each other, but can be used in mixed deployment. All of these can provide standardized data sharding, distributed transactions, and distributed governance functions, and can be applied to various situation such as Java homogeneous, heterogeneous languages, containers, cloud native, and so on.\n+\n+The data encryption module belongs to the sub-function module under the core function of ShardingSphere distributed governance. It parses the SQL input by the user and rewrites the SQL according to the encryption configuration provided by the user, thereby encrypting the original data and storing the original data and store the original data (optional) and cipher data to database at the same time. When the user queries the data, it takes the cipher data from the database and decrypts it, and finally returns the decrypted original data to the user. Apache ShardingSphere distributed database middleware automates and transparentizes the process of data encryption, so that users do not need to pay attention to the details of data decryption and use decrypted data like ordinary data.  In addition, ShardingSphere can provide a relatively complete set of solutions for the encryption of online services or the encryption function of new services.\n+\n+## Demand Analysis\n+\n+The demand for data encryption is generally divided into two situations in real business scenarios:\n+\n+1. When the new business start to launch, and the security department stipulates that the sensitive information related to users, such as banks and mobile phone numbers, should be encrypted and stored in the database, and then decrypted when used. Because it is a brand new system, there is no inventory data cleaning problem, so the implementation is relatively simple.\n+\n+2. For the service has been launched, and plaintext has been stored in the database before. The relevant department suddenly needs to encrypt the data from the on-line business. This scenario generally needs to deal with three issues as followings:\n+__\n+   a) How to encrypt the historical data, a.k.a.s wash number.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887444092053a140b40b0a74be61833d45834aa8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ2OTg4OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/orchestration/encrypt.en.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMTozMlrOGOk6-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMTozMlrOGOk6-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODE2OA==", "bodyText": "migrate  plaintext and ciphertext data between  business systems", "url": "https://github.com/apache/shardingsphere/pull/5387#discussion_r417938168", "createdAt": "2020-04-30T11:21:32Z", "author": {"login": "kimmking"}, "path": "docs/document/content/features/orchestration/encrypt.en.md", "diffHunk": "@@ -12,6 +12,196 @@ Because of that, ShardingSphere has provided data masking, which stores users' s\n \n ShardingSphere has made the encryption and decryption processes totally transparent to users, who can store desensitized data and acquire original data without any awareness. In addition, ShardingSphere has provided internal masking algorithms, which can be directly used by users. In the same time, we have also provided masking algorithm related interfaces, which can be implemented by users themselves. After simple configurations, ShardingSphere can use algorithms provided by users to perform encryption, decryption and masking.\n \n+## Preface\n+\n+Apache ShardingSphere is an ecosystem of open source distributed database middleware solutions. It consists of Sharding-JDBC, Sharding-Proxy, and Sharding-Sidecar (in planning) which are independent of each other, but can be used in mixed deployment. All of these can provide standardized data sharding, distributed transactions, and distributed governance functions, and can be applied to various situation such as Java homogeneous, heterogeneous languages, containers, cloud native, and so on.\n+\n+The data encryption module belongs to the sub-function module under the core function of ShardingSphere distributed governance. It parses the SQL input by the user and rewrites the SQL according to the encryption configuration provided by the user, thereby encrypting the original data and storing the original data and store the original data (optional) and cipher data to database at the same time. When the user queries the data, it takes the cipher data from the database and decrypts it, and finally returns the decrypted original data to the user. Apache ShardingSphere distributed database middleware automates and transparentizes the process of data encryption, so that users do not need to pay attention to the details of data decryption and use decrypted data like ordinary data.  In addition, ShardingSphere can provide a relatively complete set of solutions for the encryption of online services or the encryption function of new services.\n+\n+## Demand Analysis\n+\n+The demand for data encryption is generally divided into two situations in real business scenarios:\n+\n+1. When the new business start to launch, and the security department stipulates that the sensitive information related to users, such as banks and mobile phone numbers, should be encrypted and stored in the database, and then decrypted when used. Because it is a brand new system, there is no inventory data cleaning problem, so the implementation is relatively simple.\n+\n+2. For the service has been launched, and plaintext has been stored in the database before. The relevant department suddenly needs to encrypt the data from the on-line business. This scenario generally needs to deal with three issues as followings:\n+__\n+   a) How to encrypt the historical data, a.k.a.s wash number.\n+\n+   b) How to encrypt the newly added data and store it in the database without changing the business SQL and logic; then decrypt the taken out data when use it.\n+\n+   c) How to securely, seamlessly and transparently migrate business systems between plaintext and ciphertext data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887444092053a140b40b0a74be61833d45834aa8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ3NTIxOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/orchestration/encrypt.en.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMzoyMVrOGOk-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToyMzoyMVrOGOk-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODk5OA==", "bodyText": "business codes", "url": "https://github.com/apache/shardingsphere/pull/5387#discussion_r417938998", "createdAt": "2020-04-30T11:23:21Z", "author": {"login": "kimmking"}, "path": "docs/document/content/features/orchestration/encrypt.en.md", "diffHunk": "@@ -12,6 +12,196 @@ Because of that, ShardingSphere has provided data masking, which stores users' s\n \n ShardingSphere has made the encryption and decryption processes totally transparent to users, who can store desensitized data and acquire original data without any awareness. In addition, ShardingSphere has provided internal masking algorithms, which can be directly used by users. In the same time, we have also provided masking algorithm related interfaces, which can be implemented by users themselves. After simple configurations, ShardingSphere can use algorithms provided by users to perform encryption, decryption and masking.\n \n+## Preface\n+\n+Apache ShardingSphere is an ecosystem of open source distributed database middleware solutions. It consists of Sharding-JDBC, Sharding-Proxy, and Sharding-Sidecar (in planning) which are independent of each other, but can be used in mixed deployment. All of these can provide standardized data sharding, distributed transactions, and distributed governance functions, and can be applied to various situation such as Java homogeneous, heterogeneous languages, containers, cloud native, and so on.\n+\n+The data encryption module belongs to the sub-function module under the core function of ShardingSphere distributed governance. It parses the SQL input by the user and rewrites the SQL according to the encryption configuration provided by the user, thereby encrypting the original data and storing the original data and store the original data (optional) and cipher data to database at the same time. When the user queries the data, it takes the cipher data from the database and decrypts it, and finally returns the decrypted original data to the user. Apache ShardingSphere distributed database middleware automates and transparentizes the process of data encryption, so that users do not need to pay attention to the details of data decryption and use decrypted data like ordinary data.  In addition, ShardingSphere can provide a relatively complete set of solutions for the encryption of online services or the encryption function of new services.\n+\n+## Demand Analysis\n+\n+The demand for data encryption is generally divided into two situations in real business scenarios:\n+\n+1. When the new business start to launch, and the security department stipulates that the sensitive information related to users, such as banks and mobile phone numbers, should be encrypted and stored in the database, and then decrypted when used. Because it is a brand new system, there is no inventory data cleaning problem, so the implementation is relatively simple.\n+\n+2. For the service has been launched, and plaintext has been stored in the database before. The relevant department suddenly needs to encrypt the data from the on-line business. This scenario generally needs to deal with three issues as followings:\n+__\n+   a) How to encrypt the historical data, a.k.a.s wash number.\n+\n+   b) How to encrypt the newly added data and store it in the database without changing the business SQL and logic; then decrypt the taken out data when use it.\n+\n+   c) How to securely, seamlessly and transparently migrate business systems between plaintext and ciphertext data\n+\n+## Detailed Process\n+\n+### Overall Architecture\n+\n+Encrypt-JDBC provided by ShardingSphere are deployed with business code. Business parties need to perform JDBC programming for Encrypt-JDBC. Since Encrypt-JDBC implements all JDBC standard interfaces, business codes can be used without additional modification. At this time, Encrypt-JDBC is responsible for all interactions between the business code and the database. Business only needs to provide encryption rules. ** As a bridge between the business code and the underlying database, Encrypt-JDBC can intercept user behavior and interact with the database after transforming the user behavior. **", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887444092053a140b40b0a74be61833d45834aa8"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 891, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}