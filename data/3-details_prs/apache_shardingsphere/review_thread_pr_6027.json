{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDYwNDg1", "number": 6027, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNDo1N1rOEFTikQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNTo1MFrOEFTi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk4NDgxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNDo1N1rOGjbvig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNDo1N1rOGjbvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNzg4Mg==", "bodyText": "Pease do not modify original code if you do not change anything", "url": "https://github.com/apache/shardingsphere/pull/6027#discussion_r439807882", "createdAt": "2020-06-14T09:04:57Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "diffHunk": "@@ -46,46 +50,32 @@\n @SpringBootApplication\n @ActiveProfiles(\"registry\")\n public class OrchestrationSpringBootRegistryEncryptTest {\n-    \n+\n+    private static final String DATA_SOURCE_FILE = \"yaml/data-source.yaml\";\n+\n+    private static final String ENCRYPT_RULE_FILE = \"yaml/encrypt-rule.yaml\";\n+\n     @Resource\n     private DataSource dataSource;\n     \n     @BeforeClass\n     public static void init() {\n         EmbedTestingServer.start();\n+        String dataSource = readYAML(DATA_SOURCE_FILE);\n+        String encryptRule = readYAML(ENCRYPT_RULE_FILE);\n         TestCenterRepository testCenter = new TestCenterRepository();\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", \"\"\n-                + \"dataSource: !!org.apache.shardingsphere.orchestration.core.configuration.YamlDataSourceConfiguration\\n\" \n-                + \"  dataSourceClassName: org.apache.commons.dbcp2.BasicDataSource\\n\"\n-                + \"  props:\\n\"\n-                + \"    url: jdbc:h2:mem:ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL\\n\"\n-                + \"    maxTotal: 100\\n\"\n-                + \"    password: ''\\n\"\n-                + \"    username: sa\\n\");\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", \"\"\n-                + \"rules:\\n\"\n-                + \"- !ENCRYPT\\n\"\n-                + \"  encryptors:\\n\"\n-                + \"    order_encrypt:\\n\"\n-                + \"      props:\\n\"\n-                + \"        aes.key.value: '123456'\\n\"\n-                + \"      type: AES\\n\"\n-                + \"  tables:\\n\" \n-                + \"    t_order:\\n\" \n-                + \"      columns:\\n\"\n-                + \"         user_id:\\n\"\n-                + \"           cipherColumn: user_id\\n\"\n-                + \"           encryptorName: order_encrypt\\n\");\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", dataSource);\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", encryptRule);\n         testCenter.persist(\"/demo_spring_boot_ds_center/config/props\", \"sql.show: 'true'\\n\");\n         testCenter.persist(\"/demo_spring_boot_ds_center/registry/datasources\", \"\");\n     }\n-    \n+\n     @Test\n     public void assertWithEncryptDataSource() throws NoSuchFieldException, IllegalAccessException {\n-        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+        assertTrue(this.dataSource instanceof OrchestrationShardingSphereDataSource);\n         Field field = OrchestrationShardingSphereDataSource.class.getDeclaredField(\"dataSource\");\n         field.setAccessible(true);\n-        ShardingSphereDataSource encryptDataSource = (ShardingSphereDataSource) field.get(dataSource);\n+        ShardingSphereDataSource encryptDataSource = (ShardingSphereDataSource) field.get(this.dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c216ac4ebd56517d1008df908eb71a2c725e38e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk4NDg1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNTowMlrOGjbvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNTowMlrOGjbvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNzg4OQ==", "bodyText": "Pease do not modify original code if you do not change anything", "url": "https://github.com/apache/shardingsphere/pull/6027#discussion_r439807889", "createdAt": "2020-06-14T09:05:02Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "diffHunk": "@@ -46,46 +50,32 @@\n @SpringBootApplication\n @ActiveProfiles(\"registry\")\n public class OrchestrationSpringBootRegistryEncryptTest {\n-    \n+\n+    private static final String DATA_SOURCE_FILE = \"yaml/data-source.yaml\";\n+\n+    private static final String ENCRYPT_RULE_FILE = \"yaml/encrypt-rule.yaml\";\n+\n     @Resource\n     private DataSource dataSource;\n     \n     @BeforeClass\n     public static void init() {\n         EmbedTestingServer.start();\n+        String dataSource = readYAML(DATA_SOURCE_FILE);\n+        String encryptRule = readYAML(ENCRYPT_RULE_FILE);\n         TestCenterRepository testCenter = new TestCenterRepository();\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", \"\"\n-                + \"dataSource: !!org.apache.shardingsphere.orchestration.core.configuration.YamlDataSourceConfiguration\\n\" \n-                + \"  dataSourceClassName: org.apache.commons.dbcp2.BasicDataSource\\n\"\n-                + \"  props:\\n\"\n-                + \"    url: jdbc:h2:mem:ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL\\n\"\n-                + \"    maxTotal: 100\\n\"\n-                + \"    password: ''\\n\"\n-                + \"    username: sa\\n\");\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", \"\"\n-                + \"rules:\\n\"\n-                + \"- !ENCRYPT\\n\"\n-                + \"  encryptors:\\n\"\n-                + \"    order_encrypt:\\n\"\n-                + \"      props:\\n\"\n-                + \"        aes.key.value: '123456'\\n\"\n-                + \"      type: AES\\n\"\n-                + \"  tables:\\n\" \n-                + \"    t_order:\\n\" \n-                + \"      columns:\\n\"\n-                + \"         user_id:\\n\"\n-                + \"           cipherColumn: user_id\\n\"\n-                + \"           encryptorName: order_encrypt\\n\");\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", dataSource);\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", encryptRule);\n         testCenter.persist(\"/demo_spring_boot_ds_center/config/props\", \"sql.show: 'true'\\n\");\n         testCenter.persist(\"/demo_spring_boot_ds_center/registry/datasources\", \"\");\n     }\n-    \n+\n     @Test\n     public void assertWithEncryptDataSource() throws NoSuchFieldException, IllegalAccessException {\n-        assertTrue(dataSource instanceof OrchestrationShardingSphereDataSource);\n+        assertTrue(this.dataSource instanceof OrchestrationShardingSphereDataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c216ac4ebd56517d1008df908eb71a2c725e38e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk4NTE5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNToxNlrOGjbvuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNToxNlrOGjbvuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNzkyOQ==", "bodyText": "please keep the original indent", "url": "https://github.com/apache/shardingsphere/pull/6027#discussion_r439807929", "createdAt": "2020-06-14T09:05:16Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/java/org/apache/shardingsphere/spring/boot/orchestration/type/OrchestrationSpringBootRegistryEncryptTest.java", "diffHunk": "@@ -46,46 +50,32 @@\n @SpringBootApplication\n @ActiveProfiles(\"registry\")\n public class OrchestrationSpringBootRegistryEncryptTest {\n-    \n+\n+    private static final String DATA_SOURCE_FILE = \"yaml/data-source.yaml\";\n+\n+    private static final String ENCRYPT_RULE_FILE = \"yaml/encrypt-rule.yaml\";\n+\n     @Resource\n     private DataSource dataSource;\n     \n     @BeforeClass\n     public static void init() {\n         EmbedTestingServer.start();\n+        String dataSource = readYAML(DATA_SOURCE_FILE);\n+        String encryptRule = readYAML(ENCRYPT_RULE_FILE);\n         TestCenterRepository testCenter = new TestCenterRepository();\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", \"\"\n-                + \"dataSource: !!org.apache.shardingsphere.orchestration.core.configuration.YamlDataSourceConfiguration\\n\" \n-                + \"  dataSourceClassName: org.apache.commons.dbcp2.BasicDataSource\\n\"\n-                + \"  props:\\n\"\n-                + \"    url: jdbc:h2:mem:ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL\\n\"\n-                + \"    maxTotal: 100\\n\"\n-                + \"    password: ''\\n\"\n-                + \"    username: sa\\n\");\n-        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", \"\"\n-                + \"rules:\\n\"\n-                + \"- !ENCRYPT\\n\"\n-                + \"  encryptors:\\n\"\n-                + \"    order_encrypt:\\n\"\n-                + \"      props:\\n\"\n-                + \"        aes.key.value: '123456'\\n\"\n-                + \"      type: AES\\n\"\n-                + \"  tables:\\n\" \n-                + \"    t_order:\\n\" \n-                + \"      columns:\\n\"\n-                + \"         user_id:\\n\"\n-                + \"           cipherColumn: user_id\\n\"\n-                + \"           encryptorName: order_encrypt\\n\");\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/datasource\", dataSource);\n+        testCenter.persist(\"/demo_spring_boot_ds_center/config/schema/logic_db/rule\", encryptRule);\n         testCenter.persist(\"/demo_spring_boot_ds_center/config/props\", \"sql.show: 'true'\\n\");\n         testCenter.persist(\"/demo_spring_boot_ds_center/registry/datasources\", \"\");\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c216ac4ebd56517d1008df908eb71a2c725e38e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTk4NTQ2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/resources/yaml/encrypt-rule.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNTo1MFrOGjbv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTowNTo1MFrOGjbv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNzk2OA==", "bodyText": "Please add a blank line in end of file", "url": "https://github.com/apache/shardingsphere/pull/6027#discussion_r439807968", "createdAt": "2020-06-14T09:05:50Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-jdbc/shardingsphere-jdbc-spring/shardingsphere-jdbc-orchestration-spring/shardingsphere-jdbc-orchestration-spring-boot-starter/src/test/resources/yaml/encrypt-rule.yaml", "diffHunk": "@@ -0,0 +1,30 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+rules:\n+  - !ENCRYPT\n+    encryptors:\n+      order_encrypt:\n+        props:\n+          aes.key.value: '123456'\n+        type: AES\n+    tables:\n+      t_order:\n+        columns:\n+          user_id:\n+            cipherColumn: user_id\n+            encryptorName: order_encrypt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c216ac4ebd56517d1008df908eb71a2c725e38e"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}