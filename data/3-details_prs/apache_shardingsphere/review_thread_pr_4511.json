{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjM1MTY2", "number": 4511, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzozODo0N1rODjuIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MDoxNlrODjuJkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzgyNjA0OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzozODo0N1rOFvr51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1NDowN1rOFvsNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NjcxMA==", "bodyText": "encrypt_db is exist schema, the dataChangedEvent will not be created for new schema.", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385546710", "createdAt": "2020-02-28T07:38:47Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTY4Nw==", "bodyText": "ok,I'll fix it later", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385551687", "createdAt": "2020-02-28T07:54:07Z", "author": {"login": "zjcnb"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NjcxMA=="}, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzgyODA4OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzozOTo1MFrOFvr7Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzozOTo1MFrOFvr7Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzAzOQ==", "bodyText": "same problem as above", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547039", "createdAt": "2020-02-28T07:39:50Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzgyODY2OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MDoxNlrOFvr7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MDoxNlrOFvr7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzEzOQ==", "bodyText": "same problem as above", "url": "https://github.com/apache/shardingsphere/pull/4511#discussion_r385547139", "createdAt": "2020-02-28T07:40:16Z", "author": {"login": "menghaoranss"}, "path": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -170,4 +170,42 @@ public void assertCreateSchemaDeletedEventForNewSchema() {\n         assertThat(actual, instanceOf(SchemaDeletedEvent.class));\n         assertThat(((SchemaDeletedEvent) actual).getShardingSchemaName(), is(\"logic_db\"));\n     }\n+    \n+    @Test\n+    public void assertCreateWithInvalidNodeChangedEvent() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/logic_db\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateWithNullShardingSchemaName() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/datasource\", DATA_SOURCE_YAML, ChangedType.DELETED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(IgnoredShardingOrchestrationEvent.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithEncryptRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/encrypt_db/rule\", ENCRYPT_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(EncryptRuleChangedEvent.class));\n+        assertThat(((EncryptRuleChangedEvent) actual).getEncryptRuleConfiguration(), instanceOf(EncryptRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithShardingRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/rule\", SHARDING_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n+        assertThat(actual, instanceOf(ShardingRuleChangedEvent.class));\n+        assertThat(((ShardingRuleChangedEvent) actual).getShardingRuleConfiguration(), instanceOf(ShardingRuleConfiguration.class));\n+    }\n+    \n+    @Test\n+    public void assertCreateAddedEventWithMasterSlaveRuleConfigurationForNewSchema() {\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/masterslave_db/rule\", MASTER_SLAVE_RULE_YAML, ChangedType.UPDATED);\n+        ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e685e32b66f563da19908b3b6154958a272f7567"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1197, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}