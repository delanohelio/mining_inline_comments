{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODI4MzU2", "number": 4531, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo1MTo1OVrODkD2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNzoyNVrODk6-SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM4MzM2OnYy", "diffSide": "LEFT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo1MTo1OVrOFwMRIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo1MTo1OVrOFwMRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3Njk2Mw==", "bodyText": "Please keep the blank character.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386076963", "createdAt": "2020-03-01T04:51:59Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -46,18 +51,22 @@\n     \n     @ClassRule\n     public static EmbeddedApollo embeddedApollo = new EmbeddedApollo();\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM4NDAyOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo1Mzo1OFrOFwMReQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo1Mzo1OFrOFwMReQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzA0OQ==", "bodyText": "If assert null, we can assert directly, no need when ... thenReturn.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077049", "createdAt": "2020-03-01T04:53:58Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM4NTYwOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNTowMDowMVrOFwMSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNTowMDowMVrOFwMSUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzI2NQ==", "bodyText": "Keep four blank characters.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077265", "createdAt": "2020-03-01T05:00:01Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM4Njc1OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNTowMjozMVrOFwMS4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNTowMjozMVrOFwMS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NzQxMA==", "bodyText": "Keep four blank characters. Please check every method.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386077410", "createdAt": "2020-03-01T05:02:31Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"newValue1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(changeEvent.getValue(), is(\"newValue1\"));\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTQxNDQ0OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNjoxOTo0MVrOFwMgKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwODoyMjo1MVrOFwM5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MDgxMA==", "bodyText": "now we support delete?", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386080810", "createdAt": "2020-03-01T06:19:41Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"newValue1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(changeEvent.getValue(), is(\"newValue1\"));\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4NzQyMw==", "bodyText": "we not support   delete \uff0cbut can  add dataChangedEventListener", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r386087423", "createdAt": "2020-03-01T08:22:51Z", "author": {"login": "gongsiran"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -82,4 +91,65 @@ public void onChange(final DataChangedEvent dataChangedEvent) {\n         assertThat(changeEvent.getValue(), is(\"value3\"));\n         assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n     }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        when(openApiWrapper.getValue(eq(\"test.nonExistentKey\"))).thenReturn(null);\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"newValue1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertThat(changeEvent.getValue(), is(\"newValue1\"));\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.UPDATED));\n+    }\n+\n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+\n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n+        DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n+        assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MDgxMA=="}, "originalCommit": {"oid": "556dc52978a9b0ebfef722244119ecf71e5f7591"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIxMDc2OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzozNTowMlrOFxfAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzozNTowMlrOFxfAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMjU2NQ==", "bodyText": "Why delete the property and then add it right now?", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387432565", "createdAt": "2020-03-04T03:35:02Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIxNTk3OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzozODo1MFrOFxfDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzozODo1MFrOFxfDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzM1Mw==", "bodyText": "It's not a good idea for using assertWatchUpdateChangedType  method  at assertWatchAddChangedType  method, maybe we should rename these methods and make them more meaningful.\nI suggest this method rename assertWatchUpdateChangedTypeWithNotExistedKey", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433353", "createdAt": "2020-03-04T03:38:50Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");\n         DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n         assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n-        assertThat(changeEvent.getValue(), is(\"value3\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertNull(configCenterRepository.get(\"/test/children/1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddChangedType() {\n+        assertWatchUpdateChangedType(\"/test/children/newKey\", \"newVaule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIxODcwOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo0MTowMFrOFxfFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo0MTowMFrOFxfFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzc3MQ==", "bodyText": "Keep this line's blank character with @Override.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433771", "createdAt": "2020-03-04T03:41:00Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIxODkyOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo0MToxNFrOFxfFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo0MToxNFrOFxfFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzgxMg==", "bodyText": "Keep this line's blank character with @Override.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387433812", "createdAt": "2020-03-04T03:41:14Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"newValue1\");\n+        assertThat(configCenterRepository.get(\"/test/children/1\"), is(\"newValue1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchDeletedChangedType() {\n         final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n-        configCenterRepository.watch(\"/test/children/1\", future::set);\n+        configCenterRepository.watch(\"/test/children/1\", new DataChangedEventListener() {\n+    \n+            @Override\n+            public void onChange(final DataChangedEvent dataChangedEvent) {\n+                future.set(dataChangedEvent);\n+            }\n+        });\n+        embeddedApollo.deleteProperty(\"orchestration\", \"test.children.1\");\n         embeddedApollo.addOrModifyProperty(\"orchestration\", \"test.children.1\", \"value3\");\n         DataChangedEvent changeEvent = future.get(5, TimeUnit.SECONDS);\n         assertThat(changeEvent.getKey(), is(\"/test/children/1\"));\n-        assertThat(changeEvent.getValue(), is(\"value3\"));\n+        assertNull(changeEvent.getValue());\n+        assertThat(changeEvent.getChangedType(), is(DataChangedEvent.ChangedType.DELETED));\n+        assertNull(configCenterRepository.get(\"/test/children/1\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertWatchAddChangedType() {\n+        assertWatchUpdateChangedType(\"/test/children/newKey\", \"newVaule\");\n+    }\n+    \n+    @SneakyThrows\n+    private void assertWatchUpdateChangedType(final String key, final String newVaule) {\n+        final SettableFuture<DataChangedEvent> future = SettableFuture.create();\n+        configCenterRepository.watch(key, new DataChangedEventListener() {\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQxNTQ1OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNzoyNVrOFxg-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNzoyNVrOFxg-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDc3OQ==", "bodyText": "I suggest this method rename assertWatchUpdateChangedTypeWithExistedKey.", "url": "https://github.com/apache/shardingsphere/pull/4531#discussion_r387464779", "createdAt": "2020-03-04T06:07:25Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ApolloInstanceTest.java", "diffHunk": "@@ -67,12 +78,62 @@ public void assertGet() {\n     @Test\n     @SneakyThrows\n     public void assertWatch() {\n+        assertWatchUpdateChangedType(\"/test/children/1\", \"value3\");\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetWithNonExistentKey() {\n+        assertNull(configCenterRepository.get(\"/test/nonExistentKey\"));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e713a69ed7b94589a6b6b3988c6d60689b3e8c"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1201, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}