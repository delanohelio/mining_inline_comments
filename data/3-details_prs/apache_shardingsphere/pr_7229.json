{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3Nzg2MDIw", "number": 7229, "title": "fix #7163 replace dot with hyphen in configuration keys", "bodyText": "Fixes #7163", "createdAt": "2020-09-02T12:30:06Z", "url": "https://github.com/apache/shardingsphere/pull/7229", "merged": true, "mergeCommit": {"oid": "cc4020d42193b90b0a5d05090b1b57dfba23dd4f"}, "closed": true, "closedAt": "2020-09-06T09:46:39Z", "author": {"login": "291277058"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEfrVFgH2gAyNDc3Nzg2MDIwOjY5YmI5Y2JiMmEwNjc0MTc5MjM0Mzg3MTgzMWEyNTZjYmY2MThlZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGLPAwAFqTQ4MzEyODIxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69bb9cbb2a06741792343871831a256cbf618efd", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/69bb9cbb2a06741792343871831a256cbf618efd", "committedDate": "2020-09-01T04:27:19Z", "message": "Merge pull request #1 from apache/master\n\nsync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d8970e88f3970567600e117af25362b6878895", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/98d8970e88f3970567600e117af25362b6878895", "committedDate": "2020-09-01T04:28:29Z", "message": "Support table route for update sql.\nCompatible fix property read for springboot after 2.0.0M1.\nAllow update sharding key in sql.\nFix property read if property not has '.' , cause by springboot version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5e710b5e5224f3e0ff4891e44e3a0c7d887d68", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/5e5e710b5e5224f3e0ff4891e44e3a0c7d887d68", "committedDate": "2020-09-02T10:52:03Z", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3721e0cc1246e0215418d68e1206e8f378c7eca", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/a3721e0cc1246e0215418d68e1206e8f378c7eca", "committedDate": "2020-09-02T10:53:30Z", "message": "Revert \"Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\"\n\nThis reverts commit 5e5e710b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52fc86634fc35c22bb8a8d21e50c319199c1e4d", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/d52fc86634fc35c22bb8a8d21e50c319199c1e4d", "committedDate": "2020-09-02T10:59:40Z", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b21b38b5509de73561bc5cdbd2d46caecf90bd", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/f1b21b38b5509de73561bc5cdbd2d46caecf90bd", "committedDate": "2020-09-02T12:20:46Z", "message": "Merge pull request #2 from apache/master\n\nsync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75cc1eece62524e751e27803ba140075e613563", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/c75cc1eece62524e751e27803ba140075e613563", "committedDate": "2020-09-02T12:26:26Z", "message": "switch property config '.' to '-'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e55a18be7d2ec24bf3954e00214af6b6474cb3", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/40e55a18be7d2ec24bf3954e00214af6b6474cb3", "committedDate": "2020-09-02T12:30:56Z", "message": "AvoidStaticImport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33fb1fd3fe59e799d366c43c627714efaabad24", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/c33fb1fd3fe59e799d366c43c627714efaabad24", "committedDate": "2020-09-02T13:03:07Z", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5983d5b18bcf57284e62a53689fe7f649ce829fd", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/5983d5b18bcf57284e62a53689fe7f649ce829fd", "committedDate": "2020-09-02T13:09:30Z", "message": "AvoidStaticImport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9", "committedDate": "2020-09-03T01:56:04Z", "message": "code format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTE2NjMx", "url": "https://github.com/apache/shardingsphere/pull/7229#pullrequestreview-481516631", "createdAt": "2020-09-03T06:06:25Z", "commit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNjoyNlrOHMXKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjowNjoyNlrOHMXKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNDQ0NA==", "bodyText": "Please import CoreMatchers, so that we can change all the CoreMatchers.is as is.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482724444", "createdAt": "2020-09-03T06:06:26Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"ds_$->{order_id % 2}\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingAlgorithm() {\n-        assertThat(orderTableShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"t_order_$->{order_id % 4}\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getType(), CoreMatchers.is(\"INLINE\"));\n+        Assert.assertThat(orderTableShardingAlgorithm.getProps().getProperty(\"algorithm-expression\"), CoreMatchers.is(\"t_order_$->{order_id % 4}\"));\n     }\n     \n     @Test\n     public void assertModShardingAlgorithm() {\n-        assertThat(modShardingAlgorithm.getType(), is(\"MOD\"));\n-        assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding.count\"), is(\"2\"));\n+        Assert.assertThat(modShardingAlgorithm.getType(), CoreMatchers.is(\"MOD\"));\n+        Assert.assertThat(modShardingAlgorithm.getProps().getProperty(\"sharding-count\"), CoreMatchers.is(\"2\"));\n     }\n     \n     @Test\n     public void assertComplexShardingAlgorithm() {\n-        assertThat(complexShardingAlgorithm.getType(), is(\"COMPLEX_TEST\"));\n+        Assert.assertThat(complexShardingAlgorithm.getType(), CoreMatchers.is(\"COMPLEX_TEST\"));\n     }\n     \n     @Test\n     public void assertHintShardingAlgorithm() {\n-        assertThat(hintShardingAlgorithm.getType(), is(\"HINT_TEST\"));\n+        Assert.assertThat(hintShardingAlgorithm.getType(), CoreMatchers.is(\"HINT_TEST\"));\n     }\n     \n     @Test\n     public void assertDataSourceShardingStrategy() {\n-        assertThat(dataSourceShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), is(\"dataSourceShardingAlgorithm\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(dataSourceShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"dataSourceShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderTableShardingStrategy() {\n-        assertThat(orderTableShardingStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), is(\"orderTableShardingAlgorithm\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderTableShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"orderTableShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertModStrategy() {\n-        assertThat(modStrategy.getShardingColumn(), is(\"order_id\"));\n-        assertThat(modStrategy.getShardingAlgorithmName(), is(\"modShardingAlgorithm\"));\n+        Assert.assertThat(modStrategy.getShardingColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(modStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"modShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertComplexStrategy() {\n-        assertThat(complexStrategy.getShardingColumns(), is(\"order_id,user_id\"));\n-        assertThat(complexStrategy.getShardingAlgorithmName(), is(\"complexShardingAlgorithm\"));\n+        Assert.assertThat(complexStrategy.getShardingColumns(), CoreMatchers.is(\"order_id,user_id\"));\n+        Assert.assertThat(complexStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"complexShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertHintStrategy() {\n-        assertThat(hintShardingStrategy.getShardingAlgorithmName(), is(\"hintShardingAlgorithm\"));\n+        Assert.assertThat(hintShardingStrategy.getShardingAlgorithmName(), CoreMatchers.is(\"hintShardingAlgorithm\"));\n     }\n     \n     @Test\n     public void assertNoneStrategy() {\n-        assertNotNull(noneStrategy);\n+        Assert.assertNotNull(noneStrategy);\n     }\n     \n     @Test\n     public void assertIncrementAlgorithm() {\n-        assertThat(incrementAlgorithm.getType(), is(\"INCREMENT\"));\n+        Assert.assertThat(incrementAlgorithm.getType(), CoreMatchers.is(\"INCREMENT\"));\n     }\n     \n     @Test\n     public void assertDefaultKeyGenerator() {\n-        assertThat(defaultKeyGenerator.getColumn(), is(\"id\"));\n-        assertThat(defaultKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(defaultKeyGenerator.getColumn(), CoreMatchers.is(\"id\"));\n+        Assert.assertThat(defaultKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertOrderKeyGenerator() {\n-        assertThat(orderKeyGenerator.getColumn(), is(\"order_id\"));\n-        assertThat(orderKeyGenerator.getKeyGeneratorName(), is(\"incrementAlgorithm\"));\n+        Assert.assertThat(orderKeyGenerator.getColumn(), CoreMatchers.is(\"order_id\"));\n+        Assert.assertThat(orderKeyGenerator.getKeyGeneratorName(), CoreMatchers.is(\"incrementAlgorithm\"));\n     }\n     \n     @Test\n     public void assertSimpleRule() {\n         Collection<ShardingTableRuleConfiguration> actualSimpleRuleConfigurations = simpleRule.getTables();\n-        assertThat(actualSimpleRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualSimpleRuleConfigurations.size(), CoreMatchers.is(1));\n         ShardingTableRuleConfiguration actualSimpleRuleConfiguration = actualSimpleRuleConfigurations.iterator().next();\n-        assertThat(actualSimpleRuleConfiguration.getLogicTable(), is(\"t_order\"));\n+        Assert.assertThat(actualSimpleRuleConfiguration.getLogicTable(), CoreMatchers.is(\"t_order\"));\n     }\n     \n     @Test\n     public void assertComplexRule() {\n         Collection<ShardingTableRuleConfiguration> actualComplexRuleConfigurations = complexRule.getTables();\n-        assertThat(actualComplexRuleConfigurations.size(), is(1));\n+        Assert.assertThat(actualComplexRuleConfigurations.size(), CoreMatchers.is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTE4NjE1", "url": "https://github.com/apache/shardingsphere/pull/7229#pullrequestreview-481518615", "createdAt": "2020-09-03T06:10:57Z", "commit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxMDo1N1rOHMXQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxOTo1MVrOHMXc-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNjAzNg==", "bodyText": "Please rollback this change to focus on props issue solely.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482726036", "createdAt": "2020-09-03T06:10:57Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/main/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidator.java", "diffHunk": "@@ -67,7 +69,8 @@ public void preValidate(final ShardingRule shardingRule, final RouteContext rout\n                 if (shardingColumnSetAssignmentValue.isPresent() && shardingValue.isPresent() && shardingColumnSetAssignmentValue.get().equals(shardingValue.get())) {\n                     continue;\n                 }\n-                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);\n+                log.warn(\"should not update sharding key, logic table: {}, column: {}\", tableName, each);\n+//                throw new ShardingSphereException(\"Can not update sharding key, logic table: [%s], column: [%s].\", tableName, each);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzQ2OA==", "bodyText": "What changes did make ShardingSphereException removed?", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727468", "createdAt": "2020-09-03T06:14:59Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/validator/impl/ShardingUpdateStatementValidatorTest.java", "diffHunk": "@@ -96,7 +96,7 @@ public void assertValidateUpdateWithShardingKeyAndShardingParameterEquals() {\n         new ShardingUpdateStatementValidator().preValidate(shardingRule, routeContext, mock(ShardingSphereMetaData.class));\n     }\n     \n-    @Test(expected = ShardingSphereException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzc4NQ==", "bodyText": "Unexpected keyword replacement.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727785", "createdAt": "2020-09-03T06:15:54Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -9,18 +9,14 @@\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * distributed under the LicenseCoreMatchers.is distributed on an \"ASCoreMatchers.is\" BASIS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyNzg5OA==", "bodyText": "Same issue for CoreMatchers.is.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482727898", "createdAt": "2020-09-03T06:16:14Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java", "diffHunk": "@@ -105,141 +103,141 @@\n     \n     @Test\n     public void assertDataSourceShardingAlgorithm() {\n-        assertThat(dataSourceShardingAlgorithm.getType(), is(\"INLINE\"));\n-        assertThat(dataSourceShardingAlgorithm.getProps().getProperty(\"algorithm.expression\"), is(\"ds_$->{order_id % 2}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTAyOA==", "bodyText": "Here, we no longer need RC4_KEY_COMPATIBLE.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729028", "createdAt": "2020-09-03T06:19:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -34,7 +34,9 @@\n  */\n public final class RC4EncryptAlgorithm implements EncryptAlgorithm {\n     \n-    private static final String RC4_KEY = \"rc4.key.value\";\n+    private static final String RC4_KEY = \"rc4-key-value\";\n+    \n+    private static final String RC4_KEY_COMPATIBLE = \"rc4-key-value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTIwOA==", "bodyText": "Why did you add a new blank line?", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482729208", "createdAt": "2020-09-03T06:19:51Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/algorithm/RC4EncryptAlgorithm.java", "diffHunk": "@@ -88,6 +94,7 @@ private void reset() {\n     \n     /**\n      * Crypt given byte array. Be aware, that you must init key, before using.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81573c4e5dc56d248eb0c5fc9ae8d292e5da0c9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6095923d9047a47e1f6e4a776b680a65b7f93986", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/6095923d9047a47e1f6e4a776b680a65b7f93986", "committedDate": "2020-09-03T06:59:05Z", "message": "Revert \"Support table route for update sql. Compatible fix property read for springboot after 2.0.0M1. Allow update sharding key in sql. Fix property read if property not has '.' , cause by springboot version\"\n\nThis reverts commit 98d8970e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0f3d453aa59e447ce39948ed21cd7d0f509313", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/ce0f3d453aa59e447ce39948ed21cd7d0f509313", "committedDate": "2020-09-03T09:55:19Z", "message": "License fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf593d359a76eeb047b61613242ae1affacf5610", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/bf593d359a76eeb047b61613242ae1affacf5610", "committedDate": "2020-09-03T11:55:18Z", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9761750d7b98d005643de791fd288f5a853c1496", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/9761750d7b98d005643de791fd288f5a853c1496", "committedDate": "2020-09-03T12:11:39Z", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b78f39bfa365593a07cc757bb00a6de67882f2ef", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/b78f39bfa365593a07cc757bb00a6de67882f2ef", "committedDate": "2020-09-03T12:11:55Z", "message": "Merge remote-tracking branch 'origin/#7163' into #7163"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/3c0cf04c64b829c671035302bfbb80a24612fb75", "committedDate": "2020-09-03T12:12:37Z", "message": "Revert \"AvoidStaticImport\"\n\nThis reverts commit 40e55a18be7d2ec24bf3954e00214af6b6474cb3.\n\n# Conflicts:\n#\tshardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-spring/shardingsphere-sharding-spring-namespace/src/test/java/org/apache/shardingsphere/sharding/spring/namespace/ShardingSpringNamespaceTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzk2MDQ5", "url": "https://github.com/apache/shardingsphere/pull/7229#pullrequestreview-481796049", "createdAt": "2020-09-03T12:39:36Z", "commit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjozOTozNlrOHMkqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjo0NTowM1rOHMk3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NTY3Ng==", "bodyText": "previous release notes should be reserved.", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482945676", "createdAt": "2020-09-03T12:39:36Z", "author": {"login": "kimmking"}, "path": "RELEASE-NOTES.md", "diffHunk": "@@ -33,7 +33,7 @@\n \n 1. Optimization for Sharing Parser with ANTLR Visitor improving the parsing performance of long SQL by 100%~1000%\n 1. Use multiple threads to load metadata for different data sources\n-1. Support `allow.range.query.with.inline.sharding` option\n+1. Support `allow-range-query-with-inline-sharding` option", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0ODk1OA==", "bodyText": "replace allow-range-query-with-inline-sharding with constant", "url": "https://github.com/apache/shardingsphere/pull/7229#discussion_r482948958", "createdAt": "2020-09-03T12:45:03Z", "author": {"login": "kimmking"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-common/src/main/java/org/apache/shardingsphere/sharding/algorithm/sharding/inline/InlineShardingAlgorithm.java", "diffHunk": "@@ -76,7 +76,7 @@ public String doSharding(final Collection<String> availableTargetNames, final Pr\n         if (allowRangeQuery) {\n             return availableTargetNames;\n         }\n-        throw new UnsupportedOperationException(\"Since the property of `allow.range.query.with.inline.sharding` is false, inline sharding algorithm can not tackle with range query.\");\n+        throw new UnsupportedOperationException(\"Since the property of `allow-range-query-with-inline-sharding` is false, inline sharding algorithm can not tackle with range query.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0cf04c64b829c671035302bfbb80a24612fb75"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "370e584d2da27897534b1bb962e4dfe419cbc3b7", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/370e584d2da27897534b1bb962e4dfe419cbc3b7", "committedDate": "2020-09-03T16:35:06Z", "message": "previous release notes should be reserved.\n\nprevious release notes should be reserved."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c4cd7e5ce13f0f2a344fd8214302948598570e", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/62c4cd7e5ce13f0f2a344fd8214302948598570e", "committedDate": "2020-09-03T16:37:13Z", "message": "replace with constant\n\nreplace allow-range-query-with-inline-sharding with constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8965ce53061d637487618be2a895529197ee6bd3", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/8965ce53061d637487618be2a895529197ee6bd3", "committedDate": "2020-09-05T11:27:53Z", "message": "Update _index.cn.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f07a645901d80c0060472df2186ef246383009c9", "author": {"user": {"login": "291277058", "name": "Min.H"}}, "url": "https://github.com/apache/shardingsphere/commit/f07a645901d80c0060472df2186ef246383009c9", "committedDate": "2020-09-05T11:29:12Z", "message": "Update _index.en.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTI3OTI2", "url": "https://github.com/apache/shardingsphere/pull/7229#pullrequestreview-483127926", "createdAt": "2020-09-06T09:41:51Z", "commit": {"oid": "f07a645901d80c0060472df2186ef246383009c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTI4MjE1", "url": "https://github.com/apache/shardingsphere/pull/7229#pullrequestreview-483128215", "createdAt": "2020-09-06T09:46:08Z", "commit": {"oid": "f07a645901d80c0060472df2186ef246383009c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4694, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}