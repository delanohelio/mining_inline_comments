{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODA2NDE0", "number": 7581, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDoyNVrOEmrl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDoyNVrOEmrl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk1NTc1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DALBackendHandlerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDoyNVrOHW2p6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTo1NjozMlrOHXCYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjE4NQ==", "bodyText": "Please use static import of MatcherAssert", "url": "https://github.com/apache/shardingsphere/pull/7581#discussion_r493726185", "createdAt": "2020-09-23T16:24:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DALBackendHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.text.admin;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.backend.text.TextProtocolBackendHandler;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.SetStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowDatabasesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowTablesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLUseStatement;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+public final class DALBackendHandlerFactoryTest {\n+    \n+    @Test\n+    public void assertShowTablesBackendHandlerReturnedWhenMySQLShowTablesStatement() {\n+        MySQLShowTablesStatement mySQLShowTablesStatement = mock(MySQLShowTablesStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLShowTablesStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowTablesBackendHandler.class));\n+        ShowTablesBackendHandler showTablesBackendHandler = (ShowTablesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showTablesBackendHandler, \"sqlStatement\", is(mySQLShowTablesStatement));\n+        assertFieldOfInstance(showTablesBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(showTablesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUseDatabaseBackendHandlerReturnedWhenMySQLUseStatement() {\n+        MySQLUseStatement mySQLUseStatement = mock(MySQLUseStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLUseStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UseDatabaseBackendHandler.class));\n+        UseDatabaseBackendHandler useDatabaseBackendHandler = (UseDatabaseBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"useStatement\", is(mySQLUseStatement));\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertShowDatabasesBackendHandlerReturnedWhenMySQLShowDatabasesStatement() {\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mock(MySQLShowDatabasesStatement.class), backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowDatabasesBackendHandler.class));\n+        ShowDatabasesBackendHandler showDatabasesBackendHandler = (ShowDatabasesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showDatabasesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertBroadcastBackendHandlerReturnedWhenSetStatement() {\n+        SetStatement setStatement = mock(SetStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", setStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(BroadcastBackendHandler.class));\n+        BroadcastBackendHandler broadcastBackendHandler = (BroadcastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(broadcastBackendHandler, \"sqlStatement\", is(setStatement));\n+        assertFieldOfInstance(broadcastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(broadcastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUnicastBackendHandlerReturnedWhenOtherDALStatement() {\n+        DALStatement dalStatement = mock(DALStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", dalStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UnicastBackendHandler.class));\n+        UnicastBackendHandler unicastBackendHandler = (UnicastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(unicastBackendHandler, \"sqlStatement\", is(dalStatement));\n+        assertFieldOfInstance(unicastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(unicastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @SneakyThrows\n+    private <S, T> void assertFieldOfInstance(final S classInstance, final String fieldName, final Matcher<T> matcher) {\n+        Field field = classInstance.getClass().getDeclaredField(fieldName);\n+        field.setAccessible(true);\n+        T value = (T) field.get(classInstance);\n+        MatcherAssert.assertThat(value, matcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxODM4MA==", "bodyText": "changed", "url": "https://github.com/apache/shardingsphere/pull/7581#discussion_r493918380", "createdAt": "2020-09-23T21:56:32Z", "author": {"login": "sluk3r"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DALBackendHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.text.admin;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.backend.text.TextProtocolBackendHandler;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.SetStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowDatabasesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowTablesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLUseStatement;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+public final class DALBackendHandlerFactoryTest {\n+    \n+    @Test\n+    public void assertShowTablesBackendHandlerReturnedWhenMySQLShowTablesStatement() {\n+        MySQLShowTablesStatement mySQLShowTablesStatement = mock(MySQLShowTablesStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLShowTablesStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowTablesBackendHandler.class));\n+        ShowTablesBackendHandler showTablesBackendHandler = (ShowTablesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showTablesBackendHandler, \"sqlStatement\", is(mySQLShowTablesStatement));\n+        assertFieldOfInstance(showTablesBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(showTablesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUseDatabaseBackendHandlerReturnedWhenMySQLUseStatement() {\n+        MySQLUseStatement mySQLUseStatement = mock(MySQLUseStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLUseStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UseDatabaseBackendHandler.class));\n+        UseDatabaseBackendHandler useDatabaseBackendHandler = (UseDatabaseBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"useStatement\", is(mySQLUseStatement));\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertShowDatabasesBackendHandlerReturnedWhenMySQLShowDatabasesStatement() {\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mock(MySQLShowDatabasesStatement.class), backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowDatabasesBackendHandler.class));\n+        ShowDatabasesBackendHandler showDatabasesBackendHandler = (ShowDatabasesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showDatabasesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertBroadcastBackendHandlerReturnedWhenSetStatement() {\n+        SetStatement setStatement = mock(SetStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", setStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(BroadcastBackendHandler.class));\n+        BroadcastBackendHandler broadcastBackendHandler = (BroadcastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(broadcastBackendHandler, \"sqlStatement\", is(setStatement));\n+        assertFieldOfInstance(broadcastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(broadcastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUnicastBackendHandlerReturnedWhenOtherDALStatement() {\n+        DALStatement dalStatement = mock(DALStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", dalStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UnicastBackendHandler.class));\n+        UnicastBackendHandler unicastBackendHandler = (UnicastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(unicastBackendHandler, \"sqlStatement\", is(dalStatement));\n+        assertFieldOfInstance(unicastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(unicastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @SneakyThrows\n+    private <S, T> void assertFieldOfInstance(final S classInstance, final String fieldName, final Matcher<T> matcher) {\n+        Field field = classInstance.getClass().getDeclaredField(fieldName);\n+        field.setAccessible(true);\n+        T value = (T) field.get(classInstance);\n+        MatcherAssert.assertThat(value, matcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjE4NQ=="}, "originalCommit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 670, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}