{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NDM2Mjkw", "number": 7872, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMToyNjo0OFrOEwj5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyOTowN1rOEwme8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzU1MTUzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/table/TableAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMToyNjo0OFrOHmNUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMToyNjo0OFrOHmNUIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyNjA4Mg==", "bodyText": "redundant blank line", "url": "https://github.com/apache/shardingsphere/pull/7872#discussion_r509826082", "createdAt": "2020-10-22T01:26:48Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/table/TableAssert.java", "diffHunk": "@@ -54,28 +57,24 @@\n      * @param actual actual tables\n      * @param expected expected tables\n      */\n-    public static void assertIs(final SQLCaseAssertContext assertContext, final Collection<TableSegment> actual, final ExpectedTables expected) {\n-        assertThat(assertContext.getText(\"Tables size assertion error: \"), actual.size(), is(expected.getSimpleTables().size() + expected.getSubqueryTables().size()));\n-        assertSimpleTableSegment(assertContext, actual, expected);\n-        assertSubqueryTableSegment(assertContext, actual, expected);\n-    }\n-    \n-    /**\n-     * Assert actual table segments is correct with expected tables.\n-     * \n-     * @param assertContext assert context\n-     * @param actual actual tables\n-     * @param expected expected tables\n-     */\n-    public static void assertIs(final SQLCaseAssertContext assertContext, final Collection<SimpleTableSegment> actual, final List<ExpectedSimpleTable> expected) {\n-        assertThat(assertContext.getText(\"Tables size assertion error: \"), actual.size(), is(expected.size()));\n-        int count = 0;\n-        for (SimpleTableSegment each : actual) {\n-            assertIs(assertContext, each, expected.get(count));\n-            count++;\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final TableSegment actual, final ExpectedTable expected) {\n+        if (actual instanceof JoinTableSegment) {\n+            assertIs(assertContext, (JoinTableSegment) actual, expected.getJoinTable());\n+\n+        } else if (actual instanceof SimpleTableSegment) {\n+            assertIs(assertContext, (SimpleTableSegment) actual, expected.getSimpleTable());\n+\n+        } else if (actual instanceof SubqueryTableSegment) {\n+            assertIs(assertContext, (SubqueryTableSegment) actual, expected.getSubqueryTable());\n+\n+        } else if (actual instanceof DeleteMultiTableSegment) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5eab39c182d40b05372e5f6183ffbce13f94ad"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzk3NjE2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/table/TableAssert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyOTowN1rOHmRIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyOTowN1rOHmRIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4ODUzOQ==", "bodyText": "redundant blank line", "url": "https://github.com/apache/shardingsphere/pull/7872#discussion_r509888539", "createdAt": "2020-10-22T05:29:07Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/segment/table/TableAssert.java", "diffHunk": "@@ -54,28 +57,24 @@\n      * @param actual actual tables\n      * @param expected expected tables\n      */\n-    public static void assertIs(final SQLCaseAssertContext assertContext, final Collection<TableSegment> actual, final ExpectedTables expected) {\n-        assertThat(assertContext.getText(\"Tables size assertion error: \"), actual.size(), is(expected.getSimpleTables().size() + expected.getSubqueryTables().size()));\n-        assertSimpleTableSegment(assertContext, actual, expected);\n-        assertSubqueryTableSegment(assertContext, actual, expected);\n-    }\n-    \n-    /**\n-     * Assert actual table segments is correct with expected tables.\n-     * \n-     * @param assertContext assert context\n-     * @param actual actual tables\n-     * @param expected expected tables\n-     */\n-    public static void assertIs(final SQLCaseAssertContext assertContext, final Collection<SimpleTableSegment> actual, final List<ExpectedSimpleTable> expected) {\n-        assertThat(assertContext.getText(\"Tables size assertion error: \"), actual.size(), is(expected.size()));\n-        int count = 0;\n-        for (SimpleTableSegment each : actual) {\n-            assertIs(assertContext, each, expected.get(count));\n-            count++;\n+    public static void assertIs(final SQLCaseAssertContext assertContext, final TableSegment actual, final ExpectedTable expected) {\n+        if (actual instanceof JoinTableSegment) {\n+            assertIs(assertContext, (JoinTableSegment) actual, expected.getJoinTable());\n+\n+        } else if (actual instanceof SimpleTableSegment) {\n+            assertIs(assertContext, (SimpleTableSegment) actual, expected.getSimpleTable());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5eab39c182d40b05372e5f6183ffbce13f94ad"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 603, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}