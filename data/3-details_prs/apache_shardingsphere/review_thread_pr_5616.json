{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzQ5MjQy", "number": 5616, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzoyOToxMFrOD8uDmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzozMDowNFrOD8uELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTk1NzM4OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/test/java/org/apache/shardingsphere/orchestration/core/configcenter/listener/SchemaChangedListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzoyOToxMFrOGV1STw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzo1MDo1M1rOGV1lmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NjMxOQ==", "bodyText": "Why need to skip comment here? Can snake yaml process the comment?", "url": "https://github.com/apache/shardingsphere/pull/5616#discussion_r425546319", "createdAt": "2020-05-15T03:29:10Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/test/java/org/apache/shardingsphere/orchestration/core/configcenter/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -120,16 +83,33 @@ public void assertCreateIgnoredEvent() {\n     }\n     \n     @Test\n-    public void assertCreateDataSourceChangedEventForExistedSchema() {\n-        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/datasource\", DATA_SOURCE_YAML, ChangedType.UPDATED);\n+    public void assertCreateDataSourceChangedEventForExistedSchema() throws IOException {\n+        String dataSource = readYamlIntoString(DATA_SOURCE_YAML);\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/datasource\", dataSource, ChangedType.UPDATED);\n         ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n         assertThat(actual, instanceOf(DataSourceChangedEvent.class));\n         assertThat(((DataSourceChangedEvent) actual).getShardingSchemaName(), is(\"sharding_db\"));\n     }\n+\n+    private String readYamlIntoString(final String yamlFile) throws IOException {\n+        File file = new File(Preconditions.checkNotNull(getClass().getClassLoader().getResource(yamlFile), \"file resource `%s` must not be null.\", yamlFile).getFile());\n+        StringBuilder yamlContent = new StringBuilder();\n+        FileReader fileReader = new FileReader(file);\n+        BufferedReader reader = new BufferedReader(fileReader);\n+        String line;\n+        while (null != (line = reader.readLine())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e3f54627c982e6c65b7fbd0132f2d7293c38a1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MTI1OA==", "bodyText": "OK, I will try snake yaml", "url": "https://github.com/apache/shardingsphere/pull/5616#discussion_r425551258", "createdAt": "2020-05-15T03:50:53Z", "author": {"login": "hitnewbee"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/test/java/org/apache/shardingsphere/orchestration/core/configcenter/listener/SchemaChangedListenerTest.java", "diffHunk": "@@ -120,16 +83,33 @@ public void assertCreateIgnoredEvent() {\n     }\n     \n     @Test\n-    public void assertCreateDataSourceChangedEventForExistedSchema() {\n-        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/datasource\", DATA_SOURCE_YAML, ChangedType.UPDATED);\n+    public void assertCreateDataSourceChangedEventForExistedSchema() throws IOException {\n+        String dataSource = readYamlIntoString(DATA_SOURCE_YAML);\n+        DataChangedEvent dataChangedEvent = new DataChangedEvent(\"/test/config/schema/sharding_db/datasource\", dataSource, ChangedType.UPDATED);\n         ShardingOrchestrationEvent actual = schemaChangedListener.createShardingOrchestrationEvent(dataChangedEvent);\n         assertThat(actual, instanceOf(DataSourceChangedEvent.class));\n         assertThat(((DataSourceChangedEvent) actual).getShardingSchemaName(), is(\"sharding_db\"));\n     }\n+\n+    private String readYamlIntoString(final String yamlFile) throws IOException {\n+        File file = new File(Preconditions.checkNotNull(getClass().getClassLoader().getResource(yamlFile), \"file resource `%s` must not be null.\", yamlFile).getFile());\n+        StringBuilder yamlContent = new StringBuilder();\n+        FileReader fileReader = new FileReader(file);\n+        BufferedReader reader = new BufferedReader(fileReader);\n+        String line;\n+        while (null != (line = reader.readLine())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NjMxOQ=="}, "originalCommit": {"oid": "01e3f54627c982e6c65b7fbd0132f2d7293c38a1"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTk1ODg0OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/test/resources/sharding-rule.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzozMDowNFrOGV1TMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzozMDowNFrOGV1TMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NjU0Nw==", "bodyText": "Please leave a new line in the end of file", "url": "https://github.com/apache/shardingsphere/pull/5616#discussion_r425546547", "createdAt": "2020-05-15T03:30:04Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-configcenter/src/test/resources/sharding-rule.yaml", "diffHunk": "@@ -0,0 +1,30 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+rules:\n+- !!org.apache.shardingsphere.sharding.yaml.config.YamlShardingRuleConfiguration\n+  tables:\n+    t_order:\n+      logicTable: t_order\n+      actualDataNodes: ds_${0..1}.t_order_${0..1}\n+      tableStrategy:\n+        standard:\n+          shardingAlgorithm:\n+            type: INLINE\n+            props:\n+              algorithm.expression: t_order_${order_id % 2}\n+          shardingColumn: order_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e3f54627c982e6c65b7fbd0132f2d7293c38a1"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 882, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}