{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDIyOTUy", "number": 4863, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo0NDo1OVrODpzhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo0NjozNlrODpzjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTYyMzIyOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo0NDo1OVrOF5NHEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo1NjoxOVrOF5NdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyNzk1Mg==", "bodyText": "with more blank in the front of this line.", "url": "https://github.com/apache/shardingsphere/pull/4863#discussion_r395527952", "createdAt": "2020-03-20T09:44:59Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "diffHunk": "@@ -85,36 +85,29 @@ public ShardingRule(final ShardingRuleConfiguration shardingRuleConfig, final Co\n     }\n     \n     private Collection<TableRule> createTableRules(final ShardingRuleConfiguration shardingRuleConfig) {\n-        Collection<TableRuleConfiguration> tableRuleConfigurations = shardingRuleConfig.getTableRuleConfigs();\n-        Collection<TableRule> result = new ArrayList<>(tableRuleConfigurations.size());\n-        for (TableRuleConfiguration each : tableRuleConfigurations) {\n-            result.add(new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)));\n-        }\n-        return result;\n+        return shardingRuleConfig.getTableRuleConfigs().stream()\n+        .map(each -> new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcc9fc212fdc162ac86d87823aaea02e94c7c9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzMzY1Nw==", "bodyText": "Ok,i will fix it", "url": "https://github.com/apache/shardingsphere/pull/4863#discussion_r395533657", "createdAt": "2020-03-20T09:56:19Z", "author": {"login": "yu199195"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "diffHunk": "@@ -85,36 +85,29 @@ public ShardingRule(final ShardingRuleConfiguration shardingRuleConfig, final Co\n     }\n     \n     private Collection<TableRule> createTableRules(final ShardingRuleConfiguration shardingRuleConfig) {\n-        Collection<TableRuleConfiguration> tableRuleConfigurations = shardingRuleConfig.getTableRuleConfigs();\n-        Collection<TableRule> result = new ArrayList<>(tableRuleConfigurations.size());\n-        for (TableRuleConfiguration each : tableRuleConfigurations) {\n-            result.add(new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)));\n-        }\n-        return result;\n+        return shardingRuleConfig.getTableRuleConfigs().stream()\n+        .map(each -> new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyNzk1Mg=="}, "originalCommit": {"oid": "5cbcc9fc212fdc162ac86d87823aaea02e94c7c9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTYyODE0OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo0NjozNlrOF5NKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo0NjozNlrOF5NKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyODc2NQ==", "bodyText": "one line is better.", "url": "https://github.com/apache/shardingsphere/pull/4863#discussion_r395528765", "createdAt": "2020-03-20T09:46:36Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "diffHunk": "@@ -85,36 +85,29 @@ public ShardingRule(final ShardingRuleConfiguration shardingRuleConfig, final Co\n     }\n     \n     private Collection<TableRule> createTableRules(final ShardingRuleConfiguration shardingRuleConfig) {\n-        Collection<TableRuleConfiguration> tableRuleConfigurations = shardingRuleConfig.getTableRuleConfigs();\n-        Collection<TableRule> result = new ArrayList<>(tableRuleConfigurations.size());\n-        for (TableRuleConfiguration each : tableRuleConfigurations) {\n-            result.add(new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)));\n-        }\n-        return result;\n+        return shardingRuleConfig.getTableRuleConfigs().stream()\n+        .map(each -> new TableRule(each, shardingDataSourceNames, getDefaultGenerateKeyColumn(shardingRuleConfig)))\n+        .collect(Collectors.toList());\n     }\n     \n     private String getDefaultGenerateKeyColumn(final ShardingRuleConfiguration shardingRuleConfig) {\n-        return null == shardingRuleConfig.getDefaultKeyGeneratorConfig() ? null : shardingRuleConfig.getDefaultKeyGeneratorConfig().getColumn();\n+        return Optional.ofNullable(shardingRuleConfig.getDefaultKeyGeneratorConfig()).map(KeyGeneratorConfiguration::getColumn).orElse(null);\n     }\n     \n     private Collection<BindingTableRule> createBindingTableRules(final Collection<String> bindingTableGroups) {\n-        Collection<BindingTableRule> result = new ArrayList<>(bindingTableGroups.size());\n-        for (String each : bindingTableGroups) {\n-            result.add(createBindingTableRule(each));\n-        }\n-        return result;\n+        return bindingTableGroups.stream().map(this::createBindingTableRule).collect(Collectors.toList());\n     }\n     \n     private BindingTableRule createBindingTableRule(final String bindingTableGroup) {\n-        List<TableRule> tableRules = new LinkedList<>();\n-        for (String each : Splitter.on(\",\").trimResults().splitToList(bindingTableGroup)) {\n-            tableRules.add(getTableRule(each));\n-        }\n+        List<TableRule> tableRules = Splitter.on(\",\").trimResults()\n+                .splitToList(bindingTableGroup).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbcc9fc212fdc162ac86d87823aaea02e94c7c9"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1141, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}