{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjkyMzk5", "number": 5770, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyMjoyNlrOD_Kq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzoyODoyMlrOD_gr2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTYxNzEwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyMjoyNlrOGZsRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjo1NTo0NlrOGZsW7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mjk2Ng==", "bodyText": "Please do not format java doc, just keep one space with @aparam and @return", "url": "https://github.com/apache/shardingsphere/pull/5770#discussion_r429592966", "createdAt": "2020-05-24T02:22:26Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.util;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.SneakyThrows;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Safe range operation utility class.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SafeRangeOperationUtils {\n+\n+    /**\n+     * Execute intersection method by safe mode.\n+     *\n+     * @param range          range\n+     * @param connectedRange connected range\n+     * @return the intersection result of two ranges", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70a778f8876979dafc95944c99e6c50870b2148"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDM0OQ==", "bodyText": "Please do not format java doc, just keep one space with @aparam and @return\n\nThank you! I got it, and I will modify it. \ud83d\ude00", "url": "https://github.com/apache/shardingsphere/pull/5770#discussion_r429594349", "createdAt": "2020-05-24T02:55:46Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.util;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.SneakyThrows;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Safe range operation utility class.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SafeRangeOperationUtils {\n+\n+    /**\n+     * Execute intersection method by safe mode.\n+     *\n+     * @param range          range\n+     * @param connectedRange connected range\n+     * @return the intersection result of two ranges", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mjk2Ng=="}, "originalCommit": {"oid": "b70a778f8876979dafc95944c99e6c50870b2148"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTYxNzM5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyMzowNVrOGZsRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjo1NDowNlrOGZsWnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mjk5OQ==", "bodyText": "What's mean of variable name connectedRange?", "url": "https://github.com/apache/shardingsphere/pull/5770#discussion_r429592999", "createdAt": "2020-05-24T02:23:05Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.util;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.SneakyThrows;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Safe range operation utility class.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SafeRangeOperationUtils {\n+\n+    /**\n+     * Execute intersection method by safe mode.\n+     *\n+     * @param range          range\n+     * @param connectedRange connected range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b70a778f8876979dafc95944c99e6c50870b2148"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDI2OQ==", "bodyText": "What's mean of variable name connectedRange?\n\nIn order to consistent with the intersection method in Guava Range. The following is the definition of the intersection method:\n/**\n* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code\n* connectedRange}, if such a range exists.\n*\n* <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The\n* resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}\n* yields the empty range {@code [5..5)}.\n*\n* <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected\n* connected}.\n*\n* <p>The intersection operation is commutative, associative and idempotent, and its identity\n* element is {@link Range#all}).\n*\n* @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}\n*/\npublic Range<C> intersection(Range<C> connectedRange) {\n    int lowerCmp = lowerBound.compareTo(connectedRange.lowerBound);\n    int upperCmp = upperBound.compareTo(connectedRange.upperBound);\n    if (lowerCmp >= 0 && upperCmp <= 0) {\n        return this;\n    } else if (lowerCmp <= 0 && upperCmp >= 0) {\n        return connectedRange;\n    } else {\n        Cut<C> newLower = (lowerCmp >= 0) ? lowerBound : connectedRange.lowerBound;\n        Cut<C> newUpper = (upperCmp <= 0) ? upperBound : connectedRange.upperBound;\n        return create(newLower, newUpper);\n    }\n}", "url": "https://github.com/apache/shardingsphere/pull/5770#discussion_r429594269", "createdAt": "2020-05-24T02:54:06Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/util/SafeRangeOperationUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.util;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.SneakyThrows;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Safe range operation utility class.\n+ */\n+@AllArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SafeRangeOperationUtils {\n+\n+    /**\n+     * Execute intersection method by safe mode.\n+     *\n+     * @param range          range\n+     * @param connectedRange connected range", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mjk5OQ=="}, "originalCommit": {"oid": "b70a778f8876979dafc95944c99e6c50870b2148"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTIyMzk1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueBetweenOperatorGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzoyODoyMlrOGaNjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzoyODoyMlrOGaNjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzODEzOA==", "bodyText": "A newline is supposed to start with 4 blank spaces. Just a little issue of check style. Apart from that, I approved. Thanks for the clean coding!", "url": "https://github.com/apache/shardingsphere/pull/5770#discussion_r430138138", "createdAt": "2020-05-26T03:28:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-features/shardingsphere-sharding/shardingsphere-sharding-route/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueBetweenOperatorGeneratorTest.java", "diffHunk": "@@ -36,11 +37,11 @@\n import static org.junit.Assert.assertTrue;\n \n public final class ConditionValueBetweenOperatorGeneratorTest {\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1eaac72e5c90e48e3944685b3e450c278d864e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 807, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}