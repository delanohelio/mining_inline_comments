{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODg1MDU1", "number": 4916, "title": "add tableReferences in selectStatement", "bodyText": "ref #4885 .\nChanges proposed in this pull request:\n\nadd tableReferences in selectStatement\nKeep tables and remove tables in the next subtask\nonly change for mysql ,Subtasks behind will be compatible with other db", "createdAt": "2020-03-24T09:49:11Z", "url": "https://github.com/apache/shardingsphere/pull/4916", "merged": true, "mergeCommit": {"oid": "4d53d222d3195f78ad1054c3f530f43c764452b6"}, "closed": true, "closedAt": "2020-03-26T04:39:58Z", "author": {"login": "jingshanglu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQctK4gH2gAyMzkyODg1MDU1OjMzMTFlYjQ5YzA4YzkxOTY2NmQxMjM2MzMzYmM1OWJlMWNkODU2YTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRUjmjgFqTM4MTY5Nzk4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3311eb49c08c919666d1236333bc59be1cd856a2", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/3311eb49c08c919666d1236333bc59be1cd856a2", "committedDate": "2020-03-23T11:35:33Z", "message": "add JoinTableSegment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea66f83628762438fba6888a8e7da196e2a43df", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/1ea66f83628762438fba6888a8e7da196e2a43df", "committedDate": "2020-03-24T09:23:56Z", "message": "fix mysql visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a278b79b431c078a45715cae948bbd142d2f333e", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/a278b79b431c078a45715cae948bbd142d2f333e", "committedDate": "2020-03-24T09:31:25Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/0b41af1a4cfe9603410db346aaaf51a9d8f41f01", "committedDate": "2020-03-24T09:41:18Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODQyNzU4", "url": "https://github.com/apache/shardingsphere/pull/4916#pullrequestreview-380842758", "createdAt": "2020-03-25T03:48:32Z", "commit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "state": "APPROVED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0ODozMlrOF7LQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMTo0OVrOF7Lb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDY5OQ==", "bodyText": "The definition of tableFactor in DMLStatement.g4 shows this can happen, why do you remove it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397594699", "createdAt": "2020-03-25T03:48:32Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDg3NQ==", "bodyText": "How to handle the alias for subquery?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397594875", "createdAt": "2020-03-25T03:49:10Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {\n-            return visit(ctx.tableReferences());\n-        }\n-        SubqueryTableSegment result = new SubqueryTableSegment(new SubquerySegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), (SelectStatement) visit(ctx.subquery())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTQ0Ng==", "bodyText": "Is it likely to remove this member?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397595446", "createdAt": "2020-03-25T03:51:47Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableReferenceSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;\n+    \n+    private final Collection<JoinedTableSegment> joinedTables = new LinkedList<>();\n+    \n+    private final Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ==", "bodyText": "Do you think private final Collection<TableSegment> tables = new LinkedList<>(); can be deleted from this class?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397595889", "createdAt": "2020-03-25T03:53:55Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA==", "bodyText": "Please add TODO comment to avoid forgetting this issue here.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397596628", "createdAt": "2020-03-25T03:57:08Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzA2NQ==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597065", "createdAt": "2020-03-25T03:59:02Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -315,7 +326,12 @@ public ASTNode visitSelectClause(final SelectClauseContext ctx) {\n             result.getProjections().setDistinctRow(isDistinct(ctx));\n         }\n         if (null != ctx.fromClause()) {\n-            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());\n+            CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.fromClause());\n+            for (TableReferenceSegment t : tableReferences.getValue()) {\n+                result.getTables().addAll(t.getTables());\n+                result.getTableReferences().add(t);\n+            }\n+//            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzMwNg==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597306", "createdAt": "2020-03-25T04:00:04Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -315,7 +326,12 @@ public ASTNode visitSelectClause(final SelectClauseContext ctx) {\n             result.getProjections().setDistinctRow(isDistinct(ctx));\n         }\n         if (null != ctx.fromClause()) {\n-            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());\n+            CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.fromClause());\n+            for (TableReferenceSegment t : tableReferences.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzMyMg==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597322", "createdAt": "2020-03-25T04:00:09Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -279,7 +286,11 @@ public ASTNode visitSingleTableClause(final SingleTableClauseContext ctx) {\n     public ASTNode visitMultipleTablesClause(final MultipleTablesClauseContext ctx) {\n         CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n         result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.multipleTableNames()));\n-        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {\n+            result.getValue().addAll(t.getTables());\n+        }\n+//        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzM0MA==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597340", "createdAt": "2020-03-25T04:00:17Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -201,7 +204,11 @@ public ASTNode visitOnDuplicateKeyClause(final OnDuplicateKeyClauseContext ctx)\n     @Override\n     public ASTNode visitUpdate(final UpdateContext ctx) {\n         UpdateStatement result = new UpdateStatement();\n-        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {\n+            result.getTables().addAll(t.getTables());\n+        }\n+//        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzU4MQ==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597581", "createdAt": "2020-03-25T04:01:28Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -279,7 +286,11 @@ public ASTNode visitSingleTableClause(final SingleTableClauseContext ctx) {\n     public ASTNode visitMultipleTablesClause(final MultipleTablesClauseContext ctx) {\n         CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n         result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.multipleTableNames()));\n-        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzY1Ng==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597656", "createdAt": "2020-03-25T04:01:49Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODQ3ODc2", "url": "https://github.com/apache/shardingsphere/pull/4916#pullrequestreview-380847876", "createdAt": "2020-03-25T04:10:17Z", "commit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42a77f68987f23b5f51e0b2518a13eee3151d3e", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/a42a77f68987f23b5f51e0b2518a13eee3151d3e", "committedDate": "2020-03-25T06:01:50Z", "message": "fix mysql visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/36ef256f74a7bc11afa7c65995a4240ef1e531ef", "committedDate": "2020-03-25T06:14:29Z", "message": "format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTk3MjY3", "url": "https://github.com/apache/shardingsphere/pull/4916#pullrequestreview-380997267", "createdAt": "2020-03-25T09:54:18Z", "commit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NDoxOFrOF7Tb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNTowOFrOF7UOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyODc1NQ==", "bodyText": "Use each value name for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397728755", "createdAt": "2020-03-25T09:54:18Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -201,7 +205,10 @@ public ASTNode visitOnDuplicateKeyClause(final OnDuplicateKeyClauseContext ctx)\n     @Override\n     public ASTNode visitUpdate(final UpdateContext ctx) {\n         UpdateStatement result = new UpdateStatement();\n-        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzgyMA==", "bodyText": "Please use SubqueryTableSegment", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397733820", "createdAt": "2020-03-25T10:02:24Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +493,73 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n-            ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n-            }\n+            TableFactorSegment tableFactor = (TableFactorSegment) visit(ctx.tableFactor());\n+            result.setTableFactor(tableFactor);\n         }\n-        if (null != ctx.joinedTable()) {\n+        if (!ctx.joinedTable().isEmpty()) {\n             for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(each);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        TableFactorSegment result = new TableFactorSegment();\n+        if (null != ctx.subquery()) {\n+            SelectStatement subquery = (SelectStatement) visit(ctx.subquery());\n+            result.setSubquery(new SubquerySegment(ctx.subquery().start.getStartIndex(), ctx.subquery().stop.getStopIndex(), subquery));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczOTA5NQ==", "bodyText": "So? Why not now?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397739095", "createdAt": "2020-03-25T10:11:05Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableReferenceSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;\n+    \n+    private final Collection<JoinedTableSegment> joinedTables = new LinkedList<>();\n+    \n+    private final Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTQ0Ng=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDM0OQ==", "bodyText": "If you plan to delete them in the future, please add TODO comment for reminding.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740349", "createdAt": "2020-03-25T10:13:09Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDUyMg==", "bodyText": "Delete system out.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740522", "createdAt": "2020-03-25T10:13:28Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "diffHunk": "@@ -133,6 +133,9 @@ private static boolean isPlaceholderWithoutParameter(final Object[] sqlTestParam\n     \n     @Test\n     public void assertSupportedSQL() {\n+        if (\"select_alias_as_keyword\".equals(sqlCaseId) && \"MySQL\".equals(databaseType)) {\n+            System.out.println(\"dadf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDc3Nw==", "bodyText": "Why do not you delete them right now?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740777", "createdAt": "2020-03-25T10:13:51Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTU3NA==", "bodyText": "Two of SimpleTableSegment and SubqueryTableSegment implement TableSegment and have Alias which means you can remove alias and subquery from this class, right?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397741574", "createdAt": "2020-03-25T10:15:08Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.subquery.SubquerySegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableFactorSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7377aa5f1c70c521ed30918f25830765273eeeb8", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/7377aa5f1c70c521ed30918f25830765273eeeb8", "committedDate": "2020-03-25T10:56:07Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjgwNDIy", "url": "https://github.com/apache/shardingsphere/pull/4916#pullrequestreview-381680422", "createdAt": "2020-03-26T03:30:34Z", "commit": {"oid": "7377aa5f1c70c521ed30918f25830765273eeeb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozMDozNFrOF72Mdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozMToxOVrOF72NIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5ODIzMQ==", "bodyText": "? I guess you missed this comment", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r398298231", "createdAt": "2020-03-26T03:30:34Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5ODQwMQ==", "bodyText": "But I can not find any relevant changes on this page.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r398298401", "createdAt": "2020-03-26T03:31:19Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjk3OTgw", "url": "https://github.com/apache/shardingsphere/pull/4916#pullrequestreview-381697980", "createdAt": "2020-03-26T04:39:47Z", "commit": {"oid": "7377aa5f1c70c521ed30918f25830765273eeeb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3822, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}