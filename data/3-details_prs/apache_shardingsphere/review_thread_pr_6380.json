{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNjE5MDE4", "number": 6380, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjoyOTo0NlrOEP_ToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjozNlrOEP_eBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAxMzEzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjoyOTo0NlrOGz60KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToxNzoyOVrOG0B3UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA==", "bodyText": "The result of ctx.start.getInputStream().getText() and ctx.getText() are the same?", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457094184", "createdAt": "2020-07-20T06:29:46Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "diffHunk": "@@ -430,11 +431,11 @@ public final ASTNode visitAggregationFunction(final AggregationFunctionContext c\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        int innerExpressionStartIndex = ((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex();\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjM1Ng==", "bodyText": "Do you think ctx.getChild(1)).getSymbol().getStartIndex() == ctx.LP_().getSymbol().getStartIndex()?\nFrom the definition of aggregationFunction ,\naggregationFunction\n    : aggregationFunctionName LP_ distinct? (expr (COMMA_ expr)* | ASTERISK_)? RP_\nWhat we want is from LP_ to RP_, right?", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457096356", "createdAt": "2020-07-20T06:33:45Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "diffHunk": "@@ -430,11 +431,11 @@ public final ASTNode visitAggregationFunction(final AggregationFunctionContext c\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        int innerExpressionStartIndex = ((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex();\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MTEzOA==", "bodyText": "The result of ctx.start.getInputStream().getText() and ctx.getText() are the same?\n\n@tristaZero According to the documentation of the ctx.getText() method, we can find that the method does not return whitespace.\n/** \n  *  Return the combined text of all leaf nodes. Does not get any\n  *  off-channel tokens (if any) so won't return whitespace and\n  *  comments if they are sent to parser on hidden channel.\n  */\nString getText();\n\nIn order to get the original sql that contains whitespace, we need to use the ctx.start.getInputStream().getText() method to specify the start and end interval through Interval.", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457181138", "createdAt": "2020-07-20T08:39:28Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "diffHunk": "@@ -430,11 +431,11 @@ public final ASTNode visitAggregationFunction(final AggregationFunctionContext c\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        int innerExpressionStartIndex = ((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex();\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIwOTY4MQ==", "bodyText": "Do you think ctx.getChild(1)).getSymbol().getStartIndex() == ctx.LP_().getSymbol().getStartIndex()?\n\nYes, maybe using ctx.LP_().getSymbol().getStartIndex() is more easier to read. I will optimise it.\n\nFrom the definition of aggregationFunction ,\naggregationFunction\n: aggregationFunctionName LP_ distinct? (expr (COMMA_ expr)* | ASTERISK_)? RP_\nWhat we want is from LP_ to RP_, right?\n\nYes, the innerExpression include sql string from LP_ to RP_. The previous innerExpressionStartIndex is also the same logic.", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457209681", "createdAt": "2020-07-20T09:17:29Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-sqlserver/src/main/java/org/apache/shardingsphere/sql/parser/sqlserver/visitor/SQLServerVisitor.java", "diffHunk": "@@ -430,11 +431,11 @@ public final ASTNode visitAggregationFunction(final AggregationFunctionContext c\n     \n     private ASTNode createAggregationSegment(final AggregationFunctionContext ctx, final String aggregationType) {\n         AggregationType type = AggregationType.valueOf(aggregationType.toUpperCase());\n-        int innerExpressionStartIndex = ((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex();\n+        String innerExpression = ctx.start.getInputStream().getText(new Interval(((TerminalNode) ctx.getChild(1)).getSymbol().getStartIndex(), ctx.stop.getStopIndex()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDE4NA=="}, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAzOTczOnYy", "diffSide": "LEFT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjozNlrOGz7CrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToxNzo0NlrOG0B4IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzkwMQ==", "bodyText": "Here the check style is out of rule, so you correct them?", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457097901", "createdAt": "2020-07-20T06:36:36Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java", "diffHunk": "@@ -339,11 +340,11 @@ private PredicateSegment createInSegment(final PredicateContext ctx) {\n     }\n     \n     private PredicateBracketValue createBracketValue(final PredicateContext ctx) {\n-        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery() \n-                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex()) \n+        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery()\n+                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex())\n                 : new PredicateLeftBracketValue(ctx.LP_().getSymbol().getStartIndex(), ctx.LP_().getSymbol().getStopIndex());\n-        PredicateRightBracketValue predicateRightBracketValue = null != ctx.subquery() ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIwOTg4OQ==", "bodyText": "I will fix it.", "url": "https://github.com/apache/shardingsphere/pull/6380#discussion_r457209889", "createdAt": "2020-07-20T09:17:46Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/MySQLVisitor.java", "diffHunk": "@@ -339,11 +340,11 @@ private PredicateSegment createInSegment(final PredicateContext ctx) {\n     }\n     \n     private PredicateBracketValue createBracketValue(final PredicateContext ctx) {\n-        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery() \n-                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex()) \n+        PredicateLeftBracketValue predicateLeftBracketValue = null != ctx.subquery()\n+                ? new PredicateLeftBracketValue(ctx.subquery().LP_().getSymbol().getStartIndex(), ctx.subquery().LP_().getSymbol().getStopIndex())\n                 : new PredicateLeftBracketValue(ctx.LP_().getSymbol().getStartIndex(), ctx.LP_().getSymbol().getStopIndex());\n-        PredicateRightBracketValue predicateRightBracketValue = null != ctx.subquery() ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzkwMQ=="}, "originalCommit": {"oid": "06439fbde55a7c72df0938f91e784a1a636104ad"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 441, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}