{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDI5MDE3", "number": 5318, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjo1ODo1OFrOD2Q4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzowODoyNlrOD2Q-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjI2MjYxOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjo1ODo1OFrOGL__Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjo1ODo1OFrOGL__Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTg5NQ==", "bodyText": "\"mod.value\" is better", "url": "https://github.com/apache/shardingsphere/pull/5318#discussion_r415235895", "createdAt": "2020-04-26T06:58:58Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.inline;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Modulo sharding algorithm.\n+ * \n+ * <p>Shard with `y = MOD(x)` algorithm.</p>\n+ */\n+public final class ModuloShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+    \n+    private static final String MODULO_VALUE = \"modulo.value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc6db6b61e06bf3ca56cd4622325031ec5cd43c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjI2OTQ2OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzowMzowN1rOGMACKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzowMzowN1rOGMACKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjY1MA==", "bodyText": "Please use lombok", "url": "https://github.com/apache/shardingsphere/pull/5318#discussion_r415236650", "createdAt": "2020-04-26T07:03:07Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.inline;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Modulo sharding algorithm.\n+ * \n+ * <p>Shard with `y = MOD(x)` algorithm.</p>\n+ */\n+public final class ModuloShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+    \n+    private static final String MODULO_VALUE = \"modulo.value\";\n+    \n+    private Properties properties = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc6db6b61e06bf3ca56cd4622325031ec5cd43c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjI3ODMyOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzowODoyN1rOGMAGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzowODoyN1rOGMAGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzY3Mw==", "bodyText": "Properties is sync one, we can not use like this way, it will cause all concurrency threads as single synchronized thread.", "url": "https://github.com/apache/shardingsphere/pull/5318#discussion_r415237673", "createdAt": "2020-04-26T07:08:27Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/inline/ModuloShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.inline;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Modulo sharding algorithm.\n+ * \n+ * <p>Shard with `y = MOD(x)` algorithm.</p>\n+ */\n+public final class ModuloShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+    \n+    private static final String MODULO_VALUE = \"modulo.value\";\n+    \n+    private Properties properties = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc6db6b61e06bf3ca56cd4622325031ec5cd43c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1039, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}