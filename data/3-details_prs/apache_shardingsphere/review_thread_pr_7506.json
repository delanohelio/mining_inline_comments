{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDc1MDM0", "number": 7506, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NToxNFrOEk4PLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo0NDoxNFrOEk6kAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1NTgwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/SQLStatementUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NToxNFrOHUELbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoxMDo0NFrOHUO1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjAyOQ==", "bodyText": "Is this class just for InserSQLstatment? If so, do you think InsertSQLStatmentUtils is better?", "url": "https://github.com/apache/shardingsphere/pull/7506#discussion_r490802029", "createdAt": "2020-09-18T08:55:14Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/SQLStatementUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.util;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.SetAssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.OnDuplicateKeyColumnsSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.WithSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.PostgreSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.SQLServerStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n+\n+import java.util.Optional;\n+\n+/**\n+ * SQL statement utility class.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SQLStatementUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "443d22254967b4d75844b460e0f6af63c7046fc7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NjUxNA==", "bodyText": "Is this class just for InserSQLstatment? If so, do you think InsertSQLStatmentUtils is better?\n\n@tristaZero Yes, I will optimize it. \ud83d\udc4d", "url": "https://github.com/apache/shardingsphere/pull/7506#discussion_r490976514", "createdAt": "2020-09-18T14:10:44Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/SQLStatementUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.util;\n+\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.assignment.SetAssignmentSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.OnDuplicateKeyColumnsSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.WithSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.MySQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.PostgreSQLStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.SQLServerStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n+\n+import java.util.Optional;\n+\n+/**\n+ * SQL statement utility class.\n+ */\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SQLStatementUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMjAyOQ=="}, "originalCommit": {"oid": "443d22254967b4d75844b460e0f6af63c7046fc7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTQzNjgxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dml/InsertStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo0NDoxNFrOHUHxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozMjoyOFrOHUPvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2MDg5OA==", "bodyText": "Hi, I am glad to see this PR raized since it is thereal refactoring work touching some of the database dialect issues.\nSeparately reviewing this PR, I suppose it seems great except for a renaming issue. However, we can not avoid handling database dialects later. Therefore I want to give two points after my deliberation. Could you give them some consideration?\n\n\nA interface named DialectSQLstatementUtil<T entends SQLStatement> (Like \u00b7SQLStatementContext\u00b7) is needed to deal with the judgment or handling for different dialect SQLStatments in the process of rewriting, routing, etc. (package org.apache.shardingsphere.sql.parser.sql.dialect is preferred.)\n\n\nWe should keep all the SQLStatment clear and simple enough, which means SQLStatement just provides the basic public functions.\n\n\nWhat's the difference between SQLStatement and SQLStatmentContext?\nMy answer is that SQLStatment is the parsed OBJECT result for SQL input. Hence, SQLStatment is supposed to publish elementary functions as possible. On the other hand, SQLStatmentContext will carry all the logic handlings for ShardingSphere using SQLStatment.\nBased on that, some functions like getValueCountForPerGroup in InsertStatment maybe belongs to SQLStatmentContext(Or maybe InsertSQLStatmentUtil) instead of SQLStatement. We can consider improving it later. Plus, not only this one, other `SQLStatment's are also in our consideration. Actually speaking, this is skilled work. Thus  I don't feel comfortable letting others take charge of this task. But if you had an interest in it,  then welcome. :-)", "url": "https://github.com/apache/shardingsphere/pull/7506#discussion_r490860898", "createdAt": "2020-09-18T10:44:14Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dml/InsertStatement.java", "diffHunk": "@@ -95,107 +76,63 @@\n         return Optional.ofNullable(insertSelect);\n     }\n     \n-    /**\n-     * Get on duplicate key columns segment.\n-     *\n-     * @return on duplicate key columns segment\n-     */\n-    public Optional<OnDuplicateKeyColumnsSegment> getOnDuplicateKeyColumns() {\n-        return Optional.ofNullable(onDuplicateKeyColumns);\n-    }\n-    \n-    /**\n-     * Get with segment.\n-     * \n-     * @return with segment.\n-     */\n-    public Optional<WithSegment> getWithSegment() {\n-        return Optional.ofNullable(withSegment);\n-    }\n-    \n     /**\n      * Judge is use default columns or not.\n      * \n      * @return is use default columns or not\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "443d22254967b4d75844b460e0f6af63c7046fc7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MTQwMA==", "bodyText": "@tristaZero Thank you very much, I think your suggestions are great. \ud83d\udc4f InsertStatment really should not be overly complicated, and methods such as getValueCountForPerGroup are also usually used in SQLStatmentContext, so these methods should be migrated to SQLStatmentContext. I will try to refactor SQLStatement code to make it more elegant. \ud83d\ude04", "url": "https://github.com/apache/shardingsphere/pull/7506#discussion_r490991400", "createdAt": "2020-09-18T14:32:28Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/statement/dml/InsertStatement.java", "diffHunk": "@@ -95,107 +76,63 @@\n         return Optional.ofNullable(insertSelect);\n     }\n     \n-    /**\n-     * Get on duplicate key columns segment.\n-     *\n-     * @return on duplicate key columns segment\n-     */\n-    public Optional<OnDuplicateKeyColumnsSegment> getOnDuplicateKeyColumns() {\n-        return Optional.ofNullable(onDuplicateKeyColumns);\n-    }\n-    \n-    /**\n-     * Get with segment.\n-     * \n-     * @return with segment.\n-     */\n-    public Optional<WithSegment> getWithSegment() {\n-        return Optional.ofNullable(withSegment);\n-    }\n-    \n     /**\n      * Judge is use default columns or not.\n      * \n      * @return is use default columns or not\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2MDg5OA=="}, "originalCommit": {"oid": "443d22254967b4d75844b460e0f6af63c7046fc7"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 703, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}