{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDU2MDg4", "number": 3988, "title": "Using multithreading make loadDefaultTables faster", "bodyText": "Fixes #3979 #3681\nChanges proposed in this pull request:\n\nUsing multithreading make loadDefaultTables faster", "createdAt": "2020-01-15T10:10:34Z", "url": "https://github.com/apache/shardingsphere/pull/3988", "merged": true, "mergeCommit": {"oid": "a5d977a1237866d5897cbb3d8d169f50ccd98b2e"}, "closed": true, "closedAt": "2020-01-17T08:54:02Z", "author": {"login": "beijing-penguin"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6is_XgH2gAyMzYzMDU2MDg4OjA2MTM1YzY0YTc0MjA5ODM4ZTBlOGVkODQyYjM2MmEzZGVkMzJiMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7K1aRgFqTM0NDQzNTQwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a", "author": {"user": {"login": "beijing-penguin", "name": "beijing-penguin"}}, "url": "https://github.com/apache/shardingsphere/commit/06135c64a74209838e0e8ed842b362a3ded32b0a", "committedDate": "2020-01-15T10:08:27Z", "message": "Using multithreading make loadDefaultTables faster and remove repeat\nload tableMetaData"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMTc3NzUx", "url": "https://github.com/apache/shardingsphere/pull/3988#pullrequestreview-343177751", "createdAt": "2020-01-15T12:15:59Z", "commit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjoxNTo1OVrOFd2azA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjoxNTo1OVrOFd2azA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA==", "bodyText": "If there are two tables with the same name t1 and different structures in ds0 and default ds seperately, do you think removeRepeatTable() could return correct result list?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r366844620", "createdAt": "2020-01-15T12:15:59Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjYxNjQx", "url": "https://github.com/apache/shardingsphere/pull/3988#pullrequestreview-343661641", "createdAt": "2020-01-16T03:58:18Z", "commit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1ODoxOFrOFeNXyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1OTo0OFrOFeNYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDY4MA==", "bodyText": "Why did you remove repeat table? For performance or anything else?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220680", "createdAt": "2020-01-16T03:58:18Z", "author": {"login": "SteNicholas"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDkyMA==", "bodyText": "Why not for (int i = 0; i < tableNames.size(); i++) ?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220920", "createdAt": "2020-01-16T03:59:48Z", "author": {"login": "SteNicholas"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);\n+        List<TableMetaData> metaList = executorEngine.execute(getTableNamesInput(tableNames), new GroupedCallback<String, TableMetaData>() {\n+            @Override\n+            public Collection<TableMetaData> execute(final Collection<String> inputs, final boolean isTrunkThread, final Map<String, Object> dataMap) throws SQLException {\n+                String logicTableName = inputs.iterator().next();\n+                Collection<TableMetaData> result = new LinkedList<>();\n+                result.add(load(logicTableName, shardingRule));\n+                return result;\n+            }\n+        });\n+        Object[] tableNameArr = tableNames.toArray();\n+        for (int i = 0, size = tableNames.size(); i < size; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676367f6645671ce46990b47d5430590948f09ba", "author": {"user": {"login": "beijing-penguin", "name": "beijing-penguin"}}, "url": "https://github.com/apache/shardingsphere/commit/676367f6645671ce46990b47d5430590948f09ba", "committedDate": "2020-01-17T02:39:41Z", "message": "Using multithreading make loadDefaultTables faster.\nmaybe should remove repeat load tableMetaData?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e5c9a942e12dbe9a7552818190df9e90f659cf1", "author": {"user": {"login": "beijing-penguin", "name": "beijing-penguin"}}, "url": "https://github.com/apache/shardingsphere/commit/0e5c9a942e12dbe9a7552818190df9e90f659cf1", "committedDate": "2020-01-17T07:02:44Z", "message": "Merge remote-tracking branch 'upstream/dev' into dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecd060cb933e6f3106c45ffa0d5f7e5a72971050", "author": {"user": {"login": "beijing-penguin", "name": "beijing-penguin"}}, "url": "https://github.com/apache/shardingsphere/commit/ecd060cb933e6f3106c45ffa0d5f7e5a72971050", "committedDate": "2020-01-17T07:45:55Z", "message": "Using multithreading make loadDefaultTables faster."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa7544933cba3aae0b5a4f00deb2dcaadf374d3", "author": {"user": {"login": "beijing-penguin", "name": "beijing-penguin"}}, "url": "https://github.com/apache/shardingsphere/commit/faa7544933cba3aae0b5a4f00deb2dcaadf374d3", "committedDate": "2020-01-17T08:04:19Z", "message": "code style clean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDM1NDA5", "url": "https://github.com/apache/shardingsphere/pull/3988#pullrequestreview-344435409", "createdAt": "2020-01-17T08:53:52Z", "commit": {"oid": "faa7544933cba3aae0b5a4f00deb2dcaadf374d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}