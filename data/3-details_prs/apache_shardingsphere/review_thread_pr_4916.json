{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODg1MDU1", "number": 4916, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0ODozMlrODrDe7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNTowOFrODrJScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyNDMxOnYy", "diffSide": "LEFT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0ODozMlrOF7LQSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjoxNzowNFrOF7NWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDY5OQ==", "bodyText": "The definition of tableFactor in DMLStatement.g4 shows this can happen, why do you remove it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397594699", "createdAt": "2020-03-25T03:48:32Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyOTA0OA==", "bodyText": "I'll add it.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397629048", "createdAt": "2020-03-25T06:17:04Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDY5OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyNTQ5OnYy", "diffSide": "LEFT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0OToxMFrOF7LQ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjowMzozNVrOF7NIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDg3NQ==", "bodyText": "How to handle the alias for subquery?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397594875", "createdAt": "2020-03-25T03:49:10Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {\n-            return visit(ctx.tableReferences());\n-        }\n-        SubqueryTableSegment result = new SubqueryTableSegment(new SubquerySegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), (SelectStatement) visit(ctx.subquery())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTM3Mw==", "bodyText": "I'll add it.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397625373", "createdAt": "2020-03-25T06:03:35Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(jc);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        if (null != ctx.subquery()) {\n+            visit(ctx.subquery());\n+        }\n         if (null != ctx.tableName()) {\n             SimpleTableSegment result = (SimpleTableSegment) visit(ctx.tableName());\n             if (null != ctx.alias()) {\n                 result.setAlias((AliasSegment) visit(ctx.alias()));\n             }\n             return result;\n         }\n-        if (null != ctx.tableReferences()) {\n-            return visit(ctx.tableReferences());\n-        }\n-        SubqueryTableSegment result = new SubqueryTableSegment(new SubquerySegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), (SelectStatement) visit(ctx.subquery())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDg3NQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyOTA1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1MTo0N1rOF7LTNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMTowNVrOF7UEVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTQ0Ng==", "bodyText": "Is it likely to remove this member?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397595446", "createdAt": "2020-03-25T03:51:47Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableReferenceSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;\n+    \n+    private final Collection<JoinedTableSegment> joinedTables = new LinkedList<>();\n+    \n+    private final Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTQ0Mg==", "bodyText": "yes", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397625442", "createdAt": "2020-03-25T06:03:49Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableReferenceSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;\n+    \n+    private final Collection<JoinedTableSegment> joinedTables = new LinkedList<>();\n+    \n+    private final Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTQ0Ng=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczOTA5NQ==", "bodyText": "So? Why not now?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397739095", "createdAt": "2020-03-25T10:11:05Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableReferenceSegment.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableReferenceSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;\n+    \n+    private final Collection<JoinedTableSegment> joinedTables = new LinkedList<>();\n+    \n+    private final Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTQ0Ng=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDczMTkyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1Mzo1NVrOF7LU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozMToxOVrOF72NIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ==", "bodyText": "Do you think private final Collection<TableSegment> tables = new LinkedList<>(); can be deleted from this class?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397595889", "createdAt": "2020-03-25T03:53:55Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTY4Ng==", "bodyText": "yes", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397625686", "createdAt": "2020-03-25T06:04:40Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDc3Nw==", "bodyText": "Why do not you delete them right now?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740777", "createdAt": "2020-03-25T10:13:51Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MDUzMw==", "bodyText": "It has been deleted.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397790533", "createdAt": "2020-03-25T11:41:01Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5ODQwMQ==", "bodyText": "But I can not find any relevant changes on this page.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r398298401", "createdAt": "2020-03-26T03:31:19Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/statement/dml/SelectStatement.java", "diffHunk": "@@ -44,6 +45,8 @@\n     \n     private ProjectionsSegment projections;\n     \n+    private final Collection<TableReferenceSegment> tableReferences = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTg4OQ=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDczNjc5OnYy", "diffSide": "LEFT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1NzowOFrOF7LX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozMDozNFrOF72Mdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA==", "bodyText": "Please add TODO comment to avoid forgetting this issue here.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397596628", "createdAt": "2020-03-25T03:57:08Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyODIzMQ==", "bodyText": "this 2 lines should be deleted. other case will change like this. so,should i add TODO comment?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397628231", "createdAt": "2020-03-25T06:14:00Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDM0OQ==", "bodyText": "If you plan to delete them in the future, please add TODO comment for reminding.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740349", "createdAt": "2020-03-25T10:13:09Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5ODIzMQ==", "bodyText": "? I guess you missed this comment", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r398298231", "createdAt": "2020-03-26T03:30:34Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/resources/sql/dml/select-join.xml", "diffHunk": "@@ -48,8 +48,8 @@\n             <simple-table name=\"t_order\" start-index=\"27\" stop-index=\"33\" />\n             <simple-table name=\"t_order_item\" start-index=\"40\" stop-index=\"51\" />\n             <!-- FIXME should not has table segment for owner -->\n-            <simple-table name=\"t_order\" start-index=\"56\" stop-index=\"62\" />\n-            <simple-table name=\"t_order_item\" start-index=\"75\" stop-index=\"86\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjYyOA=="}, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDczOTYyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1OTowMlrOF7LZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1OTowMlrOF7LZiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzA2NQ==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597065", "createdAt": "2020-03-25T03:59:02Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -315,7 +326,12 @@ public ASTNode visitSelectClause(final SelectClauseContext ctx) {\n             result.getProjections().setDistinctRow(isDistinct(ctx));\n         }\n         if (null != ctx.fromClause()) {\n-            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());\n+            CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.fromClause());\n+            for (TableReferenceSegment t : tableReferences.getValue()) {\n+                result.getTables().addAll(t.getTables());\n+                result.getTableReferences().add(t);\n+            }\n+//            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0MTI2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDowNFrOF7Laeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDowNFrOF7Laeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzMwNg==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597306", "createdAt": "2020-03-25T04:00:04Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -315,7 +326,12 @@ public ASTNode visitSelectClause(final SelectClauseContext ctx) {\n             result.getProjections().setDistinctRow(isDistinct(ctx));\n         }\n         if (null != ctx.fromClause()) {\n-            result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.fromClause())).getValue());\n+            CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.fromClause());\n+            for (TableReferenceSegment t : tableReferences.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0MTM3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDowOVrOF7Laig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDowOVrOF7Laig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzMyMg==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597322", "createdAt": "2020-03-25T04:00:09Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -279,7 +286,11 @@ public ASTNode visitSingleTableClause(final SingleTableClauseContext ctx) {\n     public ASTNode visitMultipleTablesClause(final MultipleTablesClauseContext ctx) {\n         CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n         result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.multipleTableNames()));\n-        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {\n+            result.getValue().addAll(t.getTables());\n+        }\n+//        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0MTU1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDoxN1rOF7LanA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDoxN1rOF7LanA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzM0MA==", "bodyText": "Why did not you comment on this sentence instead of deleting it?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597340", "createdAt": "2020-03-25T04:00:17Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -201,7 +204,11 @@ public ASTNode visitOnDuplicateKeyClause(final OnDuplicateKeyClauseContext ctx)\n     @Override\n     public ASTNode visitUpdate(final UpdateContext ctx) {\n         UpdateStatement result = new UpdateStatement();\n-        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {\n+            result.getTables().addAll(t.getTables());\n+        }\n+//        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0MzI5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMToyOFrOF7LbjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMToyOFrOF7LbjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzU4MQ==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597581", "createdAt": "2020-03-25T04:01:28Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -279,7 +286,11 @@ public ASTNode visitSingleTableClause(final SingleTableClauseContext ctx) {\n     public ASTNode visitMultipleTablesClause(final MultipleTablesClauseContext ctx) {\n         CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n         result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.multipleTableNames()));\n-        result.combine((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences()));\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());\n+        for (TableReferenceSegment t : tableReferences.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0Mzg2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMTo0OVrOF7Lb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMTo0OVrOF7Lb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzY1Ng==", "bodyText": "Please use the value named each for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397597656", "createdAt": "2020-03-25T04:01:49Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +495,67 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n             ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n+            if (null != tableFactor) {\n+                result.setTable((TableSegment) tableFactor);\n             }\n         }\n-        if (null != ctx.joinedTable()) {\n-            for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+        if (!ctx.joinedTable().isEmpty()) {\n+            for (JoinedTableContext jc : ctx.joinedTable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b41af1a4cfe9603410db346aaaf51a9d8f41f01"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTU5NTQyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NDoxOFrOF7Tb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NDoxOFrOF7Tb8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyODc1NQ==", "bodyText": "Use each value name for for loop.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397728755", "createdAt": "2020-03-25T09:54:18Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -201,7 +205,10 @@ public ASTNode visitOnDuplicateKeyClause(final OnDuplicateKeyClauseContext ctx)\n     @Override\n     public ASTNode visitUpdate(final UpdateContext ctx) {\n         UpdateStatement result = new UpdateStatement();\n-        result.getTables().addAll(((CollectionValue<SimpleTableSegment>) visit(ctx.tableReferences())).getValue());\n+        CollectionValue<TableReferenceSegment> tableReferences = (CollectionValue<TableReferenceSegment>) visit(ctx.tableReferences());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTYyNjMyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMjoyNFrOF7TvvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMjoyNFrOF7TvvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzgyMA==", "bodyText": "Please use SubqueryTableSegment", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397733820", "createdAt": "2020-03-25T10:02:24Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/impl/MySQLDMLVisitor.java", "diffHunk": "@@ -479,78 +493,73 @@ public ASTNode visitEscapedTableReference(final EscapedTableReferenceContext ctx\n     \n     @Override\n     public ASTNode visitTableReference(final TableReferenceContext ctx) {\n-        CollectionValue<SimpleTableSegment> result = new CollectionValue<>();\n+        TableReferenceSegment result = new TableReferenceSegment();\n         if (null != ctx.tableFactor()) {\n-            // TODO :Ignore subquery table segment\n-            ASTNode tableFactor = visit(ctx.tableFactor());\n-            if (tableFactor instanceof SimpleTableSegment) {\n-                result.getValue().add((SimpleTableSegment) tableFactor);\n-            }\n+            TableFactorSegment tableFactor = (TableFactorSegment) visit(ctx.tableFactor());\n+            result.setTableFactor(tableFactor);\n         }\n-        if (null != ctx.joinedTable()) {\n+        if (!ctx.joinedTable().isEmpty()) {\n             for (JoinedTableContext each : ctx.joinedTable()) {\n-                result.getValue().addAll(getTableSegments(result.getValue(), each));\n+                JoinedTableSegment joinedTableSegment = (JoinedTableSegment) visit(each);\n+                result.getJoinedTables().add(joinedTableSegment);\n             }\n         }\n         return result;\n     }\n     \n     @Override\n     public ASTNode visitTableFactor(final TableFactorContext ctx) {\n+        TableFactorSegment result = new TableFactorSegment();\n+        if (null != ctx.subquery()) {\n+            SelectStatement subquery = (SelectStatement) visit(ctx.subquery());\n+            result.setSubquery(new SubquerySegment(ctx.subquery().start.getStartIndex(), ctx.subquery().stop.getStopIndex(), subquery));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY2ODU4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMzoyOFrOF7UJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMzoyOFrOF7UJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MDUyMg==", "bodyText": "Delete system out.", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397740522", "createdAt": "2020-03-25T10:13:28Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/test/java/org/apache/shardingsphere/sql/parser/integrate/engine/SQLParserParameterizedTest.java", "diffHunk": "@@ -133,6 +133,9 @@ private static boolean isPlaceholderWithoutParameter(final Object[] sqlTestParam\n     \n     @Test\n     public void assertSupportedSQL() {\n+        if (\"select_alias_as_keyword\".equals(sqlCaseId) && \"MySQL\".equals(databaseType)) {\n+            System.out.println(\"dadf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTY3NTM4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxNTowOFrOF7UOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0MTo0M1rOF7XOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTU3NA==", "bodyText": "Two of SimpleTableSegment and SubqueryTableSegment implement TableSegment and have Alias which means you can remove alias and subquery from this class, right?", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397741574", "createdAt": "2020-03-25T10:15:08Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.subquery.SubquerySegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableFactorSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MDg5OQ==", "bodyText": "ok", "url": "https://github.com/apache/shardingsphere/pull/4916#discussion_r397790899", "createdAt": "2020-03-25T11:41:43Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/segment/dml/TableFactorSegment.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.segment.dml;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.sql.parser.sql.segment.SQLSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.subquery.SubquerySegment;\n+import org.apache.shardingsphere.sql.parser.sql.segment.generic.table.TableSegment;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+@Getter\n+@Setter\n+public final class TableFactorSegment implements SQLSegment {\n+    \n+    private int startIndex;\n+    \n+    private int stopIndex;\n+    \n+    private TableSegment table;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTU3NA=="}, "originalCommit": {"oid": "36ef256f74a7bc11afa7c65995a4240ef1e531ef"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1156, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}