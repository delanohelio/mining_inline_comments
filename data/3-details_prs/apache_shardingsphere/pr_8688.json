{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODYwMDY1", "number": 8688, "title": "[Docs] Trans realization of distributed transaction into en", "bodyText": "Fixes #6070.\nChanges proposed in this pull request:\n\nAdd  translation for  distributed transaction  of SS blog\n\nCorresponding Chinese commented content will remove once the translation ready to merge", "createdAt": "2020-12-19T02:08:08Z", "url": "https://github.com/apache/shardingsphere/pull/8688", "merged": true, "mergeCommit": {"oid": "262648b75b3c36ec105c606338728a1ee4b05dda"}, "closed": true, "closedAt": "2020-12-24T03:09:21Z", "author": {"login": "rudy2steiner"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdni77tgH2gAyNTQyODYwMDY1OjUxYWM0ZmQ0ZDhhNTFlNGI0Y2M0MTE0OTgxZDhhNmJmNDE0MjRjNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpK4cdAFqTU1ODMxNTU3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f", "author": {"user": {"login": "rudy2steiner", "name": "Rudy Steiner"}}, "url": "https://github.com/apache/shardingsphere/commit/51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f", "committedDate": "2020-12-19T02:02:31Z", "message": "Trans realization of distributed transaction into en"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTAxODUy", "url": "https://github.com/apache/shardingsphere/pull/8688#pullrequestreview-556101852", "createdAt": "2020-12-21T02:47:05Z", "commit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0NzowNVrOIJKrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxMTowMVrOIJK_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzEzNQ==", "bodyText": "amply?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546483135", "createdAt": "2020-12-21T02:47:05Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzI3MA==", "bodyText": "And all data in one database will bereorganized ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546483270", "createdAt": "2020-12-21T02:47:50Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzEzNQ=="}, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDQxMg==", "bodyText": "is the result in trade off\uff1f", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546484412", "createdAt": "2020-12-21T02:53:14Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTI3NA==", "bodyText": "can be benefit from ?\na service across multi systems adopts?\nHow to  rade off?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546485274", "createdAt": "2020-12-21T02:56:20Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTU1OA==", "bodyText": "among database vendors?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546485558", "createdAt": "2020-12-21T02:57:26Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTY3Mg==", "bodyText": "multi local transactions?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546485672", "createdAt": "2020-12-21T02:58:02Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTgzOA==", "bodyText": "can benefit for ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546485838", "createdAt": "2020-12-21T02:58:38Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTk4MA==", "bodyText": "When has network failures?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546485980", "createdAt": "2020-12-21T02:59:13Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTgzOA=="}, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjM0OA==", "bodyText": "Please use BASE Transaction.", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486348", "createdAt": "2020-12-21T03:01:25Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjQ3Ng==", "bodyText": "which benefits for?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486476", "createdAt": "2020-12-21T03:02:07Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjU1Mg==", "bodyText": "The Advantage of the strategy?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486552", "createdAt": "2020-12-21T03:02:37Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjY1OQ==", "bodyText": "be implemented?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486659", "createdAt": "2020-12-21T03:03:17Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Njg0MA==", "bodyText": "the three stage?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486840", "createdAt": "2020-12-21T03:04:00Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Njk4OA==", "bodyText": "whether account A has ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546486988", "createdAt": "2020-12-21T03:04:49Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzI1OQ==", "bodyText": "The basic idea is put ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487259", "createdAt": "2020-12-21T03:06:03Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzM5Ng==", "bodyText": "which may increase?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487396", "createdAt": "2020-12-21T03:06:40Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzI1OQ=="}, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzU3NA==", "bodyText": "can be settled?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487574", "createdAt": "2020-12-21T03:07:25Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzczMA==", "bodyText": "and and cloud native?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487730", "createdAt": "2020-12-21T03:08:19Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Nzg2MA==", "bodyText": "could be regarded?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487860", "createdAt": "2020-12-21T03:08:46Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.\n+\n+<!-- \u9879\u76ee\u5730\u5740\uff1a -->\n+\n+<!-- Sharding-Sphere\u540c\u65f6\u652f\u6301XA\u548c\u67d4\u6027\u4e8b\u52a1\uff0c\u5b83\u5141\u8bb8\u6bcf\u6b21\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u4e8b\u52a1\u7c7b\u578b\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u5bf9\u4e1a\u52a1\u64cd\u4f5c\u5b8c\u5168\u900f\u660e\uff0c\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5f15\u5165\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6210\u672c\u3002 -->\n+\n+Both XA and soft transaction are supported by Sharding-Sphere, and allows to select different transaction type for per request. Distributed transactions are completely transparent to business operations, which greatly reduces the cost of introducing distributed transactions.\n+\n+<!-- #### \u4e8b\u52a1\u6a21\u578b -->\n+\n+### Transaction Model\n+\n+![](https://shardingsphere.apache.org/blog/img/realization7.jpg)\n+\n+<!-- Sharding-Sphere\u4e8b\u52a1\u7ba1\u7406\u5668\u96c6\u6210\u4e86XA\u548c\u67d4\u6027\u4e8b\u52a1\u6a21\u578b\uff1a\n+\n+- \u5bf9\u4e8eXA\u4e8b\u52a1\u800c\u8a00\uff0c\u91c7\u7528SPI\u7684\u65b9\u5f0f\u8ba9\u5f31XA\u3001Atomikos\u3001Narayana\u95f4\u4fdd\u6301\u4e92\u65a5\uff1b\n+\n+- \u5bf9\u4e8e\u67d4\u6027\u4e8b\u52a1\u800c\u8a00\uff0c\u6839\u636e\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4e8b\u52a1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u72ec\u7acb\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668\u90fd\u4f1a\u5b9e\u73b0\u6807\u51c6\u7684ShardingTransaction\u63a5\u53e3\uff0c\u5728TransactionEvent\u5230\u6765\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7684begin\u3001commit\u3001rollback\u64cd\u4f5c\u3002 -->\n+\n+Sharding-Sphere TM integrated XA and soft transaction model:\n+\n+- For XA transaction, using SPI makes weak XA\u3001Atomikos\u3001Narayana are mutually exclusive.\n+\n+<!-- \u4e0b\u9762\u5c06Sharding-Sphere\u5185\u90e8\u5982\u4f55\u7528\u4e8b\u4ef6\u9a71\u52a8\u65b9\u5f0f\uff0c\u5c06\u4e8b\u52a1\u4ece\u5206\u7247\u4e3b\u6d41\u7a0b\u4e2d\u89e3\u8026\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff1a -->\n+The following section will explain how to decouple transaction from main process by event-driven:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization8.jpg)\n+\n+<!-- \u4ece\u56fe\u53ef\u4ee5\u770b\u51fa\u5728Sharding-core\u5728\u8c03\u7528\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u4f1a\u6839\u636eSQL\u7684\u79cd\u7c7b\u4ea7\u751f\u4e8b\u4ef6\u8fdb\u884c\u5206\u53d1\u3002\u4e8b\u52a1\u76d1\u542c\u7ebf\u7a0b\u5728\u6536\u5230\u7b26\u5408\u8981\u6c42\u7684\u4e8b\u4ef6\u540e\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+As can be seen from above figure, Sharding-core will produce and dispatch various events according SQL, and the thread of transaction listener will invoke corresponding transaction processor to handle when event arrives.\n+\n+<!-- #### Sharding-Proxy\u4e8b\u52a1\u5b9e\u73b0 -->\n+\n+### Transaction Implementation of Sharding-Sphere\n+\n+\n+<!-- Sharding-Proxy\u662f\u57fa\u4e8enetty\u5f00\u53d1\u7684\u6570\u636e\u5e93\u4e2d\u95f4\u4ee3\u7406\u5c42\uff0c\u5b9e\u73b0\u4e86\u6807\u51c6\u7684MySQL\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u6570\u636e\u5206\u7247\u7684\u6570\u636e\u5e93\u3002Sharding-Proxy\u5df2\u7ecf\u5b9e\u73b0\u4e86\u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u4e2d\uff0c\u6574\u4e2aProxy\u7684\u7ebf\u7a0b\u6a21\u578b\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u8c03\u6574\uff1a -->\n+\n+Sharding-Proxy is a netty based database middle layer proxy, it implements MySQL protocol, and could be regard as a database with built-in data sharding ability. Sharding-Proxy have implemented XA transaction based on Atomikos. For ensuring all sub transaction in the same thread, the changes of proxy thread model can be seen from the following figure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzkyMg==", "bodyText": "SQL engine will use?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546487922", "createdAt": "2020-12-21T03:09:03Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.\n+\n+<!-- \u9879\u76ee\u5730\u5740\uff1a -->\n+\n+<!-- Sharding-Sphere\u540c\u65f6\u652f\u6301XA\u548c\u67d4\u6027\u4e8b\u52a1\uff0c\u5b83\u5141\u8bb8\u6bcf\u6b21\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u4e8b\u52a1\u7c7b\u578b\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u5bf9\u4e1a\u52a1\u64cd\u4f5c\u5b8c\u5168\u900f\u660e\uff0c\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5f15\u5165\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6210\u672c\u3002 -->\n+\n+Both XA and soft transaction are supported by Sharding-Sphere, and allows to select different transaction type for per request. Distributed transactions are completely transparent to business operations, which greatly reduces the cost of introducing distributed transactions.\n+\n+<!-- #### \u4e8b\u52a1\u6a21\u578b -->\n+\n+### Transaction Model\n+\n+![](https://shardingsphere.apache.org/blog/img/realization7.jpg)\n+\n+<!-- Sharding-Sphere\u4e8b\u52a1\u7ba1\u7406\u5668\u96c6\u6210\u4e86XA\u548c\u67d4\u6027\u4e8b\u52a1\u6a21\u578b\uff1a\n+\n+- \u5bf9\u4e8eXA\u4e8b\u52a1\u800c\u8a00\uff0c\u91c7\u7528SPI\u7684\u65b9\u5f0f\u8ba9\u5f31XA\u3001Atomikos\u3001Narayana\u95f4\u4fdd\u6301\u4e92\u65a5\uff1b\n+\n+- \u5bf9\u4e8e\u67d4\u6027\u4e8b\u52a1\u800c\u8a00\uff0c\u6839\u636e\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4e8b\u52a1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u72ec\u7acb\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668\u90fd\u4f1a\u5b9e\u73b0\u6807\u51c6\u7684ShardingTransaction\u63a5\u53e3\uff0c\u5728TransactionEvent\u5230\u6765\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7684begin\u3001commit\u3001rollback\u64cd\u4f5c\u3002 -->\n+\n+Sharding-Sphere TM integrated XA and soft transaction model:\n+\n+- For XA transaction, using SPI makes weak XA\u3001Atomikos\u3001Narayana are mutually exclusive.\n+\n+<!-- \u4e0b\u9762\u5c06Sharding-Sphere\u5185\u90e8\u5982\u4f55\u7528\u4e8b\u4ef6\u9a71\u52a8\u65b9\u5f0f\uff0c\u5c06\u4e8b\u52a1\u4ece\u5206\u7247\u4e3b\u6d41\u7a0b\u4e2d\u89e3\u8026\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff1a -->\n+The following section will explain how to decouple transaction from main process by event-driven:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization8.jpg)\n+\n+<!-- \u4ece\u56fe\u53ef\u4ee5\u770b\u51fa\u5728Sharding-core\u5728\u8c03\u7528\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u4f1a\u6839\u636eSQL\u7684\u79cd\u7c7b\u4ea7\u751f\u4e8b\u4ef6\u8fdb\u884c\u5206\u53d1\u3002\u4e8b\u52a1\u76d1\u542c\u7ebf\u7a0b\u5728\u6536\u5230\u7b26\u5408\u8981\u6c42\u7684\u4e8b\u4ef6\u540e\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+As can be seen from above figure, Sharding-core will produce and dispatch various events according SQL, and the thread of transaction listener will invoke corresponding transaction processor to handle when event arrives.\n+\n+<!-- #### Sharding-Proxy\u4e8b\u52a1\u5b9e\u73b0 -->\n+\n+### Transaction Implementation of Sharding-Sphere\n+\n+\n+<!-- Sharding-Proxy\u662f\u57fa\u4e8enetty\u5f00\u53d1\u7684\u6570\u636e\u5e93\u4e2d\u95f4\u4ee3\u7406\u5c42\uff0c\u5b9e\u73b0\u4e86\u6807\u51c6\u7684MySQL\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u6570\u636e\u5206\u7247\u7684\u6570\u636e\u5e93\u3002Sharding-Proxy\u5df2\u7ecf\u5b9e\u73b0\u4e86\u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u4e2d\uff0c\u6574\u4e2aProxy\u7684\u7ebf\u7a0b\u6a21\u578b\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u8c03\u6574\uff1a -->\n+\n+Sharding-Proxy is a netty based database middle layer proxy, it implements MySQL protocol, and could be regard as a database with built-in data sharding ability. Sharding-Proxy have implemented XA transaction based on Atomikos. For ensuring all sub transaction in the same thread, the changes of proxy thread model can be seen from the following figure.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization9.jpg)\n+\n+<!-- \u5f53\u5f00\u542f\u4e8b\u52a1\u540e\uff0cProxy\u540e\u7aef\u7684SQL\u547d\u4ee4\u6267\u884c\u5f15\u64ce\u5c06\u91c7\u7528\u4e00\u901a\u9053\u4e00\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff0c\u6b64\u4e8b\u52a1\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u540c\u901a\u9053\u4fdd\u6301\u4e00\u81f4\u3002\u4e8b\u52a1\u5904\u7406\u7684\u5177\u4f53\u8fc7\u7a0b\u4e0eProxy\u5f7b\u5e95\u89e3\u8026\uff0c\u5373Proxy\u5c06\u53d1\u5e03\u4e8b\u52a1\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u7136\u540eSharding-Sphere-TM\u6839\u636e\u4f20\u5165\u7684\u4e8b\u52a1\u6d88\u606f\uff0c\u9009\u62e9\u5177\u4f53\u7684TM\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+When transaction enabled, SQL engine will using Channel-Thread pattern on Proxy backend, and lifecycle of channel and transaction thread keeps same. The process procedure of transaction are totally decoupled with Proxy, namely, the transaction event produced by Proxy will consumed by Sharding-Sphere TM.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 449}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODAyNg==", "bodyText": "procedure of confirm ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546488026", "createdAt": "2020-12-21T03:09:38Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.\n+\n+<!-- \u9879\u76ee\u5730\u5740\uff1a -->\n+\n+<!-- Sharding-Sphere\u540c\u65f6\u652f\u6301XA\u548c\u67d4\u6027\u4e8b\u52a1\uff0c\u5b83\u5141\u8bb8\u6bcf\u6b21\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u4e8b\u52a1\u7c7b\u578b\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u5bf9\u4e1a\u52a1\u64cd\u4f5c\u5b8c\u5168\u900f\u660e\uff0c\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5f15\u5165\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6210\u672c\u3002 -->\n+\n+Both XA and soft transaction are supported by Sharding-Sphere, and allows to select different transaction type for per request. Distributed transactions are completely transparent to business operations, which greatly reduces the cost of introducing distributed transactions.\n+\n+<!-- #### \u4e8b\u52a1\u6a21\u578b -->\n+\n+### Transaction Model\n+\n+![](https://shardingsphere.apache.org/blog/img/realization7.jpg)\n+\n+<!-- Sharding-Sphere\u4e8b\u52a1\u7ba1\u7406\u5668\u96c6\u6210\u4e86XA\u548c\u67d4\u6027\u4e8b\u52a1\u6a21\u578b\uff1a\n+\n+- \u5bf9\u4e8eXA\u4e8b\u52a1\u800c\u8a00\uff0c\u91c7\u7528SPI\u7684\u65b9\u5f0f\u8ba9\u5f31XA\u3001Atomikos\u3001Narayana\u95f4\u4fdd\u6301\u4e92\u65a5\uff1b\n+\n+- \u5bf9\u4e8e\u67d4\u6027\u4e8b\u52a1\u800c\u8a00\uff0c\u6839\u636e\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4e8b\u52a1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u72ec\u7acb\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668\u90fd\u4f1a\u5b9e\u73b0\u6807\u51c6\u7684ShardingTransaction\u63a5\u53e3\uff0c\u5728TransactionEvent\u5230\u6765\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7684begin\u3001commit\u3001rollback\u64cd\u4f5c\u3002 -->\n+\n+Sharding-Sphere TM integrated XA and soft transaction model:\n+\n+- For XA transaction, using SPI makes weak XA\u3001Atomikos\u3001Narayana are mutually exclusive.\n+\n+<!-- \u4e0b\u9762\u5c06Sharding-Sphere\u5185\u90e8\u5982\u4f55\u7528\u4e8b\u4ef6\u9a71\u52a8\u65b9\u5f0f\uff0c\u5c06\u4e8b\u52a1\u4ece\u5206\u7247\u4e3b\u6d41\u7a0b\u4e2d\u89e3\u8026\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff1a -->\n+The following section will explain how to decouple transaction from main process by event-driven:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization8.jpg)\n+\n+<!-- \u4ece\u56fe\u53ef\u4ee5\u770b\u51fa\u5728Sharding-core\u5728\u8c03\u7528\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u4f1a\u6839\u636eSQL\u7684\u79cd\u7c7b\u4ea7\u751f\u4e8b\u4ef6\u8fdb\u884c\u5206\u53d1\u3002\u4e8b\u52a1\u76d1\u542c\u7ebf\u7a0b\u5728\u6536\u5230\u7b26\u5408\u8981\u6c42\u7684\u4e8b\u4ef6\u540e\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+As can be seen from above figure, Sharding-core will produce and dispatch various events according SQL, and the thread of transaction listener will invoke corresponding transaction processor to handle when event arrives.\n+\n+<!-- #### Sharding-Proxy\u4e8b\u52a1\u5b9e\u73b0 -->\n+\n+### Transaction Implementation of Sharding-Sphere\n+\n+\n+<!-- Sharding-Proxy\u662f\u57fa\u4e8enetty\u5f00\u53d1\u7684\u6570\u636e\u5e93\u4e2d\u95f4\u4ee3\u7406\u5c42\uff0c\u5b9e\u73b0\u4e86\u6807\u51c6\u7684MySQL\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u6570\u636e\u5206\u7247\u7684\u6570\u636e\u5e93\u3002Sharding-Proxy\u5df2\u7ecf\u5b9e\u73b0\u4e86\u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u4e2d\uff0c\u6574\u4e2aProxy\u7684\u7ebf\u7a0b\u6a21\u578b\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u8c03\u6574\uff1a -->\n+\n+Sharding-Proxy is a netty based database middle layer proxy, it implements MySQL protocol, and could be regard as a database with built-in data sharding ability. Sharding-Proxy have implemented XA transaction based on Atomikos. For ensuring all sub transaction in the same thread, the changes of proxy thread model can be seen from the following figure.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization9.jpg)\n+\n+<!-- \u5f53\u5f00\u542f\u4e8b\u52a1\u540e\uff0cProxy\u540e\u7aef\u7684SQL\u547d\u4ee4\u6267\u884c\u5f15\u64ce\u5c06\u91c7\u7528\u4e00\u901a\u9053\u4e00\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff0c\u6b64\u4e8b\u52a1\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u540c\u901a\u9053\u4fdd\u6301\u4e00\u81f4\u3002\u4e8b\u52a1\u5904\u7406\u7684\u5177\u4f53\u8fc7\u7a0b\u4e0eProxy\u5f7b\u5e95\u89e3\u8026\uff0c\u5373Proxy\u5c06\u53d1\u5e03\u4e8b\u52a1\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u7136\u540eSharding-Sphere-TM\u6839\u636e\u4f20\u5165\u7684\u4e8b\u52a1\u6d88\u606f\uff0c\u9009\u62e9\u5177\u4f53\u7684TM\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+When transaction enabled, SQL engine will using Channel-Thread pattern on Proxy backend, and lifecycle of channel and transaction thread keeps same. The process procedure of transaction are totally decoupled with Proxy, namely, the transaction event produced by Proxy will consumed by Sharding-Sphere TM.\n+\n+<!-- \u538b\u6d4b\u7ed3\u679c\u8868\u660e\uff1aXA\u4e8b\u52a1\u7684\u63d2\u5165\u548c\u66f4\u65b0\u7684\u6027\u80fd\uff0c\u57fa\u672c\u4e0a\u540c\u8de8\u5e93\u7684\u4e2a\u6570\u5448\u7ebf\u6027\u5173\u7cfb\uff0c\u67e5\u8be2\u7684\u6027\u80fd\u57fa\u672c\u4e0d\u53d7\u5f71\u54cd\uff0c\u5efa\u8bae\u5728\u5e76\u53d1\u91cf\u4e0d\u5927\uff0c\u6bcf\u6b21\u4e8b\u52a1\u6d89\u53ca\u7684\u5e93\u572810\u4e2a\u4ee5\u5185\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528XA\u3002 -->\n+Pressure test results show that insert and update performance of XA transaction is linear with amount of databases, and performance of query don't have obvious change.\n+so XA could be used in scenario with low concurrency and databases are not more than 10 in a transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization10.jpg)\n+\n+<!-- Atomikos\u4e8b\u52a1\u7ba1\u7406\u5668\u539f\u7406\u5206\u6790 -->\n+\n+Principle Analysis of Atomikos Transaction Manager\n+\n+![](https://shardingsphere.apache.org/blog/img/realization11.jpg)\n+\n+<!-- Atomikos\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u53ef\u4ee5\u5185\u5d4c\u5230\u4e1a\u52a1\u8fdb\u7a0b\u4e2d\uff0c\u5f53\u5e94\u7528\u8c03\u7528TransactionManager.begin\u65f6\uff0c\u5c06\u4f1a\u521b\u5efa\u672c\u6b21XA\u4e8b\u52a1\uff0c\u5e76\u4e14\u4e0e\u5f53\u524d\u7ebf\u7a0b\u5173\u8054\u3002\u540c\u65f6Atomikos\u4e5f\u5bf9DataSource\u4e2d\u7684connection\u505a\u4e86\u4e8c\u6b21\u5c01\u88c5\uff0c\u4ee3\u7406connection\u4e2d\u542b\u6709\u672c\u6b21\u4e8b\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u62e6\u622a\u4e86connection\u7684JDBC\u64cd\u4f5c\u3002 -->\n+\n+Transaction manager of Atomikos can imbeded into business process, a XA transaction will be created and binds with current thread when application calls TransactionManager.begin method. Connection of dataSource was proxied by Atomikos, so JDBC manipulation and transaction info of the connection will be intercepted by Atomikos.\n+\n+<!-- \u5728createStatement\u65f6\uff0c\u8c03\u7528XAResource.start\u8fdb\u884c\u8d44\u6e90\u6ce8\u518c\uff1b\u5728close\u65f6\uff0c\u8c03\u7528XAResource.end\u8ba9XA\u4e8b\u52a1\u5904\u4e8eidle\u53ef\u63d0\u4ea4\u72b6\u6001\uff1b\u5728commit\u6216rollback\u65f6\uff0c\u4f9d\u6b21\u8c03\u7528prepare\u548ccommit\u8fdb\u884c\u4e8c\u9636\u6bb5\u63d0\u4ea4\u3002 -->\n+\n+XAResource.start method will be executed when createStatement; the close method will call XAResource.end that makes XA transaction to be idle state; Calling prepare and commit in turn for two-phase commit when commit or rollback.\n+\n+<!-- **Sharding-Sphere\u7684Saga\u4e8b\u52a1\u5b9e\u73b0** -->\n+\n+**Saga Transaction Implementation of Sharding-Sphere**\n+\n+<!-- Sharding-Sphere\u901a\u8fc7\u4e0eApache Service Comb\u7684\u5408\u4f5c\uff0c\u5c06\u91c7\u7528Service Comb\u7684Saga\u4e8b\u52a1\u5f15\u64ce\u4f5c\u4e3a\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5b9e\u73b0\u3002 -->\n+\n+Cooperate with Apache Service Comb, Sharding-Sphere will use Saga engine of Service Comb to implement the distributed transaction.\n+\n+<!-- Apache Service Comb\u662f\u534e\u4e3a\u5f00\u6e90\u7684\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5176\u4e2d\u5fae\u670d\u52a1\u4e8b\u52a1\u5904\u7406\u6846\u67b6\u5206\u4e3a\u96c6\u4e2d\u5f0f\u548c\u5206\u5e03\u5f0f\u534f\u8c03\u5668\u3002\u672a\u6765\u4f1a\u5728Sharding-Sphere\u5185\u90e8\u96c6\u6210Saga\u96c6\u4e2d\u5f0f\u534f\u8c03\u5668\uff0c\u652f\u6301\u540c\u4e00\u7ebf\u7a0b\u5185\u4e0d\u540c\u670d\u52a1\uff08\u672c\u5730\uff09\u95f4\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002 -->\n+\n+[Apache Service Comb](https://github.com/apache/incubator-servicecomb-saga) is an open source micro-service framework initiated by HuaWei, the distributed transaction framework of micro-service can be divided into centralized and distributed coordinators.\n+Sharding-Sphere will integrate centralized coordinator of Saga, and support distributed transaction for  services in same thread in the future.\n+\n+<!-- Service Comb \u96c6\u4e2d\u5f0f\u4e8b\u52a1\u534f\u8c03\u5668 -->\n+\n+Centralized Transaction Coordinator of Service Comb\n+\n+\n+![](https://shardingsphere.apache.org/blog/img/realization12.jpg)\n+\n+<!-- \u96c6\u4e2d\u5f0f\u7684\u534f\u8c03\u5668\uff0c\u5305\u542b\u4e86Saga\u8c03\u7528\u8bf7\u6c42\u63a5\u6536\u3001\u5206\u6790\u3001\u6267\u884c\u4ee5\u53ca\u7ed3\u679c\u67e5\u8be2\u7684\u5185\u5bb9\u3002\u4efb\u52a1\u4ee3\u7406\u6a21\u5757\u9700\u8981\u9884\u5148\u77e5\u9053Saga\u4e8b\u52a1\u8c03\u7528\u5173\u7cfb\u56fe\uff0c\u6267\u884c\u6a21\u5757\u6839\u636e\u751f\u6210\u7684\u8c03\u7528\u56fe\u4ea7\u751f\u8c03\u7528\u4efb\u52a1\uff0c\u8c03\u7528\u76f8\u5173\u5fae\u670d\u52a1\u670d\u52a1\u63a5\u53e3\u3002\u5982\u679c\u670d\u52a1\u8c03\u7528\u6267\u884c\u51fa\u9519\uff0c\u4f1a\u8c03\u7528\u670d\u52a1\u7684\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u56de\u6eda\u3002 -->\n+\n+Centralized transaction coordinator including receiving, analysis, execution and result query for Saga request. Task agent module need to know predefined invoke relation graph of Sega, and execution module will generate invoke task according to invocation graph, and invoke micro-service interface. the compensation method will be invoke when service happens failure.\n+\n+<!-- Saga\u6267\u884c\u6a21\u5757\u901a\u8fc7\u5206\u6790\u8bf7\u6c42\u7684JSON\u6570\u636e\uff0c\u6765\u6784\u5efa\u4e00\u4e2a\u8c03\u7528\u5173\u7cfb\u56fe\u3002Sharding-Sphere\u662f\u901a\u8fc7JSON\u63cf\u8ff0Saga\u4e8b\u52a1\u4e32\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u6216\u8005\u5e76\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u3002\u5173\u7cfb\u8c03\u7528\u56fe\u88abSaga\u5b9e\u73b0\u4e2d\u7684\u4efb\u52a1\u8fd0\u884c\u6a21\u5757\u5206\u89e3\u6210\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u6267\u884c\u4efb\u52a1\uff0c\u6267\u884c\u4efb\u52a1\u7531\u4efb\u52a1\u6d88\u8d39\u8005\u83b7\u53d6\u5e76\u751f\u6210\u76f8\u5173\u7684\u8c03\u7528 \uff08\u540c\u65f6\u652f\u6301\u4e32\u884c\u548c\u5e76\u884c\u8c03\u7528\uff09\u3002Saga\u4efb\u52a1\u4f1a\u6839\u636e\u6267\u884c\u7684\u60c5\u51b5\u5411Saga Log\u4e2d\u8bb0\u5f55\u5bf9\u5e94\u7684Saga\u4e8b\u52a1\u7684\u5173\u952e\u4e8b\u4ef6\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u67e5\u770b\u5668\u67e5\u67e5\u8be2\u6267\u884c\u60c5\u51b5\u3002 -->\n+\n+Saga execution module builds an invocation graph by analyzing request JSON data. Sequentially or concurrently invocation of sub transaction of Saga was described by JSON in Sharding-Sphere.  Invocation relation graph was transferred into multiple execution tasks by execution module of Saga, the execution task consumer will generate corresponding invocation, both sequential and concurrent invocation are supported. Saga task will record key transaction event into logs according execution state, which can be viewed by event query engine.\n+\n+<!-- Sharding-Sphere\u5185\u5d4cSaga\u4e8b\u52a1\u7ba1\u7406\u5668 -->\n+\n+Imbeded Saga Transaction Manager of Sharding-Sphere\n+\n+![](https://shardingsphere.apache.org/blog/img/realization13.jpg)\n+\n+<!-- Saga\u4ee5jar\u5305\u7684\u5f62\u5f0f\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u6cbb\u7406\u80fd\u529b\u3002 -->\n+Saga provides distributed transaction service governance in form of jar.\n+\n+<!-- \u5bf9Sharding-Sphere\u800c\u8a00\uff0cconfirm\u548ccancel\u8fc7\u7a0b\u4ee3\u8868\u4e86\u5b50\u4e8b\u52a1\u4e2d\u7684\u6b63\u5e38\u6267\u884cSQL\u548c\u9006\u5411\u6267\u884cSQL\uff0c\uff08\u672a\u6765Sharding-Sphere\u5c06\u63d0\u4f9b\u81ea\u52a8\u751f\u6210\u9006\u5411SQL\u7684\u80fd\u529b\uff09\u3002\u5f53\u542f\u7528Saga\u67d4\u6027\u4e8b\u52a1\u540e\uff0c\u8def\u7531\u5b8c\u6210\u4e4b\u540e\u7684\u7269\u7406\u6570\u636e\u6e90\u5c06\u5f00\u542f\u672c\u5730\u81ea\u52a8\u63d0\u4ea4\u4e8b\u52a1\uff0c\u6bcf\u6b21confirm\u548ccancel\u90fd\u4f1a\u76f4\u63a5\u63d0\u4ea4\u3002 -->\n+\n+For Sharding-Sphere, procedure of confirm and cancel represent normal and backward execution SQL of sub-transaction. Automation of reverse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 510}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODE3MQ==", "bodyText": "SAGA don't support I of ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546488171", "createdAt": "2020-12-21T03:10:19Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.\n+\n+<!-- \u9879\u76ee\u5730\u5740\uff1a -->\n+\n+<!-- Sharding-Sphere\u540c\u65f6\u652f\u6301XA\u548c\u67d4\u6027\u4e8b\u52a1\uff0c\u5b83\u5141\u8bb8\u6bcf\u6b21\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u4e8b\u52a1\u7c7b\u578b\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u5bf9\u4e1a\u52a1\u64cd\u4f5c\u5b8c\u5168\u900f\u660e\uff0c\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5f15\u5165\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6210\u672c\u3002 -->\n+\n+Both XA and soft transaction are supported by Sharding-Sphere, and allows to select different transaction type for per request. Distributed transactions are completely transparent to business operations, which greatly reduces the cost of introducing distributed transactions.\n+\n+<!-- #### \u4e8b\u52a1\u6a21\u578b -->\n+\n+### Transaction Model\n+\n+![](https://shardingsphere.apache.org/blog/img/realization7.jpg)\n+\n+<!-- Sharding-Sphere\u4e8b\u52a1\u7ba1\u7406\u5668\u96c6\u6210\u4e86XA\u548c\u67d4\u6027\u4e8b\u52a1\u6a21\u578b\uff1a\n+\n+- \u5bf9\u4e8eXA\u4e8b\u52a1\u800c\u8a00\uff0c\u91c7\u7528SPI\u7684\u65b9\u5f0f\u8ba9\u5f31XA\u3001Atomikos\u3001Narayana\u95f4\u4fdd\u6301\u4e92\u65a5\uff1b\n+\n+- \u5bf9\u4e8e\u67d4\u6027\u4e8b\u52a1\u800c\u8a00\uff0c\u6839\u636e\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4e8b\u52a1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u72ec\u7acb\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668\u90fd\u4f1a\u5b9e\u73b0\u6807\u51c6\u7684ShardingTransaction\u63a5\u53e3\uff0c\u5728TransactionEvent\u5230\u6765\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7684begin\u3001commit\u3001rollback\u64cd\u4f5c\u3002 -->\n+\n+Sharding-Sphere TM integrated XA and soft transaction model:\n+\n+- For XA transaction, using SPI makes weak XA\u3001Atomikos\u3001Narayana are mutually exclusive.\n+\n+<!-- \u4e0b\u9762\u5c06Sharding-Sphere\u5185\u90e8\u5982\u4f55\u7528\u4e8b\u4ef6\u9a71\u52a8\u65b9\u5f0f\uff0c\u5c06\u4e8b\u52a1\u4ece\u5206\u7247\u4e3b\u6d41\u7a0b\u4e2d\u89e3\u8026\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff1a -->\n+The following section will explain how to decouple transaction from main process by event-driven:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization8.jpg)\n+\n+<!-- \u4ece\u56fe\u53ef\u4ee5\u770b\u51fa\u5728Sharding-core\u5728\u8c03\u7528\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u4f1a\u6839\u636eSQL\u7684\u79cd\u7c7b\u4ea7\u751f\u4e8b\u4ef6\u8fdb\u884c\u5206\u53d1\u3002\u4e8b\u52a1\u76d1\u542c\u7ebf\u7a0b\u5728\u6536\u5230\u7b26\u5408\u8981\u6c42\u7684\u4e8b\u4ef6\u540e\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+As can be seen from above figure, Sharding-core will produce and dispatch various events according SQL, and the thread of transaction listener will invoke corresponding transaction processor to handle when event arrives.\n+\n+<!-- #### Sharding-Proxy\u4e8b\u52a1\u5b9e\u73b0 -->\n+\n+### Transaction Implementation of Sharding-Sphere\n+\n+\n+<!-- Sharding-Proxy\u662f\u57fa\u4e8enetty\u5f00\u53d1\u7684\u6570\u636e\u5e93\u4e2d\u95f4\u4ee3\u7406\u5c42\uff0c\u5b9e\u73b0\u4e86\u6807\u51c6\u7684MySQL\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u6570\u636e\u5206\u7247\u7684\u6570\u636e\u5e93\u3002Sharding-Proxy\u5df2\u7ecf\u5b9e\u73b0\u4e86\u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u4e2d\uff0c\u6574\u4e2aProxy\u7684\u7ebf\u7a0b\u6a21\u578b\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u8c03\u6574\uff1a -->\n+\n+Sharding-Proxy is a netty based database middle layer proxy, it implements MySQL protocol, and could be regard as a database with built-in data sharding ability. Sharding-Proxy have implemented XA transaction based on Atomikos. For ensuring all sub transaction in the same thread, the changes of proxy thread model can be seen from the following figure.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization9.jpg)\n+\n+<!-- \u5f53\u5f00\u542f\u4e8b\u52a1\u540e\uff0cProxy\u540e\u7aef\u7684SQL\u547d\u4ee4\u6267\u884c\u5f15\u64ce\u5c06\u91c7\u7528\u4e00\u901a\u9053\u4e00\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff0c\u6b64\u4e8b\u52a1\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u540c\u901a\u9053\u4fdd\u6301\u4e00\u81f4\u3002\u4e8b\u52a1\u5904\u7406\u7684\u5177\u4f53\u8fc7\u7a0b\u4e0eProxy\u5f7b\u5e95\u89e3\u8026\uff0c\u5373Proxy\u5c06\u53d1\u5e03\u4e8b\u52a1\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u7136\u540eSharding-Sphere-TM\u6839\u636e\u4f20\u5165\u7684\u4e8b\u52a1\u6d88\u606f\uff0c\u9009\u62e9\u5177\u4f53\u7684TM\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+When transaction enabled, SQL engine will using Channel-Thread pattern on Proxy backend, and lifecycle of channel and transaction thread keeps same. The process procedure of transaction are totally decoupled with Proxy, namely, the transaction event produced by Proxy will consumed by Sharding-Sphere TM.\n+\n+<!-- \u538b\u6d4b\u7ed3\u679c\u8868\u660e\uff1aXA\u4e8b\u52a1\u7684\u63d2\u5165\u548c\u66f4\u65b0\u7684\u6027\u80fd\uff0c\u57fa\u672c\u4e0a\u540c\u8de8\u5e93\u7684\u4e2a\u6570\u5448\u7ebf\u6027\u5173\u7cfb\uff0c\u67e5\u8be2\u7684\u6027\u80fd\u57fa\u672c\u4e0d\u53d7\u5f71\u54cd\uff0c\u5efa\u8bae\u5728\u5e76\u53d1\u91cf\u4e0d\u5927\uff0c\u6bcf\u6b21\u4e8b\u52a1\u6d89\u53ca\u7684\u5e93\u572810\u4e2a\u4ee5\u5185\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528XA\u3002 -->\n+Pressure test results show that insert and update performance of XA transaction is linear with amount of databases, and performance of query don't have obvious change.\n+so XA could be used in scenario with low concurrency and databases are not more than 10 in a transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization10.jpg)\n+\n+<!-- Atomikos\u4e8b\u52a1\u7ba1\u7406\u5668\u539f\u7406\u5206\u6790 -->\n+\n+Principle Analysis of Atomikos Transaction Manager\n+\n+![](https://shardingsphere.apache.org/blog/img/realization11.jpg)\n+\n+<!-- Atomikos\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u53ef\u4ee5\u5185\u5d4c\u5230\u4e1a\u52a1\u8fdb\u7a0b\u4e2d\uff0c\u5f53\u5e94\u7528\u8c03\u7528TransactionManager.begin\u65f6\uff0c\u5c06\u4f1a\u521b\u5efa\u672c\u6b21XA\u4e8b\u52a1\uff0c\u5e76\u4e14\u4e0e\u5f53\u524d\u7ebf\u7a0b\u5173\u8054\u3002\u540c\u65f6Atomikos\u4e5f\u5bf9DataSource\u4e2d\u7684connection\u505a\u4e86\u4e8c\u6b21\u5c01\u88c5\uff0c\u4ee3\u7406connection\u4e2d\u542b\u6709\u672c\u6b21\u4e8b\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u62e6\u622a\u4e86connection\u7684JDBC\u64cd\u4f5c\u3002 -->\n+\n+Transaction manager of Atomikos can imbeded into business process, a XA transaction will be created and binds with current thread when application calls TransactionManager.begin method. Connection of dataSource was proxied by Atomikos, so JDBC manipulation and transaction info of the connection will be intercepted by Atomikos.\n+\n+<!-- \u5728createStatement\u65f6\uff0c\u8c03\u7528XAResource.start\u8fdb\u884c\u8d44\u6e90\u6ce8\u518c\uff1b\u5728close\u65f6\uff0c\u8c03\u7528XAResource.end\u8ba9XA\u4e8b\u52a1\u5904\u4e8eidle\u53ef\u63d0\u4ea4\u72b6\u6001\uff1b\u5728commit\u6216rollback\u65f6\uff0c\u4f9d\u6b21\u8c03\u7528prepare\u548ccommit\u8fdb\u884c\u4e8c\u9636\u6bb5\u63d0\u4ea4\u3002 -->\n+\n+XAResource.start method will be executed when createStatement; the close method will call XAResource.end that makes XA transaction to be idle state; Calling prepare and commit in turn for two-phase commit when commit or rollback.\n+\n+<!-- **Sharding-Sphere\u7684Saga\u4e8b\u52a1\u5b9e\u73b0** -->\n+\n+**Saga Transaction Implementation of Sharding-Sphere**\n+\n+<!-- Sharding-Sphere\u901a\u8fc7\u4e0eApache Service Comb\u7684\u5408\u4f5c\uff0c\u5c06\u91c7\u7528Service Comb\u7684Saga\u4e8b\u52a1\u5f15\u64ce\u4f5c\u4e3a\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5b9e\u73b0\u3002 -->\n+\n+Cooperate with Apache Service Comb, Sharding-Sphere will use Saga engine of Service Comb to implement the distributed transaction.\n+\n+<!-- Apache Service Comb\u662f\u534e\u4e3a\u5f00\u6e90\u7684\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5176\u4e2d\u5fae\u670d\u52a1\u4e8b\u52a1\u5904\u7406\u6846\u67b6\u5206\u4e3a\u96c6\u4e2d\u5f0f\u548c\u5206\u5e03\u5f0f\u534f\u8c03\u5668\u3002\u672a\u6765\u4f1a\u5728Sharding-Sphere\u5185\u90e8\u96c6\u6210Saga\u96c6\u4e2d\u5f0f\u534f\u8c03\u5668\uff0c\u652f\u6301\u540c\u4e00\u7ebf\u7a0b\u5185\u4e0d\u540c\u670d\u52a1\uff08\u672c\u5730\uff09\u95f4\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002 -->\n+\n+[Apache Service Comb](https://github.com/apache/incubator-servicecomb-saga) is an open source micro-service framework initiated by HuaWei, the distributed transaction framework of micro-service can be divided into centralized and distributed coordinators.\n+Sharding-Sphere will integrate centralized coordinator of Saga, and support distributed transaction for  services in same thread in the future.\n+\n+<!-- Service Comb \u96c6\u4e2d\u5f0f\u4e8b\u52a1\u534f\u8c03\u5668 -->\n+\n+Centralized Transaction Coordinator of Service Comb\n+\n+\n+![](https://shardingsphere.apache.org/blog/img/realization12.jpg)\n+\n+<!-- \u96c6\u4e2d\u5f0f\u7684\u534f\u8c03\u5668\uff0c\u5305\u542b\u4e86Saga\u8c03\u7528\u8bf7\u6c42\u63a5\u6536\u3001\u5206\u6790\u3001\u6267\u884c\u4ee5\u53ca\u7ed3\u679c\u67e5\u8be2\u7684\u5185\u5bb9\u3002\u4efb\u52a1\u4ee3\u7406\u6a21\u5757\u9700\u8981\u9884\u5148\u77e5\u9053Saga\u4e8b\u52a1\u8c03\u7528\u5173\u7cfb\u56fe\uff0c\u6267\u884c\u6a21\u5757\u6839\u636e\u751f\u6210\u7684\u8c03\u7528\u56fe\u4ea7\u751f\u8c03\u7528\u4efb\u52a1\uff0c\u8c03\u7528\u76f8\u5173\u5fae\u670d\u52a1\u670d\u52a1\u63a5\u53e3\u3002\u5982\u679c\u670d\u52a1\u8c03\u7528\u6267\u884c\u51fa\u9519\uff0c\u4f1a\u8c03\u7528\u670d\u52a1\u7684\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u56de\u6eda\u3002 -->\n+\n+Centralized transaction coordinator including receiving, analysis, execution and result query for Saga request. Task agent module need to know predefined invoke relation graph of Sega, and execution module will generate invoke task according to invocation graph, and invoke micro-service interface. the compensation method will be invoke when service happens failure.\n+\n+<!-- Saga\u6267\u884c\u6a21\u5757\u901a\u8fc7\u5206\u6790\u8bf7\u6c42\u7684JSON\u6570\u636e\uff0c\u6765\u6784\u5efa\u4e00\u4e2a\u8c03\u7528\u5173\u7cfb\u56fe\u3002Sharding-Sphere\u662f\u901a\u8fc7JSON\u63cf\u8ff0Saga\u4e8b\u52a1\u4e32\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u6216\u8005\u5e76\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u3002\u5173\u7cfb\u8c03\u7528\u56fe\u88abSaga\u5b9e\u73b0\u4e2d\u7684\u4efb\u52a1\u8fd0\u884c\u6a21\u5757\u5206\u89e3\u6210\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u6267\u884c\u4efb\u52a1\uff0c\u6267\u884c\u4efb\u52a1\u7531\u4efb\u52a1\u6d88\u8d39\u8005\u83b7\u53d6\u5e76\u751f\u6210\u76f8\u5173\u7684\u8c03\u7528 \uff08\u540c\u65f6\u652f\u6301\u4e32\u884c\u548c\u5e76\u884c\u8c03\u7528\uff09\u3002Saga\u4efb\u52a1\u4f1a\u6839\u636e\u6267\u884c\u7684\u60c5\u51b5\u5411Saga Log\u4e2d\u8bb0\u5f55\u5bf9\u5e94\u7684Saga\u4e8b\u52a1\u7684\u5173\u952e\u4e8b\u4ef6\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u67e5\u770b\u5668\u67e5\u67e5\u8be2\u6267\u884c\u60c5\u51b5\u3002 -->\n+\n+Saga execution module builds an invocation graph by analyzing request JSON data. Sequentially or concurrently invocation of sub transaction of Saga was described by JSON in Sharding-Sphere.  Invocation relation graph was transferred into multiple execution tasks by execution module of Saga, the execution task consumer will generate corresponding invocation, both sequential and concurrent invocation are supported. Saga task will record key transaction event into logs according execution state, which can be viewed by event query engine.\n+\n+<!-- Sharding-Sphere\u5185\u5d4cSaga\u4e8b\u52a1\u7ba1\u7406\u5668 -->\n+\n+Imbeded Saga Transaction Manager of Sharding-Sphere\n+\n+![](https://shardingsphere.apache.org/blog/img/realization13.jpg)\n+\n+<!-- Saga\u4ee5jar\u5305\u7684\u5f62\u5f0f\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u6cbb\u7406\u80fd\u529b\u3002 -->\n+Saga provides distributed transaction service governance in form of jar.\n+\n+<!-- \u5bf9Sharding-Sphere\u800c\u8a00\uff0cconfirm\u548ccancel\u8fc7\u7a0b\u4ee3\u8868\u4e86\u5b50\u4e8b\u52a1\u4e2d\u7684\u6b63\u5e38\u6267\u884cSQL\u548c\u9006\u5411\u6267\u884cSQL\uff0c\uff08\u672a\u6765Sharding-Sphere\u5c06\u63d0\u4f9b\u81ea\u52a8\u751f\u6210\u9006\u5411SQL\u7684\u80fd\u529b\uff09\u3002\u5f53\u542f\u7528Saga\u67d4\u6027\u4e8b\u52a1\u540e\uff0c\u8def\u7531\u5b8c\u6210\u4e4b\u540e\u7684\u7269\u7406\u6570\u636e\u6e90\u5c06\u5f00\u542f\u672c\u5730\u81ea\u52a8\u63d0\u4ea4\u4e8b\u52a1\uff0c\u6bcf\u6b21confirm\u548ccancel\u90fd\u4f1a\u76f4\u63a5\u63d0\u4ea4\u3002 -->\n+\n+For Sharding-Sphere, procedure of confirm and cancel represent normal and backward execution SQL of sub-transaction. Automation of reverse\n+SQL generation is in the plan. After enabling Saga soft transaction, routed physical datasource will enable transaction auto commit, every confirm and cancel will submit directly.\n+\n+<!-- \u5728Sharding-Sphere\u5185\u90e8\uff0c\u89e6\u53d1SQL\u6267\u884c\u5f15\u64ce\u540e\uff0c\u5c06\u4f1a\u4ea7\u751fSaga\u4e8b\u52a1\u4e8b\u4ef6\uff0c\u8fd9\u65f6Sharding-Sphere\u4e8b\u52a1\u76d1\u542c\u5668\u4f1a\u6ce8\u518c\u672c\u6b21\u5b50\u4e8b\u52a1\u7684confirm\u548ccancel\u81f3Saga\u4e8b\u52a1\u7ba1\u7406\u5668\u7684\u961f\u5217\u4e2d\uff1b\u5728\u4e1a\u52a1\u7ebf\u7a0b\u89e6\u53d1commit\u548crollback\u540e\uff0cSaga\u4e8b\u52a1\u7ba1\u7406\u5668\u518d\u6839\u636e\u5b50\u4e8b\u52a1\u6267\u884c\u7684\u7ed3\u679c\uff0c\u5224\u65ad\u8fdb\u884cconfirm\u91cd\u8bd5\u6216\u8005cancel\u6d41\u7a0b\u3002 -->\n+\n+Inside of Sharding-Sphere, multi Saga transaction events will be generate when SQL engine was triggered, and confirm and cancel of current sub transaction will be registered into queue of Saga transaction manager; Saga transaction manager will execute confirm or cancel procedure according sub transaction execution result when commit or rollback was triggered.\n+\n+<!-- ### \u672a\u6765\u8ba1\u5212 -->\n+### Plans in the future\n+\n+<!-- \u672a\u6765Sharding-Sphere\u5c06\u6309\u7167\u6587\u4e2d\u4ecb\u7ecd\u7684Sharding-Sphere-TM\u9010\u6b65\u5b8c\u5584\u6574\u4e2a\u4e8b\u52a1\u6846\u67b6\uff1a -->\n+Evolution of Sharding-Sphere-TM framework will following the introduction on above, and main parts are as follow:\n+\n+<!-- *   \u5f31XA\u4e8b\u52a1 \uff08\u5df2\u53d1\u5e03\uff09\n+\n+*   \u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff08\u8fd1\u671f\u53d1\u5e03\uff09\n+\n+*   \u57fa\u4e8eNarayana\u7684XA\u4e8b\u52a1\uff08\u89c4\u5212\u4e2d\uff09\n+\n+*   BED\u67d4\u6027\u4e8b\u52a1\uff08\u5df2\u53d1\u5e03\uff09\n+\n+*   SAGA\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+*   TCC\uff08\u89c4\u5212\u4e2d\uff09 -->\n+\n+* Weak XA transaction (released)\n+* Atomikos based XA transaction(to be released)\n+* BED soft transaction(released)\n+* SAGA(working on)\n+* TCC(in planing)\n+\n+\n+<!-- \u5982\u679c\u524d\u9762\u7684\u5206\u4eab\u592a\u8fc7\u5197\u957f\uff0c\u90a3\u4e48\u5343\u8a00\u4e07\u8bed\u6c47\u805a\u6210\u4e00\u5f20\u8868\u683c\uff0c\u6b22\u8fce\u9605\u8bfb\u3002 -->\n+\n+If the previous sharing is too lengthy, then a thousand words are gathered into a table, welcome to read.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization14.jpg)\n+\n+<!-- \u672a\u6765\uff0c\u6211\u4eec\u5c06\u4e0d\u65ad\u4f18\u5316\u5f53\u524d\u7684\u7279\u6027\uff0c\u9646\u7eed\u63a8\u51fa\u5927\u5bb6\u5173\u6ce8\u7684\u67d4\u6027\u4e8b\u52a1\u3001\u6570\u636e\u6cbb\u7406\u7b49\u66f4\u591a\u65b0\u7279\u6027\u3002\u5982\u679c\u6709\u4ec0\u4e48\u60f3\u6cd5\u3001\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u4e5f\u6b22\u8fce\u7559\u8a00\u4ea4\u6d41\uff0c\u66f4\u6b22\u8fce\u52a0\u5165\u5230Sharding-Sphere\u7684\u5f00\u6e90\u9879\u76ee\u4e2d\uff1a -->\n+\n+In the future, feature will be optimized continuously, more new features such as soft transactions and data governance that everyone concerns about will be launched one after another. Any thoughts, advices, suggestions, comments are appreciated, and welcome to join the open source community of Sharding-Sphere.\n+\n+*   https://github.com/sharding-sphere/sharding-sphere/\n+\n+*   https://gitee.com/sharding-sphere/sharding-sphere/\n+\n+### Q&A\n+\n+<!-- **Q1**\uff1a\u57fa\u4e8eXA\u7684\u4e8b\u7269\uff0c\u53ef\u4ee5\u5e94\u7528\u5230\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u5417\uff1f -->\n+**Q1**: Does XA based transaction can be used int micro-service architecture ?\n+\n+<!-- **A1**\uff1a\u76ee\u524d\u6211\u4eec\u662f\u628a\u4e8b\u52a1\u7ba1\u7406\u5668\u5185\u5d4c\u5230JVM\u8fdb\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u5e76\u53d1\u91cf\u5c0f\uff0c\u77ed\u4e8b\u52a1\u7684\u4e1a\u52a1\uff0c\u53ef\u4ee5\u7528XA\u3002 -->\n+\n+**A1**: Currently, transaction manager has been imbedded into JVM process, it's ok to use for low concurrency, shot transaction.\n+\n+<!-- **Q2**\uff1a\u5bf9\u4e8e\u5404\u4e2a\u4e8b\u52a1\u6846\u67b6\u5f00\u53d1\u8ba1\u5212\u7684\u5148\u540e\u987a\u5e8f\u662f\u57fa\u672c\u4ec0\u4e48\u6765\u786e\u5b9a\u7684\u5462\uff1f -->\n+ **Q2**: For the order of transaction frameworks development, why ?\n+<!-- **A2**\uff1a\u57fa\u4e8e\u96be\u6613\u7a0b\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u628aTCC\u653e\u5230\u4e86\u6700\u540e\u3002 -->\n+**A2**:  Based on the degree of difficulty, so we put TCC at the end.\n+\n+\n+<!-- **Q3**\uff1a\u652f\u6301\u591a\u8bed\u8a00\u5417\uff1f\u6bd4\u5982golang\uff1f -->\n+**Q3**: Does Sharding-Sphere support multi-language ? such as Golang?\n+<!-- **A3**\uff1a\u591a\u8bed\u8a00\u53ef\u4ee5\u7528Sharding-Proxy\u3002 -->\n+**A3**: For non java application, Sharding-Proxy are available.\n+\n+<!--\n+**Q4**\uff1a\u8fd9\u6b21\u662fProxy\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u5427\uff1f\u6211\u8bb0\u5f97\u4e4b\u524dSharding-JDBC\u6709\u5b9e\u73b0\u3002 -->\n+**Q4**: In this time, is Proxy implements distributed transaction ? But I remember Sharding-JDBC has implemented it ago.\n+\n+<!-- **A4**\uff1a\u8fd9\u6b21\u662f\u6574\u4e2aSS\u7684\u4e8b\u52a1\u5b9e\u73b0\uff0c\u5305\u542bSharding-JDBC\u548cProxy\uff0c\u76ee\u524dSJ\u7684\u5b9e\u73b0\u662f\u5f31XA\u548cBED\uff08\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff09\uff0c\u4ee5\u540e\u4f1a\u589e\u52a0SAGA\u548cTCC\u3002 -->\n+**A4**: Transaction implementation of SS including Sharding-JDBC and Proxy, SJ has implemented weak XA and BED, SAGA and TCC will be introduced in the future.\n+\n+\n+<!-- **Q5**\uff1a\u5982\u679c\u6211\u53ea\u60f3\u7528SS\u91cc\u7684\u4e8b\u52a1\u6a21\u5757\uff0c\u53ef\u4ee5\u5417\uff1f -->\n+**Q5**: If I only want to use transaction module of SS, is it possible?\n+\n+<!-- **A5**\uff1aSS\u662f\u4ee5\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\u67b6\u6784\uff0c\u672a\u6765\u4e8b\u52a1\u6a21\u5757\u53ea\u8d1f\u8d23\u4e8b\u52a1\u76f8\u5173\u7684\u5904\u7406\u3002 -->\n+**A5**: Architecture of SS is event-driven, transaction module will only responsible for transaction in the future.\n+\n+\n+<!-- **Q6**\uff1aSAGA\u4e0d\u652f\u6301ACID\u4e2d\u7684I\uff0c\u54b1\u4eec\u8fd9\u8fb9\u600e\u4e48\u8003\u8651\u7684\u5462\uff1f -->\n+**Q6**: SAGA don't support I of ACID, how do you think of this ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 592}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODI2NQ==", "bodyText": "according ?", "url": "https://github.com/apache/shardingsphere/pull/8688#discussion_r546488265", "createdAt": "2020-12-21T03:11:01Z", "author": {"login": "tristaZero"}, "path": "docs/blog/content/material/realization.en.md", "diffHunk": "@@ -4,4 +4,605 @@ weight = 12\n chapter = true\n +++\n \n-## TODO\n+## Distributed Transaction Implementation on Sharding-Sphere\n+\n+<!-- ## \u5206\u5e03\u5f0f\u4e8b\u52a1\u5728Sharding-Sphere\u4e2d\u7684\u5b9e\u73b0 -->\n+### Lecturer\n+<!-- ### \u8bb2\u5e08\u7b80\u4ecb -->\n+\n+<!-- **\u8d75\u4fca** -->\n+**Jun Zhao**\n+\n+Work at JD Finance\n+<!-- \u4eac\u4e1c\u91d1\u878d -->\n+Senior Java Development Engineer\n+<!-- \u9ad8\u7ea7Java\u5f00\u53d1\u5de5\u7a0b\u5e08 -->\n+\n+<!-- - \u591a\u5e74\u4e92\u8054\u7f51\u5f00\u53d1\u7ecf\u9a8c\uff0c\u70ed\u7231\u5f00\u6e90\u6280\u672f\uff0c\u5bf9\u5206\u5e03\u5f0f\u5b58\u50a8\u6709\u6d53\u539a\u7684\u5174\u8da3\u3002\u719f\u6089ElasticSearch\u3001HBase\u3001Presto\u3001Storm\u7b49\u79bb\u7ebf\u548c\u5b9e\u65f6\u6570\u636e\u5904\u7406 -->\n+- Years of internet development experience, love open source technology, full of interested in distributed storage. And familiar with online and realtime data processing with ElasticSearch\u3001HBase\u3001Presto\u3001Storm and et.\n+\n+<!-- - \u76ee\u524d\u4e3b\u8981\u5728Sharding-Sphere\u56e2\u961f\u8d1f\u8d23\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5f00\u53d1 -->\n+- Be responsible for distributed transaction implementation in Sharding-Sphere team.\n+\n+### Using Scenarios of Distributed Transaction\n+<!-- ### \u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4f7f\u7528\u573a\u666f -->\n+\n+#### ACID\n+\n+<!-- \u4e00\u5207\u4eceACID\u5f00\u59cb\u8bf4\u8d77\u3002ACID\u662f\u672c\u5730\u4e8b\u52a1\u6240\u5177\u6709\u7684\u56db\u5927\u7279\u5f81\uff1a -->\n+ Everything starts with ACID(atomicity, consistency, isolation, durability). ACID are features of database local transaction as following,\n+\n+<!-- *   **Atomicity\uff1a\u539f\u5b50\u6027** -->\n+*   **Atomicity**\n+\n+Atomicity guarantees that each transaction is treated as a single \"unit\", which either succeeds completely, or fails completely.\n+    <!-- \u4e8b\u52a1\u4f5c\u4e3a\u6574\u4f53\u6765\u6267\u884c\uff0c\u8981\u4e48\u5168\u90e8\u6267\u884c\uff0c\u8981\u4e48\u5168\u4e0d\u6267\u884c\u3002 -->\n+\n+<!-- *   **Consistency\uff1a\u4e00\u81f4\u6027** -->\n+*   **Consistency**\n+\n+    <!-- \u4e8b\u52a1\u5e94\u786e\u4fdd\u6570\u636e\u4ece\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u8f6c\u53d8\u4e3a\u53e6\u4e00\u4e2a\u4e00\u81f4\u7684\u72b6\u6001\u3002 -->\n+\n+Consistency ensures that a transaction can only bring the database from one valid state to another.\n+\n+<!-- *   **Isolation\uff1a\u9694\u79bb\u6027** -->\n+*   **Isolation**\n+\n+Transactions are often executed concurrently, and the effects of an incomplete transaction might not even be visible to other transactions.\n+    <!-- \u591a\u4e2a\u4e8b\u52a1\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u5e94\u5f71\u54cd\u5176\u4ed6\u4e8b\u52a1\u7684\u6267\u884c\u3002 -->\n+\n+<!-- *   **Durability\uff1a\u6301\u4e45\u6027** -->\n+*   **Durability**\n+\n+    <!-- \u5df2\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u6570\u636e\u4f1a\u88ab\u6301\u4e45\u4fdd\u6301\u3002 -->\n+\n+Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash).\n+\n+Local transaction of relational database guarantees ACID perfectly. But in distributed scenarios, its performance will be a bottleneck. This post will explain How to make ACID features available or the alternative for distributed database.\n+\n+<!-- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u672c\u5730\u4e8b\u52a1\u5b8c\u7f8e\u7684\u63d0\u4f9b\u4e86\u5bf9ACID\u7684\u539f\u751f\u652f\u6301\u3002\u4f46\u5728\u5206\u5e03\u5f0f\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u5374\u6210\u4e3a\u7cfb\u7edf\u6027\u80fd\u7684\u684e\u688f\u3002\u5982\u4f55\u8ba9\u6570\u636e\u5e93\u5728\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u6ee1\u8db3ACID\u7684\u7279\u6027\u6216\u627e\u5bfb\u76f8\u5e94\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u662f\u672c\u6587\u5c06\u8981\u9610\u8ff0\u7684\u8bdd\u9898\u3002 -->\n+\n+<!-- #### CAP\u548cBase\u7406\u8bba -->\n+#### CAP and BASE Theorem\n+<!-- \u5bf9\u4e8e\u4e92\u8054\u7f51\u5e94\u7528\u800c\u8a00\uff0c\u968f\u7740\u8bbf\u95ee\u91cf\u548c\u6570\u636e\u91cf\u7684\u6fc0\u589e\uff0c\u4f20\u7edf\u7684\u5355\u4f53\u67b6\u6784\u6a21\u5f0f\u5c06\u65e0\u6cd5\u6ee1\u8db3\u4e1a\u52a1\u7684\u9ad8\u901f\u53d1\u5c55\u3002\u8fd9\u65f6\uff0c\u5f00\u53d1\u8005\u9700\u8981\u628a\u5355\u4f53\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u5c0f\u5e94\u7528\uff0c\u628a\u5355\u4e2a\u6570\u636e\u5e93\u6309\u7167\u5206\u7247\u89c4\u5219\u62c6\u5206\u4e3a\u591a\u4e2a\u5e93\u548c\u591a\u4e2a\u8868\u3002 -->\n+\n+For the internet application, traditional all-in one architecture can't amply the business requirement with increasing of visit and data gradually. Developer of application needs to split the big application into several independent small applications, And all data in one database will reorganized into multiple databases and tables.\n+\n+But how to keep ACID between multi databases will be a hard tech problem, the CAP and BASE are basic theorem when to discuss the problem in distributed system.\n+\n+<!-- \u6570\u636e\u62c6\u5206\u540e\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u6570\u636e\u5e93\u8282\u70b9\u95f4\u4fdd\u8bc1\u672c\u5730\u4e8b\u52a1\u7684ACID\u7279\u6027\u5219\u6210\u4e3a\u4e00\u4e2a\u6280\u672f\u96be\u9898\uff0c\u5e76\u4e14\u7531\u6b64\u800c\u884d\u751f\u51fa\u4e86CAP\u548cBASE\u7ecf\u5178\u7406\u8bba\u3002 -->\n+\n+<!-- CAP\u7406\u8bba\u6307\u51fa\uff0c\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3C\uff08\u4e00\u81f4\u6027\uff09\uff0cA\uff08\u53ef\u7528\u6027\uff09\uff0cP\uff08\u5206\u533a\u5bb9\u9519\u6027\uff09\uff0c\u7531\u4e8e\u7f51\u7edc\u5206\u533a\u662f\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u57fa\u672c\u8981\u7d20\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u9700\u8981\u5728C\u548cA\u4e0a\u505a\u51fa\u5e73\u8861\u3002   -->\n+\n+The CAP theorem states that it is impossible for a distributed data system to simultaneously provide more than two out of the following three guarantees.\n+\n+  * Consistency\n+  * Availability\n+  * Partition tolerance\n+\n+No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the presence of a network partition, one has to choose between consistency and availability.\n+\n+BASE (basically available, soft state, eventually consistent) theorem is the result in trade off between Consistency and availability.\n+\n+<!-- \u7531\u4e8eC\u548cA\u4e92\u65a5\u6027\uff0c\u5176\u6743\u8861\u7684\u7ed3\u679c\u5c31\u662fBASE\u7406\u8bba\u3002   -->\n+\n+<!-- \u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5206\u5e03\u5f0f\u5e94\u7528\u800c\u8a00\uff0c\u53ea\u8981\u6570\u636e\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7b26\u5408\u4f20\u7edf\u7684ACID\u53eb\u505a\u521a\u6027\u4e8b\u52a1\uff0c\u628a\u6ee1\u8db3BASE\u7406\u8bba\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4e8b\u52a1\u53eb\u505a\u67d4\u6027\u4e8b\u52a1\u3002  -->\n+\n+For the most of distributed application, it's enough that data to be eventually consistent state in a reasonable time. If we call transactions that satisfy ACID as hard transactions, then transactions based on BASE are called soft transactions.\n+\n+Without regarding system requirements and performance, pursuing strong consistency is not the best solution. The distributed application can be benefit from both hard and soft transaction at the same time. The local service adopt strong consistent transaction, and a service across multi systems adopt eventually consistent transaction. How to  rade off performance and consistency of a system is a key challenge for the architect and developer.\n+\n+<!-- \u4e00\u5473\u7684\u8ffd\u6c42\u5f3a\u4e00\u81f4\u6027\uff0c\u5e76\u975e\u6700\u4f73\u65b9\u6848\u3002\u5bf9\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u6765\u8bf4\uff0c\u521a\u67d4\u5e76\u6d4e\u662f\u66f4\u52a0\u5408\u7406\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5373\u5728\u672c\u5730\u670d\u52a1\u4e2d\u91c7\u7528\u5f3a\u4e00\u81f4\u4e8b\u52a1\uff0c\u5728\u8de8\u7cfb\u7edf\u8c03\u7528\u4e2d\u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5982\u4f55\u6743\u8861\u7cfb\u7edf\u7684\u6027\u80fd\u4e0e\u4e00\u81f4\u6027\uff0c\u662f\u5341\u5206\u8003\u9a8c\u67b6\u6784\u5e08\u4e0e\u5f00\u53d1\u8005\u7684\u8bbe\u8ba1\u529f\u529b\u7684\u3002 -->\n+\n+![](https://shardingsphere.apache.org/blog/img/realization1.jpg)\n+\n+<!-- ### \u4e1a\u754c\u65b9\u6cd5 -->\n+### Distributed Transaction Method\n+\n+<!-- \u5177\u4f53\u5230\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5b9e\u73b0\u4e0a\uff0c\u4e1a\u754c\u4e3b\u8981\u91c7\u7528\u4e86XA\u534f\u8bae\u7684\u5f3a\u4e00\u81f4\u89c4\u8303\u4ee5\u53ca\u67d4\u6027\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u89c4\u8303\u3002 -->\n+For implementation of distributed transaction, There are two main available specifications, XA(using 2PC) and soft transaction.\n+\n+#### XA\n+\n+XA standard describes the interface between transaction manager(TM) and resource manager(RM) by the X/Open CAE Specification for Distributed Transaction Processing\u3002\n+\n+<!-- XA\u662fX/Open CAE Specification (Distributed Transaction Processing)\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684TM\uff08Transaction Manager\uff09\u4e0eRM\uff08Resource Manager\uff09\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\u3002 -->\n+\n+The XAResource interface is a Java mapping of the industry standard XA interface, And its implementation varies between database vendors\u3002\n+\n+<!-- Java\u4e2d\u7684javax.transaction.xa.XAResource\u5b9a\u4e49\u4e86XA\u63a5\u53e3\uff0c\u5b83\u4f9d\u8d56\u6570\u636e\u5e93\u5382\u5546\u5bf9jdbc-driver\u7684\u5177\u4f53\u5b9e\u73b0\u3002 -->\n+\n+<!-- mysql-connector-java-5.1.30\u7684\u5b9e\u73b0\u53ef\u53c2\u8003\uff1a -->\n+The implementation details by MySQL can be found in com.mysql.jdbc.jdbc2.optional.MysqlXAConnection class of mysql-connector-java v5.1.30 package.\n+\n+\n+<!-- \u5728XA\u89c4\u8303\u4e2d\uff0c\u6570\u636e\u5e93\u5145\u5f53RM\u89d2\u8272\uff0c\u5e94\u7528\u9700\u8981\u5145\u5f53TM\u7684\u89d2\u8272\uff0c\u5373\u751f\u6210\u5168\u5c40\u7684txId\uff0c\u8c03\u7528XAResource\u63a5\u53e3\uff0c\u628a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\u534f\u8c03\u4e3a\u5168\u5c40\u7edf\u4e00\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002   -->\n+In XA specification,TM(the application) controls a transaction which involves multiple RM(the database).\n+TM needs a global transaction id(xid) to call XAResource interfaces and coordinate multi local transaction into a global unique distributed transaction.\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4\uff1a\u5f31XA** -->\n+\n+**One Phase Commit\uff1aweak XA**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization2.jpg)\n+\n+<!-- \u5f31XA\u901a\u8fc7\u53bb\u6389XA\u7684Prepare\u9636\u6bb5\uff0c\u4ee5\u8fbe\u5230\u51cf\u5c11\u8d44\u6e90\u9501\u5b9a\u8303\u56f4\u800c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u7684\u6548\u679c\u3002\u5178\u578b\u7684\u5b9e\u73b0\u4e3a\u5728\u4e00\u4e2a\u4e1a\u52a1\u7ebf\u7a0b\u4e2d\uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4f9d\u6b21\u505acommit\u6216\u8005rollback\u3002\u5f31XA\u540c\u672c\u5730\u4e8b\u52a1\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u8017\u4f4e\uff0c\u4f46\u5728\u4e8b\u52a1\u63d0\u4ea4\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u51fa\u73b0\u7f51\u7edc\u6545\u969c\u3001\u6570\u636e\u5e93\u5b95\u673a\u7b49\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\uff0c\u5c06\u4f1a\u9020\u6210\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e14\u65e0\u6cd5\u8fdb\u884c\u56de\u6eda\u3002\u57fa\u4e8e\u5f31XA\u7684\u4e8b\u52a1\u65e0\u9700\u989d\u5916\u7684\u5b9e\u73b0\u6210\u672c\uff0c\u56e0\u6b64Sharding-Sphere\u9ed8\u8ba4\u652f\u6301\u3002 -->\n+\n+Comparing to 2PC, weak XA without prepare phase can benefits for reducing resource blocking and improving concurrency. The implementation only needs to iterate and call commit/callback on each datasource connection in a business thread. Performance of weak XA almost without reducing compares to local transaction. When has network failures\u3001database crash and et., weak XA will lead inconsistent data and can't be rollback. Weak XA transaction implementation doesn't need extra efforts, so Sharding-Sphere supports it by default.\n+\n+<!-- **\u4e8c\u9636\u6bb5\u63d0\u4ea4\uff1a2PC** -->\n+\n+**Two Phase Commit\uff1a2PC**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization3.jpg)\n+\n+<!-- \u4e8c\u9636\u6bb5\u63d0\u4ea4\u662fXA\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5b83\u5c06\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u63d0\u4ea4\u62c6\u5206\u4e3a2\u4e2a\u9636\u6bb5\uff1aprepare\u548ccommit/rollback\u3002 -->\n+Two phase commit is a standard implementation of XA. The distributed transaction commit consists of two phases:prepare and commit/rollback.\n+\n+All local transactions will use default isolation level to lock resources, record redo and undo logs when XA global transaction enabled. In the prepare stage, TM initiates a prepare request to each RM and waits for response. and then to execute a commit operation if all RMs send yes or decides to execute a rollback if an TM sends no. if all TM said yes, but some of nodes crash on commit stage, The XA recover will be used to commit compensation when the node recovery, and make sure that data is consistent.\n+\n+<!-- \u5f00\u542fXA\u5168\u5c40\u4e8b\u52a1\u540e\uff0c\u6240\u6709\u5b50\u4e8b\u52a1\u4f1a\u6309\u7167\u672c\u5730\u9ed8\u8ba4\u7684\u9694\u79bb\u7ea7\u522b\u9501\u5b9a\u8d44\u6e90\uff0c\u5e76\u8bb0\u5f55undo\u548credo\u65e5\u5fd7\uff0c\u7136\u540e\u7531TM\u53d1\u8d77prepare\u6295\u7968\uff0c\u8be2\u95ee\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u63d0\u4ea4\uff1a\u5f53\u6240\u6709\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cyes\u201d\u65f6\uff0cTM\u518d\u53d1\u8d77commit\uff1b\u82e5\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b50\u4e8b\u52a1\u53cd\u9988\u7684\u7ed3\u679c\u4e3a\u201cno\u201d\uff0cTM\u5219\u53d1\u8d77rollback\uff1b\u5982\u679c\u5728prepare\u9636\u6bb5\u7684\u53cd\u9988\u7ed3\u679c\u4e3ayes\uff0c\u800ccommit\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5b95\u673a\u7b49\u5f02\u5e38\u65f6\uff0c\u5219\u5728\u8282\u70b9\u670d\u52a1\u91cd\u542f\u540e\uff0c\u53ef\u6839\u636eXA recover\u518d\u6b21\u8fdb\u884ccommit\u8865\u507f\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+On 2PC model, the prepare stage needs to wait all involved RMs response and that may lead resource locked for a long time\uff0cso it's not suitable for high concurrency and time-consumed sub transaction scenario.\n+\n+<!-- 2PC\u6a21\u578b\u4e2d\uff0c\u5728prepare\u9636\u6bb5\u9700\u8981\u7b49\u5f85\u6240\u6709\u53c2\u4e0e\u5b50\u4e8b\u52a1\u7684\u53cd\u9988\uff0c\u56e0\u6b64\u53ef\u80fd\u9020\u6210\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u8fc7\u957f\uff0c\u4e0d\u9002\u5408\u5e76\u53d1\u9ad8\u4ee5\u53ca\u5b50\u4e8b\u52a1\u751f\u547d\u5468\u957f\u8f83\u957f\u7684\u4e1a\u52a1\u573a\u666f\u3002 -->\n+\n+Sharding-Sphere supports XA-based strong consistent transaction solution, third-party XA implementations, such as Atomikos and Narayana, can be inject into Sharding-Sphere by SPI.\n+<!-- Sharding-Sphere\u652f\u6301\u57fa\u4e8eXA\u7684\u5f3a\u4e00\u81f4\u6027\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u901a\u8fc7SPI\u6ce8\u5165\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f5c\u4e3a\u4e8b\u52a1\u7ba1\u7406\u5668\u5b9e\u73b0XA\u534f\u8bae\uff0c\u5982Atomikos\u548cNarayana\u3002 -->\n+\n+\n+<!-- #### \u67d4\u6027\u4e8b\u52a1 -->\n+\n+### Soft Transaction\n+\n+<!-- \u67d4\u6027\u4e8b\u52a1\u662f\u5bf9XA\u534f\u8bae\u7684\u59a5\u534f\u548c\u8865\u507f\uff0c\u5b83\u901a\u8fc7\u5bf9\u5f3a\u4e00\u81f4\u6027\u8981\u6c42\u7684\u964d\u4f4e\uff0c\u4ee5\u8fbe\u5230\u964d\u4f4e\u6570\u636e\u5e93\u8d44\u6e90\u9501\u5b9a\u65f6\u95f4\u7684\u6548\u679c\u3002\u67d4\u6027\u4e8b\u52a1\u7684\u79cd\u7c7b\u5f88\u591a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u6765\u6743\u8861\u4f7f\u7528\u3002 -->\n+\n+Soft transaction is a compromise to XA, don't need data to be strong consistent any more which benefit for reducing lock time of resource. There are a variety of soft transaction implementations, various strategies can be used to trade off.\n+\n+\n+<!-- **\u4e00\u9636\u6bb5\u63d0\u4ea4 + \u8865\u507f \uff1a\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff08BED\uff09** -->\n+**One Phase Commit with Compensation \uff1aBest Effort Delivery(BED)**\n+\n+BED is a compensate strategy for weak XA. Using transaction table records all transactional operation SQL, the record will be deleted if sub transaction success to commit or retry until max configured retries. Trying it best to make data consistent that's why we call it BED. In different business scenes, in order to balance consistency and availability, using synchronous or asynchronous retry.\n+\n+<!-- \u6700\u5927\u52aa\u529b\u9001\u8fbe\uff0c\u662f\u9488\u5bf9\u4e8e\u5f31XA\u7684\u4e00\u79cd\u8865\u507f\u7b56\u7565\u3002\u5b83\u91c7\u7528\u4e8b\u52a1\u8868\u8bb0\u5f55\u6240\u6709\u7684\u4e8b\u52a1\u64cd\u4f5cSQL\uff0c\u5982\u679c\u5b50\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\uff0c\u5c06\u4f1a\u5220\u9664\u4e8b\u52a1\u65e5\u5fd7\uff1b\u5982\u679c\u6267\u884c\u5931\u8d25\uff0c\u5219\u4f1a\u6309\u7167\u914d\u7f6e\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5c1d\u8bd5\u518d\u6b21\u63d0\u4ea4\uff0c\u5373\u6700\u5927\u52aa\u529b\u7684\u8fdb\u884c\u63d0\u4ea4\uff0c\u5c3d\u91cf\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5e73\u8861C\u548cA\uff0c\u91c7\u7528\u540c\u6b65\u91cd\u8bd5\u6216\u5f02\u6b65\u91cd\u8bd5\u3002\n+\n+\u8fd9\u79cd\u7b56\u7565\u7684\u4f18\u70b9\u662f\u65e0\u9501\u5b9a\u8d44\u6e90\u65f6\u95f4\uff0c\u6027\u80fd\u635f\u8017\u5c0f\u3002\u7f3a\u70b9\u662f\u5c1d\u8bd5\u591a\u6b21\u63d0\u4ea4\u5931\u8d25\u540e\uff0c\u65e0\u6cd5\u56de\u6eda\uff0c\u5b83\u4ec5\u9002\u7528\u4e8e\u4e8b\u52a1\u6700\u7ec8\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u7684\u4e1a\u52a1\u573a\u666f\u3002\u56e0\u6b64BED\u662f\u901a\u8fc7\u4e8b\u52a1\u56de\u6eda\u529f\u80fd\u4e0a\u7684\u59a5\u534f\uff0c\u6765\u6362\u53d6\u6027\u80fd\u7684\u63d0\u5347\u3002 -->\n+\n+Advantage of the strategy is free of resource lock, low performance loss. But the transaction can't be rollback if still failed until reaches max reties. so it's only useful for the transaction that will be successful one hundred percentage. For the sake of improving performance, BED sacrifices rollback function of transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization4.jpg)\n+\n+<!-- **TCC\uff1a Try-Confirm-Cancel**   -->\n+\n+**TCC\uff1a Try-Confirm-Cancel**  \n+\n+<!-- TCC\u6a21\u578b\u662f\u628a\u9501\u7684\u7c92\u5ea6\u5b8c\u5168\u4ea4\u7ed9\u4e1a\u52a1\u5904\u7406\uff0c\u5b83\u9700\u8981\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u4e1a\u52a1\u90fd\u5b9e\u73b0Try-Confirm/Cancel\u63a5\u53e3\u3002 -->\n+TCC model gives the control of lock to business level, and all sub transactions business must be implement Try-Confirm/Cancel interface.\n+\n+<!-- *   **Try:**\n+\n+    \u5c1d\u8bd5\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u5b8c\u6210\u6240\u6709\u4e1a\u52a1\u68c0\u67e5\uff08\u4e00\u81f4\u6027\uff09\uff1b\n+\n+    \u9884\u7559\u5fc5\u987b\u4e1a\u52a1\u8d44\u6e90\uff08\u51c6\u9694\u79bb\u6027\uff09\uff1b -->\n+\n+*   **Try:**\n+\n+    Try to execute business;\n+\n+    Finish all business check(Consistency);\n+\n+    Reserve required resource for business(Isolation);\n+\n+<!-- *   **Confirm:**\n+\n+    \u786e\u8ba4\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u771f\u6b63\u6267\u884c\u4e1a\u52a1\uff0c\u4e0d\u4f5c\u4efb\u4f55\u4e1a\u52a1\u68c0\u67e5\uff1b\n+\n+    \u53ea\u4f7f\u7528Try\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Confirm\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\uff1b -->\n+\n+*   **Confirm:**\n+\n+    Confirm execute business;\n+\n+    Execute the business logic without business check;\n+\n+    Only use reserved resource in the Try phase;\n+\n+    Confirm operation is idempotent;\n+\n+\n+<!-- *   **Cancel:**\n+\n+    \u53d6\u6d88\u6267\u884c\u4e1a\u52a1\uff1b\n+\n+    \u91ca\u653eTry\u9636\u6bb5\u9884\u7559\u7684\u4e1a\u52a1\u8d44\u6e90\uff1b\n+\n+    Cancel\u64cd\u4f5c\u6ee1\u8db3\u5e42\u7b49\u6027\u3002 -->\n+\n+*   **Cancel:**\n+\n+    Cancel execute business;\n+\n+    Release reserved resource in the Try phase;\n+\n+    Cancel operation is idempotent;\n+\n+<!-- \u8fd9\u4e09\u4e2a\u9636\u6bb5\u90fd\u4f1a\u6309\u672c\u5730\u4e8b\u52a1\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e0d\u540c\u4e8eXA\u7684prepare\uff0cTCC\u65e0\u9700\u5c06XA\u7684\u6295\u7968\u671f\u95f4\u7684\u6240\u6709\u8d44\u6e90\u6302\u8d77\uff0c\u56e0\u6b64\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\u3002   -->\n+\n+Different from XA prepare stage, the three stage will execute as the local transaction way. TCC don't need to lock all the resource during voting, and improves system concurrency.\n+\n+\n+<!-- \u4e0b\u9762\u5bf9TCC\u6a21\u5f0f\u4e0b\uff0cA\u8d26\u6237\u5f80B\u8d26\u6237\u6c47\u6b3e100\u5143\u4e3a\u4f8b\u5b50\uff0c\u5bf9\u4e1a\u52a1\u7684\u6539\u9020\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\uff1a -->\n+Using TCC model, in case of account A transfers 100 dollars to account B, The following figure shows the transformation of the business to support TCC, and the detail analysis of business changes as following:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization5.jpg)\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1\u548c\u6536\u6b3e\u670d\u52a1\u5206\u522b\u9700\u8981\u5b9e\u73b0\uff0cTry-Confirm-Cancel\u63a5\u53e3\uff0c\u5e76\u5728\u4e1a\u52a1\u521d\u59cb\u5316\u9636\u6bb5\u5c06\u5176\u6ce8\u5165\u5230TCC\u4e8b\u52a1\u7ba1\u7406\u5668\u4e2d\u3002 -->\n+\n+Remittance and collection service need to implement Try-Confirm-Cancel interface, and injects it\n+into TCC transaction manager in the business initiation stage.\n+\n+<!-- \u6c47\u6b3e\u670d\u52a1 -->\n+\n+Remittance service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5A\u8d26\u6237\u6709\u6548\u6027\uff0c\u5373\u67e5\u770bA\u8d26\u6237\u7684\u72b6\u6001\u662f\u5426\u4e3a\u201c\u8f6c\u5e10\u4e2d\u201d\u6216\u8005\u201c\u51bb\u7ed3\u201d\uff1b\n+\n+    \u68c0\u67e5A\u8d26\u6237\u4f59\u989d\u662f\u5426\u5145\u8db3\uff1b\n+\n+    \u4eceA\u8d26\u6237\u4e2d\u6263\u51cf100\u5143\uff0c\u5e76\u5c06\u72b6\u6001\u7f6e\u4e3a\u201c\u8f6c\u8d26\u4e2d\u201d\uff1b\n+\n+    \u9884\u7559\u6263\u51cf\u8d44\u6e90\uff0c\u5c06\u4eceA\u5f80B\u8d26\u6237\u8f6c\u8d26100\u5143\u8fd9\u4e2a\u4e8b\u4ef6\u5b58\u5165\u6d88\u606f\u6216\u8005\u65e5\u5fd7\u4e2d\uff1b -->\n+*   **Try\uff1a**\n+\n+    Check effectiveness of account A, namely, check status of account A whether in \"transferring\" or \"Frozen\";\n+\n+    Check account A whether has enough money;\n+\n+    Deduct 100 dollars from account A and update the status to \"Transferring\"\n+\n+    Reserve the deduction resource, store the event that transfer 100 dollars from account A to B into the message or log.\n+\n+<!-- *   **Confirm\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b-->\n+\n+*   **Confirm\uff1a**    \n+\n+    no operation;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    A\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\u3002 -->\n+\n+*   **Cancel\uff1a**\n+\n+   Add 100 dollars into account A;\n+\n+   Release the deduction resource from messages or logs;\n+\n+<!-- \u6536\u6b3e\u670d\u52a1 -->\n+\n+Collection service\n+\n+<!-- *   **Try\uff1a**\n+\n+    \u68c0\u67e5B\u8d26\u6237\u8d26\u6237\u662f\u5426\u6709\u6548\uff1b -->\n+\n+*   **Try**\n+\n+    Check effectiveness of account B;\n+\n+\n+<!-- *   **Confirm**\uff1a\n+\n+    \u8bfb\u53d6\u65e5\u5fd7\u6216\u8005\u6d88\u606f\uff0cB\u8d26\u6237\u589e\u52a0100\u5143\uff1b\n+\n+    \u4ece\u65e5\u5fd7\u6216\u8005\u6d88\u606f\u4e2d\uff0c\u91ca\u653e\u6263\u51cf\u8d44\u6e90\uff1b -->\n+\n+ *   **Confirm**\n+\n+    Read log or message, add 100 dollars into account B;\n+\n+    Release the deduction resource from messages or logs;\n+\n+<!-- *   **Cancel\uff1a**\n+\n+    \u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 -->\n+\n+*   **Cancel**\n+\n+    No operation;\n+\n+<!-- \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff0cTCC\u6a21\u578b\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u5f3a\uff0c\u6539\u9020\u7684\u96be\u5ea6\u5927\u3002   -->\n+\n+It can be seen that TCC model is intrusive for the business, and hard to business transformation.\n+\n+<!-- **\u6d88\u606f\u9a71\u52a8** -->\n+\n+**Message-Driven Transaction Model**\n+\n+![](https://shardingsphere.apache.org/blog/img/realization6.jpg)\n+\n+<!-- \u6d88\u606f\u4e00\u81f4\u6027\u65b9\u6848\u662f\u901a\u8fc7\u6d88\u606f\u4e2d\u95f4\u4ef6\u4fdd\u8bc1\u4e0a\u4e0b\u6e38\u5e94\u7528\u6570\u636e\u64cd\u4f5c\u7684\u4e00\u81f4\u6027\u3002\u57fa\u672c\u601d\u8def\u662f\u5c06\u672c\u5730\u64cd\u4f5c\u548c\u53d1\u9001\u6d88\u606f\u653e\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u4e0b\u6e38\u5e94\u7528\u5411\u6d88\u606f\u7cfb\u7edf\u8ba2\u9605\u8be5\u6d88\u606f\uff0c\u6536\u5230\u6d88\u606f\u540e\u6267\u884c\u76f8\u5e94\u64cd\u4f5c\u3002\u672c\u8d28\u4e0a\u662f\u4f9d\u9760\u6d88\u606f\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u8fbe\u5230\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u6d88\u606f\u9a71\u52a8\u7684\u7f3a\u70b9\u662f\uff1a\u8026\u5408\u5ea6\u9ad8\uff0c\u9700\u8981\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5f15\u5165MQ\uff0c\u5bfc\u81f4\u7cfb\u7edf\u590d\u6742\u5ea6\u589e\u52a0\u3002 -->\n+\n+Message based consistent solution depends on message middleware to make sure upstream and downstream applications keep the data consistent. The basic idea is put the local operation and sending message into a local transaction, downstream application consumes the message and execute the corresponding operation. It essentially relies on retry mechanism of message middleware to achieve eventually consistent . The disadvantage of message-driven is highly couple with message queue, which may increasing the complexity of business system.\n+\n+<!-- **SAGA** -->\n+\n+**SAGA**\n+\n+<!-- Saga\u8d77\u6e90\u4e8e1987\u5e74Hector & Kenneth\u53d1\u8868\u7684\u8bba\u6587Sagas\u3002 -->\n+\n+Saga derived from a [paper](https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf) published in 1987 by Hector & Kenneth.\n+\n+<!-- Saga\u5de5\u4f5c\u539f\u7406 -->\n+\n+ Saga work principle\n+\n+<!-- Saga\u6a21\u578b\u628a\u4e00\u4e2a\u5206\u5e03\u5f0f\u4e8b\u52a1\u62c6\u5206\u4e3a\u591a\u4e2a\u672c\u5730\u4e8b\u52a1\uff0c\u6bcf\u4e2a\u672c\u5730\u4e8b\u52a1\u90fd\u6709\u76f8\u5e94\u7684\u6267\u884c\u6a21\u5757\u548c\u8865\u507f\u6a21\u5757\uff08 TCC\u4e2d\u7684Confirm\u548cCancel\uff09\u3002\u5f53Saga\u4e8b\u52a1\u4e2d\u4efb\u610f\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u51fa\u9519\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u6062\u590d\u4e4b\u524d\u7684\u4e8b\u52a1\uff0c\u8fbe\u5230\u4e8b\u52a1\u6700\u7ec8\u7684\u4e00\u81f4\u6027\u3002 -->\n+\n+The saga model splits a distributed transaction into multiple local transactions(like Confirm and Cancel on TCC). Each local transactions has its own execution module and compensation module. When any of local transaction fails, the corresponding compensation method is called to restore the executed transaction, achieving the eventual consistency of the transactions.\n+\n+Once compensating transactions (C1, C2, ..., Cn-1) are defined for Saga (T1, T2, ..., Tn). Then, the saga system can make the following guarantee:\n+Either the sequence T1, T2, ..., Tn(which is the preferable one) or T1, T2, ...,Tx, Cx, ..., C2, C1 will be executed.\n+\n+<!-- \u5f53\u6bcf\u4e2aSaga\u5b50\u4e8b\u52a1 T1, T2, \u2026, Tn \u90fd\u6709\u5bf9\u5e94\u7684\u8865\u507f\u5b9a\u4e49 C1, C2, \u2026, Cn-1,\u90a3\u4e48Saga\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u8bc1\uff1a\n+\n+*   \u5b50\u4e8b\u52a1\u5e8f\u5217 T1, T2, \u2026, Tn\u5f97\u4ee5\u5b8c\u6210 (\u6700\u4f73\u60c5\u51b5)\uff1b\n+\n+*   \u6216\u8005\u5e8f\u5217 T1, T2, \u2026, Tj, Cj, \u2026, C2, C1, 0 < j < n, \u5f97\u4ee5\u5b8c\u6210\u3002 -->\n+\n+\n+ For the lack of prepare stage on Saga model, transactions can't keep isolation to each other. So loss of update, dirty read and et problem will happen when a resource is operated concurrently by multi transactions. The problem can be settle by concurrency control in business level, such as lock or pre-allocation resource.\n+\n+\n+<!-- \u7531\u4e8eSaga\u6a21\u578b\u4e2d\u6ca1\u6709Prepare\u9636\u6bb5\uff0c\u56e0\u6b64\u4e8b\u52a1\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u9694\u79bb\u6027\uff0c\u5f53\u591a\u4e2aSaga\u4e8b\u52a1\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u66f4\u65b0\u4e22\u5931\u3001\u810f\u6570\u636e\u8bfb\u53d6\u7b49\u95ee\u9898\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u5c42\u63a7\u5236\u5e76\u53d1\uff0c\u4f8b\u5982\uff1a\n+\n+*   \u5728\u5e94\u7528\u5c42\u9762\u52a0\u9501\uff1b\n+\n+*   \u5e94\u7528\u5c42\u9762\u9884\u5148\u51bb\u7ed3\u8d44\u6e90\u3002 -->\n+\n+\n+\n+\n+<!-- Saga\u6062\u590d\u65b9\u5f0f -->\n+\n+Saga recovery\n+\n+<!-- Saga\u652f\u6301\u5411\u524d\u548c\u5411\u540e\u6062\u590d\uff1a -->\n+\n+<!-- *   \u5411\u540e\u6062\u590d\uff1a\u8865\u507f\u6240\u6709\u5df2\u5b8c\u6210\u7684\u4e8b\u52a1\uff0c\u5982\u679c\u4efb\u4e00\u5b50\u4e8b\u52a1\u5931\u8d25\uff1b\n+\n+*   \u5411\u524d\u6062\u590d\uff1a\u91cd\u8bd5\u5931\u8d25\u7684\u4e8b\u52a1\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u6700\u7ec8\u90fd\u4f1a\u6210\u529f\u3002 -->\n+\n+The saga model supports both forward recovery and reverse recovery. Backward recovery compensates all the completed transaction when any transaction fails. In contrast, Forward recovery attempts to retry the transaction that currently fails. It's based on the hypothesis that all transactions will be  successful finally.\n+\n+<!-- \u663e\u7136\uff0c\u5411\u524d\u6062\u590d\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8865\u507f\u4e8b\u52a1\uff0c\u5982\u679c\u4f60\u7684\u4e1a\u52a1\u4e2d\uff0c\u5b50\u4e8b\u52a1\uff08\u6700\u7ec8\uff09\u603b\u4f1a\u6210\u529f\uff0c\u6216\u8865\u507f\u4e8b\u52a1\u96be\u4ee5\u5b9a\u4e49\u6216\u4e0d\u53ef\u80fd\uff0c\u5411\u524d\u6062\u590d\u66f4\u7b26\u5408\u4f60\u7684\u9700\u6c42\u3002\u7406\u8bba\u4e0a\u8865\u507f\u4e8b\u52a1\u6c38\u4e0d\u5931\u8d25\uff0c\u7136\u800c\uff0c\u5728\u5206\u5e03\u5f0f\u4e16\u754c\u4e2d\uff0c\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5b95\u673a\u3001\u7f51\u7edc\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u751a\u81f3\u6570\u636e\u4e2d\u5fc3\u4e5f\u53ef\u80fd\u4f1a\u505c\u7535\uff0c\u8fd9\u65f6\u9700\u8981\u63d0\u4f9b\u6545\u969c\u6062\u590d\u540e\u56de\u9000\u7684\u673a\u5236\uff0c\u6bd4\u5982\u4eba\u5de5\u5e72\u9884\u3002 -->\n+\n+Obviously, Forward recovery don't need compensation. If the transaction in the business will eventually succeed or backward compensating transaction is hard to define or impossible, forward recovery is more suitable for you. However, server crash, network and even datacenter power failure can happen in the real world. Recovery mechanism for failure are also needed, such as interference by people.\n+\n+<!-- \u603b\u7684\u6765\u8bf4\uff0cTCC\u548cMQ\u90fd\u662f\u4ee5\u670d\u52a1\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0c\u800cXA\u3001BED\u3001SAGA\u5219\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u8303\u56f4\u8fdb\u884c\u5206\u5e03\u5f0f\u5904\u7406\uff0c\u6211\u4eec\u66f4\u8d8b\u5411\u4e8e\u9009\u62e9\u540e\u8005\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u800c\u8a00\u4fb5\u5165\u5c0f\uff0c\u6539\u9020\u7684\u6210\u672c\u4f4e\u3002 -->\n+\n+All in word, TCC and MQ are both depend on business transformation, but XA, BED and SAGA only involve database. So latter is more preferable solution, which is less invasive for business, and low transformation cost.\n+\n+\n+<!-- ### Sharding-Sphere\u5bf9\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u652f\u6301 -->\n+### Distributed Transaction of Sharding-Sphere\n+\n+<!-- Sharding-Sphere\u662f\u4e00\u5957\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u95f4\u4ef6\u89e3\u51b3\u65b9\u6848\u7ec4\u6210\u7684\u751f\u6001\u5708\uff0c\u5b83\u7531Sharding-JDBC\u3001Sharding-Proxy\u548cSharding-Sidecar\u8fd93\u6b3e\u76f8\u4e92\u72ec\u7acb\u7684\u4ea7\u54c1\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u6570\u636e\u5206\u7247\u3001\u8bfb\u5199\u5206\u79bb\u3001\u67d4\u6027\u4e8b\u52a1\u548c\u6570\u636e\u6cbb\u7406\u529f\u80fd\uff0c\u53ef\u9002\u7528\u4e8e\u5982Java\u540c\u6784\u3001\u5f02\u6784\u8bed\u8a00\u3001\u5bb9\u5668\u3001\u4e91\u539f\u751f\u7b49\u5404\u79cd\u591a\u6837\u5316\u7684\u5e94\u7528\u573a\u666f\u3002 -->\n+\n+[ShardingSphere](https://github.com/sharding-sphere/sharding-sphere/) is an open-source ecosystem consisted of a set of distributed database middleware solutions, including 3 independent products, JDBC, Proxy & Sidecar. They all provide functions of data sharding, distributed transaction and database governance, applicable in a variety of situations such as Java isomorphism, heterogeneous language container and and cloud native.\n+\n+<!-- \u9879\u76ee\u5730\u5740\uff1a -->\n+\n+<!-- Sharding-Sphere\u540c\u65f6\u652f\u6301XA\u548c\u67d4\u6027\u4e8b\u52a1\uff0c\u5b83\u5141\u8bb8\u6bcf\u6b21\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u4e8b\u52a1\u7c7b\u578b\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u5bf9\u4e1a\u52a1\u64cd\u4f5c\u5b8c\u5168\u900f\u660e\uff0c\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5f15\u5165\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6210\u672c\u3002 -->\n+\n+Both XA and soft transaction are supported by Sharding-Sphere, and allows to select different transaction type for per request. Distributed transactions are completely transparent to business operations, which greatly reduces the cost of introducing distributed transactions.\n+\n+<!-- #### \u4e8b\u52a1\u6a21\u578b -->\n+\n+### Transaction Model\n+\n+![](https://shardingsphere.apache.org/blog/img/realization7.jpg)\n+\n+<!-- Sharding-Sphere\u4e8b\u52a1\u7ba1\u7406\u5668\u96c6\u6210\u4e86XA\u548c\u67d4\u6027\u4e8b\u52a1\u6a21\u578b\uff1a\n+\n+- \u5bf9\u4e8eXA\u4e8b\u52a1\u800c\u8a00\uff0c\u91c7\u7528SPI\u7684\u65b9\u5f0f\u8ba9\u5f31XA\u3001Atomikos\u3001Narayana\u95f4\u4fdd\u6301\u4e92\u65a5\uff1b\n+\n+- \u5bf9\u4e8e\u67d4\u6027\u4e8b\u52a1\u800c\u8a00\uff0c\u6839\u636e\u6bcf\u6b21\u8fde\u63a5\u4e2d\u4e8b\u52a1\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u9009\u62e9\u72ec\u7acb\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u7ba1\u7406\u5668\u90fd\u4f1a\u5b9e\u73b0\u6807\u51c6\u7684ShardingTransaction\u63a5\u53e3\uff0c\u5728TransactionEvent\u5230\u6765\u65f6\uff0c\u6267\u884c\u5bf9\u5e94\u7684begin\u3001commit\u3001rollback\u64cd\u4f5c\u3002 -->\n+\n+Sharding-Sphere TM integrated XA and soft transaction model:\n+\n+- For XA transaction, using SPI makes weak XA\u3001Atomikos\u3001Narayana are mutually exclusive.\n+\n+<!-- \u4e0b\u9762\u5c06Sharding-Sphere\u5185\u90e8\u5982\u4f55\u7528\u4e8b\u4ef6\u9a71\u52a8\u65b9\u5f0f\uff0c\u5c06\u4e8b\u52a1\u4ece\u5206\u7247\u4e3b\u6d41\u7a0b\u4e2d\u89e3\u8026\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff1a -->\n+The following section will explain how to decouple transaction from main process by event-driven:\n+\n+![](https://shardingsphere.apache.org/blog/img/realization8.jpg)\n+\n+<!-- \u4ece\u56fe\u53ef\u4ee5\u770b\u51fa\u5728Sharding-core\u5728\u8c03\u7528\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u4f1a\u6839\u636eSQL\u7684\u79cd\u7c7b\u4ea7\u751f\u4e8b\u4ef6\u8fdb\u884c\u5206\u53d1\u3002\u4e8b\u52a1\u76d1\u542c\u7ebf\u7a0b\u5728\u6536\u5230\u7b26\u5408\u8981\u6c42\u7684\u4e8b\u4ef6\u540e\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+As can be seen from above figure, Sharding-core will produce and dispatch various events according SQL, and the thread of transaction listener will invoke corresponding transaction processor to handle when event arrives.\n+\n+<!-- #### Sharding-Proxy\u4e8b\u52a1\u5b9e\u73b0 -->\n+\n+### Transaction Implementation of Sharding-Sphere\n+\n+\n+<!-- Sharding-Proxy\u662f\u57fa\u4e8enetty\u5f00\u53d1\u7684\u6570\u636e\u5e93\u4e2d\u95f4\u4ee3\u7406\u5c42\uff0c\u5b9e\u73b0\u4e86\u6807\u51c6\u7684MySQL\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u6570\u636e\u5206\u7247\u7684\u6570\u636e\u5e93\u3002Sharding-Proxy\u5df2\u7ecf\u5b9e\u73b0\u4e86\u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u5b50\u4e8b\u52a1\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u4e2d\uff0c\u6574\u4e2aProxy\u7684\u7ebf\u7a0b\u6a21\u578b\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u8c03\u6574\uff1a -->\n+\n+Sharding-Proxy is a netty based database middle layer proxy, it implements MySQL protocol, and could be regard as a database with built-in data sharding ability. Sharding-Proxy have implemented XA transaction based on Atomikos. For ensuring all sub transaction in the same thread, the changes of proxy thread model can be seen from the following figure.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization9.jpg)\n+\n+<!-- \u5f53\u5f00\u542f\u4e8b\u52a1\u540e\uff0cProxy\u540e\u7aef\u7684SQL\u547d\u4ee4\u6267\u884c\u5f15\u64ce\u5c06\u91c7\u7528\u4e00\u901a\u9053\u4e00\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff0c\u6b64\u4e8b\u52a1\u7ebf\u7a0b\u7684\u751f\u547d\u5468\u671f\u540c\u901a\u9053\u4fdd\u6301\u4e00\u81f4\u3002\u4e8b\u52a1\u5904\u7406\u7684\u5177\u4f53\u8fc7\u7a0b\u4e0eProxy\u5f7b\u5e95\u89e3\u8026\uff0c\u5373Proxy\u5c06\u53d1\u5e03\u4e8b\u52a1\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u7136\u540eSharding-Sphere-TM\u6839\u636e\u4f20\u5165\u7684\u4e8b\u52a1\u6d88\u606f\uff0c\u9009\u62e9\u5177\u4f53\u7684TM\u8fdb\u884c\u5904\u7406\u3002 -->\n+\n+When transaction enabled, SQL engine will using Channel-Thread pattern on Proxy backend, and lifecycle of channel and transaction thread keeps same. The process procedure of transaction are totally decoupled with Proxy, namely, the transaction event produced by Proxy will consumed by Sharding-Sphere TM.\n+\n+<!-- \u538b\u6d4b\u7ed3\u679c\u8868\u660e\uff1aXA\u4e8b\u52a1\u7684\u63d2\u5165\u548c\u66f4\u65b0\u7684\u6027\u80fd\uff0c\u57fa\u672c\u4e0a\u540c\u8de8\u5e93\u7684\u4e2a\u6570\u5448\u7ebf\u6027\u5173\u7cfb\uff0c\u67e5\u8be2\u7684\u6027\u80fd\u57fa\u672c\u4e0d\u53d7\u5f71\u54cd\uff0c\u5efa\u8bae\u5728\u5e76\u53d1\u91cf\u4e0d\u5927\uff0c\u6bcf\u6b21\u4e8b\u52a1\u6d89\u53ca\u7684\u5e93\u572810\u4e2a\u4ee5\u5185\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528XA\u3002 -->\n+Pressure test results show that insert and update performance of XA transaction is linear with amount of databases, and performance of query don't have obvious change.\n+so XA could be used in scenario with low concurrency and databases are not more than 10 in a transaction.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization10.jpg)\n+\n+<!-- Atomikos\u4e8b\u52a1\u7ba1\u7406\u5668\u539f\u7406\u5206\u6790 -->\n+\n+Principle Analysis of Atomikos Transaction Manager\n+\n+![](https://shardingsphere.apache.org/blog/img/realization11.jpg)\n+\n+<!-- Atomikos\u7684\u4e8b\u52a1\u7ba1\u7406\u5668\u53ef\u4ee5\u5185\u5d4c\u5230\u4e1a\u52a1\u8fdb\u7a0b\u4e2d\uff0c\u5f53\u5e94\u7528\u8c03\u7528TransactionManager.begin\u65f6\uff0c\u5c06\u4f1a\u521b\u5efa\u672c\u6b21XA\u4e8b\u52a1\uff0c\u5e76\u4e14\u4e0e\u5f53\u524d\u7ebf\u7a0b\u5173\u8054\u3002\u540c\u65f6Atomikos\u4e5f\u5bf9DataSource\u4e2d\u7684connection\u505a\u4e86\u4e8c\u6b21\u5c01\u88c5\uff0c\u4ee3\u7406connection\u4e2d\u542b\u6709\u672c\u6b21\u4e8b\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u62e6\u622a\u4e86connection\u7684JDBC\u64cd\u4f5c\u3002 -->\n+\n+Transaction manager of Atomikos can imbeded into business process, a XA transaction will be created and binds with current thread when application calls TransactionManager.begin method. Connection of dataSource was proxied by Atomikos, so JDBC manipulation and transaction info of the connection will be intercepted by Atomikos.\n+\n+<!-- \u5728createStatement\u65f6\uff0c\u8c03\u7528XAResource.start\u8fdb\u884c\u8d44\u6e90\u6ce8\u518c\uff1b\u5728close\u65f6\uff0c\u8c03\u7528XAResource.end\u8ba9XA\u4e8b\u52a1\u5904\u4e8eidle\u53ef\u63d0\u4ea4\u72b6\u6001\uff1b\u5728commit\u6216rollback\u65f6\uff0c\u4f9d\u6b21\u8c03\u7528prepare\u548ccommit\u8fdb\u884c\u4e8c\u9636\u6bb5\u63d0\u4ea4\u3002 -->\n+\n+XAResource.start method will be executed when createStatement; the close method will call XAResource.end that makes XA transaction to be idle state; Calling prepare and commit in turn for two-phase commit when commit or rollback.\n+\n+<!-- **Sharding-Sphere\u7684Saga\u4e8b\u52a1\u5b9e\u73b0** -->\n+\n+**Saga Transaction Implementation of Sharding-Sphere**\n+\n+<!-- Sharding-Sphere\u901a\u8fc7\u4e0eApache Service Comb\u7684\u5408\u4f5c\uff0c\u5c06\u91c7\u7528Service Comb\u7684Saga\u4e8b\u52a1\u5f15\u64ce\u4f5c\u4e3a\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5b9e\u73b0\u3002 -->\n+\n+Cooperate with Apache Service Comb, Sharding-Sphere will use Saga engine of Service Comb to implement the distributed transaction.\n+\n+<!-- Apache Service Comb\u662f\u534e\u4e3a\u5f00\u6e90\u7684\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5176\u4e2d\u5fae\u670d\u52a1\u4e8b\u52a1\u5904\u7406\u6846\u67b6\u5206\u4e3a\u96c6\u4e2d\u5f0f\u548c\u5206\u5e03\u5f0f\u534f\u8c03\u5668\u3002\u672a\u6765\u4f1a\u5728Sharding-Sphere\u5185\u90e8\u96c6\u6210Saga\u96c6\u4e2d\u5f0f\u534f\u8c03\u5668\uff0c\u652f\u6301\u540c\u4e00\u7ebf\u7a0b\u5185\u4e0d\u540c\u670d\u52a1\uff08\u672c\u5730\uff09\u95f4\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u3002 -->\n+\n+[Apache Service Comb](https://github.com/apache/incubator-servicecomb-saga) is an open source micro-service framework initiated by HuaWei, the distributed transaction framework of micro-service can be divided into centralized and distributed coordinators.\n+Sharding-Sphere will integrate centralized coordinator of Saga, and support distributed transaction for  services in same thread in the future.\n+\n+<!-- Service Comb \u96c6\u4e2d\u5f0f\u4e8b\u52a1\u534f\u8c03\u5668 -->\n+\n+Centralized Transaction Coordinator of Service Comb\n+\n+\n+![](https://shardingsphere.apache.org/blog/img/realization12.jpg)\n+\n+<!-- \u96c6\u4e2d\u5f0f\u7684\u534f\u8c03\u5668\uff0c\u5305\u542b\u4e86Saga\u8c03\u7528\u8bf7\u6c42\u63a5\u6536\u3001\u5206\u6790\u3001\u6267\u884c\u4ee5\u53ca\u7ed3\u679c\u67e5\u8be2\u7684\u5185\u5bb9\u3002\u4efb\u52a1\u4ee3\u7406\u6a21\u5757\u9700\u8981\u9884\u5148\u77e5\u9053Saga\u4e8b\u52a1\u8c03\u7528\u5173\u7cfb\u56fe\uff0c\u6267\u884c\u6a21\u5757\u6839\u636e\u751f\u6210\u7684\u8c03\u7528\u56fe\u4ea7\u751f\u8c03\u7528\u4efb\u52a1\uff0c\u8c03\u7528\u76f8\u5173\u5fae\u670d\u52a1\u670d\u52a1\u63a5\u53e3\u3002\u5982\u679c\u670d\u52a1\u8c03\u7528\u6267\u884c\u51fa\u9519\uff0c\u4f1a\u8c03\u7528\u670d\u52a1\u7684\u76f8\u5173\u7684\u8865\u507f\u65b9\u6cd5\u56de\u6eda\u3002 -->\n+\n+Centralized transaction coordinator including receiving, analysis, execution and result query for Saga request. Task agent module need to know predefined invoke relation graph of Sega, and execution module will generate invoke task according to invocation graph, and invoke micro-service interface. the compensation method will be invoke when service happens failure.\n+\n+<!-- Saga\u6267\u884c\u6a21\u5757\u901a\u8fc7\u5206\u6790\u8bf7\u6c42\u7684JSON\u6570\u636e\uff0c\u6765\u6784\u5efa\u4e00\u4e2a\u8c03\u7528\u5173\u7cfb\u56fe\u3002Sharding-Sphere\u662f\u901a\u8fc7JSON\u63cf\u8ff0Saga\u4e8b\u52a1\u4e32\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u6216\u8005\u5e76\u884c\u8c03\u7528\u5b50\u4e8b\u52a1\u3002\u5173\u7cfb\u8c03\u7528\u56fe\u88abSaga\u5b9e\u73b0\u4e2d\u7684\u4efb\u52a1\u8fd0\u884c\u6a21\u5757\u5206\u89e3\u6210\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u6267\u884c\u4efb\u52a1\uff0c\u6267\u884c\u4efb\u52a1\u7531\u4efb\u52a1\u6d88\u8d39\u8005\u83b7\u53d6\u5e76\u751f\u6210\u76f8\u5173\u7684\u8c03\u7528 \uff08\u540c\u65f6\u652f\u6301\u4e32\u884c\u548c\u5e76\u884c\u8c03\u7528\uff09\u3002Saga\u4efb\u52a1\u4f1a\u6839\u636e\u6267\u884c\u7684\u60c5\u51b5\u5411Saga Log\u4e2d\u8bb0\u5f55\u5bf9\u5e94\u7684Saga\u4e8b\u52a1\u7684\u5173\u952e\u4e8b\u4ef6\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u4e8b\u4ef6\u67e5\u770b\u5668\u67e5\u67e5\u8be2\u6267\u884c\u60c5\u51b5\u3002 -->\n+\n+Saga execution module builds an invocation graph by analyzing request JSON data. Sequentially or concurrently invocation of sub transaction of Saga was described by JSON in Sharding-Sphere.  Invocation relation graph was transferred into multiple execution tasks by execution module of Saga, the execution task consumer will generate corresponding invocation, both sequential and concurrent invocation are supported. Saga task will record key transaction event into logs according execution state, which can be viewed by event query engine.\n+\n+<!-- Sharding-Sphere\u5185\u5d4cSaga\u4e8b\u52a1\u7ba1\u7406\u5668 -->\n+\n+Imbeded Saga Transaction Manager of Sharding-Sphere\n+\n+![](https://shardingsphere.apache.org/blog/img/realization13.jpg)\n+\n+<!-- Saga\u4ee5jar\u5305\u7684\u5f62\u5f0f\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u6cbb\u7406\u80fd\u529b\u3002 -->\n+Saga provides distributed transaction service governance in form of jar.\n+\n+<!-- \u5bf9Sharding-Sphere\u800c\u8a00\uff0cconfirm\u548ccancel\u8fc7\u7a0b\u4ee3\u8868\u4e86\u5b50\u4e8b\u52a1\u4e2d\u7684\u6b63\u5e38\u6267\u884cSQL\u548c\u9006\u5411\u6267\u884cSQL\uff0c\uff08\u672a\u6765Sharding-Sphere\u5c06\u63d0\u4f9b\u81ea\u52a8\u751f\u6210\u9006\u5411SQL\u7684\u80fd\u529b\uff09\u3002\u5f53\u542f\u7528Saga\u67d4\u6027\u4e8b\u52a1\u540e\uff0c\u8def\u7531\u5b8c\u6210\u4e4b\u540e\u7684\u7269\u7406\u6570\u636e\u6e90\u5c06\u5f00\u542f\u672c\u5730\u81ea\u52a8\u63d0\u4ea4\u4e8b\u52a1\uff0c\u6bcf\u6b21confirm\u548ccancel\u90fd\u4f1a\u76f4\u63a5\u63d0\u4ea4\u3002 -->\n+\n+For Sharding-Sphere, procedure of confirm and cancel represent normal and backward execution SQL of sub-transaction. Automation of reverse\n+SQL generation is in the plan. After enabling Saga soft transaction, routed physical datasource will enable transaction auto commit, every confirm and cancel will submit directly.\n+\n+<!-- \u5728Sharding-Sphere\u5185\u90e8\uff0c\u89e6\u53d1SQL\u6267\u884c\u5f15\u64ce\u540e\uff0c\u5c06\u4f1a\u4ea7\u751fSaga\u4e8b\u52a1\u4e8b\u4ef6\uff0c\u8fd9\u65f6Sharding-Sphere\u4e8b\u52a1\u76d1\u542c\u5668\u4f1a\u6ce8\u518c\u672c\u6b21\u5b50\u4e8b\u52a1\u7684confirm\u548ccancel\u81f3Saga\u4e8b\u52a1\u7ba1\u7406\u5668\u7684\u961f\u5217\u4e2d\uff1b\u5728\u4e1a\u52a1\u7ebf\u7a0b\u89e6\u53d1commit\u548crollback\u540e\uff0cSaga\u4e8b\u52a1\u7ba1\u7406\u5668\u518d\u6839\u636e\u5b50\u4e8b\u52a1\u6267\u884c\u7684\u7ed3\u679c\uff0c\u5224\u65ad\u8fdb\u884cconfirm\u91cd\u8bd5\u6216\u8005cancel\u6d41\u7a0b\u3002 -->\n+\n+Inside of Sharding-Sphere, multi Saga transaction events will be generate when SQL engine was triggered, and confirm and cancel of current sub transaction will be registered into queue of Saga transaction manager; Saga transaction manager will execute confirm or cancel procedure according sub transaction execution result when commit or rollback was triggered.\n+\n+<!-- ### \u672a\u6765\u8ba1\u5212 -->\n+### Plans in the future\n+\n+<!-- \u672a\u6765Sharding-Sphere\u5c06\u6309\u7167\u6587\u4e2d\u4ecb\u7ecd\u7684Sharding-Sphere-TM\u9010\u6b65\u5b8c\u5584\u6574\u4e2a\u4e8b\u52a1\u6846\u67b6\uff1a -->\n+Evolution of Sharding-Sphere-TM framework will following the introduction on above, and main parts are as follow:\n+\n+<!-- *   \u5f31XA\u4e8b\u52a1 \uff08\u5df2\u53d1\u5e03\uff09\n+\n+*   \u57fa\u4e8eAtomikos\u7684XA\u4e8b\u52a1\uff08\u8fd1\u671f\u53d1\u5e03\uff09\n+\n+*   \u57fa\u4e8eNarayana\u7684XA\u4e8b\u52a1\uff08\u89c4\u5212\u4e2d\uff09\n+\n+*   BED\u67d4\u6027\u4e8b\u52a1\uff08\u5df2\u53d1\u5e03\uff09\n+\n+*   SAGA\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+*   TCC\uff08\u89c4\u5212\u4e2d\uff09 -->\n+\n+* Weak XA transaction (released)\n+* Atomikos based XA transaction(to be released)\n+* BED soft transaction(released)\n+* SAGA(working on)\n+* TCC(in planing)\n+\n+\n+<!-- \u5982\u679c\u524d\u9762\u7684\u5206\u4eab\u592a\u8fc7\u5197\u957f\uff0c\u90a3\u4e48\u5343\u8a00\u4e07\u8bed\u6c47\u805a\u6210\u4e00\u5f20\u8868\u683c\uff0c\u6b22\u8fce\u9605\u8bfb\u3002 -->\n+\n+If the previous sharing is too lengthy, then a thousand words are gathered into a table, welcome to read.\n+\n+![](https://shardingsphere.apache.org/blog/img/realization14.jpg)\n+\n+<!-- \u672a\u6765\uff0c\u6211\u4eec\u5c06\u4e0d\u65ad\u4f18\u5316\u5f53\u524d\u7684\u7279\u6027\uff0c\u9646\u7eed\u63a8\u51fa\u5927\u5bb6\u5173\u6ce8\u7684\u67d4\u6027\u4e8b\u52a1\u3001\u6570\u636e\u6cbb\u7406\u7b49\u66f4\u591a\u65b0\u7279\u6027\u3002\u5982\u679c\u6709\u4ec0\u4e48\u60f3\u6cd5\u3001\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u4e5f\u6b22\u8fce\u7559\u8a00\u4ea4\u6d41\uff0c\u66f4\u6b22\u8fce\u52a0\u5165\u5230Sharding-Sphere\u7684\u5f00\u6e90\u9879\u76ee\u4e2d\uff1a -->\n+\n+In the future, feature will be optimized continuously, more new features such as soft transactions and data governance that everyone concerns about will be launched one after another. Any thoughts, advices, suggestions, comments are appreciated, and welcome to join the open source community of Sharding-Sphere.\n+\n+*   https://github.com/sharding-sphere/sharding-sphere/\n+\n+*   https://gitee.com/sharding-sphere/sharding-sphere/\n+\n+### Q&A\n+\n+<!-- **Q1**\uff1a\u57fa\u4e8eXA\u7684\u4e8b\u7269\uff0c\u53ef\u4ee5\u5e94\u7528\u5230\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u5417\uff1f -->\n+**Q1**: Does XA based transaction can be used int micro-service architecture ?\n+\n+<!-- **A1**\uff1a\u76ee\u524d\u6211\u4eec\u662f\u628a\u4e8b\u52a1\u7ba1\u7406\u5668\u5185\u5d4c\u5230JVM\u8fdb\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u5e76\u53d1\u91cf\u5c0f\uff0c\u77ed\u4e8b\u52a1\u7684\u4e1a\u52a1\uff0c\u53ef\u4ee5\u7528XA\u3002 -->\n+\n+**A1**: Currently, transaction manager has been imbedded into JVM process, it's ok to use for low concurrency, shot transaction.\n+\n+<!-- **Q2**\uff1a\u5bf9\u4e8e\u5404\u4e2a\u4e8b\u52a1\u6846\u67b6\u5f00\u53d1\u8ba1\u5212\u7684\u5148\u540e\u987a\u5e8f\u662f\u57fa\u672c\u4ec0\u4e48\u6765\u786e\u5b9a\u7684\u5462\uff1f -->\n+ **Q2**: For the order of transaction frameworks development, why ?\n+<!-- **A2**\uff1a\u57fa\u4e8e\u96be\u6613\u7a0b\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u628aTCC\u653e\u5230\u4e86\u6700\u540e\u3002 -->\n+**A2**:  Based on the degree of difficulty, so we put TCC at the end.\n+\n+\n+<!-- **Q3**\uff1a\u652f\u6301\u591a\u8bed\u8a00\u5417\uff1f\u6bd4\u5982golang\uff1f -->\n+**Q3**: Does Sharding-Sphere support multi-language ? such as Golang?\n+<!-- **A3**\uff1a\u591a\u8bed\u8a00\u53ef\u4ee5\u7528Sharding-Proxy\u3002 -->\n+**A3**: For non java application, Sharding-Proxy are available.\n+\n+<!--\n+**Q4**\uff1a\u8fd9\u6b21\u662fProxy\u5b9e\u73b0\u5206\u5e03\u5f0f\u4e8b\u52a1\u5427\uff1f\u6211\u8bb0\u5f97\u4e4b\u524dSharding-JDBC\u6709\u5b9e\u73b0\u3002 -->\n+**Q4**: In this time, is Proxy implements distributed transaction ? But I remember Sharding-JDBC has implemented it ago.\n+\n+<!-- **A4**\uff1a\u8fd9\u6b21\u662f\u6574\u4e2aSS\u7684\u4e8b\u52a1\u5b9e\u73b0\uff0c\u5305\u542bSharding-JDBC\u548cProxy\uff0c\u76ee\u524dSJ\u7684\u5b9e\u73b0\u662f\u5f31XA\u548cBED\uff08\u6700\u5927\u52aa\u529b\u9001\u8fbe\uff09\uff0c\u4ee5\u540e\u4f1a\u589e\u52a0SAGA\u548cTCC\u3002 -->\n+**A4**: Transaction implementation of SS including Sharding-JDBC and Proxy, SJ has implemented weak XA and BED, SAGA and TCC will be introduced in the future.\n+\n+\n+<!-- **Q5**\uff1a\u5982\u679c\u6211\u53ea\u60f3\u7528SS\u91cc\u7684\u4e8b\u52a1\u6a21\u5757\uff0c\u53ef\u4ee5\u5417\uff1f -->\n+**Q5**: If I only want to use transaction module of SS, is it possible?\n+\n+<!-- **A5**\uff1aSS\u662f\u4ee5\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\u67b6\u6784\uff0c\u672a\u6765\u4e8b\u52a1\u6a21\u5757\u53ea\u8d1f\u8d23\u4e8b\u52a1\u76f8\u5173\u7684\u5904\u7406\u3002 -->\n+**A5**: Architecture of SS is event-driven, transaction module will only responsible for transaction in the future.\n+\n+\n+<!-- **Q6**\uff1aSAGA\u4e0d\u652f\u6301ACID\u4e2d\u7684I\uff0c\u54b1\u4eec\u8fd9\u8fb9\u600e\u4e48\u8003\u8651\u7684\u5462\uff1f -->\n+**Q6**: SAGA don't support I of ACID, how do you think of this ?\n+<!-- **A6**\uff1a\u76ee\u524d\u6682\u4e0d\u652f\u6301\u9694\u79bb\u6027\uff0c\u4eca\u540e\u6211\u4eec\u6709\u589e\u52a0I\u7684\u89c4\u5212\uff0c\u5176\u5b9e\u6240\u6709\u7684\u67d4\u6027\u4e8b\u52a1\u90fd\u4e0d\u652f\u6301I\uff0cTCC\u589e\u52a0\u4e86Try\u9636\u6bb5\uff0c\u53ef\u4ee5\u7406\u89e3\u662f\u51c6\u9694\u79bb\u6027\uff0c\u4f7f\u7528SAGA\u65f6\uff0c\u53ef\u4ee5\u5728\u4e1a\u52a1\u5c42\u9762\u63a7\u5236\u5e76\u53d1\uff0c\u9632\u6b62\u810f\u8bfb\u7b49\u4ea7\u751f\u3002 -->\n+**A6**: Now, Isolation is unsupported, and we have plan to support it. Actually all of soft transaction don't support I, Try stage of TCC can be regarded as isolation. Control of concurrency on business level can avoid dirty read.\n+\n+\n+<!-- **Q7**\uff1a\u90a3\u610f\u601d\uff0c\u73b0\u57283\u7684\u7248\u672c\u8fd8\u4e0d\u80fd\u5355\u72ec\u7528\u4e8b\u52a1\u7684\u6a21\u5757\uff1f -->\n+**Q7**: In version 3.0, does module of transaction works independently ?\n+\n+<!-- **A7**\uff1a\u73b0\u57283.0\u7248\u672c\uff0c\u4e8b\u52a1\u6a21\u5757\u4f9d\u8d56\u4e86Sharding-JDBC\u6a21\u5757\uff0c\u4e8b\u52a1\u6a21\u5757\u9700\u8981\u76d1\u542cSharding-JDBC\u548cProxy\u4e2d\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u4e8b\u52a1\u64cd\u4f5c\u3002\u5982\u679c\u4f60\u60f3\u5355\u72ec\u7528\u4e8b\u52a1\u6a21\u5757\uff0c\u9700\u8981\u6309Core\u4e2d\u5b9a\u4e49\u7684\u4e8b\u4ef6\uff0c\u5728\u4f60\u7684\u4e1a\u52a1\u91cc\u8fdb\u884c\u53d1\u5e03\u3002 -->\n+\n+ **A7**: In version 3.0, transaction module depends on Sharding-JDBC module, and executes transaction when received the event of Sharding-JDBC and Proxy. If you want to use transaction module, you need to handle event according the definition on core module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ac4fd4d8a51e4b4cc4114981d8a6bf41424c6f"}, "originalPosition": 602}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba2f970ded3846014e34e9af64609aee7392ad2", "author": {"user": {"login": "rudy2steiner", "name": "Rudy Steiner"}}, "url": "https://github.com/apache/shardingsphere/commit/cba2f970ded3846014e34e9af64609aee7392ad2", "committedDate": "2020-12-22T17:27:11Z", "message": "grammarly check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43552dd484f3c045c176fabadde58df6094e74df", "author": {"user": {"login": "rudy2steiner", "name": "Rudy Steiner"}}, "url": "https://github.com/apache/shardingsphere/commit/43552dd484f3c045c176fabadde58df6094e74df", "committedDate": "2020-12-22T17:55:00Z", "message": "more check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzE1NTc0", "url": "https://github.com/apache/shardingsphere/pull/8688#pullrequestreview-558315574", "createdAt": "2020-12-24T03:08:50Z", "commit": {"oid": "43552dd484f3c045c176fabadde58df6094e74df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}