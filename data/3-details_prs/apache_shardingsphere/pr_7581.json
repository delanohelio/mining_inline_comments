{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODA2NDE0", "number": 7581, "title": "DALBackendHandlerFactoryTest added", "bodyText": "for #7522\uff0c task of \"Move TCL related test cases into TransactionBackendHandlerFactoryTest\", \"Move DAL related test cases into DALBackendHandlerFactoryTest\" and \"Add test case for MySQLShowTablesStatement in DALBackendHandlerFactoryTest\" completed.\nChanges proposed in this pull request:\n\nassertShowTablesBackendHandlerReturnedWhenMySQLShowTablesStatement\nassertUseDatabaseBackendHandlerReturnedWhenMySQLUseStatement\nassertShowDatabasesBackendHandlerReturnedWhenMySQLShowDatabasesStatement\nassertBroadcastBackendHandlerReturnedWhenSetStatement\nassertUnicastBackendHandlerReturnedWhenOtherDALStatement", "createdAt": "2020-09-23T14:04:01Z", "url": "https://github.com/apache/shardingsphere/pull/7581", "merged": true, "mergeCommit": {"oid": "6e0ab99324bb0e657eccc880bce13a9ef19d28a9"}, "closed": true, "closedAt": "2020-09-24T07:59:46Z", "author": {"login": "sluk3r"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLCWMLgH2gAyNDkxODA2NDE0OjE4ZDY0OWY4ZjIwNWJmMDdhNDk1ZWNjNmQ2YzYwMmVjMjRhZWM3YmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL8f7lgFqTQ5NTMxMjYwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18d649f8f205bf07a495ecc6d6c602ec24aec7bc", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/18d649f8f205bf07a495ecc6d6c602ec24aec7bc", "committedDate": "2020-09-21T12:14:27Z", "message": "TransactionBackendHandlerFactoryTest added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56270258503f00120bdde6a3fb93988fe3b3d6f", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/d56270258503f00120bdde6a3fb93988fe3b3d6f", "committedDate": "2020-09-23T13:06:03Z", "message": "Merge branch 'master' into dev-7522-TransactionBackendHandlerFactoryTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/85e8e028e2a424e94f9036a690e9f71d743ac0fa", "committedDate": "2020-09-23T13:56:23Z", "message": "DALBackendHandlerFactoryTest added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODM2MDY4", "url": "https://github.com/apache/shardingsphere/pull/7581#pullrequestreview-494836068", "createdAt": "2020-09-23T16:23:42Z", "commit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODM2Njg4", "url": "https://github.com/apache/shardingsphere/pull/7581#pullrequestreview-494836688", "createdAt": "2020-09-23T16:24:25Z", "commit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDoyNVrOHW2p6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNDoyNVrOHW2p6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNjE4NQ==", "bodyText": "Please use static import of MatcherAssert", "url": "https://github.com/apache/shardingsphere/pull/7581#discussion_r493726185", "createdAt": "2020-09-23T16:24:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/text/admin/DALBackendHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.text.admin;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.backend.text.TextProtocolBackendHandler;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.DALStatement;\n+import org.apache.shardingsphere.sql.parser.sql.common.statement.dal.SetStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowDatabasesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowTablesStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLUseStatement;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+public final class DALBackendHandlerFactoryTest {\n+    \n+    @Test\n+    public void assertShowTablesBackendHandlerReturnedWhenMySQLShowTablesStatement() {\n+        MySQLShowTablesStatement mySQLShowTablesStatement = mock(MySQLShowTablesStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLShowTablesStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowTablesBackendHandler.class));\n+        ShowTablesBackendHandler showTablesBackendHandler = (ShowTablesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showTablesBackendHandler, \"sqlStatement\", is(mySQLShowTablesStatement));\n+        assertFieldOfInstance(showTablesBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(showTablesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUseDatabaseBackendHandlerReturnedWhenMySQLUseStatement() {\n+        MySQLUseStatement mySQLUseStatement = mock(MySQLUseStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mySQLUseStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UseDatabaseBackendHandler.class));\n+        UseDatabaseBackendHandler useDatabaseBackendHandler = (UseDatabaseBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"useStatement\", is(mySQLUseStatement));\n+        assertFieldOfInstance(useDatabaseBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertShowDatabasesBackendHandlerReturnedWhenMySQLShowDatabasesStatement() {\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", mock(MySQLShowDatabasesStatement.class), backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(ShowDatabasesBackendHandler.class));\n+        ShowDatabasesBackendHandler showDatabasesBackendHandler = (ShowDatabasesBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(showDatabasesBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertBroadcastBackendHandlerReturnedWhenSetStatement() {\n+        SetStatement setStatement = mock(SetStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", setStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(BroadcastBackendHandler.class));\n+        BroadcastBackendHandler broadcastBackendHandler = (BroadcastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(broadcastBackendHandler, \"sqlStatement\", is(setStatement));\n+        assertFieldOfInstance(broadcastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(broadcastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @Test\n+    public void assertUnicastBackendHandlerReturnedWhenOtherDALStatement() {\n+        DALStatement dalStatement = mock(DALStatement.class);\n+        BackendConnection backendConnection = mock(BackendConnection.class);\n+        TextProtocolBackendHandler textProtocolBackendHandler = DALBackendHandlerFactory.newInstance(\"\", dalStatement, backendConnection);\n+        assertThat(textProtocolBackendHandler, instanceOf(UnicastBackendHandler.class));\n+        UnicastBackendHandler unicastBackendHandler = (UnicastBackendHandler) textProtocolBackendHandler;\n+        assertFieldOfInstance(unicastBackendHandler, \"sqlStatement\", is(dalStatement));\n+        assertFieldOfInstance(unicastBackendHandler, \"sql\", is(\"\"));\n+        assertFieldOfInstance(unicastBackendHandler, \"backendConnection\", is(backendConnection));\n+    }\n+    \n+    @SneakyThrows\n+    private <S, T> void assertFieldOfInstance(final S classInstance, final String fieldName, final Matcher<T> matcher) {\n+        Field field = classInstance.getClass().getDeclaredField(fieldName);\n+        field.setAccessible(true);\n+        T value = (T) field.get(classInstance);\n+        MatcherAssert.assertThat(value, matcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e8e028e2a424e94f9036a690e9f71d743ac0fa"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280ea92010c2eadd5d4fdd7a048d7dc1ef9b81e0", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/280ea92010c2eadd5d4fdd7a048d7dc1ef9b81e0", "committedDate": "2020-09-23T21:55:30Z", "message": "use static import of MatcherAssert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bdb78a79aaeab7fee18f889b8aea12bd67f5e00", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/4bdb78a79aaeab7fee18f889b8aea12bd67f5e00", "committedDate": "2020-09-23T23:42:04Z", "message": "use static import of MatcherAssert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a978d234cd346c311b0b3ce8078ab1199d8398", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/c0a978d234cd346c311b0b3ce8078ab1199d8398", "committedDate": "2020-09-24T03:21:46Z", "message": "Merge branch 'master' into dev-7522-DALBackendHandlerFactoryTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzEyNjAw", "url": "https://github.com/apache/shardingsphere/pull/7581#pullrequestreview-495312600", "createdAt": "2020-09-24T07:59:35Z", "commit": {"oid": "c0a978d234cd346c311b0b3ce8078ab1199d8398"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}