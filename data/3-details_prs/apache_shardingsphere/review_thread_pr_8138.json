{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTU5MDgx", "number": 8138, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0MTozMVrOE4ktQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxNTo1MVrOE52mWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU3MTIxOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0MTozMVrOHylPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMjowMDo1OVrOHyrt8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMDk4Ng==", "bodyText": "Can we add all parsers? Would they conflict with each other?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522800986", "createdAt": "2020-11-13T08:41:31Z", "author": {"login": "wu-sheng"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwNzEyMg==", "bodyText": "Yep, you could, no conflict.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522907122", "createdAt": "2020-11-13T12:00:59Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMDk4Ng=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzU3MjcxOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0MTo1OFrOHylQJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoxMjoxNFrOHyvzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMTE5MQ==", "bodyText": "Where could I find the ParseTree API?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522801191", "createdAt": "2020-11-13T08:41:58Z", "author": {"login": "wu-sheng"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxOTg1NQ==", "bodyText": "@wu-sheng", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522819855", "createdAt": "2020-11-13T09:12:28Z", "author": {"login": "jingshanglu"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMTE5MQ=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NDA4NQ==", "bodyText": "I mean, do you intend to provide the APIs doc for the return type?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522974085", "createdAt": "2020-11-13T14:12:14Z", "author": {"login": "wu-sheng"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMTE5MQ=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODI2Mzk0OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMjowMzoyN1rOHyrxvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjowMToyNlrOHzpLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwODA5NQ==", "bodyText": "Could you move this point to the Features above? IMO, this is one function of our parser as well.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522908095", "createdAt": "2020-11-13T12:03:27Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkxNDA4Mg==", "bodyText": "Ok.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r523914082", "createdAt": "2020-11-16T06:01:26Z", "author": {"login": "jingshanglu"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,46 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+### \u4f18\u70b9\n+\u7531\u4e8e\u4f7f\u7528\u4e86 `ANTLR`\uff0c \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwODA5NQ=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODI5ODY1OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.en.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMjoxNTowMVrOHysGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNjozNDo0NVrOHzpsyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMzQ3Mg==", "bodyText": "First, it is expected to give more explanation for all its parameters. Plus, a list of possible values for databaseType is needed as well.\nSecond, another chapter, e.g., 2. Get different visited results is also necessary. We can provide other parsed results except for AST, which is just a basic one. At least, SQLStatement may be an option for users currently, and more wonderful features are ongoing, won't we?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522913472", "createdAt": "2020-11-13T12:15:01Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.en.md", "diffHunk": "@@ -25,10 +25,56 @@ At last, through traversing the abstract syntax tree, the context needed by shar\n \n ## SQL Parser\n \n+### History\n+\n As the core of database sharding and table sharding, SQL parser takes the performance and compatibility as its most important index. ShardingSphere SQL parser has undergone the upgrade and iteration of 3 generations of products.\n \n To pursue good performance and quick achievement, the first generation of SQL parser uses `Druid` before 1.4.x version. As tested in practice, its performance exceeds other parsers a lot.\n \n The second generation of SQL parsing engine begins from 1.5.x version, ShardingSphere has adopted fully self-developed parsing engine ever since. Due to different purposes, ShardingSphere does not need to transform SQL into a totally abstract syntax tree or traverse twice through visitor. Using `half parsing` method, it only extracts the context required by data sharding, so the performance and compatibility of SQL parsing is further improved.\n \n-The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as a generator for the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+\n+### Features\n+\n+* Independent SQL parsing engine\n+* Support multiple dialects\n+\n+| DB    | Status |\n+|----------|--------|\n+|MySQL     |supported|\n+|PostgreSQL|supported|\n+|SQLServer |supported|\n+|Oracle    |supported|\n+|SQL92     |supported|\n+\n+* SQL format (developing)\n+* SQL parameterize (developing)\n+\n+### Advantages\n+The syntax rules can be easily expanded and modified by using `ANTLR`\n+\n+### API Usage\n+\n+Maven config\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// According to the needs, introduce the parsing module of the specified dialect (take MySQL as an example)\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+demo:\n+\n+1. Get AST\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NzQ3OQ==", "bodyText": "+1, Look forward to a simpler return value rather than a tree, maybe? From the SkyWalking analysis requirements, apache/skywalking#5838, we need\n\nDML type, create/delete/update. Or it is a DDL.\nA listener mode or a way to iterate the table lists. I am not sure which way do you provide for now.\n\nThe basic idea is, SkyWalking as an APM, doesn't intend to do routing, sharding, or anything similar, we are planning to leverage this to get the basic profile of the executed SQL statements which were captured by the SkyWalking agents.\nAlso, I remember there is a cache mechanism in the parser engine, do you have an LRU cache to keep memory safe? Or could I provide an implementation for the cache by following your interface?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r522977479", "createdAt": "2020-11-13T14:18:01Z", "author": {"login": "wu-sheng"}, "path": "docs/document/content/features/sharding/principle/parse.en.md", "diffHunk": "@@ -25,10 +25,56 @@ At last, through traversing the abstract syntax tree, the context needed by shar\n \n ## SQL Parser\n \n+### History\n+\n As the core of database sharding and table sharding, SQL parser takes the performance and compatibility as its most important index. ShardingSphere SQL parser has undergone the upgrade and iteration of 3 generations of products.\n \n To pursue good performance and quick achievement, the first generation of SQL parser uses `Druid` before 1.4.x version. As tested in practice, its performance exceeds other parsers a lot.\n \n The second generation of SQL parsing engine begins from 1.5.x version, ShardingSphere has adopted fully self-developed parsing engine ever since. Due to different purposes, ShardingSphere does not need to transform SQL into a totally abstract syntax tree or traverse twice through visitor. Using `half parsing` method, it only extracts the context required by data sharding, so the performance and compatibility of SQL parsing is further improved.\n \n-The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as a generator for the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+\n+### Features\n+\n+* Independent SQL parsing engine\n+* Support multiple dialects\n+\n+| DB    | Status |\n+|----------|--------|\n+|MySQL     |supported|\n+|PostgreSQL|supported|\n+|SQLServer |supported|\n+|Oracle    |supported|\n+|SQL92     |supported|\n+\n+* SQL format (developing)\n+* SQL parameterize (developing)\n+\n+### Advantages\n+The syntax rules can be easily expanded and modified by using `ANTLR`\n+\n+### API Usage\n+\n+Maven config\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// According to the needs, introduce the parsing module of the specified dialect (take MySQL as an example)\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+demo:\n+\n+1. Get AST\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMzQ3Mg=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNTk3Ng==", "bodyText": "Hi @wu-sheng\n\nCurrently, SS will return the concrete SQLStatement, like SelectStatement, or UpdateStatement, which means you need some of IF code clips to get the corresponding SQL types.\nIf you just wanna get a full table list of DDL and DML SQL, I guess the visitor result, SQLStatement (Not a  comprehensive AST) seems suffienct. No doubt, a test is needed in case.\nYep, an LRU cache mechanism is embodied in SQL Parser. So, users do not need to do any other extra work.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r523425976", "createdAt": "2020-11-14T14:36:32Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.en.md", "diffHunk": "@@ -25,10 +25,56 @@ At last, through traversing the abstract syntax tree, the context needed by shar\n \n ## SQL Parser\n \n+### History\n+\n As the core of database sharding and table sharding, SQL parser takes the performance and compatibility as its most important index. ShardingSphere SQL parser has undergone the upgrade and iteration of 3 generations of products.\n \n To pursue good performance and quick achievement, the first generation of SQL parser uses `Druid` before 1.4.x version. As tested in practice, its performance exceeds other parsers a lot.\n \n The second generation of SQL parsing engine begins from 1.5.x version, ShardingSphere has adopted fully self-developed parsing engine ever since. Due to different purposes, ShardingSphere does not need to transform SQL into a totally abstract syntax tree or traverse twice through visitor. Using `half parsing` method, it only extracts the context required by data sharding, so the performance and compatibility of SQL parsing is further improved.\n \n-The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as a generator for the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+\n+### Features\n+\n+* Independent SQL parsing engine\n+* Support multiple dialects\n+\n+| DB    | Status |\n+|----------|--------|\n+|MySQL     |supported|\n+|PostgreSQL|supported|\n+|SQLServer |supported|\n+|Oracle    |supported|\n+|SQL92     |supported|\n+\n+* SQL format (developing)\n+* SQL parameterize (developing)\n+\n+### Advantages\n+The syntax rules can be easily expanded and modified by using `ANTLR`\n+\n+### API Usage\n+\n+Maven config\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// According to the needs, introduce the parsing module of the specified dialect (take MySQL as an example)\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+demo:\n+\n+1. Get AST\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMzQ3Mg=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyODkxNg==", "bodyText": "If you just wanna get a full table list of DDL and DML SQL, I guess the visitor result, SQLStatement (Not a comprehensive AST) seems suffienct. No doubt, a test is needed in case.\n\nI have to iterate this object, right?\n__\n2 more questions\n\nWhether SQLParserEngine is thread-safe? How to use it in the SkyWalking concurrent streaming process?\nDo you have a benchmark for the benchmark for this parser?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r523428916", "createdAt": "2020-11-14T15:07:55Z", "author": {"login": "wu-sheng"}, "path": "docs/document/content/features/sharding/principle/parse.en.md", "diffHunk": "@@ -25,10 +25,56 @@ At last, through traversing the abstract syntax tree, the context needed by shar\n \n ## SQL Parser\n \n+### History\n+\n As the core of database sharding and table sharding, SQL parser takes the performance and compatibility as its most important index. ShardingSphere SQL parser has undergone the upgrade and iteration of 3 generations of products.\n \n To pursue good performance and quick achievement, the first generation of SQL parser uses `Druid` before 1.4.x version. As tested in practice, its performance exceeds other parsers a lot.\n \n The second generation of SQL parsing engine begins from 1.5.x version, ShardingSphere has adopted fully self-developed parsing engine ever since. Due to different purposes, ShardingSphere does not need to transform SQL into a totally abstract syntax tree or traverse twice through visitor. Using `half parsing` method, it only extracts the context required by data sharding, so the performance and compatibility of SQL parsing is further improved.\n \n-The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as a generator for the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+\n+### Features\n+\n+* Independent SQL parsing engine\n+* Support multiple dialects\n+\n+| DB    | Status |\n+|----------|--------|\n+|MySQL     |supported|\n+|PostgreSQL|supported|\n+|SQLServer |supported|\n+|Oracle    |supported|\n+|SQL92     |supported|\n+\n+* SQL format (developing)\n+* SQL parameterize (developing)\n+\n+### Advantages\n+The syntax rules can be easily expanded and modified by using `ANTLR`\n+\n+### API Usage\n+\n+Maven config\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// According to the needs, introduce the parsing module of the specified dialect (take MySQL as an example)\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+demo:\n+\n+1. Get AST\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMzQ3Mg=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMjYzNA==", "bodyText": "Ok, i'll add some explanation for its parameters.\n\nSQLParserEngine is thread-safe.\nThere is no benchmark for this parser for the time being. It will come in the future.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r523922634", "createdAt": "2020-11-16T06:34:45Z", "author": {"login": "jingshanglu"}, "path": "docs/document/content/features/sharding/principle/parse.en.md", "diffHunk": "@@ -25,10 +25,56 @@ At last, through traversing the abstract syntax tree, the context needed by shar\n \n ## SQL Parser\n \n+### History\n+\n As the core of database sharding and table sharding, SQL parser takes the performance and compatibility as its most important index. ShardingSphere SQL parser has undergone the upgrade and iteration of 3 generations of products.\n \n To pursue good performance and quick achievement, the first generation of SQL parser uses `Druid` before 1.4.x version. As tested in practice, its performance exceeds other parsers a lot.\n \n The second generation of SQL parsing engine begins from 1.5.x version, ShardingSphere has adopted fully self-developed parsing engine ever since. Due to different purposes, ShardingSphere does not need to transform SQL into a totally abstract syntax tree or traverse twice through visitor. Using `half parsing` method, it only extracts the context required by data sharding, so the performance and compatibility of SQL parsing is further improved.\n \n-The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+The third generation of SQL parsing engine begins from 3.0.x version. ShardingSphere tries to adopts ANTLR as a generator for the SQL parsing engine, and uses Visit to obtain SQL Statement from AST. Starting from version 5.0.x, the architecture of the parsing engine has been refactored. At the same time, it is convenient to directly obtain the parsing results of the same SQL to improve parsing efficiency by putting the AST obtained from the first parsing into the cache. Therefore, we recommend that users adopt `PreparedStatement` this SQL pre-compilation method to improve performance. Currently, users can also use ShardingSphere's SQL parsing engine independently to obtain AST and SQL Statements for a variety of mainstream relational databases. In the future, the SQL parsing engine will continue to provide powerful functions such as SQL formatting and SQL templating.\n+\n+### Features\n+\n+* Independent SQL parsing engine\n+* Support multiple dialects\n+\n+| DB    | Status |\n+|----------|--------|\n+|MySQL     |supported|\n+|PostgreSQL|supported|\n+|SQLServer |supported|\n+|Oracle    |supported|\n+|SQL92     |supported|\n+\n+* SQL format (developing)\n+* SQL parameterize (developing)\n+\n+### Advantages\n+The syntax rules can be easily expanded and modified by using `ANTLR`\n+\n+### API Usage\n+\n+Maven config\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// According to the needs, introduce the parsing module of the specified dialect (take MySQL as an example)\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+demo:\n+\n+1. Get AST\n+\n+```\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMzQ3Mg=="}, "originalCommit": {"oid": "49764846a6d2e63d173df80f0b7cd7917955308d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDU4NDA5OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo0MjoyM1rOH0hGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo0MjoyM1rOH0hGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMDI0NQ==", "bodyText": "Since we did not include this feature in 5.0.0-alpha, please add (TODO) or remove this section.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r524830245", "createdAt": "2020-11-17T01:42:23Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,78 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539(\u4f7f\u7528\u4e86`ANTLR`)\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09,\u53ef\u4ee5\u6dfb\u52a0\u6240\u6709\u652f\u6301\u7684\u65b9\u8a00\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6dfb\u52a0\u4f7f\u7528\u5230\u7684\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+/**\n+     * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+     * sql type:String \u89e3\u6790\u7684SQL\n+     * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+     * @return parse tree\n+     */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+```\n+\n+2. \u83b7\u53d6SQLStatement\n+\n+```\n+/**\n+     * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+     * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+     * @return SQLStatement\n+     */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+SQLVisitorEngine sqlVisitorEngine = new SQLVisitorEngine(databaseType, \"STATEMENT\");\n+SQLStatement sqlFormarted = sqlVisitorEngine.visit(tree);\n+\n+```\n+\n+3. SQL \u683c\u5f0f\u5316", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3b3ffb479ee1ceaa3c98597abb15f2dfd0dc90"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDU4OTE3OnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo0NDozMFrOH0hI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo0NDozMFrOH0hI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMDk2OA==", "bodyText": "Line 100 is supposed to keep aligned with line 96.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r524830968", "createdAt": "2020-11-17T01:44:30Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,78 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539(\u4f7f\u7528\u4e86`ANTLR`)\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09,\u53ef\u4ee5\u6dfb\u52a0\u6240\u6709\u652f\u6301\u7684\u65b9\u8a00\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6dfb\u52a0\u4f7f\u7528\u5230\u7684\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+/**\n+     * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+     * sql type:String \u89e3\u6790\u7684SQL\n+     * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+     * @return parse tree\n+     */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+```\n+\n+2. \u83b7\u53d6SQLStatement\n+\n+```\n+/**\n+     * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+     * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+     * @return SQLStatement\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3b3ffb479ee1ceaa3c98597abb15f2dfd0dc90"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDYwNTMxOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo1MToyNlrOH0hSIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo1MToyNlrOH0hSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMzMxNA==", "bodyText": "The numbers 1, 2, 3  will confuse users that they have to operate them in ordinal. However, users can pick one of them once. Hence I suggest splitting them into 1  and 2/3 two sections, plus use * or - instead of the ordinals.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r524833314", "createdAt": "2020-11-17T01:51:26Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,78 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539(\u4f7f\u7528\u4e86`ANTLR`)\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09,\u53ef\u4ee5\u6dfb\u52a0\u6240\u6709\u652f\u6301\u7684\u65b9\u8a00\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6dfb\u52a0\u4f7f\u7528\u5230\u7684\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+1. \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+/**\n+     * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+     * sql type:String \u89e3\u6790\u7684SQL\n+     * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+     * @return parse tree\n+     */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+```\n+\n+2. \u83b7\u53d6SQLStatement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3b3ffb479ee1ceaa3c98597abb15f2dfd0dc90"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDk4ODQwOnYy", "diffSide": "RIGHT", "path": "docs/document/content/features/sharding/principle/parse.cn.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxNTo1MVrOH0ksxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzoyNzo0NlrOH0nXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTI4NA==", "bodyText": "sqlFormarted ?", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r524889284", "createdAt": "2020-11-17T05:15:51Z", "author": {"login": "tristaZero"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,65 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539(\u4f7f\u7528\u4e86`ANTLR`)\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09,\u53ef\u4ee5\u6dfb\u52a0\u6240\u6709\u652f\u6301\u7684\u65b9\u8a00\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6dfb\u52a0\u4f7f\u7528\u5230\u7684\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+- \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+/**\n+ * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+ * sql type:String \u89e3\u6790\u7684SQL\n+ * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+ * @return parse tree\n+ */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+```\n+\n+- \u83b7\u53d6SQLStatement\n+\n+```\n+/**\n+ * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+ * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+ * @return SQLStatement\n+ */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+SQLVisitorEngine sqlVisitorEngine = new SQLVisitorEngine(databaseType, \"STATEMENT\");\n+SQLStatement sqlFormarted = sqlVisitorEngine.visit(tree);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda2f73710d1572c280c37072bc58c9b4bd8d2bf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMjk0Mg==", "bodyText": "@tristaZero I'll change it.", "url": "https://github.com/apache/shardingsphere/pull/8138#discussion_r524932942", "createdAt": "2020-11-17T07:27:46Z", "author": {"login": "jingshanglu"}, "path": "docs/document/content/features/sharding/principle/parse.cn.md", "diffHunk": "@@ -39,4 +41,65 @@ ShardingSphere \u7684 SQL \u89e3\u6790\u5668\u7ecf\u5386\u4e86 3 \u4ee3\u4ea7\u54c1\u7684\u66f4\u65b0\u8fed\u4ee3\u3002\n \u7b2c\u4e8c\u4ee3 SQL \u89e3\u6790\u5668\u4ece 1.5.x \u7248\u672c\u5f00\u59cb\uff0cShardingSphere \u91c7\u7528\u5b8c\u5168\u81ea\u7814\u7684 SQL \u89e3\u6790\u5f15\u64ce\u3002\n \u7531\u4e8e\u76ee\u7684\u4e0d\u540c\uff0cShardingSphere \u5e76\u4e0d\u9700\u8981\u5c06 SQL \u8f6c\u4e3a\u4e00\u9897\u5b8c\u5168\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4e5f\u65e0\u9700\u901a\u8fc7\u8bbf\u95ee\u5668\u6a21\u5f0f\u8fdb\u884c\u4e8c\u6b21\u904d\u5386\u3002\u5b83\u91c7\u7528\u5bf9 SQL `\u534a\u7406\u89e3`\u7684\u65b9\u5f0f\uff0c\u4ec5\u63d0\u70bc\u6570\u636e\u5206\u7247\u9700\u8981\u5173\u6ce8\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64 SQL \u89e3\u6790\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u5f97\u5230\u4e86\u8fdb\u4e00\u6b65\u7684\u63d0\u9ad8\u3002\n \n-\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\u5f53\u524d\uff0c\u7528\u6237\u8fd8\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 ShardingSphere \u7684 SQL \u89e3\u6790\u5f15\u64ce\uff0c\u83b7\u5f97\u591a\u6b3e\u4e3b\u6d41\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 AST \u53ca SQL Statement\u3002 \u672a\u6765\uff0cSQL \u89e3\u6790\u5f15\u64ce\u5c06\u7ee7\u7eed\u63d0\u4f9b SQL \u683c\u5f0f\u5316\u3001 SQL \u6a21\u677f\u5316\u7b49\u5f3a\u5927\u7684\u529f\u80fd\u3002\n+\u7b2c\u4e09\u4ee3 SQL \u89e3\u6790\u5668\u4ece 3.0.x \u7248\u672c\u5f00\u59cb\uff0c\u5c1d\u8bd5\u4f7f\u7528 ANTLR \u4f5c\u4e3a SQL \u89e3\u6790\u5f15\u64ce \u7684\u751f\u6210\u5668\uff0c\u5e76\u91c7\u7528 Visit \u7684\u65b9\u5f0f\u4ece AST \u4e2d\u83b7\u53d6 SQL Statement\u3002\u4ece5.0.x \u7248\u672c\u5f00\u59cb\uff0c\u89e3\u6790\u5f15\u64ce\u7684\u67b6\u6784\u5df2\u5b8c\u6210\u91cd\u6784\u8c03\u6574\uff0c\u540c\u65f6\u901a\u8fc7\u5c06\u7b2c\u4e00\u6b21\u89e3\u6790\u7684\u5f97\u5230\u7684 AST \u653e\u5165\u7f13\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u76f4\u63a5\u83b7\u53d6\u76f8\u540c  SQL\u7684\u89e3\u6790\u7ed3\u679c\uff0c\u6765\u63d0\u9ad8\u89e3\u6790\u6548\u7387\u3002 \u56e0\u6b64\u6211\u4eec\u5efa\u8bae\u7528\u6237\u91c7\u7528 `PreparedStatement` \u8fd9\u79cd SQL \u9884\u7f16\u8bd1\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6027\u80fd\u3002\n+\n+### \u529f\u80fd\u70b9\n+\n+* \u63d0\u4f9b\u72ec\u7acb\u7684SQL\u89e3\u6790\u529f\u80fd\n+* \u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5bf9\u8bed\u6cd5\u89c4\u5219\u8fdb\u884c\u6269\u5145\u548c\u4fee\u6539(\u4f7f\u7528\u4e86`ANTLR`)\n+* \u652f\u6301\u591a\u79cd\u65b9\u8a00\u7684SQL\u89e3\u6790\n+\n+| \u6570\u636e\u5e93    | \u652f\u6301\u72b6\u6001 |\n+|----------|--------|\n+|MySQL     |\u652f\u6301\uff0c\u5b8c\u5584|\n+|PostgreSQL|\u652f\u6301\uff0c\u5b8c\u5584|\n+|SQLServer |\u652f\u6301     |\n+|Oracle    |\u652f\u6301     |\n+|SQL92     |\u652f\u6301     |\n+* \u63d0\u4f9bSQL\u683c\u5f0f\u5316\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+* \u63d0\u4f9bSQL\u6a21\u677f\u8bdd\u529f\u80fd\uff08\u5f00\u53d1\u4e2d\uff09\n+\n+### API\u4f7f\u7528\n+\n+\u5f15\u5165Maven\u4f9d\u8d56\n+```\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-engine</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+// \u6839\u636e\u9700\u8981\u5f15\u5165\u6307\u5b9a\u65b9\u8a00\u7684\u89e3\u6790\u6a21\u5757\uff08\u4ee5MySQL\u4e3a\u4f8b\uff09,\u53ef\u4ee5\u6dfb\u52a0\u6240\u6709\u652f\u6301\u7684\u65b9\u8a00\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6dfb\u52a0\u4f7f\u7528\u5230\u7684\n+<dependency>\n+    <groupId>org.apache.shardingsphere</groupId>\n+    <artifactId>shardingsphere-sql-parser-mysql</artifactId>\n+    <version>${project.version}</version>\n+</dependency>\n+```\n+\n+\u4f8b\u5b50\n+\n+- \u83b7\u53d6\u8bed\u6cd5\u6811\n+\n+```\n+/**\n+ * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+ * sql type:String \u89e3\u6790\u7684SQL\n+ * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+ * @return parse tree\n+ */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+```\n+\n+- \u83b7\u53d6SQLStatement\n+\n+```\n+/**\n+ * databaseType type:String \u53ef\u80fd\u503c MySQL,Oracle\uff0cPostgreSQL\uff0cSQL92\uff0cSQLServer\n+ * useCache type:boolean \u662f\u5426\u4f7f\u7528\u7f13\u5b58\n+ * @return SQLStatement\n+ */\n+ParseTree tree = new SQLParserEngine(databaseType).parse(sql, useCache); \n+SQLVisitorEngine sqlVisitorEngine = new SQLVisitorEngine(databaseType, \"STATEMENT\");\n+SQLStatement sqlFormarted = sqlVisitorEngine.visit(tree);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTI4NA=="}, "originalCommit": {"oid": "cda2f73710d1572c280c37072bc58c9b4bd8d2bf"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 593, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}