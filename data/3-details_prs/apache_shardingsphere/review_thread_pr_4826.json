{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzQwMzI0", "number": 4826, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1MzowNFrODpDz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoyMjowMFrODpWNpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzgwNjcwOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1MzowNFrOF3_pQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1OToyOVrOF3_3pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODc1NQ==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394258755", "createdAt": "2020-03-18T10:53:04Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                errorMetaDataList.add(new String[] {entry.getKey(), entryValue.toString()});\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MjQzNw==", "bodyText": "okay", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394262437", "createdAt": "2020-03-18T10:59:29Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                errorMetaDataList.add(new String[] {entry.getKey(), entryValue.toString()});\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODc1NQ=="}, "originalCommit": {"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzgxNjA1OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1NTozN1rOF3_vGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjowMDoyMlrOF4Bzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA==", "bodyText": "The design List<String[]> is not clear, could you consider about define an object to process it?", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394260250", "createdAt": "2020-03-18T10:55:37Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2NTEyOA==", "bodyText": "yeah, from understanding and readable, I think define an object is better.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394265128", "createdAt": "2020-03-18T11:04:27Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA=="}, "originalCommit": {"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5NDEyMw==", "bodyText": "I've defined a new class name of \"TableMetaDataViolation\" for upon problem, review again, pls, thanks.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394294123", "createdAt": "2020-03-18T12:00:22Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<String[]> errorMetaDataList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MDI1MA=="}, "originalCommit": {"oid": "a741baf4485eeea27828ef37878d7f71f37bd32b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDE1NzEwOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0MToyOVrOF4DKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo0NDowN1rOF4DPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjI5OQ==", "bodyText": "why add a new class?", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394316299", "createdAt": "2020-03-18T12:41:29Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNzcxNQ==", "bodyText": "This entity only used in one method, an inner class is better.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394317715", "createdAt": "2020-03-18T12:44:07Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNjI5OQ=="}, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDIzNzU2OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNDowMlrOF4D9iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoyNTozM1rOF4Ex_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTQ4Mw==", "bodyText": "How about use @RequiredArgsConstructor? It is better for final with fields.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394329483", "createdAt": "2020-03-18T13:04:02Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MjkwOQ==", "bodyText": "It couldn't be final fields, because the fields would be set value in that method.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394342909", "createdAt": "2020-03-18T13:25:33Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/TableMetaDataViolation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.metadata;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.shardingsphere.sql.parser.binder.metadata.table.TableMetaData;\n+\n+/**\n+ * Violations holder for checking uniformed table meta data.\n+ */\n+@AllArgsConstructor\n+@Getter\n+class TableMetaDataViolation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyOTQ4Mw=="}, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI0MjI3OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNToxNFrOF4EAcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNToxNFrOF4EAcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDIyNw==", "bodyText": "It is better to add a space after symbol, such as , and :", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394330227", "createdAt": "2020-03-18T13:05:14Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            }\n+        }\n+        if (!metaDataViolationList.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`\"\n+                    + \",it has different meta data of actual tables are as follows:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI0NjQ4OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjoyNFrOF4EDHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjoyNFrOF4EDHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDkwOA==", "bodyText": "If for each only, maybe we can replace List as Collection", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394330908", "createdAt": "2020-03-18T13:06:24Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI0Nzk1OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjo0OVrOF4EEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjo0OVrOF4EEDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTE0OQ==", "bodyText": "violations is better than metaDataViolationList", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394331149", "createdAt": "2020-03-18T13:06:49Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI1MTE5OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNzo0MFrOF4EGEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNzo0MFrOF4EGEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTY2NA==", "bodyText": "How about just named entryValue as tableMetaData directly?", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394331664", "createdAt": "2020-03-18T13:07:40Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI1MzgzOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowODoyMFrOF4EHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowODoyMFrOF4EHyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMjEwNg==", "bodyText": "It is better to extract a new private method here", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394332106", "createdAt": "2020-03-18T13:08:20Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +104,25 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        List<TableMetaDataViolation> metaDataViolationList = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData entryValue = entry.getValue();\n+            if (!sample.equals(decorator.decorate(entryValue, logicTableName, shardingRule))) {\n+                metaDataViolationList.add(new TableMetaDataViolation(entry.getKey(), entryValue));\n+            }\n+        }\n+        if (!metaDataViolationList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4459d23ce44e7d83567bc759a6f8eb20a0a419"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDY0MjczOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0MDowN1rOF4IFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMDo1M1rOF4JEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NzA2Mg==", "bodyText": "why add accessLevel", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394397062", "createdAt": "2020-03-18T14:40:07Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n     }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n+            }\n+            throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n+        }\n+    }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "574420f43c042f3243e7af63c8daf067b791dadc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMzE5OA==", "bodyText": "removed already.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394413198", "createdAt": "2020-03-18T15:00:53Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();\n+        compareAllTableMetaData(metaDataViolations, sample, decorator, logicTableName, actualTableMetaDataMap);\n+        throwExceptionIfNecessary(metaDataViolations, logicTableName);\n+    }\n+\n+    private void compareAllTableMetaData(final Collection<TableMetaDataViolation> metaDataViolations, final TableMetaData sample,\n+                      final ShardingTableMetaDataDecorator decorator, final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();\n+            if (!sample.equals(decorator.decorate(tableMetaData, logicTableName, shardingRule))) {\n+                metaDataViolations.add(new TableMetaDataViolation(entry.getKey(), tableMetaData));\n             }\n         }\n     }\n+\n+    private void throwExceptionIfNecessary(final Collection<TableMetaDataViolation> metaDataViolations, final String logicTableName) {\n+        if (!metaDataViolations.isEmpty()) {\n+            StringBuilder exceptionMessageBuilder = new StringBuilder(\"Cannot get uniformed table structure for logic table `%s`,\"\n+                    + \" it has different meta data of actual tables are as follows: \");\n+            for (TableMetaDataViolation each : metaDataViolations) {\n+                exceptionMessageBuilder.append(\"\\nactual table: \").append(each.getActualTableName())\n+                        .append(\", meta data: \").append(each.getTableMetaData());\n+            }\n+            throw new ShardingSphereException(exceptionMessageBuilder.toString(), logicTableName);\n+        }\n+    }\n+\n+    @AllArgsConstructor(access = AccessLevel.PACKAGE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NzA2Mg=="}, "originalCommit": {"oid": "574420f43c042f3243e7af63c8daf067b791dadc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDY1NzA0OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0MzoxNVrOF4IPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDoxMToxOFrOF4fhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5OTQ4OQ==", "bodyText": "Collection should be LinkedList.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394399489", "createdAt": "2020-03-18T14:43:15Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "574420f43c042f3243e7af63c8daf067b791dadc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MDk5OA==", "bodyText": "Be avoid using get(i) form to iterate operation affect performance, we suggest defining collection type still.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394780998", "createdAt": "2020-03-19T04:11:18Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,43 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> metaDataViolations = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5OTQ4OQ=="}, "originalCommit": {"oid": "574420f43c042f3243e7af63c8daf067b791dadc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjgyMTUxOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjoyMjowMFrOF4d6FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNDoxMzoxNlrOF4fi5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDU4MA==", "bodyText": "unnecessary variable", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394754580", "createdAt": "2020-03-19T02:22:00Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,37 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> violations = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76735b3e36a1108075e6d1e890d24384f9f24ad0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTQxNA==", "bodyText": "OK, it was removed.", "url": "https://github.com/apache/shardingsphere/pull/4826#discussion_r394781414", "createdAt": "2020-03-19T04:13:16Z", "author": {"login": "JasonKing168"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/metadata/ShardingMetaDataLoader.java", "diffHunk": "@@ -103,17 +108,37 @@ private SchemaMetaData loadDefaultSchemaMetaData() throws SQLException {\n         return actualDefaultDataSourceName.isPresent()\n                 ? SchemaMetaDataLoader.load(dataSourceMap.get(actualDefaultDataSourceName.get()), maxConnectionsSizePerQuery) : new SchemaMetaData(Collections.emptyMap());\n     }\n-    \n-    // TODO check all meta data in once\n+\n     private void checkUniformed(final String logicTableName, final Map<String, TableMetaData> actualTableMetaDataMap) {\n         ShardingTableMetaDataDecorator decorator = new ShardingTableMetaDataDecorator();\n         TableMetaData sample = decorator.decorate(actualTableMetaDataMap.values().iterator().next(), logicTableName, shardingRule);\n+        Collection<TableMetaDataViolation> violations = new LinkedList<>();\n         for (Entry<String, TableMetaData> entry : actualTableMetaDataMap.entrySet()) {\n-            if (!sample.equals(decorator.decorate(entry.getValue(), logicTableName, shardingRule))) {\n-                throw new ShardingSphereException(\n-                        \"Cannot get uniformed table structure for logic table `%s` and actual table `%s`. The different meta data of actual tables are as follows:\\n%s\\n%s.\",\n-                        logicTableName, entry.getKey(), sample, entry.getValue());\n+            TableMetaData tableMetaData = entry.getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc1NDU4MA=="}, "originalCommit": {"oid": "76735b3e36a1108075e6d1e890d24384f9f24ad0"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1137, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}