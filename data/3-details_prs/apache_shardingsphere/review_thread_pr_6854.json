{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjQxNDMw", "number": 6854, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMDo1NVrOEYqIiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMTozMlrOEYqIvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjkxNTkyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/test/java/org/apache/shardingsphere/encrypt/yaml/swapper/rule/EncryptTableRuleConfigurationYamlSwapperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMDo1NVrOHBHGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMDo1NVrOHBHGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjkxMA==", "bodyText": "The variable should be actualColumns", "url": "https://github.com/apache/shardingsphere/pull/6854#discussion_r470926910", "createdAt": "2020-08-15T02:30:55Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/test/java/org/apache/shardingsphere/encrypt/yaml/swapper/rule/EncryptTableRuleConfigurationYamlSwapperTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.encrypt.yaml.swapper.rule;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptTableRuleConfiguration;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+public final class EncryptTableRuleConfigurationYamlSwapperTest {\n+    \n+    private final EncryptTableRuleConfigurationYamlSwapper tableRuleConfigYamlSwapper = new EncryptTableRuleConfigurationYamlSwapper();\n+    \n+    @Test\n+    public void assertSwapToYamlConfiguration() {\n+        Collection<EncryptColumnRuleConfiguration> encryptColumnRuleConfigCollection =\n+            Lists.newArrayList(\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_1\", \"encrypt_cipher_1\", \"\", \"\", \"test_encrypto_1r\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_2\", \"encrypt_cipher_2\", \"\", \"\", \"test_encryptor_2\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_3\", \"encrypt_cipher_3\", \"\", \"\", \"test_encryptor_3\")\n+              );\n+        EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration(\"test_table\", encryptColumnRuleConfigCollection);\n+        YamlEncryptTableRuleConfiguration actualYamlEncryptTableRuleConfig = tableRuleConfigYamlSwapper.swapToYamlConfiguration(encryptTableRuleConfig);\n+        assertNotNull(actualYamlEncryptTableRuleConfig);\n+        assertFalse(actualYamlEncryptTableRuleConfig.getColumns().isEmpty());\n+        assertThat(actualYamlEncryptTableRuleConfig.getColumns().size(), is(3));\n+    }\n+    \n+    @Test\n+    public void assertSwapToObject() {\n+        YamlEncryptColumnRuleConfiguration encryptColumnRuleConfig = new YamlEncryptColumnRuleConfiguration();\n+        encryptColumnRuleConfig.setLogicColumn(\"encrypt_column\");\n+        encryptColumnRuleConfig.setCipherColumn(\"encrypt_cipher\");\n+        encryptColumnRuleConfig.setAssistedQueryColumn(\"encrypt_assisted\");\n+        encryptColumnRuleConfig.setPlainColumn(\"encrypt_plain\");\n+        encryptColumnRuleConfig.setEncryptorName(\"test_encryptor\");\n+        Map<String, YamlEncryptColumnRuleConfiguration> columns = new LinkedHashMap<>(1);\n+        columns.put(\"test_column\", encryptColumnRuleConfig);\n+        YamlEncryptTableRuleConfiguration yamlEncryptTableRuleConfig = new YamlEncryptTableRuleConfiguration();\n+        yamlEncryptTableRuleConfig.setName(\"test_table\");\n+        yamlEncryptTableRuleConfig.setColumns(columns);\n+        EncryptTableRuleConfiguration actualEncryptTableRuleConfig = tableRuleConfigYamlSwapper.swapToObject(yamlEncryptTableRuleConfig);\n+        assertNotNull(actualEncryptTableRuleConfig);\n+        assertThat(actualEncryptTableRuleConfig.getName(), is(\"test_table\"));\n+        Collection<EncryptColumnRuleConfiguration> actualColumn = actualEncryptTableRuleConfig.getColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a8c79273ff931c4164f4a7c0b4c5d6216ddc130"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjkxNjQ1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/test/java/org/apache/shardingsphere/encrypt/yaml/swapper/rule/EncryptTableRuleConfigurationYamlSwapperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMTozMlrOHBHGfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzowOToxNVrOHBHSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjk3Mg==", "bodyText": "Please add more assertions of columns content", "url": "https://github.com/apache/shardingsphere/pull/6854#discussion_r470926972", "createdAt": "2020-08-15T02:31:32Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/test/java/org/apache/shardingsphere/encrypt/yaml/swapper/rule/EncryptTableRuleConfigurationYamlSwapperTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.encrypt.yaml.swapper.rule;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptTableRuleConfiguration;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+public final class EncryptTableRuleConfigurationYamlSwapperTest {\n+    \n+    private final EncryptTableRuleConfigurationYamlSwapper tableRuleConfigYamlSwapper = new EncryptTableRuleConfigurationYamlSwapper();\n+    \n+    @Test\n+    public void assertSwapToYamlConfiguration() {\n+        Collection<EncryptColumnRuleConfiguration> encryptColumnRuleConfigCollection =\n+            Lists.newArrayList(\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_1\", \"encrypt_cipher_1\", \"\", \"\", \"test_encrypto_1r\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_2\", \"encrypt_cipher_2\", \"\", \"\", \"test_encryptor_2\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_3\", \"encrypt_cipher_3\", \"\", \"\", \"test_encryptor_3\")\n+              );\n+        EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration(\"test_table\", encryptColumnRuleConfigCollection);\n+        YamlEncryptTableRuleConfiguration actualYamlEncryptTableRuleConfig = tableRuleConfigYamlSwapper.swapToYamlConfiguration(encryptTableRuleConfig);\n+        assertNotNull(actualYamlEncryptTableRuleConfig);\n+        assertFalse(actualYamlEncryptTableRuleConfig.getColumns().isEmpty());\n+        assertThat(actualYamlEncryptTableRuleConfig.getColumns().size(), is(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a8c79273ff931c4164f4a7c0b4c5d6216ddc130"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMDAyOQ==", "bodyText": "Please add more assertions of columns content\n\nok, I will add more assertions of columns content", "url": "https://github.com/apache/shardingsphere/pull/6854#discussion_r470930029", "createdAt": "2020-08-15T03:09:15Z", "author": {"login": "jacksparrow414"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/test/java/org/apache/shardingsphere/encrypt/yaml/swapper/rule/EncryptTableRuleConfigurationYamlSwapperTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.encrypt.yaml.swapper.rule;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.rule.YamlEncryptTableRuleConfiguration;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+public final class EncryptTableRuleConfigurationYamlSwapperTest {\n+    \n+    private final EncryptTableRuleConfigurationYamlSwapper tableRuleConfigYamlSwapper = new EncryptTableRuleConfigurationYamlSwapper();\n+    \n+    @Test\n+    public void assertSwapToYamlConfiguration() {\n+        Collection<EncryptColumnRuleConfiguration> encryptColumnRuleConfigCollection =\n+            Lists.newArrayList(\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_1\", \"encrypt_cipher_1\", \"\", \"\", \"test_encrypto_1r\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_2\", \"encrypt_cipher_2\", \"\", \"\", \"test_encryptor_2\"),\n+                new EncryptColumnRuleConfiguration(\"encrypt_column_3\", \"encrypt_cipher_3\", \"\", \"\", \"test_encryptor_3\")\n+              );\n+        EncryptTableRuleConfiguration encryptTableRuleConfig = new EncryptTableRuleConfiguration(\"test_table\", encryptColumnRuleConfigCollection);\n+        YamlEncryptTableRuleConfiguration actualYamlEncryptTableRuleConfig = tableRuleConfigYamlSwapper.swapToYamlConfiguration(encryptTableRuleConfig);\n+        assertNotNull(actualYamlEncryptTableRuleConfig);\n+        assertFalse(actualYamlEncryptTableRuleConfig.getColumns().isEmpty());\n+        assertThat(actualYamlEncryptTableRuleConfig.getColumns().size(), is(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjk3Mg=="}, "originalCommit": {"oid": "5a8c79273ff931c4164f4a7c0b4c5d6216ddc130"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 351, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}