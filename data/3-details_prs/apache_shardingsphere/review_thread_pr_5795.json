{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTY0Mzg0", "number": 5795, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzozNDoyNFrOD_guiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzozNjoyOVrOD_gvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTIzMDgwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzozNDoyNFrOGaNnPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzo0OToxNFrOGaNx9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTE5OQ==", "bodyText": "log ex", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430139199", "createdAt": "2020-05-26T03:34:24Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.cluster;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+\n+import org.apache.shardingsphere.cluster.facade.ClusterFacade;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResponse;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResult;\n+import org.apache.shardingsphere.proxy.backend.schema.ShardingSphereSchema;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Collection;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Heart beat handler.\n+ */\n+public final class HeartbeatHandler {\n+    \n+    private HeartbeatConfiguration configuration;\n+    \n+    /**\n+     * Init heart beat handler.\n+     *\n+     * @param configuration heart beat configuration\n+     */\n+    public void init(final HeartbeatConfiguration configuration) {\n+        Preconditions.checkNotNull(configuration, \"heart beat configuration can not be null.\");\n+        this.configuration = configuration;\n+    }\n+    \n+    /**\n+     * Get heart beat handler instance.\n+     *\n+     * @return heart beat handler instance\n+     */\n+    public static HeartbeatHandler getInstance() {\n+        return HeartbeatHandlerHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Handle heart beat detect event.\n+     *\n+     * @param schemas ShardingSphere schemas\n+     */\n+    public void handle(final Map<String, ShardingSphereSchema> schemas) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(countDataSource(schemas));\n+        List<FutureTask<Map<String, HeartbeatResult>>> futureTasks = new ArrayList<>();\n+        schemas.values().forEach(value -> value.getBackendDataSource().getDataSources().entrySet().forEach(entry -> {\n+            FutureTask<Map<String, HeartbeatResult>> futureTask = new FutureTask<>(new HeartbeatDetect(value.getName(), entry.getKey(),\n+                    entry.getValue(), configuration));\n+            futureTasks.add(futureTask);\n+            executorService.submit(futureTask);\n+        }));\n+        reportHeartbeat(futureTasks);\n+        closeExecutor(executorService);\n+    }\n+    \n+    private Integer countDataSource(final Map<String, ShardingSphereSchema> schemas) {\n+        return Long.valueOf(schemas.values().stream().\n+                collect(Collectors.summarizingInt(entry -> entry.getBackendDataSource().\n+                        getDataSources().keySet().size())).getSum()).intValue();\n+    }\n+    \n+    private void reportHeartbeat(final List<FutureTask<Map<String, HeartbeatResult>>> futureTasks) {\n+        Map<String, Collection<HeartbeatResult>> heartbeatResultMap = new HashMap<>();\n+        futureTasks.stream().forEach(each -> {\n+            try {\n+                each.get().entrySet().forEach(entry -> {\n+                    if (Objects.isNull(heartbeatResultMap.get(entry.getKey()))) {\n+                        heartbeatResultMap.put(entry.getKey(), new ArrayList<>(Arrays.asList(entry.getValue())));\n+                    } else {\n+                        heartbeatResultMap.get(entry.getKey()).add(entry.getValue());\n+                    }\n+                });\n+            } catch (InterruptedException ex) {\n+            ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec7c109abc172c010316fb8e97f58c64d1c1bd1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MTk0Mg==", "bodyText": "got it.", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430141942", "createdAt": "2020-05-26T03:49:14Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/cluster/HeartbeatHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.cluster;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+\n+import org.apache.shardingsphere.cluster.facade.ClusterFacade;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResponse;\n+import org.apache.shardingsphere.cluster.heartbeat.response.HeartbeatResult;\n+import org.apache.shardingsphere.proxy.backend.schema.ShardingSphereSchema;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Collection;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Heart beat handler.\n+ */\n+public final class HeartbeatHandler {\n+    \n+    private HeartbeatConfiguration configuration;\n+    \n+    /**\n+     * Init heart beat handler.\n+     *\n+     * @param configuration heart beat configuration\n+     */\n+    public void init(final HeartbeatConfiguration configuration) {\n+        Preconditions.checkNotNull(configuration, \"heart beat configuration can not be null.\");\n+        this.configuration = configuration;\n+    }\n+    \n+    /**\n+     * Get heart beat handler instance.\n+     *\n+     * @return heart beat handler instance\n+     */\n+    public static HeartbeatHandler getInstance() {\n+        return HeartbeatHandlerHolder.INSTANCE;\n+    }\n+    \n+    /**\n+     * Handle heart beat detect event.\n+     *\n+     * @param schemas ShardingSphere schemas\n+     */\n+    public void handle(final Map<String, ShardingSphereSchema> schemas) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(countDataSource(schemas));\n+        List<FutureTask<Map<String, HeartbeatResult>>> futureTasks = new ArrayList<>();\n+        schemas.values().forEach(value -> value.getBackendDataSource().getDataSources().entrySet().forEach(entry -> {\n+            FutureTask<Map<String, HeartbeatResult>> futureTask = new FutureTask<>(new HeartbeatDetect(value.getName(), entry.getKey(),\n+                    entry.getValue(), configuration));\n+            futureTasks.add(futureTask);\n+            executorService.submit(futureTask);\n+        }));\n+        reportHeartbeat(futureTasks);\n+        closeExecutor(executorService);\n+    }\n+    \n+    private Integer countDataSource(final Map<String, ShardingSphereSchema> schemas) {\n+        return Long.valueOf(schemas.values().stream().\n+                collect(Collectors.summarizingInt(entry -> entry.getBackendDataSource().\n+                        getDataSources().keySet().size())).getSum()).intValue();\n+    }\n+    \n+    private void reportHeartbeat(final List<FutureTask<Map<String, HeartbeatResult>>> futureTasks) {\n+        Map<String, Collection<HeartbeatResult>> heartbeatResultMap = new HashMap<>();\n+        futureTasks.stream().forEach(each -> {\n+            try {\n+                each.get().entrySet().forEach(entry -> {\n+                    if (Objects.isNull(heartbeatResultMap.get(entry.getKey()))) {\n+                        heartbeatResultMap.put(entry.getKey(), new ArrayList<>(Arrays.asList(entry.getValue())));\n+                    } else {\n+                        heartbeatResultMap.get(entry.getKey()).add(entry.getValue());\n+                    }\n+                });\n+            } catch (InterruptedException ex) {\n+            ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTE5OQ=="}, "originalCommit": {"oid": "aec7c109abc172c010316fb8e97f58c64d1c1bd1"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTIzMzU3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzozNjoyOVrOGaNo5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMzozNjoyOVrOGaNo5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTYyMA==", "bodyText": "heartbeat", "url": "https://github.com/apache/shardingsphere/pull/5795#discussion_r430139620", "createdAt": "2020-05-26T03:36:29Z", "author": {"login": "kimmking"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/schema/ShardingSphereSchemas.java", "diffHunk": "@@ -142,4 +146,14 @@ public synchronized void renew(final SchemaAddedEvent schemaAddedEvent) throws S\n     public synchronized void renew(final SchemaDeletedEvent schemaDeletedEvent) {\n         schemas.remove(schemaDeletedEvent.getShardingSchemaName());\n     }\n+    \n+    /**\n+     * Heart beat detect.\n+     *\n+     * @param event heart beat detect notice event\n+     */\n+    @Subscribe\n+    public synchronized void heartBeat(final HeartbeatDetectNoticeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec7c109abc172c010316fb8e97f58c64d1c1bd1"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 813, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}