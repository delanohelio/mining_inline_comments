{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzU2Njcz", "number": 4945, "title": "make key-generator as a spring bean on spring namespace.", "bodyText": "Fixes #1977.\nChanges proposed in this pull request:\n\n[\u2713] change shardingNamespace.xml configuration.\n[\u2713] create class KeyGeneratorFactoryBean extends TypeBasedSPIConfiguration  implements FactoryBean<ShardingKeyGenerator>,leverage\u00a0FactoryBean\u00a0to create KeyGenerator.\n[\u2713] modify class KeyGeneratorConfigurationextends TypeBasedSPIConfiguration\uff0cadd member variables ShardingKeyGenerator keyGenerator.\n[\u2713] modify class KeyGeneratorBeanDefinitionParser addConstructorArgReference with KeyGenerator by using TAG generator-ref.\n[\u2713] modify class TableRule, shardingKeyGenerator=tableRuleConfig.getKeyGeneratorConfig().getKeyGenerator().\n[\u2713] modify class ShardingRule, use keyGeneratorConfiguration.getKeyGenerator() instead of create by ShardingKeyGeneratorServiceLoader.\n[\u2713] modify correlative tests, add test on ShardingKeyGenerator Bean.", "createdAt": "2020-03-25T18:30:07Z", "url": "https://github.com/apache/shardingsphere/pull/4945", "merged": true, "mergeCommit": {"oid": "921c9404d8b7c461f96b99f6b9830c7a56918b09"}, "closed": true, "closedAt": "2020-03-31T03:48:07Z", "author": {"login": "TaoZhiMLND"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRRUY1gFqTM4MTYzNDQ4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS6zPhgFqTM4NDM4MzYxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjM0NDg3", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-381634487", "createdAt": "2020-03-26T00:47:50Z", "commit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0Nzo1MVrOF7zl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo1MzoyMlrOF7zrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTU5NQ==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255595", "createdAt": "2020-03-26T00:47:51Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -130,9 +130,9 @@ private void addActualTable(final String datasourceName, final String tableName)\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final TableRuleConfiguration tableRuleConfiguration) {\n-        return null != tableRuleConfiguration.getKeyGeneratorConfig() && !Strings.isNullOrEmpty(tableRuleConfiguration.getKeyGeneratorConfig().getType());\n+        return null != tableRuleConfiguration.getKeyGeneratorConfig() && null != tableRuleConfiguration.getKeyGeneratorConfig().getKeyGenerator();\n     }\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTYxNQ==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255615", "createdAt": "2020-03-26T00:47:55Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -217,10 +217,10 @@ private void checkRule(final List<String> dataNodes) {\n             throw new ShardingSphereConfigurationException(\"ActualDataNodes must be configured if want to shard tables for logicTable [%s]\", logicTable);\n         }\n     }\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTYzMg==", "bodyText": "keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398255632", "createdAt": "2020-03-26T00:48:00Z", "author": {"login": "kimmking"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -217,10 +217,10 @@ private void checkRule(final List<String> dataNodes) {\n             throw new ShardingSphereConfigurationException(\"ActualDataNodes must be configured if want to shard tables for logicTable [%s]\", logicTable);\n         }\n     }\n-    \n+\n     /**\n      * Get generate key column.\n-     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NjQ1MA==", "bodyText": "keep origin indent", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398256450", "createdAt": "2020-03-26T00:51:04Z", "author": {"login": "kimmking"}, "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/shardingNamespace.xml", "diffHunk": "@@ -17,18 +17,19 @@\n   -->\n \n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:master-slave=\"http://shardingsphere.apache.org/schema/shardingsphere/masterslave\"\n-       xmlns:sharding=\"http://shardingsphere.apache.org/schema/shardingsphere/sharding\"\n-       xmlns:bean=\"http://www.springframework.org/schema/util\"\n-       xmlns:encrypt=\"http://shardingsphere.apache.org/schema/shardingsphere/encrypt\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NzA1Mw==", "bodyText": "is there will be puzzle to users:\na key-generator  and referred a XXKeyGenerator \uff1f", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r398257053", "createdAt": "2020-03-26T00:53:22Z", "author": {"login": "kimmking"}, "path": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/test/resources/META-INF/rdb/withNamespaceGenerateKeyColumns.xml", "diffHunk": "@@ -31,10 +31,18 @@\n     \n     <sharding:standard-strategy id=\"databaseStrategy\" sharding-column=\"user_id\" precise-algorithm-ref=\"preciseModuloDatabaseShardingAlgorithm\" />\n     <sharding:standard-strategy id=\"tableStrategy\" sharding-column=\"order_id\" precise-algorithm-ref=\"preciseModuloTableShardingAlgorithm\" />\n-    \n-    <sharding:key-generator id=\"defaultKeyGenerator\" type=\"INCREMENT\" column=\"id\" />\n-    <sharding:key-generator id=\"itemKeyGenerator\" type=\"DECREMENT\" column=\"order_item_id\" />\n-    <sharding:key-generator id=\"orderKeyGenerator\" type=\"INCREMENT\" column=\"order_id\" />\n+\n+    <bean id=\"incrementKeyGenerator\" class=\"org.apache.shardingsphere.shardingjdbc.spring.namespace.factorybean.KeyGeneratorFactoryBean\">\n+        <constructor-arg value=\"INCREMENT\"/>\n+    </bean>\n+\n+    <bean id=\"decrementKeyGenerator\" class=\"org.apache.shardingsphere.shardingjdbc.spring.namespace.factorybean.KeyGeneratorFactoryBean\">\n+        <constructor-arg value=\"DECREMENT\"/>\n+    </bean>\n+\n+    <sharding:key-generator id=\"defaultKeyGenerator\" column=\"id\" generator-ref=\"incrementKeyGenerator\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88f59c607141924effa6d506704d851d9479e5ee"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI0Mjk2", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-381924296", "createdAt": "2020-03-26T11:36:48Z", "commit": {"oid": "3df4a41e7dd1cc4ca4512038db172b5e4e70392c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI0MzMx", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-381924331", "createdAt": "2020-03-26T11:36:51Z", "commit": {"oid": "3df4a41e7dd1cc4ca4512038db172b5e4e70392c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjg2ODEx", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-382686811", "createdAt": "2020-03-27T09:14:08Z", "commit": {"oid": "fe90913711b0aa5c4bfb35baad8dc8ea0a515101"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxNDowOVrOF8ovew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOToxNDowOVrOF8ovew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNjM5NQ==", "bodyText": "here we should rename ShardingKeyGenerator SPI to KeyGenerateAlgorithm.\nBe care about modifying all sub class of ShardingKeyGenerator", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r399126395", "createdAt": "2020-03-27T09:14:09Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-api/src/main/java/org/apache/shardingsphere/api/config/sharding/KeyGeneratorConfiguration.java", "diffHunk": "@@ -20,27 +20,21 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n import lombok.Getter;\n-import org.apache.shardingsphere.underlying.common.config.TypeBasedSPIConfiguration;\n-\n-import java.util.Properties;\n+import org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator;\n \n /**\n  * Key generator configuration.\n */\n @Getter\n-public final class KeyGeneratorConfiguration extends TypeBasedSPIConfiguration {\n+public final class KeyGeneratorConfiguration {\n     \n     private final String column;\n     \n-    public KeyGeneratorConfiguration(final String type, final String column) {\n-        super(type);\n-        Preconditions.checkArgument(!Strings.isNullOrEmpty(column), \"Column is required.\");\n-        this.column = column;\n-    }\n+    private final ShardingKeyGenerator keyGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe90913711b0aa5c4bfb35baad8dc8ea0a515101"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTYwMTAy", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-383960102", "createdAt": "2020-03-30T15:16:04Z", "commit": {"oid": "106d76e5f60b05c7e7dd575b260accef5fe74268"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToxNjowNFrOF9uyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMDowOFrOF9u_BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3Mzk3Ng==", "bodyText": "containsKeyGeneratorConfiguration => containsKeyGenerateAlgorithm is better", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r400273976", "createdAt": "2020-03-30T15:16:04Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/ShardingRule.java", "diffHunk": "@@ -108,14 +108,14 @@ private ShardingStrategy createDefaultShardingStrategy(final ShardingStrategyCon\n         return Optional.ofNullable(shardingStrategyConfiguration).map(ShardingStrategyFactory::newInstance).orElse(new NoneShardingStrategy());\n     }\n     \n-    private ShardingKeyGenerator createDefaultKeyGenerator(final KeyGeneratorConfiguration keyGeneratorConfiguration) {\n-        ShardingKeyGeneratorServiceLoader serviceLoader = new ShardingKeyGeneratorServiceLoader();\n+    private KeyGenerateAlgorithm createDefaultKeyGenerateAlgorithm(final KeyGeneratorConfiguration keyGeneratorConfiguration) {\n+        KeyGenerateAlgorithmServiceLoader serviceLoader = new KeyGenerateAlgorithmServiceLoader();\n         return containsKeyGeneratorConfiguration(keyGeneratorConfiguration)\n-                ? serviceLoader.newService(keyGeneratorConfiguration.getType(), keyGeneratorConfiguration.getProperties()) : serviceLoader.newService();\n+                ? keyGeneratorConfiguration.getKeyGenerateAlgorithm() : serviceLoader.newService();\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final KeyGeneratorConfiguration keyGeneratorConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106d76e5f60b05c7e7dd575b260accef5fe74268"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3NzI1Mg==", "bodyText": "containsKeyGeneratorConfiguration => containsKeyGenerateAlgorithm is better", "url": "https://github.com/apache/shardingsphere/pull/4945#discussion_r400277252", "createdAt": "2020-03-30T15:20:08Z", "author": {"login": "cherrylzhao"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/TableRule.java", "diffHunk": "@@ -130,7 +129,7 @@ private void addActualTable(final String datasourceName, final String tableName)\n     }\n     \n     private boolean containsKeyGeneratorConfiguration(final TableRuleConfiguration tableRuleConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106d76e5f60b05c7e7dd575b260accef5fe74268"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d966f4264c14c6c709946a8dd7c91a3acef61a98", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/d966f4264c14c6c709946a8dd7c91a3acef61a98", "committedDate": "2020-03-30T16:13:17Z", "message": "make key-generator as a spring bean on spring namespace."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0251b99d03bc793d8c52704f79e88db3fa864e6", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/f0251b99d03bc793d8c52704f79e88db3fa864e6", "committedDate": "2020-03-30T16:13:18Z", "message": "fix checkstyle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f86853216223f41d834b897e368e0668174b34", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/d5f86853216223f41d834b897e368e0668174b34", "committedDate": "2020-03-30T16:13:20Z", "message": "code refactor for make key-generator as a spring bean."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "488bc05834b2cf915682181e47570a0374500abf", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/488bc05834b2cf915682181e47570a0374500abf", "committedDate": "2020-03-30T16:13:20Z", "message": "add test for GenerateKeyAlgorithmFactoryBean."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d143c3b9b36d84f8dff9602191c9264734df9e", "author": {"user": {"login": "TaoZhiMLND", "name": "TaoZhi"}}, "url": "https://github.com/apache/shardingsphere/commit/c8d143c3b9b36d84f8dff9602191c9264734df9e", "committedDate": "2020-03-30T16:13:23Z", "message": "rename ShardingKeyGenerator SPI to KeyGenerateAlgorithm."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f2d84584ae9d3baffd3799c6289cf34d7db48d5", "author": {"user": {"login": "TaoZhiMLND", "name": "TaoZhi"}}, "url": "https://github.com/apache/shardingsphere/commit/4f2d84584ae9d3baffd3799c6289cf34d7db48d5", "committedDate": "2020-03-30T16:13:24Z", "message": "rename method containsKeyGeneratorConfiguration to containsKeyGenerateAlgorithm."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzgzNjE0", "url": "https://github.com/apache/shardingsphere/pull/4945#pullrequestreview-384383614", "createdAt": "2020-03-31T03:47:11Z", "commit": {"oid": "4f2d84584ae9d3baffd3799c6289cf34d7db48d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3734, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}