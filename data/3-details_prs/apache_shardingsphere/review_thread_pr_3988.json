{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDU2MDg4", "number": 3988, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjoxNTo1OVrODYJ8Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1OTo0OFrODYYZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjU1MjYzOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjoxNTo1OVrOFd2azA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowODoxNlrOFeO30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA==", "bodyText": "If there are two tables with the same name t1 and different structures in ds0 and default ds seperately, do you think removeRepeatTable() could return correct result list?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r366844620", "createdAt": "2020-01-15T12:15:59Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDY4MA==", "bodyText": "Why did you remove repeat table? For performance or anything else?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220680", "createdAt": "2020-01-16T03:58:18Z", "author": {"login": "SteNicholas"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTAwOA==", "bodyText": "If there are two tables with the same name t1 and different structures in ds0 and default ds seperately, do you think removeRepeatTable() could return correct result list?\n\nyes, load() methed  will be get out the same as tableMetaData by table name...loadShardingTables or loadDefaultTables execute load() method and only first parameter table name is different.", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245008", "createdAt": "2020-01-16T06:07:25Z", "author": {"login": "beijing-penguin"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTI2Nw==", "bodyText": "Why did you remove repeat table? For performance or anything else?\nFor performance.", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245267", "createdAt": "2020-01-16T06:08:16Z", "author": {"login": "beijing-penguin"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NDYyMA=="}, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODkyMjU4OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1OTo0OFrOFeNYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowOTozMlrOFeO5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDkyMA==", "bodyText": "Why not for (int i = 0; i < tableNames.size(); i++) ?", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367220920", "createdAt": "2020-01-16T03:59:48Z", "author": {"login": "SteNicholas"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);\n+        List<TableMetaData> metaList = executorEngine.execute(getTableNamesInput(tableNames), new GroupedCallback<String, TableMetaData>() {\n+            @Override\n+            public Collection<TableMetaData> execute(final Collection<String> inputs, final boolean isTrunkThread, final Map<String, Object> dataMap) throws SQLException {\n+                String logicTableName = inputs.iterator().next();\n+                Collection<TableMetaData> result = new LinkedList<>();\n+                result.add(load(logicTableName, shardingRule));\n+                return result;\n+            }\n+        });\n+        Object[] tableNameArr = tableNames.toArray();\n+        for (int i = 0, size = tableNames.size(); i < size; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTYzMQ==", "bodyText": "Why not for (int i = 0; i < tableNames.size(); i++) ?\n\nAvoid size() method multiple computations,,,for performance", "url": "https://github.com/apache/shardingsphere/pull/3988#discussion_r367245631", "createdAt": "2020-01-16T06:09:32Z", "author": {"login": "beijing-penguin"}, "path": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java", "diffHunk": "@@ -206,19 +207,46 @@ public TableMetas loadAll(final ShardingRule shardingRule) throws SQLException {\n         return result;\n     }\n     \n-    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule) throws SQLException {\n+    private Map<String, TableMetaData> loadDefaultTables(final ShardingRule shardingRule, final Map<String, TableMetaData> result) throws SQLException {\n         Optional<String> actualDefaultDataSourceName = shardingRule.findActualDefaultDataSourceName();\n         if (!actualDefaultDataSourceName.isPresent()) {\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n-        for (String each : tableNames) {\n-            result.put(each, load(each, shardingRule));\n+        removeRepeatTable(tableNames, result);\n+        List<TableMetaData> metaList = executorEngine.execute(getTableNamesInput(tableNames), new GroupedCallback<String, TableMetaData>() {\n+            @Override\n+            public Collection<TableMetaData> execute(final Collection<String> inputs, final boolean isTrunkThread, final Map<String, Object> dataMap) throws SQLException {\n+                String logicTableName = inputs.iterator().next();\n+                Collection<TableMetaData> result = new LinkedList<>();\n+                result.add(load(logicTableName, shardingRule));\n+                return result;\n+            }\n+        });\n+        Object[] tableNameArr = tableNames.toArray();\n+        for (int i = 0, size = tableNames.size(); i < size; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDkyMA=="}, "originalCommit": {"oid": "06135c64a74209838e0e8ed842b362a3ded32b0a"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1012, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}