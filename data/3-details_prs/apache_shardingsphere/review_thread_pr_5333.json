{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjQxNjI4", "number": 5333, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDozMzoyMVrOD2eqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjozMzoyNFrOD2gp-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDUyMDU5OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDozMzoyMVrOGMQRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDozMzoyMVrOGMQRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMjc2Mw==", "bodyText": "use epoch maybe better than since.datetime.\nJust make consist with SnowflakeKeyGenerateAlgorithm", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415502763", "createdAt": "2020-04-27T04:33:21Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+    \n+    private static final String SINCE_DATETIME = \"since.datetime\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDU1NzA2OnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDo0ODoxNlrOGMQjzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDo0ODoxNlrOGMQjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwNzQwNQ==", "bodyText": "use partition.seconds maybe better than partition.volume.", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415507405", "createdAt": "2020-04-27T04:48:16Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDU5OTEyOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTowNjowN1rOGMQ5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo1NjoyMlrOGMR90Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMjkyNA==", "bodyText": "It is pretty slow if loop for every second, could we consider about increase for one partition range once?", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415512924", "createdAt": "2020-04-27T05:06:07Z", "author": {"login": "terrymanu"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+    \n+    private static final String SINCE_DATETIME = \"since.datetime\";\n+    \n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+    \n+    private static final int SECOND_UNIT = 1000;\n+    \n+    @Getter\n+    @Setter\n+    private Properties properties = new Properties();\n+    \n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Comparable<?>> shardingValue) {\n+        checkProperties();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(doSharding(parseDate(shardingValue.getValue())))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Comparable<?>> shardingValue) {\n+        checkProperties();\n+        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\n+        for (long i = parseDate(shardingValue.getValueRange().lowerEndpoint()); i <= parseDate(shardingValue.getValueRange().upperEndpoint()); i++) {\n+            for (String each : availableTargetNames) {\n+                if (each.endsWith(doSharding(i))) {\n+                    result.add(each);\n+                }\n+            }\n+            if (result.size() == availableTargetNames.size()) {\n+                return result;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzMDQ0OQ==", "bodyText": "I will consider it in my next PR", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415530449", "createdAt": "2020-04-27T05:56:22Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+    \n+    private static final String SINCE_DATETIME = \"since.datetime\";\n+    \n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+    \n+    private static final int SECOND_UNIT = 1000;\n+    \n+    @Getter\n+    @Setter\n+    private Properties properties = new Properties();\n+    \n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Comparable<?>> shardingValue) {\n+        checkProperties();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(doSharding(parseDate(shardingValue.getValue())))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Comparable<?>> shardingValue) {\n+        checkProperties();\n+        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\n+        for (long i = parseDate(shardingValue.getValueRange().lowerEndpoint()); i <= parseDate(shardingValue.getValueRange().upperEndpoint()); i++) {\n+            for (String each : availableTargetNames) {\n+                if (each.endsWith(doSharding(i))) {\n+                    result.add(each);\n+                }\n+            }\n+            if (result.size() == availableTargetNames.size()) {\n+                return result;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMjkyNA=="}, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDg0NzMwOnYy", "diffSide": "RIGHT", "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjozMzoyNFrOGMS73A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0OTozNFrOGMVgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NjMzMg==", "bodyText": "SimpleDateFormat is not thread safe, is it possible to call SimpleDateFormat.parse() concurrently? if so, perhaps use LocalDateTime and DateTimeFormatter is better", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415546332", "createdAt": "2020-04-27T06:33:24Z", "author": {"login": "SanmuWangZJU"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+    \n+    private static final String SINCE_DATETIME = \"since.datetime\";\n+    \n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4ODQyMg==", "bodyText": "@ SanmuWangZJU\n\nSimpleDateFormat is not thread safe, is it possible to call SimpleDateFormat.parse() concurrently? if so, perhaps use LocalDateTime and DateTimeFormatter is better\n\nHi, Thanks for your suggestion which helps raize #5341, welcome your review and comments.", "url": "https://github.com/apache/shardingsphere/pull/5333#discussion_r415588422", "createdAt": "2020-04-27T07:49:34Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/DatetimeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Properties;\n+\n+/**\n+ * Datetime sharding algorithm.\n+ * \n+ * <p>Shard by `y = floor(x/v)` algorithm, which means y begins from 0.\n+ * v is `PARTITION_VOLUME`, and the minimum time unit is 1 sec.\n+ * `SINCE_DATETIME` decides the beginning datetime to shard. </p>\n+ */\n+public final class DatetimeShardingAlgorithm implements StandardShardingAlgorithm<Comparable<?>> {\n+    \n+    private static final String PARTITION_VOLUME = \"partition.volume\";\n+    \n+    private static final String SINCE_DATETIME = \"since.datetime\";\n+    \n+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NjMzMg=="}, "originalCommit": {"oid": "0c81a16ffd796f82d669e30813757c1754193e2b"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1045, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}