{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTM3Nzgz", "number": 5413, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzowNzoyN1rOD4uMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzowODo0NFrOD4uMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODAzNjk5OnYy", "diffSide": "RIGHT", "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/SingleIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzowNzoyN1rOGPoHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoyMDozMlrOGPoLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTA2NQ==", "bodyText": "final maybe unnecessary", "url": "https://github.com/apache/shardingsphere/pull/5413#discussion_r419039065", "createdAt": "2020-05-03T03:07:27Z", "author": {"login": "terrymanu"}, "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/SingleIT.java", "diffHunk": "@@ -39,13 +42,29 @@\n     \n     private final String sql;\n     \n+    private final String originalSQL;\n+    \n     public SingleIT(final String path, final IntegrateTestCaseAssertion assertion, final String ruleType,\n                     final DatabaseType databaseType, final SQLCaseType caseType, final String sql) throws IOException, JAXBException, SQLException, ParseException {\n         super(ruleType, databaseType);\n         this.assertion = assertion;\n         this.caseType = caseType;\n-        this.sql = sql;\n+        this.originalSQL = sql;\n+        this.sql = convert(sql);\n         expectedDataFile = getExpectedDataFile(path, ruleType, databaseType, null != assertion ? assertion.getExpectedDataFile() : null);\n     }\n+    \n+    private String convert(final String sql) throws ParseException {\n+        return caseType == SQLCaseType.Literal ? getLiteralSQL(sql) : sql;\n+    }\n+    \n+    private String getLiteralSQL(final String sql) throws ParseException {\n+        final List<Object> parameters = null != assertion ? assertion.getSQLValues().stream().map(SQLValue::toString).collect(Collectors.toList()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395263ba13476b98c218b6557d1addeb42f7b2a3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDA2MA==", "bodyText": "have fixed it", "url": "https://github.com/apache/shardingsphere/pull/5413#discussion_r419040060", "createdAt": "2020-05-03T03:20:32Z", "author": {"login": "cherrylzhao"}, "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/SingleIT.java", "diffHunk": "@@ -39,13 +42,29 @@\n     \n     private final String sql;\n     \n+    private final String originalSQL;\n+    \n     public SingleIT(final String path, final IntegrateTestCaseAssertion assertion, final String ruleType,\n                     final DatabaseType databaseType, final SQLCaseType caseType, final String sql) throws IOException, JAXBException, SQLException, ParseException {\n         super(ruleType, databaseType);\n         this.assertion = assertion;\n         this.caseType = caseType;\n-        this.sql = sql;\n+        this.originalSQL = sql;\n+        this.sql = convert(sql);\n         expectedDataFile = getExpectedDataFile(path, ruleType, databaseType, null != assertion ? assertion.getExpectedDataFile() : null);\n     }\n+    \n+    private String convert(final String sql) throws ParseException {\n+        return caseType == SQLCaseType.Literal ? getLiteralSQL(sql) : sql;\n+    }\n+    \n+    private String getLiteralSQL(final String sql) throws ParseException {\n+        final List<Object> parameters = null != assertion ? assertion.getSQLValues().stream().map(SQLValue::toString).collect(Collectors.toList()) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTA2NQ=="}, "originalCommit": {"oid": "395263ba13476b98c218b6557d1addeb42f7b2a3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODAzNzY3OnYy", "diffSide": "RIGHT", "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/util/IntegrateTestParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzowODo0NFrOGPoHqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoyMDo0MFrOGPoLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTE0Ng==", "bodyText": "\\n should be LINE_SEPARATOR", "url": "https://github.com/apache/shardingsphere/pull/5413#discussion_r419039146", "createdAt": "2020-05-03T03:08:44Z", "author": {"login": "terrymanu"}, "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/util/IntegrateTestParameters.java", "diffHunk": "@@ -168,7 +152,7 @@ private static void printTestPlan(final Map<DatabaseType, Collection<Object[]>>\n             disabledPlan.add(String.format(\"%s(%s)\", entry.getKey().getName(), entry.getValue().size() * factor));\n         }\n         System.out.println(\"[INFO] ======= Test Plan =======\");\n-        String summary = String.format(\"[%s] Total: %s, Active: %s, Disabled: %s\",\n+        String summary = String.format(\"[%s] Total: %s, Active: %s, Disabled: %s \\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395263ba13476b98c218b6557d1addeb42f7b2a3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MDA2Nw==", "bodyText": "have fixed it", "url": "https://github.com/apache/shardingsphere/pull/5413#discussion_r419040067", "createdAt": "2020-05-03T03:20:40Z", "author": {"login": "cherrylzhao"}, "path": "sharding-integration-test/sharding-jdbc-test/src/test/java/org/apache/shardingsphere/dbtest/engine/util/IntegrateTestParameters.java", "diffHunk": "@@ -168,7 +152,7 @@ private static void printTestPlan(final Map<DatabaseType, Collection<Object[]>>\n             disabledPlan.add(String.format(\"%s(%s)\", entry.getKey().getName(), entry.getValue().size() * factor));\n         }\n         System.out.println(\"[INFO] ======= Test Plan =======\");\n-        String summary = String.format(\"[%s] Total: %s, Active: %s, Disabled: %s\",\n+        String summary = String.format(\"[%s] Total: %s, Active: %s, Disabled: %s \\n\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTE0Ng=="}, "originalCommit": {"oid": "395263ba13476b98c218b6557d1addeb42f7b2a3"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 897, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}