{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODE5MDc0", "number": 5992, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMzoyM1rOEEiVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMzo1M1rOEEiVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyMjg2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMzoyM1rOGiOCyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo0MDoxNlrOGiPL5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDg1Ng==", "bodyText": "private method do not need javadoc", "url": "https://github.com/apache/shardingsphere/pull/5992#discussion_r438534856", "createdAt": "2020-06-11T04:23:23Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "diffHunk": "@@ -167,7 +167,23 @@ public String getCipherColumn(final String logicTable, final String logicColumn)\n      * @return cipher column or not\n      */\n     public boolean isCipherColumn(final String tableName, final String columnName) {\n-        return tables.containsKey(tableName) && tables.get(tableName).getCipherColumns().contains(columnName);\n+        return tables.containsKey(tableName) && isCipherColumn(tables.get(tableName).getCipherColumns(), columnName);\n+    }\n+\n+    /**\n+     * Is cipher column or not.\n+     *\n+     * @param cipherColumns cipher columns\n+     * @param columnName column name\n+     * @return cipher column or not\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0612cb7e7e51f5eb66548d892707962d1b70b8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MzU3Mg==", "bodyText": "ok, I will make a change.", "url": "https://github.com/apache/shardingsphere/pull/5992#discussion_r438553572", "createdAt": "2020-06-11T05:40:16Z", "author": {"login": "big-mountain-z"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "diffHunk": "@@ -167,7 +167,23 @@ public String getCipherColumn(final String logicTable, final String logicColumn)\n      * @return cipher column or not\n      */\n     public boolean isCipherColumn(final String tableName, final String columnName) {\n-        return tables.containsKey(tableName) && tables.get(tableName).getCipherColumns().contains(columnName);\n+        return tables.containsKey(tableName) && isCipherColumn(tables.get(tableName).getCipherColumns(), columnName);\n+    }\n+\n+    /**\n+     * Is cipher column or not.\n+     *\n+     * @param cipherColumns cipher columns\n+     * @param columnName column name\n+     * @return cipher column or not\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDg1Ng=="}, "originalCommit": {"oid": "fb0612cb7e7e51f5eb66548d892707962d1b70b8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyMzUxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMzo1M1rOGiODLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo0MDoxN1rOGiPL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDk1OQ==", "bodyText": "It is better to use java8 lambda instead of for each", "url": "https://github.com/apache/shardingsphere/pull/5992#discussion_r438534959", "createdAt": "2020-06-11T04:23:53Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "diffHunk": "@@ -167,7 +167,23 @@ public String getCipherColumn(final String logicTable, final String logicColumn)\n      * @return cipher column or not\n      */\n     public boolean isCipherColumn(final String tableName, final String columnName) {\n-        return tables.containsKey(tableName) && tables.get(tableName).getCipherColumns().contains(columnName);\n+        return tables.containsKey(tableName) && isCipherColumn(tables.get(tableName).getCipherColumns(), columnName);\n+    }\n+\n+    /**\n+     * Is cipher column or not.\n+     *\n+     * @param cipherColumns cipher columns\n+     * @param columnName column name\n+     * @return cipher column or not\n+     */\n+    private boolean isCipherColumn(final Collection<String> cipherColumns, final String columnName) {\n+        for (String each : cipherColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb0612cb7e7e51f5eb66548d892707962d1b70b8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MzU3OA==", "bodyText": "ok, I will make a change.", "url": "https://github.com/apache/shardingsphere/pull/5992#discussion_r438553578", "createdAt": "2020-06-11T05:40:17Z", "author": {"login": "big-mountain-z"}, "path": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-common/src/main/java/org/apache/shardingsphere/encrypt/rule/EncryptRule.java", "diffHunk": "@@ -167,7 +167,23 @@ public String getCipherColumn(final String logicTable, final String logicColumn)\n      * @return cipher column or not\n      */\n     public boolean isCipherColumn(final String tableName, final String columnName) {\n-        return tables.containsKey(tableName) && tables.get(tableName).getCipherColumns().contains(columnName);\n+        return tables.containsKey(tableName) && isCipherColumn(tables.get(tableName).getCipherColumns(), columnName);\n+    }\n+\n+    /**\n+     * Is cipher column or not.\n+     *\n+     * @param cipherColumns cipher columns\n+     * @param columnName column name\n+     * @return cipher column or not\n+     */\n+    private boolean isCipherColumn(final Collection<String> cipherColumns, final String columnName) {\n+        for (String each : cipherColumns) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDk1OQ=="}, "originalCommit": {"oid": "fb0612cb7e7e51f5eb66548d892707962d1b70b8"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 791, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}