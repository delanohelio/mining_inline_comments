{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDg0Nzcw", "number": 6769, "title": "PostgreSQL DDL ", "bodyText": "Changes proposed in this pull request:\n-complete and write part of the DDL .g4 in PostgreSQL\n-fix the problem in last PR", "createdAt": "2020-08-10T13:00:03Z", "url": "https://github.com/apache/shardingsphere/pull/6769", "merged": true, "mergeCommit": {"oid": "f540c12e5d4d13a35ee9dd04f7716706149ce33c"}, "closed": true, "closedAt": "2020-08-11T11:06:17Z", "author": {"login": "happybyr"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9hmVWAH2gAyNDY1NDg0NzcwOjVhZDI2ZDY5Y2YxZDEyZmJmMzMwNWUxNzE5NzFjMDQzYzJjMzc0ZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc90wDogFqTQ2NDk2MTYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ad26d69cf1d12fbf3305e171971c043c2c374ee", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/5ad26d69cf1d12fbf3305e171971c043c2c374ee", "committedDate": "2020-08-10T12:44:12Z", "message": "PostgreSQL DDL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/bfcedb517d819d087b73a59bf8e914316b2ed109", "committedDate": "2020-08-10T12:44:20Z", "message": "Merge remote-tracking branch 'apache/master'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzA2MDMy", "url": "https://github.com/apache/shardingsphere/pull/6769#pullrequestreview-464706032", "createdAt": "2020-08-11T02:24:29Z", "commit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoyNDozMFrOG-mGOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjozNDowOFrOG-mQEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4OTA4Mw==", "bodyText": "Maybe ,it is good like that\nconsTableSpace\n    : (USING INDEX TABLESPACE name)?\n    ;\n\n definition\n    : (WITH definition)?\n    ;\n\nxxx\n    : consTableSpace?\n\nThe same applies to others.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468289083", "createdAt": "2020-08-11T02:24:30Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/BaseRule.g4", "diffHunk": "@@ -1351,3 +1351,320 @@ ignoredIdentifier_\n ignoredIdentifiers_\n     : ignoredIdentifier_ (COMMA_ ignoredIdentifier_)*\n     ;\n+\n+signedIconst\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+optBooleanOrString\n+    : TRUE\n+    | FALSE\n+    | ON\n+    | nonReservedWord\n+    | STRING_\n+    ;\n+\n+nonReservedWord\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    ;\n+\n+colNameKeyword\n+    : BETWEEN\n+    | BIGINT\n+    | BIT\n+    | BOOLEAN\n+    | CHAR\n+    | CHARACTER\n+    | COALESCE\n+    | DEC\n+    | DECIMAL\n+    | EXISTS\n+    | EXTRACT\n+    | FLOAT\n+    | GREATEST\n+    | GROUPING\n+    | INOUT\n+    | INT\n+    | INTEGER\n+    | INTERVAL\n+    | LEAST\n+    | NATIONAL\n+    | NCHAR\n+    | NONE\n+    | NULLIF\n+    | NUMERIC\n+    | OUT\n+    | OVERLAY\n+    | POSITION\n+    | PRECISION\n+    | REAL\n+    | ROW\n+    | SETOF\n+    | SMALLINT\n+    | SUBSTRING\n+    | TIME\n+    | TIMESTAMP\n+    | TREAT\n+    | TRIM\n+    | VALUES\n+    | VARCHAR\n+    | XMLATTRIBUTES\n+    | XMLCONCAT\n+    | XMLELEMENT\n+    | XMLEXISTS\n+    | XMLFOREST\n+    | XMLNAMESPACES\n+    | XMLPARSE\n+    | XMLPI\n+    | XMLROOT\n+    | XMLSERIALIZE\n+    | XMLTABLE\n+    ;\n+\n+databaseName\n+    : colId\n+    ;\n+\n+roleSpec\n+    : identifier\n+    | nonReservedWord\n+    | CURRENT_USER\n+    | SESSION_USER\n+    ;\n+\n+varName\n+    : colId\n+    | varName DOT_ colId\n+    ;\n+\n+varList\n+    : varValue\n+    | varList COMMA_ varValue\n+    ;\n+\n+varValue\n+    : identifier\n+    ;\n+\n+zoneValue\n+    : STRING_\n+    | identifier\n+    | INTERVAL STRING_ optInterval\n+    | INTERVAL LP_ NUMBER_ RP_ STRING_\n+    | numericOnly\n+    | DEFAULT\n+    | LOCAL\n+    ;\n+\n+numericOnly\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+isoLevel\n+    : READ UNCOMMITTED\n+    | READ COMMITTED\n+    | REPEATABLE READ\n+    | SERIALIZABLE\n+    ;\n+\n+columnDef\n+    : colId typeName createGenericOptions colQualList\n+    ;\n+\n+colQualList\n+    : colConstraint*\n+    ;\n+\n+colConstraint\n+    : CONSTRAINT name colConstraintElem\n+    | colConstraintElem\n+    | constraintAttr\n+    | COLLATE anyName\n+    ;\n+\n+constraintAttr\n+    : DEFERRABLE\n+    | NOT DEFERRABLE\n+    | INITIALLY DEFERRED\n+    | INITIALLY IMMEDIATE\n+    ;\n+\n+colConstraintElem\n+    : NOT NULL\n+    | NULL\n+    | UNIQUE optDefinition optConsTableSpace\n+    | PRIMARY KEY optDefinition optConsTableSpace\n+    | CHECK LP_ aExpr RP_ optNoInherit\n+    | DEFAULT bExpr\n+    | GENERATED generatedWhen AS IDENTITY optParenthesizedSeqOptList\n+    | GENERATED generatedWhen AS LP_ aExpr RP_ STORED\n+    | REFERENCES qualifiedName optColumnList keyMatch keyActions\n+    ;\n+\n+optParenthesizedSeqOptList\n+    : (LP_ seqOptList RP_)?\n+    ;\n+\n+seqOptList\n+    : seqOptElem+\n+    ;\n+\n+seqOptElem\n+    : AS simpleTypeName\n+    | CACHE numericOnly\n+    | CYCLE\n+    | NO CYCLE\n+    | INCREMENT (BY)? numericOnly\n+    | MAXVALUE numericOnly\n+    | MINVALUE numericOnly\n+    | NO MAXVALUE\n+    | NO MINVALUE\n+    | OWNED BY anyName\n+    | SEQUENCE NAME anyName\n+    | START (WITH)? numericOnly\n+    | RESTART\n+    | RESTART (WITH)? numericOnly\n+    ;\n+\n+optColumnList\n+    : LP_ columnList RP_\n+    ;\n+\n+columnElem\n+    : colId\n+    ;\n+\n+columnList\n+    : columnElem\n+    | columnList COMMA_ columnElem\n+    ;\n+\n+generatedWhen\n+    : ALWAYS\n+    | BY DEFAULT\n+    ;\n+\n+optNoInherit\n+    : (NO INHERIT)?\n+    ;\n+\n+optConsTableSpace\n+    : (USING INDEX TABLESPACE name)?\n+    ;\n+\n+optDefinition\n+    : (WITH definition)?\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4OTc2OA==", "bodyText": "Are this word keyword?", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468289768", "createdAt": "2020-08-11T02:26:58Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/PostgreSQLKeyword.g4", "diffHunk": "@@ -1380,3 +1380,39 @@ VERBOSE\n PARAM\n     : P A R A M\n     ;\n+\n+LC_COLLATE\n+    : L C UL_ C O L L A T E\n+    ;\n+\n+LC_CTYPE\n+    : L C UL_ C T Y P E\n+    ;\n+\n+IS_TEMPLATE\n+    : I S UL_ T E M P L A T E\n+    ;\n+\n+ALLOW_CONNECTIONS\n+    : A L L O W UL_ C O N N E C T I O N S\n+    ;\n+\n+REPLACCE\n+    : R E P L A C C E\n+    ;\n+\n+TMP\n+    : T M P\n+    ;\n+\n+TMPORARY\n+    : T M P O R A R Y\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5MDIzNg==", "bodyText": "Keep the original format\uff0cModify the other lines as well.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468290236", "createdAt": "2020-08-11T02:28:49Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/impl/PostgreSQLDDLVisitor.java", "diffHunk": "@@ -101,7 +102,7 @@ public ASTNode visitCreateDefinitionClause(final CreateDefinitionClauseContext c\n         }\n         return result;\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5MTYwMA==", "bodyText": "Maybe, it is good like that\ntypedTableElementList\n    : typedTableElement*\n    ;\n\nit can reduce recursion and looks simple. it is same as others.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468291600", "createdAt": "2020-08-11T02:34:08Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4", "diffHunk": "@@ -17,34 +17,187 @@\n \n grammar DDLStatement;\n \n-import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule;\n+import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule,DMLStatement;\n \n createTable\n-    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName createDefinitionClause inheritClause_\n+    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName\n+      createDefinitionClause\n+      (OF anyName optTypedTableElementList)?\n+      (PARTITION OF qualifiedName optTypedTableElementList partitionBoundSpec)?\n+      inheritClause_ optPartitionSpec_ tableAccessMethodClause optWith onCommitOption optTableSpace\n+      (AS select optWithData)?\n+      (EXECUTE name executeParamClause optWithData)?\n+    ;\n+\n+executeParamClause\n+    : LP_ exprList RP_\n+    ;\n+\n+partitionBoundSpec\n+    : FOR VALUES WITH LP_ hashPartbound RP_\n+    | FOR VALUES IN LP_ exprList RP_\n+    | FOR VALUES FROM LP_ exprList RP_ TO LP_ exprList RP_\n+    | DEFAULT\n+    ;\n+\n+hashPartbound\n+    : hashPartboundElem\n+    | hashPartbound COMMA_ hashPartboundElem\n+    ;\n+\n+hashPartboundElem\n+    : nonReservedWord NUMBER_\n+    ;\n+\n+optTypedTableElementList\n+     : LP_ typedTableElementList RP_\n+     ;\n+\n+typedTableElementList\n+    : typedTableElement\n+    | typedTableElementList COMMA_ typedTableElement\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfcedb517d819d087b73a59bf8e914316b2ed109"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7de01d6664019c4cc019fe72be649e710bed6ae1", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/7de01d6664019c4cc019fe72be649e710bed6ae1", "committedDate": "2020-08-11T07:39:39Z", "message": "review fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759999afe2242716ab050fba6470e025d8151288", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/759999afe2242716ab050fba6470e025d8151288", "committedDate": "2020-08-11T07:43:45Z", "message": "review fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/4f77455c767b44747af973e5100f22e2f14bca77", "committedDate": "2020-08-11T07:54:32Z", "message": "review fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODM0ODcw", "url": "https://github.com/apache/shardingsphere/pull/6769#pullrequestreview-464834870", "createdAt": "2020-08-11T08:00:12Z", "commit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODowMDoxMlrOG-ssTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODoxNjo1MFrOG-tPSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5NzEzNA==", "bodyText": "Same to above.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468397134", "createdAt": "2020-08-11T08:00:12Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/BaseRule.g4", "diffHunk": "@@ -1351,3 +1333,309 @@ ignoredIdentifier_\n ignoredIdentifiers_\n     : ignoredIdentifier_ (COMMA_ ignoredIdentifier_)*\n     ;\n+\n+signedIconst\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+optBooleanOrString\n+    : TRUE\n+    | FALSE\n+    | ON\n+    | nonReservedWord\n+    | STRING_\n+    ;\n+\n+nonReservedWord\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    ;\n+\n+colNameKeyword\n+    : BETWEEN\n+    | BIGINT\n+    | BIT\n+    | BOOLEAN\n+    | CHAR\n+    | CHARACTER\n+    | COALESCE\n+    | DEC\n+    | DECIMAL\n+    | EXISTS\n+    | EXTRACT\n+    | FLOAT\n+    | GREATEST\n+    | GROUPING\n+    | INOUT\n+    | INT\n+    | INTEGER\n+    | INTERVAL\n+    | LEAST\n+    | NATIONAL\n+    | NCHAR\n+    | NONE\n+    | NULLIF\n+    | NUMERIC\n+    | OUT\n+    | OVERLAY\n+    | POSITION\n+    | PRECISION\n+    | REAL\n+    | ROW\n+    | SETOF\n+    | SMALLINT\n+    | SUBSTRING\n+    | TIME\n+    | TIMESTAMP\n+    | TREAT\n+    | TRIM\n+    | VALUES\n+    | VARCHAR\n+    | XMLATTRIBUTES\n+    | XMLCONCAT\n+    | XMLELEMENT\n+    | XMLEXISTS\n+    | XMLFOREST\n+    | XMLNAMESPACES\n+    | XMLPARSE\n+    | XMLPI\n+    | XMLROOT\n+    | XMLSERIALIZE\n+    | XMLTABLE\n+    ;\n+\n+databaseName\n+    : colId\n+    ;\n+\n+roleSpec\n+    : identifier\n+    | nonReservedWord\n+    | CURRENT_USER\n+    | SESSION_USER\n+    ;\n+\n+varName\n+    : colId\n+    | varName DOT_ colId\n+    ;\n+\n+varList\n+    : varValue (COMMA_ varValue)*\n+    ;\n+\n+varValue\n+    : identifier\n+    ;\n+\n+zoneValue\n+    : STRING_\n+    | identifier\n+    | INTERVAL STRING_ optInterval\n+    | INTERVAL LP_ NUMBER_ RP_ STRING_\n+    | numericOnly\n+    | DEFAULT\n+    | LOCAL\n+    ;\n+\n+numericOnly\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+isoLevel\n+    : READ UNCOMMITTED\n+    | READ COMMITTED\n+    | REPEATABLE READ\n+    | SERIALIZABLE\n+    ;\n+\n+columnDef\n+    : colId typeName createGenericOptions colQualList\n+    ;\n+\n+colQualList\n+    : colConstraint*\n+    ;\n+\n+colConstraint\n+    : CONSTRAINT name colConstraintElem\n+    | colConstraintElem\n+    | constraintAttr\n+    | COLLATE anyName\n+    ;\n+\n+constraintAttr\n+    : DEFERRABLE\n+    | NOT DEFERRABLE\n+    | INITIALLY DEFERRED\n+    | INITIALLY IMMEDIATE\n+    ;\n+\n+colConstraintElem\n+    : NOT NULL\n+    | NULL\n+    | UNIQUE (WITH definition)? consTableSpace\n+    | PRIMARY KEY (WITH definition)? consTableSpace\n+    | CHECK LP_ aExpr RP_ noInherit?\n+    | DEFAULT bExpr\n+    | GENERATED generatedWhen AS IDENTITY optParenthesizedSeqOptList\n+    | GENERATED generatedWhen AS LP_ aExpr RP_ STORED\n+    | REFERENCES qualifiedName optColumnList? keyMatch? keyActions?\n+    ;\n+\n+optParenthesizedSeqOptList\n+    : (LP_ seqOptList RP_)?\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 366}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5ODU4Ng==", "bodyText": "Keep the format consistent.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468398586", "createdAt": "2020-08-11T08:03:03Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/BaseRule.g4", "diffHunk": "@@ -1351,3 +1333,309 @@ ignoredIdentifier_\n ignoredIdentifiers_\n     : ignoredIdentifier_ (COMMA_ ignoredIdentifier_)*\n     ;\n+\n+signedIconst\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+optBooleanOrString\n+    : TRUE\n+    | FALSE\n+    | ON\n+    | nonReservedWord\n+    | STRING_\n+    ;\n+\n+nonReservedWord\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    ;\n+\n+colNameKeyword\n+    : BETWEEN\n+    | BIGINT\n+    | BIT\n+    | BOOLEAN\n+    | CHAR\n+    | CHARACTER\n+    | COALESCE\n+    | DEC\n+    | DECIMAL\n+    | EXISTS\n+    | EXTRACT\n+    | FLOAT\n+    | GREATEST\n+    | GROUPING\n+    | INOUT\n+    | INT\n+    | INTEGER\n+    | INTERVAL\n+    | LEAST\n+    | NATIONAL\n+    | NCHAR\n+    | NONE\n+    | NULLIF\n+    | NUMERIC\n+    | OUT\n+    | OVERLAY\n+    | POSITION\n+    | PRECISION\n+    | REAL\n+    | ROW\n+    | SETOF\n+    | SMALLINT\n+    | SUBSTRING\n+    | TIME\n+    | TIMESTAMP\n+    | TREAT\n+    | TRIM\n+    | VALUES\n+    | VARCHAR\n+    | XMLATTRIBUTES\n+    | XMLCONCAT\n+    | XMLELEMENT\n+    | XMLEXISTS\n+    | XMLFOREST\n+    | XMLNAMESPACES\n+    | XMLPARSE\n+    | XMLPI\n+    | XMLROOT\n+    | XMLSERIALIZE\n+    | XMLTABLE\n+    ;\n+\n+databaseName\n+    : colId\n+    ;\n+\n+roleSpec\n+    : identifier\n+    | nonReservedWord\n+    | CURRENT_USER\n+    | SESSION_USER\n+    ;\n+\n+varName\n+    : colId\n+    | varName DOT_ colId\n+    ;\n+\n+varList\n+    : varValue (COMMA_ varValue)*\n+    ;\n+\n+varValue\n+    : identifier\n+    ;\n+\n+zoneValue\n+    : STRING_\n+    | identifier\n+    | INTERVAL STRING_ optInterval\n+    | INTERVAL LP_ NUMBER_ RP_ STRING_\n+    | numericOnly\n+    | DEFAULT\n+    | LOCAL\n+    ;\n+\n+numericOnly\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+isoLevel\n+    : READ UNCOMMITTED\n+    | READ COMMITTED\n+    | REPEATABLE READ\n+    | SERIALIZABLE\n+    ;\n+\n+columnDef\n+    : colId typeName createGenericOptions colQualList\n+    ;\n+\n+colQualList\n+    : colConstraint*\n+    ;\n+\n+colConstraint\n+    : CONSTRAINT name colConstraintElem\n+    | colConstraintElem\n+    | constraintAttr\n+    | COLLATE anyName\n+    ;\n+\n+constraintAttr\n+    : DEFERRABLE\n+    | NOT DEFERRABLE\n+    | INITIALLY DEFERRED\n+    | INITIALLY IMMEDIATE\n+    ;\n+\n+colConstraintElem\n+    : NOT NULL\n+    | NULL\n+    | UNIQUE (WITH definition)? consTableSpace\n+    | PRIMARY KEY (WITH definition)? consTableSpace\n+    | CHECK LP_ aExpr RP_ noInherit?\n+    | DEFAULT bExpr\n+    | GENERATED generatedWhen AS IDENTITY optParenthesizedSeqOptList\n+    | GENERATED generatedWhen AS LP_ aExpr RP_ STORED\n+    | REFERENCES qualifiedName optColumnList? keyMatch? keyActions?\n+    ;\n+\n+optParenthesizedSeqOptList\n+    : (LP_ seqOptList RP_)?\n+    ;\n+\n+seqOptList\n+    : seqOptElem+\n+    ;\n+\n+seqOptElem\n+    : AS simpleTypeName\n+    | CACHE numericOnly\n+    | CYCLE\n+    | NO CYCLE\n+    | INCREMENT (BY)? numericOnly\n+    | MAXVALUE numericOnly\n+    | MINVALUE numericOnly\n+    | NO MAXVALUE\n+    | NO MINVALUE\n+    | OWNED BY anyName\n+    | SEQUENCE NAME anyName\n+    | START (WITH)? numericOnly\n+    | RESTART\n+    | RESTART (WITH)? numericOnly\n+    ;\n+\n+optColumnList\n+    : LP_ columnList RP_\n+    ;\n+\n+columnElem\n+    : colId\n+    ;\n+\n+columnList\n+    : columnElem (COMMA_ columnElem)*\n+    ;\n+\n+generatedWhen\n+    : ALWAYS\n+    | BY DEFAULT\n+    ;\n+\n+noInherit\n+    : NO INHERIT\n+    ;\n+\n+consTableSpace\n+    : USING INDEX TABLESPACE name\n+    ;\n+\n+definition\n+    : LP_ defList RP_\n+    ;\n+\n+defList\n+    : defElem (COMMA_ defElem)*\n+    ;\n+\n+defElem\n+    : colLabel  defArg?\n+    ;\n+\n+colLabel\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    | reservedKeyword\n+    ;\n+\n+keyActions\n+    : keyUpdate\n+    | keyDelete\n+    | keyUpdate keyDelete\n+    | keyDelete keyUpdate\n+    ;\n+\n+keyDelete\n+    : ON DELETE keyAction\n+    ;\n+\n+keyUpdate\n+    : ON UPDATE keyAction\n+    ;\n+\n+keyAction\n+    : NO ACTION\n+    | RESTRICT\n+    | CASCADE\n+    | SET NULL\n+    | SET DEFAULT\n+\t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5OTAxNQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468399015", "createdAt": "2020-08-11T08:03:58Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/BaseRule.g4", "diffHunk": "@@ -1351,3 +1333,309 @@ ignoredIdentifier_\n ignoredIdentifiers_\n     : ignoredIdentifier_ (COMMA_ ignoredIdentifier_)*\n     ;\n+\n+signedIconst\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+optBooleanOrString\n+    : TRUE\n+    | FALSE\n+    | ON\n+    | nonReservedWord\n+    | STRING_\n+    ;\n+\n+nonReservedWord\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    ;\n+\n+colNameKeyword\n+    : BETWEEN\n+    | BIGINT\n+    | BIT\n+    | BOOLEAN\n+    | CHAR\n+    | CHARACTER\n+    | COALESCE\n+    | DEC\n+    | DECIMAL\n+    | EXISTS\n+    | EXTRACT\n+    | FLOAT\n+    | GREATEST\n+    | GROUPING\n+    | INOUT\n+    | INT\n+    | INTEGER\n+    | INTERVAL\n+    | LEAST\n+    | NATIONAL\n+    | NCHAR\n+    | NONE\n+    | NULLIF\n+    | NUMERIC\n+    | OUT\n+    | OVERLAY\n+    | POSITION\n+    | PRECISION\n+    | REAL\n+    | ROW\n+    | SETOF\n+    | SMALLINT\n+    | SUBSTRING\n+    | TIME\n+    | TIMESTAMP\n+    | TREAT\n+    | TRIM\n+    | VALUES\n+    | VARCHAR\n+    | XMLATTRIBUTES\n+    | XMLCONCAT\n+    | XMLELEMENT\n+    | XMLEXISTS\n+    | XMLFOREST\n+    | XMLNAMESPACES\n+    | XMLPARSE\n+    | XMLPI\n+    | XMLROOT\n+    | XMLSERIALIZE\n+    | XMLTABLE\n+    ;\n+\n+databaseName\n+    : colId\n+    ;\n+\n+roleSpec\n+    : identifier\n+    | nonReservedWord\n+    | CURRENT_USER\n+    | SESSION_USER\n+    ;\n+\n+varName\n+    : colId\n+    | varName DOT_ colId\n+    ;\n+\n+varList\n+    : varValue (COMMA_ varValue)*\n+    ;\n+\n+varValue\n+    : identifier\n+    ;\n+\n+zoneValue\n+    : STRING_\n+    | identifier\n+    | INTERVAL STRING_ optInterval\n+    | INTERVAL LP_ NUMBER_ RP_ STRING_\n+    | numericOnly\n+    | DEFAULT\n+    | LOCAL\n+    ;\n+\n+numericOnly\n+    : NUMBER_\n+    | PLUS_ NUMBER_\n+    | MINUS_ NUMBER_\n+    ;\n+\n+isoLevel\n+    : READ UNCOMMITTED\n+    | READ COMMITTED\n+    | REPEATABLE READ\n+    | SERIALIZABLE\n+    ;\n+\n+columnDef\n+    : colId typeName createGenericOptions colQualList\n+    ;\n+\n+colQualList\n+    : colConstraint*\n+    ;\n+\n+colConstraint\n+    : CONSTRAINT name colConstraintElem\n+    | colConstraintElem\n+    | constraintAttr\n+    | COLLATE anyName\n+    ;\n+\n+constraintAttr\n+    : DEFERRABLE\n+    | NOT DEFERRABLE\n+    | INITIALLY DEFERRED\n+    | INITIALLY IMMEDIATE\n+    ;\n+\n+colConstraintElem\n+    : NOT NULL\n+    | NULL\n+    | UNIQUE (WITH definition)? consTableSpace\n+    | PRIMARY KEY (WITH definition)? consTableSpace\n+    | CHECK LP_ aExpr RP_ noInherit?\n+    | DEFAULT bExpr\n+    | GENERATED generatedWhen AS IDENTITY optParenthesizedSeqOptList\n+    | GENERATED generatedWhen AS LP_ aExpr RP_ STORED\n+    | REFERENCES qualifiedName optColumnList? keyMatch? keyActions?\n+    ;\n+\n+optParenthesizedSeqOptList\n+    : (LP_ seqOptList RP_)?\n+    ;\n+\n+seqOptList\n+    : seqOptElem+\n+    ;\n+\n+seqOptElem\n+    : AS simpleTypeName\n+    | CACHE numericOnly\n+    | CYCLE\n+    | NO CYCLE\n+    | INCREMENT (BY)? numericOnly\n+    | MAXVALUE numericOnly\n+    | MINVALUE numericOnly\n+    | NO MAXVALUE\n+    | NO MINVALUE\n+    | OWNED BY anyName\n+    | SEQUENCE NAME anyName\n+    | START (WITH)? numericOnly\n+    | RESTART\n+    | RESTART (WITH)? numericOnly\n+    ;\n+\n+optColumnList\n+    : LP_ columnList RP_\n+    ;\n+\n+columnElem\n+    : colId\n+    ;\n+\n+columnList\n+    : columnElem (COMMA_ columnElem)*\n+    ;\n+\n+generatedWhen\n+    : ALWAYS\n+    | BY DEFAULT\n+    ;\n+\n+noInherit\n+    : NO INHERIT\n+    ;\n+\n+consTableSpace\n+    : USING INDEX TABLESPACE name\n+    ;\n+\n+definition\n+    : LP_ defList RP_\n+    ;\n+\n+defList\n+    : defElem (COMMA_ defElem)*\n+    ;\n+\n+defElem\n+    : colLabel  defArg?\n+    ;\n+\n+colLabel\n+    : identifier\n+    | unreservedWord\n+    | colNameKeyword\n+    | typeFuncNameKeyword\n+    | reservedKeyword\n+    ;\n+\n+keyActions\n+    : keyUpdate\n+    | keyDelete\n+    | keyUpdate keyDelete\n+    | keyDelete keyUpdate\n+    ;\n+\n+keyDelete\n+    : ON DELETE keyAction\n+    ;\n+\n+keyUpdate\n+    : ON UPDATE keyAction\n+    ;\n+\n+keyAction\n+    : NO ACTION\n+    | RESTRICT\n+    | CASCADE\n+    | SET NULL\n+    | SET DEFAULT\n+\t;\n+\n+keyMatch\n+    : MATCH FULL | MATCH PARTIAL | MATCH SIMPLE\n+    ;\n+\n+createGenericOptions\n+    : ( OPTIONS LP_ genericOptionList RP_ )?\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 463}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5OTYwMA==", "bodyText": "Same as above.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468399600", "createdAt": "2020-08-11T08:05:03Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4", "diffHunk": "@@ -17,34 +17,170 @@\n \n grammar DDLStatement;\n \n-import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule;\n+import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule,DMLStatement;\n \n createTable\n-    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName createDefinitionClause inheritClause_\n+    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName\n+      createDefinitionClause\n+      (OF anyName (LP_ typedTableElementList RP_)?)?\n+      (PARTITION OF qualifiedName (LP_ typedTableElementList RP_)? partitionBoundSpec)?\n+      inheritClause_ partitionSpec? tableAccessMethodClause withOption? onCommitOption? tableSpace?\n+      (AS select withData?)?\n+      (EXECUTE name executeParamClause withData?)?\n+    ;\n+\n+executeParamClause\n+    : LP_ exprList RP_\n+    ;\n+\n+partitionBoundSpec\n+    : FOR VALUES WITH LP_ hashPartbound RP_\n+    | FOR VALUES IN LP_ exprList RP_\n+    | FOR VALUES FROM LP_ exprList RP_ TO LP_ exprList RP_\n+    | DEFAULT\n+    ;\n+\n+hashPartbound\n+    : hashPartboundElem (COMMA_ hashPartboundElem)*\n+    ;\n+\n+hashPartboundElem\n+    : nonReservedWord NUMBER_\n+    ;\n+\n+typedTableElementList\n+    : typedTableElement (COMMA_ typedTableElement)*\n+    ;\n+\n+typedTableElement\n+    : columnOptions\n+    | tableConstraint\n+    ;\n+\n+columnOptions\n+    : colId (WITH OPTIONS)? colQualList\n+    ;\n+\n+colQualList\n+    : columnConstraint*\n+    ;\n+\n+withData\n+    : WITH DATA | WITH NO DATA\n+    ;\n+\n+tableSpace\n+    : TABLESPACE name\n+    ;\n+\n+onCommitOption\n+    : ON COMMIT (DROP | DELETE ROWS | PRESERVE ROWS)\n+    ;\n+\n+withOption\n+    : WITH reloptions | WITHOUT OIDS\n+    ;\n+\n+tableAccessMethodClause\n+    : (USING accessMethod)?\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMDIwMA==", "bodyText": "It can be deleted,use with directly.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468400200", "createdAt": "2020-08-11T08:06:10Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4", "diffHunk": "@@ -17,34 +17,170 @@\n \n grammar DDLStatement;\n \n-import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule;\n+import Symbol, Keyword, PostgreSQLKeyword, Literals, BaseRule,DMLStatement;\n \n createTable\n-    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName createDefinitionClause inheritClause_\n+    : CREATE createTableSpecification_ TABLE tableNotExistClause_ tableName\n+      createDefinitionClause\n+      (OF anyName (LP_ typedTableElementList RP_)?)?\n+      (PARTITION OF qualifiedName (LP_ typedTableElementList RP_)? partitionBoundSpec)?\n+      inheritClause_ partitionSpec? tableAccessMethodClause withOption? onCommitOption? tableSpace?\n+      (AS select withData?)?\n+      (EXECUTE name executeParamClause withData?)?\n+    ;\n+\n+executeParamClause\n+    : LP_ exprList RP_\n+    ;\n+\n+partitionBoundSpec\n+    : FOR VALUES WITH LP_ hashPartbound RP_\n+    | FOR VALUES IN LP_ exprList RP_\n+    | FOR VALUES FROM LP_ exprList RP_ TO LP_ exprList RP_\n+    | DEFAULT\n+    ;\n+\n+hashPartbound\n+    : hashPartboundElem (COMMA_ hashPartboundElem)*\n+    ;\n+\n+hashPartboundElem\n+    : nonReservedWord NUMBER_\n+    ;\n+\n+typedTableElementList\n+    : typedTableElement (COMMA_ typedTableElement)*\n+    ;\n+\n+typedTableElement\n+    : columnOptions\n+    | tableConstraint\n+    ;\n+\n+columnOptions\n+    : colId (WITH OPTIONS)? colQualList\n+    ;\n+\n+colQualList\n+    : columnConstraint*\n+    ;\n+\n+withData\n+    : WITH DATA | WITH NO DATA\n+    ;\n+\n+tableSpace\n+    : TABLESPACE name\n+    ;\n+\n+onCommitOption\n+    : ON COMMIT (DROP | DELETE ROWS | PRESERVE ROWS)\n+    ;\n+\n+withOption\n+    : WITH reloptions | WITHOUT OIDS\n+    ;\n+\n+tableAccessMethodClause\n+    : (USING accessMethod)?\n+    ;\n+\n+accessMethod\n+    : colId\n     ;\n \n createIndex\n-    : CREATE createIndexSpecification_ INDEX concurrentlyClause_ (indexNotExistClause_ indexName)? ON onlyClause_ tableName \n+    : CREATE createIndexSpecification_ INDEX concurrentlyClause_ (indexNotExistClause_ indexName)? ON onlyClause_ tableName\n+      accessMethodClause? LP_ indexParams RP_ include? (WITH reloptions)? tableSpace? whereClause?\n+    ;\n+\n+include\n+    : INCLUDE LP_ indexIncludingParams RP_\n+    ;\n+\n+indexIncludingParams\n+    : indexElem (COMMA_ indexElem)*\n+    ;\n+\n+accessMethodClause\n+    : USING accessMethod\n+    ;\n+\n+createDatabase\n+    : CREATE DATABASE name optWith_ createDatabaseSpecification_*\n+    ;\n+\n+createView\n+    : CREATE (OR REPLACCE)? (TMP | TMPORARY)? (RECURSIVE)? VIEW name\n+      (LP_ (columnList (COMMA_ columnList)*)? RP_)?\n+      (WITH reloptions)?\n+      AS select\n+      (WITH (CASCADE | LOCAL)? CHECK OPTION)?\n+    ;\n+\n+columnList\n+    : columnElem (COMMA_ columnElem)*\n+    ;\n+\n+columnElem\n+    : colId\n+    ;\n+\n+dropDatabase\n+    : DROP DATABASE (IF EXISTS)? name\n+    ;\n+\n+createDatabaseSpecification_\n+    :  createdbOptName (EQ_)? (signedIconst | optBooleanOrString | DEFAULT)\n+    ;\n+\n+createdbOptName\n+    : identifier\n+    | CONNECTION LIMIT\n+    | ENCODING\n+    | LOCATION\n+    | OWNER\n+    | TABLESPACE\n+    | TEMPLATE\n+    ;\n+\n+optWith_\n+    : (WITH)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMTE1MA==", "bodyText": "It can be deleted, use COLUMN directly.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468401150", "createdAt": "2020-08-11T08:08:09Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4", "diffHunk": "@@ -305,3 +478,519 @@ indexExistClause_\n indexNames\n     : indexName (COMMA_ indexName)*\n     ;\n+\n+alterDatabase\n+    : ALTER DATABASE databaseName alterDatabaseClause\n+    ;\n+\n+alterDatabaseClause\n+    : (WITH)? createdbOptItems?\n+    | RENAME TO databaseName\n+    | OWNER TO roleSpec\n+    | SET TABLESPACE name\n+    | setResetClause\n+    ;\n+\n+setResetClause\n+    : SET setRest\n+    | variableResetStmt\n+    ;\n+\n+setRest\n+    : TRANSACTION transactionModeList\n+    | SESSION CHARACTERISTICS AS TRANSACTION transactionModeList\n+    | setRestMore\n+    ;\n+\n+transactionModeList\n+    : transactionModeItem ((COMMA_)? transactionModeItem)*\n+    ;\n+\n+transactionModeItem\n+    : ISOLATION LEVEL isoLevel\n+    | READ ONLY\n+    | READ WRITE\n+    | DEFERRABLE\n+    | NOT DEFERRABLE\n+    ;\n+\n+setRestMore\n+    : genericSet\n+    | varName FROM CURRENT\n+    | TIME ZONE zoneValue\n+    | CATALOG STRING_\n+    | SCHEMA STRING_\n+    | NAMES encoding?\n+    | ROLE nonReservedWord | STRING_\n+    | SESSION AUTHORIZATION nonReservedWord | STRING_\n+    | SESSION AUTHORIZATION DEFAULT\n+    | XML OPTION documentOrContent\n+    | TRANSACTION SNAPSHOT STRING_\n+    ;\n+\n+encoding\n+    : STRING_\n+    | DEFAULT\n+    ;\n+\n+genericSet\n+    : varName (EQ_|TO) (varList | DEFAULT)\n+    ;\n+\n+documentOrContent\n+    : DOCUMENT\n+    | CONTENT\n+    ;\n+\n+createdbOptItems\n+    : createdbOptItem+\n+    ;\n+\n+createdbOptItem\n+    : createdbOptName (EQ_)? signedIconst\n+    | createdbOptName (EQ_)? optBooleanOrString\n+    | createdbOptName (EQ_)? DEFAULT\n+    ;\n+\n+variableResetStmt\n+    : RESET resetRest\n+    ;\n+\n+resetRest\n+    : genericReset\n+    | TIME ZONE\n+    | TRANSACTION ISOLATION LEVEL\n+    | SESSION AUTHORIZATION\n+    ;\n+\n+genericReset\n+    : varName\n+    | ALL\n+    ;\n+\n+alterTableCmds\n+    : alterTableCmd (COMMA_ alterTableCmd)*\n+    ;\n+\n+alterTableCmd\n+    : ADD COLUMN? (IF NOT EXISTS)? columnDef\n+    | ALTER column? colId alterColumnDefault\n+    | ALTER column? colId DROP NOT NULL\n+    | ALTER column? colId SET NOT NULL\n+    | ALTER column? colId SET STATISTICS signedIconst\n+    | ALTER column? NUMBER_ SET STATISTICS signedIconst\n+    | ALTER column? colId SET reloptions\n+    | ALTER column? colId RESET reloptions\n+    | ALTER column? colId SET STORAGE colId\n+    | ALTER column? colId ADD GENERATED generatedWhen AS IDENTITY optParenthesizedSeqOptList\n+    | ALTER column? colId alterIdentityColumnOptionList\n+    | ALTER column? colId DROP IDENTITY\n+    | ALTER column? colId DROP IDENTITY IF EXISTS\n+    | DROP column? IF EXISTS colId dropBehavior?\n+    | DROP column? colId dropBehavior?\n+    | ALTER column? colId setData? TYPE typeName collateClause? alterUsing?\n+    | ALTER column? colId alterGenericOptions\n+    | ADD tableConstraint\n+    | ALTER CONSTRAINT name constraintAttributeSpec\n+    | VALIDATE CONSTRAINT name\n+    | DROP CONSTRAINT IF EXISTS name dropBehavior?\n+    | DROP CONSTRAINT name dropBehavior?\n+    | SET WITHOUT OIDS\n+    | CLUSTER ON name\n+    | SET WITHOUT CLUSTER\n+    | SET LOGGED\n+    | SET UNLOGGED\n+    | ENABLE TRIGGER name\n+    | ENABLE ALWAYS TRIGGER name\n+    | ENABLE REPLICA TRIGGER name\n+    | ENABLE TRIGGER ALL\n+    | ENABLE TRIGGER USER\n+    | DISABLE TRIGGER name\n+    | DISABLE TRIGGER ALL\n+    | DISABLE TRIGGER USER\n+    | ENABLE RULE name\n+    | ENABLE ALWAYS RULE name\n+    | ENABLE REPLICA RULE name\n+    | DISABLE RULE name\n+    | INHERIT qualifiedName\n+    | NO INHERIT qualifiedName\n+    | OF anyName\n+    | NOT OF\n+    | OWNER TO roleSpec\n+    | SET TABLESPACE name\n+    | SET reloptions\n+    | RESET reloptions\n+    | REPLICA IDENTITY replicaIdentity\n+    | ENABLE ROW LEVEL SECURITY\n+    | DISABLE ROW LEVEL SECURITY\n+    | FORCE ROW LEVEL SECURITY\n+    | NO FORCE ROW LEVEL SECURITY\n+    | alterGenericOptions\n+    ;\n+\n+constraintAttributeSpec\n+    : constraintAttributeElem*\n+    ;\n+\n+constraintAttributeElem\n+    : NOT DEFERRABLE\n+    | DEFERRABLE\n+    | INITIALLY IMMEDIATE\n+    | INITIALLY DEFERRED\n+    | NOT VALID\n+    | NO INHERIT\n+    ;\n+\n+alterGenericOptions\n+    : OPTIONS LP_ alterGenericOptionList RP_\n+    ;\n+\n+alterGenericOptionList\n+    : alterGenericOptionElem (COMMA_ alterGenericOptionElem)*\n+    ;\n+\n+alterGenericOptionElem\n+    : genericOptionElem\n+    | SET genericOptionElem\n+    | ADD genericOptionElem\n+    | DROP genericOptionName\n+    ;\n+\n+genericOptionName\n+    : colLable\n+    ;\n+\n+dropBehavior\n+    : CASCADE | RESTRICT\n+    ;\n+\n+alterUsing\n+    : USING aExpr\n+    ;\n+\n+setData\n+    : SET DATA\n+    ;\n+\n+alterIdentityColumnOptionList\n+    : alterIdentityColumnOption+\n+    ;\n+\n+alterIdentityColumnOption\n+    : RESTART\n+    | RESTART (WITH)? numericOnly\n+    | SET seqOptElem\n+    | SET GENERATED generatedWhen\n+    ;\n+\n+alterColumnDefault\n+    : SET DEFAULT aExpr\n+    | DROP DEFAULT\n+    ;\n+\n+column\n+    : COLUMN\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 474}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMzc2Ng==", "bodyText": "It is not a keyword, maybe REPLACE.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468403766", "createdAt": "2020-08-11T08:12:53Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/PostgreSQLKeyword.g4", "diffHunk": "@@ -1380,3 +1380,23 @@ VERBOSE\n PARAM\n     : P A R A M\n     ;\n+\n+REPLACCE\n+    : R E P L A C C E\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNTMzMg==", "bodyText": "Maybe, it should be TEMPORARY and TEMP.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468405332", "createdAt": "2020-08-11T08:15:30Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/PostgreSQLKeyword.g4", "diffHunk": "@@ -1380,3 +1380,23 @@ VERBOSE\n PARAM\n     : P A R A M\n     ;\n+\n+REPLACCE\n+    : R E P L A C C E\n+    ;\n+\n+TMP\n+    : T M P\n+    ;\n+\n+TMPORARY\n+    : T M P O R A R Y\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNTk0NA==", "bodyText": "keep original format.plz check other lines.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468405944", "createdAt": "2020-08-11T08:16:37Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/impl/PostgreSQLDDLVisitor.java", "diffHunk": "@@ -121,7 +122,7 @@ public ASTNode visitAlterTable(final AlterTableContext ctx) {\n         }\n         return result;\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjA5MQ==", "bodyText": "same as above.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468406091", "createdAt": "2020-08-11T08:16:50Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/java/org/apache/shardingsphere/sql/parser/postgresql/visitor/impl/PostgreSQLDDLVisitor.java", "diffHunk": "@@ -145,7 +146,7 @@ public ASTNode visitAlterDefinitionClause(final AlterDefinitionClauseContext ctx\n         }\n         return result;\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f77455c767b44747af973e5100f22e2f14bca77"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a3385bfb41c3b51d2932acb6b91047381be6241", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/0a3385bfb41c3b51d2932acb6b91047381be6241", "committedDate": "2020-08-11T09:08:11Z", "message": "review fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8155c14594e32fdf08bf9cb86df2cbb5fa29c0", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/7e8155c14594e32fdf08bf9cb86df2cbb5fa29c0", "committedDate": "2020-08-11T09:10:43Z", "message": "review fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08b4f6752aadc88969ded02368065d6569395a1a", "author": {"user": {"login": "happybyr", "name": "cao biao"}}, "url": "https://github.com/apache/shardingsphere/commit/08b4f6752aadc88969ded02368065d6569395a1a", "committedDate": "2020-08-11T09:12:47Z", "message": "review fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODk4NDAx", "url": "https://github.com/apache/shardingsphere/pull/6769#pullrequestreview-464898401", "createdAt": "2020-08-11T09:27:21Z", "commit": {"oid": "08b4f6752aadc88969ded02368065d6569395a1a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToyNzoyMVrOG-vyYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToyNzoyMVrOG-vyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ0Nzg0MA==", "bodyText": "Plz refer to gram.y, maybe the official doc is not correct.", "url": "https://github.com/apache/shardingsphere/pull/6769#discussion_r468447840", "createdAt": "2020-08-11T09:27:21Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4", "diffHunk": "@@ -305,3 +474,514 @@ indexExistClause_\n indexNames\n     : indexName (COMMA_ indexName)*\n     ;\n+\n+alterDatabase\n+    : ALTER DATABASE databaseName alterDatabaseClause\n+    ;\n+\n+alterDatabaseClause\n+    : (WITH)? createdbOptItems?\n+    | RENAME TO databaseName\n+    | OWNER TO roleSpec\n+    | SET TABLESPACE name\n+    | setResetClause\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b4f6752aadc88969ded02368065d6569395a1a"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTYxNjI1", "url": "https://github.com/apache/shardingsphere/pull/6769#pullrequestreview-464961625", "createdAt": "2020-08-11T11:03:01Z", "commit": {"oid": "08b4f6752aadc88969ded02368065d6569395a1a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4781, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}