{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTQxODkz", "number": 5206, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0NDo1M1rODyzLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToxMToxMlrODy3HiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTkzODc1OnYy", "diffSide": "RIGHT", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0NDo1M1rOGHDa6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowNDoxMVrOGHEA2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTI1Ng==", "bodyText": "getSimpleTableSegments((SelectStatement) sqlStatement)", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410049256", "createdAt": "2020-04-17T07:44:53Z", "author": {"login": "tristaZero"}, "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "diffHunk": "@@ -51,14 +53,15 @@\n     \n     @Override\n     protected boolean isGenerateSQLTokenForEncrypt(final SQLStatementContext sqlStatementContext) {\n-        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSqlStatement().getSimpleTableSegments().isEmpty();\n+        SQLStatement sqlStatement = sqlStatementContext.getSqlStatement();\n+        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSimpleTableSegments((SelectStatement) sqlStatement).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1ODk2OQ==", "bodyText": "What do you mean? @tristaZero", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410058969", "createdAt": "2020-04-17T08:04:11Z", "author": {"login": "jingshanglu"}, "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "diffHunk": "@@ -51,14 +53,15 @@\n     \n     @Override\n     protected boolean isGenerateSQLTokenForEncrypt(final SQLStatementContext sqlStatementContext) {\n-        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSqlStatement().getSimpleTableSegments().isEmpty();\n+        SQLStatement sqlStatement = sqlStatementContext.getSqlStatement();\n+        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSimpleTableSegments((SelectStatement) sqlStatement).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTI1Ng=="}, "originalCommit": {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk0MTU5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0NTo0NFrOGHDcpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowNDozNFrOGHEBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTcwMg==", "bodyText": "getTables(final ASTNode astNode)", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410049702", "createdAt": "2020-04-17T07:45:44Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -262,8 +268,86 @@ private boolean isTable(final OwnerSegment owner, final Collection<SimpleTableSe\n         return true;\n     }\n     \n+    private boolean isTable(final SimpleTableSegment owner, final Collection<SimpleTableSegment> tableSegments) {\n+        for (SimpleTableSegment each : tableSegments) {\n+            String tableName = owner.getTableName().getIdentifier().getValue();\n+            if (tableName.equals(each.getAlias().orElse(null)) && !tableName.equals(each.getTableName().getIdentifier().getValue())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n     @Override\n     public Optional<WhereSegment> getWhere() {\n         return getSqlStatement().getWhere();\n     }\n+    \n+    /**\n+     * get tables.\n+     *\n+     * @param selectStatement SelectStatement.\n+     *\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments(final SelectStatement selectStatement) {\n+        Collection<SimpleTableSegment> result = getTables(selectStatement);\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        for (SimpleTableSegment each : result) {\n+            if (isTable(each, result)) {\n+                tables.add(each);\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    private Collection<SimpleTableSegment> getTables(final ASTNode astNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1OTE1OQ==", "bodyText": "What do you mean? @tristaZero", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410059159", "createdAt": "2020-04-17T08:04:34Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -262,8 +268,86 @@ private boolean isTable(final OwnerSegment owner, final Collection<SimpleTableSe\n         return true;\n     }\n     \n+    private boolean isTable(final SimpleTableSegment owner, final Collection<SimpleTableSegment> tableSegments) {\n+        for (SimpleTableSegment each : tableSegments) {\n+            String tableName = owner.getTableName().getIdentifier().getValue();\n+            if (tableName.equals(each.getAlias().orElse(null)) && !tableName.equals(each.getTableName().getIdentifier().getValue())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n     @Override\n     public Optional<WhereSegment> getWhere() {\n         return getSqlStatement().getWhere();\n     }\n+    \n+    /**\n+     * get tables.\n+     *\n+     * @param selectStatement SelectStatement.\n+     *\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments(final SelectStatement selectStatement) {\n+        Collection<SimpleTableSegment> result = getTables(selectStatement);\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();\n+        for (SimpleTableSegment each : result) {\n+            if (isTable(each, result)) {\n+                tables.add(each);\n+            }\n+        }\n+        return tables;\n+    }\n+    \n+    private Collection<SimpleTableSegment> getTables(final ASTNode astNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTcwMg=="}, "originalCommit": {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjA2ODIwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoyNTo0M1rOGHEs_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoyNTo0M1rOGHEs_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA3MDI3MQ==", "bodyText": "createProjectionsContext(sql, this, groupByContext, orderByContext);", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410070271", "createdAt": "2020-04-17T08:25:43Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -93,10 +99,10 @@ public SelectStatementContext(final SelectStatement sqlStatement, final GroupByC\n     \n     public SelectStatementContext(final SchemaMetaData schemaMetaData, final String sql, final List<Object> parameters, final SelectStatement sqlStatement) {\n         super(sqlStatement);\n-        tablesContext = new TablesContext(sqlStatement.getSimpleTableSegments());\n+        tablesContext = new TablesContext(getSimpleTableSegments(sqlStatement));\n         groupByContext = new GroupByContextEngine().createGroupByContext(sqlStatement);\n         orderByContext = new OrderByContextEngine().createOrderBy(sqlStatement, groupByContext);\n-        projectionsContext = new ProjectionsContextEngine(schemaMetaData).createProjectionsContext(sql, sqlStatement, groupByContext, orderByContext);\n+        projectionsContext = new ProjectionsContextEngine(schemaMetaData).createProjectionsContext(sql, this, groupByContext, orderByContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554ed20352ad512da0ed023fca7753a14fd20d59"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjU3NjcyOnYy", "diffSide": "RIGHT", "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTowODowN1rOGHJyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTowODowN1rOGHJyaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MzU3Ng==", "bodyText": "Not used?", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410153576", "createdAt": "2020-04-17T11:08:07Z", "author": {"login": "tristaZero"}, "path": "encrypt-core/encrypt-core-rewrite/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptProjectionTokenGenerator.java", "diffHunk": "@@ -51,14 +52,15 @@\n     \n     @Override\n     protected boolean isGenerateSQLTokenForEncrypt(final SQLStatementContext sqlStatementContext) {\n-        return sqlStatementContext instanceof SelectStatementContext && !((SelectStatementContext) sqlStatementContext).getSqlStatement().getSimpleTableSegments().isEmpty();\n+        SQLStatement sqlStatement = sqlStatementContext.getSqlStatement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eabf06461ac4e2001602be6a352dfcdfe613a5f1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjU3Nzk3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/engine/ProjectionsContextEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTowODozN1rOGHJzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTowODozN1rOGHJzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1Mzc4NA==", "bodyText": "Please remove them.", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410153784", "createdAt": "2020-04-17T11:08:37Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/segment/select/projection/engine/ProjectionsContextEngine.java", "diffHunk": "@@ -58,17 +57,20 @@ public ProjectionsContextEngine(final SchemaMetaData schemaMetaData) {\n      * Create projections context.\n      *\n      * @param sql SQL\n-     * @param selectStatement SQL statement\n+     * @param tables tables\n+     * @param projectionsSegment projection Segments\n      * @param groupByContext group by context\n      * @param orderByContext order by context\n      * @return projections context\n      */\n-    public ProjectionsContext createProjectionsContext(final String sql, final SelectStatement selectStatement, final GroupByContext groupByContext, final OrderByContext orderByContext) {\n-        ProjectionsSegment projectionsSegment = selectStatement.getProjections();\n-        Collection<Projection> projections = getProjections(sql, selectStatement.getSimpleTableSegments(), projectionsSegment);\n+    public ProjectionsContext createProjectionsContext(final String sql, final Collection<SimpleTableSegment> tables, final ProjectionsSegment projectionsSegment,\n+                                                       final GroupByContext groupByContext, final OrderByContext orderByContext) {\n+//        SelectStatement selectStatement = context.getSqlStatement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eabf06461ac4e2001602be6a352dfcdfe613a5f1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjU4NDQxOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToxMToxMlrOGHJ3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToxMToxMlrOGHJ3Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NDgzMA==", "bodyText": "Please exchange two of these names, since result is expected to return.", "url": "https://github.com/apache/shardingsphere/pull/5206#discussion_r410154830", "createdAt": "2020-04-17T11:11:12Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/main/java/org/apache/shardingsphere/sql/parser/binder/statement/dml/SelectStatementContext.java", "diffHunk": "@@ -262,8 +267,97 @@ private boolean isTable(final OwnerSegment owner, final Collection<SimpleTableSe\n         return true;\n     }\n     \n+    private boolean isTable(final SimpleTableSegment owner, final Collection<SimpleTableSegment> tableSegments) {\n+        for (SimpleTableSegment each : tableSegments) {\n+            String tableName = owner.getTableName().getIdentifier().getValue();\n+            if (tableName.equals(each.getAlias().orElse(null)) && !tableName.equals(each.getTableName().getIdentifier().getValue())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n     @Override\n     public Optional<WhereSegment> getWhere() {\n         return getSqlStatement().getWhere();\n     }\n+    \n+    /**\n+     * get tables.\n+     * @return tables.\n+     */\n+    public Collection<SimpleTableSegment> getSimpleTableSegments() {\n+        Collection<SimpleTableSegment> result = getTables();\n+        Collection<SimpleTableSegment> tables = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eabf06461ac4e2001602be6a352dfcdfe613a5f1"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1091, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}