{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTQ0MzEx", "number": 4260, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxNzo0NFrODfFQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODozODoyMVrODfFoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE4NzAyOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxNzo0NFrOFolGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNDo0MlrOFosXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTE2Ng==", "bodyText": "constant instead of literal\uff1f", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378095166", "createdAt": "2020-02-12T08:17:44Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -57,6 +60,16 @@ public String getSchemaPath() {\n         return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE);\n     }\n     \n+    /**\n+     * Get schema name path.\n+     * \n+     * @param schemaName schema name\n+     * @return schema name path\n+     */\n+    public String getSchemaNamePath(final String schemaName) {\n+        return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE, schemaName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDI3MQ==", "bodyText": "fix code, use class constant.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214271", "createdAt": "2020-02-12T12:14:42Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -57,6 +60,16 @@ public String getSchemaPath() {\n         return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE);\n     }\n     \n+    /**\n+     * Get schema name path.\n+     * \n+     * @param schemaName schema name\n+     * @return schema name path\n+     */\n+    public String getSchemaNamePath(final String schemaName) {\n+        return Joiner.on(\"/\").join(\"\", name, ROOT, SCHEMA_NODE, schemaName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTE2Ng=="}, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE4NzY2OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxNzo1NlrOFolGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNDo1NFrOFosX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTI1Mw==", "bodyText": "constant\uff1f", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378095253", "createdAt": "2020-02-12T08:17:56Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -119,6 +132,19 @@ public String getSchemaName(final String configurationNodeFullPath) {\n         return result;\n     }\n     \n+    /**\n+     * Split sharding schema name.\n+     * \n+     * @param shardingSchemaNames sharding schema names\n+     * @return sharding schema names\n+     */\n+    public Collection<String> splitShardingSchemaName(final String shardingSchemaNames) {\n+        if (Strings.isNullOrEmpty(shardingSchemaNames)) {\n+            return Collections.emptyList();\n+        }\n+        return Splitter.on(\",\").splitToList(shardingSchemaNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDM1OA==", "bodyText": "the same to above.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214358", "createdAt": "2020-02-12T12:14:54Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-core/src/main/java/org/apache/shardingsphere/orchestration/internal/registry/config/node/ConfigurationNode.java", "diffHunk": "@@ -119,6 +132,19 @@ public String getSchemaName(final String configurationNodeFullPath) {\n         return result;\n     }\n     \n+    /**\n+     * Split sharding schema name.\n+     * \n+     * @param shardingSchemaNames sharding schema names\n+     * @return sharding schema names\n+     */\n+    public Collection<String> splitShardingSchemaName(final String shardingSchemaNames) {\n+        if (Strings.isNullOrEmpty(shardingSchemaNames)) {\n+            return Collections.emptyList();\n+        }\n+        return Splitter.on(\",\").splitToList(shardingSchemaNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTI1Mw=="}, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTE5MDY4OnYy", "diffSide": "RIGHT", "path": "sharding-proxy/sharding-proxy-bootstrap/src/main/resources/conf/server.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODoxOTowM1rOFolIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNToxNFrOFosYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTczNg==", "bodyText": "If we didn't remove these parameters from config file, I suggest keep them here for examples.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378095736", "createdAt": "2020-02-12T08:19:03Z", "author": {"login": "kimmking"}, "path": "sharding-proxy/sharding-proxy-bootstrap/src/main/resources/conf/server.yaml", "diffHunk": "@@ -29,11 +29,6 @@\n #    namespace: orchestration\n #    props:\n #      overwrite: false\n-#      retry-interval-milliseconds: 10\n-#      time-to-live-seconds: 10\n-#      max-retries: 10\n-#      operation-timeout-milliseconds: 10\n-#      digest: 123\n #", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDUzMA==", "bodyText": "I have reverted the config.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214530", "createdAt": "2020-02-12T12:15:14Z", "author": {"login": "dongzl"}, "path": "sharding-proxy/sharding-proxy-bootstrap/src/main/resources/conf/server.yaml", "diffHunk": "@@ -29,11 +29,6 @@\n #    namespace: orchestration\n #    props:\n #      overwrite: false\n-#      retry-interval-milliseconds: 10\n-#      time-to-live-seconds: 10\n-#      max-retries: 10\n-#      operation-timeout-milliseconds: 10\n-#      digest: 123\n #", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NTczNg=="}, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTI0NzcxOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/main/java/org/apache/shardingsphere/orchestration/center/instance/wrapper/ApolloOpenApiWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODozODoyMVrOFolqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNTozNlrOFosZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDQxOA==", "bodyText": "Whether we should add TCC code for transaction.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378104418", "createdAt": "2020-02-12T08:38:21Z", "author": {"login": "wgy8283335"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/main/java/org/apache/shardingsphere/orchestration/center/instance/wrapper/ApolloOpenApiWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance.wrapper;\n+\n+import com.ctrip.framework.apollo.core.ConfigConsts;\n+import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;\n+import com.ctrip.framework.apollo.openapi.client.constant.ApolloOpenApiConstants;\n+import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;\n+import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;\n+import com.google.common.primitives.Ints;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Apollo open api client wrapper.\n+ *\n+ * @author dongzonglei\n+ */\n+public final class ApolloOpenApiWrapper {\n+    \n+    private ApolloOpenApiClient client;\n+    \n+    private String namespace;\n+    \n+    private String appId;\n+    \n+    private String env;\n+    \n+    private String clusterName;\n+    \n+    private String administrator;\n+    \n+    public ApolloOpenApiWrapper(final InstanceConfiguration config, final Properties properties) {\n+        namespace = config.getNamespace();\n+        appId = properties.getProperty(\"appId\", \"APOLLO_SHARDING_SPHERE\");\n+        env = properties.getProperty(\"env\", \"DEV\");\n+        clusterName = properties.getProperty(\"clusterName\", ConfigConsts.CLUSTER_NAME_DEFAULT);\n+        administrator = properties.getProperty(\"administrator\");\n+        String apolloToken = properties.getProperty(\"token\");\n+        String portalUrl = properties.getProperty(\"portalUrl\");\n+        Integer connectTimeout = Ints.tryParse(Objects.toString(properties.get(\"connectTimeout\")));\n+        Integer readTimeout = Ints.tryParse(Objects.toString(properties.get(\"readTimeout\")));\n+        client = ApolloOpenApiClient.newBuilder().withPortalUrl(portalUrl)\n+                .withConnectTimeout(connectTimeout == null ? ApolloOpenApiConstants.DEFAULT_CONNECT_TIMEOUT : connectTimeout)\n+                .withReadTimeout(readTimeout == null ? ApolloOpenApiConstants.DEFAULT_READ_TIMEOUT : readTimeout)\n+                .withToken(apolloToken).build();\n+    }\n+    \n+    /**\n+     * Get config value by key.\n+     * \n+     * @param key key\n+     * @return value\n+     */\n+    public String getValue(final String key) {\n+        OpenItemDTO itemDTO = client.getItem(appId, env, clusterName, namespace, key);\n+        if (itemDTO == null) {\n+            return null;\n+        }\n+        return itemDTO.getValue();\n+    }\n+    \n+    /**\n+     * Persist config.\n+     * \n+     * @param key key\n+     * @param value value\n+     */\n+    public void persist(final String key, final String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDY5NQ==", "bodyText": "fix code, use try catch.", "url": "https://github.com/apache/shardingsphere/pull/4260#discussion_r378214695", "createdAt": "2020-02-12T12:15:36Z", "author": {"login": "dongzl"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-apollo/src/main/java/org/apache/shardingsphere/orchestration/center/instance/wrapper/ApolloOpenApiWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance.wrapper;\n+\n+import com.ctrip.framework.apollo.core.ConfigConsts;\n+import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;\n+import com.ctrip.framework.apollo.openapi.client.constant.ApolloOpenApiConstants;\n+import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;\n+import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;\n+import com.google.common.primitives.Ints;\n+import org.apache.shardingsphere.orchestration.center.configuration.InstanceConfiguration;\n+\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+/**\n+ * Apollo open api client wrapper.\n+ *\n+ * @author dongzonglei\n+ */\n+public final class ApolloOpenApiWrapper {\n+    \n+    private ApolloOpenApiClient client;\n+    \n+    private String namespace;\n+    \n+    private String appId;\n+    \n+    private String env;\n+    \n+    private String clusterName;\n+    \n+    private String administrator;\n+    \n+    public ApolloOpenApiWrapper(final InstanceConfiguration config, final Properties properties) {\n+        namespace = config.getNamespace();\n+        appId = properties.getProperty(\"appId\", \"APOLLO_SHARDING_SPHERE\");\n+        env = properties.getProperty(\"env\", \"DEV\");\n+        clusterName = properties.getProperty(\"clusterName\", ConfigConsts.CLUSTER_NAME_DEFAULT);\n+        administrator = properties.getProperty(\"administrator\");\n+        String apolloToken = properties.getProperty(\"token\");\n+        String portalUrl = properties.getProperty(\"portalUrl\");\n+        Integer connectTimeout = Ints.tryParse(Objects.toString(properties.get(\"connectTimeout\")));\n+        Integer readTimeout = Ints.tryParse(Objects.toString(properties.get(\"readTimeout\")));\n+        client = ApolloOpenApiClient.newBuilder().withPortalUrl(portalUrl)\n+                .withConnectTimeout(connectTimeout == null ? ApolloOpenApiConstants.DEFAULT_CONNECT_TIMEOUT : connectTimeout)\n+                .withReadTimeout(readTimeout == null ? ApolloOpenApiConstants.DEFAULT_READ_TIMEOUT : readTimeout)\n+                .withToken(apolloToken).build();\n+    }\n+    \n+    /**\n+     * Get config value by key.\n+     * \n+     * @param key key\n+     * @return value\n+     */\n+    public String getValue(final String key) {\n+        OpenItemDTO itemDTO = client.getItem(appId, env, clusterName, namespace, key);\n+        if (itemDTO == null) {\n+            return null;\n+        }\n+        return itemDTO.getValue();\n+    }\n+    \n+    /**\n+     * Persist config.\n+     * \n+     * @param key key\n+     * @param value value\n+     */\n+    public void persist(final String key, final String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDQxOA=="}, "originalCommit": {"oid": "51eab05cc4705a966d1fa3c563f9f1a3802529a7"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 969, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}