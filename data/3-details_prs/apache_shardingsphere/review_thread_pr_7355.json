{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzIxNzQ4", "number": 7355, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNDoxNFrOEhuegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo1N1rOEhumjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzk5OTM3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-features/shardingsphere-replica/shardingsphere-replica-execute/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.executor.sql.raw.execute.callback.RawExecutorCallback", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNDoxNFrOHPMx2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNDoxNFrOHPMx2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMDA1OQ==", "bodyText": "Please add a blank line in the end of file", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485700059", "createdAt": "2020-09-09T15:24:14Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-features/shardingsphere-replica/shardingsphere-replica-execute/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.executor.sql.raw.execute.callback.RawExecutorCallback", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.apache.shardingsphere.replica.execute.callback.DefaultReplicaExecutorCallback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODAxMjQ3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNzowN1rOHPM57w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyNzowN1rOHPM57w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMjEyNw==", "bodyText": "Please rename primaryKeyColumns as result for return value", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485702127", "createdAt": "2020-09-09T15:27:07Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/ExecutionContextBuilder.java", "diffHunk": "@@ -42,22 +50,77 @@\n      * \n      * @param metaData meta data\n      * @param sqlRewriteResult SQL rewrite result\n+     * @param sqlStatementContext SQL statement context\n      * @return execution contexts\n      */\n-    public static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final SQLRewriteResult sqlRewriteResult) {\n-        return sqlRewriteResult instanceof GenericSQLRewriteResult ? build(metaData, (GenericSQLRewriteResult) sqlRewriteResult) : build((RouteSQLRewriteResult) sqlRewriteResult);\n+    public static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final SQLRewriteResult sqlRewriteResult, final SQLStatementContext sqlStatementContext) {\n+        return sqlRewriteResult instanceof GenericSQLRewriteResult ? build(metaData, (GenericSQLRewriteResult) sqlRewriteResult, sqlStatementContext)\n+                : build(metaData, (RouteSQLRewriteResult) sqlRewriteResult);\n     }\n     \n-    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final GenericSQLRewriteResult sqlRewriteResult) {\n+    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final GenericSQLRewriteResult sqlRewriteResult, final SQLStatementContext sqlStatementContext) {\n         String dataSourceName = metaData.getDataSourceMetaDatas().getAllInstanceDataSourceNames().iterator().next();\n-        return Collections.singletonList(new ExecutionUnit(dataSourceName, new SQLUnit(sqlRewriteResult.getSqlRewriteUnit().getSql(), sqlRewriteResult.getSqlRewriteUnit().getParameters())));\n+        return Collections.singletonList(new ExecutionUnit(dataSourceName,\n+                new SQLUnit(sqlRewriteResult.getSqlRewriteUnit().getSql(), sqlRewriteResult.getSqlRewriteUnit().getParameters(), getActualTableNames(sqlStatementContext),\n+                        getPrimaryKeyColumns(metaData, sqlStatementContext))));\n     }\n     \n-    private static Collection<ExecutionUnit> build(final RouteSQLRewriteResult sqlRewriteResult) {\n+    private static Collection<ExecutionUnit> build(final ShardingSphereMetaData metaData, final RouteSQLRewriteResult sqlRewriteResult) {\n         Collection<ExecutionUnit> result = new LinkedHashSet<>();\n         for (Entry<RouteUnit, SQLRewriteUnit> entry : sqlRewriteResult.getSqlRewriteUnits().entrySet()) {\n-            result.add(new ExecutionUnit(entry.getKey().getDataSourceMapper().getActualName(), new SQLUnit(entry.getValue().getSql(), entry.getValue().getParameters())));\n+            Collection<RouteMapper> tableMappers = entry.getKey().getTableMappers();\n+            result.add(new ExecutionUnit(entry.getKey().getDataSourceMapper().getActualName(),\n+                    new SQLUnit(entry.getValue().getSql(), entry.getValue().getParameters(), getActualTableNames(tableMappers), getPrimaryKeyColumns(metaData, tableMappers))));\n         }\n         return result;\n     }\n+    \n+    private static Set<String> getActualTableNames(final SQLStatementContext sqlStatementContext) {\n+        return getGenericTableNames(sqlStatementContext);\n+    }\n+\n+    private static Set<String> getActualTableNames(final Collection<RouteMapper> tableMappers) {\n+        if (null == tableMappers) {\n+            return Collections.emptySet();\n+        }\n+        return tableMappers.stream().map(RouteMapper::getActualName).collect(Collectors.toSet());\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final SQLStatementContext sqlStatementContext) {\n+        return getPrimaryKeyColumns(metaData, getLogicTableNames(sqlStatementContext));\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final Collection<RouteMapper> tableMappers) {\n+        return getPrimaryKeyColumns(metaData, getLogicTableNames(tableMappers));\n+    }\n+    \n+    private static Map<String, List<String>> getPrimaryKeyColumns(final ShardingSphereMetaData metaData, final Set<String> logicTableNames) {\n+        Map<String, List<String>> primaryKeyColumns = new HashMap<>(logicTableNames.size());\n+        for (String each: logicTableNames) {\n+            primaryKeyColumns.put(each, metaData.getRuleSchemaMetaData().getSchemaMetaData().get(each).getPrimaryKeyColumns());\n+        }\n+        return primaryKeyColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODAxOTk4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/SQLUnit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo1N1rOHPM-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToyODo1N1rOHPM-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMzQyMA==", "bodyText": "What is the useful of the structure of Map<String, List<String>>?\nCan we use a object to define this structure?", "url": "https://github.com/apache/shardingsphere/pull/7355#discussion_r485703420", "createdAt": "2020-09-09T15:28:57Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/context/SQLUnit.java", "diffHunk": "@@ -36,4 +40,15 @@\n     private final String sql;\n     \n     private final List<Object> parameters;\n+\n+    private final Set<String> actualTables;\n+    \n+    private final Map<String, List<String>> primaryKeyColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981f6b080832a44b6c20d67d6415aa4aa60c2e72"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 738, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}