{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTAzMTA2", "number": 5327, "title": "create RANGE sharding algorithm", "bodyText": "Ref #5280 .\nChanges proposed in this pull request:\n\ncreate RANGE sharding algorithm.", "createdAt": "2020-04-26T15:30:08Z", "url": "https://github.com/apache/shardingsphere/pull/5327", "merged": true, "mergeCommit": {"oid": "fe2d9c354e64725b826f32dc390e59a8be9285ea"}, "closed": true, "closedAt": "2020-04-28T02:53:35Z", "author": {"login": "strongduanmu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbma29AFqTQwMDYwMDQzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb66bYgFqTQwMTQ2NDY2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjAwNDM2", "url": "https://github.com/apache/shardingsphere/pull/5327#pullrequestreview-400600436", "createdAt": "2020-04-27T03:07:46Z", "commit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowNzo0NlrOGMO1KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowNzo0NlrOGMO1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4MA==", "bodyText": "for line 61 and 73:\ndoSharding() method will be called while route value, it may be not efficient to build partitionRangeMap in doSharding method, I think it can be used as a static field and  built once while initing instance.", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r415479080", "createdAt": "2020-04-27T03:07:46Z", "author": {"login": "SanmuWangZJU"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/RangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.Longs;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Range sharding algorithm.\n+ * <p>\n+ * Range sharding algorithm is similar to the rule of partition table.\n+ * User can specify the range by setting the `range.partition.split.value` parameter.\n+ * The `range.partition.split.value` parameter is an ordered list of numbers, separated by commas.\n+ * </p>\n+ * <p>\n+ * For example: If the `range.partition.split.value` parameter is set to `1,5,10`,\n+ * the parameter will split all values into four intervals\u2014\u2014(-\u221e, 1), [1,5), [5,10), [10, +\u221e),\n+ * which corresponding to partition_0, partition_1, partition_2, partition_3.\n+ * The sharding values will be divided into different partition by its value.\n+ * </p>\n+ */\n+public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+\n+    private static final String RANGE_PARTITION_SPLIT_VALUE = \"range.partition.split.value\";\n+\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(getPartition(partitionRangeMap, shardingValue.getValue()))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjUyNjU5", "url": "https://github.com/apache/shardingsphere/pull/5327#pullrequestreview-400652659", "createdAt": "2020-04-27T06:17:13Z", "commit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoxNzoxM1rOGMSfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjozNToxOFrOGMS_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzODk2NQ==", "bodyText": "@Setter and @getter are recommended.", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r415538965", "createdAt": "2020-04-27T06:17:13Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/RangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.Longs;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Range sharding algorithm.\n+ * <p>\n+ * Range sharding algorithm is similar to the rule of partition table.\n+ * User can specify the range by setting the `range.partition.split.value` parameter.\n+ * The `range.partition.split.value` parameter is an ordered list of numbers, separated by commas.\n+ * </p>\n+ * <p>\n+ * For example: If the `range.partition.split.value` parameter is set to `1,5,10`,\n+ * the parameter will split all values into four intervals\u2014\u2014(-\u221e, 1), [1,5), [5,10), [10, +\u221e),\n+ * which corresponding to partition_0, partition_1, partition_2, partition_3.\n+ * The sharding values will be divided into different partition by its value.\n+ * </p>\n+ */\n+public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+\n+    private static final String RANGE_PARTITION_SPLIT_VALUE = \"range.partition.split.value\";\n+\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(getPartition(partitionRangeMap, shardingValue.getValue()))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\n+        for (long value = shardingValue.getValueRange().lowerEndpoint(); value <= shardingValue.getValueRange().upperEndpoint(); value++) {\n+            for (String each : availableTargetNames) {\n+                if (each.endsWith(getPartition(partitionRangeMap, value))) {\n+                    result.add(each);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Map<Integer, Range<Long>> getPartitionRangeMap() {\n+        List<Long> splitValues = Splitter.on(\",\").trimResults().splitToList(properties.get(RANGE_PARTITION_SPLIT_VALUE).toString())\n+                .stream().map(Longs::tryParse).filter(Objects::nonNull).sorted().collect(Collectors.toList());\n+        Preconditions.checkArgument(CollectionUtils.isNotEmpty(splitValues), \"Range sharding algorithm range partition split value is not valid.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = Maps.newHashMapWithExpectedSize(splitValues.size() + 1);\n+        for (int i = 0; i < splitValues.size(); i++) {\n+            Long splitValue = splitValues.get(i);\n+            if (i == 0) {\n+                partitionRangeMap.put(i, Range.lessThan(splitValue));\n+            } else {\n+                Long previousSplitValue = splitValues.get(i - 1);\n+                partitionRangeMap.put(i, Range.closedOpen(previousSplitValue, splitValue));\n+            }\n+            if (i == splitValues.size() - 1) {\n+                partitionRangeMap.put(i + 1, Range.atLeast(splitValue));\n+            }\n+        }\n+        return partitionRangeMap;\n+    }\n+\n+    private String getPartition(final Map<Integer, Range<Long>> partitionRangeMap, final Long value) {\n+        for (Map.Entry<Integer, Range<Long>> entry : partitionRangeMap.entrySet()) {\n+            if (entry.getValue().contains(value)) {\n+                return entry.getKey().toString();\n+            }\n+        }\n+        return partitionRangeMap.keySet().stream().mapToInt(Integer::valueOf).max().toString();\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"RANGE\";\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NzE2Mw==", "bodyText": "It is suggested to assert some of the specific targets, not only size().", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r415547163", "createdAt": "2020-04-27T06:35:09Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/range/RangeShardingAlgorithmTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding.range;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import org.apache.shardingsphere.api.config.sharding.strategy.StandardShardingStrategyConfiguration;\n+import org.apache.shardingsphere.core.strategy.algorithm.sharding.RangeShardingAlgorithm;\n+import org.apache.shardingsphere.core.strategy.route.standard.StandardShardingStrategy;\n+import org.apache.shardingsphere.core.strategy.route.value.ListRouteValue;\n+import org.apache.shardingsphere.core.strategy.route.value.RangeRouteValue;\n+import org.apache.shardingsphere.core.strategy.route.value.RouteValue;\n+import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationProperties;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class RangeShardingAlgorithmTest {\n+\n+    private StandardShardingStrategy shardingStrategy;\n+\n+    @Before\n+    public void setUp() {\n+        RangeShardingAlgorithm shardingAlgorithm = new RangeShardingAlgorithm();\n+        shardingAlgorithm.getProperties().setProperty(\"range.partition.split.value\", \"1,5,10\");\n+        StandardShardingStrategyConfiguration shardingStrategyConfig = new StandardShardingStrategyConfiguration(\"order_id\", shardingAlgorithm);\n+        shardingStrategy = new StandardShardingStrategy(shardingStrategyConfig);\n+    }\n+\n+    @Test\n+    public void assertPreciseDoSharding() {\n+        List<String> availableTargetNames = Lists.newArrayList(\"t_order_0\", \"t_order_1\", \"t_order_2\", \"t_order_3\");\n+        List<RouteValue> shardingValues = Lists.newArrayList(new ListRouteValue<>(\"order_id\", \"t_order\", Lists.newArrayList(0L, 1L, 2L, 4L, 7L)));\n+        Collection<String> actual = shardingStrategy.doSharding(availableTargetNames, shardingValues, new ConfigurationProperties(new Properties()));\n+        assertThat(actual.size(), is(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NzIyNQ==", "bodyText": "It is likely thatvalue++ is time-consuming if there is a vast range.\nHere are some of my ideas.\nFor instance,the shardings are as follows,\n1,2 | 3,4,5 | 6,7,8,9 | 10,11\nSo the range.partition.split.value is 2,5,9,11\nImaging the query condition is 2 =< x <= 9, then we just need to calcute 2==2 and 9<11, therefore the results is 0,1,2.\nThat is, we can get the critical values from range.partition.split.value, so we only need to compare the bottom point and the top point with those critical values.", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r415547225", "createdAt": "2020-04-27T06:35:18Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/RangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.Longs;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Range sharding algorithm.\n+ * <p>\n+ * Range sharding algorithm is similar to the rule of partition table.\n+ * User can specify the range by setting the `range.partition.split.value` parameter.\n+ * The `range.partition.split.value` parameter is an ordered list of numbers, separated by commas.\n+ * </p>\n+ * <p>\n+ * For example: If the `range.partition.split.value` parameter is set to `1,5,10`,\n+ * the parameter will split all values into four intervals\u2014\u2014(-\u221e, 1), [1,5), [5,10), [10, +\u221e),\n+ * which corresponding to partition_0, partition_1, partition_2, partition_3.\n+ * The sharding values will be divided into different partition by its value.\n+ * </p>\n+ */\n+public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+\n+    private static final String RANGE_PARTITION_SPLIT_VALUE = \"range.partition.split.value\";\n+\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(getPartition(partitionRangeMap, shardingValue.getValue()))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\n+        for (long value = shardingValue.getValueRange().lowerEndpoint(); value <= shardingValue.getValueRange().upperEndpoint(); value++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae31a02fc22b88e8e28cafe5ddea8c5af52d894", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/fae31a02fc22b88e8e28cafe5ddea8c5af52d894", "committedDate": "2020-04-27T11:58:18Z", "message": "create RANGE sharding algorithm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b441c11738e70a05fd60a5a7be73fa32e154332b", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/b441c11738e70a05fd60a5a7be73fa32e154332b", "committedDate": "2020-04-27T13:57:31Z", "message": "optimize RANGE sharding algorithm"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f9d4541f21df256aee4da7d93cff004a9a2f9d0", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/6f9d4541f21df256aee4da7d93cff004a9a2f9d0", "committedDate": "2020-04-27T13:59:06Z", "message": "Merge branch 'issue-5280-dev' of https://github.com/strongduanmu/incubator-shardingsphere into issue-5280-dev"}, "afterCommit": {"oid": "b441c11738e70a05fd60a5a7be73fa32e154332b", "author": {"user": {"login": "strongduanmu", "name": "Zhengqiang Duan"}}, "url": "https://github.com/apache/shardingsphere/commit/b441c11738e70a05fd60a5a7be73fa32e154332b", "committedDate": "2020-04-27T13:57:31Z", "message": "optimize RANGE sharding algorithm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDYyMTg1", "url": "https://github.com/apache/shardingsphere/pull/5327#pullrequestreview-401462185", "createdAt": "2020-04-28T02:52:12Z", "commit": {"oid": "b441c11738e70a05fd60a5a7be73fa32e154332b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1MjoxMlrOGNAMtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1MjoxMlrOGNAMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4NzkyNA==", "bodyText": "@strongduanmu Got it. Maybe we need a init() interface function to initialize some local members so as to avoid calculating some local values like partitionRangeMap", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r416287924", "createdAt": "2020-04-28T02:52:12Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/RangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.Longs;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Range sharding algorithm.\n+ * <p>\n+ * Range sharding algorithm is similar to the rule of partition table.\n+ * User can specify the range by setting the `range.partition.split.value` parameter.\n+ * The `range.partition.split.value` parameter is an ordered list of numbers, separated by commas.\n+ * </p>\n+ * <p>\n+ * For example: If the `range.partition.split.value` parameter is set to `1,5,10`,\n+ * the parameter will split all values into four intervals\u2014\u2014(-\u221e, 1), [1,5), [5,10), [10, +\u221e),\n+ * which corresponding to partition_0, partition_1, partition_2, partition_3.\n+ * The sharding values will be divided into different partition by its value.\n+ * </p>\n+ */\n+public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+\n+    private static final String RANGE_PARTITION_SPLIT_VALUE = \"range.partition.split.value\";\n+\n+    private Properties properties = new Properties();\n+\n+    @Override\n+    public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();\n+        for (String each : availableTargetNames) {\n+            if (each.endsWith(getPartition(partitionRangeMap, shardingValue.getValue()))) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<String> doSharding(final Collection<String> availableTargetNames, final RangeShardingValue<Long> shardingValue) {\n+        Preconditions.checkNotNull(properties.get(RANGE_PARTITION_SPLIT_VALUE), \"Range sharding algorithm range partition split value cannot be null.\");\n+        Map<Integer, Range<Long>> partitionRangeMap = getPartitionRangeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4MA=="}, "originalCommit": {"oid": "fa505b2aa55581e505a412951255cf4e876107a8"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDY0NjY4", "url": "https://github.com/apache/shardingsphere/pull/5327#pullrequestreview-401464668", "createdAt": "2020-04-28T03:00:15Z", "commit": {"oid": "b441c11738e70a05fd60a5a7be73fa32e154332b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMDoxNlrOGNAWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMDoxNlrOGNAWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDQzMg==", "bodyText": "Do you think there is any better names for range.partition.split.value to make users easy get its meaning. Like range.partition.upper.points or range.partition.boundary.points?", "url": "https://github.com/apache/shardingsphere/pull/5327#discussion_r416290432", "createdAt": "2020-04-28T03:00:16Z", "author": {"login": "tristaZero"}, "path": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/algorithm/sharding/RangeShardingAlgorithm.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.strategy.algorithm.sharding;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Range;\n+import com.google.common.primitives.Longs;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.RangeShardingValue;\n+import org.apache.shardingsphere.api.sharding.standard.StandardShardingAlgorithm;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Range sharding algorithm.\n+ * <p>\n+ * Range sharding algorithm is similar to the rule of partition table.\n+ * User can specify the range by setting the `range.partition.split.value` parameter.\n+ * The `range.partition.split.value` parameter is an ordered list of numbers, separated by commas.\n+ * </p>\n+ * <p>\n+ * For example: If the `range.partition.split.value` parameter is set to `1,5,10`,\n+ * the parameter will split all values into four intervals\u2014\u2014(-\u221e, 1), [1,5), [5,10), [10, +\u221e),\n+ * which corresponding to partition_0, partition_1, partition_2, partition_3.\n+ * The sharding values will be divided into different partition by its value.\n+ * </p>\n+ */\n+public final class RangeShardingAlgorithm implements StandardShardingAlgorithm<Long> {\n+\n+    private static final String RANGE_PARTITION_SPLIT_VALUE = \"range.partition.split.value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b441c11738e70a05fd60a5a7be73fa32e154332b"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3673, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}