{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTU2NzE5", "number": 7888, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNTo0OVrOExvLew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNTo0OVrOExvLew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg4NjY3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzoxNTo0OVrOHn_uEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo0MjozNFrOHopYvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDQ5Nw==", "bodyText": ", must be on the first line.", "url": "https://github.com/apache/shardingsphere/pull/7888#discussion_r511700497", "createdAt": "2020-10-26T03:15:49Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "diffHunk": "@@ -109,11 +109,12 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             for (WatchEvent each : response.getEvents()) {\n                 ChangedType changedType = getEventChangedType(each);\n                 if (ChangedType.IGNORED != changedType) {\n-                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(Charsets.UTF_8), each.getKeyValue().getValue().toString(Charsets.UTF_8), changedType));\n+                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8)\n+                            , each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4890de4572fb7d25ccebd469fbb48c224297d86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTM2Mg==", "bodyText": "@menghaoranss first line means the same indent?", "url": "https://github.com/apache/shardingsphere/pull/7888#discussion_r511725362", "createdAt": "2020-10-26T05:24:57Z", "author": {"login": "TanveshT"}, "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "diffHunk": "@@ -109,11 +109,12 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             for (WatchEvent each : response.getEvents()) {\n                 ChangedType changedType = getEventChangedType(each);\n                 if (ChangedType.IGNORED != changedType) {\n-                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(Charsets.UTF_8), each.getKeyValue().getValue().toString(Charsets.UTF_8), changedType));\n+                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8)\n+                            , each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDQ5Nw=="}, "originalCommit": {"oid": "d4890de4572fb7d25ccebd469fbb48c224297d86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1OTY4Mg==", "bodyText": "dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8),\n                            each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "url": "https://github.com/apache/shardingsphere/pull/7888#discussion_r511759682", "createdAt": "2020-10-26T07:28:49Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "diffHunk": "@@ -109,11 +109,12 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             for (WatchEvent each : response.getEvents()) {\n                 ChangedType changedType = getEventChangedType(each);\n                 if (ChangedType.IGNORED != changedType) {\n-                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(Charsets.UTF_8), each.getKeyValue().getValue().toString(Charsets.UTF_8), changedType));\n+                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8)\n+                            , each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDQ5Nw=="}, "originalCommit": {"oid": "d4890de4572fb7d25ccebd469fbb48c224297d86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3ODYyMQ==", "bodyText": "@TanveshT Hi, any other questions?", "url": "https://github.com/apache/shardingsphere/pull/7888#discussion_r512378621", "createdAt": "2020-10-27T02:27:02Z", "author": {"login": "menghaoranss"}, "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "diffHunk": "@@ -109,11 +109,12 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             for (WatchEvent each : response.getEvents()) {\n                 ChangedType changedType = getEventChangedType(each);\n                 if (ChangedType.IGNORED != changedType) {\n-                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(Charsets.UTF_8), each.getKeyValue().getValue().toString(Charsets.UTF_8), changedType));\n+                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8)\n+                            , each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDQ5Nw=="}, "originalCommit": {"oid": "d4890de4572fb7d25ccebd469fbb48c224297d86"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4MzE2Nw==", "bodyText": "Nothing else @menghaoranss. Will make that commit soon", "url": "https://github.com/apache/shardingsphere/pull/7888#discussion_r512383167", "createdAt": "2020-10-27T02:42:34Z", "author": {"login": "TanveshT"}, "path": "shardingsphere-governance/shardingsphere-governance-repository/shardingsphere-governance-repository-provider/shardingsphere-governance-repository-etcd/src/main/java/org/apache/shardingsphere/governance/repository/etcd/EtcdRepository.java", "diffHunk": "@@ -109,11 +109,12 @@ public void watch(final String key, final DataChangedEventListener dataChangedEv\n             for (WatchEvent each : response.getEvents()) {\n                 ChangedType changedType = getEventChangedType(each);\n                 if (ChangedType.IGNORED != changedType) {\n-                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(Charsets.UTF_8), each.getKeyValue().getValue().toString(Charsets.UTF_8), changedType));\n+                    dataChangedEventListener.onChange(new DataChangedEvent(each.getKeyValue().getKey().toString(StandardCharsets.UTF_8)\n+                            , each.getKeyValue().getValue().toString(StandardCharsets.UTF_8), changedType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwMDQ5Nw=="}, "originalCommit": {"oid": "d4890de4572fb7d25ccebd469fbb48c224297d86"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 606, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}