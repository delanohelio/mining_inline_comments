{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNjIwMjUx", "number": 7388, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODowM1rOEkI_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0OToyNVrOEkJBFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxNDM4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODowM1rOHS5nnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzoyMzozNVrOHTOyGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ==", "bodyText": "Please add final if class is not design for extension", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580445", "createdAt": "2020-09-16T16:48:03Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyMzIwMQ==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489923201", "createdAt": "2020-09-17T03:17:10Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzE5Mg==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927192", "createdAt": "2020-09-17T03:23:35Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxNTI3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODoxOVrOHS5oMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzoyMzozMFrOHTOx1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw==", "bodyText": "Please use assertThat instead of assertEquals", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580593", "createdAt": "2020-09-16T16:48:19Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoNotify() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+                resourceLock.doNotify();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyMzI0MQ==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489923241", "createdAt": "2020-09-17T03:17:14Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoNotify() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+                resourceLock.doNotify();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzEyNw==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927127", "createdAt": "2020-09-17T03:23:30Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoNotify() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+                resourceLock.doNotify();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxNjk1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODo0N1rOHS5pRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzoyMzoyNlrOHTOxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDg3MQ==", "bodyText": "Please do not use SneakyThrows, just throw from method signature", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580871", "createdAt": "2020-09-16T16:48:47Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzA5NQ==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927095", "createdAt": "2020-09-17T03:23:26Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDg3MQ=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxOTI0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0OToyNVrOHS5quQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzoyMzoyMVrOHTOxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MTI0MQ==", "bodyText": "Please use assertThat instead of assertNotEquals", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489581241", "createdAt": "2020-09-16T16:49:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkyNzA3MQ==", "bodyText": "done", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489927071", "createdAt": "2020-09-17T03:23:21Z", "author": {"login": "xbkaishui"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MTI0MQ=="}, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 746, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}