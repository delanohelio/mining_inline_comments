{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MjMzMDYz", "number": 7822, "title": "add test case for  DataSourceConnectionUrlUtil", "bodyText": "Fixes #7735.\nChanges proposed in this pull request:\n\nadd test class DataSourceConnectionUrlUtilTest", "createdAt": "2020-10-17T07:22:43Z", "url": "https://github.com/apache/shardingsphere/pull/7822", "merged": true, "mergeCommit": {"oid": "3b9942a9292cbc0e06ac5e87e80fed99c1b02981"}, "closed": true, "closedAt": "2020-10-19T09:26:20Z", "author": {"login": "cenyu00"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTUS1OAH2gAyNTA1MjMzMDYzOjlhNTEzZTAyNWUzZmE1ZWU2YjZjNmYyMjRjZTY3MmViYzI0NmY2ZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUAuOwgFqTUxMTU3MjUwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a513e025e3fa5ee6b6c6f224ce672ebc246f6db", "author": {"user": {"login": "cenyu00", "name": "\u5c91\u5b87"}}, "url": "https://github.com/apache/shardingsphere/commit/9a513e025e3fa5ee6b6c6f224ce672ebc246f6db", "committedDate": "2020-10-17T05:40:28Z", "message": "add DataSourceConnectionUrlUtil test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMzg0Nzgx", "url": "https://github.com/apache/shardingsphere/pull/7822#pullrequestreview-511384781", "createdAt": "2020-10-19T03:06:55Z", "commit": {"oid": "9a513e025e3fa5ee6b6c6f224ce672ebc246f6db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzowNjo1NVrOHj436A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzowNzoyM1rOHj45HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NDAyNA==", "bodyText": "I think the expected is supposed to be an actual string value like jdbc:mysql//xxxxxxxxxxxx. As your expected value is the same as the expression in DataSourceConnectionUrlUtil , the assertion will always be true.", "url": "https://github.com/apache/shardingsphere/pull/7822#discussion_r507394024", "createdAt": "2020-10-19T03:06:55Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-rdl-parser/shardingsphere-rdl-parser-binder/src/test/java/org/apache/shardingsphere/rdl/parser/binder/util/DataSourceConnectionUrlUtilTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.rdl.parser.binder.util;\n+\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.PostgreSQLDatabaseType;\n+import org.apache.shardingsphere.rdl.parser.statement.rdl.DataSourceConnectionSegment;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class DataSourceConnectionUrlUtilTest {\n+\n+    @Test\n+    public void assertMySQLGetUrl() {\n+        DataSourceConnectionSegment segment = new DataSourceConnectionSegment();\n+        segment.setHostName(\"127.0.0.1\");\n+        segment.setDb(\"test\");\n+        segment.setUser(\"root\");\n+        segment.setPort(\"3306\");\n+        MySQLDatabaseType databaseType = new MySQLDatabaseType();\n+        String actual = DataSourceConnectionUrlUtil.getUrl(segment, databaseType);\n+        String expected = String.format(\"%s//%s:%s/%s\", \"jdbc:mysql:\",\n+                segment.getHostName(), segment.getPort(), segment.getDb());\n+        assertThat(actual, is(expected));\n+    }\n+\n+    @Test\n+    public void assertPostgreSQLGetUrl() {\n+        DataSourceConnectionSegment segment = new DataSourceConnectionSegment();\n+        segment.setHostName(\"127.0.0.1\");\n+        segment.setDb(\"test\");\n+        segment.setUser(\"root\");\n+        segment.setPort(\"3306\");\n+\n+        PostgreSQLDatabaseType databaseType = new PostgreSQLDatabaseType();\n+        String actual = DataSourceConnectionUrlUtil.getUrl(segment, databaseType);\n+        String expected = String.format(\"%s//%s:%s/%s\", \"jdbc:postgresql:\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a513e025e3fa5ee6b6c6f224ce672ebc246f6db"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NDMzMw==", "bodyText": "Please remove the redundant blank line.", "url": "https://github.com/apache/shardingsphere/pull/7822#discussion_r507394333", "createdAt": "2020-10-19T03:07:23Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-rdl-parser/shardingsphere-rdl-parser-binder/src/test/java/org/apache/shardingsphere/rdl/parser/binder/util/DataSourceConnectionUrlUtilTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.rdl.parser.binder.util;\n+\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.PostgreSQLDatabaseType;\n+import org.apache.shardingsphere.rdl.parser.statement.rdl.DataSourceConnectionSegment;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class DataSourceConnectionUrlUtilTest {\n+\n+    @Test\n+    public void assertMySQLGetUrl() {\n+        DataSourceConnectionSegment segment = new DataSourceConnectionSegment();\n+        segment.setHostName(\"127.0.0.1\");\n+        segment.setDb(\"test\");\n+        segment.setUser(\"root\");\n+        segment.setPort(\"3306\");\n+        MySQLDatabaseType databaseType = new MySQLDatabaseType();\n+        String actual = DataSourceConnectionUrlUtil.getUrl(segment, databaseType);\n+        String expected = String.format(\"%s//%s:%s/%s\", \"jdbc:mysql:\",\n+                segment.getHostName(), segment.getPort(), segment.getDb());\n+        assertThat(actual, is(expected));\n+    }\n+\n+    @Test\n+    public void assertPostgreSQLGetUrl() {\n+        DataSourceConnectionSegment segment = new DataSourceConnectionSegment();\n+        segment.setHostName(\"127.0.0.1\");\n+        segment.setDb(\"test\");\n+        segment.setUser(\"root\");\n+        segment.setPort(\"3306\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a513e025e3fa5ee6b6c6f224ce672ebc246f6db"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2c39fe2c79ca89e98391398d064d38e2055649", "author": {"user": {"login": "cenyu00", "name": "\u5c91\u5b87"}}, "url": "https://github.com/apache/shardingsphere/commit/7d2c39fe2c79ca89e98391398d064d38e2055649", "committedDate": "2020-10-19T06:48:11Z", "message": "modify expected value to string expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTcyNTA4", "url": "https://github.com/apache/shardingsphere/pull/7822#pullrequestreview-511572508", "createdAt": "2020-10-19T09:26:13Z", "commit": {"oid": "7d2c39fe2c79ca89e98391398d064d38e2055649"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3978, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}