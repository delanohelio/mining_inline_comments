{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjg0NTEy", "number": 4871, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToyMTozMlrODqE7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNjoxMTozNVrODqPsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3NDY4OnYy", "diffSide": "RIGHT", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToyMTozMlrOF5o99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNzo0OTowNlrOF5xV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA==", "bodyText": "should keep 4 blankspace", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r395984374", "createdAt": "2020-03-21T11:21:32Z", "author": {"login": "kimmking"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -30,93 +41,103 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-\n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import org.yaml.snakeyaml.Yaml;\n \n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NDY1OQ==", "bodyText": "sorry , can't get you . I used project check-style config.", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396074659", "createdAt": "2020-03-22T09:56:15Z", "author": {"login": "ranjeet-floyd"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -30,93 +41,103 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-\n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import org.yaml.snakeyaml.Yaml;\n \n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}, "originalCommit": {"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5OTYzMg==", "bodyText": "plz keep origin style here with 4 blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396099632", "createdAt": "2020-03-22T14:26:49Z", "author": {"login": "kimmking"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -30,93 +41,103 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-\n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import org.yaml.snakeyaml.Yaml;\n \n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}, "originalCommit": {"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyMTU4MA==", "bodyText": "Got it. Thanks", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396121580", "createdAt": "2020-03-22T17:49:06Z", "author": {"login": "ranjeet-floyd"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -30,93 +41,103 @@\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-\n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import org.yaml.snakeyaml.Yaml;\n \n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDM3NA=="}, "originalCommit": {"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3NTY0OnYy", "diffSide": "RIGHT", "path": "sharding-jdbc/sharding-jdbc-core/src/test/resources/encrypt_data.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToyMzoyOFrOF5o-bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToyMzoyOFrOF5o-bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NDQ5NQ==", "bodyText": "only one empty line at the tail.", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r395984495", "createdAt": "2020-03-21T11:23:28Z", "author": {"login": "kimmking"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/resources/encrypt_data.yaml", "diffHunk": "@@ -0,0 +1,52 @@\n+#/*\n+#  * Licensed to the Apache Software Foundation (ASF) under one or more\n+#  * contributor license agreements.  See the NOTICE file distributed with\n+#  * this work for additional information regarding copyright ownership.\n+#  * The ASF licenses this file to You under the Apache License, Version 2.0\n+#  * (the \"License\"); you may not use this file except in compliance with\n+#  * the License.  You may obtain a copy of the License at\n+#  *\n+#  *     http://www.apache.org/licenses/LICENSE-2.0\n+#  *\n+#  * Unless required by applicable law or agreed to in writing, software\n+#  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  * See the License for the specific language governing permissions and\n+#  * limitations under the License.\n+#  */\n+\n+RunScript: \"DELETE FROM t_encrypt; \\n\n+  DELETE FROM t_query_encrypt; \\n\n+  DELETE FROM t_encrypt_contains_column; \\n\n+  INSERT INTO t_encrypt VALUES(1, 'plainValue'); \\n\n+  INSERT INTO t_encrypt VALUES(5, 'plainValue'); \\n\n+  INSERT INTO t_query_encrypt VALUES(1, 'plainValue'); \\n\n+  INSERT INTO t_query_encrypt VALUES(5, 'plainValue'); \\n\n+  INSERT INTO t_encrypt_contains_column VALUES(1, 'plainValue', 'plainValue');\"\n+\n+t_encrypt:\n+    plainColumn: \"plain_pwd\"\n+    cipherColumn: \"cipher_pwd\"\n+    assistedQueryColumn: \"\"\n+    encryptor: \"test\"\n+\n+t_query_encrypt:\n+    plainColumn: \"\"\n+    cipherColumn: \"cipher_pwd\"\n+    assistedQueryColumn: \"assist_pwd\"\n+    encryptor: \"assistedTest\"\n+\n+t_encrypt1:\n+    plainColumn: \"plain_pwd\"\n+    cipherColumn: \"cipher_pwd\"\n+    assistedQueryColumn: \"\"\n+    encryptor: \"test\"\n+t_encrypt2:\n+    plainColumn: \"plain_pwd2\"\n+    cipherColumn: \"cipher_pwd2\"\n+    assistedQueryColumn: \"\"\n+    encryptor: \"test\"\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a511c11508fbdc237daf19d8a844d4aa97fe469e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjIzNTMyOnYy", "diffSide": "RIGHT", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNjowODoyOVrOF535qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0MzoxN1rOF6TPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTAzNQ==", "bodyText": "Please use YAML to config properties too.", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396229035", "createdAt": "2020-03-23T06:08:29Z", "author": {"login": "terrymanu"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6820df2fef6e922f6d88be9e5533422524d19130"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzA0NQ==", "bodyText": "Added properties in yaml config", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396677045", "createdAt": "2020-03-23T18:43:17Z", "author": {"login": "ranjeet-floyd"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTAzNQ=="}, "originalCommit": {"oid": "6820df2fef6e922f6d88be9e5533422524d19130"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjIzOTM0OnYy", "diffSide": "RIGHT", "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNjoxMTozNVrOF538Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0Mzo0MlrOF6TQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTcwNw==", "bodyText": "You may use YamlEncryptDataSourceFactory.createDataSource() to load YAML directly.\nWe can just make sure the format of YAML file are correct and then use ShardingSphere's public API to load yaml and create EncryptDataSource.", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396229707", "createdAt": "2020-03-23T06:11:35Z", "author": {"login": "terrymanu"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }\n-    \n+\n     private static Map<String, DataSource> getDataSources() {\n         return Maps.filterKeys(getDatabaseTypeMap().values().iterator().next(), ENCRYPT_DB_NAMES::contains);\n     }\n-    \n+\n     private static EncryptRuleConfiguration createEncryptRuleConfiguration() {\n         EncryptRuleConfiguration result = new EncryptRuleConfiguration();\n-        result.getEncryptors().put(\"test\", new EncryptorRuleConfiguration(\"test\", new Properties()));\n-        result.getEncryptors().put(\"assistedTest\", new EncryptorRuleConfiguration(\"assistedTest\", new Properties()));\n-        result.getTables().put(\"t_encrypt\", createEncryptTableRule());\n-        result.getTables().put(\"t_query_encrypt\", createQueryEncryptTableRule());\n-        result.getTables().put(\"t_encrypt_contains_column\", createEncryptContainsColumnTableRule());\n+        for (Map.Entry<String, YamlEncryptorRuleConfiguration> entry : encryptRuleConfig.getEncryptors().entrySet()) {\n+            result.getEncryptors().put(entry.getKey(), new EncryptorRuleConfiguration(entry.getValue().getType(), entry.getValue().getProps()));\n+        }\n+\n+        for (Map.Entry<String, YamlEncryptTableRuleConfiguration> tableMap : encryptRuleConfig.getTables().entrySet()) {\n+            Map<String, EncryptColumnRuleConfiguration> columns = new LinkedHashMap<>(2, 1);\n+            for (Map.Entry<String, YamlEncryptColumnRuleConfiguration> columnMap : tableMap.getValue().getColumns().entrySet()) {\n+                YamlEncryptColumnRuleConfiguration yamlConfig = columnMap.getValue();\n+                EncryptColumnRuleConfiguration columnRuleConfiguration = new EncryptColumnRuleConfiguration(yamlConfig.getPlainColumn(), yamlConfig.getCipherColumn(),\n+                    yamlConfig.getAssistedQueryColumn(),\n+                    yamlConfig.getEncryptor());\n+                columns.put(columnMap.getKey(), columnRuleConfiguration);\n+            }\n+            result.getTables().put(tableMap.getKey(), new EncryptTableRuleConfiguration(columns));\n+        }\n+\n         return result;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6820df2fef6e922f6d88be9e5533422524d19130"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzMxNQ==", "bodyText": "@terrymanu  Modified as per comment. Pls check.", "url": "https://github.com/apache/shardingsphere/pull/4871#discussion_r396677315", "createdAt": "2020-03-23T18:43:42Z", "author": {"login": "ranjeet-floyd"}, "path": "sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/common/base/AbstractEncryptJDBCDatabaseAndTableTest.java", "diffHunk": "@@ -17,87 +17,90 @@\n \n package org.apache.shardingsphere.shardingjdbc.common.base;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n import org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;\n import org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;\n import org.apache.shardingsphere.encrypt.rule.EncryptRule;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.encrypt.yaml.config.YamlEncryptorRuleConfiguration;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.EncryptConnection;\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.EncryptDataSource;\n import org.apache.shardingsphere.underlying.common.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.underlying.common.yaml.engine.YamlEngine;\n import org.h2.tools.RunScript;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n-import javax.sql.DataSource;\n-import java.io.InputStreamReader;\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n public abstract class AbstractEncryptJDBCDatabaseAndTableTest extends AbstractSQLTest {\n-    \n+\n     private static EncryptDataSource encryptDataSource;\n-    \n+\n     private static EncryptDataSource encryptDataSourceWithProps;\n-    \n+\n     private static final List<String> ENCRYPT_DB_NAMES = Collections.singletonList(\"encrypt\");\n-    \n+\n+    private static YamlEncryptRuleConfiguration encryptRuleConfig;\n+\n     @BeforeClass\n-    public static void initEncryptDataSource() throws SQLException {\n+    public static void initEncryptDataSource() throws SQLException, IOException {\n+        encryptRuleConfig = getEncryptRuleConfig(getFile(\"encrypt_config.yaml\"));\n+        System.out.println(encryptRuleConfig);\n         if (null != encryptDataSource && null != encryptDataSourceWithProps) {\n             return;\n         }\n         Map<String, DataSource> dataSources = getDataSources();\n         encryptDataSource = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), new Properties());\n         encryptDataSourceWithProps = new EncryptDataSource(dataSources.values().iterator().next(), new EncryptRule(createEncryptRuleConfiguration()), createProperties());\n     }\n-    \n+\n     private static Properties createProperties() {\n         Properties result = new Properties();\n         result.put(ConfigurationPropertyKey.SQL_SHOW.getKey(), true);\n         result.put(ConfigurationPropertyKey.QUERY_WITH_CIPHER_COLUMN.getKey(), false);\n         return result;\n     }\n-    \n+\n     private static Map<String, DataSource> getDataSources() {\n         return Maps.filterKeys(getDatabaseTypeMap().values().iterator().next(), ENCRYPT_DB_NAMES::contains);\n     }\n-    \n+\n     private static EncryptRuleConfiguration createEncryptRuleConfiguration() {\n         EncryptRuleConfiguration result = new EncryptRuleConfiguration();\n-        result.getEncryptors().put(\"test\", new EncryptorRuleConfiguration(\"test\", new Properties()));\n-        result.getEncryptors().put(\"assistedTest\", new EncryptorRuleConfiguration(\"assistedTest\", new Properties()));\n-        result.getTables().put(\"t_encrypt\", createEncryptTableRule());\n-        result.getTables().put(\"t_query_encrypt\", createQueryEncryptTableRule());\n-        result.getTables().put(\"t_encrypt_contains_column\", createEncryptContainsColumnTableRule());\n+        for (Map.Entry<String, YamlEncryptorRuleConfiguration> entry : encryptRuleConfig.getEncryptors().entrySet()) {\n+            result.getEncryptors().put(entry.getKey(), new EncryptorRuleConfiguration(entry.getValue().getType(), entry.getValue().getProps()));\n+        }\n+\n+        for (Map.Entry<String, YamlEncryptTableRuleConfiguration> tableMap : encryptRuleConfig.getTables().entrySet()) {\n+            Map<String, EncryptColumnRuleConfiguration> columns = new LinkedHashMap<>(2, 1);\n+            for (Map.Entry<String, YamlEncryptColumnRuleConfiguration> columnMap : tableMap.getValue().getColumns().entrySet()) {\n+                YamlEncryptColumnRuleConfiguration yamlConfig = columnMap.getValue();\n+                EncryptColumnRuleConfiguration columnRuleConfiguration = new EncryptColumnRuleConfiguration(yamlConfig.getPlainColumn(), yamlConfig.getCipherColumn(),\n+                    yamlConfig.getAssistedQueryColumn(),\n+                    yamlConfig.getEncryptor());\n+                columns.put(columnMap.getKey(), columnRuleConfiguration);\n+            }\n+            result.getTables().put(tableMap.getKey(), new EncryptTableRuleConfiguration(columns));\n+        }\n+\n         return result;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyOTcwNw=="}, "originalCommit": {"oid": "6820df2fef6e922f6d88be9e5533422524d19130"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}