{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTcwMzUx", "number": 6610, "title": "Add test case for ProxySchemaContexts.getDataSourceSample", "bodyText": "Fixes #6576 .\nChanges proposed in this pull request:\n\nAdd test case for ProxySchemaContexts.getDataSourceSample", "createdAt": "2020-08-04T07:01:05Z", "url": "https://github.com/apache/shardingsphere/pull/6610", "merged": true, "mergeCommit": {"oid": "0e734bc4d217097349f10739cb43b33a3684e288"}, "closed": true, "closedAt": "2020-08-04T09:37:34Z", "author": {"login": "gzdzss"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7hEaXAH2gAyNDYyNTcwMzUxOjMxMjE0MmJiMGNkOTIyYjBlYTBhZWFkZDgwNDM5MTg5NjJhZDFlN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7jVL_AFqTQ2MDY1NDg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "312142bb0cd922b0ea0aeadd8043918962ad1e7d", "author": {"user": {"login": "gzdzss", "name": "Yanjie Zhou"}}, "url": "https://github.com/apache/shardingsphere/commit/312142bb0cd922b0ea0aeadd8043918962ad1e7d", "committedDate": "2020-08-04T06:59:18Z", "message": "Add test case for ProxySchemaContexts.getDataSourceSample"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTkxNTgy", "url": "https://github.com/apache/shardingsphere/pull/6610#pullrequestreview-460591582", "createdAt": "2020-08-04T08:12:04Z", "commit": {"oid": "312142bb0cd922b0ea0aeadd8043918962ad1e7d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODoxMjowNFrOG7V3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODoxMjowOVrOG7V3WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NzM2Nw==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/6610#discussion_r464877367", "createdAt": "2020-08-04T08:12:04Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxySchemaContextsTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.kernel.context.SchemaContext;\n+import org.apache.shardingsphere.kernel.context.StandardSchemaContexts;\n+import org.apache.shardingsphere.kernel.context.runtime.RuntimeContext;\n+import org.apache.shardingsphere.kernel.context.schema.ShardingSphereSchema;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.MockDataSource;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ProxySchemaContextsTest {\n+    \n+    private Map<String, DataSource> mockDataSourceMap;\n+    \n+    @Before\n+    public void setUp() {\n+        mockDataSourceMap = new HashMap<>(2, 1);\n+        mockDataSourceMap.put(\"ds_1\", new MockDataSource());\n+        mockDataSourceMap.put(\"ds_2\", new MockDataSource());\n+    }\n+    \n+    @Test\n+    public void assertGetDataSourceSample() throws NoSuchFieldException, IllegalAccessException {\n+        assertThat(ProxySchemaContexts.getInstance().getDataSourceSample(), is(Optional.empty()));\n+        \n+        Field schemaContexts = ProxySchemaContexts.getInstance().getClass().getDeclaredField(\"schemaContexts\");\n+        schemaContexts.setAccessible(true);\n+        schemaContexts.set(ProxySchemaContexts.getInstance(), new StandardSchemaContexts(getSchemaContextMap(), new Authentication(), new ConfigurationProperties(new Properties())));\n+        Optional<DataSource> actual = ProxySchemaContexts.getInstance().getDataSourceSample();\n+        assertThat(actual, is(Optional.of(mockDataSourceMap.entrySet().iterator().next().getValue())));\n+        \n+    }\n+    \n+    private Map<String, SchemaContext> getSchemaContextMap() {\n+        SchemaContext schemaContext = mock(SchemaContext.class);\n+        ShardingSphereSchema shardingSphereSchema = mock(ShardingSphereSchema.class);\n+        RuntimeContext runtimeContext = mock(RuntimeContext.class);\n+        when(shardingSphereSchema.getDataSources()).thenReturn(mockDataSourceMap);\n+        when(schemaContext.getName()).thenReturn(\"schema\");\n+        when(schemaContext.getSchema()).thenReturn(shardingSphereSchema);\n+        when(schemaContext.getRuntimeContext()).thenReturn(runtimeContext);\n+        return Collections.singletonMap(\"schema\", schemaContext);\n+    }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312142bb0cd922b0ea0aeadd8043918962ad1e7d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NzQwMQ==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/6610#discussion_r464877401", "createdAt": "2020-08-04T08:12:09Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxySchemaContextsTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.kernel.context.SchemaContext;\n+import org.apache.shardingsphere.kernel.context.StandardSchemaContexts;\n+import org.apache.shardingsphere.kernel.context.runtime.RuntimeContext;\n+import org.apache.shardingsphere.kernel.context.schema.ShardingSphereSchema;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.MockDataSource;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public final class ProxySchemaContextsTest {\n+    \n+    private Map<String, DataSource> mockDataSourceMap;\n+    \n+    @Before\n+    public void setUp() {\n+        mockDataSourceMap = new HashMap<>(2, 1);\n+        mockDataSourceMap.put(\"ds_1\", new MockDataSource());\n+        mockDataSourceMap.put(\"ds_2\", new MockDataSource());\n+    }\n+    \n+    @Test\n+    public void assertGetDataSourceSample() throws NoSuchFieldException, IllegalAccessException {\n+        assertThat(ProxySchemaContexts.getInstance().getDataSourceSample(), is(Optional.empty()));\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312142bb0cd922b0ea0aeadd8043918962ad1e7d"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aacab2b4d6714b097e298a412cdd1644e1b0a3e", "author": {"user": {"login": "gzdzss", "name": "Yanjie Zhou"}}, "url": "https://github.com/apache/shardingsphere/commit/1aacab2b4d6714b097e298a412cdd1644e1b0a3e", "committedDate": "2020-08-04T08:20:14Z", "message": "Remove useless blank line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjU0ODQ0", "url": "https://github.com/apache/shardingsphere/pull/6610#pullrequestreview-460654844", "createdAt": "2020-08-04T09:37:26Z", "commit": {"oid": "1aacab2b4d6714b097e298a412cdd1644e1b0a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4809, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}