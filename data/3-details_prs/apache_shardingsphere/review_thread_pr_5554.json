{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjEzODgy", "number": 5554, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NjoxMFrOD7qbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NjoxMFrOD7qbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODg3NjE4OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-etcd/src/test/java/org/apache/shardingsphere/orchestration/center/instance/EtcdCenterRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NjoxMFrOGUH4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NjoxMFrOGUH4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1Mzc3MQ==", "bodyText": "assertTrue", "url": "https://github.com/apache/shardingsphere/pull/5554#discussion_r423753771", "createdAt": "2020-05-12T13:56:10Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-etcd/src/test/java/org/apache/shardingsphere/orchestration/center/instance/EtcdCenterRepositoryTest.java", "diffHunk": "@@ -163,4 +168,83 @@ public void assertDelete() {\n         centerRepository.delete(\"key\");\n         verify(kv).delete(ByteSequence.from(\"key\", Charsets.UTF_8));\n     }\n+    \n+    @Test\n+    public void assertPersist() {\n+        centerRepository.persist(\"key1\", \"value1\");\n+        verify(kv).put(any(ByteSequence.class), any(ByteSequence.class));\n+    }\n+    \n+    @Test\n+    public void assertClose() {\n+        centerRepository.close();\n+        verify(client).close();\n+    }\n+    \n+    @Test\n+    public void assertGetType() {\n+        assertThat(centerRepository.getType(), is(CENTER_TYPE));\n+    }\n+    \n+    @Test\n+    public void assertInit() {\n+        CenterConfiguration configuration = new CenterConfiguration(CENTER_TYPE);\n+        configuration.setServerLists(\"127.0.0.1\");\n+        Properties properties = new Properties();\n+        centerRepository.setProperties(properties);\n+        centerRepository.init(configuration);\n+        assertThat(centerRepository.getProperties(), is(properties));\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetKeyWhenThrowInterruptedException() {\n+        doThrow(InterruptedException.class).when(getFuture).get();\n+        try {\n+            centerRepository.get(\"key\");\n+            // CHECKSTYLE:OFF\n+        } catch (final Exception ex) {\n+            // CHECKSTYLE:ON\n+            assertThat(ex instanceof InterruptedException, is(true));\n+        }\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetKeyWhenThrowExecutionException() {\n+        doThrow(ExecutionException.class).when(getFuture).get();\n+        try {\n+            centerRepository.get(\"key\");\n+            // CHECKSTYLE:OFF\n+        } catch (final Exception ex) {\n+            // CHECKSTYLE:ON\n+            assertThat(ex instanceof ExecutionException, is(true));\n+        }\n+    }\n+    \n+    @Test\n+    @SneakyThrows\n+    public void assertGetChildrenKeysWhenThrowInterruptedException() {\n+        doThrow(InterruptedException.class).when(getFuture).get();\n+        try {\n+            centerRepository.getChildrenKeys(\"/key/key1\");\n+            // CHECKSTYLE:OFF\n+        } catch (final Exception ex) {\n+            // CHECKSTYLE:ON\n+            assertThat(ex instanceof InterruptedException, is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b6823857fe5aa43e2b7547556e608619f23bac"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 864, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}