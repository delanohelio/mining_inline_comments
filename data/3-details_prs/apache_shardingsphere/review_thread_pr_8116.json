{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzUxNjU4", "number": 8116, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1NDowM1rOE3fxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjowNDoyOVrOE3gCCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI3NjU4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1NDowM1rOHw4Ebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjo1MTo1N1rOHw6h_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMjMzNA==", "bodyText": "A blank line is needed above. Besides, why do we not use the result returned by each visitXXX() immediately (Currently, those returned results seem unused)?  That way, we could keep the same way as StatementVisitors.", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521012334", "createdAt": "2020-11-11T01:54:03Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "diffHunk": "@@ -19,11 +19,423 @@\n \n import lombok.AccessLevel;\n import lombok.Getter;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.RuleNode;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementBaseVisitor;\n+import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementParser;\n \n /**\n  * MySQL Format SQL visitor for MySQL.\n  */\n @Getter(AccessLevel.PROTECTED)\n public abstract class MySQLFormatSQLVisitor extends MySQLStatementBaseVisitor<String> {\n+    private StringBuilder result = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA1MjY2OA==", "bodyText": "First, FormartVisitor is different from StatementVisitors, StatementVisitors need create different type Segment,  FormartVisitor just need StringBuilder, so using shared variables can reduce the cost of creating objects.\nSecond, there is no need to processe the return value of child elements when using shared variables\n,just call visit(childrule),\nWhen a visitor function is added, we do not need to modify  its parent function.ItWill reduce the amount of code, otherwise, you need to create a visitor function for each rule. @tristaZero", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521052668", "createdAt": "2020-11-11T02:51:57Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "diffHunk": "@@ -19,11 +19,423 @@\n \n import lombok.AccessLevel;\n import lombok.Getter;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.RuleNode;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementBaseVisitor;\n+import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementParser;\n \n /**\n  * MySQL Format SQL visitor for MySQL.\n  */\n @Getter(AccessLevel.PROTECTED)\n public abstract class MySQLFormatSQLVisitor extends MySQLStatementBaseVisitor<String> {\n+    private StringBuilder result = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMjMzNA=="}, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI4NzEwOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1NjozNFrOHw4Lgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzowMTo1M1rOHw7Ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxNDE0Nw==", "bodyText": "Given the code standard instruction in doc , null  == this.result  is preferable, right?", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521014147", "createdAt": "2020-11-11T01:56:34Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "diffHunk": "@@ -19,11 +19,423 @@\n \n import lombok.AccessLevel;\n import lombok.Getter;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.RuleNode;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementBaseVisitor;\n+import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementParser;\n \n /**\n  * MySQL Format SQL visitor for MySQL.\n  */\n @Getter(AccessLevel.PROTECTED)\n public abstract class MySQLFormatSQLVisitor extends MySQLStatementBaseVisitor<String> {\n+    private StringBuilder result = new StringBuilder();\n+\n+    private final boolean uperCase = true;\n+\n+    private int indentCount;\n+\n+    private int lines;\n+\n+    private int projectionsCountOfLine = 3;\n+\n+    @Override\n+    public String visitSelect(final MySQLStatementParser.SelectContext ctx) {\n+        if (null != ctx.queryExpression()) {\n+            visit(ctx.queryExpression());\n+            if (null != ctx.lockClauseList()) {\n+                result.append(\" \");\n+                visit(ctx.lockClauseList());\n+            }\n+        } else if (null != ctx.queryExpressionParens()) {\n+            visit(ctx.queryExpressionParens());\n+        } else {\n+            visit(ctx.selectWithInto());\n+        }\n+        print(\";\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpression(final MySQLStatementParser.QueryExpressionContext ctx) {\n+        if (null != ctx.withClause()) {\n+            visit(ctx.withClause());\n+            print(\" \");\n+        }\n+        if (null != ctx.queryExpressionBody()) {\n+            visit(ctx.queryExpressionBody());\n+        } else {\n+            visit(ctx.queryExpressionParens());\n+        }\n+        if (null != ctx.orderByClause()) {\n+            print(\" \");\n+            visit(ctx.orderByClause());\n+        }\n+        if (null != ctx.limitClause()) {\n+            print(\" \");\n+            visit(ctx.limitClause());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpressionParens(final MySQLStatementParser.QueryExpressionParensContext ctx) {\n+        println();\n+        this.indentCount++;\n+        print(\"(\");\n+        println();\n+        if (null != ctx.queryExpressionParens()) {\n+            visit(ctx.queryExpressionParens());\n+        } else {\n+            visit(ctx.queryExpression());\n+            if (null != ctx.lockClauseList()) {\n+                result.append(\" \");\n+                visit(ctx.lockClauseList());\n+            }\n+        }\n+        this.indentCount--;\n+        println();\n+        print(\")\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpressionBody(final MySQLStatementParser.QueryExpressionBodyContext ctx) {\n+        if (1 == ctx.getChildCount()) {\n+            visit(ctx.queryPrimary());\n+        } else {\n+            visit(ctx.queryExpressionParens(0));\n+            result.append(\"\\nUNION\\n\");\n+            if (null != ctx.unionOption()) {\n+                visit(ctx.unionOption());\n+                result.append(\" \");\n+            }\n+            if (null != ctx.queryPrimary()) {\n+                visit(ctx.queryPrimary());\n+            } else {\n+                visit(ctx.queryExpressionParens(1));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQuerySpecification(final MySQLStatementParser.QuerySpecificationContext ctx) {\n+        print(\"SELECT \");\n+        int selectSpecCount = ctx.selectSpecification().size();\n+        for (int i = 0; i < selectSpecCount; i++) {\n+            visit(ctx.selectSpecification(i));\n+            print(\" \");\n+        }\n+        visit(ctx.projections());\n+        if (null != ctx.fromClause()) {\n+            println();\n+            visit(ctx.fromClause());\n+        }\n+        if (null != ctx.whereClause()) {\n+            println();\n+            visit(ctx.whereClause());\n+        }\n+        if (null != ctx.groupByClause()) {\n+            println();\n+            visit(ctx.groupByClause());\n+        }\n+        if (null != ctx.havingClause()) {\n+            println();\n+            visit(ctx.havingClause());\n+        }\n+        if (null != ctx.windowClause()) {\n+            println();\n+            visit(ctx.windowClause());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitExplicitTable(final MySQLStatementParser.ExplicitTableContext ctx) {\n+        print(\"TABLE \");\n+        visit(ctx.tableName());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTableName(final MySQLStatementParser.TableNameContext ctx) {\n+        if (null != ctx.owner()) {\n+            print(ctx.owner().getText());\n+            print(\".\");\n+        }\n+        print(ctx.name().getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTableValueConstructor(final MySQLStatementParser.TableValueConstructorContext ctx) {\n+        print(\"VALUES \");\n+        visit(ctx.rowConstructorList());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitRowConstructorList(final MySQLStatementParser.RowConstructorListContext ctx) {\n+        int rowCount = ctx.assignmentValues().size();\n+        for (int i = 0; i < rowCount; i++) {\n+            if (i != 0 && i != rowCount) {\n+                print(\", ROW\");\n+                visit(ctx.assignmentValues(i));\n+\n+            } else {\n+                print(\"ROW\");\n+                visit(ctx.assignmentValues(i));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitAssignmentValues(final MySQLStatementParser.AssignmentValuesContext ctx) {\n+        print(\"(\");\n+        int assignCount = ctx.assignmentValue().size();\n+        for (int i = 0; i < assignCount; i++) {\n+            if (i != 0) {\n+                print(\", \");\n+                visit(ctx.assignmentValue(i));\n+            } else {\n+                visit(ctx.assignmentValue(i));\n+            }\n+        }\n+        print(\")\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitWhereClause(final MySQLStatementParser.WhereClauseContext ctx) {\n+        visit(ctx.WHERE());\n+        print(\" \");\n+        this.indentCount++;\n+        println();\n+        visit(ctx.expr());\n+        this.indentCount--;\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitExpr(final MySQLStatementParser.ExprContext ctx) {\n+        if (null != ctx.logicalOperator()) {\n+            MySQLStatementParser.ExprContext left = ctx.expr(0);\n+            visit(left);\n+            println();\n+            MySQLStatementParser.ExprContext right = ctx.expr(1);\n+            print(ctx.logicalOperator().getText());\n+            visit(right);\n+        } else if (null != ctx.notOperator()) {\n+            print(ctx.notOperator().getText());\n+            visit(ctx.expr(0));\n+        } else {\n+            visitChildren(ctx);\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitAlias(final MySQLStatementParser.AliasContext ctx) {\n+        print(ctx.getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitProjections(final MySQLStatementParser.ProjectionsContext ctx) {\n+        this.indentCount++;\n+        if (null != ctx.unqualifiedShorthand()) {\n+            visit(ctx.unqualifiedShorthand());\n+            result.append(\" \");\n+        }\n+        int projectionCount = ctx.projection().size();\n+        int lineItemCount = 0;\n+        for (int i = 0; i < projectionCount; i++) {\n+            if (0 != i) {\n+                result.append(\", \");\n+                if (lineItemCount >= projectionsCountOfLine) {\n+                    lineItemCount = 0;\n+                    println();\n+                }\n+            }\n+            visit(ctx.projection(i));\n+            lineItemCount++;\n+        }\n+        this.indentCount--;\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitProjection(final MySQLStatementParser.ProjectionContext ctx) {\n+        if (null != ctx.expr()) {\n+            visit(ctx.expr());\n+            print(\" \");\n+        }\n+        if (null != ctx.AS()) {\n+            print(\"AS \");\n+        }\n+        if (null != ctx.alias()) {\n+            visit(ctx.alias());\n+        }\n+        if (null != ctx.qualifiedShorthand()) {\n+            visit(ctx.qualifiedShorthand());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTerminal(final TerminalNode node) {\n+        if (isUperCase()) {\n+            print(node.getText().toUpperCase());\n+        } else {\n+            print(node.getText().toLowerCase());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitIdentifier(final MySQLStatementParser.IdentifierContext ctx) {\n+        print(ctx.getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitLiterals(final MySQLStatementParser.LiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitStringLiterals(final MySQLStatementParser.StringLiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitNumberLiterals(final MySQLStatementParser.NumberLiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitWithClause(final MySQLStatementParser.WithClauseContext ctx) {\n+        print(\"WITH \");\n+        if (null != ctx.RECURSIVE()) {\n+            visit(ctx.RECURSIVE());\n+            result.append(\" \");\n+        }\n+        for (int i = 0; i < ctx.cteClause().size(); i++) {\n+            if (i != 0 && i < ctx.cteClause().size() - 1) {\n+                result.append(\", \");\n+            }\n+            visit(ctx.cteClause(i));\n+        }\n+        if (null != ctx.parent) {\n+            result.append(\"\\n\");\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitCteClause(final MySQLStatementParser.CteClauseContext ctx) {\n+        visit(ctx.ignoredIdentifier());\n+        result.append(\" \");\n+        if (null != ctx.columnNames()) {\n+            visit(ctx.columnNames());\n+            result.append(\" \");\n+        }\n+        result.append(\"AS \");\n+        visit(ctx.subquery());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitIgnoredIdentifier(final MySQLStatementParser.IgnoredIdentifierContext ctx) {\n+        visit(ctx.identifier(0));\n+        if (null != ctx.DOT_()) {\n+            visit(ctx.DOT_());\n+            visit(ctx.identifier(1));\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitColumnNames(final MySQLStatementParser.ColumnNamesContext ctx) {\n+        if (null != ctx.LP_()) {\n+            visit(ctx.LP_());\n+        }\n+        int columnCount = ctx.columnName().size();\n+        for (int i = 0; i < columnCount; i++) {\n+            if (i != 0 && i < columnCount - 1) {\n+                result.append(\", \");\n+            } else {\n+                visit(ctx.columnName(i));\n+            }\n+        }\n+        if (null != ctx.RP_()) {\n+            visit(ctx.RP_());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitColumnName(final MySQLStatementParser.ColumnNameContext ctx) {\n+        if (null != ctx.owner()) {\n+            visit(ctx.owner());\n+            visit(ctx.DOT_(0));\n+        }\n+        visit(ctx.name());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitChildren(final RuleNode node) {\n+        String result = defaultResult();\n+\n+        int n = node.getChildCount();\n+        for (int i = 0; i < n; i++) {\n+            if (i != 0) {\n+                print(\" \");\n+            }\n+            if (!shouldVisitNextChild(node, result)) {\n+                break;\n+            }\n+\n+            ParseTree c = node.getChild(i);\n+            String childResult = c.accept(this);\n+            result = aggregateResult(result, childResult);\n+        }\n+        return result;\n+    }\n+\n+    private void print(final char value) {\n+        if (this.result == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA2MjUyNg==", "bodyText": "OK", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521062526", "createdAt": "2020-11-11T03:01:53Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/format/impl/MySQLFormatSQLVisitor.java", "diffHunk": "@@ -19,11 +19,423 @@\n \n import lombok.AccessLevel;\n import lombok.Getter;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.RuleNode;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementBaseVisitor;\n+import org.apache.shardingsphere.sql.parser.autogen.MySQLStatementParser;\n \n /**\n  * MySQL Format SQL visitor for MySQL.\n  */\n @Getter(AccessLevel.PROTECTED)\n public abstract class MySQLFormatSQLVisitor extends MySQLStatementBaseVisitor<String> {\n+    private StringBuilder result = new StringBuilder();\n+\n+    private final boolean uperCase = true;\n+\n+    private int indentCount;\n+\n+    private int lines;\n+\n+    private int projectionsCountOfLine = 3;\n+\n+    @Override\n+    public String visitSelect(final MySQLStatementParser.SelectContext ctx) {\n+        if (null != ctx.queryExpression()) {\n+            visit(ctx.queryExpression());\n+            if (null != ctx.lockClauseList()) {\n+                result.append(\" \");\n+                visit(ctx.lockClauseList());\n+            }\n+        } else if (null != ctx.queryExpressionParens()) {\n+            visit(ctx.queryExpressionParens());\n+        } else {\n+            visit(ctx.selectWithInto());\n+        }\n+        print(\";\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpression(final MySQLStatementParser.QueryExpressionContext ctx) {\n+        if (null != ctx.withClause()) {\n+            visit(ctx.withClause());\n+            print(\" \");\n+        }\n+        if (null != ctx.queryExpressionBody()) {\n+            visit(ctx.queryExpressionBody());\n+        } else {\n+            visit(ctx.queryExpressionParens());\n+        }\n+        if (null != ctx.orderByClause()) {\n+            print(\" \");\n+            visit(ctx.orderByClause());\n+        }\n+        if (null != ctx.limitClause()) {\n+            print(\" \");\n+            visit(ctx.limitClause());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpressionParens(final MySQLStatementParser.QueryExpressionParensContext ctx) {\n+        println();\n+        this.indentCount++;\n+        print(\"(\");\n+        println();\n+        if (null != ctx.queryExpressionParens()) {\n+            visit(ctx.queryExpressionParens());\n+        } else {\n+            visit(ctx.queryExpression());\n+            if (null != ctx.lockClauseList()) {\n+                result.append(\" \");\n+                visit(ctx.lockClauseList());\n+            }\n+        }\n+        this.indentCount--;\n+        println();\n+        print(\")\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQueryExpressionBody(final MySQLStatementParser.QueryExpressionBodyContext ctx) {\n+        if (1 == ctx.getChildCount()) {\n+            visit(ctx.queryPrimary());\n+        } else {\n+            visit(ctx.queryExpressionParens(0));\n+            result.append(\"\\nUNION\\n\");\n+            if (null != ctx.unionOption()) {\n+                visit(ctx.unionOption());\n+                result.append(\" \");\n+            }\n+            if (null != ctx.queryPrimary()) {\n+                visit(ctx.queryPrimary());\n+            } else {\n+                visit(ctx.queryExpressionParens(1));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitQuerySpecification(final MySQLStatementParser.QuerySpecificationContext ctx) {\n+        print(\"SELECT \");\n+        int selectSpecCount = ctx.selectSpecification().size();\n+        for (int i = 0; i < selectSpecCount; i++) {\n+            visit(ctx.selectSpecification(i));\n+            print(\" \");\n+        }\n+        visit(ctx.projections());\n+        if (null != ctx.fromClause()) {\n+            println();\n+            visit(ctx.fromClause());\n+        }\n+        if (null != ctx.whereClause()) {\n+            println();\n+            visit(ctx.whereClause());\n+        }\n+        if (null != ctx.groupByClause()) {\n+            println();\n+            visit(ctx.groupByClause());\n+        }\n+        if (null != ctx.havingClause()) {\n+            println();\n+            visit(ctx.havingClause());\n+        }\n+        if (null != ctx.windowClause()) {\n+            println();\n+            visit(ctx.windowClause());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitExplicitTable(final MySQLStatementParser.ExplicitTableContext ctx) {\n+        print(\"TABLE \");\n+        visit(ctx.tableName());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTableName(final MySQLStatementParser.TableNameContext ctx) {\n+        if (null != ctx.owner()) {\n+            print(ctx.owner().getText());\n+            print(\".\");\n+        }\n+        print(ctx.name().getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTableValueConstructor(final MySQLStatementParser.TableValueConstructorContext ctx) {\n+        print(\"VALUES \");\n+        visit(ctx.rowConstructorList());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitRowConstructorList(final MySQLStatementParser.RowConstructorListContext ctx) {\n+        int rowCount = ctx.assignmentValues().size();\n+        for (int i = 0; i < rowCount; i++) {\n+            if (i != 0 && i != rowCount) {\n+                print(\", ROW\");\n+                visit(ctx.assignmentValues(i));\n+\n+            } else {\n+                print(\"ROW\");\n+                visit(ctx.assignmentValues(i));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitAssignmentValues(final MySQLStatementParser.AssignmentValuesContext ctx) {\n+        print(\"(\");\n+        int assignCount = ctx.assignmentValue().size();\n+        for (int i = 0; i < assignCount; i++) {\n+            if (i != 0) {\n+                print(\", \");\n+                visit(ctx.assignmentValue(i));\n+            } else {\n+                visit(ctx.assignmentValue(i));\n+            }\n+        }\n+        print(\")\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitWhereClause(final MySQLStatementParser.WhereClauseContext ctx) {\n+        visit(ctx.WHERE());\n+        print(\" \");\n+        this.indentCount++;\n+        println();\n+        visit(ctx.expr());\n+        this.indentCount--;\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitExpr(final MySQLStatementParser.ExprContext ctx) {\n+        if (null != ctx.logicalOperator()) {\n+            MySQLStatementParser.ExprContext left = ctx.expr(0);\n+            visit(left);\n+            println();\n+            MySQLStatementParser.ExprContext right = ctx.expr(1);\n+            print(ctx.logicalOperator().getText());\n+            visit(right);\n+        } else if (null != ctx.notOperator()) {\n+            print(ctx.notOperator().getText());\n+            visit(ctx.expr(0));\n+        } else {\n+            visitChildren(ctx);\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitAlias(final MySQLStatementParser.AliasContext ctx) {\n+        print(ctx.getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitProjections(final MySQLStatementParser.ProjectionsContext ctx) {\n+        this.indentCount++;\n+        if (null != ctx.unqualifiedShorthand()) {\n+            visit(ctx.unqualifiedShorthand());\n+            result.append(\" \");\n+        }\n+        int projectionCount = ctx.projection().size();\n+        int lineItemCount = 0;\n+        for (int i = 0; i < projectionCount; i++) {\n+            if (0 != i) {\n+                result.append(\", \");\n+                if (lineItemCount >= projectionsCountOfLine) {\n+                    lineItemCount = 0;\n+                    println();\n+                }\n+            }\n+            visit(ctx.projection(i));\n+            lineItemCount++;\n+        }\n+        this.indentCount--;\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitProjection(final MySQLStatementParser.ProjectionContext ctx) {\n+        if (null != ctx.expr()) {\n+            visit(ctx.expr());\n+            print(\" \");\n+        }\n+        if (null != ctx.AS()) {\n+            print(\"AS \");\n+        }\n+        if (null != ctx.alias()) {\n+            visit(ctx.alias());\n+        }\n+        if (null != ctx.qualifiedShorthand()) {\n+            visit(ctx.qualifiedShorthand());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitTerminal(final TerminalNode node) {\n+        if (isUperCase()) {\n+            print(node.getText().toUpperCase());\n+        } else {\n+            print(node.getText().toLowerCase());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitIdentifier(final MySQLStatementParser.IdentifierContext ctx) {\n+        print(ctx.getText());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitLiterals(final MySQLStatementParser.LiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitStringLiterals(final MySQLStatementParser.StringLiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitNumberLiterals(final MySQLStatementParser.NumberLiteralsContext ctx) {\n+        print(\"?\");\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitWithClause(final MySQLStatementParser.WithClauseContext ctx) {\n+        print(\"WITH \");\n+        if (null != ctx.RECURSIVE()) {\n+            visit(ctx.RECURSIVE());\n+            result.append(\" \");\n+        }\n+        for (int i = 0; i < ctx.cteClause().size(); i++) {\n+            if (i != 0 && i < ctx.cteClause().size() - 1) {\n+                result.append(\", \");\n+            }\n+            visit(ctx.cteClause(i));\n+        }\n+        if (null != ctx.parent) {\n+            result.append(\"\\n\");\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitCteClause(final MySQLStatementParser.CteClauseContext ctx) {\n+        visit(ctx.ignoredIdentifier());\n+        result.append(\" \");\n+        if (null != ctx.columnNames()) {\n+            visit(ctx.columnNames());\n+            result.append(\" \");\n+        }\n+        result.append(\"AS \");\n+        visit(ctx.subquery());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitIgnoredIdentifier(final MySQLStatementParser.IgnoredIdentifierContext ctx) {\n+        visit(ctx.identifier(0));\n+        if (null != ctx.DOT_()) {\n+            visit(ctx.DOT_());\n+            visit(ctx.identifier(1));\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitColumnNames(final MySQLStatementParser.ColumnNamesContext ctx) {\n+        if (null != ctx.LP_()) {\n+            visit(ctx.LP_());\n+        }\n+        int columnCount = ctx.columnName().size();\n+        for (int i = 0; i < columnCount; i++) {\n+            if (i != 0 && i < columnCount - 1) {\n+                result.append(\", \");\n+            } else {\n+                visit(ctx.columnName(i));\n+            }\n+        }\n+        if (null != ctx.RP_()) {\n+            visit(ctx.RP_());\n+        }\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitColumnName(final MySQLStatementParser.ColumnNameContext ctx) {\n+        if (null != ctx.owner()) {\n+            visit(ctx.owner());\n+            visit(ctx.DOT_(0));\n+        }\n+        visit(ctx.name());\n+        return result.toString();\n+    }\n+\n+    @Override\n+    public String visitChildren(final RuleNode node) {\n+        String result = defaultResult();\n+\n+        int n = node.getChildCount();\n+        for (int i = 0; i < n; i++) {\n+            if (i != 0) {\n+                print(\" \");\n+            }\n+            if (!shouldVisitNextChild(node, result)) {\n+                break;\n+            }\n+\n+            ParseTree c = node.getChild(i);\n+            String childResult = c.accept(this);\n+            result = aggregateResult(result, childResult);\n+        }\n+        return result;\n+    }\n+\n+    private void print(final char value) {\n+        if (this.result == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxNDE0Nw=="}, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI5MzQ0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1ODowN1rOHw4P6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1ODowN1rOHw4P6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxNTI3NA==", "bodyText": "Please make it   final unless it has any child classes.", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521015274", "createdAt": "2020-11-11T01:58:07Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.mysql;\n+\n+import lombok.Getter;\n+import org.antlr.v4.runtime.CodePointBuffer;\n+import org.antlr.v4.runtime.CodePointCharStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.apache.shardingsphere.sql.parser.core.parser.ParseASTNode;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLLexer;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLParser;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLDMLFormatSQLVisitor;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLFormatSQLVisitor;\n+import org.junit.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class MySQLFormartTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI5ODU4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1OToyNlrOHw4TYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1OToyNlrOHw4TYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxNjE2Mg==", "bodyText": "final member?", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521016162", "createdAt": "2020-11-11T01:59:26Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.mysql;\n+\n+import lombok.Getter;\n+import org.antlr.v4.runtime.CodePointBuffer;\n+import org.antlr.v4.runtime.CodePointCharStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.apache.shardingsphere.sql.parser.core.parser.ParseASTNode;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLLexer;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLParser;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLDMLFormatSQLVisitor;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLFormatSQLVisitor;\n+import org.junit.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class MySQLFormartTest {\n+\n+    @Getter\n+    private static List<String[]> testUnits = new LinkedList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjMwOTkzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjowMjoxMlrOHw4a_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjowMjoxMlrOHw4a_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxODEwOA==", "bodyText": "This name seems to be vague for this test assertion", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521018108", "createdAt": "2020-11-11T02:02:12Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.mysql;\n+\n+import lombok.Getter;\n+import org.antlr.v4.runtime.CodePointBuffer;\n+import org.antlr.v4.runtime.CodePointCharStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.apache.shardingsphere.sql.parser.core.parser.ParseASTNode;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLLexer;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLParser;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLDMLFormatSQLVisitor;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLFormatSQLVisitor;\n+import org.junit.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class MySQLFormartTest {\n+\n+    @Getter\n+    private static List<String[]> testUnits = new LinkedList();\n+\n+    {\n+        testUnits.add(new String[]{\"test\", \"select a+1 as b, name n from table1 join table2 where id=1 and name='lu';\", \"SELECT a + ? AS b, name n\\n\"\n+                + \"FROM table1 JOIN table2\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, count(*) as n, (select id, name, age, sex from table2 where id=2) as sid, yyyy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tCOUNT ( * ) AS n, \\n\"\n+                + \"\\t(\\n\"\n+                + \"\\t\\tSELECT id , name , age , \\n\"\n+                + \"\\t\\t\\tsex \\n\"\n+                + \"\\t\\tFROM table2\\n\"\n+                + \"\\t\\tWHERE \\n\"\n+                + \"\\t\\t\\tid = ?\\n\"\n+                + \"\\t) AS sid, yyyy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1 and name=1 and a=1 and b=2 and c=4 and d=3\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?\\n\"\n+                + \"\\tanda = ?\\n\"\n+                + \"\\tandb = ?\\n\"\n+                + \"\\tandc = ?\\n\"\n+                + \"\\tandd = ?;\"});\n+        testUnits.add(new String[]{\"\", \"ALTER TABLE t_log ADD name varchar(10)\", \"ALTER TABLE t_log ADD name VARCHAR ( 10 )\"});\n+    }\n+\n+    @Test\n+    public final void assertTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjMxOTQ3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjowNDoyOVrOHw4hWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoxMzoyNVrOHw7xOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxOTczOA==", "bodyText": "So this test...just intends to get an error assertion result? How about getting a standard and correct assertion?", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521019738", "createdAt": "2020-11-11T02:04:29Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.mysql;\n+\n+import lombok.Getter;\n+import org.antlr.v4.runtime.CodePointBuffer;\n+import org.antlr.v4.runtime.CodePointCharStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.apache.shardingsphere.sql.parser.core.parser.ParseASTNode;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLLexer;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLParser;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLDMLFormatSQLVisitor;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLFormatSQLVisitor;\n+import org.junit.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class MySQLFormartTest {\n+\n+    @Getter\n+    private static List<String[]> testUnits = new LinkedList();\n+\n+    {\n+        testUnits.add(new String[]{\"test\", \"select a+1 as b, name n from table1 join table2 where id=1 and name='lu';\", \"SELECT a + ? AS b, name n\\n\"\n+                + \"FROM table1 JOIN table2\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, count(*) as n, (select id, name, age, sex from table2 where id=2) as sid, yyyy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tCOUNT ( * ) AS n, \\n\"\n+                + \"\\t(\\n\"\n+                + \"\\t\\tSELECT id , name , age , \\n\"\n+                + \"\\t\\t\\tsex \\n\"\n+                + \"\\t\\tFROM table2\\n\"\n+                + \"\\t\\tWHERE \\n\"\n+                + \"\\t\\t\\tid = ?\\n\"\n+                + \"\\t) AS sid, yyyy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1 and name=1 and a=1 and b=2 and c=4 and d=3\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?\\n\"\n+                + \"\\tanda = ?\\n\"\n+                + \"\\tandb = ?\\n\"\n+                + \"\\tandc = ?\\n\"\n+                + \"\\tandd = ?;\"});\n+        testUnits.add(new String[]{\"\", \"ALTER TABLE t_log ADD name varchar(10)\", \"ALTER TABLE t_log ADD name VARCHAR ( 10 )\"});\n+    }\n+\n+    @Test\n+    public final void assertTest() {\n+        for (String[] each : testUnits) {\n+            CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(each[1].toCharArray()));\n+            MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n+            MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n+            ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n+            MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n+            String result = visitor.visit(tree);\n+            assertTrue(\"SQL format error\", each[2].equals(result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3Mjk1Mg==", "bodyText": "Is UT to verify whether the actual output is consistent with the expected output? @tristaZero", "url": "https://github.com/apache/shardingsphere/pull/8116#discussion_r521072952", "createdAt": "2020-11-11T03:13:25Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/test/java/org/apache/shardingsphere/sql/parser/mysql/MySQLFormartTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.mysql;\n+\n+import lombok.Getter;\n+import org.antlr.v4.runtime.CodePointBuffer;\n+import org.antlr.v4.runtime.CodePointCharStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.apache.shardingsphere.sql.parser.core.parser.ParseASTNode;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLLexer;\n+import org.apache.shardingsphere.sql.parser.mysql.parser.MySQLParser;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLDMLFormatSQLVisitor;\n+import org.apache.shardingsphere.sql.parser.mysql.visitor.format.impl.MySQLFormatSQLVisitor;\n+import org.junit.Test;\n+\n+import java.nio.CharBuffer;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class MySQLFormartTest {\n+\n+    @Getter\n+    private static List<String[]> testUnits = new LinkedList();\n+\n+    {\n+        testUnits.add(new String[]{\"test\", \"select a+1 as b, name n from table1 join table2 where id=1 and name='lu';\", \"SELECT a + ? AS b, name n\\n\"\n+                + \"FROM table1 JOIN table2\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, count(*) as n, (select id, name, age, sex from table2 where id=2) as sid, yyyy from table1 where id=1\", \"SELECT id , name , age , \\n\"\n+                + \"\\tCOUNT ( * ) AS n, \\n\"\n+                + \"\\t(\\n\"\n+                + \"\\t\\tSELECT id , name , age , \\n\"\n+                + \"\\t\\t\\tsex \\n\"\n+                + \"\\t\\tFROM table2\\n\"\n+                + \"\\t\\tWHERE \\n\"\n+                + \"\\t\\t\\tid = ?\\n\"\n+                + \"\\t) AS sid, yyyy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?;\"});\n+        testUnits.add(new String[]{\"\", \"select id, name, age, sex, ss, yy from table1 where id=1 and name=1 and a=1 and b=2 and c=4 and d=3\", \"SELECT id , name , age , \\n\"\n+                + \"\\tsex , ss , yy \\n\"\n+                + \"FROM table1\\n\"\n+                + \"WHERE \\n\"\n+                + \"\\tid = ?\\n\"\n+                + \"\\tandname = ?\\n\"\n+                + \"\\tanda = ?\\n\"\n+                + \"\\tandb = ?\\n\"\n+                + \"\\tandc = ?\\n\"\n+                + \"\\tandd = ?;\"});\n+        testUnits.add(new String[]{\"\", \"ALTER TABLE t_log ADD name varchar(10)\", \"ALTER TABLE t_log ADD name VARCHAR ( 10 )\"});\n+    }\n+\n+    @Test\n+    public final void assertTest() {\n+        for (String[] each : testUnits) {\n+            CodePointBuffer buffer = CodePointBuffer.withChars(CharBuffer.wrap(each[1].toCharArray()));\n+            MySQLLexer lexer = new MySQLLexer(CodePointCharStream.fromBuffer(buffer));\n+            MySQLParser parser = new MySQLParser(new CommonTokenStream(lexer));\n+            ParseTree tree = ((ParseASTNode) parser.parse()).getRootNode();\n+            MySQLFormatSQLVisitor visitor = new MySQLDMLFormatSQLVisitor();\n+            String result = visitor.visit(tree);\n+            assertTrue(\"SQL format error\", each[2].equals(result));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxOTczOA=="}, "originalCommit": {"oid": "a1b9079298f4c8bead227302e4fb13ebcf43b89f"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 589, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}