{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTYwMTUz", "number": 6672, "title": "Test for issues 6561", "bodyText": "Fixes #6561.", "createdAt": "2020-08-06T11:14:44Z", "url": "https://github.com/apache/shardingsphere/pull/6672", "merged": true, "mergeCommit": {"oid": "bd2b7ceab1281157dabbcd5abfe3777988b0b729"}, "closed": true, "closedAt": "2020-08-08T16:22:01Z", "author": {"login": "harvies"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc78XSKgH2gAyNDYzOTYwMTUzOmNmZDY0NGU0ODEyNTQxOWM0YjE5ODBiZWYzMjNhNWRkMTJmYzEyMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc87gsjgFqTQ2MzgxMjY4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cfd644e48125419c4b1980bef323a5dd12fc1204", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/cfd644e48125419c4b1980bef323a5dd12fc1204", "committedDate": "2020-08-05T14:47:21Z", "message": "test for issues 6561."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "264e4cbb8cc8793b7011c4ef832e43e5c86f421e", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/264e4cbb8cc8793b7011c4ef832e43e5c86f421e", "committedDate": "2020-08-05T14:50:50Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a2746f732fa06afbfa2b0855d11e0675831142", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/e5a2746f732fa06afbfa2b0855d11e0675831142", "committedDate": "2020-08-06T10:43:07Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dc067d5327fc99b99a99b83fa814de7fc61c35b", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/7dc067d5327fc99b99a99b83fa814de7fc61c35b", "committedDate": "2020-08-06T11:12:53Z", "message": "add licenses"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTgwMTk4", "url": "https://github.com/apache/shardingsphere/pull/6672#pullrequestreview-462980198", "createdAt": "2020-08-07T01:33:49Z", "commit": {"oid": "7dc067d5327fc99b99a99b83fa814de7fc61c35b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozMzo0OVrOG9JhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozMzo0OVrOG9JhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjIzOQ==", "bodyText": "should add a new empty line at the end of the code for checkstyle", "url": "https://github.com/apache/shardingsphere/pull/6672#discussion_r466772239", "createdAt": "2020-08-07T01:33:49Z", "author": {"login": "taojintianxia"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/yaml/swapper/YamlProxyConfigurationSwapperTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.yaml.swapper;\n+\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.ProxyUser;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlAuthenticationConfiguration;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlProxyUserConfiguration;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.config.YamlRuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.masterslave.api.config.MasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.masterslave.yaml.config.YamlMasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationConfiguration;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.YamlProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyServerConfiguration;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class YamlProxyConfigurationSwapperTest {\n+\n+    @Test\n+    public void assertSwap() {\n+\n+        YamlProxyConfiguration yamlProxyConfiguration = mock(YamlProxyConfiguration.class);\n+\n+        //serverConfiguration\n+        YamlProxyServerConfiguration yamlProxyServerConfiguration = mock(YamlProxyServerConfiguration.class);\n+        when(yamlProxyConfiguration.getServerConfiguration()).thenReturn(yamlProxyServerConfiguration);\n+\n+        //prepare for authentication\n+        YamlAuthenticationConfiguration yamlAuthenticationConfiguration = mock(YamlAuthenticationConfiguration.class);\n+        Map<String, YamlProxyUserConfiguration> yamlProxyUserConfigurationMap = new HashMap<>();\n+        YamlProxyUserConfiguration yamlProxyUserConfiguration = mock(YamlProxyUserConfiguration.class);\n+        when(yamlProxyUserConfiguration.getPassword()).thenReturn(\"pass\");\n+        when(yamlProxyUserConfiguration.getAuthorizedSchemas()).thenReturn(\"db1\");\n+        yamlProxyUserConfigurationMap.put(\"user1\", yamlProxyUserConfiguration);\n+        when(yamlAuthenticationConfiguration.getUsers()).thenReturn(yamlProxyUserConfigurationMap);\n+        when(yamlProxyServerConfiguration.getAuthentication()).thenReturn(yamlAuthenticationConfiguration);\n+\n+\n+        //prepare for orchestration\n+        YamlOrchestrationConfiguration yamlOrchestrationConfiguration = mock(YamlOrchestrationConfiguration.class);\n+        when(yamlProxyServerConfiguration.getOrchestration()).thenReturn(yamlOrchestrationConfiguration);\n+        when(yamlOrchestrationConfiguration.getNamespace()).thenReturn(\"test1\");\n+\n+        //registryCenter\n+        YamlOrchestrationCenterConfiguration registryCenterConfiguration = mock(YamlOrchestrationCenterConfiguration.class);\n+        when(yamlOrchestrationConfiguration.getRegistryCenter()).thenReturn(registryCenterConfiguration);\n+        when(registryCenterConfiguration.getType()).thenReturn(\"typeOne\");\n+        when(registryCenterConfiguration.getServerLists()).thenReturn(\"serverLists1\");\n+        Properties registryCenterProperties = new Properties();\n+        registryCenterProperties.put(\"key1\", \"value1\");\n+        when(registryCenterConfiguration.getProps()).thenReturn(registryCenterProperties);\n+        when(yamlOrchestrationConfiguration.getRegistryCenter()).thenReturn(registryCenterConfiguration);\n+\n+        //additionalConfigCenter\n+        YamlOrchestrationCenterConfiguration additionalConfigCenterConfiguration = mock(YamlOrchestrationCenterConfiguration.class);\n+        when(yamlOrchestrationConfiguration.getAdditionalConfigCenter()).thenReturn(additionalConfigCenterConfiguration);\n+        when(additionalConfigCenterConfiguration.getType()).thenReturn(\"typeTwo\");\n+        when(additionalConfigCenterConfiguration.getServerLists()).thenReturn(\"serverLists2\");\n+        Properties additionalConfigCenterProperties = new Properties();\n+        additionalConfigCenterProperties.put(\"key2\", \"value2\");\n+        when(additionalConfigCenterConfiguration.getProps()).thenReturn(additionalConfigCenterProperties);\n+        when(yamlOrchestrationConfiguration.getAdditionalConfigCenter()).thenReturn(additionalConfigCenterConfiguration);\n+\n+        when(yamlOrchestrationConfiguration.getAdditionalConfigCenter()).thenReturn(additionalConfigCenterConfiguration);\n+        when(yamlOrchestrationConfiguration.isOverwrite()).thenReturn(true);\n+\n+\n+        //prepare for cluster\n+        YamlClusterConfiguration yamlClusterConfiguration = mock(YamlClusterConfiguration.class);\n+        YamlHeartbeatConfiguration yamlHeartbeatConfiguration = mock(YamlHeartbeatConfiguration.class);\n+        when(yamlClusterConfiguration.getHeartbeat()).thenReturn(yamlHeartbeatConfiguration);\n+        when(yamlHeartbeatConfiguration.getSql()).thenReturn(\"select 1;\");\n+        when(yamlHeartbeatConfiguration.getInterval()).thenReturn(1);\n+        when(yamlHeartbeatConfiguration.isRetryEnable()).thenReturn(true);\n+        when(yamlHeartbeatConfiguration.getRetryMaximum()).thenReturn(3);\n+        when(yamlHeartbeatConfiguration.getRetryInterval()).thenReturn(2);\n+        when(yamlHeartbeatConfiguration.getThreadCount()).thenReturn(4);\n+        when(yamlProxyServerConfiguration.getCluster()).thenReturn(yamlClusterConfiguration);\n+\n+        //prepare for metrics\n+        YamlMetricsConfiguration yamlMetricsConfiguration = mock(YamlMetricsConfiguration.class);\n+        when(yamlProxyServerConfiguration.getMetrics()).thenReturn(yamlMetricsConfiguration);\n+        when(yamlMetricsConfiguration.getName()).thenReturn(\"name1\");\n+        when(yamlMetricsConfiguration.getHost()).thenReturn(\"host1\");\n+        when(yamlMetricsConfiguration.getPort()).thenReturn(111);\n+        when(yamlMetricsConfiguration.getAsync()).thenReturn(true);\n+        when(yamlMetricsConfiguration.getEnable()).thenReturn(true);\n+        when(yamlMetricsConfiguration.getThreadCount()).thenReturn(4);\n+        Properties yamlMetricsProperties = new Properties();\n+        yamlMetricsProperties.put(\"key3\", \"value3\");\n+        when(yamlMetricsConfiguration.getProps()).thenReturn(yamlMetricsProperties);\n+\n+        //prepare for props\n+        Properties properties = new Properties();\n+        properties.put(\"key4\", \"value4\");\n+        when(yamlProxyServerConfiguration.getProps()).thenReturn(properties);\n+\n+\n+        //ruleConfigurations\n+        Map<String, YamlProxyRuleConfiguration> yamlProxyRuleConfigurationMap = new HashMap<>();\n+        when(yamlProxyConfiguration.getRuleConfigurations()).thenReturn(yamlProxyRuleConfigurationMap);\n+\n+        //prepare  for ruleConfigurations\n+        YamlProxyRuleConfiguration yamlProxyRuleConfiguration = mock(YamlProxyRuleConfiguration.class);\n+        yamlProxyRuleConfigurationMap.put(\"yamlProxyRule1\", yamlProxyRuleConfiguration);\n+\n+        //schemaName\n+        when(yamlProxyRuleConfiguration.getSchemaName()).thenReturn(\"ruleConfigSchema1\");\n+\n+        //dataSourceCommon\n+        Map<String, Object> dataSourceCommon = new HashMap<>();\n+        when(yamlProxyRuleConfiguration.getDataSourceCommon()).thenReturn(dataSourceCommon);\n+\n+        //dataSource\n+        YamlDataSourceParameter yamlDataSourceParameter = mock(YamlDataSourceParameter.class);\n+        when(yamlProxyRuleConfiguration.getDataSource()).thenReturn(yamlDataSourceParameter);\n+        when(yamlDataSourceParameter.getUrl()).thenReturn(\"url1\");\n+        when(yamlDataSourceParameter.getUsername()).thenReturn(\"username1\");\n+        when(yamlDataSourceParameter.getPassword()).thenReturn(\"password1\");\n+        when(yamlDataSourceParameter.getConnectionTimeoutMilliseconds()).thenReturn(1L);\n+        when(yamlDataSourceParameter.getIdleTimeoutMilliseconds()).thenReturn(2L);\n+        when(yamlDataSourceParameter.getMaxLifetimeMilliseconds()).thenReturn(3L);\n+        when(yamlDataSourceParameter.getMaxPoolSize()).thenReturn(4);\n+        when(yamlDataSourceParameter.getMinPoolSize()).thenReturn(5);\n+        when(yamlDataSourceParameter.getMaintenanceIntervalMilliseconds()).thenReturn(6L);\n+        when(yamlDataSourceParameter.isReadOnly()).thenReturn(true);\n+\n+        //dataSources\n+        Map<String, YamlDataSourceParameter> dataSources = new HashMap<>();\n+        dataSources.put(\"ds1\", yamlDataSourceParameter);\n+        when(yamlProxyRuleConfiguration.getDataSources()).thenReturn(dataSources);\n+\n+        //rules\n+        Collection<YamlRuleConfiguration> rules = new ArrayList<>();\n+        YamlRuleConfiguration testRuleConfiguration = new YamlMasterSlaveRuleConfiguration();\n+        rules.add(testRuleConfiguration);\n+        when(yamlProxyRuleConfiguration.getRules()).thenReturn(rules);\n+\n+        //swap\n+        ProxyConfiguration proxyConfiguration = new YamlProxyConfigurationSwapper().swap(yamlProxyConfiguration);\n+\n+        //test for authentication\n+        Authentication authentication = proxyConfiguration.getAuthentication();\n+        Assert.assertNotNull(authentication);\n+        Map<String, ProxyUser> proxyUserMap = authentication.getUsers();\n+        Assert.assertEquals(1, proxyUserMap.size());\n+        ProxyUser proxyUser = proxyUserMap.get(\"user1\");\n+        Assert.assertNotNull(proxyUser);\n+        Assert.assertEquals(\"pass\", proxyUser.getPassword());\n+        Collection<String> authorizedSchemas = proxyUser.getAuthorizedSchemas();\n+        Assert.assertNotNull(authentication);\n+        Assert.assertEquals(1, authorizedSchemas.size());\n+        Assert.assertTrue(authorizedSchemas.contains(\"db1\"));\n+\n+\n+        //test for orchestration\n+\n+\n+        //test for cluster\n+        ClusterConfiguration clusterConfiguration = proxyConfiguration.getCluster();\n+        Assert.assertNotNull(clusterConfiguration);\n+        HeartbeatConfiguration heartbeatConfiguration = clusterConfiguration.getHeartbeat();\n+        Assert.assertNotNull(heartbeatConfiguration);\n+        Assert.assertEquals(\"select 1;\", heartbeatConfiguration.getSql());\n+        Assert.assertEquals(1, heartbeatConfiguration.getInterval());\n+        Assert.assertTrue(heartbeatConfiguration.isRetryEnable());\n+        Assert.assertEquals(3, heartbeatConfiguration.getRetryMaximum());\n+        Assert.assertEquals(2, heartbeatConfiguration.getRetryInterval());\n+        Assert.assertEquals(4, heartbeatConfiguration.getThreadCount());\n+\n+        //test for metrics\n+        MetricsConfiguration metricsConfiguration = proxyConfiguration.getMetrics();\n+        Assert.assertNotNull(metricsConfiguration);\n+        Assert.assertEquals(\"name1\", metricsConfiguration.getMetricsName());\n+        Assert.assertEquals(\"host1\", metricsConfiguration.getHost());\n+        Assert.assertEquals(111, metricsConfiguration.getPort());\n+        Assert.assertEquals(true, metricsConfiguration.getAsync());\n+        Assert.assertEquals(true, metricsConfiguration.getEnable());\n+        Assert.assertEquals(4, metricsConfiguration.getThreadCount());\n+        Properties metricsProperties = metricsConfiguration.getProps();\n+        Assert.assertNotNull(metricsProperties);\n+        Assert.assertEquals(1, metricsProperties.size());\n+        Assert.assertEquals(\"value3\", metricsProperties.getProperty(\"key3\"));\n+\n+        //test for props\n+        Properties proxyConfigurationProps = proxyConfiguration.getProps();\n+        Assert.assertNotNull(proxyConfigurationProps);\n+        Assert.assertEquals(1, proxyConfigurationProps.size());\n+        Assert.assertEquals(\"value4\", proxyConfigurationProps.getProperty(\"key4\"));\n+\n+\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = proxyConfiguration.getSchemaDataSources();\n+        Assert.assertNotNull(schemaDataSources);\n+        Assert.assertEquals(1, schemaDataSources.size());\n+        Assert.assertTrue(schemaDataSources.containsKey(\"yamlProxyRule1\"));\n+        Map<String, DataSourceParameter> dataSourceParameterMap = schemaDataSources.get(\"yamlProxyRule1\");\n+        Assert.assertTrue(dataSourceParameterMap.containsKey(\"ds1\"));\n+\n+        DataSourceParameter dataSourceParameter = dataSourceParameterMap.get(\"ds1\");\n+        Assert.assertNotNull(dataSourceParameter);\n+        Assert.assertEquals(\"url1\", dataSourceParameter.getUrl());\n+        Assert.assertEquals(\"username1\", dataSourceParameter.getUsername());\n+        Assert.assertEquals(\"password1\", dataSourceParameter.getPassword());\n+        Assert.assertEquals(1, dataSourceParameter.getConnectionTimeoutMilliseconds());\n+        Assert.assertEquals(2, dataSourceParameter.getIdleTimeoutMilliseconds());\n+        Assert.assertEquals(3, dataSourceParameter.getMaxLifetimeMilliseconds());\n+        Assert.assertEquals(4, dataSourceParameter.getMaxPoolSize());\n+        Assert.assertEquals(5, dataSourceParameter.getMinPoolSize());\n+        Assert.assertEquals(6, dataSourceParameter.getMaintenanceIntervalMilliseconds());\n+        Assert.assertTrue(dataSourceParameter.isReadOnly());\n+\n+        Map<String, Collection<RuleConfiguration>> schemaRules = proxyConfiguration.getSchemaRules();\n+        Assert.assertNotNull(schemaRules);\n+        Assert.assertEquals(1, schemaRules.size());\n+        Collection<RuleConfiguration> ruleConfigurationCollection = schemaRules.get(\"yamlProxyRule1\");\n+        Assert.assertNotNull(ruleConfigurationCollection);\n+        Assert.assertEquals(1, ruleConfigurationCollection.size());\n+        RuleConfiguration ruleConfiguration = ruleConfigurationCollection.iterator().next();\n+        Assert.assertNotNull(ruleConfiguration);\n+        Assert.assertTrue(ruleConfiguration instanceof MasterSlaveRuleConfiguration);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc067d5327fc99b99a99b83fa814de7fc61c35b"}, "originalPosition": 256}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1363c0b08489680905a23d1a50d906a4f8c5c2", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/4f1363c0b08489680905a23d1a50d906a4f8c5c2", "committedDate": "2020-08-07T04:46:07Z", "message": "Use checkstyle to format."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aecafc346559463f073c0efc0c35cc536382a5f", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/0aecafc346559463f073c0efc0c35cc536382a5f", "committedDate": "2020-08-07T09:35:57Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af4c4b135eebb5b581dc2e94dad49b0482cafecb", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/af4c4b135eebb5b581dc2e94dad49b0482cafecb", "committedDate": "2020-08-07T09:39:43Z", "message": "add a new empty line at the end of the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654d29881c42a2ed7d12e989386e4d02230d52d8", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/654d29881c42a2ed7d12e989386e4d02230d52d8", "committedDate": "2020-08-07T10:44:43Z", "message": "remove empty line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63efb1963d6ef64f96d7938d031b02d8c9ca6fe3", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/63efb1963d6ef64f96d7938d031b02d8c9ca6fe3", "committedDate": "2020-08-07T10:48:24Z", "message": "check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bdc96d1a55b4908458d5ac35d6bb549cab1475f", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/9bdc96d1a55b4908458d5ac35d6bb549cab1475f", "committedDate": "2020-08-07T11:05:29Z", "message": "check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b24975c67699004d7a3bd576af4045fd4b18bd3", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/0b24975c67699004d7a3bd576af4045fd4b18bd3", "committedDate": "2020-08-07T13:21:30Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "754f2a0bbc07fe19923d4a6f29d6b175657b8566", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/754f2a0bbc07fe19923d4a6f29d6b175657b8566", "committedDate": "2020-08-07T13:22:55Z", "message": "check style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzI0MzI2", "url": "https://github.com/apache/shardingsphere/pull/6672#pullrequestreview-463724326", "createdAt": "2020-08-08T07:04:12Z", "commit": {"oid": "754f2a0bbc07fe19923d4a6f29d6b175657b8566"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fde22a50743b627fa93846bf893a5b70a13d81b", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/9fde22a50743b627fa93846bf893a5b70a13d81b", "committedDate": "2020-08-08T07:55:16Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65f0080daec3e14d168e9d265d651cc0c65f09fa", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/65f0080daec3e14d168e9d265d651cc0c65f09fa", "committedDate": "2020-08-08T08:35:48Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f471f22d0d00f0e4082519f3882986404b14c210", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/f471f22d0d00f0e4082519f3882986404b14c210", "committedDate": "2020-08-08T08:48:02Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzk1MTkz", "url": "https://github.com/apache/shardingsphere/pull/6672#pullrequestreview-463795193", "createdAt": "2020-08-08T10:44:12Z", "commit": {"oid": "65f0080daec3e14d168e9d265d651cc0c65f09fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo0NDoxMlrOG9zBtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMDo0NDoxMlrOG9zBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1MjM0MQ==", "bodyText": "The sequence of assertion's actual value and expected value are wrong.", "url": "https://github.com/apache/shardingsphere/pull/6672#discussion_r467452341", "createdAt": "2020-08-08T10:44:12Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/yaml/swapper/YamlProxyConfigurationSwapperTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.yaml.swapper;\n+\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.ProxyUser;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlAuthenticationConfiguration;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlProxyUserConfiguration;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.config.YamlRuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.masterslave.api.config.MasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.masterslave.yaml.config.YamlMasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationConfiguration;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.YamlProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyServerConfiguration;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.ArrayList;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class YamlProxyConfigurationSwapperTest {\n+\n+    @Test\n+    public void assertSwap() {\n+        YamlProxyConfiguration yamlProxyConfiguration = getYamlProxyConfiguration();\n+        ProxyConfiguration proxyConfiguration = new YamlProxyConfigurationSwapper().swap(yamlProxyConfiguration);\n+        assertAuthentication(proxyConfiguration);\n+        assertClusterConfiguration(proxyConfiguration);\n+        assertMetricsConfiguration(proxyConfiguration);\n+        assertProxyConfigurationProps(proxyConfiguration);\n+        assertSchemaDataSources(proxyConfiguration);\n+        assertSchemaRules(proxyConfiguration);\n+    }\n+\n+    private void assertSchemaDataSources(ProxyConfiguration proxyConfiguration) {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = proxyConfiguration.getSchemaDataSources();\n+        assertNotNull(schemaDataSources);\n+        assertThat(1, is(schemaDataSources.size()));\n+        assertTrue(schemaDataSources.containsKey(\"yamlProxyRule1\"));\n+        Map<String, DataSourceParameter> dataSourceParameterMap = schemaDataSources.get(\"yamlProxyRule1\");\n+        DataSourceParameter dataSourceParameter = dataSourceParameterMap.get(\"ds1\");\n+        assertNotNull(dataSourceParameter);\n+        assertThat(\"url1\", is(dataSourceParameter.getUrl()));\n+        assertThat(\"username1\", is(dataSourceParameter.getUsername()));\n+        assertThat(\"password1\", is(dataSourceParameter.getPassword()));\n+        assertThat(1L, is(dataSourceParameter.getConnectionTimeoutMilliseconds()));\n+        assertThat(2L, is(dataSourceParameter.getIdleTimeoutMilliseconds()));\n+        assertThat(3L, is(dataSourceParameter.getMaxLifetimeMilliseconds()));\n+        assertThat(4, is(dataSourceParameter.getMaxPoolSize()));\n+        assertThat(5, is(dataSourceParameter.getMinPoolSize()));\n+        assertThat(6L, is(dataSourceParameter.getMaintenanceIntervalMilliseconds()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f0080daec3e14d168e9d265d651cc0c65f09fa"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af15929665b473bbf44738d21351eddadacfc7e", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/6af15929665b473bbf44738d21351eddadacfc7e", "committedDate": "2020-08-08T12:38:04Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into test_for_issues_6561"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d1693158235ba34a1fdbdbeb4bd45cf8f2d2ecd", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/3d1693158235ba34a1fdbdbeb4bd45cf8f2d2ecd", "committedDate": "2020-08-08T12:57:44Z", "message": "Fix the order of actual value and expected value."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODAyODA0", "url": "https://github.com/apache/shardingsphere/pull/6672#pullrequestreview-463802804", "createdAt": "2020-08-08T13:21:10Z", "commit": {"oid": "3d1693158235ba34a1fdbdbeb4bd45cf8f2d2ecd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMToxMFrOG9zxLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMToxMFrOG9zxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDQ5NQ==", "bodyText": "The actual value and expected value's sequence is wrong", "url": "https://github.com/apache/shardingsphere/pull/6672#discussion_r467464495", "createdAt": "2020-08-08T13:21:10Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/yaml/swapper/YamlProxyConfigurationSwapperTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.config.yaml.swapper;\n+\n+import org.apache.shardingsphere.cluster.configuration.config.ClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.config.HeartbeatConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlClusterConfiguration;\n+import org.apache.shardingsphere.cluster.configuration.yaml.YamlHeartbeatConfiguration;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.auth.ProxyUser;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlAuthenticationConfiguration;\n+import org.apache.shardingsphere.infra.auth.yaml.config.YamlProxyUserConfiguration;\n+import org.apache.shardingsphere.infra.config.RuleConfiguration;\n+import org.apache.shardingsphere.infra.yaml.config.YamlRuleConfiguration;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.masterslave.api.config.MasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.masterslave.yaml.config.YamlMasterSlaveRuleConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration;\n+import org.apache.shardingsphere.metrics.configuration.yaml.YamlMetricsConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationCenterConfiguration;\n+import org.apache.shardingsphere.orchestration.core.common.yaml.config.YamlOrchestrationConfiguration;\n+import org.apache.shardingsphere.proxy.config.ProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.YamlProxyConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyRuleConfiguration;\n+import org.apache.shardingsphere.proxy.config.yaml.YamlProxyServerConfiguration;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.ArrayList;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class YamlProxyConfigurationSwapperTest {\n+\n+    @Test\n+    public void assertSwap() {\n+        YamlProxyConfiguration yamlProxyConfiguration = getYamlProxyConfiguration();\n+        ProxyConfiguration proxyConfiguration = new YamlProxyConfigurationSwapper().swap(yamlProxyConfiguration);\n+        assertAuthentication(proxyConfiguration);\n+        assertClusterConfiguration(proxyConfiguration);\n+        assertMetricsConfiguration(proxyConfiguration);\n+        assertProxyConfigurationProps(proxyConfiguration);\n+        assertSchemaDataSources(proxyConfiguration);\n+        assertSchemaRules(proxyConfiguration);\n+    }\n+\n+    private void assertSchemaDataSources(ProxyConfiguration proxyConfiguration) {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = proxyConfiguration.getSchemaDataSources();\n+        assertNotNull(schemaDataSources);\n+        assertThat(schemaDataSources.size(), is(1));\n+        assertTrue(schemaDataSources.containsKey(\"yamlProxyRule1\"));\n+        Map<String, DataSourceParameter> dataSourceParameterMap = schemaDataSources.get(\"yamlProxyRule1\");\n+        DataSourceParameter dataSourceParameter = dataSourceParameterMap.get(\"ds1\");\n+        assertNotNull(dataSourceParameter);\n+        assertThat(dataSourceParameter.getUrl(), is(\"url1\"));\n+        assertThat(dataSourceParameter.getUsername(), is(\"username1\"));\n+        assertThat(dataSourceParameter.getPassword(), is(\"password1\"));\n+        assertThat(dataSourceParameter.getConnectionTimeoutMilliseconds(), is(1L));\n+        assertThat(dataSourceParameter.getIdleTimeoutMilliseconds(), is(2L));\n+        assertThat(dataSourceParameter.getMaxLifetimeMilliseconds(), is(3L));\n+        assertThat(dataSourceParameter.getMaxPoolSize(), is(4));\n+        assertThat(dataSourceParameter.getMinPoolSize(), is(5));\n+        assertThat(dataSourceParameter.getMaintenanceIntervalMilliseconds(), is(6L));\n+        assertTrue(dataSourceParameter.isReadOnly());\n+    }\n+\n+    private void assertSchemaRules(ProxyConfiguration proxyConfiguration) {\n+        Map<String, Collection<RuleConfiguration>> schemaRules = proxyConfiguration.getSchemaRules();\n+        assertNotNull(schemaRules);\n+        assertThat(schemaRules.size(), is(1));\n+        Collection<RuleConfiguration> ruleConfigurationCollection = schemaRules.get(\"yamlProxyRule1\");\n+        assertNotNull(ruleConfigurationCollection);\n+        assertThat(ruleConfigurationCollection.size(), is(1));\n+        RuleConfiguration ruleConfiguration = ruleConfigurationCollection.iterator().next();\n+        assertNotNull(ruleConfiguration);\n+        assertTrue(ruleConfiguration instanceof MasterSlaveRuleConfiguration);\n+    }\n+\n+    private void assertProxyConfigurationProps(ProxyConfiguration proxyConfiguration) {\n+        Properties proxyConfigurationProps = proxyConfiguration.getProps();\n+        assertNotNull(proxyConfigurationProps);\n+        assertThat(proxyConfigurationProps.size(), is(1));\n+        assertThat(proxyConfigurationProps.getProperty(\"key4\"), is(\"value4\"));\n+    }\n+\n+    private void assertMetricsConfiguration(ProxyConfiguration proxyConfiguration) {\n+        MetricsConfiguration metricsConfiguration = proxyConfiguration.getMetrics();\n+        assertNotNull(metricsConfiguration);\n+        assertThat(metricsConfiguration.getMetricsName(), is(\"name1\"));\n+        assertThat(metricsConfiguration.getHost(), is(\"host1\"));\n+        assertThat(metricsConfiguration.getPort(), is(111));\n+        assertThat(metricsConfiguration.getAsync(), is(true));\n+        assertThat(metricsConfiguration.getEnable(), is(true));\n+        assertThat(4, is(metricsConfiguration.getThreadCount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1693158235ba34a1fdbdbeb4bd45cf8f2d2ecd"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b3ba4c85a65c98a4958cebd785c941d0e55a3b", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/91b3ba4c85a65c98a4958cebd785c941d0e55a3b", "committedDate": "2020-08-08T13:59:08Z", "message": "check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "269a53e2cff161b3c7dd8fccf65e8e005109e296", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/269a53e2cff161b3c7dd8fccf65e8e005109e296", "committedDate": "2020-08-08T14:06:57Z", "message": "Use assertTrue instead of assertThat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d84d721401c9b7cee0a12d2e4070f3ff888c20d", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/2d84d721401c9b7cee0a12d2e4070f3ff888c20d", "committedDate": "2020-08-08T14:23:24Z", "message": "Fix the order of actual value and expected value."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161c446f95ebb4905a1c4e06e9eb4655acf3279e", "author": {"user": {"login": "harvies", "name": "harvies"}}, "url": "https://github.com/apache/shardingsphere/commit/161c446f95ebb4905a1c4e06e9eb4655acf3279e", "committedDate": "2020-08-08T15:38:17Z", "message": "use InstanceOf instead of instanceof"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODEyNjg4", "url": "https://github.com/apache/shardingsphere/pull/6672#pullrequestreview-463812688", "createdAt": "2020-08-08T16:21:39Z", "commit": {"oid": "161c446f95ebb4905a1c4e06e9eb4655acf3279e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4767, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}