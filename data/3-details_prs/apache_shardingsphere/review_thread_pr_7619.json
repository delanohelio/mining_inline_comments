{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjg2MTQ0", "number": 7619, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMDowOTowMlrOEn0x5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMDowOTowMlrOEn0x5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTk0NjYzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMDowOTowMlrOHYmUCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMjoyODo0OFrOHYnEuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw==", "bodyText": "Mybe it is better to make assertions based on specific DB.How do you think?", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495555593", "createdAt": "2020-09-27T10:09:02Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NzY0MQ==", "bodyText": "Mybe it is better to make assertions based on specific DB.How do you think?\n\n@jingshanglu , yes, it's a very good idea, but I suggest we can do it in another PR, do you think it?", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495557641", "createdAt": "2020-09-27T10:30:47Z", "author": {"login": "dongzl"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw=="}, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1ODE5OA==", "bodyText": "@dongzl @tristaZero @strongduanmu    We should discuss aboult parser test framework,one:first determin db type and then assert; two:assert all segment include in all db in InsertStatementAssert.java,and then decide whether to assert or not according to DB type.What do you think?", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495558198", "createdAt": "2020-09-27T10:36:12Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw=="}, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2MjQyNQ==", "bodyText": "@jingshanglu @tristaZero @dongzl Now, the refactor task of Statement just splits different dialect statements, StatementContext and StatementAssert are not splitted. When Statement is used by StatemenContext and StatementAssert, different dialect statements are processed uniformly through the StatementHandler now.\nI was wondering if we need to split StatemenContext and StatementAssert, since StatementHandler seems to handle logic well already.", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495562425", "createdAt": "2020-09-27T11:22:19Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw=="}, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NTg4NQ==", "bodyText": "@jingshanglu @tristaZero @dongzl Now, the refactor task of Statement just splits different dialect statements, StatementContext and StatementAssert are not splitted. When Statement is used by StatemenContext and StatementAssert, different dialect statements are processed uniformly through the StatementHandler now.\nI was wondering if we need to split StatemenContext and StatementAssert, since StatementHandler seems to handle logic well already.\n\nyou mean the second way? decide whether to assert or not according to DB type in  specific function, like some segment  only contained by SQLServer.", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495565885", "createdAt": "2020-09-27T12:03:49Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw=="}, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2ODA1OQ==", "bodyText": "Hi @jingshanglu , @strongduanmu  I suggest we open a new issue to discuss this problem, This is a big code refactor job, we need discuss it with more people. :)", "url": "https://github.com/apache/shardingsphere/pull/7619#discussion_r495568059", "createdAt": "2020-09-27T12:28:48Z", "author": {"login": "dongzl"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/asserts/statement/dml/impl/InsertStatementAssert.java", "diffHunk": "@@ -59,6 +61,7 @@ public static void assertIs(final SQLCaseAssertContext assertContext, final Inse\n         assertInsertSelectClause(assertContext, actual, expected);\n         assertOnDuplicateKeyColumns(assertContext, actual, expected);\n         assertWithClause(assertContext, actual, expected);\n+        assertOutputClause(assertContext, actual, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1NTU5Mw=="}, "originalCommit": {"oid": "4bf9893b4a9b6c65342f13cc3edb347b9410783d"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 680, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}