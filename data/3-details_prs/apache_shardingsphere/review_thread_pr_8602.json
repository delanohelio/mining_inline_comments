{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTIxMzY0", "number": 8602, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNzoyMFrOFEzmmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxODoyN1rOFEzncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTg0MDg4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNzoyMFrOIFAO9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNzoyMFrOIFAO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzYyMA==", "bodyText": "If there is no @mock annotation, the @RunWith(MockitoJUnitRunner.class) is unnecessary", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117620", "createdAt": "2020-12-14T05:17:20Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6377f52e851cb843a686cedf1b854b3de2d4fbc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTg0MjE2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNzo1MVrOIFAPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNzo1MVrOIFAPpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzc5OQ==", "bodyText": "Return value should name as result", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117799", "createdAt": "2020-12-14T05:17:51Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FrontDatabaseProtocolTypeFactoryTest {\n+\n+    @Test(expected = ShardingSphereConfigurationException.class)\n+    public void assertGetDatabaseTypeFromMetaDataContextsThrowShardingSphereConfigurationException() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(Collections.emptyMap(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeInstanceOfMySQLDatabaseTypeFromMetaDataContextsSchemaName() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertTrue(configuredDatabaseType.isEmpty());\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"MySQL\"));\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeOfPostgreSQLDatabaseTypeFromMetaDataContextsProps() {\n+        Properties properties = new Properties();\n+        properties.setProperty(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE.getKey(), \"PostgreSQL\");\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(properties));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertThat(configuredDatabaseType, is(\"PostgreSQL\"));\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"PostgreSQL\"));\n+        assertThat(standardMetaDataContexts.getMetaData(\"mysql\").getResource().getDatabaseType(), instanceOf(MySQLDatabaseType.class));\n+    }\n+\n+    @SneakyThrows\n+    private void setMetaDataContexts(final StandardMetaDataContexts standardMetaDataContexts) {\n+        Field field = ProxyContext.getInstance().getClass().getDeclaredField(\"metaDataContexts\");\n+        field.setAccessible(true);\n+        field.set(ProxyContext.getInstance(), standardMetaDataContexts);\n+    }\n+\n+    private Map<String, ShardingSphereMetaData> getShardingSphereMetaData() {\n+        ShardingSphereResource shardingSphereResource = mock(ShardingSphereResource.class);\n+        when(shardingSphereResource.getDatabaseType()).thenReturn(new MySQLDatabaseType());\n+        ShardingSphereMetaData shardingSphereMetaData = mock(ShardingSphereMetaData.class, RETURNS_DEEP_STUBS);\n+        when(shardingSphereMetaData.getResource()).thenReturn(shardingSphereResource);\n+        Map<String, ShardingSphereMetaData> metaDataMap = Collections.singletonMap(\"mysql\", shardingSphereMetaData);\n+        return metaDataMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6377f52e851cb843a686cedf1b854b3de2d4fbc"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTg0MzA3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxODoyN1rOIFAQNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxODoyN1rOIFAQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzk0MA==", "bodyText": "Please add exception that for @SneakyThrows, please just make it narrow.", "url": "https://github.com/apache/shardingsphere/pull/8602#discussion_r542117940", "createdAt": "2020-12-14T05:18:27Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/protocol/FrontDatabaseProtocolTypeFactoryTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend.protocol;\n+\n+import lombok.SneakyThrows;\n+import org.apache.shardingsphere.infra.auth.Authentication;\n+import org.apache.shardingsphere.infra.config.exception.ShardingSphereConfigurationException;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n+import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n+import org.apache.shardingsphere.infra.context.metadata.impl.StandardMetaDataContexts;\n+import org.apache.shardingsphere.infra.database.type.DatabaseType;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.executor.kernel.ExecutorEngine;\n+import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n+import org.apache.shardingsphere.infra.metadata.resource.ShardingSphereResource;\n+import org.apache.shardingsphere.proxy.backend.context.ProxyContext;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FrontDatabaseProtocolTypeFactoryTest {\n+\n+    @Test(expected = ShardingSphereConfigurationException.class)\n+    public void assertGetDatabaseTypeFromMetaDataContextsThrowShardingSphereConfigurationException() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(Collections.emptyMap(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeInstanceOfMySQLDatabaseTypeFromMetaDataContextsSchemaName() {\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(new Properties()));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertTrue(configuredDatabaseType.isEmpty());\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"MySQL\"));\n+    }\n+\n+    @Test\n+    public void assertGetDatabaseTypeOfPostgreSQLDatabaseTypeFromMetaDataContextsProps() {\n+        Properties properties = new Properties();\n+        properties.setProperty(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE.getKey(), \"PostgreSQL\");\n+        StandardMetaDataContexts standardMetaDataContexts = new StandardMetaDataContexts(getShardingSphereMetaData(), mock(ExecutorEngine.class), mock(Authentication.class),\n+                new ConfigurationProperties(properties));\n+        setMetaDataContexts(standardMetaDataContexts);\n+        assertTrue(!standardMetaDataContexts.getMetaDataMap().isEmpty());\n+        String configuredDatabaseType = standardMetaDataContexts.getProps().getValue(ConfigurationPropertyKey.PROXY_FRONTEND_DATABASE_PROTOCOL_TYPE);\n+        assertThat(configuredDatabaseType, is(\"PostgreSQL\"));\n+        assertTrue(standardMetaDataContexts.getAllSchemaNames().contains(\"mysql\"));\n+        DatabaseType databaseType = FrontDatabaseProtocolTypeFactory.getDatabaseType();\n+        assertThat(databaseType, instanceOf(DatabaseType.class));\n+        assertThat(databaseType.getName(), is(\"PostgreSQL\"));\n+        assertThat(standardMetaDataContexts.getMetaData(\"mysql\").getResource().getDatabaseType(), instanceOf(MySQLDatabaseType.class));\n+    }\n+\n+    @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6377f52e851cb843a686cedf1b854b3de2d4fbc"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}