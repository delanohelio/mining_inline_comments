{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNjIwMjUx", "number": 7388, "title": "Add test case for ResourceLock", "bodyText": "Fixes #7379\nChanges proposed in this pull request:\n\nadd test case for ResourceLock", "createdAt": "2020-09-10T10:00:58Z", "url": "https://github.com/apache/shardingsphere/pull/7388", "merged": true, "mergeCommit": {"oid": "b6fe74c46b7f987d6c71d2113f45ed76da6613e4"}, "closed": true, "closedAt": "2020-09-17T16:57:21Z", "author": {"login": "xbkaishui"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHd05oAH2gAyNDgzNjIwMjUxOjAwZDZlMjQwZWEwYWQ5MjhmZGFhOTU0OGM5MWRkMDVhZDU3MjhjMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJz-G4gFqTQ5MDgwNDQ5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00d6e240ea0ad928fdaa9548c91dd05ad5728c36", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/00d6e240ea0ad928fdaa9548c91dd05ad5728c36", "committedDate": "2020-09-10T09:59:44Z", "message": "Add test case for ResourceLock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDYzNTkw", "url": "https://github.com/apache/shardingsphere/pull/7388#pullrequestreview-486063590", "createdAt": "2020-09-10T15:36:10Z", "commit": {"oid": "00d6e240ea0ad928fdaa9548c91dd05ad5728c36"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed1e33d48bb780e0ff628b02a4c378de2b0fe3a0", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/ed1e33d48bb780e0ff628b02a4c378de2b0fe3a0", "committedDate": "2020-09-11T03:23:34Z", "message": "add mock real lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2960fc30428a51d04e95306b8640827e8ddc65a", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/a2960fc30428a51d04e95306b8640827e8ddc65a", "committedDate": "2020-09-11T04:03:19Z", "message": "Merge branch 'master' into Test-Resource-Lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d29e732e7b90bf2e2127a03a9d2b86068e285d6c", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/d29e732e7b90bf2e2127a03a9d2b86068e285d6c", "committedDate": "2020-09-11T04:05:46Z", "message": "adjust method name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzAyNzY5", "url": "https://github.com/apache/shardingsphere/pull/7388#pullrequestreview-486702769", "createdAt": "2020-09-11T10:49:40Z", "commit": {"oid": "d29e732e7b90bf2e2127a03a9d2b86068e285d6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/9deb813edfba0b35feb58f421f7966e7815b929d", "committedDate": "2020-09-16T09:51:14Z", "message": "change to normal multi thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODE0MTQ2", "url": "https://github.com/apache/shardingsphere/pull/7388#pullrequestreview-489814146", "createdAt": "2020-09-16T16:48:02Z", "commit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODowM1rOHS5nnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0OToyNVrOHS5quQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDQ0NQ==", "bodyText": "Please add final if class is not design for extension", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580445", "createdAt": "2020-09-16T16:48:03Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU5Mw==", "bodyText": "Please use assertThat instead of assertEquals", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580593", "createdAt": "2020-09-16T16:48:19Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoNotify() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+                resourceLock.doNotify();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDg3MQ==", "bodyText": "Please do not use SneakyThrows, just throw from method signature", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489580871", "createdAt": "2020-09-16T16:48:47Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MTI0MQ==", "bodyText": "Please use assertThat instead of assertNotEquals", "url": "https://github.com/apache/shardingsphere/pull/7388#discussion_r489581241", "createdAt": "2020-09-16T16:49:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/connection/ResourceLockTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.communication.jdbc.connection;\n+\n+import lombok.SneakyThrows;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class ResourceLockTest {\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwait() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await();\n+        assertEquals(numberOfThreads, counter.get());\n+    }\n+    \n+    @SneakyThrows(value = InterruptedException.class)\n+    @Test\n+    public void assertDoAwaitThrowsException() {\n+        int numberOfThreads = 10;\n+        ResourceLock resourceLock = new ResourceLock();\n+        ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n+        CountDownLatch latch = new CountDownLatch(numberOfThreads);\n+        AtomicInteger counter = new AtomicInteger();\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            service.submit(() -> {\n+                resourceLock.doAwait();\n+                counter.incrementAndGet();\n+                latch.countDown();\n+            });\n+        }\n+        latch.await(100, TimeUnit.MILLISECONDS);\n+        service.shutdownNow();\n+        assertNotEquals(numberOfThreads, counter.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb813edfba0b35feb58f421f7966e7815b929d"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12519942b13f1fb14f49bb8168d91d2448bcd7f5", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/12519942b13f1fb14f49bb8168d91d2448bcd7f5", "committedDate": "2020-09-17T03:01:39Z", "message": "change as suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ec166672b5a834e891ee0b02face1017d0800a", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/47ec166672b5a834e891ee0b02face1017d0800a", "committedDate": "2020-09-17T03:20:33Z", "message": "remote SneakyThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODA0NDk3", "url": "https://github.com/apache/shardingsphere/pull/7388#pullrequestreview-490804497", "createdAt": "2020-09-17T16:55:33Z", "commit": {"oid": "47ec166672b5a834e891ee0b02face1017d0800a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4082, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}