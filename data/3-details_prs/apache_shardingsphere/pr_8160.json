{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDA5NzM4", "number": 8160, "title": "Fix problem about delete multi table , select into and select lock statement.", "bodyText": "Fixes #7978\n\nFix parse problem in delete multi table statement\n\nAdded missing logic for selectWithInto when visit select.\nSupported table assert for DeleteStatementTestCase\nAdded test cases for select-into statements; case select_into_out_file_with_fields_and_escaped and\nselect_into_with_lock_before_into are supported in MySQL 8.0 but not in MySQL 5.7.\n\n\nFix parse problem in  select into statement\n\nTable names should split with COMMA_ (',') in multipleTablesClause.\nAdded test cases for delete multi table statements.\n\n\nSupport for xxx of table_xxx for select lock statement in MySQL\n\nFix definition of lockClause\nSupported lock assert for SelectStatementTestCase, add test cases for select lock statement\nFor table rewriting, change definition of LockSegment, add extractTablesFromLock in TableExtractor", "createdAt": "2020-11-14T13:57:26Z", "url": "https://github.com/apache/shardingsphere/pull/8160", "merged": true, "mergeCommit": {"oid": "87f9a5ce9f3878483b110811b5f24b0c67fe0dd9"}, "closed": true, "closedAt": "2020-11-18T01:45:32Z", "author": {"login": "lwtdev"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcdS0ZgBqjM5OTY1MDU0MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddkGpggFqTUzMjk1MjAyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f52e14e56257d26cddf1b0f5b6e59aac0bdec84a", "author": {"user": null}, "url": "https://github.com/apache/shardingsphere/commit/f52e14e56257d26cddf1b0f5b6e59aac0bdec84a", "committedDate": "2020-11-14T13:34:29Z", "message": "Support table assert for DeleteStatementTestCase"}, "afterCommit": {"oid": "c5281999f539d8de7f77a34e55426d48099929b2", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/c5281999f539d8de7f77a34e55426d48099929b2", "committedDate": "2020-11-14T14:57:50Z", "message": "Support table assert for DeleteStatementTestCase (#7978)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db2e8170e5dd69825fa78b7e8e7e136a277d8917", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/db2e8170e5dd69825fa78b7e8e7e136a277d8917", "committedDate": "2020-11-16T12:57:08Z", "message": "Fix parse problem in delete multi table statement and select into statement (#7978)\n  * Added missing logic for selectWithInto when visit select.\n  * Added test cases for select-into statements; case 'select_into_out_file_with_fields_and_escaped'\n    and 'select_into_with_lock_before_into' are supported in MySQL 8.0 but not in MySQL 5.7.\n  * Table names should split with COMMA_ (',') in multipleTablesClause.\n  * Added test cases for delete multi table statements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d161899e774e0d4a200289ff7c113c93b080d7", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/30d161899e774e0d4a200289ff7c113c93b080d7", "committedDate": "2020-11-16T13:05:38Z", "message": "Replace multipleTableNames with tableAliasRefList (#7978)\n  * Use name tableAliasRefList like MySQL source code do, and delete unused multipleTableNames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79aaa1779a02c29d84fd62ac3c365b11255040cf", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/79aaa1779a02c29d84fd62ac3c365b11255040cf", "committedDate": "2020-11-16T13:18:44Z", "message": "Support of table for select lock statement in MySQL (#7978)\n  * Fix definition of lockClause\n  * Add test cases for select lock statement\n  * Add assertLockClause for SelectStatementTestCase\n  * For table rewriting, change definition of LockSegment and add extractTablesFromLock in TableExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d20e58619a6085c80f4dccdd1e4359d879414da8", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/d20e58619a6085c80f4dccdd1e4359d879414da8", "committedDate": "2020-11-16T13:18:52Z", "message": "Support table assert for DeleteStatementTestCase (#7978)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5281999f539d8de7f77a34e55426d48099929b2", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/c5281999f539d8de7f77a34e55426d48099929b2", "committedDate": "2020-11-14T14:57:50Z", "message": "Support table assert for DeleteStatementTestCase (#7978)"}, "afterCommit": {"oid": "d20e58619a6085c80f4dccdd1e4359d879414da8", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/d20e58619a6085c80f4dccdd1e4359d879414da8", "committedDate": "2020-11-16T13:18:52Z", "message": "Support table assert for DeleteStatementTestCase (#7978)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/f0fa6c23ddb789fa34097773b3b6744a6b0102a8", "committedDate": "2020-11-16T16:32:55Z", "message": "Add missing test case for Oracle and PostgreSQL. And fix problem when parsing select for update statement in Oracle. (#7978)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDU5OTg0", "url": "https://github.com/apache/shardingsphere/pull/8160#pullrequestreview-532059984", "createdAt": "2020-11-17T06:45:33Z", "commit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjo0NTozM1rOH0mYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMToyNFrOH0mvCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw==", "bodyText": "Delete extra blank lines.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524916917", "createdAt": "2020-11-17T06:45:33Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.extractor;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.LockSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLSelectStatement;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class TableExtractorTest {\n+\n+    private TableExtractor tableExtractor;\n+\n+    @Before\n+    public void init() {\n+        tableExtractor = new TableExtractor();\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithEmptyValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+        assertTrue(tableExtractor.getRewriteTables().isEmpty());\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        LockSegment lockSegment = new LockSegment(108, 154);\n+        selectStatement.setLock(lockSegment);\n+        List<SimpleTableSegment> tables = new LinkedList<>();\n+        lockSegment.setForTables(tables);\n+        tables.add(new SimpleTableSegment(122, 128, new IdentifierValue(\"t_order\")));\n+        tables.add(new SimpleTableSegment(143, 154, new IdentifierValue(\"t_order_item\")));\n+\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+\n+        assertNotNull(tableExtractor.getRewriteTables());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjYzMg==", "bodyText": "Delete extra blank lines.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524922632", "createdAt": "2020-11-17T07:01:24Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/jaxb/cases/domain/segment/impl/lock/ExpectedLockClause.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.lock;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.AbstractExpectedSQLSegment;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.table.ExpectedSimpleTable;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Expected lock clause.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedLockClause extends AbstractExpectedSQLSegment {\n+\n+    @XmlElement(name = \"table\")\n+    private final List<ExpectedSimpleTable> tables = new LinkedList<>();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1f9903c55fe8654cc997d358dc854d3c322d2b", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/5e1f9903c55fe8654cc997d358dc854d3c322d2b", "committedDate": "2020-11-17T08:25:55Z", "message": "Format code, remove extra black lines. (#7978)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c1174b08b9efd3765b0bd6f6cb71e9887e4989", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/59c1174b08b9efd3765b0bd6f6cb71e9887e4989", "committedDate": "2020-11-17T08:42:03Z", "message": "Format code, add new line at end of file."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDE5MzEw", "url": "https://github.com/apache/shardingsphere/pull/8160#pullrequestreview-532019310", "createdAt": "2020-11-17T04:48:59Z", "commit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDo0ODo1OVrOH0kRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxOTo0NlrOH0kw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MjMxOA==", "bodyText": "Why delete multipleTableNames  rule? Useless?", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524882318", "createdAt": "2020-11-17T04:48:59Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DMLStatement.g4", "diffHunk": "@@ -108,10 +108,6 @@ multipleTablesClause\n     : tableAliasRefList FROM tableReferences | FROM tableAliasRefList USING tableReferences\n     ;\n \n-multipleTableNames", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NzU1NQ==", "bodyText": "Please use the result for the return variable name.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524887555", "createdAt": "2020-11-17T05:09:13Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ==", "bodyText": "Maybe it is better to initialize the collection in advance? Like this:\nprivate final List< SimpleTableSegment > tables = new LinkedList<>();\nWhat do you think? \ud83d\ude00", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524889769", "createdAt": "2020-11-17T05:17:30Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg5MDM0Ng==", "bodyText": "The intermediate variable forTables is a bit redundant, how about this?\nlockSegment.getForTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524890346", "createdAt": "2020-11-17T05:19:46Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        List<SimpleTableSegment> forTables = new LinkedList<>();\n+        for (MySQLStatementParser.LockClauseContext each : ctx.lockClause()) {\n+            if (null != each.tableLockingList()) {\n+                forTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c948c97b6403596fcd8301ba9b3ceec5c83048f4", "author": {"user": {"login": "lwtdev", "name": "Albert Li"}}, "url": "https://github.com/apache/shardingsphere/commit/c948c97b6403596fcd8301ba9b3ceec5c83048f4", "committedDate": "2020-11-17T13:33:02Z", "message": "Rename ofTables to tables in LockSegment, and initialize it directly in the class."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjA5NzUz", "url": "https://github.com/apache/shardingsphere/pull/8160#pullrequestreview-532609753", "createdAt": "2020-11-17T17:21:20Z", "commit": {"oid": "c948c97b6403596fcd8301ba9b3ceec5c83048f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTUyMDI2", "url": "https://github.com/apache/shardingsphere/pull/8160#pullrequestreview-532952026", "createdAt": "2020-11-18T01:44:53Z", "commit": {"oid": "c948c97b6403596fcd8301ba9b3ceec5c83048f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4346, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}