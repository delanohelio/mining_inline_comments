{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDk5OTMx", "number": 8766, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNDo1MTo0MlrOFJGf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNDo1MTo0MlrOFJGf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDg3OTg0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLTCLStatementSQLVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNDo1MTo0MlrOILYIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNTo0OTozM1rOILYmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgwMDcxNA==", "bodyText": "Please do not change original indent", "url": "https://github.com/apache/shardingsphere/pull/8766#discussion_r548800714", "createdAt": "2020-12-25T04:51:42Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLTCLStatementSQLVisitor.java", "diffHunk": "@@ -55,40 +53,30 @@ public MySQLTCLStatementSQLVisitor(final Properties props) {\n     @Override\n     public ASTNode visitSetTransaction(final SetTransactionContext ctx) {\n         MySQLSetTransactionStatement result = new MySQLSetTransactionStatement();\n-        if (null != ctx.scope()) {\n-            ScopeContext scopeContext = ctx.scope();\n-            if (null != scopeContext.GLOBAL()) {\n-                result.setScope(scopeContext.GLOBAL().getText());\n-            } else if (null != scopeContext.SESSION()) {\n-                result.setScope(scopeContext.SESSION().getText());\n-            }\n+        if (null != ctx.optionType()) {\n+            result.setScope(ctx.optionType().getText());\n         }\n-        if (null != ctx.transactionCharacteristic()) {\n-            for (TransactionCharacteristicContext each : ctx.transactionCharacteristic()) {\n-                if (null != each.level()) {\n-                    result.setIsolationLevel(each.level().getText());\n-                }\n-                if (null != each.accessMode()) {\n-                    result.setAccessMode(each.accessMode().getText());\n-                }\n-            }\n+        if (null != ctx.transactionCharacteristics().isolationLevel()) {\n+            result.setIsolationLevel(ctx.transactionCharacteristics().isolationLevel().isolationTypes().getText());\n+        }\n+        if (null != ctx.transactionCharacteristics().transactionAccessMode()) {\n+            result.setAccessMode(ctx.transactionCharacteristics().transactionAccessMode().getText());\n         }\n         return new MySQLSetTransactionStatement();\n     }\n     \n     @Override\n     public ASTNode visitSetAutoCommit(final SetAutoCommitContext ctx) {\n         MySQLSetAutoCommitStatement result = new MySQLSetAutoCommitStatement();\n-        result.setAutoCommit(((AutoCommitSegment) visit(ctx.autoCommitValue())).isAutoCommit());\n+        result.setAutoCommit(generateAutoCommitSegment(ctx.autoCommitValue).isAutoCommit());\n         return result;\n     }\n-    \n-    @Override\n-    public ASTNode visitAutoCommitValue(final AutoCommitValueContext ctx) {\n+\n+    private AutoCommitSegment generateAutoCommitSegment(final Token ctx) {\n         boolean autoCommit = \"1\".equals(ctx.getText()) || \"ON\".equals(ctx.getText());\n-        return new AutoCommitSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), autoCommit);\n+        return new AutoCommitSegment(ctx.getStartIndex(), ctx.getStopIndex(), autoCommit);\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ec76db701113478c9893f6ad1431756e71e62d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgwODIwNQ==", "bodyText": "OK", "url": "https://github.com/apache/shardingsphere/pull/8766#discussion_r548808205", "createdAt": "2020-12-25T05:49:33Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLTCLStatementSQLVisitor.java", "diffHunk": "@@ -55,40 +53,30 @@ public MySQLTCLStatementSQLVisitor(final Properties props) {\n     @Override\n     public ASTNode visitSetTransaction(final SetTransactionContext ctx) {\n         MySQLSetTransactionStatement result = new MySQLSetTransactionStatement();\n-        if (null != ctx.scope()) {\n-            ScopeContext scopeContext = ctx.scope();\n-            if (null != scopeContext.GLOBAL()) {\n-                result.setScope(scopeContext.GLOBAL().getText());\n-            } else if (null != scopeContext.SESSION()) {\n-                result.setScope(scopeContext.SESSION().getText());\n-            }\n+        if (null != ctx.optionType()) {\n+            result.setScope(ctx.optionType().getText());\n         }\n-        if (null != ctx.transactionCharacteristic()) {\n-            for (TransactionCharacteristicContext each : ctx.transactionCharacteristic()) {\n-                if (null != each.level()) {\n-                    result.setIsolationLevel(each.level().getText());\n-                }\n-                if (null != each.accessMode()) {\n-                    result.setAccessMode(each.accessMode().getText());\n-                }\n-            }\n+        if (null != ctx.transactionCharacteristics().isolationLevel()) {\n+            result.setIsolationLevel(ctx.transactionCharacteristics().isolationLevel().isolationTypes().getText());\n+        }\n+        if (null != ctx.transactionCharacteristics().transactionAccessMode()) {\n+            result.setAccessMode(ctx.transactionCharacteristics().transactionAccessMode().getText());\n         }\n         return new MySQLSetTransactionStatement();\n     }\n     \n     @Override\n     public ASTNode visitSetAutoCommit(final SetAutoCommitContext ctx) {\n         MySQLSetAutoCommitStatement result = new MySQLSetAutoCommitStatement();\n-        result.setAutoCommit(((AutoCommitSegment) visit(ctx.autoCommitValue())).isAutoCommit());\n+        result.setAutoCommit(generateAutoCommitSegment(ctx.autoCommitValue).isAutoCommit());\n         return result;\n     }\n-    \n-    @Override\n-    public ASTNode visitAutoCommitValue(final AutoCommitValueContext ctx) {\n+\n+    private AutoCommitSegment generateAutoCommitSegment(final Token ctx) {\n         boolean autoCommit = \"1\".equals(ctx.getText()) || \"ON\".equals(ctx.getText());\n-        return new AutoCommitSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex(), autoCommit);\n+        return new AutoCommitSegment(ctx.getStartIndex(), ctx.getStopIndex(), autoCommit);\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgwMDcxNA=="}, "originalCommit": {"oid": "06ec76db701113478c9893f6ad1431756e71e62d"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 470, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}