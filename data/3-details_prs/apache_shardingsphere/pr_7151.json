{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODg4NjEx", "number": 7151, "title": "Add more test of  DatabaseProtocolFrontendEngineFactory", "bodyText": "Fixes #7012.\nChanges proposed in this pull request:\n\nAdd test case when newInstance is not null", "createdAt": "2020-08-30T09:45:50Z", "url": "https://github.com/apache/shardingsphere/pull/7151", "merged": true, "mergeCommit": {"oid": "96c8e11f386386308c97178336658d5aa44800ae"}, "closed": true, "closedAt": "2020-08-31T15:48:32Z", "author": {"login": "xbkaishui"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdD6-PSgH2gAyNDc1ODg4NjExOjExNTFhMTA5ZWUyYzYwMTllYTRjNjgwOTExYzE5YjFmNGU2MWQ4MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEU0CEAFqTQ3ODczMjg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1151a109ee2c6019ea4c680911c19b1f4e61d808", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/1151a109ee2c6019ea4c680911c19b1f4e61d808", "committedDate": "2020-08-30T09:41:29Z", "message": "add more test with NewInstance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTkzNzM2", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478193736", "createdAt": "2020-08-30T11:14:29Z", "commit": {"oid": "1151a109ee2c6019ea4c680911c19b1f4e61d808"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/88990acc3c85d9c871429de03d4571a22c7a7f53", "committedDate": "2020-08-30T11:42:48Z", "message": "fix test execute bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjExNjY5", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478211669", "createdAt": "2020-08-30T15:15:55Z", "commit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNTo1NVrOHJjkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNTo1NVrOHJjkXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MTk4Mg==", "bodyText": "Why use @RunWith(MockitoJUnitRunner.class) if not filed use @mock?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479781982", "createdAt": "2020-08-30T15:15:55Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjExNzM4", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478211738", "createdAt": "2020-08-30T15:16:50Z", "commit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxNjo1MFrOHJjkug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNToxODoxNFrOHJjlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjA3NA==", "bodyText": "It is better to rename Mysql to MySQL", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782074", "createdAt": "2020-08-30T15:16:50Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjEyMQ==", "bodyText": "Please use static import for Assert.assertNotNull", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782121", "createdAt": "2020-08-30T15:17:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,35 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+import java.lang.reflect.Method;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n+    @Before\n+    public void init() throws Exception {\n+        Method method = ShardingSphereServiceLoader.class.getDeclaredMethod(\"registerServiceClass\", Class.class, Object.class);\n+        method.setAccessible(true);\n+        method.invoke(null, DatabaseProtocolFrontendEngine.class, new MockDatabaseProtocolFrontendEngine());\n+    }\n+    \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMysql() {\n+        DatabaseProtocolFrontendEngine databaseProtocolFrontendEngine = DatabaseProtocolFrontendEngineFactory.newInstance(new MySQLDatabaseType());\n+        Assert.assertNotNull(databaseProtocolFrontendEngine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ==", "bodyText": "Do we really need this class? Can we use mock to instead this one?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479782209", "createdAt": "2020-08-30T15:18:14Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a74560cc991743df7952459142821580ea76872", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/0a74560cc991743df7952459142821580ea76872", "committedDate": "2020-08-30T15:32:12Z", "message": " review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed", "committedDate": "2020-08-31T10:46:26Z", "message": "add mock frontend engine as spi for test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Mzk0OTU2", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478394956", "createdAt": "2020-08-31T07:52:09Z", "commit": {"oid": "0a74560cc991743df7952459142821580ea76872"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1MjowOVrOHJuV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNTo0NlrOHJ7Dgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODQ4Nw==", "bodyText": "It is unnecessary update mockito now.\nWe can leave MockDatabaseProtocolFrontendEngine there.\nBut I find the problem is the class MockDatabaseProtocolFrontendEngine is not load via SPI, is it?", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r479958487", "createdAt": "2020-08-31T07:52:09Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4MjIwOQ=="}, "originalCommit": {"oid": "88990acc3c85d9c871429de03d4571a22c7a7f53"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NTYyMw==", "bodyText": "It is better to define a new type here, FIXTURE maybe a good name than MySQL", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480165623", "createdAt": "2020-08-31T14:23:59Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {\n+    \n+    public MockDatabaseProtocolFrontendEngine() {\n+    }\n+    \n+    @Override\n+    public String getDatabaseType() {\n+        return new MySQLDatabaseType().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjE2MA==", "bodyText": "The class MockDatabaseProtocolFrontendEngine is not really mocked. DatabaseProtocolFrontendEngineFixture may better.", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166160", "createdAt": "2020-08-31T14:24:50Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/MockDatabaseProtocolFrontendEngine.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.frontend;\n+\n+import org.apache.shardingsphere.db.protocol.codec.DatabasePacketCodecEngine;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;\n+import org.apache.shardingsphere.proxy.frontend.context.FrontendContext;\n+import org.apache.shardingsphere.proxy.frontend.engine.AuthenticationEngine;\n+import org.apache.shardingsphere.proxy.frontend.engine.CommandExecuteEngine;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n+\n+public class MockDatabaseProtocolFrontendEngine implements DatabaseProtocolFrontendEngine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2Njc4Ng==", "bodyText": "The name of assertNewInstanceMySQL is inaccurate, please consider change it.", "url": "https://github.com/apache/shardingsphere/pull/7151#discussion_r480166786", "createdAt": "2020-08-31T14:25:46Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-core/src/test/java/org/apache/shardingsphere/proxy/frontend/DatabaseProtocolFrontendEngineFactoryTest.java", "diffHunk": "@@ -18,12 +18,22 @@\n package org.apache.shardingsphere.proxy.frontend;\n \n import org.apache.shardingsphere.infra.database.type.DatabaseTypes;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.proxy.frontend.spi.DatabaseProtocolFrontendEngine;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertNotNull;\n+\n public final class DatabaseProtocolFrontendEngineFactoryTest {\n     \n     @Test(expected = UnsupportedOperationException.class)\n     public void assertNewInstanceWhenUnsupported() {\n         DatabaseProtocolFrontendEngineFactory.newInstance(DatabaseTypes.getActualDatabaseType(\"Oracle\"));\n     }\n+    \n+    @Test\n+    public void assertNewInstanceMySQL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee6ad5c6dcc1f6a17712432c254dc0af9d1ed"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5ef05ec6902dd33b708b513b182cd7d52ccf1b3", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/f5ef05ec6902dd33b708b513b182cd7d52ccf1b3", "committedDate": "2020-08-31T14:49:03Z", "message": "add FixtureDatabase Type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d141edefd017650b8ac36a046c0fa822a6ea0aa4", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/d141edefd017650b8ac36a046c0fa822a6ea0aa4", "committedDate": "2020-08-31T15:08:30Z", "message": "Add final class, add instanceOf assert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzMyMTcw", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478732170", "createdAt": "2020-08-31T15:47:00Z", "commit": {"oid": "d141edefd017650b8ac36a046c0fa822a6ea0aa4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzMyODQ0", "url": "https://github.com/apache/shardingsphere/pull/7151#pullrequestreview-478732844", "createdAt": "2020-08-31T15:47:52Z", "commit": {"oid": "d141edefd017650b8ac36a046c0fa822a6ea0aa4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4678, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}