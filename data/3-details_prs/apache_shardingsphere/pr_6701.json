{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0OTk2ODE5", "number": 6701, "title": "add ProxyDataSourceContextTest", "bodyText": "Fixes #6568.", "createdAt": "2020-08-08T07:10:43Z", "url": "https://github.com/apache/shardingsphere/pull/6701", "merged": true, "mergeCommit": {"oid": "80066a56dfd0a6d07bb25980eb5a442d78d4da18"}, "closed": true, "closedAt": "2020-08-08T15:59:20Z", "author": {"login": "cowcomic"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8zkq4gH2gAyNDY0OTk2ODE5OmU3NjFjOTQ1NWM0N2M2N2E4ODA5ZDI0MDMxYzRjZjI1ZWFhNjYyNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc87LaQAFqTQ2MzgxMTQwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e761c9455c47c67a8809d24031c4cf25eaa66277", "author": {"user": {"login": "cowcomic", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/e761c9455c47c67a8809d24031c4cf25eaa66277", "committedDate": "2020-08-08T07:06:45Z", "message": "add ProxyDataSourceContextTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a220cf5632db4c4e77b06b68c50e8a9b9d2c35", "author": {"user": {"login": "cowcomic", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/71a220cf5632db4c4e77b06b68c50e8a9b9d2c35", "committedDate": "2020-08-08T08:16:12Z", "message": "add license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzkxNTYy", "url": "https://github.com/apache/shardingsphere/pull/6701#pullrequestreview-463791562", "createdAt": "2020-08-08T09:29:01Z", "commit": {"oid": "71a220cf5632db4c4e77b06b68c50e8a9b9d2c35"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOToyOTowMlrOG9xDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwOToyOTowMlrOG9xDFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQxOTkyNg==", "bodyText": "Please do not add other dependency if unnecessary, the reason are:\n\nIt is better to use one mock framework\nIf we need add more mock framework, please add the notice and licenses too", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467419926", "createdAt": "2020-08-08T09:29:02Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/pom.xml", "diffHunk": "@@ -132,5 +132,18 @@\n             <artifactId>postgresql</artifactId>\n             <scope>runtime</scope>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-junit4</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito2</artifactId>\n+            <version>1.7.4</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a220cf5632db4c4e77b06b68c50e8a9b9d2c35"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9", "author": {"user": {"login": "cowcomic", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/c59ce458123a84092da2f24ac1637f7bef3699d9", "committedDate": "2020-08-08T11:28:55Z", "message": "remove powermock dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODAyOTE2", "url": "https://github.com/apache/shardingsphere/pull/6701#pullrequestreview-463802916", "createdAt": "2020-08-08T13:23:22Z", "commit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyMzoyMlrOG9zx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzoyNTozN1rOG9zypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY2NA==", "bodyText": "Please remove useless comment.\nInclude Javadoc, todo and fixme only in the comments.\nFYI: https://shardingsphere.apache.org/community/en/contribute/code-conduct/", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464664", "createdAt": "2020-08-08T13:23:22Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDY3NQ==", "bodyText": "Please use static import for Mockito", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464675", "createdAt": "2020-08-08T13:23:39Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDcxOA==", "bodyText": "Please use assertThat and InstanceOf to assert", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464718", "createdAt": "2020-08-08T13:24:10Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));\n+        build(jdbcRawBackendDataSourceFactory);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    @Test\n+    public void assertRightMysqlSchemaDataSources() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenReturn(new HikariDataSource());\n+        ProxyDataSourceContext proxyDataSourceContext = build(jdbcRawBackendDataSourceFactory);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDc1Nw==", "bodyText": "Please remove useless blank line", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464757", "createdAt": "2020-08-08T13:24:25Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertThrowByBuild() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenThrow(new ShardingSphereException(\"\"));\n+        build(jdbcRawBackendDataSourceFactory);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    @Test\n+    public void assertRightMysqlSchemaDataSources() throws Exception {\n+        // schameName -- dataSourceName -- dataSource\n+        JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory = Mockito.mock(JDBCRawBackendDataSourceFactory.class);\n+        Mockito.when(jdbcRawBackendDataSourceFactory.build(Mockito.anyString(), Mockito.any())).thenReturn(new HikariDataSource());\n+        ProxyDataSourceContext proxyDataSourceContext = build(jdbcRawBackendDataSourceFactory);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().size() == 1);\n+        Mockito.reset(jdbcRawBackendDataSourceFactory);\n+    }\n+\n+    private ProxyDataSourceContext build(final JDBCRawBackendDataSourceFactory jdbcRawBackendDataSourceFactory) throws Exception {\n+        JDBCRawBackendDataSourceFactory jdbcBackendDataSourceFactory = (JDBCRawBackendDataSourceFactory) JDBCRawBackendDataSourceFactory.getInstance();\n+        Class<?> jdbcBackendDataSourceFactoryClass = jdbcBackendDataSourceFactory.getClass();\n+        Field field = jdbcBackendDataSourceFactoryClass.getDeclaredField(\"INSTANCE\");\n+        Field modifiers = field.getClass().getDeclaredField(\"modifiers\");\n+        modifiers.setAccessible(true);\n+        modifiers.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+        field.setAccessible(true);\n+        field.set(field, jdbcRawBackendDataSourceFactory);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDc4Mg==", "bodyText": "Please do not leave the comment codes", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464782", "createdAt": "2020-08-08T13:24:52Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);\n+        assertTrue(proxyDataSourceContext.getDataSourcesMap().isEmpty());\n+    }\n+\n+    @Test(expected = ShardingSphereException.class)\n+    public void assertWrongSchemaDataSources() {\n+        // schameName -- dataSourceName -- dataSource\n+        DataSourceParameter dataSourceParameter = new DataSourceParameter();\n+        dataSourceParameter.setUrl(\"jdbc11:mysql11:xxx\");\n+        Map<String, DataSourceParameter> dataSourceParameterMap = new LinkedHashMap<>();\n+        dataSourceParameterMap.put(\"order1\", dataSourceParameter);\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        schemaDataSources.put(\"order\", dataSourceParameterMap);\n+        new ProxyDataSourceContext(schemaDataSources);\n+        //assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDgzNw==", "bodyText": "Please use assertThat and InstanceOf to assert", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464837", "createdAt": "2020-08-08T13:25:15Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {\n+\n+    @Test\n+    public void assertEmptySchemaDataSources() {\n+        Map<String, Map<String, DataSourceParameter>> schemaDataSources = new HashMap<>();\n+        ProxyDataSourceContext proxyDataSourceContext = new ProxyDataSourceContext(schemaDataSources);\n+        assertTrue(proxyDataSourceContext.getDatabaseType() instanceof MySQLDatabaseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NDg2OQ==", "bodyText": "Please add final if the class is not design for extension", "url": "https://github.com/apache/shardingsphere/pull/6701#discussion_r467464869", "createdAt": "2020-08-08T13:25:37Z", "author": {"login": "terrymanu"}, "path": "shardingsphere-proxy/shardingsphere-proxy-backend/src/test/java/org/apache/shardingsphere/proxy/backend/schema/ProxyDataSourceContextTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.proxy.backend.schema;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;\n+import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n+import org.apache.shardingsphere.kernel.context.schema.DataSourceParameter;\n+import org.apache.shardingsphere.proxy.backend.communication.jdbc.datasource.JDBCRawBackendDataSourceFactory;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProxyDataSourceContextTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59ce458123a84092da2f24ac1637f7bef3699d9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70b4a872d357d2b5ba297a662514a3eb3fc8d99c", "author": {"user": {"login": "cowcomic", "name": null}}, "url": "https://github.com/apache/shardingsphere/commit/70b4a872d357d2b5ba297a662514a3eb3fc8d99c", "committedDate": "2020-08-08T14:26:23Z", "message": "remove comment, Mockito static import ,use assertThat and InstanceOf to assert, remove useless blank line, add final for class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODExNDAw", "url": "https://github.com/apache/shardingsphere/pull/6701#pullrequestreview-463811400", "createdAt": "2020-08-08T15:58:24Z", "commit": {"oid": "70b4a872d357d2b5ba297a662514a3eb3fc8d99c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4773, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}