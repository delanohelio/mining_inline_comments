{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDA5NzM4", "number": 8160, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDo0ODo1OVrOE52TnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMToyNFrOE53_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDk0MDQ0OnYy", "diffSide": "LEFT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DMLStatement.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNDo0ODo1OVrOH0kRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozNzoxOVrOH0w0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MjMxOA==", "bodyText": "Why delete multipleTableNames  rule? Useless?", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524882318", "createdAt": "2020-11-17T04:48:59Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DMLStatement.g4", "diffHunk": "@@ -108,10 +108,6 @@ multipleTablesClause\n     : tableAliasRefList FROM tableReferences | FROM tableAliasRefList USING tableReferences\n     ;\n \n-multipleTableNames", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4Nzc4Ng==", "bodyText": "Yes, it's useless. More detailed discussion here #7918", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525087786", "createdAt": "2020-11-17T11:37:19Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DMLStatement.g4", "diffHunk": "@@ -108,10 +108,6 @@ multipleTablesClause\n     : tableAliasRefList FROM tableReferences | FROM tableAliasRefList USING tableReferences\n     ;\n \n-multipleTableNames", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MjMxOA=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDk3NjU5OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNTowOToxM1rOH0kmAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NTo1NFrOH0xHUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NzU1NQ==", "bodyText": "Please use the result for the return variable name.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524887555", "createdAt": "2020-11-17T05:09:13Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MjY4OQ==", "bodyText": "OK, I will modify this.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525092689", "createdAt": "2020-11-17T11:45:54Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NzU1NQ=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDk5MTc0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxNzozMFrOH0kuqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1Mjo1NVrOH0za7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ==", "bodyText": "Maybe it is better to initialize the collection in advance? Like this:\nprivate final List< SimpleTableSegment > tables = new LinkedList<>();\nWhat do you think? \ud83d\ude00", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524889769", "createdAt": "2020-11-17T05:17:30Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NTc3MA==", "bodyText": "In fact, I thought pre-initialized it at the beginning. But the forTables is empty  most time. And I also found some code example in Shardingshpere project that keep list as null default.  So I am also a little confused at it.\nBut I also think pre-initialization is easier to read and use.\nI want to keep the same style with the project, so what is the style of the project? \ud83d\ude00", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525095770", "createdAt": "2020-11-17T11:51:23Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5NzkxNw==", "bodyText": "I also tried this style before \ud83d\ude00\nprivate final Optional<List< SimpleTableSegment >> tables = Optional.empty();", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525097917", "createdAt": "2020-11-17T11:55:13Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDE4OA==", "bodyText": "In fact, I thought pre-initialized it at the beginning. But the forTables is empty most time. And I also found some code example in Shardingshpere project that keep list as null default. So I am also a little confused at it.\nBut I also think pre-initialization is easier to read and use.\nI want to keep the same style with the project, so what is the style of the project? \ud83d\ude00\n\n@lwtdev I found two common coding styles, one is to use construction method to initialize the collection, such as the values \u200b\u200bvariable in InsertValuesSegment, and the other is to pre-initialize directly in the class, such as the variableAssigns variable in SetStatement. \ud83d\ude00", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525110188", "createdAt": "2020-11-17T12:17:19Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMDQ3Nw==", "bodyText": "@strongduanmu I will pre-initialize the tables \ud83d\ude00~", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r525130477", "createdAt": "2020-11-17T12:52:55Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/segment/dml/predicate/LockSegment.java", "diffHunk": "@@ -32,4 +36,7 @@\n     private final int startIndex;\n \n     private final int stopIndex;\n+\n+    @Setter\n+    private List<SimpleTableSegment> forTables;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4OTc2OQ=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDk5NTg4OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxOTo0NlrOH0kw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNToxOTo0NlrOH0kw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg5MDM0Ng==", "bodyText": "The intermediate variable forTables is a bit redundant, how about this?\nlockSegment.getForTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524890346", "createdAt": "2020-11-17T05:19:46Z", "author": {"login": "strongduanmu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/mysql/visitor/statement/impl/MySQLStatementSQLVisitor.java", "diffHunk": "@@ -544,7 +545,17 @@ public ASTNode visitQueryExpressionParens(final QueryExpressionParensContext ctx\n \n     @Override\n     public ASTNode visitLockClauseList(final LockClauseListContext ctx) {\n-        return new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        LockSegment lockSegment = new LockSegment(ctx.getStart().getStartIndex(), ctx.getStop().getStopIndex());\n+        List<SimpleTableSegment> forTables = new LinkedList<>();\n+        for (MySQLStatementParser.LockClauseContext each : ctx.lockClause()) {\n+            if (null != each.tableLockingList()) {\n+                forTables.addAll(generateTablesFromTableAliasRefList(each.tableLockingList().tableAliasRefList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTE3NzIzOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjo0NTozM1rOH0mYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoxNDowNlrOH0o96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw==", "bodyText": "Delete extra blank lines.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524916917", "createdAt": "2020-11-17T06:45:33Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.extractor;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.LockSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLSelectStatement;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class TableExtractorTest {\n+\n+    private TableExtractor tableExtractor;\n+\n+    @Before\n+    public void init() {\n+        tableExtractor = new TableExtractor();\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithEmptyValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+        assertTrue(tableExtractor.getRewriteTables().isEmpty());\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        LockSegment lockSegment = new LockSegment(108, 154);\n+        selectStatement.setLock(lockSegment);\n+        List<SimpleTableSegment> tables = new LinkedList<>();\n+        lockSegment.setForTables(tables);\n+        tables.add(new SimpleTableSegment(122, 128, new IdentifierValue(\"t_order\")));\n+        tables.add(new SimpleTableSegment(143, 154, new IdentifierValue(\"t_order_item\")));\n+\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+\n+        assertNotNull(tableExtractor.getRewriteTables());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0OTkxOA==", "bodyText": "Here I follow AAA(Arrange, Act, Assert) pattern, so there are two blank lines.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524949918", "createdAt": "2020-11-17T08:03:30Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.extractor;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.LockSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLSelectStatement;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class TableExtractorTest {\n+\n+    private TableExtractor tableExtractor;\n+\n+    @Before\n+    public void init() {\n+        tableExtractor = new TableExtractor();\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithEmptyValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+        assertTrue(tableExtractor.getRewriteTables().isEmpty());\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        LockSegment lockSegment = new LockSegment(108, 154);\n+        selectStatement.setLock(lockSegment);\n+        List<SimpleTableSegment> tables = new LinkedList<>();\n+        lockSegment.setForTables(tables);\n+        tables.add(new SimpleTableSegment(122, 128, new IdentifierValue(\"t_order\")));\n+        tables.add(new SimpleTableSegment(143, 154, new IdentifierValue(\"t_order_item\")));\n+\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+\n+        assertNotNull(tableExtractor.getRewriteTables());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1OTIxMQ==", "bodyText": "But I found that it doesn\u2019t seem to be the case in the project, so I will keep with the project and delete these blank lines", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524959211", "createdAt": "2020-11-17T08:14:06Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/test/java/org/apache/shardingsphere/sql/parser/sql/common/extractor/TableExtractorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.sql.parser.sql.common.extractor;\n+\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.LockSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n+import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLSelectStatement;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class TableExtractorTest {\n+\n+    private TableExtractor tableExtractor;\n+\n+    @Before\n+    public void init() {\n+        tableExtractor = new TableExtractor();\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithEmptyValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+        assertTrue(tableExtractor.getRewriteTables().isEmpty());\n+    }\n+\n+    @Test\n+    public void assertExtractTablesFromSelectLockWithValue() {\n+        MySQLSelectStatement selectStatement = new MySQLSelectStatement();\n+        LockSegment lockSegment = new LockSegment(108, 154);\n+        selectStatement.setLock(lockSegment);\n+        List<SimpleTableSegment> tables = new LinkedList<>();\n+        lockSegment.setForTables(tables);\n+        tables.add(new SimpleTableSegment(122, 128, new IdentifierValue(\"t_order\")));\n+        tables.add(new SimpleTableSegment(143, 154, new IdentifierValue(\"t_order_item\")));\n+\n+        tableExtractor.extractTablesFromSelect(selectStatement);\n+\n+        assertNotNull(tableExtractor.getRewriteTables());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxNjkxNw=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTIxNjI1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/jaxb/cases/domain/segment/impl/lock/ExpectedLockClause.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNzowMToyNFrOH0mvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODowMDozNVrOH0oShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjYzMg==", "bodyText": "Delete extra blank lines.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524922632", "createdAt": "2020-11-17T07:01:24Z", "author": {"login": "jingshanglu"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/jaxb/cases/domain/segment/impl/lock/ExpectedLockClause.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.lock;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.AbstractExpectedSQLSegment;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.table.ExpectedSimpleTable;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Expected lock clause.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedLockClause extends AbstractExpectedSQLSegment {\n+\n+    @XmlElement(name = \"table\")\n+    private final List<ExpectedSimpleTable> tables = new LinkedList<>();\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0ODEwMA==", "bodyText": "OK, I will remove this blank line.", "url": "https://github.com/apache/shardingsphere/pull/8160#discussion_r524948100", "createdAt": "2020-11-17T08:00:35Z", "author": {"login": "lwtdev"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/java/org/apache/shardingsphere/test/sql/parser/parameterized/jaxb/cases/domain/segment/impl/lock/ExpectedLockClause.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.lock;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.AbstractExpectedSQLSegment;\n+import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.segment.impl.table.ExpectedSimpleTable;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Expected lock clause.\n+ */\n+@Getter\n+@Setter\n+public final class ExpectedLockClause extends AbstractExpectedSQLSegment {\n+\n+    @XmlElement(name = \"table\")\n+    private final List<ExpectedSimpleTable> tables = new LinkedList<>();\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyMjYzMg=="}, "originalCommit": {"oid": "f0fa6c23ddb789fa34097773b3b6744a6b0102a8"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 572, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}