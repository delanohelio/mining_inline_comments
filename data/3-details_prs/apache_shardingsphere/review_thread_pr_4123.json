{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDQxNzg5", "number": 4123, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoxOTozM1rODcZvNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMzowMjoxMlrODcazGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA4NDA3OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoxOTozM1rOFkcTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMDoxMzoyNVrOFkdOAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY4OA==", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756688", "createdAt": "2020-02-01T04:19:33Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MTc3Nw==", "bodyText": "@tristaZero Okay, I would like to remove IndexSegment.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373771777", "createdAt": "2020-02-01T10:13:25Z", "author": {"login": "SteNicholas"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY4OA=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA4NDEyOnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoxOTo0N1rOFkcTFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMDoxMzozN1rOFkdODw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY5NA==", "bodyText": "META-INF/parsing-rule-definition/mysql/sql-statement-rule-definition.xml tells us there is no need to add IndexSegment to CreateIndexStatement when DB is MySQL.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373756694", "createdAt": "2020-02-01T04:19:47Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());\n+        result.setIndex(index);\n+        result.getAllSQLSegments().add(index);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropIndex(final DropIndexContext ctx) {\n+        DropIndexStatement result = new DropIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MTc5MQ==", "bodyText": "@tristaZero Okay, I would like to remove IndexSegment.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373771791", "createdAt": "2020-02-01T10:13:37Z", "author": {"login": "SteNicholas"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {\n+            for (AlterSpecification_Context alterSpecification : ctx.alterDefinitionClause_().alterSpecification_()) {\n+                AddColumnSpecificationContext addColumnSpecification = alterSpecification.addColumnSpecification();\n+                if (null != addColumnSpecification) {\n+                    List<ColumnDefinitionContext> columnDefinitions = addColumnSpecification.columnDefinition();\n+                    ColumnDefinitionSegment columnDefinitionSegment = null;\n+                    for (ColumnDefinitionContext columnDefinition : columnDefinitions) {\n+                        columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                        result.getAddedColumnDefinitions().add(columnDefinitionSegment);\n+                        result.getAllSQLSegments().add(columnDefinitionSegment);\n+                    }\n+                    createColumnPositionSegment(addColumnSpecification.firstOrAfterColumn(), columnDefinitionSegment, result);\n+                }\n+                AddConstraintSpecificationContext addConstraintSpecification = alterSpecification.addConstraintSpecification();\n+                ForeignKeyOption_Context foreignKeyOption = null == addConstraintSpecification\n+                        ? null : addConstraintSpecification.constraintDefinition_().foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+                ChangeColumnSpecificationContext changeColumnSpecification = alterSpecification.changeColumnSpecification();\n+                if (null != changeColumnSpecification) {\n+                    createColumnPositionSegment(changeColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(changeColumnSpecification.columnDefinition(), result), result);\n+                }\n+                DropColumnSpecificationContext dropColumnSpecification = alterSpecification.dropColumnSpecification();\n+                if (null != dropColumnSpecification) {\n+                    result.getDroppedColumnNames().add(((ColumnSegment) visit(dropColumnSpecification)).getName());\n+                }\n+                ModifyColumnSpecificationContext modifyColumnSpecification = alterSpecification.modifyColumnSpecification();\n+                if (null != modifyColumnSpecification) {\n+                    createColumnPositionSegment(modifyColumnSpecification.firstOrAfterColumn(),\n+                            createColumnDefinitionSegment(modifyColumnSpecification.columnDefinition(), result), result);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropTable(final DropTableContext ctx) {\n+        DropTableStatement result = new DropTableStatement();\n+        ListValue<TableSegment> tables = (ListValue<TableSegment>) visit(ctx.tableNames());\n+        result.getTables().addAll(tables.getValues());\n+        result.getAllSQLSegments().addAll(tables.getValues());\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitTruncateTable(final TruncateTableContext ctx) {\n+        DDLStatement result = new DDLStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.getAllSQLSegments().add(table);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitCreateIndex(final CreateIndexContext ctx) {\n+        CreateIndexStatement result = new CreateIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());\n+        result.setIndex(index);\n+        result.getAllSQLSegments().add(index);\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitDropIndex(final DropIndexContext ctx) {\n+        DropIndexStatement result = new DropIndexStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        IndexSegment index = (IndexSegment) visit(ctx.indexName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjY5NA=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA5MDM0OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDozNzoyMlrOFkcWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMjo1NToyNFrOFkdo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ==", "bodyText": "IMO, it is better to put it to visitCreateDefinitionClause(). Parent visior has no reposibility to visit its child visitor, and just gets the result returned by its child.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757511", "createdAt": "2020-02-01T04:37:22Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDMyNg==", "bodyText": "@tristaZero No, there is no any statement match for visitCreateDefinitionClause() result.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373774326", "createdAt": "2020-02-01T11:13:02Z", "author": {"login": "SteNicholas"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODY3NA==", "bodyText": "@SteNicholas Could get ListValue<ColumnDefinitionSegment> from visitCreateDefinitionClause() and add it to columnDefinitions in CreateTableStatement", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778674", "createdAt": "2020-02-01T12:55:24Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzUxMQ=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA5MjQ1OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDo0NDo1OVrOFkcXWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMToxNDo0N1rOFkdYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4NQ==", "bodyText": "The above suggestion applied to the following visitors. Could you review those rather long visitors for optimizing?", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373757785", "createdAt": "2020-02-01T04:44:59Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDQwNw==", "bodyText": "@tristaZero I knew your meaning. I have already previously optimized for the visitor, but no any statement contains TableSegment, cause that no match for visit**().", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373774407", "createdAt": "2020-02-01T11:14:47Z", "author": {"login": "SteNicholas"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -190,6 +227,135 @@ public ASTNode visitCreateUser(final CreateUserContext ctx) {\n     }\n \n     // DDLStatement.g4\n+    @Override\n+    public ASTNode visitCreateTable(final CreateTableContext ctx) {\n+        CreateTableStatement result = new CreateTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        CreateDefinitionClause_Context createDefinitionClause = ctx.createDefinitionClause_();\n+        if (null != createDefinitionClause) {\n+            for (CreateDefinition_Context createDefinition : createDefinitionClause.createDefinitions_().createDefinition_()) {\n+                ColumnDefinitionContext columnDefinition = createDefinition.columnDefinition();\n+                if (null != columnDefinition) {\n+                    ColumnDefinitionSegment columnDefinitionSegment = createColumnDefinitionSegment(columnDefinition, result);\n+                    result.getColumnDefinitions().add(columnDefinitionSegment);\n+                    result.getAllSQLSegments().add(columnDefinitionSegment);\n+                }\n+                ConstraintDefinition_Context constraintDefinition = createDefinition.constraintDefinition_();\n+                ForeignKeyOption_Context foreignKeyOption = null == constraintDefinition ? null : constraintDefinition.foreignKeyOption_();\n+                if (null != foreignKeyOption) {\n+                    result.getAllSQLSegments().add((TableSegment) visit(foreignKeyOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        CreateLikeClause_Context createLikeClause = ctx.createLikeClause_();\n+        if (null != createLikeClause) {\n+            result.getAllSQLSegments().add((TableSegment) visit(createLikeClause));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public ASTNode visitAlterTable(final AlterTableContext ctx) {\n+        AlterTableStatement result = new AlterTableStatement();\n+        TableSegment table = (TableSegment) visit(ctx.tableName());\n+        result.setTable(table);\n+        result.getAllSQLSegments().add(table);\n+        if (null != ctx.alterDefinitionClause_()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Nzc4NQ=="}, "originalCommit": {"oid": "96b2f39695e13177964edf5534f87463e90efb0e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTI1Nzg2OnYy", "diffSide": "RIGHT", "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMzowMjoxMlrOFkdp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMzowMjo1MFrOFkdqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg==", "bodyText": "To create visitReferenceDefinition_() is better. Short and simple function always make peple easy to read. Other than, one function is supposed to focus on itself, not include its child.", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778942", "createdAt": "2020-02-01T13:02:12Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -871,6 +1051,53 @@ private ASTNode createExpressionSegment(final ASTNode astNode, final ParserRuleC\n         return astNode;\n     }\n     \n+    private ColumnDefinitionSegment createColumnDefinitionSegment(final ColumnDefinitionContext columnDefinition, final DDLStatement statement) {\n+        ColumnSegment column = (ColumnSegment) visit(columnDefinition.columnName());\n+        LiteralValue dataType = (LiteralValue) visit(columnDefinition.dataType().dataTypeName_());\n+        boolean isPrimaryKey = false;\n+        for (InlineDataType_Context inlineDataType : columnDefinition.inlineDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = inlineDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        for (GeneratedDataType_Context generatedDataType: columnDefinition.generatedDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = generatedDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk3MA==", "bodyText": "Could give more review on other long funcions?", "url": "https://github.com/apache/shardingsphere/pull/4123#discussion_r373778970", "createdAt": "2020-02-01T13:02:50Z", "author": {"login": "tristaZero"}, "path": "shardingsphere-sql-parser/shardingsphere-sql-parser-mysql/src/main/java/org/apache/shardingsphere/sql/parser/MySQLVisitor.java", "diffHunk": "@@ -871,6 +1051,53 @@ private ASTNode createExpressionSegment(final ASTNode astNode, final ParserRuleC\n         return astNode;\n     }\n     \n+    private ColumnDefinitionSegment createColumnDefinitionSegment(final ColumnDefinitionContext columnDefinition, final DDLStatement statement) {\n+        ColumnSegment column = (ColumnSegment) visit(columnDefinition.columnName());\n+        LiteralValue dataType = (LiteralValue) visit(columnDefinition.dataType().dataTypeName_());\n+        boolean isPrimaryKey = false;\n+        for (InlineDataType_Context inlineDataType : columnDefinition.inlineDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = inlineDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));\n+                }\n+            }\n+        }\n+        for (GeneratedDataType_Context generatedDataType: columnDefinition.generatedDataType_()) {\n+            CommonDataTypeOption_Context commonDataTypeOption = generatedDataType.commonDataTypeOption_();\n+            if (null != commonDataTypeOption) {\n+                if (null != commonDataTypeOption.primaryKey()) {\n+                    isPrimaryKey = true;\n+                }\n+                if (null != commonDataTypeOption.referenceDefinition_()) {\n+                    statement.getAllSQLSegments().add((TableSegment) visit(commonDataTypeOption.referenceDefinition_().tableName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3ODk0Mg=="}, "originalCommit": {"oid": "32356e4a0a27dec836875c4ed5dc53abdcf1b83c"}, "originalPosition": 295}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}