{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTU4ODM1", "number": 4922, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1NTozNVrODq1Efw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NzozOFrODrKQAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM2Mjg3OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1NTozNVrOF60MQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyOToxNlrOF7JEcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjgzMg==", "bodyText": "The class ZookeeperPropertiesTest is already existed, why rewrite it again?", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397216832", "createdAt": "2020-03-24T14:55:35Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class ZookeeperPropertiesTest {\n+\n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS.getKey(), \"3000\");\n+        props.setProperty(ZookeeperPropertyKey.MAX_RETRIES.getKey(), \"2\");\n+        props.setProperty(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS.getKey(), \"600\");\n+        props.setProperty(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS.getKey(), \"6000\");\n+        props.setProperty(ZookeeperPropertyKey.DIGEST.getKey(), \"any\");\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(3000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.MAX_RETRIES), is(2));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS), is(600));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS), is(6000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.DIGEST), is(\"any\"));\n+    }\n+\n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(500));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5f13ca8b4e6531b11fc07636deabcc7050d1db"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODI1Nw==", "bodyText": "@terrymanu  sorry,I submitted pull request based on the last branch, so there is a duplicate file", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397558257", "createdAt": "2020-03-25T01:27:08Z", "author": {"login": "ruanjiehui"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class ZookeeperPropertiesTest {\n+\n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS.getKey(), \"3000\");\n+        props.setProperty(ZookeeperPropertyKey.MAX_RETRIES.getKey(), \"2\");\n+        props.setProperty(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS.getKey(), \"600\");\n+        props.setProperty(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS.getKey(), \"6000\");\n+        props.setProperty(ZookeeperPropertyKey.DIGEST.getKey(), \"any\");\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(3000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.MAX_RETRIES), is(2));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS), is(600));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS), is(6000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.DIGEST), is(\"any\"));\n+    }\n+\n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(500));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjgzMg=="}, "originalCommit": {"oid": "6e5f13ca8b4e6531b11fc07636deabcc7050d1db"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODg5Nw==", "bodyText": "How should I handle this situation? Is it better to recreate a branch and resubmit the pr after modification or to resolve the conflict?", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397558897", "createdAt": "2020-03-25T01:29:16Z", "author": {"login": "ruanjiehui"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class ZookeeperPropertiesTest {\n+\n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS.getKey(), \"3000\");\n+        props.setProperty(ZookeeperPropertyKey.MAX_RETRIES.getKey(), \"2\");\n+        props.setProperty(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS.getKey(), \"600\");\n+        props.setProperty(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS.getKey(), \"6000\");\n+        props.setProperty(ZookeeperPropertyKey.DIGEST.getKey(), \"any\");\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(3000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.MAX_RETRIES), is(2));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS), is(600));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS), is(6000));\n+        assertThat(actual.getValue(ZookeeperPropertyKey.DIGEST), is(\"any\"));\n+    }\n+\n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        ZookeeperProperties actual = new ZookeeperProperties(props);\n+        assertThat(actual.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS), is(500));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjgzMg=="}, "originalCommit": {"oid": "6e5f13ca8b4e6531b11fc07636deabcc7050d1db"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA0NTY4OnYy", "diffSide": "LEFT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMTo0MVrOF7OKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMTo0MVrOF7OKhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjM3NQ==", "bodyText": "should keep origin blankspaces", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397642375", "createdAt": "2020-03-25T07:01:41Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/orchestration/center/instance/ZookeeperPropertiesTest.java", "diffHunk": "@@ -25,7 +25,7 @@\n import static org.junit.Assert.assertThat;\n \n public final class ZookeeperPropertiesTest {\n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b2e6191ac51ac93517ab49d7beb32a7d5e2bb8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA0NjMwOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMjoxMFrOF7OLDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMjoxMFrOF7OLDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjUwOA==", "bodyText": "let a blank line at tail", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397642508", "createdAt": "2020-03-25T07:02:10Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.core.facade.properties;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OrchestrationPropertiesTest {\n+\n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(OrchestrationPropertyKey.OVERWRITE.getKey(), \"true\");\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertTrue(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+\n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertFalse(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b2e6191ac51ac93517ab49d7beb32a7d5e2bb8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA0NjkyOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMjoyOFrOF7OLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowMjoyOFrOF7OLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MjU5NQ==", "bodyText": "let a blank line at tail.", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397642595", "createdAt": "2020-03-25T07:02:28Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosPropertiesTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class NacosPropertiesTest {\n+\n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(NacosPropertyKey.GROUP.getKey(), \"SHARDING_SPHERE_TEST_GROUP\");\n+        props.setProperty(NacosPropertyKey.TIMEOUT.getKey(), \"6000\");\n+        NacosProperties actual = new NacosProperties(props);\n+        assertThat(actual.getValue(NacosPropertyKey.GROUP), is(\"SHARDING_SPHERE_TEST_GROUP\"));\n+        assertThat(actual.getValue(NacosPropertyKey.TIMEOUT), is(6000L));\n+    }\n+\n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        NacosProperties actual = new NacosProperties(props);\n+        assertThat(actual.getValue(NacosPropertyKey.GROUP), is(\"SHARDING_SPHERE_DEFAULT_GROUP\"));\n+        assertThat(actual.getValue(NacosPropertyKey.TIMEOUT), is(3000L));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b2e6191ac51ac93517ab49d7beb32a7d5e2bb8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTIxODM2OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODoxMDoxNFrOF7PzkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODoxMDoxNFrOF7PzkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY2OTI2NA==", "bodyText": "let an empty line here", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397669264", "createdAt": "2020-03-25T08:10:14Z", "author": {"login": "kimmking"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.core.facade.properties;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OrchestrationPropertiesTest {\n+    \n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(OrchestrationPropertyKey.OVERWRITE.getKey(), \"true\");\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertTrue(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+    \n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertFalse(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b0eac7d98e62ff0da851381d2c81af337eccd1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTgzMjUyOnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosPropertiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NzozMFrOF7VwEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NzozMFrOF7VwEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjY3Mg==", "bodyText": "Please remove useless blank line.", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397766672", "createdAt": "2020-03-25T10:57:30Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-center/sharding-orchestration-center-nacos/src/test/java/org/apache/shardingsphere/orchestration/center/instance/NacosPropertiesTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.center.instance;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public final class NacosPropertiesTest {\n+    \n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(NacosPropertyKey.GROUP.getKey(), \"SHARDING_SPHERE_TEST_GROUP\");\n+        props.setProperty(NacosPropertyKey.TIMEOUT.getKey(), \"6000\");\n+        NacosProperties actual = new NacosProperties(props);\n+        assertThat(actual.getValue(NacosPropertyKey.GROUP), is(\"SHARDING_SPHERE_TEST_GROUP\"));\n+        assertThat(actual.getValue(NacosPropertyKey.TIMEOUT), is(6000L));\n+    }\n+    \n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        NacosProperties actual = new NacosProperties(props);\n+        assertThat(actual.getValue(NacosPropertyKey.GROUP), is(\"SHARDING_SPHERE_DEFAULT_GROUP\"));\n+        assertThat(actual.getValue(NacosPropertyKey.TIMEOUT), is(3000L));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0633d294f858ee2a3767b80e101f7d0d80551e06"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTgzMjk3OnYy", "diffSide": "RIGHT", "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NzozOFrOF7VwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NzozOFrOF7VwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2Njc0OQ==", "bodyText": "Please remove useless blank line.", "url": "https://github.com/apache/shardingsphere/pull/4922#discussion_r397766749", "createdAt": "2020-03-25T10:57:38Z", "author": {"login": "terrymanu"}, "path": "sharding-orchestration/sharding-orchestration-core/sharding-orchestration-core-facade/src/test/java/org/apache/shardingsphere/orchestration/core/facade/properties/OrchestrationPropertiesTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.orchestration.core.facade.properties;\n+\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class OrchestrationPropertiesTest {\n+    \n+    @Test\n+    public void assertGetValue() {\n+        Properties props = new Properties();\n+        props.setProperty(OrchestrationPropertyKey.OVERWRITE.getKey(), \"true\");\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertTrue(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+    \n+    @Test\n+    public void assertGetDefaultValue() {\n+        Properties props = new Properties();\n+        OrchestrationProperties actual = new OrchestrationProperties(props);\n+        assertFalse(actual.getValue(OrchestrationPropertyKey.OVERWRITE));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0633d294f858ee2a3767b80e101f7d0d80551e06"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1159, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}