{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjA0MzQx", "number": 7856, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDowMzo1N1rOEfeGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNToyOVrOEfevKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM0Mzc4OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDowMzo1N1rOHLwuDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTo0MTo1OVrOHMevNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5NDYwNQ==", "bodyText": "The method will return before processing the add subscription to the txn, is this an expected behavior?", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482094605", "createdAt": "2020-09-02T14:03:57Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "diffHunk": "@@ -176,6 +178,30 @@ public void addPublishPartitionToTxn(TxnID txnID, List<String> partitions) throw\n         return handler.addPublishPartitionToTxnAsync(txnID, partitions);\n     }\n \n+    @Override\n+    public void addSubscriptionToTxn(TxnID txnID, String topic, String subscription)\n+            throws TransactionCoordinatorClientException {\n+        try {\n+            addSubscriptionToTxnAsync(txnID, topic, subscription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0ODU2Nw==", "bodyText": "I miss calling the get().", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482848567", "createdAt": "2020-09-03T09:41:59Z", "author": {"login": "gaoran10"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "diffHunk": "@@ -176,6 +178,30 @@ public void addPublishPartitionToTxn(TxnID txnID, List<String> partitions) throw\n         return handler.addPublishPartitionToTxnAsync(txnID, partitions);\n     }\n \n+    @Override\n+    public void addSubscriptionToTxn(TxnID txnID, String topic, String subscription)\n+            throws TransactionCoordinatorClientException {\n+        try {\n+            addSubscriptionToTxnAsync(txnID, topic, subscription);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5NDYwNQ=="}, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM0ODIxOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDowNDo1N1rOHLww4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDowNDo1N1rOHLww4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5NTMzMA==", "bodyText": "The Singleton list is more suitable here. Or maybe you add a thread-local list to avoid introduce many list instance", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482095330", "createdAt": "2020-09-02T14:04:57Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "diffHunk": "@@ -176,6 +178,30 @@ public void addPublishPartitionToTxn(TxnID txnID, List<String> partitions) throw\n         return handler.addPublishPartitionToTxnAsync(txnID, partitions);\n     }\n \n+    @Override\n+    public void addSubscriptionToTxn(TxnID txnID, String topic, String subscription)\n+            throws TransactionCoordinatorClientException {\n+        try {\n+            addSubscriptionToTxnAsync(txnID, topic, subscription);\n+        } catch (Exception e) {\n+            throw TransactionCoordinatorClientException.unwrap(e);\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> addSubscriptionToTxnAsync(TxnID txnID, String topic, String subscription) {\n+        TransactionMetaStoreHandler handler = handlerMap.get(txnID.getMostSigBits());\n+        if (handler == null) {\n+            return FutureUtil.failedFuture(\n+                    new TransactionCoordinatorClientException.MetaStoreHandlerNotExistsException(txnID.getMostSigBits()));\n+        }\n+        PulsarApi.Subscription sub = PulsarApi.Subscription.newBuilder()\n+                .setTopic(topic)\n+                .setSubscription(subscription)\n+                .build();\n+        return handler.addSubscriptionToTxn(txnID, Lists.newArrayList(sub));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM3NzA5OnYy", "diffSide": "LEFT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMDo0NVrOHLxCNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxNDowOFrOHMf5WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5OTc2Ng==", "bodyText": "Why remove this branch?", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482099766", "createdAt": "2020-09-02T14:10:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -207,26 +208,39 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n \n     private CompletableFuture<Void> endToTB(TxnID txnID, TxnStatus newStatus) {\n         CompletableFuture<Void> resultFuture = new CompletableFuture<>();\n-        List<CompletableFuture<TxnID>> commitFutureList = new ArrayList<>();\n+        List<CompletableFuture<TxnID>> completableFutureList = new ArrayList<>();\n         this.getTxnMeta(txnID).whenComplete((txnMeta, throwable) -> {\n             if (throwable != null) {\n                 resultFuture.completeExceptionally(throwable);\n                 return;\n             }\n+\n+            txnMeta.ackedPartitions().forEach(tbSub -> {\n+                CompletableFuture<TxnID> commitFuture = new CompletableFuture<>();\n+                if (TxnStatus.COMMITTING.equals(newStatus)) {\n+                    commitFuture = tbClient.commitTxnOnSubscription(\n+                            tbSub.getTopic(), tbSub.getSubscription(), txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                } else if (TxnStatus.ABORTING.equals(newStatus)) {\n+                    commitFuture = tbClient.abortTxnOnSubscription(\n+                            tbSub.getTopic(), tbSub.getSubscription(), txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                }\n+                completableFutureList.add(commitFuture);\n+            });\n+\n             txnMeta.producedPartitions().forEach(partition -> {\n                 CompletableFuture<TxnID> commitFuture = new CompletableFuture<>();\n                 if (TxnStatus.COMMITTING.equals(newStatus)) {\n                     commitFuture = tbClient.commitTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                    // TODO commitTxnOnSubscription\n                 } else if (TxnStatus.ABORTING.equals(newStatus)) {\n+                    // TODO abortTxnOnTopic\n                     commitFuture.completeExceptionally(new Throwable(\"Unsupported operation.\"));\n-                } else {\n-                    // Unsupported txnStatus\n-                    commitFuture.completeExceptionally(new Throwable(\"Unsupported txnStatus.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NzU0NA==", "bodyText": "I'll revert this.", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482867544", "createdAt": "2020-09-03T10:14:08Z", "author": {"login": "gaoran10"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -207,26 +208,39 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n \n     private CompletableFuture<Void> endToTB(TxnID txnID, TxnStatus newStatus) {\n         CompletableFuture<Void> resultFuture = new CompletableFuture<>();\n-        List<CompletableFuture<TxnID>> commitFutureList = new ArrayList<>();\n+        List<CompletableFuture<TxnID>> completableFutureList = new ArrayList<>();\n         this.getTxnMeta(txnID).whenComplete((txnMeta, throwable) -> {\n             if (throwable != null) {\n                 resultFuture.completeExceptionally(throwable);\n                 return;\n             }\n+\n+            txnMeta.ackedPartitions().forEach(tbSub -> {\n+                CompletableFuture<TxnID> commitFuture = new CompletableFuture<>();\n+                if (TxnStatus.COMMITTING.equals(newStatus)) {\n+                    commitFuture = tbClient.commitTxnOnSubscription(\n+                            tbSub.getTopic(), tbSub.getSubscription(), txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                } else if (TxnStatus.ABORTING.equals(newStatus)) {\n+                    commitFuture = tbClient.abortTxnOnSubscription(\n+                            tbSub.getTopic(), tbSub.getSubscription(), txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                }\n+                completableFutureList.add(commitFuture);\n+            });\n+\n             txnMeta.producedPartitions().forEach(partition -> {\n                 CompletableFuture<TxnID> commitFuture = new CompletableFuture<>();\n                 if (TxnStatus.COMMITTING.equals(newStatus)) {\n                     commitFuture = tbClient.commitTxnOnTopic(partition, txnID.getMostSigBits(), txnID.getLeastSigBits());\n+                    // TODO commitTxnOnSubscription\n                 } else if (TxnStatus.ABORTING.equals(newStatus)) {\n+                    // TODO abortTxnOnTopic\n                     commitFuture.completeExceptionally(new Throwable(\"Unsupported operation.\"));\n-                } else {\n-                    // Unsupported txnStatus\n-                    commitFuture.completeExceptionally(new Throwable(\"Unsupported txnStatus.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA5OTc2Ng=="}, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQwNjE0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNjozNFrOHLxTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxMzozMlrOHMf3_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDExMg==", "bodyText": "Is this a useful change?", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482104112", "createdAt": "2020-09-02T14:16:34Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java", "diffHunk": "@@ -1197,8 +1207,8 @@ public void deleteFailed(ManagedLedgerException exception, Object ctx) {\n         // Reset txdID and position for cumulative ack.\n         PENDING_CUMULATIVE_ACK_TXNID_UPDATER.set(this, null);\n         POSITION_UPDATER.set(this, null);\n-        dispatcher.redeliverUnacknowledgedMessages(consumer, (List<PositionImpl>)\n-                                                                    (List<?>)pendingAckMessageForCurrentTxn.values());\n+//        dispatcher.redeliverUnacknowledgedMessages(consumer, (List<PositionImpl>)\n+//                                                                    (List<?>)pendingAckMessageForCurrentTxn.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NzE5Nw==", "bodyText": "No, I'll revert this.", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482867197", "createdAt": "2020-09-03T10:13:32Z", "author": {"login": "gaoran10"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java", "diffHunk": "@@ -1197,8 +1207,8 @@ public void deleteFailed(ManagedLedgerException exception, Object ctx) {\n         // Reset txdID and position for cumulative ack.\n         PENDING_CUMULATIVE_ACK_TXNID_UPDATER.set(this, null);\n         POSITION_UPDATER.set(this, null);\n-        dispatcher.redeliverUnacknowledgedMessages(consumer, (List<PositionImpl>)\n-                                                                    (List<?>)pendingAckMessageForCurrentTxn.values());\n+//        dispatcher.redeliverUnacknowledgedMessages(consumer, (List<PositionImpl>)\n+//                                                                    (List<?>)pendingAckMessageForCurrentTxn.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDExMg=="}, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQ0OTA1OnYy", "diffSide": "RIGHT", "path": "pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/TransactionSubscription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNToyOVrOHLxt4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoxMzo0M1rOHMf4Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMDk0Ng==", "bodyText": "There is the same struct in PulsarApi.proto named Subscription, maybe you can use that one directly.", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482110946", "createdAt": "2020-09-02T14:25:29Z", "author": {"login": "codelipenghui"}, "path": "pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/TransactionSubscription.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.transaction.coordinator;\n+\n+import com.google.common.base.Objects;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * A class for representing acked topic subscription info.\n+ */\n+@Data\n+@Builder\n+public class TransactionSubscription implements Comparable<TransactionSubscription> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NzI5NA==", "bodyText": "There is a problem, I can't override the hashCode method of the Subscription and it can't be used in a Set collection.", "url": "https://github.com/apache/pulsar/pull/7856#discussion_r482867294", "createdAt": "2020-09-03T10:13:43Z", "author": {"login": "gaoran10"}, "path": "pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/TransactionSubscription.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.transaction.coordinator;\n+\n+import com.google.common.base.Objects;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * A class for representing acked topic subscription info.\n+ */\n+@Data\n+@Builder\n+public class TransactionSubscription implements Comparable<TransactionSubscription> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMDk0Ng=="}, "originalCommit": {"oid": "7e070703af2a8c713001cae746de50612c42d00b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2268, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}