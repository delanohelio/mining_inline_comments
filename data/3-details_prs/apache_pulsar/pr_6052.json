{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjM4MTAy", "number": 6052, "title": "[PIP-54] Support acknowledgment at batch index level", "bodyText": "Master issue: #6253\nFixes #5969\nMotivation\nAdd support for ack batch message local index. Can be disabled at broker side by set batchIndexAcknowledgeEnable=false at broker.conf\nPIP-54 documentation will be created soon.\nModifications\n\nManaged cursor support track and persistent local index of batch message.\nClient support send batch index ack to broker.\nThe batch messages with index ack information dispatched to the client.\nClient skip the acked index.\n\nVerifying this change\nNew unit tests added\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: (no)\nThe default values of configurations: (no)\nThe wire protocol: (yes)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)", "createdAt": "2020-01-14T13:34:57Z", "url": "https://github.com/apache/pulsar/pull/6052", "merged": true, "mergeCommit": {"oid": "aa0fbb0d31d36f383054d93e3684de79879c430c"}, "closed": true, "closedAt": "2020-06-02T01:01:18Z", "author": {"login": "codelipenghui"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7QJrngFqTM0NDYxNzI4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnKLS5gFqTQyMjI3NTU5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjE3Mjgw", "url": "https://github.com/apache/pulsar/pull/6052#pullrequestreview-344617280", "createdAt": "2020-01-17T14:34:40Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDozNDo0MFrOFe60Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTowMzoxNFrOFe7vvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2NTI1OA==", "bodyText": "I think we can initialize this lazily since people might not enable this feature at all.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r367965258", "createdAt": "2020-01-17T14:34:40Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -148,6 +152,10 @@\n         return position;\n     };\n     private final LongPairRangeSet<PositionImpl> individualDeletedMessages;\n+\n+    // Maintain the indexes deleted status of batch messages that not deleted completely\n+    // (ledgerId, entryId, batchSize) -> deleted indexes\n+    private final ConcurrentHashMap<PositionImpl, ConcurrentBitSet> batchDeletedIndexes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3ODk3OA==", "bodyText": "Instead of introducing a new structure for storing index information, why not just store a bitset in NestedPositionInfo?\nmessage NestedPositionInfo {\n    required int64 ledgerId = 1;\n    required int64 entryId = 2;\n    // using one integer for storing the acknowledgement set for the indexes within a entry\n    optional uint32 ackset = 0;\n}\n\n\nThe ackset in NestedPositionInfo is used for indicating whether an entry is fully acknowledged or partially acknowledged. Hence you don't need to introduce more data structure. You can still use individualDeletedMessages for representing a delete range. In a message range, all entries between lowerEndpoint and higherEndpoint are fully acknowledged. The ackSets in lowerEndpoint and upperEndpoint are used for indicating whether these two entries are fully or partially acked.\nUsing this format, you don't need to introduce redundant structure and it is a very efficient storage format. Also, more importantly, it provides a consistent view for people to realize the acknowledgment behavior without looking into multiple different places.\nIn the implementation, it should be straightforward as well. As you just need to introduce ackSet to current acknowledgment logic and make sure the range merging logic handle ackSet correctly. And when exposing the acknowledgment information to topic stats, you can just simply add the ackSet in the individual delete set.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r367978978", "createdAt": "2020-01-17T15:00:29Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/proto/MLDataFormats.proto", "diffHunk": "@@ -66,6 +66,9 @@ message PositionInfo {\n     // Additional custom properties associated with\n \t// the current cursor position\n \trepeated LongProperty properties = 4;\n+\n+    // Store which index in the batch message has been deleted\n+    repeated BatchDeletedIndexInfo batchDeletedIndexes = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3OTc3OQ==", "bodyText": "I think an integer should be enough for representing the ackSet, no?", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r367979779", "createdAt": "2020-01-17T15:01:56Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -447,6 +453,7 @@ message CommandMessage {\n     required uint64 consumer_id       = 1;\n     required MessageIdData message_id = 2;\n     optional uint32 redelivery_count  = 3 [default = 0];\n+    repeated IntRange acked_indexes = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MDQ3Nw==", "bodyText": "If we added an ackSet bitset to MessageIdData, we don't need to introduce additional structure, no?", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r367980477", "createdAt": "2020-01-17T15:03:14Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -477,6 +484,8 @@ message CommandAck {\n \n     optional uint64 txnid_least_bits = 6 [default = 0];\n     optional uint64 txnid_most_bits = 7 [default = 0];\n+\n+    repeated BatchMessageIndexesAckData batch_message_ack_indexes = 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "94fba9ef4a2191b4526ffa67e1d1d87a76b439df", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/94fba9ef4a2191b4526ffa67e1d1d87a76b439df", "committedDate": "2020-01-22T03:19:48Z", "message": "Add support for batch local index ack"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51f599e0a807956b1e95b08a53297ada9911591a", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/51f599e0a807956b1e95b08a53297ada9911591a", "committedDate": "2020-01-31T02:28:12Z", "message": "Fix unit test"}, "afterCommit": {"oid": "201bc3e07847f5a0b97769af3b8e0467fe91d984", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/201bc3e07847f5a0b97769af3b8e0467fe91d984", "committedDate": "2020-02-13T12:12:10Z", "message": "Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MjU1NjM3", "url": "https://github.com/apache/pulsar/pull/6052#pullrequestreview-358255637", "createdAt": "2020-02-13T14:24:32Z", "commit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDoyNDozMlrOFpVrfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoxOTozNVrOFpaSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MTEzMw==", "bodyText": "It seems that a large code section has been locked/unlocked. You might want to consider to move these initialization outside of protect section.\nIsn't ConcurrentSkipListMap already thread safe when you read? Probably only the iteration should be protected. I think the goal is avoid lock a large section of code not to let another thread to wait on.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378891133", "createdAt": "2020-02-13T14:24:32Z", "author": {"login": "zzzming"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -2246,11 +2317,44 @@ public void deleteComplete(int rc, Object ctx) {\n         }\n     }\n \n+    private List<MLDataFormats.BatchDeletedIndexInfo> buildBatchDeletedIndexInfoList() {\n+        lock.readLock().lock();\n+        try {\n+            if (!config.isBatchIndexDeleteEnabled() || batchDeletedIndexes.isEmpty()) {\n+                return Collections.emptyList();\n+            }\n+            MLDataFormats.NestedPositionInfo.Builder nestedPositionBuilder = MLDataFormats.NestedPositionInfo\n+                .newBuilder();\n+            MLDataFormats.BatchDeletedIndexInfo.Builder batchDeletedIndexInfoBuilder = MLDataFormats.BatchDeletedIndexInfo\n+                .newBuilder();\n+            List<MLDataFormats.BatchDeletedIndexInfo> result = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5MzI3OA==", "bodyText": "Ditto. I think only batchDeleteIndexes.get() part should be locked. Again, double check with concurrentSkipList get() if it is already a thread safe data struct in terms of read. I think it should although I have never used this map collection.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378893278", "createdAt": "2020-02-13T14:27:53Z", "author": {"login": "zzzming"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -2631,5 +2735,16 @@ public void trimDeletedEntries(List<Entry> entries) {\n                 || individualDeletedMessages.contains(entry.getLedgerId(), entry.getEntryId()));\n     }\n \n+    @Override\n+    public long[] getDeletedBatchIndexesLongArray(PositionImpl position) {\n+        lock.readLock().lock();\n+        try {\n+            BitSet bitSet = batchDeletedIndexes.get(position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNDQ1Mw==", "bodyText": "How about using stream in Java 8?\nreturn Arrays.stream(a).boxed().collect(Collectors.toList())\nActually the entire function can be\nreturn array == null ? Collections.emptyList() : Arrays.stream(a).boxed().collect(Collectors.toList())\nCollections.emptyList() returns an immutable list however new ArrayList is mutable. So I do not know whether you would like to have a mutable or immutable list. This needs to be clarified.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378934453", "createdAt": "2020-02-13T15:30:56Z", "author": {"login": "zzzming"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SafeCollectionUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Safe collection utils.\n+ */\n+public class SafeCollectionUtils {\n+\n+    public static List<Long> longArrayToList(long[] array) {\n+        if (array == null || array.length == 0) {\n+            return Collections.emptyList();\n+        } else {\n+            List<Long> result = new ArrayList<>(array.length);\n+            for (long l : array) {\n+                result.add(l);\n+            }\n+            return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0NzE0OQ==", "bodyText": "Again consider using stream\nreturn list == null ? new long[0] : list.stream().mapToLong(l->l).toArray()\nProbably there is no need to have a file to deal with primitive type array and list conversion. Does Apache common lang or Guava have library for that?", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378947149", "createdAt": "2020-02-13T15:49:42Z", "author": {"login": "zzzming"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SafeCollectionUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Safe collection utils.\n+ */\n+public class SafeCollectionUtils {\n+\n+    public static List<Long> longArrayToList(long[] array) {\n+        if (array == null || array.length == 0) {\n+            return Collections.emptyList();\n+        } else {\n+            List<Long> result = new ArrayList<>(array.length);\n+            for (long l : array) {\n+                result.add(l);\n+            }\n+            return result;\n+        }\n+    }\n+\n+    public static long[] longListToArray(List<Long> list) {\n+        if (list == null || list.size() == 0) {\n+            return new long[0];\n+        } else {\n+            long[] array = new long[list.size()];\n+            for (int i = 0; i < list.size(); i++) {\n+                array[i] = list.get(i);\n+            }\n+            return array;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NDgwNA==", "bodyText": "Double ;; You might want to do a global replacement since these are in multiple places.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378954804", "createdAt": "2020-02-13T16:00:53Z", "author": {"login": "zzzming"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/api/proto/PulsarApi.java", "diffHunk": "@@ -1209,11 +1214,26 @@ public int getBatchIndex() {\n       return batchIndex_;\n     }\n     \n+    // repeated int64 ackSet = 5;\n+    public static final int ACKSET_FIELD_NUMBER = 5;\n+    private java.util.List<java.lang.Long> ackSet_;\n+    public java.util.List<java.lang.Long>\n+        getAckSetList() {\n+      return ackSet_;\n+    }\n+    public int getAckSetCount() {\n+      return ackSet_.size();\n+    }\n+    public long getAckSet(int index) {\n+      return ackSet_.get(index);\n+    }\n+    \n     private void initFields() {\n       ledgerId_ = 0L;\n       entryId_ = 0L;\n       partition_ = -1;\n       batchIndex_ = -1;\n+      ackSet_ = java.util.Collections.emptyList();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2MjI4OA==", "bodyText": "Would this case be covered if the total number of messages in a batch is greater the allowed number of permits? Or is this not even possible?", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378962288", "createdAt": "2020-02-13T16:12:34Z", "author": {"login": "zzzming"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Consumer.java", "diffHunk": "@@ -219,7 +226,8 @@ public ChannelPromise sendMessages(final List<Entry> entries, EntryBatchSizes ba\n         }\n \n         // reduce permit and increment unackedMsg count with total number of messages in batch-msgs\n-        MESSAGE_PERMITS_UPDATER.addAndGet(this, -totalMessages);\n+        int ackedCount = batchIndexesAcks == null ? 0 : batchIndexesAcks.getTotalAckedIndexCount();\n+        MESSAGE_PERMITS_UPDATER.addAndGet(this, ackedCount - totalMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NjcwMw==", "bodyText": "If this is a feature has to enabled on the broker, is there a way for consumer to know or set such feature is supported? I think the problem comes how to help troubleshooting when both broker and consumer need to support this.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r378966703", "createdAt": "2020-02-13T16:19:35Z", "author": {"login": "zzzming"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -171,6 +171,9 @@\n             + \" affecting the accuracy of the delivery time compared to the scheduled time. Default is 1 second.\")\n     private long delayedDeliveryTickTimeMillis = 1000;\n \n+    @FieldContext(category = CATEGORY_SERVER, doc = \"Whether to enable the acknowledge of batch local index\")\n+    private boolean batchIndexAcknowledgeEnable = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTg0Njc4", "url": "https://github.com/apache/pulsar/pull/6052#pullrequestreview-358584678", "createdAt": "2020-02-13T22:03:17Z", "commit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjowMzoxN1rOFplKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MzoxNVrOFpmJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NDcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            batchIndexAcknowledgeEnable = true\n          \n          \n            \n            batchIndexAcknowledgementEnabled = true", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379144713", "createdAt": "2020-02-13T22:03:17Z", "author": {"login": "sijie"}, "path": "conf/broker.conf", "diffHunk": "@@ -312,6 +312,9 @@ delayedDeliveryEnabled=true\n # Default is 1 second.\n delayedDeliveryTickTimeMillis=1000\n \n+# Whether to enable acknowledge of batch local index.\n+batchIndexAcknowledgeEnable = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NjU3Mw==", "bodyText": "a better name for this feature would be \"acknowledgment at batch index level\". So we can name this setting \"acknowledgmentAtBatchIndexLevelEnabled\".", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379146573", "createdAt": "2020-02-13T22:07:36Z", "author": {"login": "sijie"}, "path": "conf/broker.conf", "diffHunk": "@@ -312,6 +312,9 @@ delayedDeliveryEnabled=true\n # Default is 1 second.\n delayedDeliveryTickTimeMillis=1000\n \n+# Whether to enable acknowledge of batch local index.\n+batchIndexAcknowledgeEnable = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NDcxMw=="}, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NjcyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                long[] getDeletedBatchIndexesLongArray(PositionImpl position);\n          \n          \n            \n                long[] getDeletedBatchIndexesAsLongArray(PositionImpl position);", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379146729", "createdAt": "2020-02-13T22:07:57Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedCursor.java", "diffHunk": "@@ -608,4 +608,9 @@ void asyncFindNewestMatching(FindPositionConstraint constraint, Predicate<Entry>\n      * Trim delete entries for the given entries\n      */\n     void trimDeletedEntries(List<Entry> entries);\n+\n+    /**\n+     * Get deleted batch indexes list for a batch message.\n+     */\n+    long[] getDeletedBatchIndexesLongArray(PositionImpl position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NjkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean batchIndexDeleteEnabled = true;\n          \n          \n            \n                private boolean deletionAtBatchIndexLevelEnabled = true;", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379146912", "createdAt": "2020-02-13T22:08:22Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "diffHunk": "@@ -39,6 +39,8 @@\n \n     private boolean createIfMissing = true;\n     private int maxUnackedRangesToPersist = 10000;\n+    private int maxBatchDeletedIndexToPersist = 10000;\n+    private boolean batchIndexDeleteEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Maintain the indexes deleted status of batch messages that not deleted completely\n          \n          \n            \n                // Maintain the deletion status for batch messages", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379147667", "createdAt": "2020-02-13T22:10:14Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -148,6 +151,10 @@\n         return position;\n     };\n     private final LongPairRangeSet<PositionImpl> individualDeletedMessages;\n+\n+    // Maintain the indexes deleted status of batch messages that not deleted completely", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzgwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // (ledgerId, entryId) -> deleted indexes\n          \n          \n            \n                // (ledgerId, entryId) -> deletion indexes", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379147809", "createdAt": "2020-02-13T22:10:32Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -148,6 +151,10 @@\n         return position;\n     };\n     private final LongPairRangeSet<PositionImpl> individualDeletedMessages;\n+\n+    // Maintain the indexes deleted status of batch messages that not deleted completely\n+    // (ledgerId, entryId) -> deleted indexes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                repeated int64 ackSet = 5;\n          \n          \n            \n                repeated int64 ack_set = 5;\n          \n      \n    \n    \n  \n\nthe naming convention should be consistent.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379151918", "createdAt": "2020-02-13T22:20:30Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -54,6 +54,7 @@ message MessageIdData {\n     required uint64 entryId  = 2;\n     optional int32 partition = 3 [default = -1];\n     optional int32 batch_index = 4 [default = -1];\n+    repeated int64 ackSet = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDk5Nw==", "bodyText": "Why do we need a concurrent bit set?", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379154997", "createdAt": "2020-02-13T22:27:50Z", "author": {"login": "sijie"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PersistentAcknowledgmentsGroupingTracker.java", "diffHunk": "@@ -103,22 +114,48 @@ public void addAcknowledgment(MessageIdImpl msgId, AckType ackType, Map<String,\n             // uncommon condition since it's only used for the compaction subscription.\n             doImmediateAck(msgId, ackType, properties);\n         } else if (ackType == AckType.Cumulative) {\n-            doCumulativeAck(msgId);\n+            doCumulativeAck(msgId, null);\n         } else {\n             // Individual ack\n             pendingIndividualAcks.add(msgId);\n+            pendingIndividualBatchIndexAcks.remove(msgId);\n             if (pendingIndividualAcks.size() >= MAX_ACK_GROUP_SIZE) {\n                 flush();\n             }\n         }\n     }\n \n-    private void doCumulativeAck(MessageIdImpl msgId) {\n+    @Override\n+    public void addBatchIndexAcknowledgment(BatchMessageIdImpl msgId, int batchIndex, int batchSize, AckType ackType, Map<String, Long> properties) {\n+        if (acknowledgementGroupTimeMicros == 0 || !properties.isEmpty()) {\n+            doImmediateBatchIndexAck(msgId, batchIndex, batchSize, ackType, properties);\n+        } else if (ackType == AckType.Cumulative) {\n+            ConcurrentBitSet bitSet = new ConcurrentBitSet(batchSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NzcwOA==", "bodyText": "bookkeeper has a pretty efficient AckSet / WriteSet implementation that can avoid producing a lot of garbages. I think we should leverage the implementation there - https://github.com/apache/bookkeeper/blob/master/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java#L76", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379157708", "createdAt": "2020-02-13T22:34:27Z", "author": {"login": "sijie"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PersistentAcknowledgmentsGroupingTracker.java", "diffHunk": "@@ -57,23 +62,29 @@\n      * Latest cumulative ack sent to broker\n      */\n     private volatile MessageIdImpl lastCumulativeAck = (MessageIdImpl) MessageId.earliest;\n+    private volatile ConcurrentBitSet lastCumulativeAckSet = null;\n     private volatile boolean cumulativeAckFlushRequired = false;\n \n     private static final AtomicReferenceFieldUpdater<PersistentAcknowledgmentsGroupingTracker, MessageIdImpl> LAST_CUMULATIVE_ACK_UPDATER = AtomicReferenceFieldUpdater\n             .newUpdater(PersistentAcknowledgmentsGroupingTracker.class, MessageIdImpl.class, \"lastCumulativeAck\");\n+    private static final AtomicReferenceFieldUpdater<PersistentAcknowledgmentsGroupingTracker, ConcurrentBitSet> LAST_CUMULATIVE_ACK_SET_UPDATER = AtomicReferenceFieldUpdater\n+        .newUpdater(PersistentAcknowledgmentsGroupingTracker.class, ConcurrentBitSet.class, \"lastCumulativeAckSet\");\n+\n \n     /**\n      * This is a set of all the individual acks that the application has issued and that were not already sent to\n      * broker.\n      */\n     private final ConcurrentSkipListSet<MessageIdImpl> pendingIndividualAcks;\n+    private final ConcurrentHashMap<MessageIdImpl, ConcurrentBitSet> pendingIndividualBatchIndexAcks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1ODY5OQ==", "bodyText": "Same comment as I made to client side change. We should consider re-using some of the AckSet implementation in bookkeeper client.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379158699", "createdAt": "2020-02-13T22:37:11Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorImpl.java", "diffHunk": "@@ -148,6 +151,10 @@\n         return position;\n     };\n     private final LongPairRangeSet<PositionImpl> individualDeletedMessages;\n+\n+    // Maintain the indexes deleted status of batch messages that not deleted completely\n+    // (ledgerId, entryId) -> deleted indexes\n+    private final ConcurrentSkipListMap<PositionImpl, BitSet> batchDeletedIndexes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDAxMA==", "bodyText": "A few comments here:\n\nI would prefer calling it delete_set. \"Acknowledgement\" is the concept at the client & broker side. In managed ledger level, we use \"delete\". So it is better to keep the name consistent.", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379160010", "createdAt": "2020-02-13T22:40:51Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/proto/MLDataFormats.proto", "diffHunk": "@@ -78,6 +81,11 @@ message MessageRange {\n     required NestedPositionInfo upperEndpoint = 2;\n }\n \n+message BatchDeletedIndexInfo {\n+    required NestedPositionInfo position = 1;\n+    repeated int64 ackBitSet = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDg1NQ==", "bodyText": "The name is not very clear. I think it is keeping the deletion index for a batched entry. So I would suggest naming it \"BatchedEntryDeletionIndexInfo\"", "url": "https://github.com/apache/pulsar/pull/6052#discussion_r379160855", "createdAt": "2020-02-13T22:43:15Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/proto/MLDataFormats.proto", "diffHunk": "@@ -78,6 +81,11 @@ message MessageRange {\n     required NestedPositionInfo upperEndpoint = 2;\n }\n \n+message BatchDeletedIndexInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23b9e84ac803390747bba80bf76ebcabf87e109"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "335cdff573c6d7c4717f6bf391dc44d8f9ade88f", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/335cdff573c6d7c4717f6bf391dc44d8f9ade88f", "committedDate": "2020-02-19T12:09:07Z", "message": "Introduce BitSetRecyclable that leverage with netty recycler"}, "afterCommit": {"oid": "00f08652c000dc4700761fdc06c6d37e4084f514", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/00f08652c000dc4700761fdc06c6d37e4084f514", "committedDate": "2020-02-19T12:14:36Z", "message": "Introduce BitSetRecyclable that leverage with netty recycler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f69fc22983033c72540bb30f45790e1bb1468381", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/f69fc22983033c72540bb30f45790e1bb1468381", "committedDate": "2020-04-24T07:15:28Z", "message": "Add support for batch local index ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd8eabfceb01251f998630e861f960db0bcab52", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/0bd8eabfceb01251f998630e861f960db0bcab52", "committedDate": "2020-04-24T07:26:15Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8725c7ad4e9fcc50e6f1c7918f60a536d158d2", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/6c8725c7ad4e9fcc50e6f1c7918f60a536d158d2", "committedDate": "2020-04-24T07:26:15Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0799dfd8720d420ae34d95b23b826d3a5929e147", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/0799dfd8720d420ae34d95b23b826d3a5929e147", "committedDate": "2020-04-24T07:26:15Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab09482c608d202922983321a78ef63465a2853", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/cab09482c608d202922983321a78ef63465a2853", "committedDate": "2020-04-24T07:26:15Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e320c6f3393daf0780cc8b1e17f1c8bae6222b63", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/e320c6f3393daf0780cc8b1e17f1c8bae6222b63", "committedDate": "2020-04-24T07:26:15Z", "message": "Generate PulsarApi.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76217ac6147160ef79a7dc5b604ada6604c08f79", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/76217ac6147160ef79a7dc5b604ada6604c08f79", "committedDate": "2020-04-24T07:26:15Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd28770994dc3ba6911838eabb8d633327bf7598", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/dd28770994dc3ba6911838eabb8d633327bf7598", "committedDate": "2020-04-24T07:28:07Z", "message": "Apply comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2b9f707bb1e4e49e8e01ba7f9c5651ee807f43", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/fa2b9f707bb1e4e49e8e01ba7f9c5651ee807f43", "committedDate": "2020-04-24T07:28:08Z", "message": "Apply comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a75e9f653532f724422f3c327ca9d48b5719b1e2", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/a75e9f653532f724422f3c327ca9d48b5719b1e2", "committedDate": "2020-04-24T07:28:08Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa388f3dc85e9f849cba63d7df05c74382660ef8", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/aa388f3dc85e9f849cba63d7df05c74382660ef8", "committedDate": "2020-04-24T07:28:08Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af497bd7077ebeac08b9b6f44face015c94e85ba", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/af497bd7077ebeac08b9b6f44face015c94e85ba", "committedDate": "2020-04-24T07:28:08Z", "message": "Introduce BitSetRecyclable that leverage with netty recycler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26816c02195fc844f0caaa84d1c3038004a01c37", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/26816c02195fc844f0caaa84d1c3038004a01c37", "committedDate": "2020-04-24T07:28:08Z", "message": "Check not null for recycle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae832ffe0951dfbd559e8401820eeb3ed5816a55", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/ae832ffe0951dfbd559e8401820eeb3ed5816a55", "committedDate": "2020-04-24T07:28:08Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a297843b47e143a1a26712847932d897c678c336", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/a297843b47e143a1a26712847932d897c678c336", "committedDate": "2020-04-24T07:28:08Z", "message": "fix tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2794881e7f6e82bfa516c5df164287b381921477", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/2794881e7f6e82bfa516c5df164287b381921477", "committedDate": "2020-02-22T06:47:33Z", "message": "Merge remote-tracking branch 'apache/master' into batch_index_ack"}, "afterCommit": {"oid": "a297843b47e143a1a26712847932d897c678c336", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/a297843b47e143a1a26712847932d897c678c336", "committedDate": "2020-04-24T07:28:08Z", "message": "fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75aec3966e5f02b3f421fcba92bb771871965eeb", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/75aec3966e5f02b3f421fcba92bb771871965eeb", "committedDate": "2020-04-24T08:00:31Z", "message": "Fix test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cca1a5a0c83104d26730408a827331008f9eaee1", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/cca1a5a0c83104d26730408a827331008f9eaee1", "committedDate": "2020-04-24T08:03:06Z", "message": "Remove unused tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36d899ac47a4c1b52a1cbfa080b7ba5c4df4f4db", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/36d899ac47a4c1b52a1cbfa080b7ba5c4df4f4db", "committedDate": "2020-04-24T08:05:54Z", "message": "Remove unused tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994d5c9257d393c15dc369addf626676b534467e", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/994d5c9257d393c15dc369addf626676b534467e", "committedDate": "2020-05-19T09:56:11Z", "message": "Merge remote-tracking branch 'apache/master' into batch_index_ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9929a35ccad0e91d2fd86ff84ddc48de10cc58", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/ef9929a35ccad0e91d2fd86ff84ddc48de10cc58", "committedDate": "2020-05-19T10:18:43Z", "message": "Fix tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Mzk0Mjkx", "url": "https://github.com/apache/pulsar/pull/6052#pullrequestreview-414394291", "createdAt": "2020-05-19T12:29:45Z", "commit": {"oid": "ef9929a35ccad0e91d2fd86ff84ddc48de10cc58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64af907d453ce183a61985429668b8e67b48c196", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/64af907d453ce183a61985429668b8e67b48c196", "committedDate": "2020-05-20T11:40:07Z", "message": "Merge branch 'master' into batch_index_ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6433aaba555ff7cc1cb0be881c352d50d2b39f4", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/d6433aaba555ff7cc1cb0be881c352d50d2b39f4", "committedDate": "2020-05-22T10:21:34Z", "message": "Merge remote-tracking branch 'apache/master' into batch_index_ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f248dc8fd279e220bf3aafab7622080625cf69f5", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/f248dc8fd279e220bf3aafab7622080625cf69f5", "committedDate": "2020-05-27T09:31:31Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f9e7259571244c0c49f8c075b34323084068b6", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/e3f9e7259571244c0c49f8c075b34323084068b6", "committedDate": "2020-05-28T00:27:13Z", "message": "Merge remote-tracking branch 'apache/master' into batch_index_ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f39790e19f8a7904ce5f1e19a432181dc75d4b", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/15f39790e19f8a7904ce5f1e19a432181dc75d4b", "committedDate": "2020-05-28T10:30:08Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d65aa6eb64c91f2c040c4c58f696f3bd4c37b24", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/4d65aa6eb64c91f2c040c4c58f696f3bd4c37b24", "committedDate": "2020-05-29T06:54:44Z", "message": "Merge remote-tracking branch 'apache/master' into batch_index_ack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9789f396182812c6d33de91e9bf1fb1bba55065b", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/9789f396182812c6d33de91e9bf1fb1bba55065b", "committedDate": "2020-05-29T11:52:56Z", "message": "Merge branch 'master' into batch_index_ack"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjc1NTkw", "url": "https://github.com/apache/pulsar/pull/6052#pullrequestreview-422275590", "createdAt": "2020-06-02T01:00:31Z", "commit": {"oid": "9789f396182812c6d33de91e9bf1fb1bba55065b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1465, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}