{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4MjY0MDI5", "number": 8939, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwODo0Nzo0MFrOFEnV0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwODo0Nzo0MFrOFEnV0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzgzMTg0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwODo0Nzo0MFrOIExqxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOTowMDoyMVrOIExzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg3ODk4Mw==", "bodyText": "Please close this PulsarClient", "url": "https://github.com/apache/pulsar/pull/8939#discussion_r541878983", "createdAt": "2020-12-13T08:47:40Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java", "diffHunk": "@@ -858,8 +861,40 @@ public void asyncClose(org.apache.bookkeeper.client.AsyncCallback.CloseCallback\n         consumer.close();\n     }\n \n+\n+    @Test\n+    public void testAvroSchemaProducerConsumerWithSpecifiedReaderAndWriter() throws PulsarClientException {\n+        final String topicName = \"persistent://my-property/my-ns/my-topic1\";\n+        TestMessageObject object = new TestMessageObject();\n+        SchemaReader<TestMessageObject> reader = Mockito.mock(SchemaReader.class);\n+        SchemaWriter<TestMessageObject> writer = Mockito.mock(SchemaWriter.class);\n+        Mockito.when(reader.read(Mockito.any(byte[].class), Mockito.any(byte[].class))).thenReturn(object);\n+        Mockito.when(writer.write(Mockito.any(TestMessageObject.class))).thenReturn(\"fake data\".getBytes(StandardCharsets.UTF_8));\n+        SchemaDefinition<TestMessageObject> schemaDefinition = new SchemaDefinitionBuilderImpl<TestMessageObject>()\n+                .withPojo(TestMessageObject.class)\n+                .withSchemaReader(reader)\n+                .withSchemaWriter(writer)\n+                .build();\n+        Schema<TestMessageObject> schema = Schema.AVRO(schemaDefinition);\n+        PulsarClient client =  PulsarClient.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7b1fe49c47d40b266e7c0ed61774e3771f512f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4MTEzNg==", "bodyText": "Thank you, it has been fixed.", "url": "https://github.com/apache/pulsar/pull/8939#discussion_r541881136", "createdAt": "2020-12-13T09:00:21Z", "author": {"login": "reswqa"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/BrokerClientIntegrationTest.java", "diffHunk": "@@ -858,8 +861,40 @@ public void asyncClose(org.apache.bookkeeper.client.AsyncCallback.CloseCallback\n         consumer.close();\n     }\n \n+\n+    @Test\n+    public void testAvroSchemaProducerConsumerWithSpecifiedReaderAndWriter() throws PulsarClientException {\n+        final String topicName = \"persistent://my-property/my-ns/my-topic1\";\n+        TestMessageObject object = new TestMessageObject();\n+        SchemaReader<TestMessageObject> reader = Mockito.mock(SchemaReader.class);\n+        SchemaWriter<TestMessageObject> writer = Mockito.mock(SchemaWriter.class);\n+        Mockito.when(reader.read(Mockito.any(byte[].class), Mockito.any(byte[].class))).thenReturn(object);\n+        Mockito.when(writer.write(Mockito.any(TestMessageObject.class))).thenReturn(\"fake data\".getBytes(StandardCharsets.UTF_8));\n+        SchemaDefinition<TestMessageObject> schemaDefinition = new SchemaDefinitionBuilderImpl<TestMessageObject>()\n+                .withPojo(TestMessageObject.class)\n+                .withSchemaReader(reader)\n+                .withSchemaWriter(writer)\n+                .build();\n+        Schema<TestMessageObject> schema = Schema.AVRO(schemaDefinition);\n+        PulsarClient client =  PulsarClient.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg3ODk4Mw=="}, "originalCommit": {"oid": "fc7b1fe49c47d40b266e7c0ed61774e3771f512f"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2688, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}