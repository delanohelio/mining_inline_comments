{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDEzMTcz", "number": 6449, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoxMToyM1rOEO42dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoxMToyM1rOEO42dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDQ2OTY2OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoxMToyM1rOGyTFYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoxMToyM1rOGyTFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5NDY1OA==", "bodyText": "Does anyone know what is the point of this line? The logic of sending message to dead letter queue is described within more than twenty lines below as well as message acknowledgment, why is it done twice?", "url": "https://github.com/apache/pulsar/pull/6449#discussion_r455394658", "createdAt": "2020-07-15T22:11:23Z", "author": {"login": "Lanayx"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -511,6 +527,129 @@ boolean markAckForBatchMessage(BatchMessageIdImpl batchMessageId, AckType ackTyp\n         return sendAcknowledge(messageId, ackType, properties, txnImpl);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected CompletableFuture<Void> doReconsumeLater(Message<?> message, AckType ackType,\n+                                                       Map<String,Long> properties, \n+                                                       long delayTime,\n+                                                       TimeUnit unit) {\n+        MessageId messageId = message.getMessageId();\n+        if(messageId instanceof TopicMessageIdImpl) {\n+            messageId = ((TopicMessageIdImpl)messageId).getInnerMessageId();\n+        }\n+        checkArgument(messageId instanceof MessageIdImpl);\n+        if (getState() != State.Ready && getState() != State.Connecting) {\n+            stats.incrementNumAcksFailed();\n+            PulsarClientException exception = new PulsarClientException(\"Consumer not ready. State: \" + getState());\n+            if (AckType.Individual.equals(ackType)) {\n+                onAcknowledge(messageId, exception);\n+            } else if (AckType.Cumulative.equals(ackType)) {\n+                onAcknowledgeCumulative(messageId, exception);\n+            }\n+            return FutureUtil.failedFuture(exception);\n+        }\n+        if (delayTime < 0) {\n+            delayTime = 0;\n+        }\n+        if (retryLetterProducer == null) {\n+            try {\n+                createProducerLock.writeLock().lock();\n+                if (retryLetterProducer == null) {\n+                    retryLetterProducer = client.newProducer(schema)\n+                            .topic(this.deadLetterPolicy.getRetryLetterTopic())\n+                            .enableBatching(false)\n+                            .blockIfQueueFull(false)\n+                            .create();\n+                }\n+            } catch (Exception e) {\n+                log.error(\"Create retry letter producer exception with topic: {}\", deadLetterPolicy.getRetryLetterTopic(), e);\n+            } finally {\n+                createProducerLock.writeLock().unlock();\n+            }\n+        }\n+        if (retryLetterProducer != null) {\n+            try {\n+                MessageImpl<T> retryMessage = null;\n+                String originMessageIdStr = null;\n+                String originTopicNameStr = null;\n+                if (message instanceof TopicMessageImpl) {\n+                    retryMessage = (MessageImpl<T>) ((TopicMessageImpl<T>) message).getMessage();\n+                    originMessageIdStr = ((TopicMessageIdImpl) message.getMessageId()).getInnerMessageId().toString();\n+                    originTopicNameStr = ((TopicMessageIdImpl) message.getMessageId()).getTopicName();\n+                } else if (message instanceof MessageImpl) {\n+                    retryMessage = (MessageImpl<T>) message;\n+                    originMessageIdStr = ((MessageImpl<T>) message).getMessageId().toString();\n+                    originTopicNameStr =  ((MessageImpl<T>) message).getTopicName();\n+                }\n+                SortedMap<String, String> propertiesMap = new TreeMap<>();\n+                int reconsumetimes = 1;\n+                if (message.getProperties() != null) {\n+                    propertiesMap.putAll(message.getProperties());\n+                }\n+\n+                if (propertiesMap.containsKey(RetryMessageUtil.SYSTEM_PROPERTY_RECONSUMETIMES)) {\n+                    reconsumetimes = Integer.valueOf(propertiesMap.get(RetryMessageUtil.SYSTEM_PROPERTY_RECONSUMETIMES));\n+                    reconsumetimes = reconsumetimes + 1;\n+                   \n+                } else {\n+                    propertiesMap.put(RetryMessageUtil.SYSTEM_PROPERTY_REAL_TOPIC, originTopicNameStr);\n+                    propertiesMap.put(RetryMessageUtil.SYSTEM_PROPERTY_ORIGIN_MESSAGE_ID, originMessageIdStr);\n+                }\n+\n+                propertiesMap.put(RetryMessageUtil.SYSTEM_PROPERTY_RECONSUMETIMES, String.valueOf(reconsumetimes));\n+                propertiesMap.put(RetryMessageUtil.SYSTEM_PROPERTY_DELAY_TIME, String.valueOf(unit.toMillis(delayTime)));\n+                \n+               if (reconsumetimes > this.deadLetterPolicy.getMaxRedeliverCount()) {\n+                   processPossibleToDLQ((MessageIdImpl)messageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a5a82529c6d945db1807941076f98c4a9c9bdf4"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1917, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}