{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDk4NTY1", "number": 6187, "title": "[Issue 5904]Support `unload` all partitions of a partitioned topic", "bodyText": "Fixes #5904\nMotivation\nPulsar supports unload a non-partitioned-topic or a partition of a partitioned topic. If there has a partitioned topic with too many partitions, users need to get all partition and unload them one by one. We need to support unload all partition of a partitioned topic.", "createdAt": "2020-02-03T03:11:55Z", "url": "https://github.com/apache/pulsar/pull/6187", "merged": true, "mergeCommit": {"oid": "d35e6c1a711c686b0af8072bfff36b11214825ea"}, "closed": true, "closedAt": "2020-02-16T05:27:52Z", "author": {"login": "ltamber"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAkEQlgH2gAyMzcwMDk4NTY1Ojk4ZGZkNWQzMzQ4YTFkMjZlMTA3MTYwNTIyMDkxNTdlYzBkOGRiN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcECBqGAFqTM1ODU3Mjg0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "98dfd5d3348a1d26e10716052209157ec0d8db7e", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/98dfd5d3348a1d26e10716052209157ec0d8db7e", "committedDate": "2020-02-03T03:07:19Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c690c4773efa6b07323e73c3b858849901cd3c97", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/c690c4773efa6b07323e73c3b858849901cd3c97", "committedDate": "2020-02-03T05:52:33Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDExNzk0", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-352011794", "createdAt": "2020-02-03T04:04:30Z", "commit": {"oid": "98dfd5d3348a1d26e10716052209157ec0d8db7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDowNDozMFrOFkl8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDowNDozMFrOFkl8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxNDczOQ==", "bodyText": "Are these codes to be deleted?", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r373914739", "createdAt": "2020-02-03T04:04:30Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,65 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+//    protected void internalUnloadTopic(boolean authoritative) {\n+//        log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n+//        if (topicName.isGlobal()) {\n+//            validateGlobalNamespaceOwnership(namespaceName);\n+//        }\n+//        unloadTopic(topicName, authoritative);\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98dfd5d3348a1d26e10716052209157ec0d8db7e"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTI5ODQ4", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-352129848", "createdAt": "2020-02-03T09:51:00Z", "commit": {"oid": "c690c4773efa6b07323e73c3b858849901cd3c97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MTowMFrOFkrlaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1MTowMFrOFkrlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNzE0NQ==", "bodyText": "validateAdminAccessForTenant or lower validate maybe better?", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r374007145", "createdAt": "2020-02-03T09:51:00Z", "author": {"login": "jiazhai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,65 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+//    protected void internalUnloadTopic(boolean authoritative) {\n+//        log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n+//        if (topicName.isGlobal()) {\n+//            validateGlobalNamespaceOwnership(namespaceName);\n+//        }\n+//        unloadTopic(topicName, authoritative);\n+//    }\n+\n+    protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {\n         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n-        unloadTopic(topicName, authoritative);\n+\n+        PartitionedTopicMetadata partitionMetadata = getPartitionedTopicMetadata(topicName, authoritative, false);\n+        if (partitionMetadata.partitions > 0) {\n+            final List<CompletableFuture<Void>> futures = Lists.newArrayList();\n+\n+            for (int i = 0; i < partitionMetadata.partitions; i++) {\n+                TopicName topicNamePartition = topicName.getPartition(i);\n+                try {\n+                    futures.add(pulsar().getAdminClient().topics().unloadAsync(topicNamePartition.toString()));\n+                } catch (Exception e) {\n+                    log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicNamePartition, e);\n+                    asyncResponse.resume(new RestException(e));\n+                    return;\n+                }\n+            }\n+\n+            FutureUtil.waitForAll(futures).handle((result, exception) -> {\n+                if (exception != null) {\n+                    Throwable t = exception.getCause();\n+                    if (t instanceof NotFoundException) {\n+                        asyncResponse.resume(new RestException(Status.NOT_FOUND, t.getMessage()));\n+                        return null;\n+                    } else {\n+                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName, exception);\n+                        asyncResponse.resume(new RestException(exception));\n+                        return null;\n+                    }\n+                }\n+\n+                asyncResponse.resume(Response.noContent().build());\n+                return null;\n+            });\n+        } else {\n+            validateSuperUserAccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690c4773efa6b07323e73c3b858849901cd3c97"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTMxMDg0", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-352131084", "createdAt": "2020-02-03T09:52:48Z", "commit": {"oid": "c690c4773efa6b07323e73c3b858849901cd3c97"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "416b0a01ef63659a5349737fbbbb39c902d2f3a6", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/416b0a01ef63659a5349737fbbbb39c902d2f3a6", "committedDate": "2020-02-03T11:09:21Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a8d9c0da890bc09836f84b98bf653f22f18541", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/86a8d9c0da890bc09836f84b98bf653f22f18541", "committedDate": "2020-02-03T11:46:08Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a5c65abfb20a74622aaef3503a11996242a290", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/d8a5c65abfb20a74622aaef3503a11996242a290", "committedDate": "2020-02-03T12:04:04Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjc3Nzkx", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-352277791", "createdAt": "2020-02-03T14:08:35Z", "commit": {"oid": "d8a5c65abfb20a74622aaef3503a11996242a290"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjQ0MDY5", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-353244069", "createdAt": "2020-02-04T19:32:25Z", "commit": {"oid": "d8a5c65abfb20a74622aaef3503a11996242a290"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTozMjoyNVrOFlgv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTozMzo0MVrOFlgyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3ODE2Mg==", "bodyText": "AsyncResponse indicates that this method is an async operation. So can we implement this method in an async way?", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r374878162", "createdAt": "2020-02-04T19:32:25Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,56 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+    protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {\n         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n-        unloadTopic(topicName, authoritative);\n+\n+        PartitionedTopicMetadata partitionMetadata = getPartitionedTopicMetadata(topicName, authoritative, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a5c65abfb20a74622aaef3503a11996242a290"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3ODc3OQ==", "bodyText": "If this is already an async method, can you put the logic in the callback?", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r374878779", "createdAt": "2020-02-04T19:33:41Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,56 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+    protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {\n         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n-        unloadTopic(topicName, authoritative);\n+\n+        PartitionedTopicMetadata partitionMetadata = getPartitionedTopicMetadata(topicName, authoritative, false);\n+        if (partitionMetadata.partitions > 0) {\n+            final List<CompletableFuture<Void>> futures = Lists.newArrayList();\n+\n+            for (int i = 0; i < partitionMetadata.partitions; i++) {\n+                TopicName topicNamePartition = topicName.getPartition(i);\n+                try {\n+                    futures.add(pulsar().getAdminClient().topics().unloadAsync(topicNamePartition.toString()));\n+                } catch (Exception e) {\n+                    log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicNamePartition, e);\n+                    asyncResponse.resume(new RestException(e));\n+                    return;\n+                }\n+            }\n+\n+            FutureUtil.waitForAll(futures).handle((result, exception) -> {\n+                if (exception != null) {\n+                    Throwable t = exception.getCause();\n+                    if (t instanceof NotFoundException) {\n+                        asyncResponse.resume(new RestException(Status.NOT_FOUND, t.getMessage()));\n+                    } else {\n+                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName, exception);\n+                        asyncResponse.resume(new RestException(exception));\n+                    }\n+                    return null;\n+                }\n+\n+                asyncResponse.resume(Response.noContent().build());\n+                return null;\n+            });\n+        } else {\n+            validateAdminAccessForTenant(topicName.getTenant());\n+            validateTopicOwnership(topicName, authoritative);\n+\n+            Topic topic = getTopicReference(topicName);\n+            try {\n+                topic.close(false).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a5c65abfb20a74622aaef3503a11996242a290"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/53e49dc320d915b97d9f275d6030dbbc734e84d5", "committedDate": "2020-02-06T16:07:15Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODY3MzEx", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-354867311", "createdAt": "2020-02-07T00:34:42Z", "commit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDozNDo0MlrOFmu6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDozODoyOVrOFmu-MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1ODc0OQ==", "bodyText": "Don't we need to return here?", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r376158749", "createdAt": "2020-02-07T00:34:42Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java", "diffHunk": "@@ -552,6 +552,36 @@ protected ZooKeeperChildrenCache failureDomainListCache() {\n         return pulsar().getConfigurationCache().failureDomainListCache();\n     }\n \n+    protected CompletableFuture<PartitionedTopicMetadata> getPartitionedTopicMetadataAsync(\n+            TopicName topicName, boolean authoritative, boolean checkAllowAutoCreation) {\n+        validateClusterOwnership(topicName.getCluster());\n+        // validates global-namespace contains local/peer cluster: if peer/local cluster present then lookup can\n+        // serve/redirect request else fail partitioned-metadata-request so, client fails while creating\n+        // producer/consumer\n+        validateGlobalNamespaceOwnership(topicName.getNamespaceObject());\n+\n+        CompletableFuture<PartitionedTopicMetadata> future = new CompletableFuture<>();\n+\n+        try {\n+            checkConnect(topicName);\n+        } catch (WebApplicationException e) {\n+            validateAdminAccessForTenant(topicName.getTenant());\n+        } catch (Exception e) {\n+            // unknown error marked as internal server error\n+            log.warn(\"Unexpected error while authorizing lookup. topic={}, role={}. Error: {}\", topicName,\n+                    clientAppId(), e.getMessage(), e);\n+            future.completeExceptionally(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1ODkzNg==", "bodyText": "line 577 and line 579 reinitialize a completable future. so I don't think we need to initialize here.", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r376158936", "createdAt": "2020-02-07T00:35:32Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/AdminResource.java", "diffHunk": "@@ -552,6 +552,36 @@ protected ZooKeeperChildrenCache failureDomainListCache() {\n         return pulsar().getConfigurationCache().failureDomainListCache();\n     }\n \n+    protected CompletableFuture<PartitionedTopicMetadata> getPartitionedTopicMetadataAsync(\n+            TopicName topicName, boolean authoritative, boolean checkAllowAutoCreation) {\n+        validateClusterOwnership(topicName.getCluster());\n+        // validates global-namespace contains local/peer cluster: if peer/local cluster present then lookup can\n+        // serve/redirect request else fail partitioned-metadata-request so, client fails while creating\n+        // producer/consumer\n+        validateGlobalNamespaceOwnership(topicName.getNamespaceObject());\n+\n+        CompletableFuture<PartitionedTopicMetadata> future = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1OTcwNQ==", "bodyText": "this should be implemented in an async way.", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r376159705", "createdAt": "2020-02-07T00:38:10Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,67 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+    protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {\n         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n-        unloadTopic(topicName, authoritative);\n+\n+        getPartitionedTopicMetadataAsync(topicName, authoritative, false)\n+                .whenComplete((metadata, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        if (metadata.partitions > 0) {\n+                            final List<CompletableFuture<Void>> futures = Lists.newArrayList();\n+\n+                            for (int i = 0; i < metadata.partitions; i++) {\n+                                TopicName topicNamePartition = topicName.getPartition(i);\n+                                try {\n+                                    futures.add(pulsar().getAdminClient().topics().unloadAsync(topicNamePartition.toString()));\n+                                } catch (Exception e) {\n+                                    log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicNamePartition, e);\n+                                    asyncResponse.resume(new RestException(e));\n+                                    return;\n+                                }\n+                            }\n+\n+                            FutureUtil.waitForAll(futures).handle((result, exception) -> {\n+                                if (exception != null) {\n+                                    Throwable t = exception.getCause();\n+                                    if (t instanceof NotFoundException) {\n+                                        asyncResponse.resume(new RestException(Status.NOT_FOUND, t.getMessage()));\n+                                    } else {\n+                                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName, exception);\n+                                        asyncResponse.resume(new RestException(exception));\n+                                    }\n+                                    return null;\n+                                }\n+\n+                                asyncResponse.resume(Response.noContent().build());\n+                                return null;\n+                            });\n+                        } else {\n+                            validateAdminAccessForTenant(topicName.getTenant());\n+                            validateTopicOwnership(topicName, authoritative);\n+\n+                            Topic topic = getTopicReference(topicName);\n+                            try {\n+                                topic.close(false).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1OTc5Mw==", "bodyText": "Fix indention", "url": "https://github.com/apache/pulsar/pull/6187#discussion_r376159793", "createdAt": "2020-02-07T00:38:29Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -655,12 +655,67 @@ protected void internalDeletePartitionedTopic(AsyncResponse asyncResponse, boole\n         });\n     }\n \n-    protected void internalUnloadTopic(boolean authoritative) {\n+    protected void internalUnloadTopic(AsyncResponse asyncResponse, boolean authoritative) {\n         log.info(\"[{}] Unloading topic {}\", clientAppId(), topicName);\n         if (topicName.isGlobal()) {\n             validateGlobalNamespaceOwnership(namespaceName);\n         }\n-        unloadTopic(topicName, authoritative);\n+\n+        getPartitionedTopicMetadataAsync(topicName, authoritative, false)\n+                .whenComplete((metadata, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        if (metadata.partitions > 0) {\n+                            final List<CompletableFuture<Void>> futures = Lists.newArrayList();\n+\n+                            for (int i = 0; i < metadata.partitions; i++) {\n+                                TopicName topicNamePartition = topicName.getPartition(i);\n+                                try {\n+                                    futures.add(pulsar().getAdminClient().topics().unloadAsync(topicNamePartition.toString()));\n+                                } catch (Exception e) {\n+                                    log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicNamePartition, e);\n+                                    asyncResponse.resume(new RestException(e));\n+                                    return;\n+                                }\n+                            }\n+\n+                            FutureUtil.waitForAll(futures).handle((result, exception) -> {\n+                                if (exception != null) {\n+                                    Throwable t = exception.getCause();\n+                                    if (t instanceof NotFoundException) {\n+                                        asyncResponse.resume(new RestException(Status.NOT_FOUND, t.getMessage()));\n+                                    } else {\n+                                        log.error(\"[{}] Failed to unload topic {}\", clientAppId(), topicName, exception);\n+                                        asyncResponse.resume(new RestException(exception));\n+                                    }\n+                                    return null;\n+                                }\n+\n+                                asyncResponse.resume(Response.noContent().build());\n+                                return null;\n+                            });\n+                        } else {\n+                            validateAdminAccessForTenant(topicName.getTenant());\n+                            validateTopicOwnership(topicName, authoritative);\n+\n+                            Topic topic = getTopicReference(topicName);\n+                            try {\n+                                topic.close(false).get();\n+                                asyncResponse.resume(Response.noContent().build());\n+                                log.info(\"[{}] Successfully unloaded topic {}\", clientAppId(), topicName);\n+                            } catch (Exception e) {\n+                                log.error(\"[{}] Failed to unload topic {}, {}\", clientAppId(), topicName, e.getMessage(), e);\n+                                asyncResponse.resume(new RestException(e));\n+                            }\n+                        }\n+                    }\n+                }).exceptionally(t -> {\n+                    Throwable th = t.getCause();\n+                    asyncResponse.resume(new RestException(th));\n+                    return null;\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e49dc320d915b97d9f275d6030dbbc734e84d5"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7192f3327f96ac6f10b28128d47d01dc35d372b0", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/7192f3327f96ac6f10b28128d47d01dc35d372b0", "committedDate": "2020-02-07T05:39:38Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ad179995340294e09af658a1de5a5489abf9f4", "author": {"user": {"login": "ltamber", "name": null}}, "url": "https://github.com/apache/pulsar/commit/b1ad179995340294e09af658a1de5a5489abf9f4", "committedDate": "2020-02-12T08:02:26Z", "message": "Support `unload` all partitions of a partitioned topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTcyODQx", "url": "https://github.com/apache/pulsar/pull/6187#pullrequestreview-358572841", "createdAt": "2020-02-13T21:43:24Z", "commit": {"oid": "b1ad179995340294e09af658a1de5a5489abf9f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1367, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}