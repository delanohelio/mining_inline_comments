{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODU3NDA1", "number": 7747, "title": "[Issue 2688]Support set retention on topic level.", "bodyText": "Motivation\nSupport set retention quota on topic level.\nBased on the system topic function.\nModifications\nSupport get-retention on topic level.\nSupport set-retention on topic level.\nSupport remove-retention on topic level.\nVerifying this change\nThis change added tests and can be verified as follows:\n\ntest set topic retention\ntest remove topic retention\ntest get topic retention\ntest disabled topic retention\ntest topic retention parameters are valid\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: (don't know)\nThe default values of configurations: (yes / no)\nThe wire protocol: (yes / no)\nThe rest endpoints: (yes / no)\nThe admin cli options: (yes)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (docs / JavaDocs)", "createdAt": "2020-08-04T15:56:44Z", "url": "https://github.com/apache/pulsar/pull/7747", "merged": true, "mergeCommit": {"oid": "824cb08b40526d66ed447b9fc1d1f41aebca5dd3"}, "closed": true, "closedAt": "2020-08-11T00:57:21Z", "author": {"login": "jianyun8023"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7xiy1ABqjM2MjI2OTY4MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-cxeTAFqTQ2NjU5NDU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fdcd1106c106ac06e5c50441527e959fc7ece5f", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/1fdcd1106c106ac06e5c50441527e959fc7ece5f", "committedDate": "2020-08-04T22:13:01Z", "message": "Support remove retention on topic level."}, "afterCommit": {"oid": "e2246077e093065a806fb8549c9710ce8cbbad0a", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/e2246077e093065a806fb8549c9710ce8cbbad0a", "committedDate": "2020-08-05T02:10:42Z", "message": "Fix and rename to `TopicPoliciesTest`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2246077e093065a806fb8549c9710ce8cbbad0a", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/e2246077e093065a806fb8549c9710ce8cbbad0a", "committedDate": "2020-08-05T02:10:42Z", "message": "Fix and rename to `TopicPoliciesTest`"}, "afterCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/e64936a09ceef15e7f5121b498e8fc9bae3a644d", "committedDate": "2020-08-05T14:20:02Z", "message": "Fix and rename to `TopicPoliciesTest`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTkwNDU3", "url": "https://github.com/apache/pulsar/pull/7747#pullrequestreview-462190457", "createdAt": "2020-08-06T05:07:16Z", "commit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTowNzoxNlrOG8jdyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTowODo0MVrOG8jfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODgxMQ==", "bodyText": "minor: for specified topic", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r466148811", "createdAt": "2020-08-06T05:07:16Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1032,6 +1033,72 @@ public void removeBacklogQuota(@Suspended final AsyncResponse asyncResponse, @Pa\n         internalRemoveBacklogQuota(asyncResponse, backlogQuotaType);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/retention\")\n+    @ApiOperation(value = \"Get retention config on a topic.\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\") })\n+    public void getRetention(@Suspended final AsyncResponse asyncResponse,\n+            @PathParam(\"tenant\") String tenant,\n+            @PathParam(\"namespace\") String namespace,\n+            @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            internalGetRetention(asyncResponse);\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/retention\")\n+    @ApiOperation(value = \"Set retention configuration on a topic.\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Retention Quota must exceed backlog quota\") })\n+    public void setRetention(@Suspended final AsyncResponse asyncResponse,\n+            @PathParam(\"tenant\") String tenant,\n+            @PathParam(\"namespace\") String namespace,\n+            @PathParam(\"topic\") @Encoded String encodedTopic,\n+            @ApiParam(value = \"Retention policies for the specified namespace\") RetentionPolicies retention) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODg0Nw==", "bodyText": "minor: should remove this.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r466148847", "createdAt": "2020-08-06T05:07:26Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1032,6 +1033,72 @@ public void removeBacklogQuota(@Suspended final AsyncResponse asyncResponse, @Pa\n         internalRemoveBacklogQuota(asyncResponse, backlogQuotaType);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/retention\")\n+    @ApiOperation(value = \"Get retention config on a topic.\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\") })\n+    public void getRetention(@Suspended final AsyncResponse asyncResponse,\n+            @PathParam(\"tenant\") String tenant,\n+            @PathParam(\"namespace\") String namespace,\n+            @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            internalGetRetention(asyncResponse);\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/retention\")\n+    @ApiOperation(value = \"Set retention configuration on a topic.\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Retention Quota must exceed backlog quota\") })\n+    public void setRetention(@Suspended final AsyncResponse asyncResponse,\n+            @PathParam(\"tenant\") String tenant,\n+            @PathParam(\"namespace\") String namespace,\n+            @PathParam(\"topic\") @Encoded String encodedTopic,\n+            @ApiParam(value = \"Retention policies for the specified namespace\") RetentionPolicies retention) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            internalSetRetention(asyncResponse, retention);\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/retention\")\n+    @ApiOperation(value = \"Remove retention configuration on a topic.\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405, message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Retention Quota must exceed backlog quota\") })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTAyMg==", "bodyText": "Is this backlog quota added by mistake.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r466149022", "createdAt": "2020-08-06T05:08:12Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesTest.java", "diffHunk": "@@ -86,123 +71,172 @@ public void cleanup() throws Exception {\n     public void testSetBacklogQuota() throws Exception {\n \n         BacklogQuota backlogQuota = new BacklogQuota(1024, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, testTopic);\n \n-        admin.topics().setBacklogQuota(backlogQuotaTopic, backlogQuota);\n-        log.info(\"Backlog quota set success on topic: {}\", backlogQuotaTopic);\n+        admin.topics().setBacklogQuota(testTopic, backlogQuota);\n+        log.info(\"Backlog quota set success on topic: {}\", testTopic);\n \n         Thread.sleep(3000);\n-        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(backlogQuotaTopic)\n+        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(testTopic)\n                 .get(BacklogQuota.BacklogQuotaType.destination_storage);\n-        log.info(\"Backlog quota {} get on topic: {}\", getBacklogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota {} get on topic: {}\", getBacklogQuota, testTopic);\n         Assert.assertEquals(getBacklogQuota, backlogQuota);\n \n         BacklogQuotaManager backlogQuotaManager = pulsar.getBrokerService().getBacklogQuotaManager();\n-        BacklogQuota backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(backlogQuotaTopic));\n-        log.info(\"Backlog quota {} in backlog quota manager on topic: {}\", backlogQuotaInManager, backlogQuotaTopic);\n+        BacklogQuota backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(testTopic));\n+        log.info(\"Backlog quota {} in backlog quota manager on topic: {}\", backlogQuotaInManager, testTopic);\n         Assert.assertEquals(backlogQuotaInManager, backlogQuota);\n \n-        admin.topics().deletePartitionedTopic(backlogQuotaTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n \n     @Test\n     public void testRemoveBacklogQuota() throws Exception {\n         BacklogQuota backlogQuota = new BacklogQuota(1024, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n-        admin.topics().setBacklogQuota(backlogQuotaTopic, backlogQuota);\n-        log.info(\"Backlog quota set success on topic: {}\", backlogQuotaTopic);\n+        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, testTopic);\n+        admin.topics().setBacklogQuota(testTopic, backlogQuota);\n+        log.info(\"Backlog quota set success on topic: {}\", testTopic);\n \n         Thread.sleep(3000);\n-        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(backlogQuotaTopic)\n+        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(testTopic)\n                 .get(BacklogQuota.BacklogQuotaType.destination_storage);\n-        log.info(\"Backlog quota {} get on topic: {}\", getBacklogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota {} get on topic: {}\", getBacklogQuota, testTopic);\n         Assert.assertEquals(backlogQuota, getBacklogQuota);\n \n         BacklogQuotaManager backlogQuotaManager = pulsar.getBrokerService().getBacklogQuotaManager();\n-        BacklogQuota backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(backlogQuotaTopic));\n-        log.info(\"Backlog quota {} in backlog quota manager on topic: {}\", backlogQuotaInManager, backlogQuotaTopic);\n+        BacklogQuota backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(testTopic));\n+        log.info(\"Backlog quota {} in backlog quota manager on topic: {}\", backlogQuotaInManager, testTopic);\n         Assert.assertEquals(backlogQuota, backlogQuotaInManager);\n \n-        admin.topics().removeBacklogQuota(backlogQuotaTopic);\n-        getBacklogQuota = admin.topics().getBacklogQuotaMap(backlogQuotaTopic)\n+        admin.topics().removeBacklogQuota(testTopic);\n+        getBacklogQuota = admin.topics().getBacklogQuotaMap(testTopic)\n                 .get(BacklogQuota.BacklogQuotaType.destination_storage);\n-        log.info(\"Backlog quota {} get on topic: {} after remove\", getBacklogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota {} get on topic: {} after remove\", getBacklogQuota, testTopic);\n         Assert.assertNull(getBacklogQuota);\n \n-        backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(backlogQuotaTopic));\n+        backlogQuotaInManager = backlogQuotaManager.getBacklogQuota(TopicName.get(testTopic));\n         log.info(\"Backlog quota {} in backlog quota manager on topic: {} after remove\", backlogQuotaInManager,\n-                backlogQuotaTopic);\n+                testTopic);\n         Assert.assertEquals(backlogQuotaManager.getDefaultQuota(), backlogQuotaInManager);\n \n-        admin.topics().deletePartitionedTopic(backlogQuotaTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n \n     @Test\n-    public void testCheckQuota() throws Exception {\n+    public void testCheckBlcklogQuota() throws Exception {\n         RetentionPolicies retentionPolicies = new RetentionPolicies(10, 10);\n-        String namespace = TopicName.get(backlogQuotaTopic).getNamespace();\n+        String namespace = TopicName.get(testTopic).getNamespace();\n         admin.namespaces().setRetention(namespace, retentionPolicies);\n \n         BacklogQuota backlogQuota =\n                 new BacklogQuota(10 * 1024 * 1024, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, testTopic);\n         try {\n-            admin.topics().setBacklogQuota(backlogQuotaTopic, backlogQuota);\n+            admin.topics().setBacklogQuota(testTopic, backlogQuota);\n             Assert.fail();\n         } catch (PulsarAdminException e) {\n             Assert.assertEquals(e.getStatusCode(), 412);\n         }\n         Thread.sleep(3000);\n         backlogQuota =\n                 new BacklogQuota(10 * 1024 * 1024 + 1, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, testTopic);\n         try {\n-            admin.topics().setBacklogQuota(backlogQuotaTopic, backlogQuota);\n+            admin.topics().setBacklogQuota(testTopic, backlogQuota);\n             Assert.fail();\n         } catch (PulsarAdminException e) {\n             Assert.assertEquals(e.getStatusCode(), 412);\n         }\n         Thread.sleep(3000);\n         backlogQuota =\n                 new BacklogQuota(10 * 1024 * 1024 - 1, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n-        admin.topics().setBacklogQuota(backlogQuotaTopic, backlogQuota);\n+        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, testTopic);\n+        admin.topics().setBacklogQuota(testTopic, backlogQuota);\n         Thread.sleep(3000);\n-        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(backlogQuotaTopic)\n+        BacklogQuota getBacklogQuota = admin.topics().getBacklogQuotaMap(testTopic)\n                 .get(BacklogQuota.BacklogQuotaType.destination_storage);\n-        log.info(\"Backlog quota {} get on topic: {} after remove\", getBacklogQuota, backlogQuotaTopic);\n+        log.info(\"Backlog quota {} get on topic: {} after remove\", getBacklogQuota, testTopic);\n         Assert.assertEquals(getBacklogQuota, backlogQuota);\n \n-        admin.topics().deletePartitionedTopic(backlogQuotaTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n \n     @Test\n-    public void testBacklogQuotaDisabled() throws Exception {\n-        disableTopicLevelPolicies();\n-        admin.topics().createPartitionedTopic(backlogQuotaTopic, 2);\n-\n-        BacklogQuota backlogQuota = new BacklogQuota(1024, BacklogQuota.RetentionPolicy.consumer_backlog_eviction);\n-        log.info(\"Backlog quota: {} will set to the topic: {}\", backlogQuota, backlogQuotaTopic);\n+    public void testCheckRetention() throws Exception {\n+        BacklogQuota backlogQuota =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTEwMw==", "bodyText": "Should this be set retention for all messages on a topic?", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r466149103", "createdAt": "2020-08-06T05:08:32Z", "author": {"login": "MarvinCai"}, "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Topics.java", "diffHunk": "@@ -1433,4 +1434,142 @@ void createSubscription(String topic, String subscriptionName, MessageId message\n      *             Unexpected error\n      */\n     void removeBacklogQuota(String topic) throws PulsarAdminException;\n+\n+    /**\n+     * Set the retention configuration for all the topics on a topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTEzMg==", "bodyText": "I think the example here might confuse people, e.g. 3h, 2d, might make people think they can provide retention with different time unit, but what we expect here is only in minutes.\nSame for retention size that we only expect in MB.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r466149132", "createdAt": "2020-08-06T05:08:41Z", "author": {"login": "MarvinCai"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java", "diffHunk": "@@ -880,4 +884,65 @@ void run() throws PulsarAdminException {\n             admin.topics().removeBacklogQuota(persistentTopic);\n         }\n     }\n+\n+    @Parameters(commandDescription = \"Get the retention policy for a topic\")\n+    private class GetRetention extends CliCommand {\n+        @Parameter(description = \"persistent://tenant/namespace/topic\", required = true)\n+        private java.util.List<String> params;\n+\n+        @Override\n+        void run() throws PulsarAdminException {\n+            String persistentTopic = validatePersistentTopic(params);\n+            print(admin.topics().getRetention(persistentTopic));\n+        }\n+    }\n+\n+    @Parameters(commandDescription = \"Set the retention policy for a topic\")\n+    private class SetRetention extends CliCommand {\n+        @Parameter(description = \"persistent://tenant/namespace/topic\", required = true)\n+        private java.util.List<String> params;\n+\n+        @Parameter(names = { \"--time\",\n+                \"-t\" }, description = \"Retention time in minutes (or minutes, hours,days,weeks eg: 100m, 3h, 2d, 5w). \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b133646d1747901d6e8a547d85bef998d9be5899", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/b133646d1747901d6e8a547d85bef998d9be5899", "committedDate": "2020-08-06T06:56:50Z", "message": "Support set retention on topic level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c8d4dcbf74e335aab63cc9d38c409b139f0d00", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/74c8d4dcbf74e335aab63cc9d38c409b139f0d00", "committedDate": "2020-08-06T06:56:50Z", "message": "Support remove retention on topic level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477d08a70e9043f455ea2079062f964c248c26f3", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/477d08a70e9043f455ea2079062f964c248c26f3", "committedDate": "2020-08-06T06:56:51Z", "message": "Fix and rename to `TopicPoliciesTest`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73913329298d23cc58f296971115a28d0dc8d90", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/e73913329298d23cc58f296971115a28d0dc8d90", "committedDate": "2020-08-06T09:49:23Z", "message": "fix comment and modified test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd777142809dc73c243dba853da5eaf0420acbc", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/dbd777142809dc73c243dba853da5eaf0420acbc", "committedDate": "2020-08-06T09:52:22Z", "message": "fix log class\uff0cbecause `TopicBacklogQuotaTest` renamed to `TopicPoliciesTest`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e64936a09ceef15e7f5121b498e8fc9bae3a644d", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/e64936a09ceef15e7f5121b498e8fc9bae3a644d", "committedDate": "2020-08-05T14:20:02Z", "message": "Fix and rename to `TopicPoliciesTest`"}, "afterCommit": {"oid": "dbd777142809dc73c243dba853da5eaf0420acbc", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/dbd777142809dc73c243dba853da5eaf0420acbc", "committedDate": "2020-08-06T09:52:22Z", "message": "fix log class\uff0cbecause `TopicBacklogQuotaTest` renamed to `TopicPoliciesTest`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTY2MjA2", "url": "https://github.com/apache/pulsar/pull/7747#pullrequestreview-464166206", "createdAt": "2020-08-10T12:00:09Z", "commit": {"oid": "dbd777142809dc73c243dba853da5eaf0420acbc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjowMDowOVrOG-Lnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjowMTozOVrOG-LqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NTI2Mw==", "bodyText": "complete the asyncResponse here.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r467855263", "createdAt": "2020-08-10T12:00:09Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2156,6 +2158,96 @@ protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n         internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n     }\n \n+    protected void internalGetRetention(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<RetentionPolicies> retention = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getRetentionPolicies);\n+        if (!retention.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }else {\n+            asyncResponse.resume(retention.get());\n+        }\n+    }\n+\n+    protected void internalSetRetention(AsyncResponse asyncResponse,\n+            RetentionPolicies retention) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        if (retention == null) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName)\n+                .orElseGet(TopicPolicies::new);\n+        BacklogQuota backlogQuota =\n+                    topicPolicies.getBackLogQuotaMap().get(BacklogQuota.BacklogQuotaType.destination_storage.name());\n+        if (backlogQuota == null){\n+            Policies policies = getNamespacePolicies(topicName.getNamespaceObject());\n+            backlogQuota = policies.backlog_quota_map.get(BacklogQuota.BacklogQuotaType.destination_storage);\n+        }\n+        if(!checkBacklogQuota(backlogQuota, retention)){\n+            log.warn(\n+                    \"[{}] Failed to update retention quota configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd777142809dc73c243dba853da5eaf0420acbc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1NTk3Nw==", "bodyText": "Here also throw exceptions, you can pass the asyncResponse to this method and resume the asyncResponse in the checkTopicLevelPolicyEnable . Please check all.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r467855977", "createdAt": "2020-08-10T12:01:39Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2156,6 +2158,96 @@ protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n         internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n     }\n \n+    protected void internalGetRetention(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd777142809dc73c243dba853da5eaf0420acbc"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8f10438f372628e8f1fe51ddd88200777a8d5de", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/c8f10438f372628e8f1fe51ddd88200777a8d5de", "committedDate": "2020-08-10T12:58:11Z", "message": "modify the exception is throw"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/bebd6f7455e8af5d512ca40c476ac400cbf08dac", "committedDate": "2020-08-10T13:21:01Z", "message": "modify the use of asyncResponse"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbfcdf2201a6b944426bbcea456b73f9cd6c1412", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/fbfcdf2201a6b944426bbcea456b73f9cd6c1412", "committedDate": "2020-08-10T13:18:01Z", "message": "modify the use of asyncResponse"}, "afterCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/bebd6f7455e8af5d512ca40c476ac400cbf08dac", "committedDate": "2020-08-10T13:21:01Z", "message": "modify the use of asyncResponse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjY5NjQ1", "url": "https://github.com/apache/pulsar/pull/7747#pullrequestreview-464669645", "createdAt": "2020-08-11T00:19:54Z", "commit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTk0NTQ1", "url": "https://github.com/apache/pulsar/pull/7747#pullrequestreview-466594545", "createdAt": "2020-08-13T09:27:10Z", "commit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToyNzoxMFrOHADjPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTozMzozM1rOHADxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMDIyMw==", "bodyText": "checkTopicLevelPolicyEnable() is also called by getTopicPolicies(), so we can delete it here.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r469820223", "createdAt": "2020-08-13T09:27:10Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2156,6 +2158,67 @@ protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n         internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n     }\n \n+    protected void internalGetRetention(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMDczNg==", "bodyText": "Same to the above.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r469820736", "createdAt": "2020-08-13T09:28:07Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2156,6 +2158,67 @@ protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n         internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n     }\n \n+    protected void internalGetRetention(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<RetentionPolicies> retention = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getRetentionPolicies);\n+        if (!retention.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }else {\n+            asyncResponse.resume(retention.get());\n+        }\n+    }\n+\n+    protected CompletableFuture<Void> internalSetRetention(RetentionPolicies retention) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMDgzNQ==", "bodyText": "Same to the above.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r469820835", "createdAt": "2020-08-13T09:28:17Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2156,6 +2158,67 @@ protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n         internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n     }\n \n+    protected void internalGetRetention(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<RetentionPolicies> retention = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getRetentionPolicies);\n+        if (!retention.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }else {\n+            asyncResponse.resume(retention.get());\n+        }\n+    }\n+\n+    protected CompletableFuture<Void> internalSetRetention(RetentionPolicies retention) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        if (retention == null) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName)\n+                .orElseGet(TopicPolicies::new);\n+        BacklogQuota backlogQuota =\n+                    topicPolicies.getBackLogQuotaMap().get(BacklogQuota.BacklogQuotaType.destination_storage.name());\n+        if (backlogQuota == null){\n+            Policies policies = getNamespacePolicies(topicName.getNamespaceObject());\n+            backlogQuota = policies.backlog_quota_map.get(BacklogQuota.BacklogQuotaType.destination_storage);\n+        }\n+        if(!checkBacklogQuota(backlogQuota, retention)){\n+            log.warn(\n+                    \"[{}] Failed to update retention quota configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Retention Quota must exceed configured backlog quota for topic. \" +\n+                            \"Please increase retention quota and retry\");\n+        }\n+        topicPolicies.setRetentionPolicies(retention);\n+        return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies);\n+    }\n+\n+    protected CompletableFuture<Void> internalRemoveRetention() {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMzc1MQ==", "bodyText": "Need to modify this doc.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r469823751", "createdAt": "2020-08-13T09:33:14Z", "author": {"login": "zhanghaou"}, "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Topics.java", "diffHunk": "@@ -1476,4 +1477,142 @@ void createSubscription(String topic, String subscriptionName, MessageId message\n      *             Unexpected error\n      */\n     void removeMessageTTL(String topic) throws PulsarAdminException;\n+\n+    /**\n+     * Set the retention configuration on a topic.\n+     * <p/>\n+     * Set the retention configuration on a topic. This operation requires Pulsar super-user access.\n+     * <p/>\n+     * Request parameter example:\n+     * <p/>\n+     *\n+     * <pre>\n+     * <code>\n+     * {\n+     *     \"retentionTimeInMinutes\" : 60,            // how long to retain messages\n+     *     \"retentionSizeInMB\" : 1024,              // retention backlog limit\n+     * }\n+     * </code>\n+     * </pre>\n+     *\n+     * @param topic\n+     *            Topic name\n+     *\n+     * @throws NotAuthorizedException\n+     *             Don't have admin permission\n+     * @throws NotFoundException\n+     *             Topic does not exist\n+     * @throws ConflictException\n+     *             Concurrent modification\n+     * @throws PulsarAdminException\n+     *             Unexpected error\n+     */\n+    void setRetention(String topic, RetentionPolicies retention) throws PulsarAdminException;\n+\n+    /**\n+     * Set the retention configuration for all the topics on a topic asynchronously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyMzkxMg==", "bodyText": "Need to modify this doc.", "url": "https://github.com/apache/pulsar/pull/7747#discussion_r469823912", "createdAt": "2020-08-13T09:33:33Z", "author": {"login": "zhanghaou"}, "path": "pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Topics.java", "diffHunk": "@@ -1476,4 +1477,142 @@ void createSubscription(String topic, String subscriptionName, MessageId message\n      *             Unexpected error\n      */\n     void removeMessageTTL(String topic) throws PulsarAdminException;\n+\n+    /**\n+     * Set the retention configuration on a topic.\n+     * <p/>\n+     * Set the retention configuration on a topic. This operation requires Pulsar super-user access.\n+     * <p/>\n+     * Request parameter example:\n+     * <p/>\n+     *\n+     * <pre>\n+     * <code>\n+     * {\n+     *     \"retentionTimeInMinutes\" : 60,            // how long to retain messages\n+     *     \"retentionSizeInMB\" : 1024,              // retention backlog limit\n+     * }\n+     * </code>\n+     * </pre>\n+     *\n+     * @param topic\n+     *            Topic name\n+     *\n+     * @throws NotAuthorizedException\n+     *             Don't have admin permission\n+     * @throws NotFoundException\n+     *             Topic does not exist\n+     * @throws ConflictException\n+     *             Concurrent modification\n+     * @throws PulsarAdminException\n+     *             Unexpected error\n+     */\n+    void setRetention(String topic, RetentionPolicies retention) throws PulsarAdminException;\n+\n+    /**\n+     * Set the retention configuration for all the topics on a topic asynchronously.\n+     * <p/>\n+     * Set the retention configuration on a topic. This operation requires Pulsar super-user access.\n+     * <p/>\n+     * Request parameter example:\n+     * <p/>\n+     *\n+     * <pre>\n+     * <code>\n+     * {\n+     *     \"retentionTimeInMinutes\" : 60,            // how long to retain messages\n+     *     \"retentionSizeInMB\" : 1024,              // retention backlog limit\n+     * }\n+     * </code>\n+     * </pre>\n+     *\n+     * @param topic\n+     *            Topic name\n+     */\n+    CompletableFuture<Void> setRetentionAsync(String topic, RetentionPolicies retention);\n+\n+    /**\n+     * Get the retention configuration for a topic.\n+     * <p/>\n+     * Get the retention configuration for a topic.\n+     * <p/>\n+     * Response example:\n+     * <p/>\n+     *\n+     * <pre>\n+     * <code>\n+     * {\n+     *     \"retentionTimeInMinutes\" : 60,            // how long to retain messages\n+     *     \"retentionSizeInMB\" : 1024,              // retention backlog limit\n+     * }\n+     * </code>\n+     * </pre>\n+     *\n+     * @param topic\n+     *            Topic name\n+     * @throws NotAuthorizedException\n+     *             Don't have admin permission\n+     * @throws NotFoundException\n+     *             Topic does not exist\n+     * @throws ConflictException\n+     *             Concurrent modification\n+     * @throws PulsarAdminException\n+     *             Unexpected error\n+     */\n+    RetentionPolicies getRetention(String topic) throws PulsarAdminException;\n+\n+    /**\n+     * Get the retention configuration for a topic asynchronously.\n+     * <p/>\n+     * Get the retention configuration for a topic.\n+     * <p/>\n+     *\n+     * @param topic\n+     *            Topic name\n+     */\n+    CompletableFuture<RetentionPolicies> getRetentionAsync(String topic);\n+\n+    /**\n+     * Remove the retention configuration for all the topics on a topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebd6f7455e8af5d512ca40c476ac400cbf08dac"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 491, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}