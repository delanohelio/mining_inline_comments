{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDM3MzY3", "number": 6760, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzoxMDoyOFrODzOHwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzoxMDoyOFrODzOHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDM1MzMwOnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SecurityUtility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzoxMDoyOFrOGHq75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzoxMTowM1rOGH-OaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NjY3OQ==", "bodyText": "This could be removed?", "url": "https://github.com/apache/pulsar/pull/6760#discussion_r410696679", "createdAt": "2020-04-18T13:10:28Z", "author": {"login": "jiazhai"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SecurityUtility.java", "diffHunk": "@@ -238,24 +240,53 @@ public static SSLContext createSslContext(boolean allowInsecureConnection, Certi\n         }\n \n         try (FileInputStream input = new FileInputStream(certFilePath)) {\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(input);\n-            certificates = collection.toArray(new X509Certificate[collection.size()]);\n+            certificates = loadCertificatesFromPemStream(input);\n         } catch (GeneralSecurityException | IOException e) {\n             throw new KeyManagementException(\"Certificate loading error\", e);\n         }\n \n         return certificates;\n     }\n \n+    public static X509Certificate[] loadCertificatesFromPemStream(InputStream inStream) throws KeyManagementException  {\n+        if (inStream == null) {\n+            return null;\n+        }\n+        CertificateFactory cf;\n+        try {\n+            cf = CertificateFactory.getInstance(\"X.509\");\n+            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(inStream);\n+            return collection.toArray(new X509Certificate[collection.size()]);\n+        } catch (CertificateException e) {\n+            throw new KeyManagementException(\"Certificate loading error\", e);\n+        }\n+    }\n+\n     public static PrivateKey loadPrivateKeyFromPemFile(String keyFilePath) throws KeyManagementException {\n         PrivateKey privateKey = null;\n \n         if (keyFilePath == null || keyFilePath.isEmpty()) {\n             return privateKey;\n         }\n \n-        try (BufferedReader reader = new BufferedReader(new FileReader(keyFilePath))) {\n+        try (FileInputStream input = new FileInputStream(keyFilePath)) {\n+            privateKey = loadPrivateKeyFromPemStream(input);\n+        } catch (IOException e) {\n+            throw new KeyManagementException(\"Private key loading error\", e);\n+        }\n+\n+        return privateKey;\n+    }\n+\n+    public static PrivateKey loadPrivateKeyFromPemStream(InputStream inStream) throws KeyManagementException {\n+        PrivateKey privateKey = null;\n+\n+        if (inStream == null) {\n+            return privateKey;\n+        }\n+\n+        //TODO: check if bufferReader should be closed or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjcxMg==", "bodyText": "Yes, fixed it. actually user provided stream can be read multiple times by multiple connections so, pulsar-client needs a stream that can be marked and reset. So, I changed interface with ByteArrayInputStream to support reading same provided stream multiple times.", "url": "https://github.com/apache/pulsar/pull/6760#discussion_r411012712", "createdAt": "2020-04-19T23:11:03Z", "author": {"login": "rdhabalia"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SecurityUtility.java", "diffHunk": "@@ -238,24 +240,53 @@ public static SSLContext createSslContext(boolean allowInsecureConnection, Certi\n         }\n \n         try (FileInputStream input = new FileInputStream(certFilePath)) {\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(input);\n-            certificates = collection.toArray(new X509Certificate[collection.size()]);\n+            certificates = loadCertificatesFromPemStream(input);\n         } catch (GeneralSecurityException | IOException e) {\n             throw new KeyManagementException(\"Certificate loading error\", e);\n         }\n \n         return certificates;\n     }\n \n+    public static X509Certificate[] loadCertificatesFromPemStream(InputStream inStream) throws KeyManagementException  {\n+        if (inStream == null) {\n+            return null;\n+        }\n+        CertificateFactory cf;\n+        try {\n+            cf = CertificateFactory.getInstance(\"X.509\");\n+            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(inStream);\n+            return collection.toArray(new X509Certificate[collection.size()]);\n+        } catch (CertificateException e) {\n+            throw new KeyManagementException(\"Certificate loading error\", e);\n+        }\n+    }\n+\n     public static PrivateKey loadPrivateKeyFromPemFile(String keyFilePath) throws KeyManagementException {\n         PrivateKey privateKey = null;\n \n         if (keyFilePath == null || keyFilePath.isEmpty()) {\n             return privateKey;\n         }\n \n-        try (BufferedReader reader = new BufferedReader(new FileReader(keyFilePath))) {\n+        try (FileInputStream input = new FileInputStream(keyFilePath)) {\n+            privateKey = loadPrivateKeyFromPemStream(input);\n+        } catch (IOException e) {\n+            throw new KeyManagementException(\"Private key loading error\", e);\n+        }\n+\n+        return privateKey;\n+    }\n+\n+    public static PrivateKey loadPrivateKeyFromPemStream(InputStream inStream) throws KeyManagementException {\n+        PrivateKey privateKey = null;\n+\n+        if (inStream == null) {\n+            return privateKey;\n+        }\n+\n+        //TODO: check if bufferReader should be closed or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NjY3OQ=="}, "originalCommit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1797, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}