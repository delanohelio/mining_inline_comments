{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTYwMzIz", "number": 7401, "title": "Fix producer stuck issue due to NPE thrown when creating a new ledger", "bodyText": "Motivation\nNPE can be thrown when creating a ledger because the network address is unresolvable. If NPE is thrown before adding the timeout task, the timeout mechanism doesn't work.\nNetwork address unresolvable is commonly seen in the Kubernetes environment. It can happen when a bookie pod or a worker node restarts.\nChanges\nThis pull request does the followings:\n\nCatch the NPE when creating a new ledger.\nWhen the timeout task is triggered, always execute the callback. It is totally fine because we already have the logic to ensure the callback is triggered only once.\nAdd a mechanism to detect the CreatingLedger state is not moving.", "createdAt": "2020-06-30T16:50:57Z", "url": "https://github.com/apache/pulsar/pull/7401", "merged": true, "mergeCommit": {"oid": "86e2610bebb46f479ea221a69782cd8575a04b16"}, "closed": true, "closedAt": "2020-06-30T22:32:54Z", "author": {"login": "sijie"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwYYB-gH2gAyNDQyMTYwMzIzOmIyOTgwNjg5YjIyZjdkNGVjOWE5Yzc5MGRjODY1NWQxNmRiNmE2NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwY0qAgFqTQ0MDIyMjIxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "author": {"user": {"login": "sijie", "name": "Sijie Guo"}}, "url": "https://github.com/apache/pulsar/commit/b2980689b22f7d4ec9a9c790dc8655d16db6a64b", "committedDate": "2020-06-30T16:38:25Z", "message": "Catch NPE and detect state doesn't move"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjEwNDcy", "url": "https://github.com/apache/pulsar/pull/7401#pullrequestreview-440210472", "createdAt": "2020-06-30T16:55:04Z", "commit": {"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1NTowNFrOGrFwgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1NTo0OFrOGrFyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjI5MQ==", "bodyText": "Try-catch here is good in any case, though we should also ensure that BK client is handling DNS errors by triggering the callback instead of exception.", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447836291", "createdAt": "2020-06-30T16:55:04Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3170,15 +3174,28 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n         Map<String, byte[]> finalMetadata = new HashMap<>();\n         finalMetadata.putAll(ledgerMetadata);\n         finalMetadata.putAll(metadata);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"creating ledger, metadata: \"+finalMetadata);\n-        }\n-        bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n+        log.info(\"[{}] Creating ledger, metadata: {} - metadata ops timeout : {} seconds\",\n+            name, finalMetadata, config.getMetadataOperationsTimeoutSeconds());\n+        try {\n+            bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n+        } catch (Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjg0MQ==", "bodyText": "Is this change intentional?\nShouldn't the callback only be triggered if (!ledgerCreated.get()) ?", "url": "https://github.com/apache/pulsar/pull/7401#discussion_r447836841", "createdAt": "2020-06-30T16:55:48Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3170,15 +3174,28 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n         Map<String, byte[]> finalMetadata = new HashMap<>();\n         finalMetadata.putAll(ledgerMetadata);\n         finalMetadata.putAll(metadata);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"creating ledger, metadata: \"+finalMetadata);\n-        }\n-        bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n+        log.info(\"[{}] Creating ledger, metadata: {} - metadata ops timeout : {} seconds\",\n+            name, finalMetadata, config.getMetadataOperationsTimeoutSeconds());\n+        try {\n+            bookKeeper.asyncCreateLedger(config.getEnsembleSize(), config.getWriteQuorumSize(), config.getAckQuorumSize(),\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n+        } catch (Throwable cause) {\n+            log.error(\"[{}] Encountered unexpected error when creating ledger\",\n+                name, cause);\n+            cb.createComplete(Code.UnexpectedConditionException, null, ledgerCreated);\n+            return;\n+        }\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"[{}] Timeout creating ledger\", name);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"[{}] Ledger already created when timeout task is triggered\", name);\n+                }\n             }\n+            cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjIyMjEz", "url": "https://github.com/apache/pulsar/pull/7401#pullrequestreview-440222213", "createdAt": "2020-06-30T17:09:41Z", "commit": {"oid": "b2980689b22f7d4ec9a9c790dc8655d16db6a64b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 778, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}