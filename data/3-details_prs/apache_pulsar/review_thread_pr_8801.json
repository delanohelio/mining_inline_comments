{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNDc3MjE4", "number": 8801, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzoyN1rOE__Cug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMzo1MFrOFApezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI4NjM0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzoyN1rOH9_wBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowMzoyN1rOH9_wBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY3MA==", "bodyText": "Overall looks good. I found if both the subscriptionRolePrefix and subscriptionName are specified, it will take the subscriptionName. Could you please also add a test case for this?", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r534769670", "createdAt": "2020-12-03T07:03:27Z", "author": {"login": "zymap"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +396,32 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\";\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+\n+        reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b63a59e997fb4a672913419428d68866dffcd5e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY5MDE4OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozMFrOH-EITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozMFrOH-EITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MTQyMw==", "bodyText": "It would be better if we could add this test case: when creating two readers with the same subscriptionName at the same time, the second one should fail.", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r534841423", "createdAt": "2020-12-03T07:49:30Z", "author": {"login": "RobertIndie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +396,32 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\";\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+\n+        reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest)\n+                .create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b63a59e997fb4a672913419428d68866dffcd5e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjIzNzIxOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMjo1OVrOH_CyHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMjo1OVrOH_CyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NzkzMg==", "bodyText": "Nit:  try-with-resources", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r535867932", "createdAt": "2020-12-04T06:32:59Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +398,70 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        doTestReaderSubName(true);\n+        doTestReaderSubName(false);\n+    }\n+\n+    public void doTestReaderSubName(boolean setPrefix) throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\" + System.currentTimeMillis();\n+        final String subName = \"my-sub-name\";\n+\n+        ReaderBuilder<String> builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        Reader<String> reader = builder.create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\" + System.currentTimeMillis();\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+        builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        reader = builder.create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }\n+\n+    @Test\n+    public void testSameSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testSameSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest).create();\n+        Reader<String> reader2 = null;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9453610595641a7b457e2d4bb6f76fff79302835"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjIzOTQ5OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMzo1MFrOH_CzTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMzo1MFrOH_CzTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODIzOQ==", "bodyText": "Can we assert that after closing the first reader it is possible to create a new reader with the same subscription name?", "url": "https://github.com/apache/pulsar/pull/8801#discussion_r535868239", "createdAt": "2020-12-04T06:33:50Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ReaderTest.java", "diffHunk": "@@ -397,4 +398,70 @@ public void testKeyHashRangeReader() throws IOException {\n         }\n \n     }\n+\n+    @Test\n+    public void testReaderSubName() throws Exception {\n+        doTestReaderSubName(true);\n+        doTestReaderSubName(false);\n+    }\n+\n+    public void doTestReaderSubName(boolean setPrefix) throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testReaderSubName\" + System.currentTimeMillis();\n+        final String subName = \"my-sub-name\";\n+\n+        ReaderBuilder<String> builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        Reader<String> reader = builder.create();\n+        ReaderImpl<String> readerImpl = (ReaderImpl<String>) reader;\n+        assertEquals(readerImpl.getConsumer().getSubscription(), subName);\n+        reader.close();\n+\n+        final String topic2 = \"persistent://my-property/my-ns/testReaderSubName2\" + System.currentTimeMillis();\n+        admin.topics().createPartitionedTopic(topic2, 3);\n+        builder = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic2)\n+                .startMessageId(MessageId.earliest);\n+        if (setPrefix) {\n+            builder = builder.subscriptionRolePrefix(subName + System.currentTimeMillis());\n+        }\n+        reader = builder.create();\n+        MultiTopicsReaderImpl<String> multiTopicsReader = (MultiTopicsReaderImpl<String>) reader;\n+        multiTopicsReader.getMultiTopicsConsumer().getConsumers()\n+                .forEach(consumerImpl -> assertEquals(consumerImpl.getSubscription(), subName));\n+        multiTopicsReader.close();\n+    }\n+\n+    @Test\n+    public void testSameSubName() throws Exception {\n+        final String topic = \"persistent://my-property/my-ns/testSameSubName\";\n+        final String subName = \"my-sub-name\";\n+\n+        Reader<String> reader = pulsarClient.newReader(Schema.STRING)\n+                .subscriptionName(subName)\n+                .topic(topic)\n+                .startMessageId(MessageId.earliest).create();\n+        Reader<String> reader2 = null;\n+        try {\n+            reader2 = pulsarClient.newReader(Schema.STRING)\n+                    .subscriptionName(subName)\n+                    .topic(topic)\n+                    .startMessageId(MessageId.earliest).create();\n+            fail(\"should fail\");\n+        } catch (PulsarClientException e) {\n+            assertTrue(e instanceof PulsarClientException.ConsumerBusyException);\n+            assertTrue(e.getMessage().contains(\"Exclusive consumer is already connected\"));\n+        }\n+\n+        reader.close();\n+        if (reader2 != null) {\n+            reader2.close();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9453610595641a7b457e2d4bb6f76fff79302835"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2761, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}