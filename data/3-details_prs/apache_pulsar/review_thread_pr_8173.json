{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjQ4OTA5", "number": 8173, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1Njo1NlrOEyKdFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xOVQyMDoxMDowM1rOGXz33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM1NTQxOnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/python/schema_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1Njo1NlrOHopnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoxNjoxN1rOHpZcpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NzAxNg==", "bodyText": "We should call subscribe before send like what other unit tests do, otherwise the consumer will stuck at receive.", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r512387016", "createdAt": "2020-10-27T02:56:56Z", "author": {"login": "BewareMyPower"}, "path": "pulsar-client-cpp/python/schema_test.py", "diffHunk": "@@ -354,6 +354,32 @@ class Example(Record):\n         self.assertEqual(r2.__class__.__name__, 'Example')\n         self.assertEqual(r2, r)\n \n+    def test_schema_version(self):\n+        class Example(Record):\n+            a = Integer()\n+            b = Integer()\n+\n+        client = pulsar.Client(self.serviceUrl)\n+        producer = client.create_producer(\n+                        'my-avro-python-schema-version-topic',\n+                        schema=AvroSchema(Example))\n+\n+        r = Example(a=1, b=2)\n+        producer.send(r)\n+\n+        consumer = client.subscribe('my-avro-python-schema-version-topic', 'sub-1',\n+                                    schema=AvroSchema(Example))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52c51dbd21193ef4cd35647b98382458c5739e3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MDU5OQ==", "bodyText": "Done, thanks for spotting that.", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r513170599", "createdAt": "2020-10-28T04:16:17Z", "author": {"login": "shiv4289"}, "path": "pulsar-client-cpp/python/schema_test.py", "diffHunk": "@@ -354,6 +354,32 @@ class Example(Record):\n         self.assertEqual(r2.__class__.__name__, 'Example')\n         self.assertEqual(r2, r)\n \n+    def test_schema_version(self):\n+        class Example(Record):\n+            a = Integer()\n+            b = Integer()\n+\n+        client = pulsar.Client(self.serviceUrl)\n+        producer = client.create_producer(\n+                        'my-avro-python-schema-version-topic',\n+                        schema=AvroSchema(Example))\n+\n+        r = Example(a=1, b=2)\n+        producer.send(r)\n+\n+        consumer = client.subscribe('my-avro-python-schema-version-topic', 'sub-1',\n+                                    schema=AvroSchema(Example))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NzAxNg=="}, "originalCommit": {"oid": "c52c51dbd21193ef4cd35647b98382458c5739e3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTQ2NzQwOnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/python/schema_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNTowMjoyN1rOHpaJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNTo0Mjo1OFrOHpa0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4MjE4Ng==", "bodyText": "int.from_bytes is a Python3 method, but CI environment use Python2 to test. You need to use another method to convert bytes to int.", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r513182186", "createdAt": "2020-10-28T05:02:27Z", "author": {"login": "BewareMyPower"}, "path": "pulsar-client-cpp/python/schema_test.py", "diffHunk": "@@ -354,6 +354,32 @@ class Example(Record):\n         self.assertEqual(r2.__class__.__name__, 'Example')\n         self.assertEqual(r2, r)\n \n+    def test_schema_version(self):\n+        class Example(Record):\n+            a = Integer()\n+            b = Integer()\n+\n+        client = pulsar.Client(self.serviceUrl)\n+        producer = client.create_producer(\n+                        'my-avro-python-schema-version-topic',\n+                        schema=AvroSchema(Example))\n+\n+        consumer = client.subscribe('my-avro-python-schema-version-topic', 'sub-1',\n+                                    schema=AvroSchema(Example))\n+        \n+        r = Example(a=1, b=2)\n+        producer.send(r)\n+\n+        msg = consumer.receive()\n+\n+        self.assertIsNotNone(msg.schema_version())\n+\n+        self.assertEqual(0, int.from_bytes(msg.schema_version().encode(), byteorder='big'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519ef04b3d55a0593df8f905a9f676ae097e8122"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MzA5Mg==", "bodyText": "Fixed as suggested. Thank you!", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r513193092", "createdAt": "2020-10-28T05:42:58Z", "author": {"login": "shiv4289"}, "path": "pulsar-client-cpp/python/schema_test.py", "diffHunk": "@@ -354,6 +354,32 @@ class Example(Record):\n         self.assertEqual(r2.__class__.__name__, 'Example')\n         self.assertEqual(r2, r)\n \n+    def test_schema_version(self):\n+        class Example(Record):\n+            a = Integer()\n+            b = Integer()\n+\n+        client = pulsar.Client(self.serviceUrl)\n+        producer = client.create_producer(\n+                        'my-avro-python-schema-version-topic',\n+                        schema=AvroSchema(Example))\n+\n+        consumer = client.subscribe('my-avro-python-schema-version-topic', 'sub-1',\n+                                    schema=AvroSchema(Example))\n+        \n+        r = Example(a=1, b=2)\n+        producer.send(r)\n+\n+        msg = consumer.receive()\n+\n+        self.assertIsNotNone(msg.schema_version())\n+\n+        self.assertEqual(0, int.from_bytes(msg.schema_version().encode(), byteorder='big'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4MjE4Ng=="}, "originalCommit": {"oid": "519ef04b3d55a0593df8f905a9f676ae097e8122"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI3NjIwMzE5OnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/include/pulsar/c/message.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xOVQyMDoxMDowM1rOKBcDJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yMFQwMjoxNDo1MlrOKBl2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU5Njc3NQ==", "bodyText": "Am I correct that this (and other two) functions were never implemented?", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r672596775", "createdAt": "2021-07-19T20:10:03Z", "author": {"login": "migmit"}, "path": "pulsar-client-cpp/include/pulsar/c/message.h", "diffHunk": "@@ -200,6 +200,12 @@ PULSAR_PUBLIC const char *pulsar_message_get_topic_name(pulsar_message_t *messag\n \n PULSAR_PUBLIC int pulsar_message_get_redelivery_count(pulsar_message_t *message);\n \n+PULSAR_PUBLIC int pulsar_message_has_schema_version(pulsar_message_t *message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02411f4b07c9f0119ce39e0bd0b7ab0adc4d9a28"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjc1NzQzMA==", "bodyText": "Yeah, you can open a PR to add the missed implementation.", "url": "https://github.com/apache/pulsar/pull/8173#discussion_r672757430", "createdAt": "2021-07-20T02:14:52Z", "author": {"login": "BewareMyPower"}, "path": "pulsar-client-cpp/include/pulsar/c/message.h", "diffHunk": "@@ -200,6 +200,12 @@ PULSAR_PUBLIC const char *pulsar_message_get_topic_name(pulsar_message_t *messag\n \n PULSAR_PUBLIC int pulsar_message_get_redelivery_count(pulsar_message_t *message);\n \n+PULSAR_PUBLIC int pulsar_message_has_schema_version(pulsar_message_t *message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU5Njc3NQ=="}, "originalCommit": {"oid": "02411f4b07c9f0119ce39e0bd0b7ab0adc4d9a28"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2132, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}