{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTQxMjA2", "number": 6537, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNDozMDowMlrODoF4GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNDozMDowMlrODoF4GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzY1OTEyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNDozMDowMlrOF2c3tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzowNTozOVrOF3Mdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MDQzOQ==", "bodyText": "@murong00 thanks for the contribute, Would you please help add a test that really called into and execute the compact?  Seems this is only the top level method call, and not called into the methods, and some of the code in PersistentTopicsBase.java seems not covered.\nIf there is no ut framework for this, we could add a integration test for it.", "url": "https://github.com/apache/pulsar/pull/6537#discussion_r392640439", "createdAt": "2020-03-15T04:30:02Z", "author": {"login": "jiazhai"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java", "diffHunk": "@@ -439,4 +439,33 @@ public void testRevokePartitionedTopic() {\n             Assert.assertEquals(partitionPermissions.get(role), null);\n         }\n     }\n+\n+    @Test\n+    public void testTriggerCompactionTopic() {\n+        final String partitionTopicName = \"test-part\";\n+        final String nonPartitionTopicName = \"test-non-part\";\n+\n+        // trigger compaction on non-existing topic\n+        AsyncResponse response = mock(AsyncResponse.class);\n+        persistentTopics.compact(response, testTenant, testNamespace, \"non-existing-topic\", true);\n+        ArgumentCaptor<RestException> errCaptor = ArgumentCaptor.forClass(RestException.class);\n+        verify(response, timeout(5000).times(1)).resume(errCaptor.capture());\n+        Assert.assertEquals(errCaptor.getValue().getResponse().getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+\n+        // create non partitioned topic and compaction on it\n+        response = mock(AsyncResponse.class);\n+        persistentTopics.createNonPartitionedTopic(testTenant, testNamespace, nonPartitionTopicName, true);\n+        persistentTopics.compact(response, testTenant, testNamespace, nonPartitionTopicName, true);\n+        ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);\n+        verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n+        Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n+\n+        // create partitioned topic and compaction on it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d685d451231a66abbac68245c3745708998a77"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDE1NQ==", "bodyText": "Added a unit test to cover the compact logic and just keep this top level method call test.", "url": "https://github.com/apache/pulsar/pull/6537#discussion_r393420155", "createdAt": "2020-03-17T03:05:39Z", "author": {"login": "murong00"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/PersistentTopicsTest.java", "diffHunk": "@@ -439,4 +439,33 @@ public void testRevokePartitionedTopic() {\n             Assert.assertEquals(partitionPermissions.get(role), null);\n         }\n     }\n+\n+    @Test\n+    public void testTriggerCompactionTopic() {\n+        final String partitionTopicName = \"test-part\";\n+        final String nonPartitionTopicName = \"test-non-part\";\n+\n+        // trigger compaction on non-existing topic\n+        AsyncResponse response = mock(AsyncResponse.class);\n+        persistentTopics.compact(response, testTenant, testNamespace, \"non-existing-topic\", true);\n+        ArgumentCaptor<RestException> errCaptor = ArgumentCaptor.forClass(RestException.class);\n+        verify(response, timeout(5000).times(1)).resume(errCaptor.capture());\n+        Assert.assertEquals(errCaptor.getValue().getResponse().getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n+\n+        // create non partitioned topic and compaction on it\n+        response = mock(AsyncResponse.class);\n+        persistentTopics.createNonPartitionedTopic(testTenant, testNamespace, nonPartitionTopicName, true);\n+        persistentTopics.compact(response, testTenant, testNamespace, nonPartitionTopicName, true);\n+        ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);\n+        verify(response, timeout(5000).times(1)).resume(responseCaptor.capture());\n+        Assert.assertEquals(responseCaptor.getValue().getStatus(), Response.Status.NO_CONTENT.getStatusCode());\n+\n+        // create partitioned topic and compaction on it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MDQzOQ=="}, "originalCommit": {"oid": "a9d685d451231a66abbac68245c3745708998a77"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}