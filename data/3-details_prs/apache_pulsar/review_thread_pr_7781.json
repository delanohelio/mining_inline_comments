{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NDQ3NDkw", "number": 7781, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1MjoyNlrOEWx2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NjowMlrOEWx7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzIwODYwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1MjoyNlrOG-NNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1NToyNVrOHAjrXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MTMwOA==", "bodyText": "It's might peek null here.", "url": "https://github.com/apache/pulsar/pull/7781#discussion_r467881308", "createdAt": "2020-08-10T12:52:26Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+@Slf4j\n+public class TransactionReader {\n+\n+    private TransactionBuffer transactionBuffer;\n+    private volatile long startSequenceId = 0;\n+\n+    public void read(Topic topic, ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        if (transactionBuffer == null) {\n+            topic.getTransactionBuffer(false).whenComplete((tb, throwable) -> {\n+                if (throwable != null) {\n+                    log.error(\"Get transactionBuffer failed.\", throwable);\n+                    readEntriesCallback.readEntriesFailed(\n+                            ManagedLedgerException.getManagedLedgerException(throwable), ctx);\n+                    return;\n+                }\n+                transactionBuffer = tb;\n+                read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+            });\n+        } else {\n+            read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+        }\n+    }\n+\n+    private void read(ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        final TxnID txnID = transactionQueue.peek();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f4c01a0c786b08de356d050f0f24589d514f29"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0NjU5MA==", "bodyText": "Ok, I'll add a check.", "url": "https://github.com/apache/pulsar/pull/7781#discussion_r470346590", "createdAt": "2020-08-14T00:55:25Z", "author": {"login": "gaoran10"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+@Slf4j\n+public class TransactionReader {\n+\n+    private TransactionBuffer transactionBuffer;\n+    private volatile long startSequenceId = 0;\n+\n+    public void read(Topic topic, ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        if (transactionBuffer == null) {\n+            topic.getTransactionBuffer(false).whenComplete((tb, throwable) -> {\n+                if (throwable != null) {\n+                    log.error(\"Get transactionBuffer failed.\", throwable);\n+                    readEntriesCallback.readEntriesFailed(\n+                            ManagedLedgerException.getManagedLedgerException(throwable), ctx);\n+                    return;\n+                }\n+                transactionBuffer = tb;\n+                read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+            });\n+        } else {\n+            read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+        }\n+    }\n+\n+    private void read(ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        final TxnID txnID = transactionQueue.peek();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MTMwOA=="}, "originalCommit": {"oid": "22f4c01a0c786b08de356d050f0f24589d514f29"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzIyMTAyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo1NjowMlrOG-NU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDozODoxMFrOG-RZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MzI0NQ==", "bodyText": "Is the read txn message count is the size of the transactionQueue ?  I did not understand this method, is the transactionQueue only stores the first txn ID?  I noticed you have only peek one item from this queue.", "url": "https://github.com/apache/pulsar/pull/7781#discussion_r467883245", "createdAt": "2020-08-10T12:56:02Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+@Slf4j\n+public class TransactionReader {\n+\n+    private TransactionBuffer transactionBuffer;\n+    private volatile long startSequenceId = 0;\n+\n+    public void read(Topic topic, ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        if (transactionBuffer == null) {\n+            topic.getTransactionBuffer(false).whenComplete((tb, throwable) -> {\n+                if (throwable != null) {\n+                    log.error(\"Get transactionBuffer failed.\", throwable);\n+                    readEntriesCallback.readEntriesFailed(\n+                            ManagedLedgerException.getManagedLedgerException(throwable), ctx);\n+                    return;\n+                }\n+                transactionBuffer = tb;\n+                read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+            });\n+        } else {\n+            read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+        }\n+    }\n+\n+    private void read(ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f4c01a0c786b08de356d050f0f24589d514f29"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0OTkxMA==", "bodyText": "I'll adjust this logic.", "url": "https://github.com/apache/pulsar/pull/7781#discussion_r467949910", "createdAt": "2020-08-10T14:38:10Z", "author": {"login": "gaoran10"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionReader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+@Slf4j\n+public class TransactionReader {\n+\n+    private TransactionBuffer transactionBuffer;\n+    private volatile long startSequenceId = 0;\n+\n+    public void read(Topic topic, ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {\n+        if (transactionBuffer == null) {\n+            topic.getTransactionBuffer(false).whenComplete((tb, throwable) -> {\n+                if (throwable != null) {\n+                    log.error(\"Get transactionBuffer failed.\", throwable);\n+                    readEntriesCallback.readEntriesFailed(\n+                            ManagedLedgerException.getManagedLedgerException(throwable), ctx);\n+                    return;\n+                }\n+                transactionBuffer = tb;\n+                read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+            });\n+        } else {\n+            read(transactionQueue, readMessageNum, ctx, readEntriesCallback);\n+        }\n+    }\n+\n+    private void read(ConcurrentLinkedQueue<TxnID> transactionQueue,\n+                     int readMessageNum, Object ctx,\n+                     AsyncCallbacks.ReadEntriesCallback readEntriesCallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MzI0NQ=="}, "originalCommit": {"oid": "22f4c01a0c786b08de356d050f0f24589d514f29"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2228, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}