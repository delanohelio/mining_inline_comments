{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODk5MDUz", "number": 7518, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzozMlrOElisyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNToyOVrOEli9Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODAxMjg5OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzozMlrOHVEgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMzozMlrOHVEgQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NTkzNw==", "bodyText": "Why need a set for storing ignored consumers here? I noticed if a consumer is added to this set, the message will be acked and users will miss messages of this consumer. Is it an expected behavior?", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491855937", "createdAt": "2020-09-21T08:03:32Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -81,6 +83,9 @@\n     // shared incoming queue was full\n     private final ConcurrentLinkedQueue<ConsumerImpl<T>> pausedConsumers;\n \n+    //When consumerImpl is added to the set, its messages will be ignored\n+    private final ConcurrentOpenHashSet<ConsumerImpl<T>> ignoredConsumers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a9f4f6ceebf1d8b4659d272253651cc1629cfec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA0NzI4OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxMzozN1rOHVE0Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxMzozN1rOHVE0Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MTA1MA==", "bodyText": "If the internal topics of the multiple topics consumer  with the same partition index but different topic name, it will introduce some problems here?", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491861050", "createdAt": "2020-09-21T08:13:37Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -681,12 +713,45 @@ public void seek(long timestamp) throws PulsarClientException {\n         try {\n             seekAsync(timestamp).get();\n         } catch (Exception e) {\n+            throw PulsarClientException.unwrap(e);\n         }\n     }\n \n     @Override\n     public CompletableFuture<Void> seekAsync(MessageId messageId) {\n-        return FutureUtil.failedFuture(new PulsarClientException(\"Seek operation not supported on topics consumer\"));\n+        CompletableFuture<Void> resultFuture = new CompletableFuture<>();\n+        MessageIdImpl targetMessageId = MessageIdImpl.convertToMessageIdImpl(messageId);\n+        if (targetMessageId == null || isIllegalMultiTopicsMessageId(messageId)) {\n+            resultFuture.completeExceptionally(\n+                    new PulsarClientException(\"Illegal messageId, messageId can only be earliest\u3001latest or determine partition\"));\n+            return resultFuture;\n+        }\n+\n+        List<CompletableFuture<Void>> futures = new ArrayList<>(consumers.size());\n+        consumers.values().forEach(consumerImpl -> {\n+            if (MessageId.latest.equals(messageId) || MessageId.earliest.equals(messageId)\n+                    || consumerImpl.getPartitionIndex() == targetMessageId.getPartitionIndex()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75efab9e63655750ab6a48e1e2c125f0d31977b1"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA1NDc5OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNToyOVrOHVE4gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNToyOVrOHVE4gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MjE0Ng==", "bodyText": "I think here also assume that all topics of the multiple topics consumer are under a partitioned topic?", "url": "https://github.com/apache/pulsar/pull/7518#discussion_r491862146", "createdAt": "2020-09-21T08:15:29Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -1272,4 +1389,35 @@ public Timeout getPartitionsAutoUpdateTimeout() {\n     }\n \n     private static final Logger log = LoggerFactory.getLogger(MultiTopicsConsumerImpl.class);\n+\n+    public boolean addIgnoreConsumer(ConsumerImpl<T> consumer) {\n+        return ignoredConsumers.add(consumer);\n+    }\n+\n+    public boolean removeIgnoreConsumer(ConsumerImpl<T> consumer) {\n+        return ignoredConsumers.remove(consumer);\n+    }\n+\n+    public static boolean isIllegalMultiTopicsMessageId(MessageId messageId) {\n+        //only support earliest/latest and messageId contains certain partition info\n+        if (MessageId.earliest.equals(messageId) || MessageId.latest.equals(messageId)) {\n+            return false;\n+        }\n+        MessageIdImpl messageIdImpl = MessageIdImpl.convertToMessageIdImpl(messageId);\n+        if (messageIdImpl != null && messageIdImpl.getPartitionIndex() >= 0 && messageIdImpl.getLedgerId() >= 0\n+                && messageIdImpl.getEntryId() >= 0) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public void tryAcknowledgeMessage(Message<T> msg) {\n+        if (msg != null) {\n+            BatchMessageIdImpl batchMessageId = new BatchMessageIdImpl(MessageIdImpl.convertToMessageIdImpl(msg.getMessageId()));\n+            //Non-batching messages ack every time, batchMessage only need to ack the last one to avoid multi recycle\n+            if (batchMessageId.getBatchIndex() < 0 || batchMessageId.getBatchSize() - 1 == batchMessageId.getBatchIndex()) {\n+                acknowledgeCumulativeAsync(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75efab9e63655750ab6a48e1e2c125f0d31977b1"}, "originalPosition": 284}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2452, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}