{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDg4MDc5", "number": 7406, "title": "Improved in max-pending-bytes mechanism for broker", "bodyText": "Motivation\nThere are few issues with the current implementation of the broker-wide throttling based on max-outstanding bytes in broker that was added in #6178.\n\nThe current implementation is over-counting the outstanding bytes when there are >1 producers on a given connection. It's cycling through the producers and adding the per-connection counter one time per each producer.\nThere is 1 atomic increment and 2 volatile reads per each request\nThere is a delay for detecting the memory over-commit, due to the background task running periodically\nIf there is a substantial amount of producers, the tasks that runs every 100ms will consume significant CPU by looping over all the producers (many of which could be idle) all the time\n\nThe improvement proposed here is using thread-local counters to avoid contention and CPU overhead.\n\nUse 1 counter per IO thread. Once the counter for that thread exceed 1/N of the quota, throttle all the connections that are pinned to the thread.\nThis will also ensure that 1 single connection trying to publish too fast can throttle all other connections in the broker. Rather, it will only affect 1/N of connections.\nNo need for atomic/volatile, just thread-local and local variables, since we're always operating on connections that belongs to the same IO thread.\nPrecise enforcement with no CPU overhead for idle producers\n\nRegarding the lower limit per each IO thread, in which 1 single connection cannot use the entire memory space, I don't think it's an issue at all.\nOnce there is a \"window\" of several MB, there is no throughput gain in having a bigger window. Also, In most scenarios, the only time we'd be filling this window is when the downstream BK is either malfunctioning or under-provisioned for the load. Either case, it's not a performance concern.", "createdAt": "2020-07-01T07:01:59Z", "url": "https://github.com/apache/pulsar/pull/7406", "merged": true, "mergeCommit": {"oid": "2a522c85c0add3f1f647befb0a560689324114bd"}, "closed": true, "closedAt": "2021-05-02T17:44:55Z", "author": {"login": "merlimat"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwmZlVgFqTQ0MDY0NjYxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeSoUUIgH2gAyNDQyNDg4MDc5Ojk3ZGJhNWE2MGVmYWRjOGZkYmRjMGJlM2NmYTk3MWYyM2FiODMzYWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjQ2NjEz", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-440646613", "createdAt": "2020-07-01T08:16:56Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxNjo1NlrOGrbsOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1ODo0MVrOGrdMhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NTY0Mw==", "bodyText": "What's the advantage of this over \"new HashSet<>()\"?", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448195643", "createdAt": "2020-07-01T08:16:56Z", "author": {"login": "ivankelly"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -167,10 +171,26 @@\n     private volatile boolean autoReadDisabledRateLimiting = false;\n     private FeatureFlags features;\n     // Flag to manage throttling-publish-buffer by atomically enable/disable read-channel.\n-    private volatile boolean autoReadDisabledPublishBufferLimiting = false;\n-    private static final AtomicLongFieldUpdater<ServerCnx> MSG_PUBLISH_BUFFER_SIZE_UPDATER =\n-            AtomicLongFieldUpdater.newUpdater(ServerCnx.class, \"messagePublishBufferSize\");\n-    private volatile long messagePublishBufferSize = 0;\n+    private boolean autoReadDisabledPublishBufferLimiting = false;\n+\n+    private final long maxPendingBytesPerThread;\n+    private final long resumeThresholdPendingBytesPerThread;\n+\n+    // Number of bytes pending to be published from a single specific IO thread.\n+    private static final FastThreadLocal<MutableLong> pendingBytesPerThread = new FastThreadLocal<MutableLong>() {\n+        @Override\n+        protected MutableLong initialValue() throws Exception {\n+            return new MutableLong();\n+        }\n+    };\n+\n+    // A set of connections tied to the current thread\n+    private static final FastThreadLocal<Set<ServerCnx>> cnxsPerThread = new FastThreadLocal<Set<ServerCnx>>() {\n+        @Override\n+        protected Set<ServerCnx> initialValue() throws Exception {\n+            return Collections.newSetFromMap(new IdentityHashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDI5Mw==", "bodyText": "Is this exported via prometheus? It would be better to have separate event counters for pause and resume so that if pausing happens between prometheus pulls we can see it.", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r448220293", "createdAt": "2020-07-01T08:58:41Z", "author": {"login": "ivankelly"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -2307,4 +2253,16 @@ private boolean isSystemTopic(String topic) {\n     public void setInterceptor(BrokerInterceptor interceptor) {\n         this.interceptor = interceptor;\n     }\n+\n+    public void pausedConnections(int numberOfConnections) {\n+        pausedConnections.addAndGet(numberOfConnections);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDg2MDYw", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-463486060", "createdAt": "2020-08-07T17:33:42Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5NTY0NDU3", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-629564457", "createdAt": "2021-04-07T03:26:23Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5NTk2MDc3", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-629596077", "createdAt": "2021-04-07T05:04:58Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI5NTk4NzQ0", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-629598744", "createdAt": "2021-04-07T05:12:06Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwMDk2NTA1", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-630096505", "createdAt": "2021-04-07T14:41:14Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ0Njc5NjMw", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-644679630", "createdAt": "2021-04-26T13:35:53Z", "commit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77acc92df631378849ca7d5b8aace67adb476035", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/77acc92df631378849ca7d5b8aace67adb476035", "committedDate": "2021-04-30T22:03:51Z", "message": "Improved in max-pending-bytes mechanism for broker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/f7060160c44b4f8366eff31b4e1ce6cd7ddb1a74", "committedDate": "2020-07-01T06:41:37Z", "message": "Improved in max-pending-bytes mechanism for broker"}, "afterCommit": {"oid": "77acc92df631378849ca7d5b8aace67adb476035", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/77acc92df631378849ca7d5b8aace67adb476035", "committedDate": "2021-04-30T22:03:51Z", "message": "Improved in max-pending-bytes mechanism for broker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb620e2f45d4b16c32dc998a26e529f007ac0911", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/fb620e2f45d4b16c32dc998a26e529f007ac0911", "committedDate": "2021-04-30T22:36:24Z", "message": "Fixed imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5NzQ1OTUz", "url": "https://github.com/apache/pulsar/pull/7406#pullrequestreview-649745953", "createdAt": "2021-05-01T08:17:51Z", "commit": {"oid": "fb620e2f45d4b16c32dc998a26e529f007ac0911"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wMVQwODoxNzo1MVrOJThSwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wMVQwODoxNzo1MVrOJThSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDQ0ODE5Mw==", "bodyText": "The reading frequency here should be very low, only used in unit tests or metrics, why not use longAdder", "url": "https://github.com/apache/pulsar/pull/7406#discussion_r624448193", "createdAt": "2021-05-01T08:17:51Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -269,18 +267,13 @@\n     private Channel listenChannelTls;\n \n     private boolean preciseTopicPublishRateLimitingEnable;\n-    private final long maxMessagePublishBufferBytes;\n-    private final long resumeProducerReadMessagePublishBufferBytes;\n-    private volatile boolean reachMessagePublishBufferThreshold;\n+    private final AtomicInteger pausedConnections = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb620e2f45d4b16c32dc998a26e529f007ac0911"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97dba5a60efadc8fdbdc0be3cfa971f23ab833af", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/97dba5a60efadc8fdbdc0be3cfa971f23ab833af", "committedDate": "2021-05-01T22:37:25Z", "message": "Switched to LongAdder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 495, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}