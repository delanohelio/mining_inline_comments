{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Nzc5NjA2", "number": 7357, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMzozMFrOEIx3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNzozOTozMFrOEJXekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQxMTM1OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxMzozMFrOGo8qcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0Nzo0NlrOGo-Oiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDEyOQ==", "bodyText": "Using isOverwrite feels a bit weird compared to similar properties APIs.\nWhat about having:\n\nsetProperty()\nsetProperties() (with isOverwrite==false behavior)\ndeleteProperty()", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445590129", "createdAt": "2020-06-25T14:13:30Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -453,19 +453,23 @@\n     /**\n      * Update managed-ledger's properties.\n      *\n-     * @param properties key-values of properties\n+     * @param properties  key-values of properties\n+     * @param isOverwrite set true to overwrite original value of managed-ledger's properties; set false to append the\n+     *                    properties to managed-ledger's properties.\n      */\n-    void setProperties(Map<String, String> properties) throws InterruptedException;\n+    void setProperties(Map<String, String> properties, boolean isOverwrite) throws InterruptedException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNTc1NQ==", "bodyText": "OK. Thanks for the suggestion, I will add these APIs.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445615755", "createdAt": "2020-06-25T14:47:46Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -453,19 +453,23 @@\n     /**\n      * Update managed-ledger's properties.\n      *\n-     * @param properties key-values of properties\n+     * @param properties  key-values of properties\n+     * @param isOverwrite set true to overwrite original value of managed-ledger's properties; set false to append the\n+     *                    properties to managed-ledger's properties.\n      */\n-    void setProperties(Map<String, String> properties) throws InterruptedException;\n+    void setProperties(Map<String, String> properties, boolean isOverwrite) throws InterruptedException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MDEyOQ=="}, "originalCommit": {"oid": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQzMDAyOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNzoyMFrOGo812Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0Nzo1NFrOGo-O8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzA0OQ==", "bodyText": "Please also try to add entries in the ledger, to verify that we're not fenced off from the metadata updates.\nChange the settings to force multiple rollovers, eg:\nManagedLedger ledger = factory.open(\"my_test_ledger\",\n     new ManagedLedgerConfig().setMaxEntriesPerLedger(1));", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445593049", "createdAt": "2020-06-25T14:17:20Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1174,43 +1174,49 @@ public void testSetProperties() throws Exception {\n         properties.put(\"key1\", \"value1\");\n         properties.put(\"key2\", \"value2\");\n         properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n+        ledger.setProperties(properties, true);\n         assertEquals(ledger.getProperties(), properties);\n \n         Map<String, String> newProperties = new HashMap<>();\n         newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n-        ledger.setProperties(newProperties);\n+        ledger.setProperties(newProperties, true);\n+        assertEquals(ledger.getProperties(), newProperties);\n+\n+        ledger.setProperties(properties, false);\n+        newProperties.putAll(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNTg1Ng==", "bodyText": "OK.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r445615856", "createdAt": "2020-06-25T14:47:54Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1174,43 +1174,49 @@ public void testSetProperties() throws Exception {\n         properties.put(\"key1\", \"value1\");\n         properties.put(\"key2\", \"value2\");\n         properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n+        ledger.setProperties(properties, true);\n         assertEquals(ledger.getProperties(), properties);\n \n         Map<String, String> newProperties = new HashMap<>();\n         newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n-        ledger.setProperties(newProperties);\n+        ledger.setProperties(newProperties, true);\n+        assertEquals(ledger.getProperties(), newProperties);\n+\n+        ledger.setProperties(properties, false);\n+        newProperties.putAll(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MzA0OQ=="}, "originalCommit": {"oid": "fd8f3bea92f1dbcfb1e9ac299b1b631df1272608"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ2NTc1OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTowNToxNlrOGpkXFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzo1OTo1NlrOGpzCIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUzNA==", "bodyText": "We also need the asyncSetProperty() and asyncDeleteProperty() versions.\nThe throws, should also include ManagedLedgedException", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446240534", "createdAt": "2020-06-26T15:05:16Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -450,6 +450,23 @@\n      */\n     Map<String, String> getProperties();\n \n+    /**\n+     * Add key-value to propertiesMap.\n+     *\n+     * @param key\n+     * @param value\n+     * @throws InterruptedException\n+     */\n+    void setProperty(String key, String value) throws InterruptedException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDkyOA==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480928", "createdAt": "2020-06-27T03:59:56Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -450,6 +450,23 @@\n      */\n     Map<String, String> getProperties();\n \n+    /**\n+     * Add key-value to propertiesMap.\n+     *\n+     * @param key\n+     * @param value\n+     * @throws InterruptedException\n+     */\n+    void setProperty(String key, String value) throws InterruptedException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDUzNA=="}, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwMDMzOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToxMFrOGpktSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDowMTowNVrOGpzCgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjIxNw==", "bodyText": "How is this reporting a failure in the operation?", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446246217", "createdAt": "2020-06-26T15:15:10Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3270,10 +3274,32 @@ public long getOffloadedSize() {\n         return propertiesMap;\n     }\n \n+    @Override\n+    public void setProperty(String key, String value) throws InterruptedException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, false, null);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException {\n+        updateProperties(null, false, true, key);\n+    }\n+\n     @Override\n     public void setProperties(Map<String, String> properties) throws InterruptedException {\n+        updateProperties(properties, true, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(properties, true, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MTAyNw==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446481027", "createdAt": "2020-06-27T04:01:05Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3270,10 +3274,32 @@ public long getOffloadedSize() {\n         return propertiesMap;\n     }\n \n+    @Override\n+    public void setProperty(String key, String value) throws InterruptedException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, false, null);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException {\n+        updateProperties(null, false, true, key);\n+    }\n+\n     @Override\n     public void setProperties(Map<String, String> properties) throws InterruptedException {\n+        updateProperties(properties, true, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(properties, true, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjIxNw=="}, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwOTgxOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNzo1MVrOGpkzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDowMDo0MFrOGpzCbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzc3NA==", "bodyText": "I still think the setProperties() should not blindly overwrite the current map, rather just overwrite the individual keys. It's just a convenience to have 1 metadata op to set multiple keys.\nOtherwise it would be a replaceProperties(), but I don't see how would that be more useful than a setProperties().", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446247774", "createdAt": "2020-06-26T15:17:51Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3289,39 +3315,34 @@ public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n         latch.await();\n     }\n \n-    @Override\n-    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n-        store.getManagedLedgerInfo(name, false, new MetaStoreCallback<ManagedLedgerInfo>() {\n+    private void asyncUpdateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n+        String deleteKey, final SetPropertiesCallback callback, Object ctx) {\n+        if (!metadataMutex.tryLock()) {\n+            // Defer update for later\n+            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey,\n+                callback, ctx), 100, TimeUnit.MILLISECONDS);\n+            return;\n+        }\n+        if (isDelete) {\n+            propertiesMap.remove(deleteKey);\n+        } else if (isOverwrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MTAwNw==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446481007", "createdAt": "2020-06-27T04:00:40Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3289,39 +3315,34 @@ public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n         latch.await();\n     }\n \n-    @Override\n-    public void asyncSetProperties(Map<String, String> properties, final SetPropertiesCallback callback, Object ctx) {\n-        store.getManagedLedgerInfo(name, false, new MetaStoreCallback<ManagedLedgerInfo>() {\n+    private void asyncUpdateProperties(Map<String, String> properties, boolean isOverwrite, boolean isDelete,\n+        String deleteKey, final SetPropertiesCallback callback, Object ctx) {\n+        if (!metadataMutex.tryLock()) {\n+            // Defer update for later\n+            scheduledExecutor.schedule(() -> asyncUpdateProperties(properties, isOverwrite, isDelete, deleteKey,\n+                callback, ctx), 100, TimeUnit.MILLISECONDS);\n+            return;\n+        }\n+        if (isDelete) {\n+            propertiesMap.remove(deleteKey);\n+        } else if (isOverwrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzc3NA=="}, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUxMDg5OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxODoxM1rOGpk0IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDowMDozMVrOGpzCTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzk2OQ==", "bodyText": "shutdown executor at the end", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446247969", "createdAt": "2020-06-26T15:18:13Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDk3NA==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480974", "createdAt": "2020-06-27T04:00:31Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Nzk2OQ=="}, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUxNjc5OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDoxMFrOGpk4IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDowMDoyMFrOGpzCPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODk5Mw==", "bodyText": "Since this is not in the main thread, it will not fail the test itself.\nWe don't need to do it from different threads. It would be enough to do something like:\nledger.addEntry(e1);\nledger.setProperty(\"x\", \"xx\");\nledger.addEntry(e2);\n// ...", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446248993", "createdAt": "2020-06-26T15:20:10Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();\n+        executor.execute(()->{\n+            try {\n+                for (int i = 0; i < 100; i++) {\n+                    ledger.addEntry(\"data\".getBytes(Encoding));\n+                    Thread.sleep(300);\n+                }\n+            } catch (Exception e) {\n+                fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MDk1OQ==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446480959", "createdAt": "2020-06-27T04:00:20Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/test/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerTest.java", "diffHunk": "@@ -1177,40 +1177,59 @@ public void testSetProperties() throws Exception {\n         ledger.setProperties(properties);\n         assertEquals(ledger.getProperties(), properties);\n \n+        properties.put(\"key4\", \"value4\");\n+        ledger.setProperty(\"key4\", \"value4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n+        ledger.deleteProperty(\"key4\");\n+        properties.remove(\"key4\");\n+        assertEquals(ledger.getProperties(), properties);\n+\n         Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n         newProperties.put(\"key5\", \"value5\");\n         newProperties.put(\"key6\", \"value6\");\n         ledger.setProperties(newProperties);\n         assertEquals(ledger.getProperties(), newProperties);\n     }\n \n     @Test\n-    public void testAsyncSetProperties() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ManagedLedger ledger = factory.open(\"my_test_ledger\");\n-        Map<String, String> properties = new HashMap<>();\n-        properties.put(\"key1\", \"value1\");\n-        properties.put(\"key2\", \"value2\");\n-        properties.put(\"key3\", \"value3\");\n-        ledger.setProperties(properties);\n-        Map<String, String> newProperties = new HashMap<>();\n-        newProperties.put(\"key4\", \"value4\");\n-        newProperties.put(\"key5\", \"value5\");\n-        newProperties.put(\"key6\", \"value6\");\n-        ledger.asyncSetProperties(newProperties, new AsyncCallbacks.SetPropertiesCallback() {\n-            @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n-                latch.countDown();\n+    public void testConcurrentAsyncSetProperties() throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(1000);\n+        ManagedLedger ledger = factory.open(\"my_test_ledger\", new ManagedLedgerConfig().setMaxEntriesPerLedger(1));\n+        Executor executor = Executors.newCachedThreadPool();\n+        executor.execute(()->{\n+            try {\n+                for (int i = 0; i < 100; i++) {\n+                    ledger.addEntry(\"data\".getBytes(Encoding));\n+                    Thread.sleep(300);\n+                }\n+            } catch (Exception e) {\n+                fail(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODk5Mw=="}, "originalCommit": {"oid": "b6320e85f1ee94d0ad797b6d74029a9785f68eac"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjU3Mjk3OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNzozOTozMFrOGp3LsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoyNTo0MVrOGp5u0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0ODkxMw==", "bodyText": "We should use the exception returned int the updatePropertiesFailed() and propagate that back to the user. Take a look at https://github.com/apache/pulsar/blob/master/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java#L1096", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446548913", "createdAt": "2020-06-27T17:39:30Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3271,57 +3275,89 @@ public long getOffloadedSize() {\n     }\n \n     @Override\n-    public void setProperties(Map<String, String> properties) throws InterruptedException {\n+    public void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperty(String key, String value, final UpdatePropertiesCallback callback, Object ctx) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        asyncUpdateProperties(map, false, null, callback, ctx);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(null, true, key);\n+    }\n+\n+    @Override\n+    public void asyncDeleteProperty(String key, final UpdatePropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(null, true, key, callback, ctx);\n+    }\n+\n+    @Override\n+    public void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(properties, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final UpdatePropertiesCallback callback,\n+        Object ctx) {\n+        asyncUpdateProperties(properties, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        this.asyncSetProperties(properties, new SetPropertiesCallback() {\n+        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n-            public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n                 log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n                 latch.countDown();\n             }\n         }, null);\n \n-        latch.await();\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n+            throw new ManagedLedgerException(\"Update properties failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7997e77ed8970c14cf12bb4b3afcf15050270999"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDY3NQ==", "bodyText": "Done. Thanks for your guidance :)", "url": "https://github.com/apache/pulsar/pull/7357#discussion_r446590675", "createdAt": "2020-06-28T02:25:41Z", "author": {"login": "zhanghaou"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3271,57 +3275,89 @@ public long getOffloadedSize() {\n     }\n \n     @Override\n-    public void setProperties(Map<String, String> properties) throws InterruptedException {\n+    public void setProperty(String key, String value) throws InterruptedException, ManagedLedgerException {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        updateProperties(map, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperty(String key, String value, final UpdatePropertiesCallback callback, Object ctx) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(key, value);\n+        asyncUpdateProperties(map, false, null, callback, ctx);\n+    }\n+\n+    @Override\n+    public void deleteProperty(String key) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(null, true, key);\n+    }\n+\n+    @Override\n+    public void asyncDeleteProperty(String key, final UpdatePropertiesCallback callback, Object ctx) {\n+        asyncUpdateProperties(null, true, key, callback, ctx);\n+    }\n+\n+    @Override\n+    public void setProperties(Map<String, String> properties) throws InterruptedException, ManagedLedgerException {\n+        updateProperties(properties, false, null);\n+    }\n+\n+    @Override\n+    public void asyncSetProperties(Map<String, String> properties, final UpdatePropertiesCallback callback,\n+        Object ctx) {\n+        asyncUpdateProperties(properties, false, null, callback, ctx);\n+    }\n+\n+    private void updateProperties(Map<String, String> properties, boolean isDelete,\n+        String deleteKey) throws InterruptedException, ManagedLedgerException {\n         final CountDownLatch latch = new CountDownLatch(1);\n-        this.asyncSetProperties(properties, new SetPropertiesCallback() {\n+        AtomicBoolean isSucceed = new AtomicBoolean(false);\n+        this.asyncUpdateProperties(properties, isDelete, deleteKey, new UpdatePropertiesCallback() {\n             @Override\n-            public void setPropertiesComplete(Map<String, String> properties, Object ctx) {\n+            public void updatePropertiesComplete(Map<String, String> properties, Object ctx) {\n+                isSucceed.set(true);\n                 latch.countDown();\n             }\n \n             @Override\n-            public void setPropertiesFailed(ManagedLedgerException exception, Object ctx) {\n+            public void updatePropertiesFailed(ManagedLedgerException exception, Object ctx) {\n                 log.error(\"[{}] Update manageLedger's info failed:{}\", name, exception.getMessage());\n                 latch.countDown();\n             }\n         }, null);\n \n-        latch.await();\n+        if (!latch.await(AsyncOperationTimeoutSeconds, TimeUnit.SECONDS) || !isSucceed.get()) {\n+            throw new ManagedLedgerException(\"Update properties failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0ODkxMw=="}, "originalCommit": {"oid": "7997e77ed8970c14cf12bb4b3afcf15050270999"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2549, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}