{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODA1Njk4", "number": 8422, "title": "[PIP-71][SQL]Pulsar SQL migrate SchemaHandle to presto decoder", "bodyText": "Fixes #4747\nFixes #7652\nMotivation\nPIP-71: https://github.com/apache/pulsar/wiki/PIP-71:-Pulsar-SQL-migrate-SchemaHandle-to-presto-decoder\nPip-Doc : [PIP-71][SQL]Migrate SchemaHandle to Presto-decoder\nIn current version , pulsar-presto deserialize fields  rely on SchemaHandler , but this causes the following restrictions :\n\nMetadata: current nested field is dissociate with presto ParameterizedType , It treated nested field as a separated field , so  presto compiler can\u2019t understand the type hierarchy . nested field should be Row type in presto (e.g.  Hive struct type support) . In the same way\uff0carray \\ map type also shoud associate with presto ParameterizedTypes.\nDecoder : SchemaHandler is hard to work with  RecordCursor.getObject() to support ROW,MAP,ARRAY .etc\n\nThe motivations of this pull request :\n\n PulsarMetadata take advantage of ParameterizedType  to describe row/array/map Type instead of resolve nested columns in pulsar-presto connecter.\nCustomize RowDecoder | RowDecoderFactory | ColumnDecoder to work with pulsar interface, and with some our own extensions  compare to presto original version , we can support more type for backward compatible (e.g.\nTIMESTAMP\\DATE\\TIME\\Real\\ARRAY\\MAP\\ROW support).\nDecouple avro or schema type with pulsar-presto main module (RecordSet,ConnectorMetadata .etc ), aim to friendly with other schema type ( ProtobufNative  \u3001thrift etc..).\n\nModifications\nDescribe in PIP-71: Pulsar SQL migrate SchemaHandle to presto decoder\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (yes )\nThe public API: (no)\nThe schema: ( no)\nThe default values of configurations: (no)\nThe wire protocol: (no)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\n[PIP][SQL]Migrate SchemaHandle to Presto-decoder", "createdAt": "2020-11-02T05:49:40Z", "url": "https://github.com/apache/pulsar/pull/8422", "merged": true, "mergeCommit": {"oid": "a1107ad9e008ef2f1f028feb95a893e74face08e"}, "closed": true, "closedAt": "2021-02-01T14:55:43Z", "author": {"login": "hnail"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYd4v9gH2gAyNTEzODA1Njk4Ojg2ZmI3MjUzMDFlMDE0YmQ3YjNmOGE5MDY4YTk3NWU3ZWJjYWNiNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd1doQFAH2gAyNTEzODA1Njk4OjczZGFkYzZiOTlkMzJlZjk1OGU1ODRjNzkxZWI5MTBlMjRjZDkwZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "86fb725301e014bd7b3f8a9068a975e7ebcacb6d", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/86fb725301e014bd7b3f8a9068a975e7ebcacb6d", "committedDate": "2020-11-02T05:40:39Z", "message": "[SQL] migrate SchemaHandle to decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "703c15cc3de7ae73ac331593d1509f5182c89fe7", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/703c15cc3de7ae73ac331593d1509f5182c89fe7", "committedDate": "2020-11-09T03:23:22Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into sql_migrate_decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94e77072a9ea25c521a1daf31780862f5c4bd12", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/f94e77072a9ea25c521a1daf31780862f5c4bd12", "committedDate": "2020-11-09T06:41:28Z", "message": "commit unit-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d2755b254bb3e3f0e5759d726ee2a4fe2d68e08", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/4d2755b254bb3e3f0e5759d726ee2a4fe2d68e08", "committedDate": "2020-11-09T11:40:03Z", "message": "fix Pair bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d5ea3970e6cd32525bfd22b9723826808ec595", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/98d5ea3970e6cd32525bfd22b9723826808ec595", "committedDate": "2020-11-10T12:37:16Z", "message": "codestyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd57e0288f3e11b4e3d314737b54b57b4f319e1", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/9dd57e0288f3e11b4e3d314737b54b57b4f319e1", "committedDate": "2020-11-10T13:31:50Z", "message": "codestyle fix v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66be5b29d66ef73384a525cb36f6792e72926513", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/66be5b29d66ef73384a525cb36f6792e72926513", "committedDate": "2020-11-10T14:25:13Z", "message": "codestyle fix v3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61a37d292f6d67b1613cf943c00e162ac9f6601", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/e61a37d292f6d67b1613cf943c00e162ac9f6601", "committedDate": "2020-11-10T14:36:44Z", "message": "codestyle fix v4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9360003a2972b6b009b45a29eaaddbae42acc1", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/8f9360003a2972b6b009b45a29eaaddbae42acc1", "committedDate": "2020-11-10T15:20:46Z", "message": "codestyle fix v5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "203dc3646426973a354d8ff35eab35cfecf5664a", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/203dc3646426973a354d8ff35eab35cfecf5664a", "committedDate": "2020-11-11T02:56:26Z", "message": "codeStyle fix v6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa636b9bd30cfefbff43ae65c02a3cdcccb1c7fe", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/aa636b9bd30cfefbff43ae65c02a3cdcccb1c7fe", "committedDate": "2020-11-11T07:21:05Z", "message": "codeStyle fix v7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cfe40eef12dfba3350f9982dc61d547328db896", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/6cfe40eef12dfba3350f9982dc61d547328db896", "committedDate": "2020-11-11T08:18:08Z", "message": "add License"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "592130b1635f1eba8e83c90825d7b326e16534ad", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/592130b1635f1eba8e83c90825d7b326e16534ad", "committedDate": "2020-11-12T06:08:52Z", "message": "add snappy license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/7c5f93ce2e89894e985c5d986982dd34b54ba228", "committedDate": "2020-11-16T06:49:41Z", "message": "codeStyle fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODg2MzE2", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540886316", "createdAt": "2020-11-30T13:02:16Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowMjoxNlrOH76HFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowMjoxNlrOH76HFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDExNg==", "bodyText": "Does this dependency is necessary?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532580116", "createdAt": "2020-11-30T13:02:16Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/pom.xml", "diffHunk": "@@ -109,6 +109,32 @@\n           <version>${joda.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-record-decoder</artifactId>\n+            <version>${presto.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>pulsar-client-original</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTE3NDU2", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540917456", "createdAt": "2020-11-30T13:42:19Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MjoxOVrOH77m5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MjoxOVrOH77m5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDY0NA==", "bodyText": "Does the DecoderExtraInfo need to be printed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532604644", "createdAt": "2020-11-30T13:42:19Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -88,8 +85,6 @@ public String toString() {\n         return \"PulsarColumnMetadata{\"\n             + \"isInternal=\" + isInternal\n             + \", nameWithCase='\" + nameWithCase + '\\''\n-            + \", fieldNames=\" + Arrays.toString(fieldNames)\n-            + \", positionIndices=\" + Arrays.toString(positionIndices)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTE4Mzg3", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540918387", "createdAt": "2020-11-30T13:43:26Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MzoyN1rOH77phQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MzoyN1rOH77phQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTMxNw==", "bodyText": "Is it necessary to compare the DecoderExtraInfo?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532605317", "createdAt": "2020-11-30T13:43:27Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -114,12 +109,6 @@ public boolean equals(Object o) {\n         if (nameWithCase != null ? !nameWithCase.equals(that.nameWithCase) : that.nameWithCase != null) {\n             return false;\n         }\n-        if (!Arrays.deepEquals(fieldNames, that.fieldNames)) {\n-            return false;\n-        }\n-        if (!Arrays.deepEquals(positionIndices, that.positionIndices)) {\n-            return false;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTE4Nzky", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540918792", "createdAt": "2020-11-30T13:43:57Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0Mzo1N1rOH77qvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0Mzo1N1rOH77qvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTYyOQ==", "bodyText": "Is it necessary to compute the DecoderExtraInfo?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532605629", "createdAt": "2020-11-30T13:43:57Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -128,9 +117,91 @@ public int hashCode() {\n         int result = super.hashCode();\n         result = 31 * result + (isInternal ? 1 : 0);\n         result = 31 * result + (nameWithCase != null ? nameWithCase.hashCode() : 0);\n-        result = 31 * result + Arrays.hashCode(fieldNames);\n-        result = 31 * result + Arrays.hashCode(positionIndices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTQ4MTMx", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540948131", "createdAt": "2020-11-30T14:17:12Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoxNzoxMlrOH79D4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoxNzoxMlrOH79D4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyODQ0OA==", "bodyText": "The various decoder factories could be initialized at the Pulsar SQL beginning, one time is enough and they could be reused.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532628448", "createdAt": "2020-11-30T14:17:12Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarDispatchingRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import static java.lang.String.format;\n+\n+import com.google.inject.Inject;\n+\n+import io.airlift.log.Logger;\n+\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.TypeManager;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.common.schema.SchemaType;\n+import org.apache.pulsar.sql.presto.decoder.avro.PulsarAvroRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.json.PulsarJsonRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.primitive.PulsarPrimitiveRowDecoderFactory;\n+\n+/**\n+ * dispatcher RowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType}.\n+ */\n+public class PulsarDispatchingRowDecoderFactory {\n+\n+    private static final Logger log = Logger.get(PulsarDispatchingRowDecoderFactory.class);\n+\n+    private TypeManager typeManager;\n+\n+    @Inject\n+    public PulsarDispatchingRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.createRowDecoder(topicName, schemaInfo, columns);\n+    }\n+\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.extractColumnMetadata(topicName, schemaInfo, handleKeyValueType);\n+    }\n+\n+    private PulsarRowDecoderFactory createDecoderFactory(SchemaInfo schemaInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTg5NjA2", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-540989606", "createdAt": "2020-11-30T14:59:50Z", "commit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo1OTo1MFrOH7-_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxNVrOH8DVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDEyMw==", "bodyText": "It seems that the multi-version schema decoder cache could be added and the decoders could be reused.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532660123", "createdAt": "2020-11-30T14:59:50Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDgyNw==", "bodyText": "same as above.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532660827", "createdAt": "2020-11-30T15:00:42Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MDg4Ng==", "bodyText": "The switch is more efficient and the PulsarInternalColumn could be changed to an enum.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532670886", "createdAt": "2020-11-30T15:14:30Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.VALUE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedKey;\n             if (this.currentMessage.getKeyBytes().isPresent()) {\n-                keyByteBuf = this.currentMessage.getKeyBytes().get();\n+                decodedKey = keyDecoder.decodeRow(this.currentMessage.getKeyBytes().get());\n+                decodedKey.ifPresent(currentRowValuesMap::putAll);\n             }\n-            currentRecord = this.schemaHandler.deserialize(keyByteBuf,\n-                    this.currentMessage.getData(), this.currentMessage.getSchemaVersion());\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n         } else {\n-            currentRecord = this.schemaHandler.deserialize(this.currentMessage.getData(),\n-                    this.currentMessage.getSchemaVersion());\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.NONE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n+        }\n+\n+        for (DecoderColumnHandle columnHandle : columnHandles) {\n+            if (columnHandle.isInternal()) {\n+                if (PulsarInternalColumn.PARTITION.getName().equals(columnHandle.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4NjcwNw==", "bodyText": "Does this problem is fixed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532686707", "createdAt": "2020-11-30T15:34:45Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4ODE5NA==", "bodyText": "This feature will be added in the future, right?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532688194", "createdAt": "2020-11-30T15:36:38Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError\n+\n+        return schema.getFields().stream()\n+                .map(field ->\n+                        new PulsarColumnMetadata(field.name(), parseAvroPrestoType(\n+                                field.name(), field.schema()), field.schema().toString(), null, false, false,\n+                                handleKeyValueType, new PulsarColumnMetadata.DecoderExtraInfo(field.name(),\n+                                null, null))\n+\n+                ).collect(toList());\n+    }\n+\n+    private Type parseAvroPrestoType(String fieldname, Schema schema) {\n+        Schema.Type type = schema.getType();\n+        LogicalType logicalType  = schema.getLogicalType();\n+        switch (type) {\n+            case STRING:\n+            case ENUM:\n+                return createUnboundedVarcharType();\n+            case NULL:\n+                throw new UnsupportedOperationException(\n+                        format(\"field '%s' NULL type code should not be reached,\"\n+                                + \"please check the schema or report the bug.\", fieldname));\n+            case FIXED:\n+            case BYTES:\n+                //TODO: support decimal logicalType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4ODc2Ng==", "bodyText": "same as above.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532688766", "createdAt": "2020-11-30T15:37:22Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError\n+\n+        return schema.getFields().stream()\n+                .map(field ->\n+                        new PulsarColumnMetadata(field.name(), parseAvroPrestoType(\n+                                field.name(), field.schema()), field.schema().toString(), null, false, false,\n+                                handleKeyValueType, new PulsarColumnMetadata.DecoderExtraInfo(field.name(),\n+                                null, null))\n+\n+                ).collect(toList());\n+    }\n+\n+    private Type parseAvroPrestoType(String fieldname, Schema schema) {\n+        Schema.Type type = schema.getType();\n+        LogicalType logicalType  = schema.getLogicalType();\n+        switch (type) {\n+            case STRING:\n+            case ENUM:\n+                return createUnboundedVarcharType();\n+            case NULL:\n+                throw new UnsupportedOperationException(\n+                        format(\"field '%s' NULL type code should not be reached,\"\n+                                + \"please check the schema or report the bug.\", fieldname));\n+            case FIXED:\n+            case BYTES:\n+                //TODO: support decimal logicalType\n+                return VarbinaryType.VARBINARY;\n+            case INT:\n+                if (logicalType == LogicalTypes.timeMillis()) {\n+                    return TIME;\n+                } else if (logicalType == LogicalTypes.date()) {\n+                    return DATE;\n+                }\n+                return IntegerType.INTEGER;\n+            case LONG:\n+                if (logicalType == LogicalTypes.timestampMillis()) {\n+                    return TimestampType.TIMESTAMP;\n+                }\n+                //TODO:  support timestamp_microseconds logicalType : https://github.com/prestosql/presto/issues/1284", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NDY1Nw==", "bodyText": "Does this problem is fixed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532694657", "createdAt": "2020-11-30T15:45:10Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/json/PulsarJsonRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.json;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#JSON}.\n+ */\n+public class PulsarJsonRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarJsonRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarJsonRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                                 Set<DecoderColumnHandle> columns) {\n+        return new PulsarJsonRowDecoder((GenericJsonSchema) GenericJsonSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNzQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<TopicName>  topicNames;\n          \n          \n            \n                protected static List<TopicName> topicNames;", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532717463", "createdAt": "2020-11-30T16:14:41Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNzcwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<TopicName>  partitionedTopicNames;\n          \n          \n            \n                protected static List<TopicName> partitionedTopicNames;", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532717708", "createdAt": "2020-11-30T16:15:00Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;\n+    protected static List<TopicName>  partitionedTopicNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxODAyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<String> fooFieldNames =  new ArrayList<>();\n          \n          \n            \n                protected static List<String> fooFieldNames = new ArrayList<>();", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532718026", "createdAt": "2020-11-30T16:15:24Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;\n+    protected static List<TopicName>  partitionedTopicNames;\n     protected static Map<String, Integer> partitionedTopicsToPartitions;\n     protected static Map<String, SchemaInfo> topicsToSchemas;\n     protected static Map<String, Long> topicsToNumEntries;\n \n     private final static ObjectMapper objectMapper = new ObjectMapper();\n \n+    protected static List<String> fooFieldNames =  new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDA2NA==", "bodyText": "Is there any test to test the nest object query?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532720064", "createdAt": "2020-11-30T16:18:19Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -179,28 +150,13 @@\n     public static class Bar {\n         public Integer field1;\n         public String field2;\n-        public Boo test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDE1NQ==", "bodyText": "Could you add a test for PulsarPrimitiveRowDecoder?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532730155", "createdAt": "2020-11-30T16:31:44Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarPrimitiveSchemaHandler.java", "diffHunk": "@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import io.netty.buffer.ByteBufAllocator;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import org.apache.pulsar.client.impl.schema.BooleanSchema;\n-import org.apache.pulsar.client.impl.schema.ByteSchema;\n-import org.apache.pulsar.client.impl.schema.BytesSchema;\n-import org.apache.pulsar.client.impl.schema.DateSchema;\n-import org.apache.pulsar.client.impl.schema.DoubleSchema;\n-import org.apache.pulsar.client.impl.schema.FloatSchema;\n-import org.apache.pulsar.client.impl.schema.IntSchema;\n-import org.apache.pulsar.client.impl.schema.LongSchema;\n-import org.apache.pulsar.client.impl.schema.ShortSchema;\n-import org.apache.pulsar.client.impl.schema.StringSchema;\n-import org.apache.pulsar.client.impl.schema.TimeSchema;\n-import org.apache.pulsar.client.impl.schema.TimestampSchema;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.apache.pulsar.common.schema.SchemaType;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Date;\n-import java.util.List;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-@Slf4j\n-public class TestPulsarPrimitiveSchemaHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMTI1Nw==", "bodyText": "Could you add a test for KeyValueSchema datas?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532731257", "createdAt": "2020-11-30T16:33:15Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarKeyValueSchemaHandler.java", "diffHunk": "@@ -1,353 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.Unpooled;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import java.io.IOException;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.pulsar.client.api.Schema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.api.raw.RawMessageImpl;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.KeyValue;\n-import org.apache.pulsar.common.schema.KeyValueEncodingType;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.mockito.Mockito;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import static org.mockito.Mockito.mock;\n-\n-\n-/**\n- * Unit test for KeyValueSchemaHandler\n- */\n-@Slf4j\n-public class TestPulsarKeyValueSchemaHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0a0c610fddc055075aec310a4f3f0e09b59e7fb", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/f0a0c610fddc055075aec310a4f3f0e09b59e7fb", "committedDate": "2020-12-01T06:00:13Z", "message": "Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf98970ad442e6d36728b6ec4600642d9dfa6b5c", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/bf98970ad442e6d36728b6ec4600642d9dfa6b5c", "committedDate": "2020-12-01T06:01:17Z", "message": "Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbcf5cd2c43eabbafda3decdd3625690697bd109", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/dbcf5cd2c43eabbafda3decdd3625690697bd109", "committedDate": "2020-12-01T06:01:30Z", "message": "Update pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java\n\nCo-authored-by: ran <gaoran_10@126.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25631991c24f4e6505236e5c2e92f08616900efb", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/25631991c24f4e6505236e5c2e92f08616900efb", "committedDate": "2020-12-17T10:05:14Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into sql_migrate_decoder\n\n# Conflicts:\n#\tpulsar-sql/presto-distribution/LICENSE\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/AvroSchemaHandler.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarInternalColumn.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarMetadata.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarPrimitiveSchemaHandler.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSchemaHandlers.java\n#\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSqlSchemaInfoProvider.java\n#\tpulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestAvroSchemaHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc673b615f76a29965b68b6445a76321e26d18b", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/8cc673b615f76a29965b68b6445a76321e26d18b", "committedDate": "2020-12-20T07:18:59Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into sql_migrate_decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c0cefd4162a906986ecb89c4b7975395147b31", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/11c0cefd4162a906986ecb89c4b7975395147b31", "committedDate": "2020-12-23T07:24:03Z", "message": "add keyValue\\Primitive schema test && add schema cyclic definition detect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f20d17657b51f8864519794c45d20709417756d", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/7f20d17657b51f8864519794c45d20709417756d", "committedDate": "2020-12-23T07:25:52Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into sql_migrate_decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6091b22dc1be7956a3017ef6e9471673b54796c6", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/6091b22dc1be7956a3017ef6e9471673b54796c6", "committedDate": "2021-01-18T08:04:52Z", "message": "Merge branch 'master' into sql_migrate_decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91a0e4c221965fc9d43e4f10a2006f3281c07f7", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/b91a0e4c221965fc9d43e4f10a2006f3281c07f7", "committedDate": "2021-01-18T08:05:14Z", "message": "Merge branch 'sql_migrate_decoder' of github.com:hnail/pulsar into sql_migrate_decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c54c1d00fe35cc67e0356d0bddf6fc7cb89b19d3", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/c54c1d00fe35cc67e0356d0bddf6fc7cb89b19d3", "committedDate": "2021-01-19T02:39:29Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16626f2c2071bf4159c42c79b4416080a1c0ebbf", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/16626f2c2071bf4159c42c79b4416080a1c0ebbf", "committedDate": "2021-01-29T06:04:01Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into sql_migrate_decoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MzUzNDY5", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-579353469", "createdAt": "2021-01-29T15:19:29Z", "commit": {"oid": "16626f2c2071bf4159c42c79b4416080a1c0ebbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NzY2NzY0", "url": "https://github.com/apache/pulsar/pull/8422#pullrequestreview-579766764", "createdAt": "2021-01-30T15:50:29Z", "commit": {"oid": "16626f2c2071bf4159c42c79b4416080a1c0ebbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73dadc6b99d32ef958e584c791eb910e24cd90d6", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/73dadc6b99d32ef958e584c791eb910e24cd90d6", "committedDate": "2021-01-31T07:46:26Z", "message": "merge master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1150, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}