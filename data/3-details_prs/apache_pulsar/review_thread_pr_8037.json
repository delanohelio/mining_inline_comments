{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTA4MTQw", "number": 8037, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1OTo0NVrOEj-2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1OTo0NVrOEj-2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTY1MjkxOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PersistentAcknowledgmentsGroupingTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1OTo0NVrOHSphJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1OTo0NVrOHSphJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNjY0NA==", "bodyText": "Looks don't need to remove again.", "url": "https://github.com/apache/pulsar/pull/8037#discussion_r489316644", "createdAt": "2020-09-16T09:59:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/PersistentAcknowledgmentsGroupingTracker.java", "diffHunk": "@@ -326,6 +388,86 @@ public void flush() {\n             }\n         }\n \n+        if (!pendingIndividualTransactionAcks.isEmpty()) {\n+            if (Commands.peerSupportsMultiMessageAcknowledgment(cnx.getRemoteEndpointProtocolVersion())) {\n+                // We can send 1 single protobuf command with all individual acks\n+                while (true) {\n+                    Triple<Long, Long, MessageIdImpl> entry = pendingIndividualTransactionAcks.pollFirst();\n+                    if (entry == null) {\n+                        break;\n+                    }\n+\n+                    // if messageId is checked then all the chunked related to that msg also processed so, ack all of\n+                    // them\n+                    MessageIdImpl[] chunkMsgIds = this.consumer.unAckedChunckedMessageIdSequenceMap.get(entry.getRight());\n+                    long mostSigBits = entry.getLeft();\n+                    long leastSigBits = entry.getMiddle();\n+                    MessageIdImpl messageId = entry.getRight();\n+                    if (chunkMsgIds != null && chunkMsgIds.length > 1) {\n+                        for (MessageIdImpl cMsgId : chunkMsgIds) {\n+                            if (cMsgId != null) {\n+                                newAckCommand(consumer.consumerId, cMsgId, null, AckType.Individual, null, Collections.emptyMap(), cnx, false, mostSigBits, leastSigBits);\n+                            }\n+                        }\n+                        // messages will be acked so, remove checked message sequence\n+                        this.consumer.unAckedChunckedMessageIdSequenceMap.remove(messageId);\n+                    } else {\n+                        newAckCommand(consumer.consumerId, messageId, null, AckType.Individual, null, Collections.emptyMap(), cnx, false, mostSigBits, leastSigBits);\n+                    }\n+                }\n+            } else {\n+                // When talking to older brokers, send the acknowledgements individually\n+                while (true) {\n+                    Triple<Long, Long, MessageIdImpl> entry = pendingIndividualTransactionAcks.pollFirst();\n+                    if (entry == null) {\n+                        break;\n+                    }\n+\n+                    newAckCommand(consumer.consumerId, entry.getRight(), null, AckType.Individual,\n+                            null, Collections.emptyMap(), cnx, false, entry.getLeft(), entry.getMiddle());\n+                    shouldFlush = true;\n+                }\n+            }\n+        }\n+\n+        if (!pendingIndividualTransactionBatchIndexAcks.isEmpty()) {\n+            Iterator<Map.Entry<TransactionImpl, ConcurrentHashMap<MessageIdImpl, ConcurrentBitSetRecyclable>>> transactionIterator = pendingIndividualTransactionBatchIndexAcks.entrySet().iterator();\n+            while (transactionIterator.hasNext()) {\n+                Map.Entry<TransactionImpl, ConcurrentHashMap<MessageIdImpl, ConcurrentBitSetRecyclable>> transactionEntry = transactionIterator.next();\n+                TransactionImpl txn = transactionEntry.getKey();\n+                synchronized (txn) {\n+                    if (pendingIndividualTransactionBatchIndexAcks.containsKey(txn)) {\n+                        List<Triple<Long, Long, ConcurrentBitSetRecyclable>> messageIdBitSetList = new ArrayList<>();\n+                        transactionEntriesToAck.put(txn, messageIdBitSetList);\n+                        Iterator<Map.Entry<MessageIdImpl, ConcurrentBitSetRecyclable>> messageIdIterator = transactionEntry.getValue().entrySet().iterator();\n+                        while (messageIdIterator.hasNext()) {\n+                            Map.Entry<MessageIdImpl, ConcurrentBitSetRecyclable> messageIdEntry = messageIdIterator.next();\n+                            ConcurrentBitSetRecyclable concurrentBitSetRecyclable =\n+                                    ConcurrentBitSetRecyclable.create(messageIdEntry.getValue());\n+                            MessageIdImpl messageId = messageIdEntry.getKey();\n+                            messageIdBitSetList.add(Triple.of(messageId.ledgerId, messageId.entryId, concurrentBitSetRecyclable));\n+                            messageIdEntry.getValue().set(0, messageIdEntry.getValue().size());\n+                            messageIdIterator.remove();\n+                        }\n+                        transactionIterator.remove();\n+                        pendingIndividualTransactionBatchIndexAcks.remove(transactionEntry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355e682ad64bf911bd1b865325d6d67c654e907b"}, "originalPosition": 286}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}