{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDM5OTk2", "number": 6700, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NDoyNFrODwgNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NDoyNFrODwgNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg1OTEzOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NDoyNFrOGDi6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0NDoyNFrOGDi6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MDk1NA==", "bodyText": "The test should assert here instead of printing. Also make sure it's more robust against race conditions", "url": "https://github.com/apache/pulsar/pull/6700#discussion_r406370954", "createdAt": "2020-04-09T17:44:24Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest.java", "diffHunk": "@@ -2424,4 +2424,30 @@ public void testTopicStatsLastExpireTimestampForSubscription() throws PulsarAdmi\n \n         Assert.assertTrue(admin.topics().getStats(topic).subscriptions.values().iterator().next().lastExpireTimestamp > 0L);\n     }\n+\n+    @Test\n+    public void testBacklogSizeShouldBeZeroWhenConsumerAckedAllMessages() throws Exception {\n+        final String topic = \"persistent://prop-xyz/ns1/testBacklogSizeShouldBeZeroWhenConsumerAckedAllMessages\";\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer()\n+                .topic(topic)\n+                .subscriptionName(\"sub-1\")\n+                .subscribe();\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topic)\n+                .create();\n+\n+        for (int i = 0; i < 33; i++) {\n+            producer.send(new byte[1024 * i * 5]);\n+        }\n+\n+        for (int i = 0; i < 33; i++) {\n+            consumer.acknowledgeCumulative(consumer.receive());\n+        }\n+\n+        // Wait ack send\n+        Thread.sleep(1000);\n+\n+        TopicStats topicStats = admin.topics().getStats(topic);\n+        System.out.println(topicStats.backlogSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e2394a7cf6f8094ca3a41cd3bc388adb80336a1"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}