{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDEyMTM0", "number": 7111, "title": "Trigger rollover when meeting maxLedgerRolloverTimeMinutes", "bodyText": "This pull request resolves #7184\nMotivation\nThis pull request implements a monitor thread to check if the current topic ledger meets the constraint of managedLedgerMaxLedgerRolloverTimeMinutes and trigger a rollover to make the configuration take effect. Another important idea here is, if we trigger a rollover, we can close the current ledger so that we can release the storage of current ledger btw. Because for some less commonly used topics, the current ledger data is likely to have expired, and the current rollover logic will only be triggered when adding a new entry. Obviously, this will result in a waste of disk space.\nExpected behaviors\nThe monitor thread will be scheduled at fix time interval and the interval is set to managedLedgerMaxLedgerRolloverTimeMinutes. Each inspection will make two judgments at the same time, i.e. currentLedgerEntries > 0 and currentLedgerIsFull(). When the number of current entry is equal to 0, it will not trigger a new rollover and we use this to reduce the ledger's creation.\nModifications\n\nThe main modification took place in ManagedLedgerImpl\nIn addition, a check thread was added in the BrokerService\n\nmaybe related to #6935", "createdAt": "2020-05-30T04:22:42Z", "url": "https://github.com/apache/pulsar/pull/7111", "merged": true, "mergeCommit": {"oid": "fa2da42337e926240d1b62cfb052507802b24b7e"}, "closed": true, "closedAt": "2020-06-08T01:12:41Z", "author": {"login": "wuzhanpeng"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmBVfbgH2gAyNDI1NDEyMTM0OmVlMmZjMjU5NGIwNjRkNGNjMjYzYzU0NTEzYzQ0MGQ1NDdlOWM0ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpF7CLgFqTQyNTg3MTUzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee2fc2594b064d4cc263c54513c440d547e9c4e0", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/ee2fc2594b064d4cc263c54513c440d547e9c4e0", "committedDate": "2020-05-29T12:08:35Z", "message": "add feature: enable rollover when triggering maxLedgerRolloverTimeMinutes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/b1558940ab2a0ef515845fe78b5de5ba9ce38ad7", "committedDate": "2020-05-30T03:44:23Z", "message": "add supplemental test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzgzNzc4", "url": "https://github.com/apache/pulsar/pull/7111#pullrequestreview-421383778", "createdAt": "2020-05-30T06:49:36Z", "commit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo0OTozN1rOGcxCyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo1MjoyOFrOGcxDXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA==", "bodyText": "Why do we need to expose this in the interface, it should be better to keep in implementation details", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816840", "createdAt": "2020-05-30T06:49:37Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg5Nw==", "bodyText": "We don't need initiate the creation of a ledger at this point. We can stay in LedgerClosed state until a new write comes in.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816897", "createdAt": "2020-05-30T06:50:38Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1391,6 +1392,38 @@ synchronized void ledgerClosed(final LedgerHandle lh) {\n         }\n     }\n \n+    synchronized void createLedgerAfterClosed() {\n+        STATE_UPDATER.set(this, State.CreatingLedger);\n+        this.lastLedgerCreationInitiationTimestamp = System.nanoTime();\n+        mbean.startDataLedgerCreateOp();\n+        asyncCreateLedger(bookKeeper, config, digestType, this, Collections.emptyMap());\n+    }\n+\n+    @Override\n+    public void rollCurrentLedgerIfFull() {\n+        log.info(\"[{}] Start checking if current ledger is full\", name);\n+        if (currentLedgerEntries > 0 && currentLedgerIsFull()) {\n+            STATE_UPDATER.set(this, State.ClosingLedger);\n+            currentLedger.asyncClose(new AsyncCallback.CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object o) {\n+                    checkArgument(currentLedger.getId() == lh.getId(), \"ledgerId %s doesn't match with acked ledgerId %s\",\n+                            currentLedger.getId(),\n+                            lh.getId());\n+\n+                    if (rc == BKException.Code.OK) {\n+                        log.debug(\"Successfuly closed ledger {}\", lh.getId());\n+                    } else {\n+                        log.warn(\"Error when closing ledger {}. Status={}\", lh.getId(), BKException.getMessage(rc));\n+                    }\n+\n+                    ledgerClosed(lh);\n+                    createLedgerAfterClosed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk1OA==", "bodyText": "This thread is not being stopped. Potentially we could also reuse an existing executor.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816958", "createdAt": "2020-05-30T06:51:46Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -277,6 +278,8 @@ public BrokerService(PulsarService pulsar) throws Exception {\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-publish-buffer-monitor\"));\n         this.consumedLedgersMonitor = Executors\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"consumed-Ledgers-monitor\"));\n+        this.ledgerFullMonitor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk5MQ==", "bodyText": "the recurring task needs to be cancelled when BrokerService is closed", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816991", "createdAt": "2020-05-30T06:52:28Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -485,6 +489,12 @@ protected void startConsumedLedgersMonitor() {\n         }\n     }\n \n+    protected void startLedgerFullMonitor() {\n+        int interval = pulsar().getConfiguration().getManagedLedgerMaxLedgerRolloverTimeMinutes();\n+        ledgerFullMonitor.scheduleAtFixedRate(safeRun(this::checkLedgerFull),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f0615f4e120d92531dc080f725dcc25203fbb7", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/33f0615f4e120d92531dc080f725dcc25203fbb7", "committedDate": "2020-06-01T03:53:54Z", "message": "shutdown monitor when BrokerService is closed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d225e4d82bbc1d5bb71eccb8ba11fd1ac7ddc48", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/9d225e4d82bbc1d5bb71eccb8ba11fd1ac7ddc48", "committedDate": "2020-06-05T02:48:45Z", "message": "Merge remote-tracking branch 'apache/master' into feature_rollover_when_triggering_maxLedgerRolloverTimeMinutes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTY0NTIz", "url": "https://github.com/apache/pulsar/pull/7111#pullrequestreview-424964523", "createdAt": "2020-06-05T02:56:56Z", "commit": {"oid": "9d225e4d82bbc1d5bb71eccb8ba11fd1ac7ddc48"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1Njo1N1rOGfeyEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1Njo1N1rOGfeyEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzM3OA==", "bodyText": "Ok, I think we can change the current logic. If the current ledger is closed, we can delete it. I'm not sure is there any problems with this change. @merlimat Could you please help check this?", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r435663378", "createdAt": "2020-06-05T02:56:57Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1391,6 +1392,38 @@ synchronized void ledgerClosed(final LedgerHandle lh) {\n         }\n     }\n \n+    synchronized void createLedgerAfterClosed() {\n+        STATE_UPDATER.set(this, State.CreatingLedger);\n+        this.lastLedgerCreationInitiationTimestamp = System.nanoTime();\n+        mbean.startDataLedgerCreateOp();\n+        asyncCreateLedger(bookKeeper, config, digestType, this, Collections.emptyMap());\n+    }\n+\n+    @Override\n+    public void rollCurrentLedgerIfFull() {\n+        log.info(\"[{}] Start checking if current ledger is full\", name);\n+        if (currentLedgerEntries > 0 && currentLedgerIsFull()) {\n+            STATE_UPDATER.set(this, State.ClosingLedger);\n+            currentLedger.asyncClose(new AsyncCallback.CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object o) {\n+                    checkArgument(currentLedger.getId() == lh.getId(), \"ledgerId %s doesn't match with acked ledgerId %s\",\n+                            currentLedger.getId(),\n+                            lh.getId());\n+\n+                    if (rc == BKException.Code.OK) {\n+                        log.debug(\"Successfuly closed ledger {}\", lh.getId());\n+                    } else {\n+                        log.warn(\"Error when closing ledger {}. Status={}\", lh.getId(), BKException.getMessage(rc));\n+                    }\n+\n+                    ledgerClosed(lh);\n+                    createLedgerAfterClosed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg5Nw=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1ODcxNTM4", "url": "https://github.com/apache/pulsar/pull/7111#pullrequestreview-425871538", "createdAt": "2020-06-08T01:10:37Z", "commit": {"oid": "9d225e4d82bbc1d5bb71eccb8ba11fd1ac7ddc48"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToxMDozN1rOGgNAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToxMDozN1rOGgNAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDc0Mw==", "bodyText": "+1 @wuzhanpeng can we re-use an existing executor? Otherwise, we end up creating a lot of executors.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r436420743", "createdAt": "2020-06-08T01:10:37Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -277,6 +278,8 @@ public BrokerService(PulsarService pulsar) throws Exception {\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-publish-buffer-monitor\"));\n         this.consumedLedgersMonitor = Executors\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"consumed-Ledgers-monitor\"));\n+        this.ledgerFullMonitor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk1OA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2737, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}