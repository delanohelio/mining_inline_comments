{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjc2OTgz", "number": 7237, "title": "Fix leader/scheduler assignment processing lag problem", "bodyText": "Motivation\nWhen the leader worker isn't processing assignment messages fast enough. The background routine that checks for unassigned functions instances will trigger scheduler to schedule and write more assignments to the assignment topic. There is essentially a feedback loop that can cause many assignment updates to be published in the assignment topic that are unnecessary.\nModifications\nAllow leader to modify/update locally in-memory assignments map", "createdAt": "2020-06-10T20:17:19Z", "url": "https://github.com/apache/pulsar/pull/7237", "merged": true, "mergeCommit": {"oid": "68877f8947ce5ed28f09152cbf91ea0b0ecafb87"}, "closed": true, "closedAt": "2020-06-19T21:40:27Z", "author": {"login": "jerrypeng"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp_wTCgH2gAyNDMyNjc2OTgzOjhhNTRlMGY1NWUzZWYwYTUzNmM1NjAxNzRhNGY0YTAyNDEzNDgwODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs6CmYgFqTQzNDM1MjAzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8a54e0f55e3ef0a536c560174a4f4a0241348084", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/8a54e0f55e3ef0a536c560174a4f4a0241348084", "committedDate": "2020-06-10T20:33:45Z", "message": "Fix leader/scheduler assignment processing lag problem"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8f550ce481e10060dc40abe6afdb4615a30ba57", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/e8f550ce481e10060dc40abe6afdb4615a30ba57", "committedDate": "2020-06-10T20:14:05Z", "message": "cleaning up"}, "afterCommit": {"oid": "8a54e0f55e3ef0a536c560174a4f4a0241348084", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/8a54e0f55e3ef0a536c560174a4f4a0241348084", "committedDate": "2020-06-10T20:33:45Z", "message": "Fix leader/scheduler assignment processing lag problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/540676151843d2e6c75b7abef423b96f8c9166da", "committedDate": "2020-06-10T21:04:45Z", "message": "add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c23f8a61f1480c28dd61e7c2be177420299f6d", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/65c23f8a61f1480c28dd61e7c2be177420299f6d", "committedDate": "2020-06-11T22:02:14Z", "message": "adding more comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDIyOTk0", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-429422994", "createdAt": "2020-06-12T02:31:20Z", "commit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMToyMVrOGi1F7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMToyMVrOGi1F7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NDYzNg==", "bodyText": "this isn't right?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r439174636", "createdAt": "2020-06-12T02:31:21Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -70,33 +78,64 @@ public FunctionAssignmentTailer(\n                             log.warn(\"Encountered error when assignment tailer is not running\", th);\n                         }\n                     }\n-\n                 }\n             }\n+            log.info(\"tailer thread exiting...\");\n+            hasExited.complete(null);\n         });\n         this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    public void start() {\n-        isRunning = true;\n-        tailerThread.start();\n+    public CompletableFuture<Void> triggerReadToTheEndAndExit() {\n+        exitOnEndOfTopic = true;\n+        return this.hasExited;\n+    }\n+\n+    public synchronized void start() throws PulsarClientException {\n+        if (!isRunning) {\n+            isRunning = true;\n+            if (reader == null) {\n+                reader = createReader();\n+            }\n+            tailerThread.start();\n+        }\n     }\n+    \n \n     @Override\n-    public void close() {\n-        log.info(\"Stopping function assignment tailer\");\n+    public synchronized void close() {\n+        log.info(\"Closing function assignment tailer\");\n         try {\n             isRunning = false;\n-            if (tailerThread != null && tailerThread.isAlive()) {\n-                tailerThread.interrupt();\n-            }\n+\n+            if (tailerThread != null) {\n+                while (true) {\n+                    tailerThread.interrupt();\n+\n+                    try {\n+                        tailerThread.join(5000, 0);\n+                    } catch (InterruptedException e) {\n+                        log.warn(\"Waiting for assignment tailer thread to stop is interrupted\", e);\n+                    }\n+\n+                    if (tailerThread.isAlive()) {\n+                        log.warn(\"Assignment tailer thread is still alive.  Will attempt to interrupt again.\");\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }            \n             if (reader != null) {\n                 reader.close();\n+                reader = null;\n             }\n+\n+            hasExited = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDIzNDMz", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-429423433", "createdAt": "2020-06-12T02:32:56Z", "commit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMjo1N1rOGi1Hbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMjo1N1rOGi1Hbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NTAyMg==", "bodyText": "This should be abstracted out from leaderservice to respective class(in this case functionruntimemanager)", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r439175022", "createdAt": "2020-06-12T02:32:57Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/LeaderService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.worker;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.ConsumerEventListener;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.ConsumerImpl;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Slf4j\n+public class LeaderService implements AutoCloseable, ConsumerEventListener {\n+\n+    private final String consumerName;\n+    private final FunctionAssignmentTailer functionAssignmentTailer;\n+    private final ErrorNotifier errorNotifier;\n+    private ConsumerImpl<byte[]> consumer;\n+    private final WorkerConfig workerConfig;\n+    private final PulsarClient pulsarClient;\n+    private final AtomicBoolean isLeader = new AtomicBoolean(false);\n+\n+    static final String COORDINATION_TOPIC_SUBSCRIPTION = \"participants\";\n+\n+    private static String WORKER_IDENTIFIER = \"id\";\n+    \n+    public LeaderService(WorkerService workerService,\n+                         PulsarClient pulsarClient,\n+                         FunctionAssignmentTailer functionAssignmentTailer,\n+                         ErrorNotifier errorNotifier) {\n+        this.workerConfig = workerService.getWorkerConfig();\n+        this.pulsarClient = pulsarClient;\n+        this.functionAssignmentTailer = functionAssignmentTailer;\n+        this.errorNotifier = errorNotifier;\n+        consumerName = String.format(\n+                \"%s:%s:%d\",\n+                workerConfig.getWorkerId(),\n+                workerConfig.getWorkerHostname(),\n+                workerConfig.getWorkerPort()\n+        );\n+\n+    }\n+\n+    public void start() throws PulsarClientException {\n+        // the leaders service is using a `coordination` topic for leader election.\n+        // we don't produce any messages into this topic, we only use the `failover` subscription\n+        // to elect an active consumer as the leader worker. The leader worker will be responsible\n+        // for scheduling snapshots for FMT and doing task assignment.\n+        consumer = (ConsumerImpl<byte[]>) pulsarClient.newConsumer()\n+                .topic(workerConfig.getClusterCoordinationTopic())\n+                .subscriptionName(COORDINATION_TOPIC_SUBSCRIPTION)\n+                .subscriptionType(SubscriptionType.Failover)\n+                .consumerEventListener(this)\n+                .property(WORKER_IDENTIFIER, consumerName)\n+                .subscribe();\n+\n+    }\n+\n+    @Override\n+    public void becameActive(Consumer<?> consumer, int partitionId) {\n+        if (isLeader.compareAndSet(false, true)) {\n+            log.info(\"Worker {} became the leader.\", consumerName);\n+            try {\n+                // trigger read to the end of the topic and exit\n+                // Since the leader can just update its in memory assignments cache directly\n+                functionAssignmentTailer.triggerReadToTheEndAndExit().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDI0MjI3", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-429424227", "createdAt": "2020-06-12T02:35:49Z", "commit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozNTo0OVrOGi1J7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozNTo0OVrOGi1J7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NTY2Mw==", "bodyText": "I think we need to simplify this massively.\nI think part of the pr that I'm working on wrt metadata simplification will impact this as well.", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r439175663", "createdAt": "2020-06-12T02:35:49Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java", "diffHunk": "@@ -137,25 +165,35 @@ public SchedulerManager(WorkerConfig workerConfig, PulsarClient pulsarClient, Pu\n     }\n \n     public Future<?> schedule() {\n-        return executorService.submit(() -> {\n-            synchronized (SchedulerManager.this) {\n-                boolean isLeader = membershipManager.isLeader();\n-                if (isLeader) {\n-                    try {\n-                        invokeScheduler();\n-                    } catch (Exception e) {\n-                        log.warn(\"Failed to invoke scheduler\", e);\n-                        throw e;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540676151843d2e6c75b7abef423b96f8c9166da"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66de46e3b5669acf6ddfb413fc8c5b4f0878bad6", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/66de46e3b5669acf6ddfb413fc8c5b4f0878bad6", "committedDate": "2020-06-12T07:54:32Z", "message": "improving impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4189de276ee4ca29fe4243805903a64d1098c8df", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/4189de276ee4ca29fe4243805903a64d1098c8df", "committedDate": "2020-06-12T21:58:24Z", "message": "fixing bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2ec82feb72eb4dde92fa72f8e1c84a98bc9fe0", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/9d2ec82feb72eb4dde92fa72f8e1c84a98bc9fe0", "committedDate": "2020-06-13T02:01:41Z", "message": "improving impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4557156902ab323ad431a140b17d471012f62e2b", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/4557156902ab323ad431a140b17d471012f62e2b", "committedDate": "2020-06-13T02:08:10Z", "message": "fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d3c0add33aa1fe1d57401ecfd393df6426f18f", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/85d3c0add33aa1fe1d57401ecfd393df6426f18f", "committedDate": "2020-06-13T02:14:28Z", "message": "adding comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjUwMjMw", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-430250230", "createdAt": "2020-06-14T20:53:56Z", "commit": {"oid": "85d3c0add33aa1fe1d57401ecfd393df6426f18f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMDo1Mzo1NlrOGjfU0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMDo1Mzo1NlrOGjfU0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2NjU3Nw==", "bodyText": "should we check for exitOnEndofTopic as well?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r439866577", "createdAt": "2020-06-14T20:53:56Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -116,4 +147,51 @@ public void processAssignment(Message<byte[]> msg) {\n             this.functionRuntimeManager.processAssignment(assignment);\n         }\n     }\n+    \n+    private Reader<byte[]> createReader() throws PulsarClientException {\n+        MessageId startMessageId = lastMessageId == null ? MessageId.earliest : lastMessageId;\n+        log.info(\"Assignment tailer will start reading from message id {}\", startMessageId);\n+\n+        return readerBuilder\n+                .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-assignment-tailer\")\n+                .readerName(workerConfig.getWorkerId() + \"-function-assignment-tailer\")\n+                .topic(workerConfig.getFunctionAssignmentTopic())\n+                .readCompacted(true)\n+                .startMessageId(startMessageId)\n+                .create();\n+    }\n+\n+    private Thread getTailerThread() {\n+        Thread t = new Thread(() -> {\n+            while (isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext(5, TimeUnit.SECONDS);\n+                    if (msg == null) {\n+                        if (exitOnEndOfTopic && !reader.hasMessageAvailable()) {\n+                            break;\n+                        }\n+                    } else {\n+                        processAssignment(msg);\n+                        // keep track of the last message read\n+                        lastMessageId = msg.getMessageId();\n+                    }\n+                } catch (Throwable th) {\n+                    if (isRunning) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d3c0add33aa1fe1d57401ecfd393df6426f18f"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10a5211f0a56c638fda0846999517991e537773", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/c10a5211f0a56c638fda0846999517991e537773", "committedDate": "2020-06-15T05:04:34Z", "message": "add more testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODI2NTYz", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-432826563", "createdAt": "2020-06-17T22:43:55Z", "commit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0Mzo1NlrOGlZ0rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0Mzo1NlrOGlZ0rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3MzU4Mw==", "bodyText": "maybe defer this till start?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r441873583", "createdAt": "2020-06-17T22:43:56Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -28,75 +29,105 @@\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n \n+/**\n+ * This class is responsible for reading assignments from the 'assignments' functions internal topic.\n+ * Only functions worker leader writes to the topic while other workers read from the topic.\n+ * When a worker become a leader, the worker will read to the end of the assignments topic and close its reader to the topic.\n+ * Then the worker and new leader will be in charge of computing new assignments when necessary.\n+ * The leader does not need to listen to the assignments topic because it can just update its in memory assignments map directly\n+ * after it computes a new scheduling.  When a worker loses leadership, the worker is start reading from the assignments topic again.\n+ */\n @Slf4j\n public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    private final ReaderBuilder readerBuilder;\n+    private final WorkerConfig workerConfig;\n+    private final ErrorNotifier errorNotifier;\n     @Getter\n-    private final Reader<byte[]> reader;\n+    private Reader<byte[]> reader;\n     private volatile boolean isRunning = false;\n+    private volatile boolean exitOnEndOfTopic = false;\n+    private CompletableFuture<Void> hasExited;\n \n-    private final Thread tailerThread;\n+    private Thread tailerThread;\n+\n+    @Getter\n+    @Setter\n+    private MessageId lastMessageId = null;\n     \n     public FunctionAssignmentTailer(\n             FunctionRuntimeManager functionRuntimeManager,\n             ReaderBuilder readerBuilder,\n             WorkerConfig workerConfig,\n             ErrorNotifier errorNotifier) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n+        this.hasExited = new CompletableFuture<>();\n+        this.readerBuilder = readerBuilder;\n+        this.workerConfig = workerConfig;\n+        this.errorNotifier = errorNotifier;\n+        this.reader = createReader();\n         \n-        this.reader = readerBuilder\n-          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .topic(workerConfig.getFunctionAssignmentTopic())\n-          .readCompacted(true)\n-          .startMessageId(MessageId.earliest)\n-          .create();\n-        \n-        this.tailerThread = new Thread(() -> {\n-            while(isRunning) {\n-                try {\n-                    Message<byte[]> msg = reader.readNext();\n-                    processAssignment(msg);\n-                } catch (Throwable th) {\n-                    if (isRunning) {\n-                        log.error(\"Encountered error in assignment tailer\", th);\n-                        // trigger fatal error\n-                        isRunning = false;\n-                        errorNotifier.triggerError(th);\n-                    } else {\n-                        if (!(th instanceof InterruptedException || th.getCause() instanceof InterruptedException)) {\n-                            log.warn(\"Encountered error when assignment tailer is not running\", th);\n-                        }\n-                    }\n+        this.tailerThread = getTailerThread();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODI4NDM1", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-432828435", "createdAt": "2020-06-17T22:48:47Z", "commit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0ODo0N1rOGlZ6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0ODo0N1rOGlZ6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NTA1Mg==", "bodyText": "Why are we adding this here? I'm not seeing any usages", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r441875052", "createdAt": "2020-06-17T22:48:47Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java", "diffHunk": "@@ -130,6 +132,8 @@ public int size() {\n     private final FunctionMetaDataManager functionMetaDataManager;\n \n     private final ErrorNotifier errorNotifier;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODI5MTM1", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-432829135", "createdAt": "2020-06-17T22:50:40Z", "commit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo1MDo0MVrOGlZ8oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo1MDo0MVrOGlZ8oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NTYxNg==", "bodyText": "Can you instead call functionRunTimeManager.acquireLeadership() and functionRunTimeManager.giveupLeadership()", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r441875616", "createdAt": "2020-06-17T22:50:41Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/LeaderService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.worker;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.ConsumerEventListener;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.ConsumerImpl;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Slf4j\n+public class LeaderService implements AutoCloseable, ConsumerEventListener {\n+\n+    private final String consumerName;\n+    private final FunctionRuntimeManager functionRuntimeManager;\n+    private final ErrorNotifier errorNotifier;\n+    private final SchedulerManager schedulerManager;\n+    private ConsumerImpl<byte[]> consumer;\n+    private final WorkerConfig workerConfig;\n+    private final PulsarClient pulsarClient;\n+    private final AtomicBoolean isLeader = new AtomicBoolean(false);\n+\n+    static final String COORDINATION_TOPIC_SUBSCRIPTION = \"participants\";\n+\n+    private static String WORKER_IDENTIFIER = \"id\";\n+    \n+    public LeaderService(WorkerService workerService,\n+                         PulsarClient pulsarClient,\n+                         FunctionRuntimeManager functionRuntimeManager,\n+                         SchedulerManager schedulerManager,\n+                         ErrorNotifier errorNotifier) {\n+        this.workerConfig = workerService.getWorkerConfig();\n+        this.pulsarClient = pulsarClient;\n+        this.functionRuntimeManager = functionRuntimeManager;\n+        this.schedulerManager = schedulerManager;\n+        this.errorNotifier = errorNotifier;\n+        consumerName = String.format(\n+                \"%s:%s:%d\",\n+                workerConfig.getWorkerId(),\n+                workerConfig.getWorkerHostname(),\n+                workerConfig.getWorkerPort()\n+        );\n+\n+    }\n+\n+    public void start() throws PulsarClientException {\n+        // the leaders service is using a `coordination` topic for leader election.\n+        // we don't produce any messages into this topic, we only use the `failover` subscription\n+        // to elect an active consumer as the leader worker. The leader worker will be responsible\n+        // for scheduling snapshots for FMT and doing task assignment.\n+        consumer = (ConsumerImpl<byte[]>) pulsarClient.newConsumer()\n+                .topic(workerConfig.getClusterCoordinationTopic())\n+                .subscriptionName(COORDINATION_TOPIC_SUBSCRIPTION)\n+                .subscriptionType(SubscriptionType.Failover)\n+                .consumerEventListener(this)\n+                .property(WORKER_IDENTIFIER, consumerName)\n+                .consumerName(consumerName)\n+                .subscribe();\n+\n+    }\n+\n+    @Override\n+    public void becameActive(Consumer<?> consumer, int partitionId) {\n+        if (isLeader.compareAndSet(false, true)) {\n+            log.info(\"Worker {} became the leader.\", consumerName);\n+            try {\n+                // trigger read to the end of the topic and exit\n+                // Since the leader can just update its in memory assignments cache directly\n+                functionRuntimeManager.stopReadingAssignments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODQyNDc3", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-432842477", "createdAt": "2020-06-17T23:27:14Z", "commit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNzoxNFrOGlaoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNzoxNFrOGlaoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4Njg4Mw==", "bodyText": "I think the better way is to make scheduler aware of the leadership changes(just like runtime manger) and call acquireLeadership and giveupLeadership", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r441886883", "createdAt": "2020-06-17T23:27:14Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/LeaderService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.worker;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.ConsumerEventListener;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.ConsumerImpl;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Slf4j\n+public class LeaderService implements AutoCloseable, ConsumerEventListener {\n+\n+    private final String consumerName;\n+    private final FunctionRuntimeManager functionRuntimeManager;\n+    private final ErrorNotifier errorNotifier;\n+    private final SchedulerManager schedulerManager;\n+    private ConsumerImpl<byte[]> consumer;\n+    private final WorkerConfig workerConfig;\n+    private final PulsarClient pulsarClient;\n+    private final AtomicBoolean isLeader = new AtomicBoolean(false);\n+\n+    static final String COORDINATION_TOPIC_SUBSCRIPTION = \"participants\";\n+\n+    private static String WORKER_IDENTIFIER = \"id\";\n+    \n+    public LeaderService(WorkerService workerService,\n+                         PulsarClient pulsarClient,\n+                         FunctionRuntimeManager functionRuntimeManager,\n+                         SchedulerManager schedulerManager,\n+                         ErrorNotifier errorNotifier) {\n+        this.workerConfig = workerService.getWorkerConfig();\n+        this.pulsarClient = pulsarClient;\n+        this.functionRuntimeManager = functionRuntimeManager;\n+        this.schedulerManager = schedulerManager;\n+        this.errorNotifier = errorNotifier;\n+        consumerName = String.format(\n+                \"%s:%s:%d\",\n+                workerConfig.getWorkerId(),\n+                workerConfig.getWorkerHostname(),\n+                workerConfig.getWorkerPort()\n+        );\n+\n+    }\n+\n+    public void start() throws PulsarClientException {\n+        // the leaders service is using a `coordination` topic for leader election.\n+        // we don't produce any messages into this topic, we only use the `failover` subscription\n+        // to elect an active consumer as the leader worker. The leader worker will be responsible\n+        // for scheduling snapshots for FMT and doing task assignment.\n+        consumer = (ConsumerImpl<byte[]>) pulsarClient.newConsumer()\n+                .topic(workerConfig.getClusterCoordinationTopic())\n+                .subscriptionName(COORDINATION_TOPIC_SUBSCRIPTION)\n+                .subscriptionType(SubscriptionType.Failover)\n+                .consumerEventListener(this)\n+                .property(WORKER_IDENTIFIER, consumerName)\n+                .consumerName(consumerName)\n+                .subscribe();\n+\n+    }\n+\n+    @Override\n+    public void becameActive(Consumer<?> consumer, int partitionId) {\n+        if (isLeader.compareAndSet(false, true)) {\n+            log.info(\"Worker {} became the leader.\", consumerName);\n+            try {\n+                // trigger read to the end of the topic and exit\n+                // Since the leader can just update its in memory assignments cache directly\n+                functionRuntimeManager.stopReadingAssignments();\n+\n+                // make sure scheduler is initialized because this worker\n+                // is the leader and may need to start computing and writing assignments\n+                schedulerManager.initialize();\n+            } catch (Throwable th) {\n+                log.error(\"Encountered error when initializing to become leader\", th);\n+                errorNotifier.triggerError(th);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void becameInactive(Consumer<?> consumer, int partitionId) {\n+        if (isLeader.compareAndSet(true, false)) {\n+            log.info(\"Worker {} lost the leadership.\", consumerName);\n+            // when a worker has lost leadership it needs to start reading from the assignment topic again\n+            try {\n+                // acquire scheduler lock to make sure a scheduling is not in process\n+                schedulerManager.getSchedulerLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10a5211f0a56c638fda0846999517991e537773"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61f1c2bb73ec982ff4c818f39ce68bc9f8be8e62", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/61f1c2bb73ec982ff4c818f39ce68bc9f8be8e62", "committedDate": "2020-06-18T01:08:29Z", "message": "addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c8f55419f554d466c34f3412763fc41c9a6d74c", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/1c8f55419f554d466c34f3412763fc41c9a6d74c", "committedDate": "2020-06-18T01:10:46Z", "message": "cleaning up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/67c082e0eececb89879f2af8f4d38ca5c6d62741", "committedDate": "2020-06-19T01:55:06Z", "message": "refactoring implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE1MjI5", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433815229", "createdAt": "2020-06-19T05:42:40Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0Mjo0MFrOGmIs9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0Mjo0MFrOGmIs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MTY1NQ==", "bodyText": "exitFuture might be a better name", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442641655", "createdAt": "2020-06-19T05:42:40Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -25,95 +25,157 @@\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n import org.apache.pulsar.client.api.ReaderBuilder;\n-import org.apache.pulsar.functions.proto.Function.Assignment;\n \n import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n \n+/**\n+ * This class is responsible for reading assignments from the 'assignments' functions internal topic.\n+ * Only functions worker leader writes to the topic while other workers read from the topic.\n+ * When a worker become a leader, the worker will read to the end of the assignments topic and close its reader to the topic.\n+ * Then the worker and new leader will be in charge of computing new assignments when necessary.\n+ * The leader does not need to listen to the assignments topic because it can just update its in memory assignments map directly\n+ * after it computes a new scheduling.  When a worker loses leadership, the worker is start reading from the assignments topic again.\n+ */\n @Slf4j\n public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n-    @Getter\n-    private final Reader<byte[]> reader;\n+    private final ReaderBuilder readerBuilder;\n+    private final WorkerConfig workerConfig;\n+    private final ErrorNotifier errorNotifier;\n+    private Reader<byte[]> reader;\n     private volatile boolean isRunning = false;\n+    private volatile boolean exitOnEndOfTopic = false;\n+    private CompletableFuture<Void> hasExited;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE1NDI2", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433815426", "createdAt": "2020-06-19T05:43:15Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0MzoxNlrOGmItfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0MzoxNlrOGmItfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MTc5MA==", "bodyText": "Shouldn' t we init this to MessageId.earliest?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442641790", "createdAt": "2020-06-19T05:43:16Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -25,95 +25,157 @@\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n import org.apache.pulsar.client.api.ReaderBuilder;\n-import org.apache.pulsar.functions.proto.Function.Assignment;\n \n import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n \n+/**\n+ * This class is responsible for reading assignments from the 'assignments' functions internal topic.\n+ * Only functions worker leader writes to the topic while other workers read from the topic.\n+ * When a worker become a leader, the worker will read to the end of the assignments topic and close its reader to the topic.\n+ * Then the worker and new leader will be in charge of computing new assignments when necessary.\n+ * The leader does not need to listen to the assignments topic because it can just update its in memory assignments map directly\n+ * after it computes a new scheduling.  When a worker loses leadership, the worker is start reading from the assignments topic again.\n+ */\n @Slf4j\n public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n-    @Getter\n-    private final Reader<byte[]> reader;\n+    private final ReaderBuilder readerBuilder;\n+    private final WorkerConfig workerConfig;\n+    private final ErrorNotifier errorNotifier;\n+    private Reader<byte[]> reader;\n     private volatile boolean isRunning = false;\n+    private volatile boolean exitOnEndOfTopic = false;\n+    private CompletableFuture<Void> hasExited;\n+    private Thread tailerThread;\n \n-    private final Thread tailerThread;\n+    @Getter\n+    private MessageId lastMessageId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE2MTk0", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433816194", "createdAt": "2020-06-19T05:45:44Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0NTo0NFrOGmIv_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0NTo0NFrOGmIv_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MjQzMA==", "bodyText": "I think its cleaner to consolidate this and above method to start(MessageId) { ... }", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442642430", "createdAt": "2020-06-19T05:45:44Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -25,95 +25,157 @@\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n import org.apache.pulsar.client.api.ReaderBuilder;\n-import org.apache.pulsar.functions.proto.Function.Assignment;\n \n import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n \n+/**\n+ * This class is responsible for reading assignments from the 'assignments' functions internal topic.\n+ * Only functions worker leader writes to the topic while other workers read from the topic.\n+ * When a worker become a leader, the worker will read to the end of the assignments topic and close its reader to the topic.\n+ * Then the worker and new leader will be in charge of computing new assignments when necessary.\n+ * The leader does not need to listen to the assignments topic because it can just update its in memory assignments map directly\n+ * after it computes a new scheduling.  When a worker loses leadership, the worker is start reading from the assignments topic again.\n+ */\n @Slf4j\n public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n-    @Getter\n-    private final Reader<byte[]> reader;\n+    private final ReaderBuilder readerBuilder;\n+    private final WorkerConfig workerConfig;\n+    private final ErrorNotifier errorNotifier;\n+    private Reader<byte[]> reader;\n     private volatile boolean isRunning = false;\n+    private volatile boolean exitOnEndOfTopic = false;\n+    private CompletableFuture<Void> hasExited;\n+    private Thread tailerThread;\n \n-    private final Thread tailerThread;\n+    @Getter\n+    private MessageId lastMessageId = null;\n     \n     public FunctionAssignmentTailer(\n             FunctionRuntimeManager functionRuntimeManager,\n             ReaderBuilder readerBuilder,\n             WorkerConfig workerConfig,\n-            ErrorNotifier errorNotifier) throws PulsarClientException {\n+            ErrorNotifier errorNotifier) {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        \n-        this.reader = readerBuilder\n-          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .topic(workerConfig.getFunctionAssignmentTopic())\n-          .readCompacted(true)\n-          .startMessageId(MessageId.earliest)\n-          .create();\n-        \n-        this.tailerThread = new Thread(() -> {\n-            while(isRunning) {\n-                try {\n-                    Message<byte[]> msg = reader.readNext();\n-                    processAssignment(msg);\n-                } catch (Throwable th) {\n-                    if (isRunning) {\n-                        log.error(\"Encountered error in assignment tailer\", th);\n-                        // trigger fatal error\n-                        isRunning = false;\n-                        errorNotifier.triggerError(th);\n-                    } else {\n-                        if (!(th instanceof InterruptedException || th.getCause() instanceof InterruptedException)) {\n-                            log.warn(\"Encountered error when assignment tailer is not running\", th);\n-                        }\n-                    }\n+        this.hasExited = new CompletableFuture<>();\n+        this.readerBuilder = readerBuilder;\n+        this.workerConfig = workerConfig;\n+        this.errorNotifier = errorNotifier;\n+    }\n \n-                }\n+    public synchronized CompletableFuture<Void> triggerReadToTheEndAndExit() {\n+        exitOnEndOfTopic = true;\n+        return this.hasExited;\n+    }\n+\n+    public void startFromMessage(MessageId startMessageId) throws PulsarClientException {\n+        log.info(\"Function assignment tailer start reading from topic {} at {}\",\n+                workerConfig.getFunctionAssignmentTopic(), startMessageId);\n+        if (!isRunning) {\n+            isRunning = true;\n+            if (reader == null) {\n+                reader = createReader(startMessageId);\n             }\n-        });\n-        this.tailerThread.setName(\"assignment-tailer-thread\");\n+            if (tailerThread == null || !tailerThread.isAlive()) {\n+                tailerThread = getTailerThread();\n+            }\n+            hasExited = new CompletableFuture<>();\n+            tailerThread.start();\n+        }\n     }\n \n-    public void start() {\n-        isRunning = true;\n-        tailerThread.start();\n+    public synchronized void start() throws PulsarClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE3Mjgz", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433817283", "createdAt": "2020-06-19T05:48:58Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0ODo1OFrOGmIzZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0ODo1OFrOGmIzZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MzMwMw==", "bodyText": "is it simpler if we do\nwhile(isRunning) {\nif (exitOnEndOfTopic && !available) break;\ntry { read message... }", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442643303", "createdAt": "2020-06-19T05:48:58Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -25,95 +25,157 @@\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n import org.apache.pulsar.client.api.ReaderBuilder;\n-import org.apache.pulsar.functions.proto.Function.Assignment;\n \n import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n \n+/**\n+ * This class is responsible for reading assignments from the 'assignments' functions internal topic.\n+ * Only functions worker leader writes to the topic while other workers read from the topic.\n+ * When a worker become a leader, the worker will read to the end of the assignments topic and close its reader to the topic.\n+ * Then the worker and new leader will be in charge of computing new assignments when necessary.\n+ * The leader does not need to listen to the assignments topic because it can just update its in memory assignments map directly\n+ * after it computes a new scheduling.  When a worker loses leadership, the worker is start reading from the assignments topic again.\n+ */\n @Slf4j\n public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n-    @Getter\n-    private final Reader<byte[]> reader;\n+    private final ReaderBuilder readerBuilder;\n+    private final WorkerConfig workerConfig;\n+    private final ErrorNotifier errorNotifier;\n+    private Reader<byte[]> reader;\n     private volatile boolean isRunning = false;\n+    private volatile boolean exitOnEndOfTopic = false;\n+    private CompletableFuture<Void> hasExited;\n+    private Thread tailerThread;\n \n-    private final Thread tailerThread;\n+    @Getter\n+    private MessageId lastMessageId = null;\n     \n     public FunctionAssignmentTailer(\n             FunctionRuntimeManager functionRuntimeManager,\n             ReaderBuilder readerBuilder,\n             WorkerConfig workerConfig,\n-            ErrorNotifier errorNotifier) throws PulsarClientException {\n+            ErrorNotifier errorNotifier) {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        \n-        this.reader = readerBuilder\n-          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n-          .topic(workerConfig.getFunctionAssignmentTopic())\n-          .readCompacted(true)\n-          .startMessageId(MessageId.earliest)\n-          .create();\n-        \n-        this.tailerThread = new Thread(() -> {\n-            while(isRunning) {\n-                try {\n-                    Message<byte[]> msg = reader.readNext();\n-                    processAssignment(msg);\n-                } catch (Throwable th) {\n-                    if (isRunning) {\n-                        log.error(\"Encountered error in assignment tailer\", th);\n-                        // trigger fatal error\n-                        isRunning = false;\n-                        errorNotifier.triggerError(th);\n-                    } else {\n-                        if (!(th instanceof InterruptedException || th.getCause() instanceof InterruptedException)) {\n-                            log.warn(\"Encountered error when assignment tailer is not running\", th);\n-                        }\n-                    }\n+        this.hasExited = new CompletableFuture<>();\n+        this.readerBuilder = readerBuilder;\n+        this.workerConfig = workerConfig;\n+        this.errorNotifier = errorNotifier;\n+    }\n \n-                }\n+    public synchronized CompletableFuture<Void> triggerReadToTheEndAndExit() {\n+        exitOnEndOfTopic = true;\n+        return this.hasExited;\n+    }\n+\n+    public void startFromMessage(MessageId startMessageId) throws PulsarClientException {\n+        log.info(\"Function assignment tailer start reading from topic {} at {}\",\n+                workerConfig.getFunctionAssignmentTopic(), startMessageId);\n+        if (!isRunning) {\n+            isRunning = true;\n+            if (reader == null) {\n+                reader = createReader(startMessageId);\n             }\n-        });\n-        this.tailerThread.setName(\"assignment-tailer-thread\");\n+            if (tailerThread == null || !tailerThread.isAlive()) {\n+                tailerThread = getTailerThread();\n+            }\n+            hasExited = new CompletableFuture<>();\n+            tailerThread.start();\n+        }\n     }\n \n-    public void start() {\n-        isRunning = true;\n-        tailerThread.start();\n+    public synchronized void start() throws PulsarClientException {\n+        MessageId startMessageId = lastMessageId == null ? MessageId.earliest : lastMessageId;\n+        startFromMessage(startMessageId);\n     }\n \n     @Override\n-    public void close() {\n-        log.info(\"Stopping function assignment tailer\");\n+    public synchronized void close() {\n+        log.info(\"Closing function assignment tailer\");\n         try {\n             isRunning = false;\n-            if (tailerThread != null && tailerThread.isAlive()) {\n-                tailerThread.interrupt();\n+\n+            if (tailerThread != null) {\n+                while (true) {\n+                    tailerThread.interrupt();\n+\n+                    try {\n+                        tailerThread.join(5000, 0);\n+                    } catch (InterruptedException e) {\n+                        log.warn(\"Waiting for assignment tailer thread to stop is interrupted\", e);\n+                    }\n+\n+                    if (tailerThread.isAlive()) {\n+                        log.warn(\"Assignment tailer thread is still alive.  Will attempt to interrupt again.\");\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                tailerThread = null;\n             }\n             if (reader != null) {\n                 reader.close();\n+                reader = null;\n             }\n+\n+            hasExited = null;\n+            exitOnEndOfTopic = false;\n+            \n         } catch (IOException e) {\n             log.error(\"Failed to stop function assignment tailer\", e);\n         }\n-        log.info(\"Stopped function assignment tailer\");\n+    }\n+    \n+    private Reader<byte[]> createReader(MessageId startMessageId) throws PulsarClientException {\n+        log.info(\"Assignment tailer will start reading from message id {}\", startMessageId);\n+\n+        return readerBuilder\n+                .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-assignment-tailer\")\n+                .readerName(workerConfig.getWorkerId() + \"-function-assignment-tailer\")\n+                .topic(workerConfig.getFunctionAssignmentTopic())\n+                .readCompacted(true)\n+                .startMessageId(startMessageId)\n+                .create();\n     }\n \n-    public void processAssignment(Message<byte[]> msg) {\n-\n-        if(msg.getData()==null || (msg.getData().length==0)) {\n-            log.info(\"Received assignment delete: {}\", msg.getKey());\n-            this.functionRuntimeManager.deleteAssignment(msg.getKey());\n-        } else {\n-            Assignment assignment;\n-            try {\n-                assignment = Assignment.parseFrom(msg.getData());\n-            } catch (IOException e) {\n-                log.error(\"[{}] Received bad assignment update at message {}\", reader.getTopic(), msg.getMessageId(), e);\n-                throw new RuntimeException(e);\n+    private Thread getTailerThread() {\n+        Thread t = new Thread(() -> {\n+            while (isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext(5, TimeUnit.SECONDS);\n+                    if (msg == null) {\n+                        if (exitOnEndOfTopic && !reader.hasMessageAvailable()) {\n+                            break;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE3NTg5", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433817589", "createdAt": "2020-06-19T05:49:55Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0OTo1NVrOGmI0Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0OTo1NVrOGmI0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MzUxNQ==", "bodyText": "initialize and start? what cannot be done during constructor?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442643515", "createdAt": "2020-06-19T05:49:55Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataManager.java", "diffHunk": "@@ -99,16 +98,20 @@ public void initialize() {\n                 this.functionMetaDataTopicTailer.processRequest(this.functionMetaDataTopicTailer.getReader().readNext());\n             }\n             this.setInitializePhase(false);\n-            // schedule functions if necessary\n-            this.schedulerManager.schedule();\n-            // start function metadata tailer\n-            this.functionMetaDataTopicTailer.start();\n+            \n \n         } catch (Exception e) {\n             log.error(\"Failed to initialize meta data store\", e);\n             throw new RuntimeException(e);\n         }\n     }\n+    \n+    public void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODE4MTU4", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433818158", "createdAt": "2020-06-19T05:51:26Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1MToyN1rOGmI2KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1MToyN1rOGmI2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NDAwOQ==", "bodyText": "I like that we are no longer using FunctionAssignmenttailer here. However maybe a static method that consolidates. this reader creation and the one in assignment tailer?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442644009", "createdAt": "2020-06-19T05:51:27Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java", "diffHunk": "@@ -210,21 +210,25 @@ public FunctionRuntimeManager(WorkerConfig workerConfig, WorkerService workerSer\n      * 2. After current assignments are read, assignments belonging to this worker will be processed\n      */\n     public void initialize() {\n-        log.info(\"/** Initializing Runtime Manager **/\");\n         try {\n-            this.functionAssignmentTailer = new FunctionAssignmentTailer(\n-                    this,\n-                    this.getWorkerService().getClient().newReader(),\n-                    this.workerConfig,\n-                    this.errorNotifier);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODIwMTQ4", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-433820148", "createdAt": "2020-06-19T05:57:19Z", "commit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1NzoxOVrOGmI8OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1NzoxOVrOGmI8OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NTU2MQ==", "bodyText": "remove?", "url": "https://github.com/apache/pulsar/pull/7237#discussion_r442645561", "createdAt": "2020-06-19T05:57:19Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerUtils.java", "diffHunk": "@@ -33,8 +33,11 @@\n import org.apache.pulsar.client.admin.PulsarAdmin;\n import org.apache.pulsar.client.admin.PulsarAdminBuilder;\n import org.apache.pulsar.client.api.ClientBuilder;\n+import org.apache.pulsar.client.api.MessageId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67c082e0eececb89879f2af8f4d38ca5c6d62741"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d31bf593b40c034bfe4eb7e4c3ca0eec09065c8", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/0d31bf593b40c034bfe4eb7e4c3ca0eec09065c8", "committedDate": "2020-06-19T07:07:35Z", "message": "addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzUyMDM3", "url": "https://github.com/apache/pulsar/pull/7237#pullrequestreview-434352037", "createdAt": "2020-06-19T21:36:05Z", "commit": {"oid": "0d31bf593b40c034bfe4eb7e4c3ca0eec09065c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 658, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}