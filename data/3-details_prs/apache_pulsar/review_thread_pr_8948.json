{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MjUyNDQz", "number": 8948, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozNjo0OFrOFFWSgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozNjo0OFrOFFWSgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTUyMzg0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozNjo0OFrOIF0wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMzozNzoyNlrOIF3XsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI1NQ==", "bodyText": "Is this ok to set the value as null? Can we avoid to do that?", "url": "https://github.com/apache/pulsar/pull/8948#discussion_r542978255", "createdAt": "2020-12-15T01:36:48Z", "author": {"login": "zymap"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1816,6 +1816,91 @@ public void removePersistence(@Suspended final AsyncResponse asyncResponse,\n         });\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Get maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void getMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            Optional<Integer> maxSubscriptionsPerTopic = internalGetMaxSubscriptionsPerTopic();\n+            if (!maxSubscriptionsPerTopic.isPresent()) {\n+                asyncResponse.resume(Response.noContent().build());\n+            } else {\n+                asyncResponse.resume(maxSubscriptionsPerTopic.get());\n+            }\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Set maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Invalid value of maxSubscriptionsPerTopic\")})\n+    public void setMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                @ApiParam(value = \"The max subscriptions of the topic\") int maxSubscriptionsPerTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(maxSubscriptionsPerTopic).whenComplete((r, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                log.info(\"[{}] Successfully updated maxSubscriptionsPerTopic: namespace={}, topic={}\"\n+                                + \", maxSubscriptions={}\"\n+                        , clientAppId(), namespaceName, topicName.getLocalName(), maxSubscriptionsPerTopic);\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Remove maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void removeMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                   @PathParam(\"tenant\") String tenant,\n+                                   @PathParam(\"namespace\") String namespace,\n+                                   @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(null).whenComplete((r, ex) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk5NzUxNQ==", "bodyText": "The current configuration has 3 states: disabled (0), enabled (>0), and not set.\nDisabled means that even if the policy is set at the upper level, this level will not take effect.\nNot set to distinguish whether to use this level of policy or the upper level. Of course, we can set -1 to mean not set. But it can only be a numeric configuration.\nTherefore, I want to be consistent with other configurations, and use null to indicate not set.", "url": "https://github.com/apache/pulsar/pull/8948#discussion_r542997515", "createdAt": "2020-12-15T02:28:52Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1816,6 +1816,91 @@ public void removePersistence(@Suspended final AsyncResponse asyncResponse,\n         });\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Get maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void getMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            Optional<Integer> maxSubscriptionsPerTopic = internalGetMaxSubscriptionsPerTopic();\n+            if (!maxSubscriptionsPerTopic.isPresent()) {\n+                asyncResponse.resume(Response.noContent().build());\n+            } else {\n+                asyncResponse.resume(maxSubscriptionsPerTopic.get());\n+            }\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Set maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Invalid value of maxSubscriptionsPerTopic\")})\n+    public void setMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                @ApiParam(value = \"The max subscriptions of the topic\") int maxSubscriptionsPerTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(maxSubscriptionsPerTopic).whenComplete((r, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                log.info(\"[{}] Successfully updated maxSubscriptionsPerTopic: namespace={}, topic={}\"\n+                                + \", maxSubscriptions={}\"\n+                        , clientAppId(), namespaceName, topicName.getLocalName(), maxSubscriptionsPerTopic);\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Remove maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void removeMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                   @PathParam(\"tenant\") String tenant,\n+                                   @PathParam(\"namespace\") String namespace,\n+                                   @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(null).whenComplete((r, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI1NQ=="}, "originalCommit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyMDk3Nw==", "bodyText": "ok. Thanks for your explanation!", "url": "https://github.com/apache/pulsar/pull/8948#discussion_r543020977", "createdAt": "2020-12-15T03:37:26Z", "author": {"login": "zymap"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1816,6 +1816,91 @@ public void removePersistence(@Suspended final AsyncResponse asyncResponse,\n         });\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Get maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void getMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            Optional<Integer> maxSubscriptionsPerTopic = internalGetMaxSubscriptionsPerTopic();\n+            if (!maxSubscriptionsPerTopic.isPresent()) {\n+                asyncResponse.resume(Response.noContent().build());\n+            } else {\n+                asyncResponse.resume(maxSubscriptionsPerTopic.get());\n+            }\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Set maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Invalid value of maxSubscriptionsPerTopic\")})\n+    public void setMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                @ApiParam(value = \"The max subscriptions of the topic\") int maxSubscriptionsPerTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(maxSubscriptionsPerTopic).whenComplete((r, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                log.info(\"[{}] Successfully updated maxSubscriptionsPerTopic: namespace={}, topic={}\"\n+                                + \", maxSubscriptions={}\"\n+                        , clientAppId(), namespaceName, topicName.getLocalName(), maxSubscriptionsPerTopic);\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Remove maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void removeMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                   @PathParam(\"tenant\") String tenant,\n+                                   @PathParam(\"namespace\") String namespace,\n+                                   @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(null).whenComplete((r, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI1NQ=="}, "originalCommit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2694, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}