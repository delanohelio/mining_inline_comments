{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzkzMjYy", "number": 6287, "title": "[C++] Fixed triggering timers when the connection is being closed", "bodyText": "Motivation\nSome of the C++ unit testings are failing with segfaults on the CI jobs. This happens when running on containers with low resource. This happens in particular in tests that are very quick to execute and tear down, such as BasicEndToEndTest.testLookupThrottling or BasicEndToEndTest.testPatternEmptyUnsubscribe.\nExample of core dump stack traces:\nThread 1 (Thread 0x7fc838357700 (LWP 23473)):\n#0  0x00007fc83b9daf1e in boost::asio::basic_io_object<boost::asio::detail::deadline_timer_service<boost::asio::time_traits<boost::posix_time::ptime> >, true>::get_service (this=0x0) at /usr/include/boost/asio/basic_io_object.hpp:260\n#1  0x00007fc83ba1f80f in boost::asio::basic_deadline_timer<boost::posix_time::ptime, boost::asio::time_traits<boost::posix_time::ptime> >::async_wait<std::_Bind<void (pulsar::ClientConnection::*(std::shared_ptr<pulsar::ClientConnection>))()> >(std::_Bind<void (pulsar::ClientConnection::*(std::shared_ptr<pulsar::ClientConnection>))()>&&) (this=0x0, handler=...) at /usr/include/boost/asio/basic_deadline_timer.hpp:610\n#2  0x00007fc83ba047b2 in pulsar::ClientConnection::handlePulsarConnected (this=0x556d945962a0, cmdConnected=...) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:258\n#3  0x00007fc83ba08d55 in pulsar::ClientConnection::handleIncomingCommand (this=0x556d945962a0) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:670\n#4  0x00007fc83ba07dcd in pulsar::ClientConnection::processIncomingBuffer (this=0x556d945962a0) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:574\n#5  0x00007fc83ba074c5 in pulsar::ClientConnection::handleRead (this=0x556d945962a0, err=..., bytesTransferred=34, minReadSize=4) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:498\n#6  0x00007fc83ba5ccbb in std::__invoke_impl<void, void (pulsar::ClientConnection::*&)(boost::system::error_code const&, unsigned long, unsigned int), std::shared_ptr<pulsar::ClientConnection>&, boost::system::error_code&, unsigned long&, unsigned in\n\nand\n#0  0x00007fea2bb7f00e in boost::asio::basic_io_object<boost::asio::detail::deadline_timer_service<boost::asio::time_traits<boost::posix_time::ptime> >, true>::get_service (this=0x0) at /usr/include/boost/asio/basic_io_object.hpp:260\n#1  0x00007fea2bb7e09a in boost::asio::basic_deadline_timer<boost::posix_time::ptime, boost::asio::time_traits<boost::posix_time::ptime> >::expires_from_now (this=0x0, expiry_time=...) at /usr/include/boost/asio/basic_deadline_timer.hpp:509\n#2  0x00007fea2bba8ead in pulsar::ClientConnection::startConsumerStatsTimer (this=0x55f8e18382a0, consumerStatsRequests=std::vector of length 0, capacity 0) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:287\n#3  0x00007fea2bba891c in pulsar::ClientConnection::handlePulsarConnected (this=0x55f8e18382a0, cmdConnected=...) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:262\n#4  0x00007fea2bbace45 in pulsar::ClientConnection::handleIncomingCommand (this=0x55f8e18382a0) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:670\n#5  0x00007fea2bbabebd in pulsar::ClientConnection::processIncomingBuffer (this=0x55f8e18382a0) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:574\n#6  0x00007fea2bbab5b5 in pulsar::ClientConnection::handleRead (this=0x55f8e18382a0, err=..., bytesTransferred=34, minReadSize=4) at /pulsar/pulsar-client-cpp/lib/ClientConnection.cc:498\n\nIn both cases, what happens is that on one side we're still initializing the connection timers, while on the other we're closing down the connection (eg: on Client.close()).\nModifications\nMake sure we're not trying to use a shared pointer which is already reset by a different thread.", "createdAt": "2020-02-10T22:49:02Z", "url": "https://github.com/apache/pulsar/pull/6287", "merged": true, "mergeCommit": {"oid": "6eb74848f8baa5859bf44a1ca8caff1ad891cfb5"}, "closed": true, "closedAt": "2020-02-11T14:42:16Z", "author": {"login": "merlimat"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDFEs9gH2gAyMzczMzkzMjYyOjQyM2FmOTI5YWUzNWQ1MzkyYjZkZDQ1MGMyYWU3OTJmMDdlMGVhYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDObIxAFqTM1NjUxMzE3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "423af929ae35d5392b6dd450c2ae792f07e0eaa5", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/423af929ae35d5392b6dd450c2ae792f07e0eaa5", "committedDate": "2020-02-10T22:42:31Z", "message": "[C++] Fixed triggering timers when the connection is being closed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/902a4ba06ebff5a9a9a6b5137afb512a829969a5", "committedDate": "2020-02-10T23:07:39Z", "message": "Fixed cpp formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzY0MTg5", "url": "https://github.com/apache/pulsar/pull/6287#pullrequestreview-356364189", "createdAt": "2020-02-11T00:40:49Z", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0MDo0OVrOFn6oQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0MDo0OVrOFn6oQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5OTM2Mg==", "bodyText": "Not sure if we need this, since the operations are done under a lock.", "url": "https://github.com/apache/pulsar/pull/6287#discussion_r377399362", "createdAt": "2020-02-11T00:40:49Z", "author": {"login": "jai1"}, "path": "pulsar-client-cpp/lib/ClientConnection.cc", "diffHunk": "@@ -284,10 +285,14 @@ void ClientConnection::startConsumerStatsTimer(std::vector<uint64_t> consumerSta\n          it != pendingConsumerStatsMap_.end(); ++it) {\n         consumerStatsRequests.push_back(it->first);\n     }\n-    consumerStatsRequestTimer_->expires_from_now(operationsTimeout_);\n-    consumerStatsRequestTimer_->async_wait(std::bind(&ClientConnection::handleConsumerStatsTimeout,\n-                                                     shared_from_this(), std::placeholders::_1,\n-                                                     consumerStatsRequests));\n+\n+    DeadlineTimerPtr timer = consumerStatsRequestTimer_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzY0Mzc0", "url": "https://github.com/apache/pulsar/pull/6287#pullrequestreview-356364374", "createdAt": "2020-02-11T00:41:22Z", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0MToyMlrOFn6o0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0MTo0MlrOFn6pKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5OTUwNg==", "bodyText": "Don't we need\nconsumerStatsRequestTimer_  = timer here?", "url": "https://github.com/apache/pulsar/pull/6287#discussion_r377399506", "createdAt": "2020-02-11T00:41:22Z", "author": {"login": "jai1"}, "path": "pulsar-client-cpp/lib/ClientConnection.cc", "diffHunk": "@@ -284,10 +285,14 @@ void ClientConnection::startConsumerStatsTimer(std::vector<uint64_t> consumerSta\n          it != pendingConsumerStatsMap_.end(); ++it) {\n         consumerStatsRequests.push_back(it->first);\n     }\n-    consumerStatsRequestTimer_->expires_from_now(operationsTimeout_);\n-    consumerStatsRequestTimer_->async_wait(std::bind(&ClientConnection::handleConsumerStatsTimeout,\n-                                                     shared_from_this(), std::placeholders::_1,\n-                                                     consumerStatsRequests));\n+\n+    DeadlineTimerPtr timer = consumerStatsRequestTimer_;\n+    if (timer) {\n+        timer->expires_from_now(operationsTimeout_);\n+        timer->async_wait(std::bind(&ClientConnection::handleConsumerStatsTimeout, shared_from_this(),\n+                                    std::placeholders::_1, consumerStatsRequests));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5OTU5NA==", "bodyText": "nit: Can you create a separate function for this?", "url": "https://github.com/apache/pulsar/pull/6287#discussion_r377399594", "createdAt": "2020-02-11T00:41:42Z", "author": {"login": "jai1"}, "path": "pulsar-client-cpp/lib/ClientConnection.cc", "diffHunk": "@@ -253,9 +253,10 @@ void ClientConnection::handlePulsarConnected(const CommandConnected& cmdConnecte\n \n     if (serverProtocolVersion_ >= v1) {\n         // Only send keep-alive probes if the broker supports it\n-        keepAliveTimer_ = executor_->createDeadlineTimer();\n-        keepAliveTimer_->expires_from_now(boost::posix_time::seconds(KeepAliveIntervalInSeconds));\n-        keepAliveTimer_->async_wait(std::bind(&ClientConnection::handleKeepAliveTimeout, shared_from_this()));\n+        DeadlineTimerPtr keepAliveTimer = executor_->createDeadlineTimer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzY3MDI3", "url": "https://github.com/apache/pulsar/pull/6287#pullrequestreview-356367027", "createdAt": "2020-02-11T00:50:11Z", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDY4OTM3", "url": "https://github.com/apache/pulsar/pull/6287#pullrequestreview-356468937", "createdAt": "2020-02-11T08:14:52Z", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTEzMTc2", "url": "https://github.com/apache/pulsar/pull/6287#pullrequestreview-356513176", "createdAt": "2020-02-11T09:36:10Z", "commit": {"oid": "902a4ba06ebff5a9a9a6b5137afb512a829969a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 41, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}