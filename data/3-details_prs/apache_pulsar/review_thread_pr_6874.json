{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjEyMDkx", "number": 6874, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NTowM1rOD5McSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo0OVrOD9k6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjk5Mjc1OnYy", "diffSide": "RIGHT", "path": "pulsar-io/aws/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NTowM1rOGQVFnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoyOTozNVrOGQW27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NTkwMw==", "bodyText": "can we use the aws-sdk.version defined in the top level pom.xml here? That may help prevent some version conflicts if someone else loads aws-java-sdk-sts but does use that variable", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419775903", "createdAt": "2020-05-04T22:55:03Z", "author": {"login": "addisonj"}, "path": "pulsar-io/aws/pom.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-aws</artifactId>\n+  <name>Pulsar IO :: IO AWS</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.pulsar</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- aws dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-sts</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNDkwOA==", "bodyText": "Sure, I can change that.  I just copy-pasted this from its old location.", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419804908", "createdAt": "2020-05-05T00:29:35Z", "author": {"login": "maths22"}, "path": "pulsar-io/aws/pom.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-aws</artifactId>\n+  <name>Pulsar IO :: IO AWS</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.pulsar</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- aws dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-sts</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NTkwMw=="}, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjk5NTk1OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NjozMVrOGQVHiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoyODozMVrOGQW1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NjM5Mg==", "bodyText": "does pulling this in get the amazon-kinesis-client library via a transitive dep?", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419776392", "createdAt": "2020-05-04T22:56:31Z", "author": {"login": "addisonj"}, "path": "pulsar-io/dynamodb/pom.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-dynamodb</artifactId>\n+  <name>Pulsar IO :: DynamoDB</name>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-functions-instance</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-aws</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-yaml</artifactId>\n+    </dependency>\n+\n+    <!-- add cbor for kinesis-client to fix dep conflict -->\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-cbor</artifactId>\n+      <version>${jackson.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- dynamodb dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>dynamodb-streams-kinesis-adapter</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNDU2OA==", "bodyText": "Yes (and IMO that makes it clear that the KCL version is determined by the kinesis adapter)", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419804568", "createdAt": "2020-05-05T00:28:31Z", "author": {"login": "maths22"}, "path": "pulsar-io/dynamodb/pom.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-dynamodb</artifactId>\n+  <name>Pulsar IO :: DynamoDB</name>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-functions-instance</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-aws</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-yaml</artifactId>\n+    </dependency>\n+\n+    <!-- add cbor for kinesis-client to fix dep conflict -->\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-cbor</artifactId>\n+      <version>${jackson.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- dynamodb dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>dynamodb-streams-kinesis-adapter</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NjM5Mg=="}, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM2Mzc1OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozNDoxOFrOGQhl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozNDoxOFrOGQhl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MDc4MQ==", "bodyText": "@Data already contains @EqualsAndHashCode", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419980781", "createdAt": "2020-05-05T09:34:18Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStreamExtended;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.annotations.FieldDoc;\n+\n+import software.amazon.awssdk.regions.Region;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@Data\n+@EqualsAndHashCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM3OTM2OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozODozM1rOGQhvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozODozM1rOGQhvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MzE3OA==", "bodyText": "Please use template strings in logs:\nlog.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419983178", "createdAt": "2020-05-05T09:38:33Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing \" + processRecordsInput.getRecords().size() + \" records from \" + kinesisShardId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk2ODQ5OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzozNDoyOFrOGTGDjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzozNDoyOFrOGTGDjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NTM0MQ==", "bodyText": "This java comment can be removed or a meaningful description should be added.", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422675341", "createdAt": "2020-05-10T17:34:28Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+import java.net.InetAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.stream.Stream;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.AmazonDynamoDBStreamsAdapterClient;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.StreamsWorkerFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessorFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.KinesisClientLibConfiguration;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.Worker;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.io.aws.AbstractAwsConnector;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.Source;\n+import org.apache.pulsar.io.core.SourceContext;\n+import org.apache.pulsar.io.core.annotations.Connector;\n+import org.apache.pulsar.io.core.annotations.IOType;\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk4MjA4OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo0ODo0MVrOGTGKRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo0ODo0MVrOGTGKRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzA2MA==", "bodyText": "These boilerplate getters can be generated by the Lombok annotation \u2014 @Getter", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677060", "createdAt": "2020-05-10T17:48:41Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    private final Optional<String> key;\n+    private final byte[] value;\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();\n+    \n+    public StreamsRecord(com.amazonaws.services.kinesis.model.Record record) {\n+//        special-case the handling of dynamo records\n+        if (record instanceof RecordAdapter) {\n+            com.amazonaws.services.dynamodbv2.model.Record dynamoRecord = ((RecordAdapter) record).getInternalObject();\n+            this.key = Optional.of(dynamoRecord.getEventID());\n+            setProperty(EVENT_NAME, dynamoRecord.getEventName());\n+            setProperty(SEQUENCE_NUMBER, dynamoRecord.getDynamodb().getSequenceNumber());\n+        } else {\n+            this.key = Optional.of(record.getPartitionKey());\n+            setProperty(ARRIVAL_TIMESTAMP, record.getApproximateArrivalTimestamp().toString());\n+            setProperty(ENCRYPTION_TYPE, record.getEncryptionType());\n+            setProperty(PARTITION_KEY, record.getPartitionKey());\n+            setProperty(SEQUENCE_NUMBER, record.getSequenceNumber());\n+\n+        }\n+\n+        if (StringUtils.isBlank(record.getEncryptionType())) {\n+            String s = null;\n+            try {\n+                s = decoder.decode(record.getData()).toString();\n+            } catch (CharacterCodingException e) {\n+               // Ignore\n+            }\n+            this.value = (s != null) ? s.getBytes() : null;\n+        } else {\n+            // Who knows?\n+            this.value = null;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk4MzM4OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1MDoyOFrOGTGK6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1MDoyOFrOGTGK6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzIyNw==", "bodyText": "It can be converted to JavaDoc", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677227", "createdAt": "2020-05-10T17:50:28Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk4NjY1OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1MzoyNFrOGTGMeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1MzoyNFrOGTGMeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzYyNg==", "bodyText": "The recommendation for this project is to use separate import statements instead of *", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677626", "createdAt": "2020-05-10T17:53:24Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTk5MDQ5OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1NzoxOFrOGTGOTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo1Mjo0M1rOGTieqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3ODA5Mg==", "bodyText": "I'm wondering how much logs it will produce \ud83e\udd14", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422678092", "createdAt": "2020-05-10T17:57:18Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0MTAzNA==", "bodyText": "This is an info-level log in the kinesis source, but I've dropped it down to debug, since that probably makes more sense", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r423141034", "createdAt": "2020-05-11T15:52:43Z", "author": {"login": "maths22"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3ODA5Mg=="}, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA3NjM2OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMToxMFrOGVsyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMToxMFrOGVsyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzA0Mw==", "bodyText": "This variable should be renamed to properties if they should be attached to the record. And the type can be changed to Map<String, String>", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407043", "createdAt": "2020-05-14T20:21:10Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter\n+    private final Optional<String> key;\n+    @Getter\n+    private final byte[] value;\n+    @Getter\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA3OTI0OnYy", "diffSide": "RIGHT", "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMjoxMVrOGVs0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMjoxMVrOGVs0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzUyNw==", "bodyText": "It should be fine to put only one @Getter for the class instead of adding them to every field", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407527", "createdAt": "2020-05-14T20:22:11Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjkzNDQ0OnYy", "diffSide": "RIGHT", "path": "site2/docs/io-kinesis-sink.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNDo0NFrOGW2ORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNDo0NFrOGW2ORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMDI0Nw==", "bodyText": "As you described, it's better to keep backward compatibility.", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r426610247", "createdAt": "2020-05-18T13:04:44Z", "author": {"login": "codelipenghui"}, "path": "site2/docs/io-kinesis-sink.md", "diffHunk": "@@ -19,20 +19,20 @@ The configuration of the Kinesis sink connector has the following property.\n `awsEndpoint`|String|false|\" \" (empty string)|The Kinesis end-point URL, which can be found at [here](https://docs.aws.amazon.com/general/latest/gr/rande.html).\n `awsRegion`|String|false|\" \" (empty string)|The AWS region. <br/><br/>**Example**<br/> us-west-1, us-west-2\n `awsKinesisStreamName`|String|true|\" \" (empty string)|The Kinesis stream name.\n-`awsCredentialPluginName`|String|false|\" \" (empty string)|The fully-qualified class name of implementation of {@inject: github:`AwsCredentialProviderPlugin`:/pulsar-io/kinesis/src/main/java/org/apache/pulsar/io/kinesis/AwsCredentialProviderPlugin.java}. <br/><br/>It is a factory class which creates an AWSCredentialsProvider that is used by Kinesis sink. <br/><br/>If it is empty, the Kinesis sink creates a default AWSCredentialsProvider which accepts json-map of credentials in `awsCredentialPluginParam`.\n+`awsCredentialPluginName`|String|false|\" \" (empty string)|The fully-qualified class name of implementation of {@inject: github:`AwsCredentialProviderPlugin`:/pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AwsCredentialProviderPlugin.java}. <br/><br/>It is a factory class which creates an AWSCredentialsProvider that is used by Kinesis sink. <br/><br/>If it is empty, the Kinesis sink creates a default AWSCredentialsProvider which accepts json-map of credentials in `awsCredentialPluginParam`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk0NDg1OnYy", "diffSide": "RIGHT", "path": "pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo0OVrOGXJ5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo0OVrOGXJ5IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUxMg==", "bodyText": "Just out of curiosity, what was changed here?", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r426932512", "createdAt": "2020-05-18T22:46:49Z", "author": {"login": "sijie"}, "path": "pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java", "diffHunk": "@@ -79,16 +77,19 @@ public static AwsCredentialProviderPlugin createCredentialProviderWithPlugin(Str\n      * @param awsCredentialPluginParam\n      * @return\n      */\n-    protected AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n+    public AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n         Map<String, String> credentialMap = new Gson().fromJson(awsCredentialPluginParam,\n                 new TypeToken<Map<String, String>>() {\n                 }.getType());\n         String accessKey = credentialMap.get(ACCESS_KEY_NAME);\n         String secretKey = credentialMap.get(SECRET_KEY_NAME);\n-        checkArgument(isNotBlank(accessKey) && isNotBlank(secretKey),\n-                String.format(\n-                        \"Default %s and %s must be present into json-map if AwsCredentialProviderPlugin not provided\",\n-                        ACCESS_KEY_NAME, SECRET_KEY_NAME));\n+        if (!(StringUtils.isNotBlank(accessKey) && StringUtils.isNotBlank(secretKey))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}