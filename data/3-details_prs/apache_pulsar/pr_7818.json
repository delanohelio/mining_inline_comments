{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODI0MDUx", "number": 7818, "title": "Support MaxUnackedMessagesOnConsumer on topic level", "bodyText": "Motivation\nsupport set MaxUnackedMessagesOnConsumer on topic level\nModifications\nSupport set/get/remove MaxUnackedMessagesOnConsumer policy on topic level.\nVerifying this change\nAdded Unit test to verify set/get/remove MaxUnackedMessagesOnConsumer policy at Topic level work as expected when Topic level policy is enabled/disabled\n\norg.apache.pulsar.broker.admin.MaxUnackedMessagesTest#testMaxUnackedMessagesOnConsumerApi\norg.apache.pulsar.broker.admin.MaxUnackedMessagesTest#testMaxUnackedMessagesOnConsumer", "createdAt": "2020-08-14T07:34:54Z", "url": "https://github.com/apache/pulsar/pull/7818", "merged": true, "mergeCommit": {"oid": "392800553970cd68518e9f631fc5a63456018800"}, "closed": true, "closedAt": "2020-08-17T13:08:17Z", "author": {"login": "315157973"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-hlr4gH2gAyNDY3ODI0MDUxOmNhZDYzNDUyMGNkODRlZmQ5ZDc0MzFiN2UyMjE5MDZlODEyZDZkNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_oiOnAFqTQ2ODEyNTM2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cad634520cd84efd9d7431b7e221906e812d6d72", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/cad634520cd84efd9d7431b7e221906e812d6d72", "committedDate": "2020-08-13T15:17:25Z", "message": "support MaxUnackedMessagesOnConsumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/9da33f6b44c47c65098a1c9078f0b22f145aedfd", "committedDate": "2020-08-14T08:40:36Z", "message": "change unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTc2MDk0", "url": "https://github.com/apache/pulsar/pull/7818#pullrequestreview-467576094", "createdAt": "2020-08-14T13:31:25Z", "commit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMToyNVrOHA0qow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMToyNVrOHA0qow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ==", "bodyText": "minor: remove asyncResponse on setMaxUnackedMessagesOnConsumer", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470624931", "createdAt": "2020-08-14T13:31:25Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTI1MzY2", "url": "https://github.com/apache/pulsar/pull/7818#pullrequestreview-468125366", "createdAt": "2020-08-17T01:56:54Z", "commit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 275, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}