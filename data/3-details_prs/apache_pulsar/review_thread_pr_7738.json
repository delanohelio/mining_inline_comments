{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTIxNDY1", "number": 7738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzozMzo0NVrOEVPpyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzozMzo0NVrOEVPpyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzEyMDEwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzozMzo0NVrOG745sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzozMzo0NVrOG745sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1MTQ0MQ==", "bodyText": "Remove message TTL in seconds for a topic", "url": "https://github.com/apache/pulsar/pull/7738#discussion_r465451441", "createdAt": "2020-08-05T03:33:45Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1032,6 +1032,53 @@ public void removeBacklogQuota(@Suspended final AsyncResponse asyncResponse, @Pa\n         internalRemoveBacklogQuota(asyncResponse, backlogQuotaType);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/messageTTL\")\n+    @ApiOperation(value = \"Get message TTL in seconds for a topic\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+                            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+                            @ApiResponse(code = 405, message = \"Topic level policy is disabled, enable the topic level policy and retry\")})\n+    public int getMessageTTL(@PathParam(\"tenant\") String tenant,\n+                             @PathParam(\"namespace\") String namespace,\n+                             @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        return getTopicPolicies(topicName)\n+                .map(TopicPolicies::getMessageTTLInSeconds)\n+                .orElse(0);  //same as default ttl at namespace level\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/messageTTL\")\n+    @ApiOperation(value = \"Set message TTL in seconds for a topic\")\n+    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Not authenticate to perform the request or policy is read only\"),\n+                            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+                            @ApiResponse(code = 405, message = \"Topic level policy is disabled, enable the topic level policy and retry\"),\n+                            @ApiResponse(code = 412, message = \"Invalid message TTL value\") })\n+    public void setMessageTTL(@Suspended final AsyncResponse asyncResponse,\n+                              @PathParam(\"tenant\") String tenant,\n+                              @PathParam(\"namespace\") String namespace,\n+                              @PathParam(\"topic\") @Encoded String encodedTopic,\n+                              @ApiParam(value = \"TTL in seconds for the specified namespace\", required = true)\n+                              @QueryParam(\"messageTTL\") int messageTTL) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMessageTTL(asyncResponse, messageTTL);\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/messageTTL\")\n+    @ApiOperation(value = \"Set message TTL in seconds for a topic\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11252a01b83f7e0121510cb793b6abc6b6c59cb"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2366, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}