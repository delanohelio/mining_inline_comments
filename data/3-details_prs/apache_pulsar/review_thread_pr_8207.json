{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MjI2NzI0", "number": 8207, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozMzozOVrOErB-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo1NDowMFrOErFGvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTU2NjIyOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozMzozOVrOHdkcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozMzozOVrOHdkcgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2Nzg3NA==", "bodyText": "we are now using only writeLock so we could use a simple ReentrantLock and not a ReentrantReadWriteLock", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500767874", "createdAt": "2020-10-07T06:33:39Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -219,51 +219,44 @@ private void receiveMessageFromConsumer(ConsumerImpl<T> consumer) {\n             messageReceived(consumer, message);\n \n             // we're modifying pausedConsumers\n-            lock.writeLock().lock();\n-            try {\n-                int size = incomingMessages.size();\n-                if (size >= maxReceiverQueueSize\n-                        || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n-                    // mark this consumer to be resumed later: if No more space left in shared queue,\n-                    // or if any consumer is already paused (to create fair chance for already paused consumers)\n-                    pausedConsumers.add(consumer);\n-                } else {\n-                    // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n-                    // recursion and stack overflow\n-                    client.eventLoopGroup().execute(() -> {\n-                        receiveMessageFromConsumer(consumer);\n-                    });\n-                }\n-            } finally {\n-                lock.writeLock().unlock();\n+            int size = incomingMessages.size();\n+            if (size >= maxReceiverQueueSize\n+                    || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n+                // mark this consumer to be resumed later: if No more space left in shared queue,\n+                // or if any consumer is already paused (to create fair chance for already paused consumers)\n+                pausedConsumers.add(consumer);\n+            } else {\n+                // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n+                // recursion and stack overflow\n+                client.eventLoopGroup().execute(() -> {\n+                    receiveMessageFromConsumer(consumer);\n+                });\n             }\n         });\n     }\n \n     private void messageReceived(ConsumerImpl<T> consumer, Message<T> message) {\n         checkArgument(message instanceof MessageImpl);\n-        lock.writeLock().lock();\n-        try {\n-            TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n+        TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n                 consumer.getTopic(), consumer.getTopicNameWithoutPartition(), message);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n                     topic, subscription, message.getMessageId());\n-            }\n+        }\n \n-            // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n-            if (!pendingReceives.isEmpty()) {\n-                CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n-                unAckedMessageTracker.add(topicMessage.getMessageId());\n-                listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n-            } else if (enqueueMessageAndCheckBatchReceive(topicMessage)) {\n-                if (hasPendingBatchReceive()) {\n-                    notifyPendingBatchReceivedCallBack();\n-                }\n+        // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n+        CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n+        if (receivedFuture != null) {\n+            unAckedMessageTracker.add(topicMessage.getMessageId());\n+            listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n+        } else if (enqueueMessageAndCheckBatchReceive(topicMessage) && hasPendingBatchReceive()) {\n+            try {\n+                lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac48262d4fa431de0364391cc585c9694fefd581"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTU2NzgwOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozNDoxN1rOHdkdcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoyNDowNVrOHdl5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2ODExMw==", "bodyText": "not every call of this notifyPendingBatchReceivedCallBack method are guarded by the lock, do we need to use the lock here ?", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500768113", "createdAt": "2020-10-07T06:34:17Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -219,51 +219,44 @@ private void receiveMessageFromConsumer(ConsumerImpl<T> consumer) {\n             messageReceived(consumer, message);\n \n             // we're modifying pausedConsumers\n-            lock.writeLock().lock();\n-            try {\n-                int size = incomingMessages.size();\n-                if (size >= maxReceiverQueueSize\n-                        || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n-                    // mark this consumer to be resumed later: if No more space left in shared queue,\n-                    // or if any consumer is already paused (to create fair chance for already paused consumers)\n-                    pausedConsumers.add(consumer);\n-                } else {\n-                    // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n-                    // recursion and stack overflow\n-                    client.eventLoopGroup().execute(() -> {\n-                        receiveMessageFromConsumer(consumer);\n-                    });\n-                }\n-            } finally {\n-                lock.writeLock().unlock();\n+            int size = incomingMessages.size();\n+            if (size >= maxReceiverQueueSize\n+                    || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n+                // mark this consumer to be resumed later: if No more space left in shared queue,\n+                // or if any consumer is already paused (to create fair chance for already paused consumers)\n+                pausedConsumers.add(consumer);\n+            } else {\n+                // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n+                // recursion and stack overflow\n+                client.eventLoopGroup().execute(() -> {\n+                    receiveMessageFromConsumer(consumer);\n+                });\n             }\n         });\n     }\n \n     private void messageReceived(ConsumerImpl<T> consumer, Message<T> message) {\n         checkArgument(message instanceof MessageImpl);\n-        lock.writeLock().lock();\n-        try {\n-            TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n+        TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n                 consumer.getTopic(), consumer.getTopicNameWithoutPartition(), message);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n                     topic, subscription, message.getMessageId());\n-            }\n+        }\n \n-            // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n-            if (!pendingReceives.isEmpty()) {\n-                CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n-                unAckedMessageTracker.add(topicMessage.getMessageId());\n-                listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n-            } else if (enqueueMessageAndCheckBatchReceive(topicMessage)) {\n-                if (hasPendingBatchReceive()) {\n-                    notifyPendingBatchReceivedCallBack();\n-                }\n+        // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n+        CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n+        if (receivedFuture != null) {\n+            unAckedMessageTracker.add(topicMessage.getMessageId());\n+            listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n+        } else if (enqueueMessageAndCheckBatchReceive(topicMessage) && hasPendingBatchReceive()) {\n+            try {\n+                lock.writeLock().lock();\n+                notifyPendingBatchReceivedCallBack();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac48262d4fa431de0364391cc585c9694fefd581"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc5MTY5Ng==", "bodyText": "This is a good suggestion, thank you very much", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500791696", "createdAt": "2020-10-07T07:24:05Z", "author": {"login": "315157973"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -219,51 +219,44 @@ private void receiveMessageFromConsumer(ConsumerImpl<T> consumer) {\n             messageReceived(consumer, message);\n \n             // we're modifying pausedConsumers\n-            lock.writeLock().lock();\n-            try {\n-                int size = incomingMessages.size();\n-                if (size >= maxReceiverQueueSize\n-                        || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n-                    // mark this consumer to be resumed later: if No more space left in shared queue,\n-                    // or if any consumer is already paused (to create fair chance for already paused consumers)\n-                    pausedConsumers.add(consumer);\n-                } else {\n-                    // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n-                    // recursion and stack overflow\n-                    client.eventLoopGroup().execute(() -> {\n-                        receiveMessageFromConsumer(consumer);\n-                    });\n-                }\n-            } finally {\n-                lock.writeLock().unlock();\n+            int size = incomingMessages.size();\n+            if (size >= maxReceiverQueueSize\n+                    || (size > sharedQueueResumeThreshold && !pausedConsumers.isEmpty())) {\n+                // mark this consumer to be resumed later: if No more space left in shared queue,\n+                // or if any consumer is already paused (to create fair chance for already paused consumers)\n+                pausedConsumers.add(consumer);\n+            } else {\n+                // Schedule next receiveAsync() if the incoming queue is not full. Use a different thread to avoid\n+                // recursion and stack overflow\n+                client.eventLoopGroup().execute(() -> {\n+                    receiveMessageFromConsumer(consumer);\n+                });\n             }\n         });\n     }\n \n     private void messageReceived(ConsumerImpl<T> consumer, Message<T> message) {\n         checkArgument(message instanceof MessageImpl);\n-        lock.writeLock().lock();\n-        try {\n-            TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n+        TopicMessageImpl<T> topicMessage = new TopicMessageImpl<>(\n                 consumer.getTopic(), consumer.getTopicNameWithoutPartition(), message);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[{}][{}] Received message from topics-consumer {}\",\n                     topic, subscription, message.getMessageId());\n-            }\n+        }\n \n-            // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n-            if (!pendingReceives.isEmpty()) {\n-                CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n-                unAckedMessageTracker.add(topicMessage.getMessageId());\n-                listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n-            } else if (enqueueMessageAndCheckBatchReceive(topicMessage)) {\n-                if (hasPendingBatchReceive()) {\n-                    notifyPendingBatchReceivedCallBack();\n-                }\n+        // if asyncReceive is waiting : return message to callback without adding to incomingMessages queue\n+        CompletableFuture<Message<T>> receivedFuture = pendingReceives.poll();\n+        if (receivedFuture != null) {\n+            unAckedMessageTracker.add(topicMessage.getMessageId());\n+            listenerExecutor.execute(() -> receivedFuture.complete(topicMessage));\n+        } else if (enqueueMessageAndCheckBatchReceive(topicMessage) && hasPendingBatchReceive()) {\n+            try {\n+                lock.writeLock().lock();\n+                notifyPendingBatchReceivedCallBack();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2ODExMw=="}, "originalCommit": {"oid": "ac48262d4fa431de0364391cc585c9694fefd581"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTU3MDUyOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozNToxNVrOHdke_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNjozNToxNVrOHdke_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc2ODUwOA==", "bodyText": "probably this comment is no more useful", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500768508", "createdAt": "2020-10-07T06:35:15Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/MultiTopicsConsumerImpl.java", "diffHunk": "@@ -219,51 +219,44 @@ private void receiveMessageFromConsumer(ConsumerImpl<T> consumer) {\n             messageReceived(consumer, message);\n \n             // we're modifying pausedConsumers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac48262d4fa431de0364391cc585c9694fefd581"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjA3ODY4OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo1NDowMFrOHdpRug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowNDoxMVrOHd6sFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzAzNA==", "bodyText": "can you please explain the reason for this 'synchronized' block ?", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500847034", "createdAt": "2020-10-07T08:54:00Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -677,19 +677,16 @@ protected void notifyPendingBatchReceivedCallBack() {\n         if (opBatchReceive == null || opBatchReceive.future == null) {\n             return;\n         }\n-        notifyPendingBatchReceivedCallBack(opBatchReceive);\n+        synchronized (incomingMessages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675b28d1755f8968ec51032f80543023d523465d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1MjMzMg==", "bodyText": "Not every call needs to be locked, so I reduced the scope of the lock. Do you think using ReentrantLock is better than using synchronized?", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500852332", "createdAt": "2020-10-07T09:02:11Z", "author": {"login": "315157973"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -677,19 +677,16 @@ protected void notifyPendingBatchReceivedCallBack() {\n         if (opBatchReceive == null || opBatchReceive.future == null) {\n             return;\n         }\n-        notifyPendingBatchReceivedCallBack(opBatchReceive);\n+        synchronized (incomingMessages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzAzNA=="}, "originalCommit": {"oid": "675b28d1755f8968ec51032f80543023d523465d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTMzOQ==", "bodyText": "can you please explain the reason for this 'synchronized' block ?\n\nThe notifyPendingBatchReceivedCallBack(OpBatchReceive<T> opBatchReceive) called in notifyPendingBatchReceivedCallBack() is not thread-safe, so locking is necessary.\nBut not every call to notifyPendingBatchReceivedCallBack() needs to be locked, only when there is an opBatchReceive that meets the conditions.\nThe scenarios where thread is not safe are as follows:\nThread A calls incomingMessages.peek(), finds that message A meets the conditions, can join the Messages collection, and is preparing to poll. At this time, thread B polls the message A first. The message polled by thread A is actually message B, but message B does not meet the conditions for joining the Messages set of thread A.\nLook forward to your advice.", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r500909339", "createdAt": "2020-10-07T10:36:05Z", "author": {"login": "315157973"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -677,19 +677,16 @@ protected void notifyPendingBatchReceivedCallBack() {\n         if (opBatchReceive == null || opBatchReceive.future == null) {\n             return;\n         }\n-        notifyPendingBatchReceivedCallBack(opBatchReceive);\n+        synchronized (incomingMessages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzAzNA=="}, "originalCommit": {"oid": "675b28d1755f8968ec51032f80543023d523465d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI5NA==", "bodyText": "incomingMessages is already a concurrent data structure and it does not need this synchronized block\nAlso if you use synchronized once you must guard it always with this facility, otherwise you will fall into an inconsistent synchronization.\nI don't know very well this code but it looks like there is no other instance of synchronized over  incomingMessages", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r501118294", "createdAt": "2020-10-07T15:45:06Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -677,19 +677,16 @@ protected void notifyPendingBatchReceivedCallBack() {\n         if (opBatchReceive == null || opBatchReceive.future == null) {\n             return;\n         }\n-        notifyPendingBatchReceivedCallBack(opBatchReceive);\n+        synchronized (incomingMessages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzAzNA=="}, "originalCommit": {"oid": "675b28d1755f8968ec51032f80543023d523465d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMjMxMA==", "bodyText": "incomingMessages is already a concurrent data structure and it does not need this synchronized block\nAlso if you use synchronized once you must guard it always with this facility, otherwise you will fall into an inconsistent synchronization.\nI don't know very well this code but it looks like there is no other instance of synchronized over incomingMessages\n\nThanks.\nI use synchronized (incomingMessages), just to allow synchronized to have a final object that can be locked, because I see no other place to use this object to compete for lock.\nI reflected on it, this code can be very confusing, it is better to use ReentrantLock.", "url": "https://github.com/apache/pulsar/pull/8207#discussion_r501132310", "createdAt": "2020-10-07T16:04:11Z", "author": {"login": "315157973"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java", "diffHunk": "@@ -677,19 +677,16 @@ protected void notifyPendingBatchReceivedCallBack() {\n         if (opBatchReceive == null || opBatchReceive.future == null) {\n             return;\n         }\n-        notifyPendingBatchReceivedCallBack(opBatchReceive);\n+        synchronized (incomingMessages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzAzNA=="}, "originalCommit": {"oid": "675b28d1755f8968ec51032f80543023d523465d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2138, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}