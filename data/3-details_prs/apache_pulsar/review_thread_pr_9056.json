{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDkwMzQ0", "number": 9056, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzozNDoxN1rOFJ1AIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTozMjoyM1rOFO3EGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQ5ODg5OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzozNDoxN1rOIMUceA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo0MDozM1rOIOusgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4ODc5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void notifyWaitingEntryCallBack() {\n          \n          \n            \n                void notifyWaitingEntryCallBacks() {", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r549788792", "createdAt": "2020-12-29T17:34:17Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1915,6 +1920,21 @@ void notifyCursors() {\n         }\n     }\n \n+    void notifyWaitingEntryCallBack() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNjAzMg==", "bodyText": "done.", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r552316032", "createdAt": "2021-01-06T01:40:33Z", "author": {"login": "MarvinCai"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1915,6 +1920,21 @@ void notifyCursors() {\n         }\n     }\n \n+    void notifyWaitingEntryCallBack() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4ODc5Mg=="}, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODQ5OTc1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzozNDozN1rOIMUc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo0MjoxM1rOIOuuEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4ODkxMA==", "bodyText": "Can you mark this feature as a preview feature?", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r549788910", "createdAt": "2020-12-29T17:34:37Z", "author": {"login": "sijie"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -667,6 +667,12 @@\n     )\n     private boolean preciseDispatcherFlowControl = false;\n \n+    @FieldContext(\n+        category = CATEGORY_SERVER,\n+        doc = \"Whether to use streaming read dispatcher.\"\n+    )\n+    private boolean streamingDispatch = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNjQzMw==", "bodyText": "updated the doc.", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r552316433", "createdAt": "2021-01-06T01:42:13Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -667,6 +667,12 @@\n     )\n     private boolean preciseDispatcherFlowControl = false;\n \n+    @FieldContext(\n+        category = CATEGORY_SERVER,\n+        doc = \"Whether to use streaming read dispatcher.\"\n+    )\n+    private boolean streamingDispatch = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4ODkxMA=="}, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODUwMDA4OnYy", "diffSide": "RIGHT", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzozNDo1MFrOIMUdJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzozNDo1MFrOIMUdJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4ODk2Ng==", "bodyText": "It would be great to add more documentation about this feature.", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r549788966", "createdAt": "2020-12-29T17:34:50Z", "author": {"login": "sijie"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -667,6 +667,12 @@\n     )\n     private boolean preciseDispatcherFlowControl = false;\n \n+    @FieldContext(\n+        category = CATEGORY_SERVER,\n+        doc = \"Whether to use streaming read dispatcher.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODUxOTY2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentStreamingDispatcherMultipleConsumers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzo0NDoxOFrOIMUoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo0NToyM1rOIOuxiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MTgwMA==", "bodyText": "final?", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r549791800", "createdAt": "2020-12-29T17:44:18Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentStreamingDispatcherMultipleConsumers.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedCursor;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.ManagedCursorImpl;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.bookkeeper.mledger.util.SafeRun;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Subscription;\n+import org.apache.pulsar.broker.service.streamingdispatch.PendingReadEntryRequest;\n+import org.apache.pulsar.broker.service.streamingdispatch.StreamingDispatcher;\n+import org.apache.pulsar.broker.service.streamingdispatch.StreamingEntryReader;\n+\n+/**\n+ * A {@link PersistentDispatcherMultipleConsumers} implemented {@link StreamingDispatcher}.\n+ * It'll use {@link StreamingEntryReader} to read new entries instead read as micro batch from managed ledger.\n+ */\n+@Slf4j\n+public class PersistentStreamingDispatcherMultipleConsumers extends PersistentDispatcherMultipleConsumers\n+    implements StreamingDispatcher {\n+\n+    private StreamingEntryReader streamingEntryReader = new StreamingEntryReader((ManagedCursorImpl) cursor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNzMyMQ==", "bodyText": "updated.", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r552317321", "createdAt": "2021-01-06T01:45:23Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentStreamingDispatcherMultipleConsumers.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedCursor;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.ManagedCursorImpl;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.bookkeeper.mledger.util.SafeRun;\n+import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Subscription;\n+import org.apache.pulsar.broker.service.streamingdispatch.PendingReadEntryRequest;\n+import org.apache.pulsar.broker.service.streamingdispatch.StreamingDispatcher;\n+import org.apache.pulsar.broker.service.streamingdispatch.StreamingEntryReader;\n+\n+/**\n+ * A {@link PersistentDispatcherMultipleConsumers} implemented {@link StreamingDispatcher}.\n+ * It'll use {@link StreamingEntryReader} to read new entries instead read as micro batch from managed ledger.\n+ */\n+@Slf4j\n+public class PersistentStreamingDispatcherMultipleConsumers extends PersistentDispatcherMultipleConsumers\n+    implements StreamingDispatcher {\n+\n+    private StreamingEntryReader streamingEntryReader = new StreamingEntryReader((ManagedCursorImpl) cursor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5MTgwMA=="}, "originalCommit": {"oid": "b1bf5aa8a0bb3aed6ae48ab69711873c7b9787d5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTI2NTU0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/streamingdispatch/StreamingEntryReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTozMjoyM1rOIT4COQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMzoyODo0NlrOIT7UoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxMTkyOQ==", "bodyText": "@MarvinCai Can you write a test case for this class?", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r557711929", "createdAt": "2021-01-14T21:32:23Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/streamingdispatch/StreamingEntryReader.java", "diffHunk": "@@ -0,0 +1,338 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.streamingdispatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.WaitingEntryCallBack;\n+import org.apache.bookkeeper.mledger.impl.ManagedCursorImpl;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.bookkeeper.mledger.util.SafeRun;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.exceptions.TransactionNotSealedException;\n+import org.apache.pulsar.client.impl.Backoff;\n+\n+/**\n+ * Entry reader that fulfill read request by streamline the read instead of reading with micro batch.\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class StreamingEntryReader implements AsyncCallbacks.ReadEntryCallback, WaitingEntryCallBack {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c296481639f0ff2ce39ab46b0e106bf1076b2b22"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc2NTc5Mg==", "bodyText": "There's StreamingEntryReaderTests class, it's folded by github.", "url": "https://github.com/apache/pulsar/pull/9056#discussion_r557765792", "createdAt": "2021-01-14T23:28:46Z", "author": {"login": "MarvinCai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/streamingdispatch/StreamingEntryReader.java", "diffHunk": "@@ -0,0 +1,338 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.streamingdispatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.AsyncCallbacks;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.ManagedLedgerException;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.WaitingEntryCallBack;\n+import org.apache.bookkeeper.mledger.impl.ManagedCursorImpl;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.bookkeeper.mledger.util.SafeRun;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.exceptions.TransactionNotSealedException;\n+import org.apache.pulsar.client.impl.Backoff;\n+\n+/**\n+ * Entry reader that fulfill read request by streamline the read instead of reading with micro batch.\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class StreamingEntryReader implements AsyncCallbacks.ReadEntryCallback, WaitingEntryCallBack {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxMTkyOQ=="}, "originalCommit": {"oid": "c296481639f0ff2ce39ab46b0e106bf1076b2b22"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2622, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}