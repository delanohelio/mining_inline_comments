{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDEyMTM0", "number": 7111, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo0OTozN1rOEBFwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo1MjoyOFrOEBFwvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc4MzA3OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo0OTozN1rOGcxCyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1MToyNlrOGfes5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA==", "bodyText": "Why do we need to expose this in the interface, it should be better to keep in implementation details", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816840", "createdAt": "2020-05-30T06:49:37Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyOTczMw==", "bodyText": "I hope to be able to consult you here for advice, because I am not sure whether doing type casting in the BrokerService is a suitable implementation. Maybe I can modify with:\n((ManagedLedgerImpl) managedLedger).rollCurrentLedgerIfFull();", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r433029733", "createdAt": "2020-06-01T03:45:00Z", "author": {"login": "wuzhanpeng"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MDg2Nw==", "bodyText": "I was thinking that this is a managedLedger internal task, for which the BrokerService shouldn't be concerned. For that it would be better to handle in the ManagedLedgerFactoryImpl, to go through all open managed ledger instances and check if a rollover has to be forced.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r433360867", "createdAt": "2020-06-01T16:52:40Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4MzkwMQ==", "bodyText": "Now I feel a little confused. If we treat rollover as an internal task, should consumedLedgersMonitor or backlogQuotaChecker be internal tasks as well? Or is my understanding biased?", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r433583901", "createdAt": "2020-06-02T02:14:57Z", "author": {"login": "wuzhanpeng"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MjA1Mg==", "bodyText": "@wuzhanpeng I think you can add an issue to track the monitor that outside the managed ledger but should be maintained by managed ledger own.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r435662052", "createdAt": "2020-06-05T02:51:26Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -472,4 +472,9 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Set\n      * @param promise\n      */\n     void trimConsumedLedgersInBackground(CompletableFuture<?> promise);\n+\n+    /**\n+     * Roll current ledger if it is full\n+     */\n+    void rollCurrentLedgerIfFull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg0MA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc4MzU2OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo1MDozOFrOGcxDAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1Njo1N1rOGfeyEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg5Nw==", "bodyText": "We don't need initiate the creation of a ledger at this point. We can stay in LedgerClosed state until a new write comes in.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816897", "createdAt": "2020-05-30T06:50:38Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1391,6 +1392,38 @@ synchronized void ledgerClosed(final LedgerHandle lh) {\n         }\n     }\n \n+    synchronized void createLedgerAfterClosed() {\n+        STATE_UPDATER.set(this, State.CreatingLedger);\n+        this.lastLedgerCreationInitiationTimestamp = System.nanoTime();\n+        mbean.startDataLedgerCreateOp();\n+        asyncCreateLedger(bookKeeper, config, digestType, this, Collections.emptyMap());\n+    }\n+\n+    @Override\n+    public void rollCurrentLedgerIfFull() {\n+        log.info(\"[{}] Start checking if current ledger is full\", name);\n+        if (currentLedgerEntries > 0 && currentLedgerIsFull()) {\n+            STATE_UPDATER.set(this, State.ClosingLedger);\n+            currentLedger.asyncClose(new AsyncCallback.CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object o) {\n+                    checkArgument(currentLedger.getId() == lh.getId(), \"ledgerId %s doesn't match with acked ledgerId %s\",\n+                            currentLedger.getId(),\n+                            lh.getId());\n+\n+                    if (rc == BKException.Code.OK) {\n+                        log.debug(\"Successfuly closed ledger {}\", lh.getId());\n+                    } else {\n+                        log.warn(\"Error when closing ledger {}. Status={}\", lh.getId(), BKException.getMessage(rc));\n+                    }\n+\n+                    ledgerClosed(lh);\n+                    createLedgerAfterClosed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyNTIyOA==", "bodyText": "Yes in current code logic we can stay in closed state until the next entry comes in, however if we choose for waiting, the last created topic ledger will be never removed beacause the trimming stratege will not remove the current ledger. In such scenario, we will maintain a lot of useless data if the topic is no longer being used. Moreover, it may cause disk problem if we keep a lot mount of discarded topics in the cluster.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r433025228", "createdAt": "2020-06-01T03:15:17Z", "author": {"login": "wuzhanpeng"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1391,6 +1392,38 @@ synchronized void ledgerClosed(final LedgerHandle lh) {\n         }\n     }\n \n+    synchronized void createLedgerAfterClosed() {\n+        STATE_UPDATER.set(this, State.CreatingLedger);\n+        this.lastLedgerCreationInitiationTimestamp = System.nanoTime();\n+        mbean.startDataLedgerCreateOp();\n+        asyncCreateLedger(bookKeeper, config, digestType, this, Collections.emptyMap());\n+    }\n+\n+    @Override\n+    public void rollCurrentLedgerIfFull() {\n+        log.info(\"[{}] Start checking if current ledger is full\", name);\n+        if (currentLedgerEntries > 0 && currentLedgerIsFull()) {\n+            STATE_UPDATER.set(this, State.ClosingLedger);\n+            currentLedger.asyncClose(new AsyncCallback.CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object o) {\n+                    checkArgument(currentLedger.getId() == lh.getId(), \"ledgerId %s doesn't match with acked ledgerId %s\",\n+                            currentLedger.getId(),\n+                            lh.getId());\n+\n+                    if (rc == BKException.Code.OK) {\n+                        log.debug(\"Successfuly closed ledger {}\", lh.getId());\n+                    } else {\n+                        log.warn(\"Error when closing ledger {}. Status={}\", lh.getId(), BKException.getMessage(rc));\n+                    }\n+\n+                    ledgerClosed(lh);\n+                    createLedgerAfterClosed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg5Nw=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzM3OA==", "bodyText": "Ok, I think we can change the current logic. If the current ledger is closed, we can delete it. I'm not sure is there any problems with this change. @merlimat Could you please help check this?", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r435663378", "createdAt": "2020-06-05T02:56:57Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -1391,6 +1392,38 @@ synchronized void ledgerClosed(final LedgerHandle lh) {\n         }\n     }\n \n+    synchronized void createLedgerAfterClosed() {\n+        STATE_UPDATER.set(this, State.CreatingLedger);\n+        this.lastLedgerCreationInitiationTimestamp = System.nanoTime();\n+        mbean.startDataLedgerCreateOp();\n+        asyncCreateLedger(bookKeeper, config, digestType, this, Collections.emptyMap());\n+    }\n+\n+    @Override\n+    public void rollCurrentLedgerIfFull() {\n+        log.info(\"[{}] Start checking if current ledger is full\", name);\n+        if (currentLedgerEntries > 0 && currentLedgerIsFull()) {\n+            STATE_UPDATER.set(this, State.ClosingLedger);\n+            currentLedger.asyncClose(new AsyncCallback.CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object o) {\n+                    checkArgument(currentLedger.getId() == lh.getId(), \"ledgerId %s doesn't match with acked ledgerId %s\",\n+                            currentLedger.getId(),\n+                            lh.getId());\n+\n+                    if (rc == BKException.Code.OK) {\n+                        log.debug(\"Successfuly closed ledger {}\", lh.getId());\n+                    } else {\n+                        log.warn(\"Error when closing ledger {}. Status={}\", lh.getId(), BKException.getMessage(rc));\n+                    }\n+\n+                    ledgerClosed(lh);\n+                    createLedgerAfterClosed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjg5Nw=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc4NDAyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo1MTo0NlrOGcxDPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMToxMDozN1rOGgNAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk1OA==", "bodyText": "This thread is not being stopped. Potentially we could also reuse an existing executor.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816958", "createdAt": "2020-05-30T06:51:46Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -277,6 +278,8 @@ public BrokerService(PulsarService pulsar) throws Exception {\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-publish-buffer-monitor\"));\n         this.consumedLedgersMonitor = Executors\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"consumed-Ledgers-monitor\"));\n+        this.ledgerFullMonitor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyMDc0Mw==", "bodyText": "+1 @wuzhanpeng can we re-use an existing executor? Otherwise, we end up creating a lot of executors.", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r436420743", "createdAt": "2020-06-08T01:10:37Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -277,6 +278,8 @@ public BrokerService(PulsarService pulsar) throws Exception {\n             Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"pulsar-publish-buffer-monitor\"));\n         this.consumedLedgersMonitor = Executors\n                 .newSingleThreadScheduledExecutor(new DefaultThreadFactory(\"consumed-Ledgers-monitor\"));\n+        this.ledgerFullMonitor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk1OA=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc4NDI5OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjo1MjoyOFrOGcxDXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOToyNToxMlrOGdEO1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk5MQ==", "bodyText": "the recurring task needs to be cancelled when BrokerService is closed", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r432816991", "createdAt": "2020-05-30T06:52:28Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -485,6 +489,12 @@ protected void startConsumedLedgersMonitor() {\n         }\n     }\n \n+    protected void startLedgerFullMonitor() {\n+        int interval = pulsar().getConfiguration().getManagedLedgerMaxLedgerRolloverTimeMinutes();\n+        ledgerFullMonitor.scheduleAtFixedRate(safeRun(this::checkLedgerFull),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMTIyMw==", "bodyText": "I newly add a shutdown for the monitor when BrokerService is closed", "url": "https://github.com/apache/pulsar/pull/7111#discussion_r433131223", "createdAt": "2020-06-01T09:25:12Z", "author": {"login": "wuzhanpeng"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java", "diffHunk": "@@ -485,6 +489,12 @@ protected void startConsumedLedgersMonitor() {\n         }\n     }\n \n+    protected void startLedgerFullMonitor() {\n+        int interval = pulsar().getConfiguration().getManagedLedgerMaxLedgerRolloverTimeMinutes();\n+        ledgerFullMonitor.scheduleAtFixedRate(safeRun(this::checkLedgerFull),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNjk5MQ=="}, "originalCommit": {"oid": "b1558940ab2a0ef515845fe78b5de5ba9ce38ad7"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1697, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}