{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDM3ODEy", "number": 7211, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNDowMVrOED-sbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNTo0OFrOED-u2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA4MzY0OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNDowMVrOGhUaPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1Nzo0NlrOGhYElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDU4OQ==", "bodyText": "Should we just remove the try-catch and let the method throw an exception? Everything is caught in the thread anyways.", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437590589", "createdAt": "2020-06-09T17:14:01Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -69,28 +106,13 @@ public void processRequest(Message<byte[]> msg) {\n             serviceRequest = ServiceRequest.parseFrom(msg.getData());\n         } catch (IOException e) {\n             log.error(\"Received bad service request at message {}\", msg.getMessageId(), e);\n-            // TODO: find a better way to handle bad request\n-            throw new RuntimeException(e);\n+            errorNotifier.triggerError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwMDAzMg==", "bodyText": "We would still need to differentiate Interrupted vs others. And if we do encounter some exception isn;'t it better to trigger the errorNotifier and exit perhaps?", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437600032", "createdAt": "2020-06-09T17:30:03Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -69,28 +106,13 @@ public void processRequest(Message<byte[]> msg) {\n             serviceRequest = ServiceRequest.parseFrom(msg.getData());\n         } catch (IOException e) {\n             log.error(\"Received bad service request at message {}\", msg.getMessageId(), e);\n-            // TODO: find a better way to handle bad request\n-            throw new RuntimeException(e);\n+            errorNotifier.triggerError(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDU4OQ=="}, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDEwNw==", "bodyText": "We would still need to differentiate Interrupted vs others.\n\nI don't quite follow, the code already differentiates interrupted exceptions vs other exceptions.\nTriggering the error in the catch all block in the thread allows us to exit the thread as well and stop further processing of requests.  While this doesn't hurt but is cleaner in a sense.", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437610107", "createdAt": "2020-06-09T17:47:08Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -69,28 +106,13 @@ public void processRequest(Message<byte[]> msg) {\n             serviceRequest = ServiceRequest.parseFrom(msg.getData());\n         } catch (IOException e) {\n             log.error(\"Received bad service request at message {}\", msg.getMessageId(), e);\n-            // TODO: find a better way to handle bad request\n-            throw new RuntimeException(e);\n+            errorNotifier.triggerError(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDU4OQ=="}, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDU4Mw==", "bodyText": "I misunderstood your comments. Yes, that makes sense. Fixed", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437650583", "createdAt": "2020-06-09T18:57:46Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -69,28 +106,13 @@ public void processRequest(Message<byte[]> msg) {\n             serviceRequest = ServiceRequest.parseFrom(msg.getData());\n         } catch (IOException e) {\n             log.error(\"Received bad service request at message {}\", msg.getMessageId(), e);\n-            // TODO: find a better way to handle bad request\n-            throw new RuntimeException(e);\n+            errorNotifier.triggerError(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDU4OQ=="}, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA4OTg1OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNTo0OFrOGhUePA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzozMjoyOFrOGhVEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTYxMg==", "bodyText": "Can you also set the subscription prefix:\nsubscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-metadata-manager\")", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437591612", "createdAt": "2020-06-09T17:15:48Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -19,47 +19,84 @@\n package org.apache.pulsar.functions.worker;\n \n import java.io.IOException;\n-import java.util.function.Function;\n \n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.Reader;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.functions.proto.Request.ServiceRequest;\n \n @Slf4j\n public class FunctionMetaDataTopicTailer\n-        implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+        implements Runnable, AutoCloseable {\n \n     private final FunctionMetaDataManager functionMetaDataManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n+    private final Thread readerThread;\n+    private volatile boolean running;\n+    private ErrorNotifier errorNotifier;\n \n     public FunctionMetaDataTopicTailer(FunctionMetaDataManager functionMetaDataManager,\n-                                       Reader<byte[]> reader)\n+                                       ReaderBuilder readerBuilder, WorkerConfig workerConfig,\n+                                       ErrorNotifier errorNotifier)\n             throws PulsarClientException {\n         this.functionMetaDataManager = functionMetaDataManager;\n-        this.reader = reader;\n+        this.reader = readerBuilder\n+                .topic(workerConfig.getFunctionMetadataTopic())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwMTQ2MA==", "bodyText": "Added", "url": "https://github.com/apache/pulsar/pull/7211#discussion_r437601460", "createdAt": "2020-06-09T17:32:28Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataTopicTailer.java", "diffHunk": "@@ -19,47 +19,84 @@\n package org.apache.pulsar.functions.worker;\n \n import java.io.IOException;\n-import java.util.function.Function;\n \n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.Reader;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.functions.proto.Request.ServiceRequest;\n \n @Slf4j\n public class FunctionMetaDataTopicTailer\n-        implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+        implements Runnable, AutoCloseable {\n \n     private final FunctionMetaDataManager functionMetaDataManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n+    private final Thread readerThread;\n+    private volatile boolean running;\n+    private ErrorNotifier errorNotifier;\n \n     public FunctionMetaDataTopicTailer(FunctionMetaDataManager functionMetaDataManager,\n-                                       Reader<byte[]> reader)\n+                                       ReaderBuilder readerBuilder, WorkerConfig workerConfig,\n+                                       ErrorNotifier errorNotifier)\n             throws PulsarClientException {\n         this.functionMetaDataManager = functionMetaDataManager;\n-        this.reader = reader;\n+        this.reader = readerBuilder\n+                .topic(workerConfig.getFunctionMetadataTopic())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTYxMg=="}, "originalCommit": {"oid": "4dd8c3ade97bf9436e0d985d57b3c800498f7d79"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1739, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}