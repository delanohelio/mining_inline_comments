{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNjk2Mjk4", "number": 7198, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0ODo0MlrOEDTJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0OToxNVrOEDTJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk0ODc1OnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/lib/PartitionedConsumerImpl.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0ODo0MlrOGgPHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo0Njo0NVrOGgRAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NTIwMg==", "bodyText": "The message id is only relative to 1 partition. Seeking with same message id on multiple partition will position the subscription in the wrong position.", "url": "https://github.com/apache/pulsar/pull/7198#discussion_r436455202", "createdAt": "2020-06-08T04:48:42Z", "author": {"login": "merlimat"}, "path": "pulsar-client-cpp/lib/PartitionedConsumerImpl.cc", "diffHunk": "@@ -542,11 +542,27 @@ void PartitionedConsumerImpl::handleGetConsumerStats(Result res, BrokerConsumerS\n }\n \n void PartitionedConsumerImpl::seekAsync(const MessageId& msgId, ResultCallback callback) {\n-    callback(ResultOperationNotSupported);\n+    Lock stateLock(mutex_);\n+    if (state_ != Ready) {\n+        callback(ResultAlreadyClosed);\n+        return;\n+    }\n+    stateLock.unlock();\n+    for (ConsumerList::const_iterator i = consumers_.begin(); i != consumers_.end(); i++) {\n+        (*i)->seekAsync(msgId, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49bb3654b2d6c7e4e025ecfb1c7bc98cbafe6cec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NjMzOA==", "bodyText": "I understood that.\nThis PR decides to support only seeking on partitioned topic by time.", "url": "https://github.com/apache/pulsar/pull/7198#discussion_r436486338", "createdAt": "2020-06-08T06:46:45Z", "author": {"login": "k2la"}, "path": "pulsar-client-cpp/lib/PartitionedConsumerImpl.cc", "diffHunk": "@@ -542,11 +542,27 @@ void PartitionedConsumerImpl::handleGetConsumerStats(Result res, BrokerConsumerS\n }\n \n void PartitionedConsumerImpl::seekAsync(const MessageId& msgId, ResultCallback callback) {\n-    callback(ResultOperationNotSupported);\n+    Lock stateLock(mutex_);\n+    if (state_ != Ready) {\n+        callback(ResultAlreadyClosed);\n+        return;\n+    }\n+    stateLock.unlock();\n+    for (ConsumerList::const_iterator i = consumers_.begin(); i != consumers_.end(); i++) {\n+        (*i)->seekAsync(msgId, callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NTIwMg=="}, "originalCommit": {"oid": "49bb3654b2d6c7e4e025ecfb1c7bc98cbafe6cec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk0OTMyOnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/lib/PartitionedConsumerImpl.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0OToxNVrOGgPHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0OToxNVrOGgPHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NTMwMA==", "bodyText": "The mutex should be released before triggering the callback, since that might be blocking", "url": "https://github.com/apache/pulsar/pull/7198#discussion_r436455300", "createdAt": "2020-06-08T04:49:15Z", "author": {"login": "merlimat"}, "path": "pulsar-client-cpp/lib/PartitionedConsumerImpl.cc", "diffHunk": "@@ -542,11 +542,27 @@ void PartitionedConsumerImpl::handleGetConsumerStats(Result res, BrokerConsumerS\n }\n \n void PartitionedConsumerImpl::seekAsync(const MessageId& msgId, ResultCallback callback) {\n-    callback(ResultOperationNotSupported);\n+    Lock stateLock(mutex_);\n+    if (state_ != Ready) {\n+        callback(ResultAlreadyClosed);\n+        return;\n+    }\n+    stateLock.unlock();\n+    for (ConsumerList::const_iterator i = consumers_.begin(); i != consumers_.end(); i++) {\n+        (*i)->seekAsync(msgId, callback);\n+    }\n }\n \n void PartitionedConsumerImpl::seekAsync(uint64_t timestamp, ResultCallback callback) {\n-    callback(ResultOperationNotSupported);\n+    Lock stateLock(mutex_);\n+    if (state_ != Ready) {\n+        callback(ResultAlreadyClosed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49bb3654b2d6c7e4e025ecfb1c7bc98cbafe6cec"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1735, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}