{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MjU4NDY1", "number": 8285, "title": "[Issue 8260] Support reset cursor to a batch index of the batching message", "bodyText": "Signed-off-by: Renkai gaelookair@gmail.com\n\n(If this PR fixes a github issue, please add Fixes #<xyz>.)\nFixes #8260\nMotivation\nMake reset cursor command able to reset to a specific index in batch mode.\nModifications\nNow reset offset command change index info on broker side\nVerifying this change\n\n Make sure that the change passes the CI checks.\n\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end deployment with large payloads (10MB)\nExtended integration test for recovery after broker failure\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (yes / no)\nThe schema: (no)\nThe default values of configurations: (no)\nThe wire protocol: (no)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)\nIf a feature is not applicable for documentation, explain why?\nIf a feature is not documented yet in this PR, please create a followup issue for adding the documentation", "createdAt": "2020-10-17T10:24:13Z", "url": "https://github.com/apache/pulsar/pull/8285", "merged": true, "mergeCommit": {"oid": "a5b4146ca0f6f333741763ed3a1dda3495dccb65"}, "closed": true, "closedAt": "2020-10-21T11:16:30Z", "author": {"login": "Renkai"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTYOOFgH2gAyNTA1MjU4NDY1OmY4YzdjOTc1MzZjZWYxNWFjYjQ5NDkwODVlMTkyMmQxYzBkNjE3ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUpvMzgFqTUxMzQ2ODUyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8c7c97536cef15acb4949085e1922d1c0d617e0", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/f8c7c97536cef15acb4949085e1922d1c0d617e0", "committedDate": "2020-10-17T10:15:03Z", "message": "store ackSet when reset cursor in batch indexes\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7233179e6d4b57f00d32c6fad484ee000cc65d0", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/f7233179e6d4b57f00d32c6fad484ee000cc65d0", "committedDate": "2020-10-17T10:34:30Z", "message": "carry ack info in command seek\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77aa4f2926bee2e87d2f6371c38fe895299f448f", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/77aa4f2926bee2e87d2f6371c38fe895299f448f", "committedDate": "2020-10-17T10:52:53Z", "message": "make ackSet by batch index from client\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2867645f6647891062f9da7f8527d11e850032", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/6c2867645f6647891062f9da7f8527d11e850032", "committedDate": "2020-10-17T15:31:24Z", "message": "fix timeout bug\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76101ff88c3d5d024629f7c8dd494cf717e71b2a", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/76101ff88c3d5d024629f7c8dd494cf717e71b2a", "committedDate": "2020-10-18T06:49:00Z", "message": "use different parameter for different message impl\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a84bd823e8bfb33bd19237841f34ce31006ace2", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/0a84bd823e8bfb33bd19237841f34ce31006ace2", "committedDate": "2020-10-18T09:12:30Z", "message": "use different parameter for different message impl\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4ce629da2f2ac898d2cf346adb137c63339f93", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/2c4ce629da2f2ac898d2cf346adb137c63339f93", "committedDate": "2020-10-18T09:44:18Z", "message": "polish ackSet\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18c8acc1ac1e5b09f46e132176f688cd2beb2f0d", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/18c8acc1ac1e5b09f46e132176f688cd2beb2f0d", "committedDate": "2020-10-18T09:47:17Z", "message": "polish\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3652436ab072bfbf46e8f844dbbc09007386fbc", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/d3652436ab072bfbf46e8f844dbbc09007386fbc", "committedDate": "2020-10-18T09:54:57Z", "message": "polish code\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0076999088cd176e85584b655daeda2478883c6b", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/0076999088cd176e85584b655daeda2478883c6b", "committedDate": "2020-10-19T08:11:06Z", "message": "pass test\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23234919341737b59d2bf08c6dd13dc72ef46e50", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/23234919341737b59d2bf08c6dd13dc72ef46e50", "committedDate": "2020-10-19T08:24:02Z", "message": "add some comment\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/2f0cad6d01347c687ad81769749b3588444239a3", "committedDate": "2020-10-19T09:01:35Z", "message": "fix ci error\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjQ5NjMw", "url": "https://github.com/apache/pulsar/pull/8285#pullrequestreview-512249630", "createdAt": "2020-10-20T00:30:08Z", "commit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozMDowOFrOHkmS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozOTo1MFrOHkmdNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODIwMw==", "bodyText": "Avoid use import .* here.", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508138203", "createdAt": "2020-10-20T00:30:08Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -36,10 +36,7 @@\n import io.netty.handler.ssl.SslHandler;\n \n import java.net.SocketAddress;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODM3Mw==", "bodyText": "Avoid use import .* here.", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508138373", "createdAt": "2020-10-20T00:30:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -25,20 +25,21 @@\n import static org.testng.Assert.fail;\n \n import com.google.common.collect.Lists;\n+\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.broker.service.persistent.PersistentSubscription;\n import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n import org.apache.pulsar.client.admin.PulsarAdminException;\n-import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDIwNg==", "bodyText": "The batchIndex of the MessageIdData is an optional field, we shouldn't always use '0' here. It better to change the params type of the batchIndex to Integer. If the the batchIndex no a null value, set the value for the MessageIdBuilder", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508140206", "createdAt": "2020-10-20T00:37:37Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -770,14 +770,15 @@ public static ByteBuf newActiveConsumerChange(long consumerId, boolean isActive)\n         return res;\n     }\n \n-    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId) {\n+    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId, int batchIndex) {\n         CommandSeek.Builder seekBuilder = CommandSeek.newBuilder();\n         seekBuilder.setConsumerId(consumerId);\n         seekBuilder.setRequestId(requestId);\n \n         MessageIdData.Builder messageIdBuilder = MessageIdData.newBuilder();\n         messageIdBuilder.setLedgerId(ledgerId);\n         messageIdBuilder.setEntryId(entryId);\n+        messageIdBuilder.setBatchIndex(batchIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDg1NA==", "bodyText": "It's better tot check msgIdData.hasBatchIndex() first, If the conditions are not met, we don't need to create the BitSet instance.", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508140854", "createdAt": "2020-10-20T00:39:50Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1349,8 +1347,14 @@ protected void handleSeek(CommandSeek seek) {\n             Consumer consumer = consumerFuture.getNow(null);\n             Subscription subscription = consumer.getSubscription();\n             MessageIdData msgIdData = seek.getMessageId();\n+            BitSetRecyclable ackSet = BitSetRecyclable.create();\n+            if (msgIdData.hasBatchIndex()) {\n+                ackSet.set(0, Math.max(msgIdData.getBatchIndex(), 0));\n+            }\n \n-            Position position = new PositionImpl(msgIdData.getLedgerId(), msgIdData.getEntryId());\n+            Position position = new PositionImpl(msgIdData.getLedgerId(),\n+                    msgIdData.getEntryId(), ackSet.toLongArray());\n+            ackSet.recycle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f0cad6d01347c687ad81769749b3588444239a3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2134ec5b5bd135bdb534a12bec9cebb6cc2b8f3", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/f2134ec5b5bd135bdb534a12bec9cebb6cc2b8f3", "committedDate": "2020-10-20T01:59:24Z", "message": "replace * with specific imports\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb57723c0ad254d5d577c96bda845d319aed9b6", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/deb57723c0ad254d5d577c96bda845d319aed9b6", "committedDate": "2020-10-20T02:30:22Z", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af4e324c58646973d6c1fb63e7a834d8c67cd07", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/7af4e324c58646973d6c1fb63e7a834d8c67cd07", "committedDate": "2020-10-20T03:12:31Z", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f989ac393aa1626ec69cb0c91c7d5e456a52574e", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/f989ac393aa1626ec69cb0c91c7d5e456a52574e", "committedDate": "2020-10-20T03:26:25Z", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2c79d55b945dcd876c5f865e88f55ef1897d4f", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/be2c79d55b945dcd876c5f865e88f55ef1897d4f", "committedDate": "2020-10-20T03:32:03Z", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3befed3ab843278511e12dbb0253b9b6a9f0de80", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/3befed3ab843278511e12dbb0253b9b6a9f0de80", "committedDate": "2020-10-20T03:53:32Z", "message": "use MessageIdData carried ack set instead of generated by batchIndex\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d08f29b8b7dd5964ee3f93929337db6cd850d6", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/e7d08f29b8b7dd5964ee3f93929337db6cd850d6", "committedDate": "2020-10-20T07:31:00Z", "message": "remove redundant map put\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c90f1e99d85d75692399b62c673cb0ed10f3e7", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/b1c90f1e99d85d75692399b62c673cb0ed10f3e7", "committedDate": "2020-10-20T07:43:50Z", "message": "use recycleable bit set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68b621561995111f27917c7aaa9c4ca19c3dfb1f", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/68b621561995111f27917c7aaa9c4ca19c3dfb1f", "committedDate": "2020-10-20T07:53:51Z", "message": "use recycleable bit set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "200d3f98c932ee12f457469e9c24e97424134e39", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/200d3f98c932ee12f457469e9c24e97424134e39", "committedDate": "2020-10-20T08:48:55Z", "message": "remove unnecessary client parameter\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjIzNzgy", "url": "https://github.com/apache/pulsar/pull/8285#pullrequestreview-512623782", "createdAt": "2020-10-20T11:54:19Z", "commit": {"oid": "200d3f98c932ee12f457469e9c24e97424134e39"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTo1NDoxOVrOHk4kdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTo1OToxOVrOHk4vRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzNzYyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (long l : ackSet) {\n          \n          \n            \n                        messageIdBuilder.addAckSet(l);\n          \n          \n            \n                    }\n          \n          \n            \n                 messageIdBuilder.addAllAckSet(SafeCollectionUtils.longArrayToList(ackSet);", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508437620", "createdAt": "2020-10-20T11:54:19Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -760,24 +760,30 @@ public static ByteBuf newUnsubscribe(long consumerId, long requestId) {\n     public static ByteBuf newActiveConsumerChange(long consumerId, boolean isActive) {\n         CommandActiveConsumerChange.Builder changeBuilder = CommandActiveConsumerChange.newBuilder()\n             .setConsumerId(consumerId)\n-            .setIsActive(isActive);\n+                .setIsActive(isActive);\n \n         CommandActiveConsumerChange change = changeBuilder.build();\n         ByteBuf res = serializeWithSize(\n-            BaseCommand.newBuilder().setType(Type.ACTIVE_CONSUMER_CHANGE).setActiveConsumerChange(change));\n+                BaseCommand.newBuilder().setType(Type.ACTIVE_CONSUMER_CHANGE).setActiveConsumerChange(change));\n         changeBuilder.recycle();\n         change.recycle();\n         return res;\n     }\n \n-    public static ByteBuf newSeek(long consumerId, long requestId, long ledgerId, long entryId) {\n+    public static ByteBuf newSeek(long consumerId, long requestId,\n+                                  long ledgerId, long entryId, long[] ackSet) {\n         CommandSeek.Builder seekBuilder = CommandSeek.newBuilder();\n         seekBuilder.setConsumerId(consumerId);\n         seekBuilder.setRequestId(requestId);\n \n         MessageIdData.Builder messageIdBuilder = MessageIdData.newBuilder();\n         messageIdBuilder.setLedgerId(ledgerId);\n         messageIdBuilder.setEntryId(entryId);\n+\n+        for (long l : ackSet) {\n+            messageIdBuilder.addAckSet(l);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200d3f98c932ee12f457469e9c24e97424134e39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzODc4OA==", "bodyText": "It's better to check the msgIdData.hasAckSetList() first rather than create a long[] first", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508438788", "createdAt": "2020-10-20T11:56:25Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1350,7 +1351,11 @@ protected void handleSeek(CommandSeek seek) {\n             Subscription subscription = consumer.getSubscription();\n             MessageIdData msgIdData = seek.getMessageId();\n \n-            Position position = new PositionImpl(msgIdData.getLedgerId(), msgIdData.getEntryId());\n+            long[] ackSet = msgIdData.getAckSetList().stream().mapToLong(x -> x).toArray();\n+            if (ackSet == null) ackSet = new long[0];\n+\n+            Position position = new PositionImpl(msgIdData.getLedgerId(),\n+                    msgIdData.getEntryId(), ackSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200d3f98c932ee12f457469e9c24e97424134e39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0MDM5MA==", "bodyText": "The consumer uses a durable cursor no a non-durable cursor.", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r508440390", "createdAt": "2020-10-20T11:59:19Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,93 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();\n+        producer.close();\n+\n+\n+        org.apache.pulsar.client.api.Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n+                .topic(topicName)\n+                .subscriptionName(subscriptionName)\n+                .subscribe();\n+\n+        PersistentTopic topicRef = (PersistentTopic) pulsar.getBrokerService().getTopicReference(topicName).get();\n+        assertNotNull(topicRef);\n+\n+        assertEquals(topicRef.getSubscriptions().size(), 1);\n+\n+        MessageId resetId = messageIds.get(4);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        Message<String> nextMessage = consumer.receive();\n+        MessageId nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        // For non-durable we are going to restart from the next entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200d3f98c932ee12f457469e9c24e97424134e39"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2e6e47b908a8b9f2477bc6629ce947671a7ce2", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/0c2e6e47b908a8b9f2477bc6629ce947671a7ce2", "committedDate": "2020-10-20T15:00:59Z", "message": "polish code\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "519ebb9d22cea38b9f34d35b13627d9b9a13c03a", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/519ebb9d22cea38b9f34d35b13627d9b9a13c03a", "committedDate": "2020-10-21T07:03:39Z", "message": "start message id inclusive\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/8d356ac8e5627eef1451ce84698de89d50b37aee", "committedDate": "2020-10-21T07:04:39Z", "message": "start message id inclusive\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzkwNjA5", "url": "https://github.com/apache/pulsar/pull/8285#pullrequestreview-513390609", "createdAt": "2020-10-21T07:42:42Z", "commit": {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0Mjo0MlrOHleaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NzoyM1rOHlel3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NzU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    futureMessageIds.forEach(future -> {\n          \n          \n            \n                        MessageId messageId = null;\n          \n          \n            \n                        try {\n          \n          \n            \n                            messageId = future.get();\n          \n          \n            \n                            messageIds.add(messageId);\n          \n          \n            \n                        } catch (InterruptedException | ExecutionException e) {\n          \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    FutureUtil.waitForAll(futureMessageIds).get()", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509057589", "createdAt": "2020-10-21T07:42:42Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1Nzg1Mw==", "bodyText": "Since the messageId is returned, we don't need to flush here.", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509057853", "createdAt": "2020-10-21T07:43:08Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MDU3Mw==", "bodyText": "Could you please also add some corner case test? such as reset to the last message to check the consumer can't receive any message?", "url": "https://github.com/apache/pulsar/pull/8285#discussion_r509060573", "createdAt": "2020-10-21T07:47:23Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/SubscriptionSeekTest.java", "diffHunk": "@@ -116,6 +122,91 @@ public void testSeek() throws Exception {\n         assertEquals(sub.getNumberOfEntriesInBacklog(false), 0);\n     }\n \n+    @Test\n+    public void testSeekForBatch() throws Exception {\n+        final String topicName = \"persistent://prop/use/ns-abcd/testSeekForBatch\";\n+        String subscriptionName = \"my-subscription-batch\";\n+\n+        Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n+                .enableBatching(true)\n+                .batchingMaxMessages(3)\n+                .topic(topicName).create();\n+\n+\n+        List<MessageId> messageIds = new ArrayList<>();\n+        List<CompletableFuture<MessageId>> futureMessageIds = new ArrayList<>();\n+\n+        List<String> messages = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            String message = \"my-message-\" + i;\n+            messages.add(message);\n+            CompletableFuture<MessageId> messageIdCompletableFuture = producer.sendAsync(message);\n+            futureMessageIds.add(messageIdCompletableFuture);\n+        }\n+\n+        futureMessageIds.forEach(future -> {\n+            MessageId messageId = null;\n+            try {\n+                messageId = future.get();\n+                messageIds.add(messageId);\n+            } catch (InterruptedException | ExecutionException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        producer.flush();\n+        producer.close();\n+\n+\n+        org.apache.pulsar.client.api.Consumer<String> consumer = pulsarClient.newConsumer(Schema.STRING)\n+                .topic(topicName)\n+                .subscriptionName(subscriptionName)\n+                .startMessageIdInclusive()\n+                .subscribe();\n+\n+        PersistentTopic topicRef = (PersistentTopic) pulsar.getBrokerService().getTopicReference(topicName).get();\n+        assertNotNull(topicRef);\n+\n+        assertEquals(topicRef.getSubscriptions().size(), 1);\n+\n+        MessageId resetId = messageIds.get(4);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        Message<String> nextMessage = consumer.receive();\n+        MessageId nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        String expectedMessage = messages.get(4);\n+        log.info(\"\\nexpected next message: {}, next message {}\", expectedMessage, nextMessage.getValue());\n+        assertEquals(nextMessage.getValue(), expectedMessage);\n+\n+        resetId = messageIds.get(3);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        nextMessage = consumer.receive();\n+        nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        expectedMessage = messages.get(3);\n+        log.info(\"expected next message2: {}, next message2 {}\", expectedMessage, nextMessage.getValue());\n+\n+        assertEquals(nextMessage.getValue(), expectedMessage);\n+\n+        resetId = messageIds.get(2);\n+        consumer.seek(resetId);\n+        // Wait for consumer to reconnect\n+        Thread.sleep(500);\n+\n+        nextMessage = consumer.receive();\n+        nextId = nextMessage.getMessageId();\n+        consumer.acknowledge(nextId);\n+        expectedMessage = messages.get(2);\n+        log.info(\"expected next message3: {}, next message3 {}\", expectedMessage, nextMessage.getValue());\n+        assertEquals(nextMessage.getValue(), expectedMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d356ac8e5627eef1451ce84698de89d50b37aee"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32645c8fc4715349cc454d18e2b9a7d965b936f2", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/32645c8fc4715349cc454d18e2b9a7d965b936f2", "committedDate": "2020-10-21T08:00:41Z", "message": "leave ack set null when command not include a ack set\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33399a4e93f33aa0a32b14d088966e47cadea30f", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/33399a4e93f33aa0a32b14d088966e47cadea30f", "committedDate": "2020-10-21T08:19:59Z", "message": "remove unnecessary try catch\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4241d9d6561924871f38d157ec0970e14dfcea", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/9b4241d9d6561924871f38d157ec0970e14dfcea", "committedDate": "2020-10-21T08:25:18Z", "message": "drop unnecessary sleep\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aaa20633d0d3522db211dc3e5a8525bbf72c857", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/5aaa20633d0d3522db211dc3e5a8525bbf72c857", "committedDate": "2020-10-21T08:35:32Z", "message": "enhance test\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55e8bf13a5e8e4587468c5fc49e4e1de39531ee", "author": {"user": {"login": "Renkai", "name": "Renkai Ge"}}, "url": "https://github.com/apache/pulsar/commit/c55e8bf13a5e8e4587468c5fc49e4e1de39531ee", "committedDate": "2020-10-21T08:42:28Z", "message": "remove unnecessary import\n\nSigned-off-by: Renkai <gaelookair@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDY4NTIx", "url": "https://github.com/apache/pulsar/pull/8285#pullrequestreview-513468521", "createdAt": "2020-10-21T09:13:23Z", "commit": {"oid": "c55e8bf13a5e8e4587468c5fc49e4e1de39531ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1254, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}