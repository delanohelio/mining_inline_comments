{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODg5MzMw", "number": 6972, "title": "Add Annotations for config validation checking", "bodyText": "(If this PR fixes a github issue, please add Fixes #<xyz>.)\nFixes #\n(or if this PR is one task of a github issue, please add Master Issue: #<xyz> to link to the master issue.)\nMaster Issue: #\nMotivation\nThis pr adds annotations that config classes can use to do member validation. This will be useful for things like source/sink/function submission to check if supplied config is in order before starting the actual source/sink/function\nModifications\nDescribe the modifications you've done.\nVerifying this change\n\n Make sure that the change passes the CI checks.\n\n(Please pick either of the following options)\nThis change is a trivial rework / code cleanup without any test coverage.\n(or)\nThis change is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end deployment with large payloads (10MB)\nExtended integration test for recovery after broker failure\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API: (yes / no)\nThe schema: (yes / no / don't know)\nThe default values of configurations: (yes / no)\nThe wire protocol: (yes / no)\nThe rest endpoints: (yes / no)\nThe admin cli options: (yes / no)\nAnything that affects deployment: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)\nIf a feature is not applicable for documentation, explain why?\nIf a feature is not documented yet in this PR, please create a followup issue for adding the documentation", "createdAt": "2020-05-16T00:44:04Z", "url": "https://github.com/apache/pulsar/pull/6972", "merged": true, "mergeCommit": {"oid": "3633e241e5a700bb510d9a2a7907f568d434fb64"}, "closed": true, "closedAt": "2020-05-18T20:51:52Z", "author": {"login": "srkukarni"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchqrrLAH2gAyNDE4ODg5MzMwOmQ2ZWRmODE1YTA3ZWFiZjgyNzU1ZmIzYjA3NDUxMGU2MGY3OWVlODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcijLWfgFqTQxMzc5MTE5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d6edf815a07eabf82755fb3b074510e60f79ee87", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/d6edf815a07eabf82755fb3b074510e60f79ee87", "committedDate": "2020-05-15T23:29:18Z", "message": "Add Validator annotation helpers to validate class parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/68a21cf08fa96997da1277cfba30eb65c5f62870", "committedDate": "2020-05-16T00:40:42Z", "message": "Fix build errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDMzMjI1", "url": "https://github.com/apache/pulsar/pull/6972#pullrequestreview-413033225", "createdAt": "2020-05-16T01:10:29Z", "commit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyOVrOGWXN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyOVrOGWXN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ==", "bodyText": "I like the idea of having type checking. The naming is a bit confusing to me something like makes more sense to me.\nclass TestConfig {\n       @NotNull\n        public String stringValue;\n        \n       @PositiveNumber or @Number(positive=true)\n        public Integer positiveNumber;\n        \n       @List(itemType = Integer.class) or @ListType(itemType = Integer.class) or @IntegerList\n        public List integerList;\n        \n       @Map(keyType = String.class, valueType = Integer.class) or @MapType(keyType = String.class, valueType = Integer.class)\n        public Map stringIntegerMap;\n        \n       @List(itemType = String.class) or @StringList\n        public List stringList;\n        \n       @TopicName\n        public String topic;\n        \n       @CustomType(validatorClass = TestValidator.class)\n        public String customString;\n    }\n\nI think annotations should describe what the variable type is as opposed to describing how to test it. The testing is implied.\nAnother thing to think about is how to handle fields that should be required to have a value.\nThoughts?", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426102269", "createdAt": "2020-05-16T01:10:29Z", "author": {"login": "cckellogg"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64001f84f3b1b38a0f56b51366c6dc13207a1dfb", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/64001f84f3b1b38a0f56b51366c6dc13207a1dfb", "committedDate": "2020-05-16T20:26:30Z", "message": "Take feedback into account"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzkxMTk3", "url": "https://github.com/apache/pulsar/pull/6972#pullrequestreview-413791197", "createdAt": "2020-05-18T17:18:35Z", "commit": {"oid": "64001f84f3b1b38a0f56b51366c6dc13207a1dfb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3509, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}