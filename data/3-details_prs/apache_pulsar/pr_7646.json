{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzI3ODg5", "number": 7646, "title": "[Issue 2689] Support set backlog quota on topic level.", "bodyText": "Motivation\nSupport set backlog quota on topic level.\nBased on the system topic function, refer to @codelipenghui  topic-level backlog quota based on zk implementation\n###Modifications\nSupport get-backlog-quotas on topic level.\nSupport set-backlog-quota on topic level.\nSupport remove-backlog-quota on topic level.\nVerifying this change\nThis change added tests and can be verified as follows:\nTopicBacklogQuotaTest.java\n\ntest set topic backlog quota\ntest remove topic backlog quota\ntest disabled topic backlog quota\ntest topic backlog quota parameters are valid\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: (don't know)\nThe default values of configurations: (yes / no)\nThe wire protocol: (yes / no)\nThe rest endpoints: (yes / no)\nThe admin cli options: (yes)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (docs / JavaDocs)", "createdAt": "2020-07-23T13:58:08Z", "url": "https://github.com/apache/pulsar/pull/7646", "merged": true, "mergeCommit": {"oid": "26c49a85dd89d4282a625f02d16959de595d282f"}, "closed": true, "closedAt": "2020-07-31T06:06:48Z", "author": {"login": "jianyun8023"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3wNX3AFqTQ1NDE2OTAyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6N6qkAFqTQ1ODkzNTg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTY5MDI4", "url": "https://github.com/apache/pulsar/pull/7646#pullrequestreview-454169028", "createdAt": "2020-07-23T14:08:09Z", "commit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowODowOVrOG2MQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNToxMlrOG2MlFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzIzNw==", "bodyText": "asyncResponse.resume(new RestException(Status.PRECONDITION_FAILED,\n\"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\"))", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477237", "createdAt": "2020-07-23T14:08:09Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzgyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(backlogQuota!=null){\n          \n          \n            \n                    if(backlogQuota != null){\n          \n      \n    \n    \n  \n\nPlease check all.", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477823", "createdAt": "2020-07-23T14:08:52Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTg2NA==", "bodyText": "Should keep consistent with checkQuotas in the NamespacesBase, And you can move this method to AdminResource so that you can use it both in the NamespacesBase and PersistentTopicsBase", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459481864", "createdAt": "2020-07-23T14:14:32Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){\n+            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n+        }else {\n+            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n+        }\n+        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n+        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n+                .whenComplete((r, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"Failed updated backlog quota map\",ex);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        try {\n+                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n+                                    clientAppId(),\n+                                    namespaceName,\n+                                    topicName.getLocalName(),\n+                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n+                        } catch (JsonProcessingException ignore) { }\n+                        asyncResponse.resume(Response.noContent().build());\n+                    }\n+                });\n+    }\n+\n+    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n+        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n+        if (retentionPolicies == null){\n+            try {\n+                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n+                        .thenApply(policies -> policies.retention_policies)\n+                        .get(1L, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+               throw new RestException(e);\n+            }\n+        }\n+        return retentionPolicies;\n+    }\n+\n+    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n+            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n+        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n+    }\n+\n+    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n+        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n+                retention.getRetentionSizeInMB() == -1) {\n+            return true;\n+        }\n+        if (quota == null) {\n+            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n+        }\n+        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")\n          \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuota\")", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459482389", "createdAt": "2020-07-23T14:15:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -977,6 +980,50 @@ public PersistentOfflineTopicStats getBacklog(\n         return internalGetBacklog(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NDE2NTY5", "url": "https://github.com/apache/pulsar/pull/7646#pullrequestreview-455416569", "createdAt": "2020-07-27T01:10:30Z", "commit": {"oid": "c705b505b9c619795fb13dd1484fee6e9a51e9a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/2ecb9c2e94251faa63165fd855c2578ea5cbfb0c", "committedDate": "2020-07-28T01:37:20Z", "message": "adding policy of backlog quota on topic level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6286822508bc31f57e26aa5e53f6205fa7cbdb27", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/6286822508bc31f57e26aa5e53f6205fa7cbdb27", "committedDate": "2020-07-28T01:37:20Z", "message": "Add management functions to topic backquote"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afddf87c3bff31f019ba6fa50c35e1e1536ee766", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/afddf87c3bff31f019ba6fa50c35e1e1536ee766", "committedDate": "2020-07-28T01:37:20Z", "message": "fix TopicBacklogQuotaTest header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ccc2151a311a3eafcbfa64b98ac6e5c879a6a68", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/3ccc2151a311a3eafcbfa64b98ac6e5c879a6a68", "committedDate": "2020-07-28T01:37:20Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3855de1a74cf8856c214d46cf27d053eb4b5a7c", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/d3855de1a74cf8856c214d46cf27d053eb4b5a7c", "committedDate": "2020-07-28T01:37:20Z", "message": "Change the return value of `getBacklogQuotaMap` to make it consistent with the namespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf248c14c4d8fedcb98bb9380d6d332449e5cafc", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/cf248c14c4d8fedcb98bb9380d6d332449e5cafc", "committedDate": "2020-07-28T01:37:20Z", "message": "add waiting interval for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc2dab80811451de6efa3464c0de3206228885e", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/3dc2dab80811451de6efa3464c0de3206228885e", "committedDate": "2020-07-28T01:37:20Z", "message": "extract checkQuota to AdminResource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c705b505b9c619795fb13dd1484fee6e9a51e9a2", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/c705b505b9c619795fb13dd1484fee6e9a51e9a2", "committedDate": "2020-07-24T06:50:40Z", "message": "extract checkQuota to AdminResource"}, "afterCommit": {"oid": "3dc2dab80811451de6efa3464c0de3206228885e", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/3dc2dab80811451de6efa3464c0de3206228885e", "committedDate": "2020-07-28T01:37:20Z", "message": "extract checkQuota to AdminResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bd3df4dc83181a7673a095bb83ac32feedf2354", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/6bd3df4dc83181a7673a095bb83ac32feedf2354", "committedDate": "2020-07-30T09:02:45Z", "message": "add waiting interval for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d68ad87004bae8781e97748f2d9648a0ffe3e60", "author": {"user": {"login": "jianyun8023", "name": "Jianyun Zhao"}}, "url": "https://github.com/apache/pulsar/commit/8d68ad87004bae8781e97748f2d9648a0ffe3e60", "committedDate": "2020-07-31T03:16:24Z", "message": "Split test cases `TopicBacklogQuotaTest`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTM1ODcw", "url": "https://github.com/apache/pulsar/pull/7646#pullrequestreview-458935870", "createdAt": "2020-07-31T06:06:32Z", "commit": {"oid": "8d68ad87004bae8781e97748f2d9648a0ffe3e60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 404, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}