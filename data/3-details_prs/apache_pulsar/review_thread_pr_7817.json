{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzU5NTg1", "number": 7817, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNzo0OFrOEYd1Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNzo0OFrOEYd1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDkwMDQ2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNzo0OFrOHA0OQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzowOTowNVrOHBIYlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNzY2NA==", "bodyText": "minor: there is no need to use asyncResponse", "url": "https://github.com/apache/pulsar/pull/7817#discussion_r470617664", "createdAt": "2020-08-14T13:17:48Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2294,6 +2295,48 @@ protected void internalGetRetention(AsyncResponse asyncResponse){\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetPersistence(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        Optional<PersistencePolicies> retention = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getPersistence);\n+        if (!retention.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }else {\n+            asyncResponse.resume(retention.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c748a360d1582c6d8c2448c7481a0f21144b6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0Nzk5MQ==", "bodyText": "It is same to internalGetRetention(), maybe we can modify it all at once.", "url": "https://github.com/apache/pulsar/pull/7817#discussion_r470947991", "createdAt": "2020-08-15T07:09:05Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2294,6 +2295,48 @@ protected void internalGetRetention(AsyncResponse asyncResponse){\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetPersistence(AsyncResponse asyncResponse){\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        Optional<PersistencePolicies> retention = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getPersistence);\n+        if (!retention.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        }else {\n+            asyncResponse.resume(retention.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNzY2NA=="}, "originalCommit": {"oid": "f43c748a360d1582c6d8c2448c7481a0f21144b6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2242, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}