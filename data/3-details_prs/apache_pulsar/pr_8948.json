{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MjUyNDQz", "number": 8948, "title": "Support configure max subscriptions per topic on the topic level policy", "bodyText": "Master Issue: #8866\nMotivation\nCurrently, #8289 introduced max subscriptions per topic at the broker level but does not support overwrite on the namespace level and topic level.\nModifications\nadd topic-level max subscriptions per topic API\nVerifying this change\n1.Verify that the basic API is correct\n2.Verify that the poilcy priority of the broker, namespace, and topic levels is correct.\n3.Verify that the policy of each level is correct", "createdAt": "2020-12-14T08:21:51Z", "url": "https://github.com/apache/pulsar/pull/8948", "merged": true, "mergeCommit": {"oid": "911a4f9a6031703535b6f8a4fa671aaf51ac8230"}, "closed": true, "closedAt": "2020-12-15T17:40:32Z", "author": {"login": "315157973"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmBTfUgH2gAyNTM5MjUyNDQzOjVhNTg4NzExM2E2ZTJjZGJjN2UzMDY3NzM1YTJiNDFiNjVhODJhMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmQK84AFqTU1MjAzOTQ3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a5887113a6e2cdbc7e3067735a2b41b65a82a15", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/5a5887113a6e2cdbc7e3067735a2b41b65a82a15", "committedDate": "2020-12-14T08:17:33Z", "message": "support topic-level max subscriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ae7e8400ecd27cb777b91366ed8fd183e3b2e1", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/e7ae7e8400ecd27cb777b91366ed8fd183e3b2e1", "committedDate": "2020-12-14T08:33:46Z", "message": "code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f52ce0a0106d3d34271bea95c83d767437edd0", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/e5f52ce0a0106d3d34271bea95c83d767437edd0", "committedDate": "2020-12-14T09:02:50Z", "message": "code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00", "author": {"user": {"login": "315157973", "name": "feynmanlin"}}, "url": "https://github.com/apache/pulsar/commit/b160f7e6584b221f3187406d99ffe1fd8c291e00", "committedDate": "2020-12-14T09:25:56Z", "message": "code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzkxOTU5", "url": "https://github.com/apache/pulsar/pull/8948#pullrequestreview-551791959", "createdAt": "2020-12-14T18:48:14Z", "commit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDM5NDc4", "url": "https://github.com/apache/pulsar/pull/8948#pullrequestreview-552039478", "createdAt": "2020-12-15T01:36:48Z", "commit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozNjo0OFrOIF0wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTozNjo0OFrOIF0wzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI1NQ==", "bodyText": "Is this ok to set the value as null? Can we avoid to do that?", "url": "https://github.com/apache/pulsar/pull/8948#discussion_r542978255", "createdAt": "2020-12-15T01:36:48Z", "author": {"login": "zymap"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -1816,6 +1816,91 @@ public void removePersistence(@Suspended final AsyncResponse asyncResponse,\n         });\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Get maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void getMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        try {\n+            Optional<Integer> maxSubscriptionsPerTopic = internalGetMaxSubscriptionsPerTopic();\n+            if (!maxSubscriptionsPerTopic.isPresent()) {\n+                asyncResponse.resume(Response.noContent().build());\n+            } else {\n+                asyncResponse.resume(maxSubscriptionsPerTopic.get());\n+            }\n+        } catch (RestException e) {\n+            asyncResponse.resume(e);\n+        } catch (Exception e) {\n+            asyncResponse.resume(new RestException(e));\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Set maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\"),\n+            @ApiResponse(code = 412, message = \"Invalid value of maxSubscriptionsPerTopic\")})\n+    public void setMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                @PathParam(\"tenant\") String tenant,\n+                                @PathParam(\"namespace\") String namespace,\n+                                @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                @ApiParam(value = \"The max subscriptions of the topic\") int maxSubscriptionsPerTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(maxSubscriptionsPerTopic).whenComplete((r, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Updating maxSubscriptionsPerTopic failed\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                log.info(\"[{}] Successfully updated maxSubscriptionsPerTopic: namespace={}, topic={}\"\n+                                + \", maxSubscriptions={}\"\n+                        , clientAppId(), namespaceName, topicName.getLocalName(), maxSubscriptionsPerTopic);\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic\")\n+    @ApiOperation(value = \"Remove maxSubscriptionsPerTopic config for specified topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Topic does not exist\"),\n+            @ApiResponse(code = 405,\n+                    message = \"Topic level policy is disabled, to enable the topic level policy and retry\"),\n+            @ApiResponse(code = 409, message = \"Concurrent modification\")})\n+    public void removeMaxSubscriptionsPerTopic(@Suspended final AsyncResponse asyncResponse,\n+                                   @PathParam(\"tenant\") String tenant,\n+                                   @PathParam(\"namespace\") String namespace,\n+                                   @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        internalSetMaxSubscriptionsPerTopic(null).whenComplete((r, ex) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b160f7e6584b221f3187406d99ffe1fd8c291e00"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 933, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}