{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDExMjQ2", "number": 6362, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1OToyNlrODhGq4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowMjozN1rODkZ51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDM4ODgzOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1OToyNlrOFrrjHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1OToyNlrOFrrjHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NjU5MQ==", "bodyText": "I think you can useCommands.parseMessageMetadata(entry.getDataBuffer()) to get the MessageMetadata.  The batch size maintained in MessageMetadata.", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381346591", "createdAt": "2020-02-19T14:59:26Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1412,6 +1424,51 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n         }\n     }\n \n+    private int getLargestBatchIndex(Topic topic, PositionImpl position, long requestId) {\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {\n+            @Override\n+            public void readEntryComplete(Entry entry, Object ctx) {\n+                entryFuture.complete(entry);\n+            }\n+\n+            @Override\n+            public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n+                entryFuture.completeExceptionally(exception);\n+            }\n+        }, null);\n+\n+        CompletableFuture<Integer> batchSizeFuture = entryFuture.thenApply(entry -> {\n+            int[] sizeHolder = new int[1];\n+            try {\n+                MessageParser.parseMessage(TopicName.get(topic.getName()), entry.getLedgerId(), entry.getEntryId(),\n+                        entry.getDataBuffer(), (message) -> {\n+                            sizeHolder[0] = ((RawMessageImpl) message).getBatchSize();\n+                            message.release();\n+                        }, Commands.DEFAULT_MAX_MESSAGE_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55fd071c8e1420aa70df4d78ad02ef3da95c71dc"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTM2MDczOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo0Mjo0MFrOFr1FHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNDoxMTozMlrOFsDEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjc1MQ==", "bodyText": "This is being called within an IO thread. We cannot block on the future", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381502751", "createdAt": "2020-02-19T19:42:40Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1412,6 +1424,43 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n         }\n     }\n \n+    private int getLargestBatchIndex(Topic topic, PositionImpl position, long requestId) {\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {\n+            @Override\n+            public void readEntryComplete(Entry entry, Object ctx) {\n+                entryFuture.complete(entry);\n+            }\n+\n+            @Override\n+            public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n+                entryFuture.completeExceptionally(exception);\n+            }\n+        }, null);\n+\n+        CompletableFuture<Integer> batchSizeFuture = entryFuture.thenApply(entry -> {\n+            MessageMetadata metadata = Commands.parseMessageMetadata(entry.getDataBuffer());\n+            int batchSize = metadata.getNumMessagesInBatch();\n+            entry.release();\n+            return batchSize;\n+        });\n+\n+        try {\n+            int batchSize =  batchSizeFuture.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11102e0abefb2393f381fbfe97ecce1c2b588418"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTczMjAzMQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r381732031", "createdAt": "2020-02-20T04:11:32Z", "author": {"login": "yjshen"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1412,6 +1424,43 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n         }\n     }\n \n+    private int getLargestBatchIndex(Topic topic, PositionImpl position, long requestId) {\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {\n+            @Override\n+            public void readEntryComplete(Entry entry, Object ctx) {\n+                entryFuture.complete(entry);\n+            }\n+\n+            @Override\n+            public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n+                entryFuture.completeExceptionally(exception);\n+            }\n+        }, null);\n+\n+        CompletableFuture<Integer> batchSizeFuture = entryFuture.thenApply(entry -> {\n+            MessageMetadata metadata = Commands.parseMessageMetadata(entry.getDataBuffer());\n+            int batchSize = metadata.getNumMessagesInBatch();\n+            entry.release();\n+            return batchSize;\n+        });\n+\n+        try {\n+            int batchSize =  batchSizeFuture.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjc1MQ=="}, "originalCommit": {"oid": "11102e0abefb2393f381fbfe97ecce1c2b588418"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTc5NTczOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo1MToxNFrOFt5apQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo1MToxNFrOFt5apQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CountDownLatch latch = new CountDownLatch(100);\n          \n          \n            \n                    CountDownLatch latch = new CountDownLatch(numOfMessage);", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r383670949", "createdAt": "2020-02-25T05:51:14Z", "author": {"login": "zymap"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/TopicReaderTest.java", "diffHunk": "@@ -531,6 +542,68 @@ public void testMessageAvailableAfterRestart() throws Exception {\n \n     }\n \n+    @Test(dataProvider = \"variationsForHasMessageAvailable\")\n+    public void testHasMessageAvailable(boolean enableBatch, boolean startInclusive) throws Exception {\n+        final String topicName = \"persistent://my-property/my-ns/HasMessageAvailable\";\n+        final int numOfMessage = 100;\n+\n+        ProducerBuilder<byte[]> producerBuilder = pulsarClient.newProducer()\n+                .topic(topicName);\n+\n+        if (enableBatch) {\n+            producerBuilder\n+                    .enableBatching(true)\n+                    .batchingMaxMessages(10);\n+        } else {\n+            producerBuilder\n+                    .enableBatching(false);\n+        }\n+\n+        Producer<byte[]> producer = producerBuilder.create();\n+\n+        CountDownLatch latch = new CountDownLatch(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2278a9b9cf4d4a7aaaae7fa110170095e5622afa"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk5NzMyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowMjozN1rOFwtYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowMjozN1rOFwtYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxOTQ4Nw==", "bodyText": "Ideally we should be avoiding this read by just recording the number of messages in the last batch, along with the current position.", "url": "https://github.com/apache/pulsar/pull/6362#discussion_r386619487", "createdAt": "2020-03-02T20:02:37Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1396,22 +1401,83 @@ protected void handleGetLastMessageId(CommandGetLastMessageId getLastMessageId)\n             Topic topic = consumer.getSubscription().getTopic();\n             Position position = topic.getLastMessageId();\n             int partitionIndex = TopicName.getPartitionIndex(topic.getName());\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"[{}] [{}][{}] Get LastMessageId {} partitionIndex {}\", remoteAddress,\n-                    topic.getName(), consumer.getSubscription().getName(), position, partitionIndex);\n-            }\n-            MessageIdData messageId = MessageIdData.newBuilder()\n-                .setLedgerId(((PositionImpl)position).getLedgerId())\n-                .setEntryId(((PositionImpl)position).getEntryId())\n-                .setPartition(partitionIndex)\n-                .build();\n \n-            ctx.writeAndFlush(Commands.newGetLastMessageIdResponse(requestId, messageId));\n+            getLargestBatchIndexWhenPossible(\n+                    topic,\n+                    (PositionImpl) position,\n+                    partitionIndex,\n+                    requestId,\n+                    consumer.getSubscription().getName());\n+\n         } else {\n             ctx.writeAndFlush(Commands.newError(getLastMessageId.getRequestId(), ServerError.MetadataError, \"Consumer not found\"));\n         }\n     }\n \n+    private void getLargestBatchIndexWhenPossible(\n+            Topic topic,\n+            PositionImpl position,\n+            int partitionIndex,\n+            long requestId,\n+            String subscriptionName) {\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) topic;\n+        ManagedLedgerImpl ml = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+\n+        // If it's not pointing to a valid entry, respond messageId of the current position.\n+        if (position.getEntryId() == -1) {\n+            MessageIdData messageId = MessageIdData.newBuilder()\n+                    .setLedgerId(position.getLedgerId())\n+                    .setEntryId(position.getEntryId())\n+                    .setPartition(partitionIndex).build();\n+\n+            ctx.writeAndFlush(Commands.newGetLastMessageIdResponse(requestId, messageId));\n+        }\n+\n+        // For a valid position, we read the entry out and parse the batch size from its metadata.\n+        CompletableFuture<Entry> entryFuture = new CompletableFuture<>();\n+        ml.asyncReadEntry(position, new AsyncCallbacks.ReadEntryCallback() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a94e2d831e40f524ddc0d32e47e0c5b6f50a1b"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}