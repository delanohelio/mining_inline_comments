{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMDQ1ODA4", "number": 8992, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoxODoxM1rOFHVW7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xNVQwMzoyMTozMVrOGu5Eag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjM0Mjg3OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoxODoxM1rOIIxgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNTo0NFrOIIxtcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MDY2OA==", "bodyText": "Typo  qeuue", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546070668", "createdAt": "2020-12-18T20:18:13Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1192,6 +1193,17 @@ protected void handleProducer(final CommandProducer cmdProducer) {\n                                     }\n                                     return null;\n                                 });\n+\n+                                producerQueuedFuture.thenRun(() -> {\n+                                    // If the producer is queued waiting, we will get an immediate notification\n+                                    // that we need to pass to client\n+                                    if (isActive()) {\n+                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3Mzk3MQ==", "bodyText": "Fixed", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073971", "createdAt": "2020-12-18T20:25:44Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1192,6 +1193,17 @@ protected void handleProducer(final CommandProducer cmdProducer) {\n                                     }\n                                     return null;\n                                 });\n+\n+                                producerQueuedFuture.thenRun(() -> {\n+                                    // If the producer is queued waiting, we will get an immediate notification\n+                                    // that we need to pass to client\n+                                    if (isActive()) {\n+                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MDY2OA=="}, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjM1MTU5OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMToyN1rOIIxlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODo1MDowNVrOII6LoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng==", "bodyText": "What happens if the PulsarClient gets closed or there is a network error?\nAre we guaranteed to fail and do not wait forever?", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546071996", "createdAt": "2020-12-18T20:21:27Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java", "diffHunk": "@@ -468,6 +469,19 @@ protected void handleProducerSuccess(CommandProducerSuccess success) {\n                     success.getRequestId(), success.getProducerName());\n         }\n         long requestId = success.getRequestId();\n+        if (!success.getProducerReady()) {\n+            // We got a success operation but the producer is not ready. This means that the producer has been queued up\n+            // in broker. We need to leave the future pending until we get the final confirmation. We just mark that\n+            // we have received a response, in order to avoid the timeout.\n+            TimedCompletableFuture<?> requestFuture = (TimedCompletableFuture<?>) pendingRequests.get(requestId);\n+            if (requestFuture != null) {\n+                log.info(\"{} Producer {} has been queued up at broker. request: {}\", ctx.channel(),\n+                        success.getProducerName(), requestId);\n+                requestFuture.markAsResponded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzMzNQ==", "bodyText": "Yes, the marking of the future is only for timeout within a single connection. When a connection fails, everything that was in that connections is marked as failed and will trigger a retry.", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073335", "createdAt": "2020-12-18T20:24:16Z", "author": {"login": "merlimat"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java", "diffHunk": "@@ -468,6 +469,19 @@ protected void handleProducerSuccess(CommandProducerSuccess success) {\n                     success.getRequestId(), success.getProducerName());\n         }\n         long requestId = success.getRequestId();\n+        if (!success.getProducerReady()) {\n+            // We got a success operation but the producer is not ready. This means that the producer has been queued up\n+            // in broker. We need to leave the future pending until we get the final confirmation. We just mark that\n+            // we have received a response, in order to avoid the timeout.\n+            TimedCompletableFuture<?> requestFuture = (TimedCompletableFuture<?>) pendingRequests.get(requestId);\n+            if (requestFuture != null) {\n+                log.info(\"{} Producer {} has been queued up at broker. request: {}\", ctx.channel(),\n+                        success.getProducerName(), requestId);\n+                requestFuture.markAsResponded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng=="}, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIxMjc2OQ==", "bodyText": "Good", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546212769", "createdAt": "2020-12-19T08:50:05Z", "author": {"login": "eolivelli"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ClientCnx.java", "diffHunk": "@@ -468,6 +469,19 @@ protected void handleProducerSuccess(CommandProducerSuccess success) {\n                     success.getRequestId(), success.getProducerName());\n         }\n         long requestId = success.getRequestId();\n+        if (!success.getProducerReady()) {\n+            // We got a success operation but the producer is not ready. This means that the producer has been queued up\n+            // in broker. We need to leave the future pending until we get the final confirmation. We just mark that\n+            // we have received a response, in order to avoid the timeout.\n+            TimedCompletableFuture<?> requestFuture = (TimedCompletableFuture<?>) pendingRequests.get(requestId);\n+            if (requestFuture != null) {\n+                log.info(\"{} Producer {} has been queued up at broker. request: {}\", ctx.channel(),\n+                        success.getProducerName(), requestId);\n+                requestFuture.markAsResponded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MTk5Ng=="}, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjM2MzQzOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNToyM1rOIIxsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNToyM1rOIIxsuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3Mzc4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);\n          \n          \n            \n                                                    log.info(\"[{}] Producer is waiting in queue: {}\", remoteAddress, producer);", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r546073784", "createdAt": "2020-12-18T20:25:23Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/ServerCnx.java", "diffHunk": "@@ -1192,6 +1193,17 @@ protected void handleProducer(final CommandProducer cmdProducer) {\n                                     }\n                                     return null;\n                                 });\n+\n+                                producerQueuedFuture.thenRun(() -> {\n+                                    // If the producer is queued waiting, we will get an immediate notification\n+                                    // that we need to pass to client\n+                                    if (isActive()) {\n+                                        log.info(\"[{}] Producer is waiting in qeuue: {}\", remoteAddress, producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c2534c105e8b750cc7fc2602f00647c26ad40"}, "originalPosition": 30}]}}, {"id": "PRRT_kwDOA7PXtM4a7kRq", "diffSide": "LEFT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xNVQwMzoyMTozMVrOKj-HvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0xNVQwMzoyMTozMVrOKj-HvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "PRRC_kwDOA7PXtM4qP4e9", "bodyText": "Hi @merlimat @sijie , this place makes me a little puzzled and I would like to ask why we need to change readlock to writelock?", "url": "https://github.com/apache/pulsar/pull/8992#discussion_r708806589", "createdAt": "2021-09-15T03:21:31Z", "author": {"login": "wuzhanpeng"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -337,14 +342,15 @@ public String getReplicatorPrefix() {\n     }\n \n     @Override\n-    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer,\n+            CompletableFuture<Void> producerQueuedFuture) {\n         checkArgument(producer.getTopic() == this);\n \n         CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n \n-        incrementTopicEpochIfNeeded(producer)\n-                .thenAccept(epoch -> {\n-                    lock.readLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd614a912d055085e011cd83c9f7769b3d3a54ad"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2586, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}