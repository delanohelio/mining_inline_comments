{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzI3ODg5", "number": 7646, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowODowOVrOERd2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNToxMlrOEReDaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUwNDA1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowODowOVrOG2MQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNDozNlrOG2O1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzIzNw==", "bodyText": "asyncResponse.resume(new RestException(Status.PRECONDITION_FAILED,\n\"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\"))", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477237", "createdAt": "2020-07-23T14:08:09Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxOTI4NA==", "bodyText": "I have modified", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459519284", "createdAt": "2020-07-23T15:04:36Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzIzNw=="}, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUwNzg2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowODo1MlrOG2MTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNDo0NVrOG2O1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(backlogQuota!=null){\n          \n          \n            \n                    if(backlogQuota != null){\n          \n      \n    \n    \n  \n\nPlease check all.", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459477823", "createdAt": "2020-07-23T14:08:52Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxOTM3Mg==", "bodyText": "I have modified", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459519372", "createdAt": "2020-07-23T15:04:45Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NzgyMw=="}, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUzMzAwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNDozMlrOG2MjCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjo1MToyOVrOG2k2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTg2NA==", "bodyText": "Should keep consistent with checkQuotas in the NamespacesBase, And you can move this method to AdminResource so that you can use it both in the NamespacesBase and PersistentTopicsBase", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459481864", "createdAt": "2020-07-23T14:14:32Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){\n+            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n+        }else {\n+            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n+        }\n+        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n+        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n+                .whenComplete((r, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"Failed updated backlog quota map\",ex);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        try {\n+                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n+                                    clientAppId(),\n+                                    namespaceName,\n+                                    topicName.getLocalName(),\n+                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n+                        } catch (JsonProcessingException ignore) { }\n+                        asyncResponse.resume(Response.noContent().build());\n+                    }\n+                });\n+    }\n+\n+    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n+        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n+        if (retentionPolicies == null){\n+            try {\n+                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n+                        .thenApply(policies -> policies.retention_policies)\n+                        .get(1L, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+               throw new RestException(e);\n+            }\n+        }\n+        return retentionPolicies;\n+    }\n+\n+    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n+            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n+        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n+    }\n+\n+    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n+        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n+                retention.getRetentionSizeInMB() == -1) {\n+            return true;\n+        }\n+        if (quota == null) {\n+            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n+        }\n+        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3OTk0MA==", "bodyText": "Ok, I extracted it.", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459879940", "createdAt": "2020-07-24T06:51:29Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2000,6 +2004,94 @@ protected PersistentOfflineTopicStats internalGetBacklog(boolean authoritative)\n         return offlineTopicStats;\n     }\n \n+    protected void internalSetBacklogQuota(AsyncResponse asyncResponse, BacklogQuota.BacklogQuotaType backlogQuotaType, BacklogQuota backlogQuota) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        if (backlogQuotaType == null) {\n+            backlogQuotaType = BacklogQuota.BacklogQuotaType.destination_storage;\n+        }\n+        checkTopicLevelPolicyEnable();\n+        TopicPolicies topicPolicies;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.warn(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+            return;\n+        }\n+        if (topicPolicies == null){\n+            topicPolicies = new TopicPolicies();\n+        }\n+\n+        RetentionPolicies retentionPolicies = getRetentionPolicies(topicName, topicPolicies);\n+        if(!checkQuotas(backlogQuota,retentionPolicies)){\n+            log.warn(\n+                    \"[{}] Failed to update backlog configuration for topic {}: conflicts with retention quota\",\n+                    clientAppId(), topicName);\n+            throw new RestException(Status.PRECONDITION_FAILED,\n+                    \"Backlog Quota exceeds configured retention quota for topic. Please increase retention quota and retry\");\n+        }\n+\n+        if(backlogQuota!=null){\n+            topicPolicies.getBackLogQuotaMap().put(backlogQuotaType.name(), backlogQuota);\n+        }else {\n+            topicPolicies.getBackLogQuotaMap().remove(backlogQuotaType.name());\n+        }\n+        Map<String, BacklogQuota> backLogQuotaMap = topicPolicies.getBackLogQuotaMap();\n+        pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies)\n+                .whenComplete((r, ex) -> {\n+                    if (ex != null) {\n+                        log.error(\"Failed updated backlog quota map\",ex);\n+                        asyncResponse.resume(new RestException(ex));\n+                    } else {\n+                        try {\n+                            log.info(\"[{}] Successfully updated backlog quota map: namespace={}, topic={}, map={}\",\n+                                    clientAppId(),\n+                                    namespaceName,\n+                                    topicName.getLocalName(),\n+                                    jsonMapper().writeValueAsString(backLogQuotaMap));\n+                        } catch (JsonProcessingException ignore) { }\n+                        asyncResponse.resume(Response.noContent().build());\n+                    }\n+                });\n+    }\n+\n+    private RetentionPolicies getRetentionPolicies(TopicName topicName, TopicPolicies topicPolicies) {\n+        RetentionPolicies retentionPolicies = topicPolicies.getRetentionPolicies();\n+        if (retentionPolicies == null){\n+            try {\n+                retentionPolicies = getNamespacePoliciesAsync(topicName.getNamespaceObject())\n+                        .thenApply(policies -> policies.retention_policies)\n+                        .get(1L, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+               throw new RestException(e);\n+            }\n+        }\n+        return retentionPolicies;\n+    }\n+\n+    protected void internalRemoveBacklogQuota(AsyncResponse asyncResponse,\n+            BacklogQuota.BacklogQuotaType backlogQuotaType) {\n+        internalSetBacklogQuota(asyncResponse, backlogQuotaType, null);\n+    }\n+\n+    private boolean checkQuotas(BacklogQuota quota, RetentionPolicies retention) {\n+        if (retention==null||retention.getRetentionSizeInMB() == 0 ||\n+                retention.getRetentionSizeInMB() == -1) {\n+            return true;\n+        }\n+        if (quota == null) {\n+            quota = pulsar().getBrokerService().getBacklogQuotaManager().getDefaultQuota();\n+        }\n+        if (quota.getLimit() >= ( retention.getRetentionSizeInMB() * 1024 * 1024)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTg2NA=="}, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUzNjQwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNToxMlrOG2MlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozODo0NVrOG2NpoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")\n          \n          \n            \n                @Path(\"/{tenant}/{namespace}/{topic}/backlogQuota\")", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459482389", "createdAt": "2020-07-23T14:15:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -977,6 +980,50 @@ public PersistentOfflineTopicStats getBacklog(\n         return internalGetBacklog(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5ODA2OA==", "bodyText": "I think it is best to keep consistent with the namespace.", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459498068", "createdAt": "2020-07-23T14:36:21Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -977,6 +980,50 @@ public PersistentOfflineTopicStats getBacklog(\n         return internalGetBacklog(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ=="}, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5OTkzNw==", "bodyText": "Ok, make sense.", "url": "https://github.com/apache/pulsar/pull/7646#discussion_r459499937", "createdAt": "2020-07-23T14:38:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -977,6 +980,50 @@ public PersistentOfflineTopicStats getBacklog(\n         return internalGetBacklog(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/backlogQuotaMap\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjM4OQ=="}, "originalCommit": {"oid": "3417f7a477ce03d934b32af0bd148f8d4ef01a11"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2326, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}