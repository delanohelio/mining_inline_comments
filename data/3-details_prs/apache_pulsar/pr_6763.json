{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDc0ODg4", "number": 6763, "title": "[docs] Fix encryption examples", "bodyText": "Motivation\nExamples for encryption were incorrect, they were a mix of Java and C++ and could not be used as is.\nModifications\nUpdate the examples code and some texts\nVerifying this change\nThis change is a trivial rework / code cleanup without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: (no)\nThe default values of configurations: (no)\nThe wire protocol: (no)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)", "createdAt": "2020-04-18T09:53:27Z", "url": "https://github.com/apache/pulsar/pull/6763", "merged": true, "mergeCommit": {"oid": "65ff6ac2ab11416840ad55349934278935cecc20"}, "closed": true, "closedAt": "2020-04-27T07:52:06Z", "author": {"login": "trexinc"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcY1g3iAFqTM5NTkxMjA1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHYxIgFqTQwMjA2MDcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTEyMDUz", "url": "https://github.com/apache/pulsar/pull/6763#pullrequestreview-395912053", "createdAt": "2020-04-18T13:01:07Z", "commit": {"oid": "1601b79cc96fa82f05ceb5aa4852cb56b7599356"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzowMTowOFrOGHq3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzowMTowOFrOGHq3xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NTYyMg==", "bodyText": "In above 2 lines SEND and DISCARD should be removed?", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r410695622", "createdAt": "2020-04-18T13:01:08Z", "author": {"login": "jiazhai"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -160,16 +165,15 @@ When producers want to encrypt the messages with multiple keys, producers add al\n If you need to encrypt the messages using 2 keys (myapp.messagekey1 and myapp.messagekey2), refer to the following example.\n \n ```java\n-conf.addEncryptionKey(\"myapp.messagekey1\");\n-conf.addEncryptionKey(\"myapp.messagekey2\");\n+PulsarClient.newProducer().addEncryptionKey(\"myapp.messagekey1\").addEncryptionKey(\"myapp.messagekey2\");\n ```\n ## Decrypt encrypted messages at the consumer application\n Consumers require access one of the private keys to decrypt messages that the producer produces. If you want to receive encrypted messages, create a public or private key and give your public key to the producer application to encrypt messages using your public key.\n \n ## Handle failures\n * Producer/ Consumer loses access to the key\n-  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call conf.setCryptoFailureAction(ProducerCryptoFailureAction) to control the producer behavior. The default behavior is to fail the request.\n-  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call conf.setCryptoFailureAction(ConsumerCryptoFailureAction) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.\n+  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call PulsarClient.newProducer().cryptoFailureAction(ProducerCryptoFailureAction.SEND) to control the producer behavior. The default behavior is to fail the request.\n+  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call PulsarClient.newConsumer().cryptoFailureAction(ConsumerCryptoFailureAction.DISCARD) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1601b79cc96fa82f05ceb5aa4852cb56b7599356"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4", "committedDate": "2020-04-18T13:44:15Z", "message": "Fix encryption examples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjMzNjU2", "url": "https://github.com/apache/pulsar/pull/6763#pullrequestreview-396233656", "createdAt": "2020-04-20T08:15:48Z", "commit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTkxMzc5", "url": "https://github.com/apache/pulsar/pull/6763#pullrequestreview-399591379", "createdAt": "2020-04-24T02:00:19Z", "commit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjowMDoxOVrOGLDHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjowMDoxOVrOGLDHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzODYwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.\n          \n          \n            \n            Pulsar generates a new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r414238608", "createdAt": "2020-04-24T02:00:19Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -144,11 +148,12 @@ for (int i = 0; i < 10; i++) {\n \n // Acknowledge the consumption of all messages at once\n consumer.acknowledgeCumulative(msg);\n+consumer.close();\n pulsarClient.close();\n ```\n \n ## Key rotation\n-Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader::getPublicKey() to retrieve the latest version.\n+Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbd260b0a288d69c93f839d3904cf0dbd1fc635d", "author": {"user": {"login": "trexinc", "name": "Alex Yaroslavsky"}}, "url": "https://github.com/apache/pulsar/commit/cbd260b0a288d69c93f839d3904cf0dbd1fc635d", "committedDate": "2020-04-24T06:04:09Z", "message": "Minor grammar fix\n\nCo-Authored-By: Yu Liu <50226895+Anonymitaet@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDYwNzA3", "url": "https://github.com/apache/pulsar/pull/6763#pullrequestreview-402060707", "createdAt": "2020-04-28T17:32:21Z", "commit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyMVrOGNfPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyMVrOGNfPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ==", "bodyText": "what will be the myappkey", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416796519", "createdAt": "2020-04-28T17:32:21Z", "author": {"login": "kjaggann"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3574, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}