{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjEyNDE1", "number": 7506, "title": "[Broker] Timeout opening managed ledger operation \u2026", "bodyText": "Motivation\nCurrently, broker has a timeout mechanism on loading topics. However, the underlying managed ledger library\ndoesn't provide a timeout mechanism. This will get into a situation that a TopicLoad operation times out\nafter 30 seconds. But the CompletableFuture of opening a managed ledger is still kept in the cache of managed ledger\nfactory. The completable future will never return. So any sub-sequent topic lookups will fail because any\nattempts to load a topic will never attempt to re-open a managed ledger.\nModification\nIntroduce a timeout mechanism in the managed ledger factory. If a managed ledger is not open within a given timeout\nperiod, the CompletableFuture will be removed. This allows any subsequent attempts to load topics that can try to\nopen the managed ledger again.\nTests\nThis problem can be constantly reproduced in a chaos test in Kubernetes by killing k8s worker nodes. It can cause\nproducer stuck forever until the owner broker pod is restarted. The change has been verified in a chaos testing environment.", "createdAt": "2020-07-10T19:39:54Z", "url": "https://github.com/apache/pulsar/pull/7506", "merged": true, "mergeCommit": {"oid": "14e3b7ae05e84ca13eefa16026288a384a961e45"}, "closed": true, "closedAt": "2020-07-16T13:20:17Z", "author": {"login": "sijie"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczonpwAH2gAyNDQ3NjEyNDE1OjA3OTBkZTRkMWZhMGIwMWE2NmNlM2M1NWFhY2NjODY3YTMxYjk0OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcztYicgFqTQ0Njc2MjE0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0790de4d1fa0b01a66ce3c55aaccc867a31b9499", "author": {"user": {"login": "sijie", "name": "Sijie Guo"}}, "url": "https://github.com/apache/pulsar/commit/0790de4d1fa0b01a66ce3c55aaccc867a31b9499", "committedDate": "2020-07-10T19:15:44Z", "message": "[Broker] Timeout opening managed ledger operation\n\n*Motivation*\n\nCurrently broker has a timeout mechanism on loading topics. However the underlying managed ledger library\ndoesn't provide a timeout mechanism. This will get into a situation that: A TopicLoad operation times out\nafter 30 seconds. But the CompletableFuture of opening a managed ledger is still kept in the cache of managed ledger\nfactory. The completable future will never returns. So any sub-sequent topic lookups will fail because any\nattempts to load a topic will never attempt to re-open a managed ledger.\n\n*Modification*\n\nIntroduce a timeout mechanism in managed ledger factory. If a managed ledger is not open within a given timeout\nperiod, the CompletableFuture will be removed. This allows any sub-sequent attempts to load topics can try to\nopen the managed ledger again.\n\n*Tests*\n\nThis problem can be constantly reproduced in a chaos test in kubernetes by killing k8s worker nodes. It can cause\nproducer stuck forever until the owner broker pod is restarted. The change has been verified in a chaos testing environment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "298bee79b3ff92037ae69977ca764ab7b2576c4d", "author": {"user": {"login": "sijie", "name": "Sijie Guo"}}, "url": "https://github.com/apache/pulsar/commit/298bee79b3ff92037ae69977ca764ab7b2576c4d", "committedDate": "2020-07-10T19:38:14Z", "message": "Remove redundant imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjkxMDU4", "url": "https://github.com/apache/pulsar/pull/7506#pullrequestreview-446691058", "createdAt": "2020-07-10T20:46:13Z", "commit": {"oid": "298bee79b3ff92037ae69977ca764ab7b2576c4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0NjoxNFrOGwFJ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0NjoxNFrOGwFJ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2OTI5Nw==", "bodyText": "As opposed to requiring another call to check if the timeout has elapsed, would it make sense to instead use a CompletableFuture with a timeout? Much like we do in the BrokerService, the future created on line 370 could instead be made to have a timeout if it isn't resolved in so many milliseconds with the error handler remove the future from the cache of futures.", "url": "https://github.com/apache/pulsar/pull/7506#discussion_r453069297", "createdAt": "2020-07-10T20:46:14Z", "author": {"login": "addisonj"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerFactoryImpl.java", "diffHunk": "@@ -320,18 +335,32 @@ public void asyncOpen(final String name, final ManagedLedgerConfig config, final\n \n         // If the ledger state is bad, remove it from the map.\n         CompletableFuture<ManagedLedgerImpl> existingFuture = ledgers.get(name);\n-        if (existingFuture != null && existingFuture.isDone()) {\n-            try {\n-                ManagedLedgerImpl l = existingFuture.get();\n-                if (l.getState().equals(State.Fenced.toString()) || l.getState().equals(State.Closed.toString())) {\n-                    // Managed ledger is in unusable state. Recreate it.\n-                    log.warn(\"[{}] Attempted to open ledger in {} state. Removing from the map to recreate it\", name,\n+        if (existingFuture != null) {\n+            if (existingFuture.isDone()) {\n+                try {\n+                    ManagedLedgerImpl l = existingFuture.get();\n+                    if (l.getState().equals(State.Fenced.toString()) || l.getState().equals(State.Closed.toString())) {\n+                        // Managed ledger is in unusable state. Recreate it.\n+                        log.warn(\"[{}] Attempted to open ledger in {} state. Removing from the map to recreate it\", name,\n                             l.getState());\n-                    ledgers.remove(name, existingFuture);\n+                        ledgers.remove(name, existingFuture);\n+                    }\n+                } catch (Exception e) {\n+                    // Unable to get the future\n+                    log.warn(\"[{}] Got exception while trying to retrieve ledger\", name, e);\n                 }\n-            } catch (Exception e) {\n-                // Unable to get the future\n-                log.warn(\"[{}] Got exception while trying to retrieve ledger\", name, e);\n+            } else {\n+                PendingInitializeManagedLedger pendingLedger = pendingInitializeLedgers.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "298bee79b3ff92037ae69977ca764ab7b2576c4d"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzE4OTI5", "url": "https://github.com/apache/pulsar/pull/7506#pullrequestreview-446718929", "createdAt": "2020-07-10T21:49:12Z", "commit": {"oid": "298bee79b3ff92037ae69977ca764ab7b2576c4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzYyMTQ1", "url": "https://github.com/apache/pulsar/pull/7506#pullrequestreview-446762145", "createdAt": "2020-07-11T00:48:45Z", "commit": {"oid": "298bee79b3ff92037ae69977ca764ab7b2576c4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 573, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}