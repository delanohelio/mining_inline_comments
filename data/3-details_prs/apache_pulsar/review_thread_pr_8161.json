{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0ODczMDE4", "number": 8161, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozMDo1NlrOEsWsCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NDoyMlrOEtSwvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ0NTIwOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozMDo1NlrOHflPlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozMDo1NlrOHflPlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODEwMg==", "bodyText": "The transaction message is a couple of batch messages, make sure can handle this well, @gaoran10 Please help double-check.", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878102", "createdAt": "2020-10-11T07:30:56Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -2343,6 +2361,102 @@ private void removeChunkMessage(String msgUUID, ChunkedMessageCtx chunkedMsgCtx,\n         pendingChunckedMessageCount--;\n     }\n \n+    private CompletableFuture<Void> doAcknowledgeForResponse(MessageId messageId, AckType ackType,\n+                                                             ValidationError validationError,\n+                                                             Map<String, Long> properties, TxnID txnID) {\n+        CompletableFuture<Void> callBack = new CompletableFuture<>();\n+        BitSetRecyclable bitSetRecyclable = null;\n+        long ledgerId;\n+        long entryId;\n+        if (messageId instanceof BatchMessageIdImpl) {\n+            BatchMessageIdImpl batchMessageId = (BatchMessageIdImpl) messageId;\n+            bitSetRecyclable = BitSetRecyclable.create();\n+            ledgerId = batchMessageId.getLedgerId();\n+            entryId = batchMessageId.getEntryId();\n+            if (ackType == AckType.Cumulative) {\n+                batchMessageId.ackCumulative();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ0NTQ0OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozMToxN1rOHflPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozMToxN1rOHflPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODEzMA==", "bodyText": "Same as above comment.", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878130", "createdAt": "2020-10-11T07:31:17Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -2343,6 +2361,102 @@ private void removeChunkMessage(String msgUUID, ChunkedMessageCtx chunkedMsgCtx,\n         pendingChunckedMessageCount--;\n     }\n \n+    private CompletableFuture<Void> doAcknowledgeForResponse(MessageId messageId, AckType ackType,\n+                                                             ValidationError validationError,\n+                                                             Map<String, Long> properties, TxnID txnID) {\n+        CompletableFuture<Void> callBack = new CompletableFuture<>();\n+        BitSetRecyclable bitSetRecyclable = null;\n+        long ledgerId;\n+        long entryId;\n+        if (messageId instanceof BatchMessageIdImpl) {\n+            BatchMessageIdImpl batchMessageId = (BatchMessageIdImpl) messageId;\n+            bitSetRecyclable = BitSetRecyclable.create();\n+            ledgerId = batchMessageId.getLedgerId();\n+            entryId = batchMessageId.getEntryId();\n+            if (ackType == AckType.Cumulative) {\n+                batchMessageId.ackCumulative();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());\n+                bitSetRecyclable.clear(0, batchMessageId.getBatchIndex() + 1);\n+            } else {\n+                batchMessageId.ackIndividual();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ0NzUwOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozNDoyNVrOHflQzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozNDoyNVrOHflQzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODQxNQ==", "bodyText": "The TransactionConflictException does not make sense here. It's better to add a MessageAcknowledgeException.", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878415", "createdAt": "2020-10-11T07:34:25Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -1037,6 +1049,12 @@ private void closeConsumerTasks() {\n             possibleSendToDeadLetterTopicMessages.clear();\n         }\n \n+        if (!ackRequests.isEmpty()) {\n+            ackRequests.forEach((key, value) -> value.callback\n+                    .completeExceptionally(new TransactionConflictException(\"Consumer has closed!\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ0OTcwOnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozNzoxMlrOHflR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozNzoxMlrOHflR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODY4Ng==", "bodyText": "Use info log level here", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878686", "createdAt": "2020-10-11T07:37:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -2343,6 +2361,102 @@ private void removeChunkMessage(String msgUUID, ChunkedMessageCtx chunkedMsgCtx,\n         pendingChunckedMessageCount--;\n     }\n \n+    private CompletableFuture<Void> doAcknowledgeForResponse(MessageId messageId, AckType ackType,\n+                                                             ValidationError validationError,\n+                                                             Map<String, Long> properties, TxnID txnID) {\n+        CompletableFuture<Void> callBack = new CompletableFuture<>();\n+        BitSetRecyclable bitSetRecyclable = null;\n+        long ledgerId;\n+        long entryId;\n+        if (messageId instanceof BatchMessageIdImpl) {\n+            BatchMessageIdImpl batchMessageId = (BatchMessageIdImpl) messageId;\n+            bitSetRecyclable = BitSetRecyclable.create();\n+            ledgerId = batchMessageId.getLedgerId();\n+            entryId = batchMessageId.getEntryId();\n+            if (ackType == AckType.Cumulative) {\n+                batchMessageId.ackCumulative();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());\n+                bitSetRecyclable.clear(0, batchMessageId.getBatchIndex() + 1);\n+            } else {\n+                batchMessageId.ackIndividual();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());\n+                bitSetRecyclable.clear(batchMessageId.getBatchIndex());\n+            }\n+        } else {\n+            MessageIdImpl singleMessage = (MessageIdImpl) messageId;\n+            ledgerId = singleMessage.getLedgerId();\n+            entryId = singleMessage.getEntryId();\n+        }\n+        long requestId = client.newRequestId();\n+        ByteBuf cmd = Commands.newAck(consumerId, ledgerId, entryId,\n+                bitSetRecyclable, ackType,\n+                validationError, properties, txnID.getLeastSigBits(), txnID.getMostSigBits(), requestId);\n+        OpForAckCallBack op = OpForAckCallBack.create(cmd, callBack, messageId,\n+                new TxnID(txnID.getMostSigBits(), txnID.getLeastSigBits()));\n+        ackRequests.put(requestId, op);\n+        unAckedMessageTracker.remove(messageId);\n+        cmd.retain();\n+        cnx().ctx().writeAndFlush(cmd, cnx().ctx().voidPromise());\n+        return callBack;\n+    }\n+\n+    protected void ackResponse(CommandAckResponse ackResponse) {\n+        checkArgument(ackResponse.getRequestId() >= 0);\n+        OpForAckCallBack callBackOp = ackRequests.remove(ackResponse.getRequestId());\n+        if (callBackOp == null || callBackOp.callback.isDone()) {\n+            log.error(\"Ack request has been handled requestId : {}\", ackResponse.getRequestId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ1MTE5OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozOToxMlrOHflSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzozOToxMlrOHflSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODg2Mw==", "bodyText": "We should get the specific exception from the serverError, should not be throw TransactionConflictException for all errors.", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878863", "createdAt": "2020-10-11T07:39:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java", "diffHunk": "@@ -2343,6 +2361,102 @@ private void removeChunkMessage(String msgUUID, ChunkedMessageCtx chunkedMsgCtx,\n         pendingChunckedMessageCount--;\n     }\n \n+    private CompletableFuture<Void> doAcknowledgeForResponse(MessageId messageId, AckType ackType,\n+                                                             ValidationError validationError,\n+                                                             Map<String, Long> properties, TxnID txnID) {\n+        CompletableFuture<Void> callBack = new CompletableFuture<>();\n+        BitSetRecyclable bitSetRecyclable = null;\n+        long ledgerId;\n+        long entryId;\n+        if (messageId instanceof BatchMessageIdImpl) {\n+            BatchMessageIdImpl batchMessageId = (BatchMessageIdImpl) messageId;\n+            bitSetRecyclable = BitSetRecyclable.create();\n+            ledgerId = batchMessageId.getLedgerId();\n+            entryId = batchMessageId.getEntryId();\n+            if (ackType == AckType.Cumulative) {\n+                batchMessageId.ackCumulative();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());\n+                bitSetRecyclable.clear(0, batchMessageId.getBatchIndex() + 1);\n+            } else {\n+                batchMessageId.ackIndividual();\n+                bitSetRecyclable.set(0, batchMessageId.getAcker().getBatchSize());\n+                bitSetRecyclable.clear(batchMessageId.getBatchIndex());\n+            }\n+        } else {\n+            MessageIdImpl singleMessage = (MessageIdImpl) messageId;\n+            ledgerId = singleMessage.getLedgerId();\n+            entryId = singleMessage.getEntryId();\n+        }\n+        long requestId = client.newRequestId();\n+        ByteBuf cmd = Commands.newAck(consumerId, ledgerId, entryId,\n+                bitSetRecyclable, ackType,\n+                validationError, properties, txnID.getLeastSigBits(), txnID.getMostSigBits(), requestId);\n+        OpForAckCallBack op = OpForAckCallBack.create(cmd, callBack, messageId,\n+                new TxnID(txnID.getMostSigBits(), txnID.getLeastSigBits()));\n+        ackRequests.put(requestId, op);\n+        unAckedMessageTracker.remove(messageId);\n+        cmd.retain();\n+        cnx().ctx().writeAndFlush(cmd, cnx().ctx().voidPromise());\n+        return callBack;\n+    }\n+\n+    protected void ackResponse(CommandAckResponse ackResponse) {\n+        checkArgument(ackResponse.getRequestId() >= 0);\n+        OpForAckCallBack callBackOp = ackRequests.remove(ackResponse.getRequestId());\n+        if (callBackOp == null || callBackOp.callback.isDone()) {\n+            log.error(\"Ack request has been handled requestId : {}\", ackResponse.getRequestId());\n+        } else if (!ackResponse.hasError()) {\n+            callBackOp.callback.complete(null);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"MessageId : {} has ack by TxnId : {}\", callBackOp.messageId.getLedgerId() + \":\"\n+                        + callBackOp.messageId.getEntryId(), callBackOp.txnID.toString());\n+            }\n+            callBackOp.recycle();\n+        } else {\n+            callBackOp.callback.completeExceptionally(new TransactionConflictException(ackResponse.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ1MjM0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ConsumerAckResponseTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzo0MDoxNFrOHflTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzo0MDoxNFrOHflTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3ODk5Nw==", "bodyText": "Avoid use import .*", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502878997", "createdAt": "2020-10-11T07:40:14Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ConsumerAckResponseTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl;\n+\n+import lombok.Cleanup;\n+\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.ProducerConsumerBase;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.transaction.TransactionImpl;\n+\n+import org.apache.pulsar.transaction.common.exception.TransactionConflictException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ1NDkxOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ConsumerAckResponseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzo0MzozNFrOHflUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMTo1MTo1MlrOHfm6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3OTMyNw==", "bodyText": "Why message id (1,1,1) conflict?", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502879327", "createdAt": "2020-10-11T07:43:34Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ConsumerAckResponseTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl;\n+\n+import lombok.Cleanup;\n+\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.ProducerConsumerBase;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.transaction.TransactionImpl;\n+\n+import org.apache.pulsar.transaction.common.exception.TransactionConflictException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class ConsumerAckResponseTest extends ProducerConsumerBase {\n+\n+    private final static TransactionImpl transaction = mock(TransactionImpl.class);\n+\n+    @BeforeClass\n+    public void setup() throws Exception {\n+        super.internalSetup();\n+        super.producerBaseSetup();\n+        doReturn(1L).when(transaction).getTxnIdLeastBits();\n+        doReturn(1L).when(transaction).getTxnIdMostBits();\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+        doReturn(completableFuture).when(transaction).registerAckOp(any());\n+        doNothing().when(transaction).registerAckedTopic(any(), any());\n+\n+        Thread.sleep(1000 * 3);\n+    }\n+\n+    @AfterClass\n+    public void cleanup() throws Exception {\n+        super.internalCleanup();\n+    }\n+\n+    @Test\n+    public void testAckResponse() throws PulsarClientException, InterruptedException, ExecutionException {\n+        String topic = \"testAckResponse\";\n+        @Cleanup\n+        Producer<Integer> producer = pulsarClient.newProducer(Schema.INT32)\n+                .topic(topic)\n+                .enableBatching(false)\n+                .create();\n+        @Cleanup\n+        ConsumerImpl<Integer> consumer = (ConsumerImpl<Integer>) pulsarClient.newConsumer(Schema.INT32)\n+                .topic(topic)\n+                .subscriptionName(\"sub\")\n+                .subscriptionType(SubscriptionType.Shared)\n+                .ackTimeout(1, TimeUnit.SECONDS)\n+                .subscribe();\n+        producer.send(1);\n+        producer.send(2);\n+        try {\n+            consumer.acknowledgeAsync(new MessageIdImpl(1, 1, 1), transaction).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            Assert.assertTrue(e.getCause() instanceof TransactionConflictException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkwNTM3MA==", "bodyText": "ledgerId start with 3.", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r502905370", "createdAt": "2020-10-11T11:51:52Z", "author": {"login": "congbobo184"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ConsumerAckResponseTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl;\n+\n+import lombok.Cleanup;\n+\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.ProducerConsumerBase;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.impl.transaction.TransactionImpl;\n+\n+import org.apache.pulsar.transaction.common.exception.TransactionConflictException;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class ConsumerAckResponseTest extends ProducerConsumerBase {\n+\n+    private final static TransactionImpl transaction = mock(TransactionImpl.class);\n+\n+    @BeforeClass\n+    public void setup() throws Exception {\n+        super.internalSetup();\n+        super.producerBaseSetup();\n+        doReturn(1L).when(transaction).getTxnIdLeastBits();\n+        doReturn(1L).when(transaction).getTxnIdMostBits();\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+        doReturn(completableFuture).when(transaction).registerAckOp(any());\n+        doNothing().when(transaction).registerAckedTopic(any(), any());\n+\n+        Thread.sleep(1000 * 3);\n+    }\n+\n+    @AfterClass\n+    public void cleanup() throws Exception {\n+        super.internalCleanup();\n+    }\n+\n+    @Test\n+    public void testAckResponse() throws PulsarClientException, InterruptedException, ExecutionException {\n+        String topic = \"testAckResponse\";\n+        @Cleanup\n+        Producer<Integer> producer = pulsarClient.newProducer(Schema.INT32)\n+                .topic(topic)\n+                .enableBatching(false)\n+                .create();\n+        @Cleanup\n+        ConsumerImpl<Integer> consumer = (ConsumerImpl<Integer>) pulsarClient.newConsumer(Schema.INT32)\n+                .topic(topic)\n+                .subscriptionName(\"sub\")\n+                .subscriptionType(SubscriptionType.Shared)\n+                .ackTimeout(1, TimeUnit.SECONDS)\n+                .subscribe();\n+        producer.send(1);\n+        producer.send(2);\n+        try {\n+            consumer.acknowledgeAsync(new MessageIdImpl(1, 1, 1), transaction).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            Assert.assertTrue(e.getCause() instanceof TransactionConflictException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3OTMyNw=="}, "originalCommit": {"oid": "a448ac532e20aba24c6f3f5a875b4eb5ba23b43c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI4NzY0OnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/proto/PulsarApi.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NDoyMlrOHhAIZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NDoyMlrOHhAIZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NzIwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TransactionConflictException = 23; // Ack with transaction conflict\n          \n          \n            \n                TransactionConflict = 23; // Transaction conflict", "url": "https://github.com/apache/pulsar/pull/8161#discussion_r504367205", "createdAt": "2020-10-14T02:44:22Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -201,6 +201,8 @@ enum ServerError {\n     TransactionCoordinatorNotFound = 20; // Transaction coordinator not found error\n     InvalidTxnStatus = 21; // Invalid txn status error\n     NotAllowedError = 22; // Not allowed error\n+\n+    TransactionConflictException = 23; // Ack with transaction conflict", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec29a62db1f826d82d0e4338bb8f4938a4809f56"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2124, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}