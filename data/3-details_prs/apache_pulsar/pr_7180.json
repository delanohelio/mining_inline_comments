{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjU4OTE4", "number": 7180, "title": "FunctionAssignmentTailer should use its own thread", "bodyText": "Motivation\nCurrently, the FunctionAssignmentTailer reads assignments and processes them using the pulsar-external-listener thread part of the pulsar-client. Processing assignments may take a \"long\" time and should not block pulsar-external-listener. Thus, FunctionAssignmentTailer should use its own thread for reading and processing assignments.", "createdAt": "2020-06-05T06:54:17Z", "url": "https://github.com/apache/pulsar/pull/7180", "merged": true, "mergeCommit": {"oid": "eaf828d2243ce09f2e04a0eea2802214b593dabc"}, "closed": true, "closedAt": "2020-06-06T00:51:00Z", "author": {"login": "jerrypeng"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoM-dQAH2gAyNDI4MjU4OTE4OjEyZTAwOWExN2UzNGU2MmVlZTY1ZmY5M2FkOTUyYWVhY2U4YWQyNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoZ9DdAH2gAyNDI4MjU4OTE4OjQyZmNkOTNiZTQzNGY5Mzc0NDVmMzk4YTE0NjNlNWQwODkxYmI0NWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12e009a17e34e62eee65ff93ad952aeace8ad262", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/12e009a17e34e62eee65ff93ad952aeace8ad262", "committedDate": "2020-06-05T06:50:08Z", "message": "FunctionAssignmentTailer should use its own thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e3c78a0c63c6cc3a0ae564a503a237b7d87c54", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/a1e3c78a0c63c6cc3a0ae564a503a237b7d87c54", "committedDate": "2020-06-05T06:53:40Z", "message": "cleaning up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dccf0f8773c203a0c7624ad670e327aacae1cf1b", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/dccf0f8773c203a0c7624ad670e327aacae1cf1b", "committedDate": "2020-06-05T06:55:30Z", "message": "renaming varible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/58a424a7aaae09b5481e05e3bcf2b76332ba244b", "committedDate": "2020-06-05T06:56:51Z", "message": "cleaning up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDU5NjA3", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425059607", "createdAt": "2020-06-05T07:31:57Z", "commit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMTo1N1rOGfjcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMTo1N1rOGfjcvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczOTgzOA==", "bodyText": "reader is still not closed here", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435739838", "createdAt": "2020-06-05T07:31:57Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {\n+                try {\n+                    while(isRunning) {\n+                        Message<byte[]> msg = reader.readNext();\n+                        processAssignment(msg);\n+                    }\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n+        if (!isRunning) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDYwNDY3", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425060467", "createdAt": "2020-06-05T07:33:19Z", "commit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzoxOVrOGfjfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzoxOVrOGfjfYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDUxNQ==", "bodyText": "probably should wait as well?", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435740515", "createdAt": "2020-06-05T07:33:19Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {\n+                try {\n+                    while(isRunning) {\n+                        Message<byte[]> msg = reader.readNext();\n+                        processAssignment(msg);\n+                    }\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n+        if (!isRunning) {\n             return;\n         }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDYyNDI2", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425062426", "createdAt": "2020-06-05T07:36:32Z", "commit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozNjozMlrOGfjlKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozNjozMlrOGfjlKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MTk5Mg==", "bodyText": "instead of two while loop, maybe you can do\nwhile(isRunning) {\ntry { readNext(); processAssignment(); } catch (Exeepton e) { see what kind of exception", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r435741992", "createdAt": "2020-06-05T07:36:32Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,90 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a424a7aaae09b5481e05e3bcf2b76332ba244b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc6eec2a5e1258bf4e91c1525f41425c18dca8c", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/7fc6eec2a5e1258bf4e91c1525f41425c18dca8c", "committedDate": "2020-06-05T17:05:18Z", "message": "addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDc3MjEy", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425477212", "createdAt": "2020-06-05T17:10:09Z", "commit": {"oid": "7fc6eec2a5e1258bf4e91c1525f41425c18dca8c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoxMDoxMFrOGf2hXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoxMDoxMFrOGf2hXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MjMxNw==", "bodyText": "instead of isRunning, better to word it as stopRunning", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436052317", "createdAt": "2020-06-05T17:10:10Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,91 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc6eec2a5e1258bf4e91c1525f41425c18dca8c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/48c401c26ab8051f92f70c8e4df4ae48b9e36612", "committedDate": "2020-06-05T17:47:33Z", "message": "addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTEwMDc5", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425510079", "createdAt": "2020-06-05T17:59:57Z", "commit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1OTo1N1rOGf4F3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1OTo1N1rOGf4F3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODA0Ng==", "bodyText": "should make it null here.", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436078046", "createdAt": "2020-06-05T17:59:57Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,85 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext();\n+                    processAssignment(msg);\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n-            return;\n-        }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();\n+            }\n+            if (reader != null) {\n+                reader.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTEwNjk0", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425510694", "createdAt": "2020-06-05T18:00:55Z", "commit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowMDo1NVrOGf4HuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowMDo1NVrOGf4HuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODUyMA==", "bodyText": "also one benefit of doing a join here would be that once the thread is done, we can make it null again.\nThis way we could actually do a start/close multiple times.", "url": "https://github.com/apache/pulsar/pull/7180#discussion_r436078520", "createdAt": "2020-06-05T18:00:55Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailer.java", "diffHunk": "@@ -18,56 +18,85 @@\n  */\n package org.apache.pulsar.functions.worker;\n \n-import java.io.IOException;\n-import java.util.function.Function;\n-\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.pulsar.client.api.Message;\n-import org.apache.pulsar.client.api.PulsarClientException.AlreadyClosedException;\n+import org.apache.pulsar.client.api.MessageId;\n+import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Reader;\n-import org.apache.pulsar.common.util.FutureUtil;\n+import org.apache.pulsar.client.api.ReaderBuilder;\n import org.apache.pulsar.functions.proto.Function.Assignment;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.io.IOException;\n \n @Slf4j\n-public class FunctionAssignmentTailer\n-    implements java.util.function.Consumer<Message<byte[]>>, Function<Throwable, Void>, AutoCloseable {\n+public class FunctionAssignmentTailer implements AutoCloseable {\n \n     private final FunctionRuntimeManager functionRuntimeManager;\n+    @Getter\n     private final Reader<byte[]> reader;\n-    private boolean closed = false;\n+    private volatile boolean isRunning = false;\n \n-    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, Reader<byte[]> reader) {\n+    private final Thread tailerThread;\n+    \n+    public FunctionAssignmentTailer(FunctionRuntimeManager functionRuntimeManager, ReaderBuilder readerBuilder, WorkerConfig workerConfig) throws PulsarClientException {\n         this.functionRuntimeManager = functionRuntimeManager;\n-        this.reader = reader;\n-    }\n+        \n+        this.reader = readerBuilder\n+          .subscriptionRolePrefix(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .readerName(workerConfig.getWorkerId() + \"-function-runtime-manager\")\n+          .topic(workerConfig.getFunctionAssignmentTopic())\n+          .readCompacted(true)\n+          .startMessageId(MessageId.earliest)\n+          .create();\n \n-    public void start() {\n-        receiveOne();\n+        this.tailerThread = new Thread(() -> {\n+            while(isRunning) {\n+                try {\n+                    Message<byte[]> msg = reader.readNext();\n+                    processAssignment(msg);\n+                } catch (Exception e) {\n+                    if (isRunning) {\n+                        log.error(\"Encountered error in assignment tailer\", e);\n+\n+                        // trigger fatal error\n+                        // TODO add mechanism to notify main thread\n+                    } else {\n+                        if (!(e instanceof InterruptedException)) {\n+                            log.warn(\"Encountered error when assignment tailer is not running\", e);\n+                        }\n+                    }\n+\n+                }\n+            }\n+        });\n+        this.tailerThread.setName(\"assignment-tailer-thread\");\n     }\n \n-    private void receiveOne() {\n-        reader.readNextAsync()\n-                .thenAccept(this)\n-                .exceptionally(this);\n+    public void start() {\n+        isRunning = true;\n+        tailerThread.start();\n     }\n \n     @Override\n     public void close() {\n-        if (closed) {\n-            return;\n-        }\n-        log.info(\"Stopping function state consumer\");\n+        log.info(\"Stopping function assignment tailer\");\n         try {\n-            closed = true;\n-            reader.close();\n+            isRunning = false;\n+            if (tailerThread != null && tailerThread.isAlive()) {\n+                tailerThread.interrupt();\n+            }\n+            if (reader != null) {\n+                reader.close();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjIyNTYw", "url": "https://github.com/apache/pulsar/pull/7180#pullrequestreview-425622560", "createdAt": "2020-06-05T21:00:13Z", "commit": {"oid": "48c401c26ab8051f92f70c8e4df4ae48b9e36612"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42fcd93be434f937445f398a1463e5d0891bb45c", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/42fcd93be434f937445f398a1463e5d0891bb45c", "committedDate": "2020-06-05T21:57:22Z", "message": "fix unit test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2777, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}