{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzAwNzU3", "number": 6812, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoyMzozOVrOD1lVbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoyMzozOVrOD1lVbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTEyODE0OnYy", "diffSide": "RIGHT", "path": "pulsar-client-cpp/tests/BatchMessageTest.cc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoyMzozOVrOGLFxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1MzowNFrOGLgjsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjE4Mg==", "bodyText": "There's no hard guarantee that this callback will be executed before the receive loop is done.", "url": "https://github.com/apache/pulsar/pull/6812#discussion_r414282182", "createdAt": "2020-04-24T04:23:39Z", "author": {"login": "merlimat"}, "path": "pulsar-client-cpp/tests/BatchMessageTest.cc", "diffHunk": "@@ -982,4 +982,48 @@ TEST(BatchMessageTest, testPraseMessageBatchEntry) {\n         ASSERT_EQ(message.getDataAsString(), expected.content);\n         ASSERT_EQ(message.getProperty(expected.propKey), expected.propValue);\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+TEST(BatchMessageTest, testSendCallback) {\n+    const std::string topicName = \"persistent://public/default/BasicMessageTest-testSendCallback\";\n+\n+    Client client(lookupUrl);\n+\n+    constexpr int numMessagesOfBatch = 3;\n+\n+    ProducerConfiguration producerConfig;\n+    producerConfig.setBatchingEnabled(5);\n+    producerConfig.setBatchingMaxMessages(numMessagesOfBatch);\n+    producerConfig.setBatchingMaxPublishDelayMs(1000);  // 1 s, it's long enough for 3 messages batched\n+    producerConfig.setMaxPendingMessages(numMessagesOfBatch);\n+\n+    Producer producer;\n+    ASSERT_EQ(ResultOk, client.createProducer(topicName, producerConfig, producer));\n+\n+    Consumer consumer;\n+    ASSERT_EQ(ResultOk, client.subscribe(topicName, \"SubscriptionName\", consumer));\n+\n+    std::set<MessageId> sentIdSet;\n+    for (int i = 0; i < numMessagesOfBatch; i++) {\n+        const auto msg = MessageBuilder().setContent(\"a\").build();\n+        producer.sendAsync(msg, [&sentIdSet, i](Result result, const MessageId& id) {\n+            ASSERT_EQ(ResultOk, result);\n+            ASSERT_EQ(i, id.batchIndex());\n+            sentIdSet.emplace(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b710b985a469343501db8d019d910a1041974dc2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwMDEyOQ==", "bodyText": "Thank you for pointing out this! I missed the point that the SendReceipt to producer is not guaranteed to be completed before the consumer's receive() done. I'll do some work on it.", "url": "https://github.com/apache/pulsar/pull/6812#discussion_r414700129", "createdAt": "2020-04-24T16:19:53Z", "author": {"login": "BewareMyPower"}, "path": "pulsar-client-cpp/tests/BatchMessageTest.cc", "diffHunk": "@@ -982,4 +982,48 @@ TEST(BatchMessageTest, testPraseMessageBatchEntry) {\n         ASSERT_EQ(message.getDataAsString(), expected.content);\n         ASSERT_EQ(message.getProperty(expected.propKey), expected.propValue);\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+TEST(BatchMessageTest, testSendCallback) {\n+    const std::string topicName = \"persistent://public/default/BasicMessageTest-testSendCallback\";\n+\n+    Client client(lookupUrl);\n+\n+    constexpr int numMessagesOfBatch = 3;\n+\n+    ProducerConfiguration producerConfig;\n+    producerConfig.setBatchingEnabled(5);\n+    producerConfig.setBatchingMaxMessages(numMessagesOfBatch);\n+    producerConfig.setBatchingMaxPublishDelayMs(1000);  // 1 s, it's long enough for 3 messages batched\n+    producerConfig.setMaxPendingMessages(numMessagesOfBatch);\n+\n+    Producer producer;\n+    ASSERT_EQ(ResultOk, client.createProducer(topicName, producerConfig, producer));\n+\n+    Consumer consumer;\n+    ASSERT_EQ(ResultOk, client.subscribe(topicName, \"SubscriptionName\", consumer));\n+\n+    std::set<MessageId> sentIdSet;\n+    for (int i = 0; i < numMessagesOfBatch; i++) {\n+        const auto msg = MessageBuilder().setContent(\"a\").build();\n+        producer.sendAsync(msg, [&sentIdSet, i](Result result, const MessageId& id) {\n+            ASSERT_EQ(ResultOk, result);\n+            ASSERT_EQ(i, id.batchIndex());\n+            sentIdSet.emplace(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjE4Mg=="}, "originalCommit": {"oid": "b710b985a469343501db8d019d910a1041974dc2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxMjkyMQ==", "bodyText": "There is a Latch class in lib/ that might be helpful here.", "url": "https://github.com/apache/pulsar/pull/6812#discussion_r414712921", "createdAt": "2020-04-24T16:40:05Z", "author": {"login": "merlimat"}, "path": "pulsar-client-cpp/tests/BatchMessageTest.cc", "diffHunk": "@@ -982,4 +982,48 @@ TEST(BatchMessageTest, testPraseMessageBatchEntry) {\n         ASSERT_EQ(message.getDataAsString(), expected.content);\n         ASSERT_EQ(message.getProperty(expected.propKey), expected.propValue);\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+TEST(BatchMessageTest, testSendCallback) {\n+    const std::string topicName = \"persistent://public/default/BasicMessageTest-testSendCallback\";\n+\n+    Client client(lookupUrl);\n+\n+    constexpr int numMessagesOfBatch = 3;\n+\n+    ProducerConfiguration producerConfig;\n+    producerConfig.setBatchingEnabled(5);\n+    producerConfig.setBatchingMaxMessages(numMessagesOfBatch);\n+    producerConfig.setBatchingMaxPublishDelayMs(1000);  // 1 s, it's long enough for 3 messages batched\n+    producerConfig.setMaxPendingMessages(numMessagesOfBatch);\n+\n+    Producer producer;\n+    ASSERT_EQ(ResultOk, client.createProducer(topicName, producerConfig, producer));\n+\n+    Consumer consumer;\n+    ASSERT_EQ(ResultOk, client.subscribe(topicName, \"SubscriptionName\", consumer));\n+\n+    std::set<MessageId> sentIdSet;\n+    for (int i = 0; i < numMessagesOfBatch; i++) {\n+        const auto msg = MessageBuilder().setContent(\"a\").build();\n+        producer.sendAsync(msg, [&sentIdSet, i](Result result, const MessageId& id) {\n+            ASSERT_EQ(ResultOk, result);\n+            ASSERT_EQ(i, id.batchIndex());\n+            sentIdSet.emplace(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjE4Mg=="}, "originalCommit": {"oid": "b710b985a469343501db8d019d910a1041974dc2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMDk0Nw==", "bodyText": "Thanks! I found the Latch just now :)", "url": "https://github.com/apache/pulsar/pull/6812#discussion_r414720947", "createdAt": "2020-04-24T16:53:04Z", "author": {"login": "BewareMyPower"}, "path": "pulsar-client-cpp/tests/BatchMessageTest.cc", "diffHunk": "@@ -982,4 +982,48 @@ TEST(BatchMessageTest, testPraseMessageBatchEntry) {\n         ASSERT_EQ(message.getDataAsString(), expected.content);\n         ASSERT_EQ(message.getProperty(expected.propKey), expected.propValue);\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+TEST(BatchMessageTest, testSendCallback) {\n+    const std::string topicName = \"persistent://public/default/BasicMessageTest-testSendCallback\";\n+\n+    Client client(lookupUrl);\n+\n+    constexpr int numMessagesOfBatch = 3;\n+\n+    ProducerConfiguration producerConfig;\n+    producerConfig.setBatchingEnabled(5);\n+    producerConfig.setBatchingMaxMessages(numMessagesOfBatch);\n+    producerConfig.setBatchingMaxPublishDelayMs(1000);  // 1 s, it's long enough for 3 messages batched\n+    producerConfig.setMaxPendingMessages(numMessagesOfBatch);\n+\n+    Producer producer;\n+    ASSERT_EQ(ResultOk, client.createProducer(topicName, producerConfig, producer));\n+\n+    Consumer consumer;\n+    ASSERT_EQ(ResultOk, client.subscribe(topicName, \"SubscriptionName\", consumer));\n+\n+    std::set<MessageId> sentIdSet;\n+    for (int i = 0; i < numMessagesOfBatch; i++) {\n+        const auto msg = MessageBuilder().setContent(\"a\").build();\n+        producer.sendAsync(msg, [&sentIdSet, i](Result result, const MessageId& id) {\n+            ASSERT_EQ(ResultOk, result);\n+            ASSERT_EQ(i, id.batchIndex());\n+            sentIdSet.emplace(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjE4Mg=="}, "originalCommit": {"oid": "b710b985a469343501db8d019d910a1041974dc2"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1826, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}