{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTAyOTky", "number": 7240, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MTowOVrOEEoa5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MjoyMVrOEEocNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjkyMDA3OnYy", "diffSide": "RIGHT", "path": "site2/docs/client-libraries-java.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MTowOVrOGiX6Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MTowOVrOGiX6Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQ1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > Note:\n          \n          \n            \n            > \n          \n          \n            \n            > By default, the `subscriptionTopicsMode` of the consumer is `PersistentOnly`. Available options are `PersistentOnly`, `NonPersistentOnly` and `AllTopics`\n          \n          \n            \n            > #### Note\n          \n          \n            \n            > \n          \n          \n            \n            > By default, the `subscriptionTopicsMode` of the consumer is `PersistentOnly`. Available options of `subscriptionTopicsMode` are `PersistentOnly`, `NonPersistentOnly`, and `AllTopics`.", "url": "https://github.com/apache/pulsar/pull/7240#discussion_r438696458", "createdAt": "2020-06-11T10:41:09Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/client-libraries-java.md", "diffHunk": "@@ -379,18 +379,35 @@ ConsumerBuilder consumerBuilder = pulsarClient.newConsumer()\n         .subscriptionName(subscription);\n \n // Subscribe to all topics in a namespace\n-Pattern allTopicsInNamespace = Pattern.compile(\"persistent://public/default/.*\");\n+Pattern allTopicsInNamespace = Pattern.compile(\"public/default/.*\");\n Consumer allTopicsConsumer = consumerBuilder\n         .topicsPattern(allTopicsInNamespace)\n         .subscribe();\n \n // Subscribe to a subsets of topics in a namespace, based on regex\n-Pattern someTopicsInNamespace = Pattern.compile(\"persistent://public/default/foo.*\");\n+Pattern someTopicsInNamespace = Pattern.compile(\"public/default/foo.*\");\n Consumer allTopicsConsumer = consumerBuilder\n         .topicsPattern(someTopicsInNamespace)\n         .subscribe();\n ```\n \n+In the above example, the consumer subscribes to the `persistent` topics that can match the topic name pattern,\n+If you want the consumer subscribes to all `persistent` and `non-persistent` topics that can match the topic pattern,\n+You need to set `subscriptionTopicsMode` to `RegexSubscriptionMode.AllTopics`.\n+\n+```java\n+Pattern pattern = Pattern.compile(\"public/default/.*\");\n+pulsarClient.newConsumer()\n+        .subscriptionName(\"my-sub\")\n+        .topicsPattern(pattern)\n+        .subscriptionTopicsMode(RegexSubscriptionMode.AllTopics)\n+        .subscribe();\n+```\n+\n+> Note:\n+> \n+> By default, the `subscriptionTopicsMode` of the consumer is `PersistentOnly`. Available options are `PersistentOnly`, `NonPersistentOnly` and `AllTopics`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5ec3fd495d27f7de6b3a18cdf5a70cf984f7cb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjkyMzQyOnYy", "diffSide": "RIGHT", "path": "site2/docs/client-libraries-java.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MjoyMVrOGiX8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MjoyMVrOGiX8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NzAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the above example, the consumer subscribes to the `persistent` topics that can match the topic name pattern,\n          \n          \n            \n            If you want the consumer subscribes to all `persistent` and `non-persistent` topics that can match the topic pattern,\n          \n          \n            \n            You need to set `subscriptionTopicsMode` to `RegexSubscriptionMode.AllTopics`.\n          \n          \n            \n            In the above example, the consumer subscribes to the `persistent` topics that can match the topic name pattern. If you want the consumer subscribes to all `persistent` and `non-persistent` topics that can match the topic name pattern, set `subscriptionTopicsMode` to `RegexSubscriptionMode.AllTopics`.", "url": "https://github.com/apache/pulsar/pull/7240#discussion_r438697033", "createdAt": "2020-06-11T10:42:21Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/client-libraries-java.md", "diffHunk": "@@ -379,18 +379,35 @@ ConsumerBuilder consumerBuilder = pulsarClient.newConsumer()\n         .subscriptionName(subscription);\n \n // Subscribe to all topics in a namespace\n-Pattern allTopicsInNamespace = Pattern.compile(\"persistent://public/default/.*\");\n+Pattern allTopicsInNamespace = Pattern.compile(\"public/default/.*\");\n Consumer allTopicsConsumer = consumerBuilder\n         .topicsPattern(allTopicsInNamespace)\n         .subscribe();\n \n // Subscribe to a subsets of topics in a namespace, based on regex\n-Pattern someTopicsInNamespace = Pattern.compile(\"persistent://public/default/foo.*\");\n+Pattern someTopicsInNamespace = Pattern.compile(\"public/default/foo.*\");\n Consumer allTopicsConsumer = consumerBuilder\n         .topicsPattern(someTopicsInNamespace)\n         .subscribe();\n ```\n \n+In the above example, the consumer subscribes to the `persistent` topics that can match the topic name pattern,\n+If you want the consumer subscribes to all `persistent` and `non-persistent` topics that can match the topic pattern,\n+You need to set `subscriptionTopicsMode` to `RegexSubscriptionMode.AllTopics`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5ec3fd495d27f7de6b3a18cdf5a70cf984f7cb"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2500, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}