{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODg5MzMw", "number": 6972, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyOVrOD9DNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyOVrOD9DNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzQyMzA3OnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMToxMDoyOVrOGWXN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjowMjowOFrOGW9zSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ==", "bodyText": "I like the idea of having type checking. The naming is a bit confusing to me something like makes more sense to me.\nclass TestConfig {\n       @NotNull\n        public String stringValue;\n        \n       @PositiveNumber or @Number(positive=true)\n        public Integer positiveNumber;\n        \n       @List(itemType = Integer.class) or @ListType(itemType = Integer.class) or @IntegerList\n        public List integerList;\n        \n       @Map(keyType = String.class, valueType = Integer.class) or @MapType(keyType = String.class, valueType = Integer.class)\n        public Map stringIntegerMap;\n        \n       @List(itemType = String.class) or @StringList\n        public List stringList;\n        \n       @TopicName\n        public String topic;\n        \n       @CustomType(validatorClass = TestValidator.class)\n        public String customString;\n    }\n\nI think annotations should describe what the variable type is as opposed to describing how to test it. The testing is implied.\nAnother thing to think about is how to handle fields that should be required to have a value.\nThoughts?", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426102269", "createdAt": "2020-05-16T01:10:29Z", "author": {"login": "cckellogg"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4Mzg0Nw==", "bodyText": "I don't fee strongly about it either way.   However, if we feel we can simplify the naming of annotations and still be intuitive to the end user, we should.  The current annotations are borrowed from Storm that I created a while ago:\nhttps://github.com/apache/storm/blob/master/storm-client/src/jvm/org/apache/storm/validation/ConfigValidationAnnotations.java\nOthers have name annotations in a more simplified way:\nhttps://www.baeldung.com/javax-validation", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426183847", "createdAt": "2020-05-16T19:34:04Z", "author": {"login": "jerrypeng"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ=="}, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODIxNg==", "bodyText": "I have changed the annotations. wrt fields that should have a value, isn't that covered by NotNull?", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426188216", "createdAt": "2020-05-16T20:27:42Z", "author": {"login": "srkukarni"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ=="}, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTE3OA==", "bodyText": "Can NotNull be applied in combination with another annotation like this? Or does an annotation like @TopicName or @List imply not null?\n@NotNull\n@TopicName\n public String topic;", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426335178", "createdAt": "2020-05-18T01:51:09Z", "author": {"login": "cckellogg"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ=="}, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0ODcyMA==", "bodyText": "Multiple annotations are possible on a field.\nThus\n@NotNull\n@TopicName implies that it should be non null and is a topic. However I believe that TopicName already ensures that its not null", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426348720", "createdAt": "2020-05-18T03:07:57Z", "author": {"login": "srkukarni"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ=="}, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczNDQwOA==", "bodyText": "Sounds good and LGTM +1", "url": "https://github.com/apache/pulsar/pull/6972#discussion_r426734408", "createdAt": "2020-05-18T16:02:08Z", "author": {"login": "cckellogg"}, "path": "pulsar-common/src/test/java/org/apache/pulsar/common/validator/ConfigValidationTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.validator;\n+\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+import static org.testng.Assert.*;\n+\n+public class ConfigValidationTest {\n+\n+    private final List<String> testStringList = Arrays.asList(new String[]{\"foo\", \"bar\"});\n+    private final List<Integer> testIntegerList = Arrays.asList(new Integer[]{0, 1});\n+    private final Map<String, Integer> testStringIntegerMap = new HashMap<String, Integer>() {\n+        {\n+            put(\"one\", 1);\n+            put(\"two\", 2);\n+        }\n+    };\n+    private final Map<String, String> testStringStringMap = new HashMap<String, String>() {\n+        {\n+            put(\"one\", \"one\");\n+            put(\"two\", \"two\");\n+        }\n+    };\n+    private final String topic = \"persistent://public/default/topic\";\n+\n+    public static class TestValidator extends Validator {\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o instanceof String) {\n+                String value = (String)o;\n+                if (!value.startsWith(\"ABCDE\")) {\n+                    throw new IllegalArgumentException(String.format(\"Field %s does not start with ABCDE\", name));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Field %s is not a string\", name));\n+            }\n+        }\n+    }\n+\n+    class TestConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjI2OQ=="}, "originalCommit": {"oid": "68a21cf08fa96997da1277cfba30eb65c5f62870"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1755, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}