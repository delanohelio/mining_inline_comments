{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NTY3NDcy", "number": 7968, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTo1MToxOFrOEgWmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0MDozOVrOEg5yQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzYwMTEyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTo1MToxOFrOHNKnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDoxMzoxOFrOHN5gIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2NzUwNg==", "bodyText": "It is not recommended to use AsyncResponse, just return the value directly.\nmore info to see #7884", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r483567506", "createdAt": "2020-09-04T11:51:18Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2417,6 +2417,53 @@ protected void internalGetMaxProducers(AsyncResponse asyncResponse) {\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetMaxConsumers(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<Integer> maxConsumers = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getMaxConsumerPerTopic);\n+        if (!maxConsumers.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        } else {\n+            asyncResponse.resume(maxConsumers.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5ODE1Nw==", "bodyText": "How about making a new PR to resolve them all?", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r483598157", "createdAt": "2020-09-04T12:57:10Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2417,6 +2417,53 @@ protected void internalGetMaxProducers(AsyncResponse asyncResponse) {\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetMaxConsumers(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<Integer> maxConsumers = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getMaxConsumerPerTopic);\n+        if (!maxConsumers.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        } else {\n+            asyncResponse.resume(maxConsumers.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2NzUwNg=="}, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODkyMw==", "bodyText": "I think the new code can comply with this rule.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484028923", "createdAt": "2020-09-06T06:33:28Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2417,6 +2417,53 @@ protected void internalGetMaxProducers(AsyncResponse asyncResponse) {\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetMaxConsumers(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<Integer> maxConsumers = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getMaxConsumerPerTopic);\n+        if (!maxConsumers.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        } else {\n+            asyncResponse.resume(maxConsumers.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2NzUwNg=="}, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzNTY0OQ==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484335649", "createdAt": "2020-09-07T10:13:18Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -2417,6 +2417,53 @@ protected void internalGetMaxProducers(AsyncResponse asyncResponse) {\n         return pulsar().getTopicPoliciesService().updateTopicPoliciesAsync(topicName, topicPolicies.get());\n     }\n \n+    protected void internalGetMaxConsumers(AsyncResponse asyncResponse) {\n+        validateAdminAccessForTenant(namespaceName.getTenant());\n+        validatePoliciesReadOnlyAccess();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        checkTopicLevelPolicyEnable();\n+        Optional<Integer> maxConsumers = getTopicPolicies(topicName)\n+                .map(TopicPolicies::getMaxConsumerPerTopic);\n+        if (!maxConsumers.isPresent()) {\n+            asyncResponse.resume(Response.noContent().build());\n+        } else {\n+            asyncResponse.resume(maxConsumers.get());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2NzUwNg=="}, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzYwOTY3OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTo1NDoyMVrOHNKstg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozNDowN1rOHNmyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2ODgyMg==", "bodyText": "remove admin.topics().deletePartitionedTopic(testTopic, true);", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r483568822", "createdAt": "2020-09-04T11:54:21Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesTest.java", "diffHunk": "@@ -590,4 +591,121 @@ public void testRemovePublishRate() throws Exception {\n \n         admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n+\n+    @Test\n+    public void testCheckMaxConsumers() throws Exception {\n+        Integer maxProducers = new Integer(-1);\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxProducers, testTopic);\n+        try {\n+            admin.topics().setMaxConsumers(testTopic, maxProducers);\n+            Assert.fail();\n+        } catch (PulsarAdminException e) {\n+            Assert.assertEquals(e.getStatusCode(), 412);\n+        }\n+\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n+    }\n+\n+    @Test\n+    public void testSetMaxConsumers() throws Exception {\n+        admin.namespaces().setMaxConsumersPerTopic(myNamespace, 1);\n+        log.info(\"MaxConsumers: {} will set to the namespace: {}\", 1, myNamespace);\n+        Integer maxConsumers = 2;\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxConsumers, persistenceTopic);\n+        admin.topics().setMaxConsumers(persistenceTopic, maxConsumers);\n+        Thread.sleep(3000);\n+\n+        admin.topics().createPartitionedTopic(persistenceTopic, 2);\n+        Consumer consumer1 = null;\n+        Consumer consumer2 = null;\n+        Consumer consumer3 = null;\n+        try {\n+            consumer1 = pulsarClient.newConsumer().subscriptionName(\"sub1\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer2 = pulsarClient.newConsumer().subscriptionName(\"sub2\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer3 = pulsarClient.newConsumer().subscriptionName(\"sub3\").topic(persistenceTopic).subscribe();\n+            Assert.fail();\n+        } catch (PulsarClientException e) {\n+            log.info(\"Topic reached max consumers limit\");\n+        }\n+        Assert.assertNotNull(consumer1);\n+        Assert.assertNotNull(consumer2);\n+        Assert.assertNull(consumer3);\n+        consumer1.close();\n+        consumer2.close();\n+\n+        Integer getMaxConsumers = admin.topics().getMaxConsumers(persistenceTopic);\n+        log.info(\"MaxConsumers {} get on topic: {}\", getMaxConsumers, persistenceTopic);\n+        Assert.assertEquals(getMaxConsumers, maxConsumers);\n+\n+        admin.topics().deletePartitionedTopic(persistenceTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NzY2OA==", "bodyText": "'testTopic' was created in BeforeMethod.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r483587668", "createdAt": "2020-09-04T12:35:46Z", "author": {"login": "zhanghaou"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesTest.java", "diffHunk": "@@ -590,4 +591,121 @@ public void testRemovePublishRate() throws Exception {\n \n         admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n+\n+    @Test\n+    public void testCheckMaxConsumers() throws Exception {\n+        Integer maxProducers = new Integer(-1);\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxProducers, testTopic);\n+        try {\n+            admin.topics().setMaxConsumers(testTopic, maxProducers);\n+            Assert.fail();\n+        } catch (PulsarAdminException e) {\n+            Assert.assertEquals(e.getStatusCode(), 412);\n+        }\n+\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n+    }\n+\n+    @Test\n+    public void testSetMaxConsumers() throws Exception {\n+        admin.namespaces().setMaxConsumersPerTopic(myNamespace, 1);\n+        log.info(\"MaxConsumers: {} will set to the namespace: {}\", 1, myNamespace);\n+        Integer maxConsumers = 2;\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxConsumers, persistenceTopic);\n+        admin.topics().setMaxConsumers(persistenceTopic, maxConsumers);\n+        Thread.sleep(3000);\n+\n+        admin.topics().createPartitionedTopic(persistenceTopic, 2);\n+        Consumer consumer1 = null;\n+        Consumer consumer2 = null;\n+        Consumer consumer3 = null;\n+        try {\n+            consumer1 = pulsarClient.newConsumer().subscriptionName(\"sub1\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer2 = pulsarClient.newConsumer().subscriptionName(\"sub2\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer3 = pulsarClient.newConsumer().subscriptionName(\"sub3\").topic(persistenceTopic).subscribe();\n+            Assert.fail();\n+        } catch (PulsarClientException e) {\n+            log.info(\"Topic reached max consumers limit\");\n+        }\n+        Assert.assertNotNull(consumer1);\n+        Assert.assertNotNull(consumer2);\n+        Assert.assertNull(consumer3);\n+        consumer1.close();\n+        consumer2.close();\n+\n+        Integer getMaxConsumers = admin.topics().getMaxConsumers(persistenceTopic);\n+        log.info(\"MaxConsumers {} get on topic: {}\", getMaxConsumers, persistenceTopic);\n+        Assert.assertEquals(getMaxConsumers, maxConsumers);\n+\n+        admin.topics().deletePartitionedTopic(persistenceTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2ODgyMg=="}, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODk3OA==", "bodyText": "Okay.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484028978", "createdAt": "2020-09-06T06:34:07Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/TopicPoliciesTest.java", "diffHunk": "@@ -590,4 +591,121 @@ public void testRemovePublishRate() throws Exception {\n \n         admin.topics().deletePartitionedTopic(testTopic, true);\n     }\n+\n+    @Test\n+    public void testCheckMaxConsumers() throws Exception {\n+        Integer maxProducers = new Integer(-1);\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxProducers, testTopic);\n+        try {\n+            admin.topics().setMaxConsumers(testTopic, maxProducers);\n+            Assert.fail();\n+        } catch (PulsarAdminException e) {\n+            Assert.assertEquals(e.getStatusCode(), 412);\n+        }\n+\n+        admin.topics().deletePartitionedTopic(testTopic, true);\n+    }\n+\n+    @Test\n+    public void testSetMaxConsumers() throws Exception {\n+        admin.namespaces().setMaxConsumersPerTopic(myNamespace, 1);\n+        log.info(\"MaxConsumers: {} will set to the namespace: {}\", 1, myNamespace);\n+        Integer maxConsumers = 2;\n+        log.info(\"MaxConsumers: {} will set to the topic: {}\", maxConsumers, persistenceTopic);\n+        admin.topics().setMaxConsumers(persistenceTopic, maxConsumers);\n+        Thread.sleep(3000);\n+\n+        admin.topics().createPartitionedTopic(persistenceTopic, 2);\n+        Consumer consumer1 = null;\n+        Consumer consumer2 = null;\n+        Consumer consumer3 = null;\n+        try {\n+            consumer1 = pulsarClient.newConsumer().subscriptionName(\"sub1\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer2 = pulsarClient.newConsumer().subscriptionName(\"sub2\").topic(persistenceTopic).subscribe();\n+        } catch (PulsarClientException e) {\n+            Assert.fail();\n+        }\n+        try {\n+            consumer3 = pulsarClient.newConsumer().subscriptionName(\"sub3\").topic(persistenceTopic).subscribe();\n+            Assert.fail();\n+        } catch (PulsarClientException e) {\n+            log.info(\"Topic reached max consumers limit\");\n+        }\n+        Assert.assertNotNull(consumer1);\n+        Assert.assertNotNull(consumer2);\n+        Assert.assertNull(consumer3);\n+        consumer1.close();\n+        consumer2.close();\n+\n+        Integer getMaxConsumers = admin.topics().getMaxConsumers(persistenceTopic);\n+        log.info(\"MaxConsumers {} get on topic: {}\", getMaxConsumers, persistenceTopic);\n+        Assert.assertEquals(getMaxConsumers, maxConsumers);\n+\n+        admin.topics().deletePartitionedTopic(persistenceTopic, true);\n+        admin.topics().deletePartitionedTopic(testTopic, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2ODgyMg=="}, "originalCommit": {"oid": "550963be7652a6c428b80e17b11e99184adf8233"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTM2NjQyOnYy", "diffSide": "RIGHT", "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0MDozOVrOHN8HbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo0MjoxNFrOHN9-0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3ODQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    jcommander.addCommand(\"get-maxConsumers\", new GetMaxConsumers());\n          \n          \n            \n                    jcommander.addCommand(\"set-maxConsumers\", new SetMaxConsumers());\n          \n          \n            \n                    jcommander.addCommand(\"remove-maxConsumers\", new RemoveMaxConsumers());\n          \n          \n            \n                    jcommander.addCommand(\"get-max-consumers\", new GetMaxConsumers());\n          \n          \n            \n                    jcommander.addCommand(\"set-max-consumers\", new SetMaxConsumers());\n          \n          \n            \n                    jcommander.addCommand(\"remove-max-consumers\", new RemoveMaxConsumers());", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484378476", "createdAt": "2020-09-07T11:40:39Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java", "diffHunk": "@@ -153,6 +153,9 @@ public CmdTopics(PulsarAdmin admin) {\n         jcommander.addCommand(\"get-inactive-topic-policies\", new GetInactiveTopicPolicies());\n         jcommander.addCommand(\"set-inactive-topic-policies\", new SetInactiveTopicPolicies());\n         jcommander.addCommand(\"remove-inactive-topic-policies\", new RemoveInactiveTopicPolicies());\n+        jcommander.addCommand(\"get-maxConsumers\", new GetMaxConsumers());\n+        jcommander.addCommand(\"set-maxConsumers\", new SetMaxConsumers());\n+        jcommander.addCommand(\"remove-maxConsumers\", new RemoveMaxConsumers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06b0cbf9ab7f0fd8d1585342e3703b6a2ca5916"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3ODkzNA==", "bodyText": "And please also update the max producers as the above pattern.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484378934", "createdAt": "2020-09-07T11:41:30Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java", "diffHunk": "@@ -153,6 +153,9 @@ public CmdTopics(PulsarAdmin admin) {\n         jcommander.addCommand(\"get-inactive-topic-policies\", new GetInactiveTopicPolicies());\n         jcommander.addCommand(\"set-inactive-topic-policies\", new SetInactiveTopicPolicies());\n         jcommander.addCommand(\"remove-inactive-topic-policies\", new RemoveInactiveTopicPolicies());\n+        jcommander.addCommand(\"get-maxConsumers\", new GetMaxConsumers());\n+        jcommander.addCommand(\"set-maxConsumers\", new SetMaxConsumers());\n+        jcommander.addCommand(\"remove-maxConsumers\", new RemoveMaxConsumers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3ODQ3Ng=="}, "originalCommit": {"oid": "f06b0cbf9ab7f0fd8d1585342e3703b6a2ca5916"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQwOTA0MQ==", "bodyText": "Done.", "url": "https://github.com/apache/pulsar/pull/7968#discussion_r484409041", "createdAt": "2020-09-07T12:42:14Z", "author": {"login": "zhanghaou"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdTopics.java", "diffHunk": "@@ -153,6 +153,9 @@ public CmdTopics(PulsarAdmin admin) {\n         jcommander.addCommand(\"get-inactive-topic-policies\", new GetInactiveTopicPolicies());\n         jcommander.addCommand(\"set-inactive-topic-policies\", new SetInactiveTopicPolicies());\n         jcommander.addCommand(\"remove-inactive-topic-policies\", new RemoveInactiveTopicPolicies());\n+        jcommander.addCommand(\"get-maxConsumers\", new GetMaxConsumers());\n+        jcommander.addCommand(\"set-maxConsumers\", new SetMaxConsumers());\n+        jcommander.addCommand(\"remove-maxConsumers\", new RemoveMaxConsumers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3ODQ3Ng=="}, "originalCommit": {"oid": "f06b0cbf9ab7f0fd8d1585342e3703b6a2ca5916"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2159, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}