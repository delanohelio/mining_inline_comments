{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzcyOTc3", "number": 8618, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0MjoxOVrOFCxvoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMzoxNVrOFEGhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDU2NDgxOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0MjoxOVrOICGkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxMjoxMVrOICHppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NTcwMw==", "bodyText": "broker timestamp is a concept on pulsar broker. managed ledger isn't aware of any broker features. I am not sure why we need this flag here or the name of this configuration setting is not appropriate.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539075703", "createdAt": "2020-12-09T07:42:19Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "diffHunk": "@@ -75,6 +75,7 @@\n     private LedgerOffloader ledgerOffloader = NullLedgerOffloader.INSTANCE;\n     private int newEntriesCheckDelayInMillis = 10;\n     private Clock clock = Clock.systemUTC();\n+    private boolean brokerTimestampForMessageEnable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5MzQxNQ==", "bodyText": "Thanks for your reply.\nThis flag here is to indicate that we should add timestamp  in Raw meta from broker side for Entry.\nThis raw meta(broker timstamp) can be added once broker received an Entry or  just before the Entry writen to bookie.  brokerTimestampForMessageEnable  here  is for the future consideration,\n\nHere are some of the use case for raw Message metadata:\n\n\nProvide ordered messages by time(broker side) sequence to make messages seek by the time more accurate. Currently, each message has a publish_time, it uses client-side time, but for different producers in different clients, the time may not align between clients and cause the message order and the message time (publish_time) order may be different. But each topic-partition only has one owner broker, if we append broker side time in the \u201craw Message metadata\u201d, we could make sure the message order is aligned with broker side time. With this feature, we could handle the message seek by the time more accurately.\n\n\nProvide continuous message sequence-Id for messages in one topic-partition. MessageId is a combination of ledgerId+entryId+batchIndex; for a partition that contains more than one ledger, the Ids inside is not continuous. By this solution, we could append a sequence-Id at the end of each Message. This will make the message sequence management earlier.\n\nIn the future, Raw meta can support continuous message sequence-Id for messages in one topic-partition , and for consistency, I think add sequence-Id to Raw meta by ManagedLedger is a good choice.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539093415", "createdAt": "2020-12-09T08:12:11Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "diffHunk": "@@ -75,6 +75,7 @@\n     private LedgerOffloader ledgerOffloader = NullLedgerOffloader.INSTANCE;\n     private int newEntriesCheckDelayInMillis = 10;\n     private Clock clock = Clock.systemUTC();\n+    private boolean brokerTimestampForMessageEnable = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NTcwMw=="}, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDU2ODIzOnYy", "diffSide": "RIGHT", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0MzoyMVrOICGmZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxOToxNVrOICH6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NjE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean brokerTimestampForMessageEnable = false;\n          \n          \n            \n                private boolean brokerTimestampForMessageEnabled = false;", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539076198", "createdAt": "2020-12-09T07:43:21Z", "author": {"login": "sijie"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -1428,6 +1428,11 @@\n                     + \"Of course, this may degrade consumption throughput. Default is 10ms.\")\n     private int managedLedgerNewEntriesCheckDelayInMillis = 10;\n \n+    @FieldContext(category = CATEGORY_STORAGE_ML,\n+            doc = \"Enable broker side timestamp for message. Default is false.\")\n+    private boolean brokerTimestampForMessageEnable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5Nzc5NQ==", "bodyText": "will apply.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539097795", "createdAt": "2020-12-09T08:19:15Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -1428,6 +1428,11 @@\n                     + \"Of course, this may degrade consumption throughput. Default is 10ms.\")\n     private int managedLedgerNewEntriesCheckDelayInMillis = 10;\n \n+    @FieldContext(category = CATEGORY_STORAGE_ML,\n+            doc = \"Enable broker side timestamp for message. Default is false.\")\n+    private boolean brokerTimestampForMessageEnable = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NjE5OA=="}, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDU4NTYwOnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/proto/PulsarApi.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0Nzo1OFrOICGwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoxODowNVrOICH4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODY2MQ==", "bodyText": "I think the original idea to introduce RawMessageMetadata is to avoid serialization and deserialization. So broker doesn't need to serialize another protobuf message and create a new entry to store in bookkeeper side. I am not sure why do we need this.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539078661", "createdAt": "2020-12-09T07:47:58Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -180,6 +180,11 @@ message SingleMessageMetadata {\n     optional bool null_partition_key = 10 [ default = false];\n }\n \n+// raw metadata for message\n+message RawMessageMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NzEwNg==", "bodyText": "When the broker side gets the message produced from the client, we could add the property at a new area, which does not combine with MessageMetadata, and no need deserializing the original MessageMetadata when gets it out; and when the broker sends the message to the client, we could choose to filter out this part of the property(or not as the client needs).\n\nAs described in PIP-70,  RawMessageMetadata just avoid serialization and deserialization for the original  MessageMetadata and can be  fiter out before send to client.\nHere the protobuf message RawMessageMetadata is just a Tool Class for build/parse Raw meta.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r539097106", "createdAt": "2020-12-09T08:18:05Z", "author": {"login": "aloyszhang"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -180,6 +180,11 @@ message SingleMessageMetadata {\n     optional bool null_partition_key = 10 [ default = false];\n }\n \n+// raw metadata for message\n+message RawMessageMetadata {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODY2MQ=="}, "originalCommit": {"oid": "3b3a73e3136b3d72c19bcb5367bf92438c84138e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzMyNzc2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowNzoxMVrOIDWkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTo1MzozN1rOIDlh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NjM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        doc = \"List of interceptors for broker metadata.\")\n          \n          \n            \n                        doc = \"List of interceptors for entry metadata.\")", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540386384", "createdAt": "2020-12-10T18:07:11Z", "author": {"login": "sijie"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -865,6 +866,11 @@\n                 \"please enable the system topic first.\")\n     private boolean topicLevelPoliciesEnabled = false;\n \n+    @FieldContext(\n+            category = CATEGORY_SERVER,\n+            doc = \"List of interceptors for broker metadata.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMTUzMg==", "bodyText": "will fix this.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540631532", "createdAt": "2020-12-11T01:53:37Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/ServiceConfiguration.java", "diffHunk": "@@ -865,6 +866,11 @@\n                 \"please enable the system topic first.\")\n     private boolean topicLevelPoliciesEnabled = false;\n \n+    @FieldContext(\n+            category = CATEGORY_SERVER,\n+            doc = \"List of interceptors for broker metadata.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4NjM4NA=="}, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM2ODc0OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpAddEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxNjo0MlrOIDW8yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTo0NDozMVrOIDlVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MjY0OQ==", "bodyText": "I am still not convinced why do we need to this here. ManagedLedger only handles serialized entry. The entry metadata should be appended at the broker level. I think the right place to add this logic should be done in https://github.com/apache/pulsar/blob/master/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java#L342.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540392649", "createdAt": "2020-12-10T18:16:42Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpAddEntry.java", "diffHunk": "@@ -103,8 +107,13 @@ public void setCloseWhenDone(boolean closeWhenDone) {\n \n     public void initiate() {\n         if (STATE_UPDATER.compareAndSet(OpAddEntry.this, State.OPEN, State.INITIATED)) {\n-            ByteBuf duplicateBuffer = data.retainedDuplicate();\n \n+            ByteBuf duplicateBuffer = data.retainedDuplicate();\n+            if (ml.getConfig().isBrokerEntryMetaEnabled()) {\n+                duplicateBuffer = Commands.addBrokerEntryMetadata(duplicateBuffer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyODM1Nw==", "bodyText": "As we described in PIP-70, this feature can support continous sequenceId for Pulsar entry in the future, so, I think do these operations here is in favour of the future features.  For this broker-timestamp feature only,  move this logic as you suggested is a good choice. But for further extension,  maybe do this logic by ManagedLedger is better.  What's your opinion about this?", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540628357", "createdAt": "2020-12-11T01:44:31Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpAddEntry.java", "diffHunk": "@@ -103,8 +107,13 @@ public void setCloseWhenDone(boolean closeWhenDone) {\n \n     public void initiate() {\n         if (STATE_UPDATER.compareAndSet(OpAddEntry.this, State.OPEN, State.INITIATED)) {\n-            ByteBuf duplicateBuffer = data.retainedDuplicate();\n \n+            ByteBuf duplicateBuffer = data.retainedDuplicate();\n+            if (ml.getConfig().isBrokerEntryMetaEnabled()) {\n+                duplicateBuffer = Commands.addBrokerEntryMetadata(duplicateBuffer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MjY0OQ=="}, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM5NTk3OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyMjo1OVrOIDXMug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzowNDoyMlrOIDnA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NjczMA==", "bodyText": "We should expose the broker metadata in the Message. So this would avoid using Pair and a lot of if-else logic.\nWe can improve msg.isExpired logic. If entry metadata is present, use broker timestamp; otherwise use client timestamp.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540396730", "createdAt": "2020-12-10T18:22:59Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "diffHunk": "@@ -68,16 +70,22 @@ public void expireMessages(int messageTTLInSeconds) {\n                     messageTTLInSeconds);\n \n             cursor.asyncFindNewestMatching(ManagedCursor.FindPositionConstraint.SearchActiveEntries, entry -> {\n-                MessageImpl<?> msg = null;\n+                Pair<MessageImpl<byte[]>, PulsarApi.BrokerEntryMetadata> pair = null;\n                 try {\n-                    msg = MessageImpl.deserialize(entry.getDataBuffer());\n-                    return msg.isExpired(messageTTLInSeconds);\n+                    pair = MessageImpl.deserializeWithBrokerEntryMetaData(entry.getDataBuffer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1NTg2Ng==", "bodyText": "Thanks for your suggestion.  I'll optimize the implement as follow steps:\n\nexpose the entry metadata to MessageImpl\nif entry metadata exist, skip the deserialization of MessageMetadata\nif not exist, deserialization the MessageMetadata", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r540655866", "createdAt": "2020-12-11T03:04:22Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "diffHunk": "@@ -68,16 +70,22 @@ public void expireMessages(int messageTTLInSeconds) {\n                     messageTTLInSeconds);\n \n             cursor.asyncFindNewestMatching(ManagedCursor.FindPositionConstraint.SearchActiveEntries, entry -> {\n-                MessageImpl<?> msg = null;\n+                Pair<MessageImpl<byte[]>, PulsarApi.BrokerEntryMetadata> pair = null;\n                 try {\n-                    msg = MessageImpl.deserialize(entry.getDataBuffer());\n-                    return msg.isExpired(messageTTLInSeconds);\n+                    pair = MessageImpl.deserializeWithBrokerEntryMetaData(entry.getDataBuffer());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NjczMA=="}, "originalCommit": {"oid": "4e64b965e2ec4d51a115840a5ed5680c89aba00f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQxMTY2OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MjowNlrOIEDhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo0ODo0M1rOIETVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMjkxNg==", "bodyText": "I don't think we need these imports here. correct?", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541122916", "createdAt": "2020-12-11T17:52:06Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "diffHunk": "@@ -23,7 +23,9 @@\n import com.google.common.base.Charsets;\n import java.time.Clock;\n import java.util.Arrays;\n+import java.util.HashSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4MTk4OA==", "bodyText": "will remove", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541381988", "createdAt": "2020-12-11T22:48:43Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedgerConfig.java", "diffHunk": "@@ -23,7 +23,9 @@\n import com.google.common.base.Charsets;\n import java.time.Clock;\n import java.util.Arrays;\n+import java.util.HashSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMjkxNg=="}, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQxMzA2OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpAddEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MjoyM1rOIEDiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MjoyM1rOIEDiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMzA5OA==", "bodyText": "I  don't think we need this import.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541123098", "createdAt": "2020-12-11T17:52:23Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/OpAddEntry.java", "diffHunk": "@@ -35,6 +37,7 @@\n import org.apache.bookkeeper.mledger.ManagedLedgerException;\n import org.apache.bookkeeper.mledger.util.SafeRun;\n import org.apache.bookkeeper.util.SafeRunnable;\n+import org.apache.pulsar.common.protocol.Commands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQxODE2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1Mzo0M1rOIEDlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo1MDoxM1rOIETXgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMzg2MQ==", "bodyText": "We don't this method anymore, correct?", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541123861", "createdAt": "2020-12-11T17:53:43Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "diffHunk": "@@ -90,6 +91,11 @@ public void expireMessages(int messageTTLInSeconds) {\n         }\n     }\n \n+    public boolean isExpired(int messageTTLInSeconds, long brokerTimestampForMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4MjUyOA==", "bodyText": "Yes, this method has no invoke. will rmeove", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541382528", "createdAt": "2020-12-11T22:50:13Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageExpiryMonitor.java", "diffHunk": "@@ -90,6 +91,11 @@ public void expireMessages(int messageTTLInSeconds) {\n         }\n     }\n \n+    public boolean isExpired(int messageTTLInSeconds, long brokerTimestampForMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMzg2MQ=="}, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQzMzgxOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NzozN1rOIEDuAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NzozN1rOIEDuAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNjE0NA==", "bodyText": "Can we add a method in MessageImpl to compare the timestamps?\nboolean publishedEarlierThan(long timestamp)?\n\nLike what you did at https://github.com/apache/pulsar/pull/8618/files#diff-955419b4b0ad976e96f9f7595989e79c391109aeaa304bd286a80fc6eb9360c7R299", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541126144", "createdAt": "2020-12-11T17:57:37Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentMessageFinder.java", "diffHunk": "@@ -61,10 +61,12 @@ public void findMessages(final long timestamp, AsyncCallbacks.FindEntryCallback\n             }\n \n             cursor.asyncFindNewestMatching(ManagedCursor.FindPositionConstraint.SearchAllAvailableEntries, entry -> {\n-                MessageImpl msg = null;\n+                MessageImpl<byte[]> msg = null;\n                 try {\n-                    msg = MessageImpl.deserialize(entry.getDataBuffer());\n-                    return msg.getPublishTime() < timestamp;\n+                    msg = MessageImpl.deserializeBrokerEntryMetaDataFirst(entry.getDataBuffer());\n+                    return msg.getBrokerEntryMetadata() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQzNjIzOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1ODoyMlrOIEDveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1ODoyMlrOIEDveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNjUyMg==", "bodyText": "Can we use MessageImpl.isExpired?", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541126522", "createdAt": "2020-12-11T17:58:22Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -2145,15 +2155,21 @@ public void terminateFailed(ManagedLedgerException exception, Object ctx) {\n     }\n \n     public boolean isOldestMessageExpired(ManagedCursor cursor, long messageTTLInSeconds) {\n-        MessageImpl msg = null;\n+        MessageImpl<byte[]> msg = null;\n         Entry entry = null;\n         boolean isOldestMessageExpired = false;\n         try {\n             entry = cursor.getNthEntry(1, IndividualDeletedEntries.Include);\n             if (entry != null) {\n-                msg = MessageImpl.deserialize(entry.getDataBuffer());\n-                isOldestMessageExpired = messageTTLInSeconds != 0 && System.currentTimeMillis() > (msg.getPublishTime()\n-                        + TimeUnit.SECONDS.toMillis((long) (messageTTLInSeconds * MESSAGE_EXPIRY_THRESHOLD)));\n+                msg = MessageImpl.deserializeBrokerEntryMetaDataFirst(entry.getDataBuffer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQzNzcwOnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/intercept/AppendBrokerTimestampMetadataInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1ODo0N1rOIEDwdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1ODo0N1rOIEDwdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNjc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AppendBrokerTimestampMetadataInterceptor implements BrokerEntryMetadataInterceptor{\n          \n          \n            \n            public class AppendBrokerTimestampMetadataInterceptor implements BrokerEntryMetadataInterceptor {", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541126775", "createdAt": "2020-12-11T17:58:47Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/intercept/AppendBrokerTimestampMetadataInterceptor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.intercept;\n+\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+\n+/**\n+ * A plugin interface that allows you to intercept the client requests to\n+ *  the Pulsar brokers and add timestamp from broker side metadata for each entry.\n+ */\n+public class AppendBrokerTimestampMetadataInterceptor implements BrokerEntryMetadataInterceptor{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ0MzYwOnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/intercept/BrokerEntryMetadataUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMDoxNVrOIEDz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMDoxNVrOIEDz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNzY1Ng==", "bodyText": "I think we should throw RuntimeExceptions if we failed to load broker entry metadata interceptors.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541127656", "createdAt": "2020-12-11T18:00:15Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/intercept/BrokerEntryMetadataUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.common.intercept;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.pulsar.common.util.ClassLoaderUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * A tool class for loading BrokerEntryMetadataInterceptor classes.\n+ */\n+public class BrokerEntryMetadataUtils {\n+\n+    private static final Logger log = LoggerFactory.getLogger(BrokerEntryMetadataUtils.class);\n+\n+    public static Set<BrokerEntryMetadataInterceptor> loadBrokerEntryMetadataInterceptors(\n+            Set<String> interceptorNames, ClassLoader classLoader) {\n+        Set<BrokerEntryMetadataInterceptor> interceptors = new HashSet<>();\n+        if (interceptorNames != null && interceptorNames.size() > 0) {\n+            for (String interceptorName : interceptorNames) {\n+                try {\n+                    Class<BrokerEntryMetadataInterceptor> clz = (Class<BrokerEntryMetadataInterceptor>) ClassLoaderUtils\n+                            .loadClass(interceptorName, classLoader);\n+                    try {\n+                        interceptors.add(clz.newInstance());\n+                    } catch (InstantiationException | IllegalAccessException e) {\n+                        log.error(\"Create new BrokerEntryMetadataInterceptor instance for {} falied.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ1MzUzOnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMjo1MFrOIED5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoyNjozOVrOIEU74Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTEzNg==", "bodyText": "If we failed to serialize entry metadata into a bytebuf, we should throw an exception. The caller of this method should catch this exception and fail the write requests.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541129136", "createdAt": "2020-12-11T18:02:50Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -1920,6 +1929,72 @@ private static ByteBufPair serializeCommandSendWithSize(BaseCommand.Builder cmdB\n         return command;\n     }\n \n+    public static ByteBuf addBrokerEntryMetadata(ByteBuf headerAndPayload,\n+                                                 Set<BrokerEntryMetadataInterceptor> interceptors) {\n+        //   | BROKER_ENTRY_METADATA_MAGIC_NUMBER | BROKER_ENTRY_METADATA_SIZE |         BROKER_ENTRY_METADATA         |\n+        //   |         2 bytes                    |       4 bytes              |    BROKER_ENTRY_METADATA_SIZE bytes   |\n+\n+        PulsarApi.BrokerEntryMetadata.Builder brokerMetadataBuilder = PulsarApi.BrokerEntryMetadata.newBuilder();\n+        for (BrokerEntryMetadataInterceptor interceptor : interceptors) {\n+            interceptor.intercept(brokerMetadataBuilder);\n+        }\n+        PulsarApi.BrokerEntryMetadata brokerEntryMetadata = brokerMetadataBuilder.build();\n+        int brokerMetaSize = brokerEntryMetadata.getSerializedSize();\n+        ByteBuf brokerMeta =\n+                PulsarByteBufAllocator.DEFAULT.buffer(brokerMetaSize + 6, brokerMetaSize + 6);\n+        brokerMeta.writeShort(Commands.magicBrokerEntryMetadata);\n+        brokerMeta.writeInt(brokerMetaSize);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(brokerMeta);\n+        try {\n+            brokerEntryMetadata.writeTo(outStream);\n+        } catch (IOException e) {\n+            // This is in-memory serialization, should not fail\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwODIyNQ==", "bodyText": "Will catch the exception and faile the write quest", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541408225", "createdAt": "2020-12-11T23:26:39Z", "author": {"login": "aloyszhang"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -1920,6 +1929,72 @@ private static ByteBufPair serializeCommandSendWithSize(BaseCommand.Builder cmdB\n         return command;\n     }\n \n+    public static ByteBuf addBrokerEntryMetadata(ByteBuf headerAndPayload,\n+                                                 Set<BrokerEntryMetadataInterceptor> interceptors) {\n+        //   | BROKER_ENTRY_METADATA_MAGIC_NUMBER | BROKER_ENTRY_METADATA_SIZE |         BROKER_ENTRY_METADATA         |\n+        //   |         2 bytes                    |       4 bytes              |    BROKER_ENTRY_METADATA_SIZE bytes   |\n+\n+        PulsarApi.BrokerEntryMetadata.Builder brokerMetadataBuilder = PulsarApi.BrokerEntryMetadata.newBuilder();\n+        for (BrokerEntryMetadataInterceptor interceptor : interceptors) {\n+            interceptor.intercept(brokerMetadataBuilder);\n+        }\n+        PulsarApi.BrokerEntryMetadata brokerEntryMetadata = brokerMetadataBuilder.build();\n+        int brokerMetaSize = brokerEntryMetadata.getSerializedSize();\n+        ByteBuf brokerMeta =\n+                PulsarByteBufAllocator.DEFAULT.buffer(brokerMetaSize + 6, brokerMetaSize + 6);\n+        brokerMeta.writeShort(Commands.magicBrokerEntryMetadata);\n+        brokerMeta.writeInt(brokerMetaSize);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(brokerMeta);\n+        try {\n+            brokerEntryMetadata.writeTo(outStream);\n+        } catch (IOException e) {\n+            // This is in-memory serialization, should not fail\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTEzNg=="}, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ1NTM3OnYy", "diffSide": "RIGHT", "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMzoxNVrOIED6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzozNjozN1rOIEVauQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTQxMQ==", "bodyText": "Same question here - we should let the caller catch the exception.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541129411", "createdAt": "2020-12-11T18:03:15Z", "author": {"login": "sijie"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -1920,6 +1929,72 @@ private static ByteBufPair serializeCommandSendWithSize(BaseCommand.Builder cmdB\n         return command;\n     }\n \n+    public static ByteBuf addBrokerEntryMetadata(ByteBuf headerAndPayload,\n+                                                 Set<BrokerEntryMetadataInterceptor> interceptors) {\n+        //   | BROKER_ENTRY_METADATA_MAGIC_NUMBER | BROKER_ENTRY_METADATA_SIZE |         BROKER_ENTRY_METADATA         |\n+        //   |         2 bytes                    |       4 bytes              |    BROKER_ENTRY_METADATA_SIZE bytes   |\n+\n+        PulsarApi.BrokerEntryMetadata.Builder brokerMetadataBuilder = PulsarApi.BrokerEntryMetadata.newBuilder();\n+        for (BrokerEntryMetadataInterceptor interceptor : interceptors) {\n+            interceptor.intercept(brokerMetadataBuilder);\n+        }\n+        PulsarApi.BrokerEntryMetadata brokerEntryMetadata = brokerMetadataBuilder.build();\n+        int brokerMetaSize = brokerEntryMetadata.getSerializedSize();\n+        ByteBuf brokerMeta =\n+                PulsarByteBufAllocator.DEFAULT.buffer(brokerMetaSize + 6, brokerMetaSize + 6);\n+        brokerMeta.writeShort(Commands.magicBrokerEntryMetadata);\n+        brokerMeta.writeInt(brokerMetaSize);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(brokerMeta);\n+        try {\n+            brokerEntryMetadata.writeTo(outStream);\n+        } catch (IOException e) {\n+            // This is in-memory serialization, should not fail\n+            throw new RuntimeException(e);\n+        }\n+        outStream.recycle();\n+\n+        CompositeByteBuf compositeByteBuf = PulsarByteBufAllocator.DEFAULT.compositeBuffer();\n+        compositeByteBuf.addComponents(true, brokerMeta, headerAndPayload);\n+        return compositeByteBuf;\n+    }\n+\n+    public static ByteBuf skipBrokerEntryMetadataIfExist(ByteBuf headerAndPayloadWithBrokerEntryMetadata) {\n+        int readerIndex = headerAndPayloadWithBrokerEntryMetadata.readerIndex();\n+        if (headerAndPayloadWithBrokerEntryMetadata.readShort() == magicBrokerEntryMetadata) {\n+            int brokerEntryMetadataSize = headerAndPayloadWithBrokerEntryMetadata.readInt();\n+            headerAndPayloadWithBrokerEntryMetadata.readerIndex(headerAndPayloadWithBrokerEntryMetadata.readerIndex()\n+                    + brokerEntryMetadataSize);\n+        } else {\n+            headerAndPayloadWithBrokerEntryMetadata.readerIndex(readerIndex);\n+        }\n+        return headerAndPayloadWithBrokerEntryMetadata;\n+    }\n+\n+    public static PulsarApi.BrokerEntryMetadata parseBrokerEntryMetadataIfExist(\n+            ByteBuf headerAndPayloadWithBrokerEntryMetadata) {\n+        int readerIndex = headerAndPayloadWithBrokerEntryMetadata.readerIndex();\n+        if (headerAndPayloadWithBrokerEntryMetadata.readShort() == magicBrokerEntryMetadata) {\n+            int brokerEntryMetadataSize = headerAndPayloadWithBrokerEntryMetadata.readInt();\n+            int writerIndex = headerAndPayloadWithBrokerEntryMetadata.writerIndex();\n+            headerAndPayloadWithBrokerEntryMetadata.writerIndex(headerAndPayloadWithBrokerEntryMetadata.readerIndex()\n+                    + brokerEntryMetadataSize);\n+            ByteBufCodedInputStream brokerEntryMetadataInputStream =\n+                    ByteBufCodedInputStream.get(headerAndPayloadWithBrokerEntryMetadata);\n+            PulsarApi.BrokerEntryMetadata.Builder builder =  PulsarApi.BrokerEntryMetadata.newBuilder();\n+            try {\n+                builder.mergeFrom(brokerEntryMetadataInputStream, null).build();\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQxNjEyMQ==", "bodyText": "Caller of this method is MessageImpl.deserializeBrokerEntryMetaDataFirst and all callers of MessageImpl.deserializeBrokerEntryMetaDataFirst has a try-catch block already.", "url": "https://github.com/apache/pulsar/pull/8618#discussion_r541416121", "createdAt": "2020-12-11T23:36:37Z", "author": {"login": "aloyszhang"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Commands.java", "diffHunk": "@@ -1920,6 +1929,72 @@ private static ByteBufPair serializeCommandSendWithSize(BaseCommand.Builder cmdB\n         return command;\n     }\n \n+    public static ByteBuf addBrokerEntryMetadata(ByteBuf headerAndPayload,\n+                                                 Set<BrokerEntryMetadataInterceptor> interceptors) {\n+        //   | BROKER_ENTRY_METADATA_MAGIC_NUMBER | BROKER_ENTRY_METADATA_SIZE |         BROKER_ENTRY_METADATA         |\n+        //   |         2 bytes                    |       4 bytes              |    BROKER_ENTRY_METADATA_SIZE bytes   |\n+\n+        PulsarApi.BrokerEntryMetadata.Builder brokerMetadataBuilder = PulsarApi.BrokerEntryMetadata.newBuilder();\n+        for (BrokerEntryMetadataInterceptor interceptor : interceptors) {\n+            interceptor.intercept(brokerMetadataBuilder);\n+        }\n+        PulsarApi.BrokerEntryMetadata brokerEntryMetadata = brokerMetadataBuilder.build();\n+        int brokerMetaSize = brokerEntryMetadata.getSerializedSize();\n+        ByteBuf brokerMeta =\n+                PulsarByteBufAllocator.DEFAULT.buffer(brokerMetaSize + 6, brokerMetaSize + 6);\n+        brokerMeta.writeShort(Commands.magicBrokerEntryMetadata);\n+        brokerMeta.writeInt(brokerMetaSize);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(brokerMeta);\n+        try {\n+            brokerEntryMetadata.writeTo(outStream);\n+        } catch (IOException e) {\n+            // This is in-memory serialization, should not fail\n+            throw new RuntimeException(e);\n+        }\n+        outStream.recycle();\n+\n+        CompositeByteBuf compositeByteBuf = PulsarByteBufAllocator.DEFAULT.compositeBuffer();\n+        compositeByteBuf.addComponents(true, brokerMeta, headerAndPayload);\n+        return compositeByteBuf;\n+    }\n+\n+    public static ByteBuf skipBrokerEntryMetadataIfExist(ByteBuf headerAndPayloadWithBrokerEntryMetadata) {\n+        int readerIndex = headerAndPayloadWithBrokerEntryMetadata.readerIndex();\n+        if (headerAndPayloadWithBrokerEntryMetadata.readShort() == magicBrokerEntryMetadata) {\n+            int brokerEntryMetadataSize = headerAndPayloadWithBrokerEntryMetadata.readInt();\n+            headerAndPayloadWithBrokerEntryMetadata.readerIndex(headerAndPayloadWithBrokerEntryMetadata.readerIndex()\n+                    + brokerEntryMetadataSize);\n+        } else {\n+            headerAndPayloadWithBrokerEntryMetadata.readerIndex(readerIndex);\n+        }\n+        return headerAndPayloadWithBrokerEntryMetadata;\n+    }\n+\n+    public static PulsarApi.BrokerEntryMetadata parseBrokerEntryMetadataIfExist(\n+            ByteBuf headerAndPayloadWithBrokerEntryMetadata) {\n+        int readerIndex = headerAndPayloadWithBrokerEntryMetadata.readerIndex();\n+        if (headerAndPayloadWithBrokerEntryMetadata.readShort() == magicBrokerEntryMetadata) {\n+            int brokerEntryMetadataSize = headerAndPayloadWithBrokerEntryMetadata.readInt();\n+            int writerIndex = headerAndPayloadWithBrokerEntryMetadata.writerIndex();\n+            headerAndPayloadWithBrokerEntryMetadata.writerIndex(headerAndPayloadWithBrokerEntryMetadata.readerIndex()\n+                    + brokerEntryMetadataSize);\n+            ByteBufCodedInputStream brokerEntryMetadataInputStream =\n+                    ByteBufCodedInputStream.get(headerAndPayloadWithBrokerEntryMetadata);\n+            PulsarApi.BrokerEntryMetadata.Builder builder =  PulsarApi.BrokerEntryMetadata.newBuilder();\n+            try {\n+                builder.mergeFrom(brokerEntryMetadataInputStream, null).build();\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTQxMQ=="}, "originalCommit": {"oid": "6e2d9710f38ac1e1ed16d716bd6537c0b1feeb1e"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2814, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}