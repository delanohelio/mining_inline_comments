{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjEyMDkx", "number": 6874, "title": "Add dynamodb streams source", "bodyText": "Motivation\nThe goal is to allow consuming dynamodb streams directly into pulsar\nModifications\nI created a new source for dynamo, which shares less code than ideal with the kinesis source, since the dynamodb kinesis client adapter supports KCL v1.x only, while, the kinesis source is using KCL v2.x.  I also abstracted the aws credential management pieces into their own package.\nVerifying this change\nCreate a dynamodb table with streams enabled.  Configure this connector with the stream ARN and appropriate credentials.  Create/update an entry in the table and ensure it is written to pulsar by the connector.\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): yes\n(Upgrades the aws sdk to a newer patch version that supports dynamodb ondemand tables)\nThe public API: yes\nThe AwsCredentialProviderPlugin are copied from the kinesis package to the aws package, and the old ones are deprecated.\nThe schema: no\nThe default values of configurations: no\nThe wire protocol: no\nThe rest endpoints: no\nThe admin cli options: no\nAnything that affects deployment: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? yes\nIf yes, how is the feature documented? docs\nIf a feature is not applicable for documentation, explain why? n/a\nIf a feature is not documented yet in this PR, please create a followup issue for adding the documentation", "createdAt": "2020-05-04T22:11:11Z", "url": "https://github.com/apache/pulsar/pull/6874", "merged": true, "mergeCommit": {"oid": "deea61ed8374af62686ed6ff9d8fa50e3eac8172"}, "closed": true, "closedAt": "2020-05-19T15:16:52Z", "author": {"login": "maths22"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceG4EcgH2gAyNDEzMjEyMDkxOjZhZjkyYTVlZGI3MTUyNzA3YmZiYmYwOTc5NmFmMTlhZDYzNmRhZjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci1D2igFqTQxNDQ4MjQ4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6af92a5edb7152707bfbbf09796af19ad636daf8", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/6af92a5edb7152707bfbbf09796af19ad636daf8", "committedDate": "2020-05-04T22:04:29Z", "message": "Add dynamodb streams source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/e1a9d05b727e5b1f90128c96e3919156a1e1a5e9", "committedDate": "2020-05-04T22:18:56Z", "message": "Fix duplicated file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDAyNzU3", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-405402757", "createdAt": "2020-05-04T22:55:03Z", "commit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NTowM1rOGQVFnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NTowM1rOGQVFnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NTkwMw==", "bodyText": "can we use the aws-sdk.version defined in the top level pom.xml here? That may help prevent some version conflicts if someone else loads aws-java-sdk-sts but does use that variable", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419775903", "createdAt": "2020-05-04T22:55:03Z", "author": {"login": "addisonj"}, "path": "pulsar-io/aws/pom.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-aws</artifactId>\n+  <name>Pulsar IO :: IO AWS</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.pulsar</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- aws dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-sts</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDAzMjkw", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-405403290", "createdAt": "2020-05-04T22:56:31Z", "commit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NjozMVrOGQVHiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NjozMVrOGQVHiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NjM5Mg==", "bodyText": "does pulling this in get the amazon-kinesis-client library via a transitive dep?", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419776392", "createdAt": "2020-05-04T22:56:31Z", "author": {"login": "addisonj"}, "path": "pulsar-io/dynamodb/pom.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.apache.pulsar</groupId>\n+    <artifactId>pulsar-io</artifactId>\n+    <version>2.6.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>pulsar-io-dynamodb</artifactId>\n+  <name>Pulsar IO :: DynamoDB</name>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-core</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-functions-instance</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>${project.groupId}</groupId>\n+      <artifactId>pulsar-io-aws</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-yaml</artifactId>\n+    </dependency>\n+\n+    <!-- add cbor for kinesis-client to fix dep conflict -->\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-cbor</artifactId>\n+      <version>${jackson.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+    </dependency>\n+\n+    <!-- dynamodb dependencies -->\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>aws-java-sdk-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.amazonaws</groupId>\n+      <artifactId>dynamodb-streams-kinesis-adapter</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21704e14e0334242f8bb26fce31037bf32c1aee5", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/21704e14e0334242f8bb26fce31037bf32c1aee5", "committedDate": "2020-05-05T00:33:33Z", "message": "Clean up dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjMwMjMw", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-405630230", "createdAt": "2020-05-05T09:34:18Z", "commit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozNDoxOFrOGQhl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozODozM1rOGQhvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MDc4MQ==", "bodyText": "@Data already contains @EqualsAndHashCode", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419980781", "createdAt": "2020-05-05T09:34:18Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStreamExtended;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.annotations.FieldDoc;\n+\n+import software.amazon.awssdk.regions.Region;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@Data\n+@EqualsAndHashCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4MzE3OA==", "bodyText": "Please use template strings in logs:\nlog.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r419983178", "createdAt": "2020-05-05T09:38:33Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing \" + processRecordsInput.getRecords().size() + \" records from \" + kinesisShardId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9d05b727e5b1f90128c96e3919156a1e1a5e9"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b4818b828ec430d900b7c10c619543fb459c13b", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/1b4818b828ec430d900b7c10c619543fb459c13b", "committedDate": "2020-05-05T14:32:30Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/39af5386c46606c2a7831c761a0412b832a8b292", "committedDate": "2020-05-05T15:01:03Z", "message": "Update docs + distribution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbdd1f941f8291fe55ff3f22a93e3d7fc5a57bc7", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/fbdd1f941f8291fe55ff3f22a93e3d7fc5a57bc7", "committedDate": "2020-05-05T14:43:30Z", "message": "Update docs + distribution"}, "afterCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/39af5386c46606c2a7831c761a0412b832a8b292", "committedDate": "2020-05-05T15:01:03Z", "message": "Update docs + distribution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzY1NjQ2", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-408765646", "createdAt": "2020-05-10T17:34:27Z", "commit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzozNDoyOFrOGTGDjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNzo1NzoxOFrOGTGOTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NTM0MQ==", "bodyText": "This java comment can be removed or a meaningful description should be added.", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422675341", "createdAt": "2020-05-10T17:34:28Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+import java.net.InetAddress;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.stream.Stream;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.AmazonDynamoDBStreamsAdapterClient;\n+import com.amazonaws.services.dynamodbv2.streamsadapter.StreamsWorkerFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessorFactory;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.KinesisClientLibConfiguration;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.Worker;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.io.aws.AbstractAwsConnector;\n+import org.apache.pulsar.io.aws.AwsCredentialProviderPlugin;\n+import org.apache.pulsar.io.core.Source;\n+import org.apache.pulsar.io.core.SourceContext;\n+import org.apache.pulsar.io.core.annotations.Connector;\n+import org.apache.pulsar.io.core.annotations.IOType;\n+\n+/**\n+ * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzA2MA==", "bodyText": "These boilerplate getters can be generated by the Lombok annotation \u2014 @Getter", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677060", "createdAt": "2020-05-10T17:48:41Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    private final Optional<String> key;\n+    private final byte[] value;\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();\n+    \n+    public StreamsRecord(com.amazonaws.services.kinesis.model.Record record) {\n+//        special-case the handling of dynamo records\n+        if (record instanceof RecordAdapter) {\n+            com.amazonaws.services.dynamodbv2.model.Record dynamoRecord = ((RecordAdapter) record).getInternalObject();\n+            this.key = Optional.of(dynamoRecord.getEventID());\n+            setProperty(EVENT_NAME, dynamoRecord.getEventName());\n+            setProperty(SEQUENCE_NUMBER, dynamoRecord.getDynamodb().getSequenceNumber());\n+        } else {\n+            this.key = Optional.of(record.getPartitionKey());\n+            setProperty(ARRIVAL_TIMESTAMP, record.getApproximateArrivalTimestamp().toString());\n+            setProperty(ENCRYPTION_TYPE, record.getEncryptionType());\n+            setProperty(PARTITION_KEY, record.getPartitionKey());\n+            setProperty(SEQUENCE_NUMBER, record.getSequenceNumber());\n+\n+        }\n+\n+        if (StringUtils.isBlank(record.getEncryptionType())) {\n+            String s = null;\n+            try {\n+                s = decoder.decode(record.getData()).toString();\n+            } catch (CharacterCodingException e) {\n+               // Ignore\n+            }\n+            this.value = (s != null) ? s.getBytes() : null;\n+        } else {\n+            // Who knows?\n+            this.value = null;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzIyNw==", "bodyText": "It can be converted to JavaDoc", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677227", "createdAt": "2020-05-10T17:50:28Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+// This is a direct adaptation of the kinesis record for kcl v1; no dynamo-specific logic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3NzYyNg==", "bodyText": "The recommendation for this project is to use separate import statements instead of *", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422677626", "createdAt": "2020-05-10T17:53:24Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/DynamoDBSourceConfig.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatch;\n+import com.amazonaws.services.cloudwatch.AmazonCloudWatchClientBuilder;\n+import com.amazonaws.services.dynamodbv2.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3ODA5Mg==", "bodyText": "I'm wondering how much logs it will produce \ud83e\udd14", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r422678092", "createdAt": "2020-05-10T17:57:18Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecordProcessor.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.InvalidStateException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.KinesisClientLibDependencyException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ShutdownException;\n+import com.amazonaws.services.kinesis.clientlibrary.exceptions.ThrottlingException;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorCheckpointer;\n+import com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor;\n+import com.amazonaws.services.kinesis.clientlibrary.types.InitializationInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput;\n+import com.amazonaws.services.kinesis.clientlibrary.types.ShutdownInput;\n+import com.amazonaws.services.kinesis.model.Record;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+@Slf4j\n+// This is a direct adaptation of the kinesis record processor for kcl v1; no dynamo-specific logic\n+public class StreamsRecordProcessor implements IRecordProcessor {\n+\n+    private final int numRetries;\n+    private final long checkpointInterval;\n+    private final long backoffTime;\n+\n+    private final LinkedBlockingQueue<StreamsRecord> queue;\n+    private long nextCheckpointTimeInNanos;\n+    private String kinesisShardId;\n+    \n+    public StreamsRecordProcessor(LinkedBlockingQueue<StreamsRecord> queue, DynamoDBSourceConfig config) {\n+        this.queue = queue;\n+        this.checkpointInterval = config.getCheckpointInterval();\n+        this.numRetries = config.getNumRetries();\n+        this.backoffTime = config.getBackoffTime();\n+    }\n+\n+    private void checkpoint(IRecordProcessorCheckpointer checkpointer) {\n+        log.info(\"Checkpointing shard \" + kinesisShardId);\n+        \n+        for (int i = 0; i < numRetries; i++) {\n+            try {\n+                checkpointer.checkpoint();\n+                break;\n+            } catch (ShutdownException se) {\n+                // Ignore checkpoint if the processor instance has been shutdown.\n+                log.info(\"Caught shutdown exception, skipping checkpoint.\", se);\n+                break;\n+            } catch (InvalidStateException e) {\n+                log.error(\"Cannot save checkpoint to the DynamoDB table.\", e);\n+                break;\n+            } catch (ThrottlingException | KinesisClientLibDependencyException e) {\n+                // Back off and re-attempt checkpoint upon transient failures\n+                if (i >= (numRetries - 1)) {\n+                    log.error(\"Checkpoint failed after \" + (i + 1) + \"attempts.\", e);\n+                    break;\n+                }\n+            }\n+\n+            try {\n+                Thread.sleep(backoffTime);\n+            } catch (InterruptedException e) {\n+                log.debug(\"Interrupted sleep\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize(InitializationInput initializationInput) {\n+        kinesisShardId = initializationInput.getShardId();\n+    }\n+\n+    @Override\n+    public void processRecords(ProcessRecordsInput processRecordsInput) {\n+\n+        log.info(\"Processing {} records from {}\", processRecordsInput.getRecords().size(), kinesisShardId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39af5386c46606c2a7831c761a0412b832a8b292"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859", "committedDate": "2020-05-11T15:53:40Z", "message": "Respond to PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTU0Nzc4", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-412154778", "createdAt": "2020-05-14T20:21:10Z", "commit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMToxMFrOGVsyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMjoxMVrOGVs0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzA0Mw==", "bodyText": "This variable should be renamed to properties if they should be attached to the record. And the type can be changed to Map<String, String>", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407043", "createdAt": "2020-05-14T20:21:10Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter\n+    private final Optional<String> key;\n+    @Getter\n+    private final byte[] value;\n+    @Getter\n+    private final HashMap<String, String> userProperties = new HashMap<String, String> ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzUyNw==", "bodyText": "It should be fine to put only one @Getter for the class instead of adding them to every field", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r425407527", "createdAt": "2020-05-14T20:22:11Z", "author": {"login": "vzhikserg"}, "path": "pulsar-io/dynamodb/src/main/java/org/apache/pulsar/io/dynamodb/StreamsRecord.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.io.dynamodb;\n+\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.amazonaws.services.dynamodbv2.streamsadapter.model.RecordAdapter;\n+import lombok.Getter;\n+import org.apache.pulsar.functions.api.Record;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+/**\n+ *  This is a direct adaptation of the kinesis record for kcl v1,\n+ *  with a little branching added for dynamo-specific logic.\n+ */\n+\n+public class StreamsRecord implements Record<byte[]> {\n+    \n+    public static final String ARRIVAL_TIMESTAMP = \"ARRIVAL_TIMESTAMP\";\n+    public static final String ENCRYPTION_TYPE = \"ENCRYPTION_TYPE\";\n+    public static final String PARTITION_KEY = \"PARTITION_KEY\";\n+    public static final String SEQUENCE_NUMBER = \"SEQUENCE_NUMBER\";\n+    public static final String EVENT_NAME = \"EVENT_NAME\";\n+\n+    private static final CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTczMjI4", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-413573228", "createdAt": "2020-05-18T13:04:44Z", "commit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNDo0NFrOGW2ORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNDo0NFrOGW2ORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMDI0Nw==", "bodyText": "As you described, it's better to keep backward compatibility.", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r426610247", "createdAt": "2020-05-18T13:04:44Z", "author": {"login": "codelipenghui"}, "path": "site2/docs/io-kinesis-sink.md", "diffHunk": "@@ -19,20 +19,20 @@ The configuration of the Kinesis sink connector has the following property.\n `awsEndpoint`|String|false|\" \" (empty string)|The Kinesis end-point URL, which can be found at [here](https://docs.aws.amazon.com/general/latest/gr/rande.html).\n `awsRegion`|String|false|\" \" (empty string)|The AWS region. <br/><br/>**Example**<br/> us-west-1, us-west-2\n `awsKinesisStreamName`|String|true|\" \" (empty string)|The Kinesis stream name.\n-`awsCredentialPluginName`|String|false|\" \" (empty string)|The fully-qualified class name of implementation of {@inject: github:`AwsCredentialProviderPlugin`:/pulsar-io/kinesis/src/main/java/org/apache/pulsar/io/kinesis/AwsCredentialProviderPlugin.java}. <br/><br/>It is a factory class which creates an AWSCredentialsProvider that is used by Kinesis sink. <br/><br/>If it is empty, the Kinesis sink creates a default AWSCredentialsProvider which accepts json-map of credentials in `awsCredentialPluginParam`.\n+`awsCredentialPluginName`|String|false|\" \" (empty string)|The fully-qualified class name of implementation of {@inject: github:`AwsCredentialProviderPlugin`:/pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AwsCredentialProviderPlugin.java}. <br/><br/>It is a factory class which creates an AWSCredentialsProvider that is used by Kinesis sink. <br/><br/>If it is empty, the Kinesis sink creates a default AWSCredentialsProvider which accepts json-map of credentials in `awsCredentialPluginParam`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fc5f42e3ccbb3d89cbc734ce6f05c6aaeb1859"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e", "author": {"user": {"login": "maths22", "name": "Jacob Burroughs"}}, "url": "https://github.com/apache/pulsar/commit/2d81f57374b90512e0060d180af2fe2a324d2a8e", "committedDate": "2020-05-18T14:51:59Z", "message": "Restore kinesis cred plugins for BC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTg3Mzg4", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-413987388", "createdAt": "2020-05-18T22:46:49Z", "commit": {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo0OVrOGXJ5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo0OVrOGXJ5IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUxMg==", "bodyText": "Just out of curiosity, what was changed here?", "url": "https://github.com/apache/pulsar/pull/6874#discussion_r426932512", "createdAt": "2020-05-18T22:46:49Z", "author": {"login": "sijie"}, "path": "pulsar-io/aws/src/main/java/org/apache/pulsar/io/aws/AbstractAwsConnector.java", "diffHunk": "@@ -79,16 +77,19 @@ public static AwsCredentialProviderPlugin createCredentialProviderWithPlugin(Str\n      * @param awsCredentialPluginParam\n      * @return\n      */\n-    protected AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n+    public AwsCredentialProviderPlugin defaultCredentialProvider(String awsCredentialPluginParam) {\n         Map<String, String> credentialMap = new Gson().fromJson(awsCredentialPluginParam,\n                 new TypeToken<Map<String, String>>() {\n                 }.getType());\n         String accessKey = credentialMap.get(ACCESS_KEY_NAME);\n         String secretKey = credentialMap.get(SECRET_KEY_NAME);\n-        checkArgument(isNotBlank(accessKey) && isNotBlank(secretKey),\n-                String.format(\n-                        \"Default %s and %s must be present into json-map if AwsCredentialProviderPlugin not provided\",\n-                        ACCESS_KEY_NAME, SECRET_KEY_NAME));\n+        if (!(StringUtils.isNotBlank(accessKey) && StringUtils.isNotBlank(secretKey))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDgyNDgy", "url": "https://github.com/apache/pulsar/pull/6874#pullrequestreview-414482482", "createdAt": "2020-05-19T14:08:41Z", "commit": {"oid": "2d81f57374b90512e0060d180af2fe2a324d2a8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3632, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}