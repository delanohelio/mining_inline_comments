{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDM3MzY3", "number": 6760, "title": "[pulsar-client] Add support to load tls certs/key dynamically from inputstream", "bodyText": "Motivation\nRight now, Pulsar-client provides tls authentication support and default TLS provider AuthenticationTls expects file path of cert and key files. However, there are usescases where it will be difficult for user-applications to store certs/key file locally for tls authentication.\neg:\n\nApplications running on docker or K8s containers will not have certs at defined location and app uses KMS or various key-vault system whose API return streams of certs.\nOperationally hard to manage key rotation in containers\nNeed to avoid storing key/trust store files on file system for stronger security\n\nTherefore, it's good to have mechanism in default AuthenticationTls provider to read certs from memory/stream without storing certs on file-system.\nModification\nAdd Stream support in AuthenticationTls to provide X509Certs and PrivateKey which also performs auto-refresh when stream changes in a given provider.\nAuthenticationTls auth = new AuthenticationTls(certStreamProvider, keyStreamProvider);\n\nIt will be also address: #5241", "createdAt": "2020-04-18T03:33:07Z", "url": "https://github.com/apache/pulsar/pull/6760", "merged": true, "mergeCommit": {"oid": "3b48df1577a43509e1fa9afb01243dd87ea8026e"}, "closed": true, "closedAt": "2020-04-22T00:05:35Z", "author": {"login": "rdhabalia"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYtdhHAH2gAyNDA1NDM3MzY3OjEzYzFlMmQ4N2I0Nzk4ZGRmNzZkZGNlMjhhYmM5NzRiMjQwZTBmODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZaV8EgFqTM5NjIxOTc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86", "author": {"user": {"login": "rdhabalia", "name": "Rajan Dhabalia"}}, "url": "https://github.com/apache/pulsar/commit/13c1e2d87b4798ddf76ddce28abc974b240e0f86", "committedDate": "2020-04-18T03:38:14Z", "message": "[pulsar-client] Add support to load tls certs/key dynamically from input-stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c929c672fd4f6290e75d5dd752c33c2e31a0617", "author": {"user": {"login": "rdhabalia", "name": "Rajan Dhabalia"}}, "url": "https://github.com/apache/pulsar/commit/7c929c672fd4f6290e75d5dd752c33c2e31a0617", "committedDate": "2020-04-18T03:30:54Z", "message": "[pulsar-client] Add support to load tls certs/key dynamically from input-stream"}, "afterCommit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86", "author": {"user": {"login": "rdhabalia", "name": "Rajan Dhabalia"}}, "url": "https://github.com/apache/pulsar/commit/13c1e2d87b4798ddf76ddce28abc974b240e0f86", "committedDate": "2020-04-18T03:38:14Z", "message": "[pulsar-client] Add support to load tls certs/key dynamically from input-stream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTEyNzAy", "url": "https://github.com/apache/pulsar/pull/6760#pullrequestreview-395912702", "createdAt": "2020-04-18T13:10:28Z", "commit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzoxMDoyOFrOGHq75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzoxMDoyOFrOGHq75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NjY3OQ==", "bodyText": "This could be removed?", "url": "https://github.com/apache/pulsar/pull/6760#discussion_r410696679", "createdAt": "2020-04-18T13:10:28Z", "author": {"login": "jiazhai"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/util/SecurityUtility.java", "diffHunk": "@@ -238,24 +240,53 @@ public static SSLContext createSslContext(boolean allowInsecureConnection, Certi\n         }\n \n         try (FileInputStream input = new FileInputStream(certFilePath)) {\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(input);\n-            certificates = collection.toArray(new X509Certificate[collection.size()]);\n+            certificates = loadCertificatesFromPemStream(input);\n         } catch (GeneralSecurityException | IOException e) {\n             throw new KeyManagementException(\"Certificate loading error\", e);\n         }\n \n         return certificates;\n     }\n \n+    public static X509Certificate[] loadCertificatesFromPemStream(InputStream inStream) throws KeyManagementException  {\n+        if (inStream == null) {\n+            return null;\n+        }\n+        CertificateFactory cf;\n+        try {\n+            cf = CertificateFactory.getInstance(\"X.509\");\n+            Collection<X509Certificate> collection = (Collection<X509Certificate>) cf.generateCertificates(inStream);\n+            return collection.toArray(new X509Certificate[collection.size()]);\n+        } catch (CertificateException e) {\n+            throw new KeyManagementException(\"Certificate loading error\", e);\n+        }\n+    }\n+\n     public static PrivateKey loadPrivateKeyFromPemFile(String keyFilePath) throws KeyManagementException {\n         PrivateKey privateKey = null;\n \n         if (keyFilePath == null || keyFilePath.isEmpty()) {\n             return privateKey;\n         }\n \n-        try (BufferedReader reader = new BufferedReader(new FileReader(keyFilePath))) {\n+        try (FileInputStream input = new FileInputStream(keyFilePath)) {\n+            privateKey = loadPrivateKeyFromPemStream(input);\n+        } catch (IOException e) {\n+            throw new KeyManagementException(\"Private key loading error\", e);\n+        }\n+\n+        return privateKey;\n+    }\n+\n+    public static PrivateKey loadPrivateKeyFromPemStream(InputStream inStream) throws KeyManagementException {\n+        PrivateKey privateKey = null;\n+\n+        if (inStream == null) {\n+            return privateKey;\n+        }\n+\n+        //TODO: check if bufferReader should be closed or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c1e2d87b4798ddf76ddce28abc974b240e0f86"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5662bb8bb642defe96c157cc8436d414b4fa14", "author": {"user": {"login": "rdhabalia", "name": "Rajan Dhabalia"}}, "url": "https://github.com/apache/pulsar/commit/6c5662bb8bb642defe96c157cc8436d414b4fa14", "committedDate": "2020-04-19T23:02:41Z", "message": "change interfrace with ByteArrayInputStream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDkyMDIx", "url": "https://github.com/apache/pulsar/pull/6760#pullrequestreview-396092021", "createdAt": "2020-04-20T01:29:27Z", "commit": {"oid": "6c5662bb8bb642defe96c157cc8436d414b4fa14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjE5Nzc2", "url": "https://github.com/apache/pulsar/pull/6760#pullrequestreview-396219776", "createdAt": "2020-04-20T07:55:41Z", "commit": {"oid": "6c5662bb8bb642defe96c157cc8436d414b4fa14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3570, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}