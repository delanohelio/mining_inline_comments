{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NjMzOTEw", "number": 9039, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTowMDowN1rOFIsJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDo0NToyMlrOFIvCkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjU2MjY0OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTowMDowN1rOIKwB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMToxOVrOIK9_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0MzU5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n          \n            \n                CompletableFuture<Position> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548143593", "createdAt": "2020-12-23T19:00:07Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjMyMA==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372320", "createdAt": "2020-12-24T04:01:19Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0MzU5Mw=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjU2NTIyOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTowMDo0MlrOIKwDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowMzoyN1rOILBB9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n          \n            \n                CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);\n          \n      \n    \n    \n  \n\nCan we use the java.util.Predicate?", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548144042", "createdAt": "2020-12-23T19:00:42Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzNzUwNw==", "bodyText": "condition of OpFindNewest is  com.google.common.base.Predicate type, so the parameter type here should also be com.google.common.base.Predicate", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548337507", "createdAt": "2020-12-24T01:05:14Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMjEzNA==", "bodyText": "I'd recommend using java.util.Predicate in the interface. You can just write a wrapper to convert a java.util.Predicate to a guava Predicate.", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548422134", "createdAt": "2020-12-24T07:03:27Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/ManagedLedger.java", "diffHunk": "@@ -520,4 +587,14 @@ void asyncSetProperties(Map<String, String> properties, final AsyncCallbacks.Upd\n      * Roll current ledger if it is full\n      */\n     void rollCurrentLedgerIfFull();\n+\n+    /**\n+     * Find position by sequenceId.\n+     * */\n+    CompletableFuture<PositionImpl> asyncFindPosition(com.google.common.base.Predicate<Entry> predicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE0NDA0Mg=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njk2NzAwOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozMDoyNVrOIK0JhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjowOFrOIK9_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTA3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return addEntry(data, batchSize,0, data.length);\n          \n          \n            \n                    return addEntry(data, batchSize, 0, data.length);", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548211077", "createdAt": "2020-12-23T20:30:25Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -550,6 +566,11 @@ public Position addEntry(byte[] data) throws InterruptedException, ManagedLedger\n         return addEntry(data, 0, data.length);\n     }\n \n+    @Override\n+    public Position addEntry(byte[] data, int batchSize) throws InterruptedException, ManagedLedgerException {\n+        return addEntry(data, batchSize,0, data.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ1Mg==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372452", "createdAt": "2020-12-24T04:02:08Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -550,6 +566,11 @@ public Position addEntry(byte[] data) throws InterruptedException, ManagedLedger\n         return addEntry(data, 0, data.length);\n     }\n \n+    @Override\n+    public Position addEntry(byte[] data, int batchSize) throws InterruptedException, ManagedLedgerException {\n+        return addEntry(data, batchSize,0, data.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMTA3Nw=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njk3NjAzOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozMjoyOVrOIK0PbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjoxOVrOIK-ABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMjU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);\n          \n          \n            \n                        log.error(\"[{}] Failed to intercept adding an entry to bookie.\", name, e);", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548212589", "createdAt": "2020-12-23T20:32:29Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -672,8 +747,27 @@ private synchronized void internalAsyncAddEntry(OpAddEntry addOperation) {\n                 addOperation.setCloseWhenDone(true);\n                 STATE_UPDATER.set(this, State.ClosingLedger);\n             }\n+            // interceptor entry before add to bookie\n+            if (beforeAddEntry(addOperation)) {\n+                addOperation.initiate();\n+            }\n+        }\n+    }\n \n-            addOperation.initiate();\n+    private boolean beforeAddEntry(OpAddEntry addOperation) {\n+        // if no interceptor, just return true to make sure addOperation will be initiate()\n+        if (managedLedgerInterceptor == null) {\n+            return true;\n+        }\n+        try {\n+            managedLedgerInterceptor.beforeAddEntry(addOperation, addOperation.getBatchSize());\n+            return true;\n+        } catch (Exception e) {\n+            addOperation.failed(\n+                    new ManagedLedgerInterceptException(\"Interceptor managed ledger before add to bookie failed.\"));\n+            ReferenceCountUtil.release(addOperation.data);\n+            log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ4Nw==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372487", "createdAt": "2020-12-24T04:02:19Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -672,8 +747,27 @@ private synchronized void internalAsyncAddEntry(OpAddEntry addOperation) {\n                 addOperation.setCloseWhenDone(true);\n                 STATE_UPDATER.set(this, State.ClosingLedger);\n             }\n+            // interceptor entry before add to bookie\n+            if (beforeAddEntry(addOperation)) {\n+                addOperation.initiate();\n+            }\n+        }\n+    }\n \n-            addOperation.initiate();\n+    private boolean beforeAddEntry(OpAddEntry addOperation) {\n+        // if no interceptor, just return true to make sure addOperation will be initiate()\n+        if (managedLedgerInterceptor == null) {\n+            return true;\n+        }\n+        try {\n+            managedLedgerInterceptor.beforeAddEntry(addOperation, addOperation.getBatchSize());\n+            return true;\n+        } catch (Exception e) {\n+            addOperation.failed(\n+                    new ManagedLedgerInterceptException(\"Interceptor managed ledger before add to bookie failed.\"));\n+            ReferenceCountUtil.release(addOperation.data);\n+            log.error(\"[{}] Failed to interceptor entry before add to bookie.\", name, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxMjU4OQ=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njk4NjE3OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNDozN1rOIK0V5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjoyNFrOIK-AEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDI0NQ==", "bodyText": "Can you add the interface annotations to the new interface? See https://github.com/apache/pulsar/wiki/PIP-72%3A-Introduce-Pulsar-Interface-Taxonomy%3A-Audience-and-Stability-Classification", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548214245", "createdAt": "2020-12-23T20:34:37Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjQ5OA==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372498", "createdAt": "2020-12-24T04:02:24Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDI0NQ=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njk4NzE0OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNDo0OVrOIK0Wiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjoyOVrOIK-ANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDQxMQ==", "bodyText": "Can you add javadoc to the methods?", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548214411", "createdAt": "2020-12-23T20:34:49Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {\n+    OpAddEntry beforeAddEntry(OpAddEntry op, int batchSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjUzMw==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372533", "createdAt": "2020-12-24T04:02:29Z", "author": {"login": "aloyszhang"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/interceptor/ManagedLedgerInterceptor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.interceptor;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interceptor for ManagedLedger.\n+ * */\n+public interface ManagedLedgerInterceptor {\n+    OpAddEntry beforeAddEntry(OpAddEntry op, int batchSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDQxMQ=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzAwMDE4OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNzoyOFrOIK0e6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjo0OVrOIK-AWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNjU1Mg==", "bodyText": "kafka offset is not a very good term to be used for describing the index of a message within a log stream. Instead, I would suggest calling it index or logIndex similar to the term used in the Raft algorithm (https://cs.stackexchange.com/questions/97542/raft-algorithm-whats-the-meaning-of-concept-index).", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548216552", "createdAt": "2020-12-23T20:37:28Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.intercept;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.LedgerEntry;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+import org.apache.bookkeeper.mledger.interceptor.ManagedLedgerInterceptor;\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+import org.apache.pulsar.common.intercept.AppendOffsetMetadataInterceptor;\n+import org.apache.pulsar.common.intercept.BrokerEntryMetadataInterceptor;\n+import org.apache.pulsar.common.protocol.Commands;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ManagedLedgerInterceptorImpl implements ManagedLedgerInterceptor {\n+    private static final Logger log = LoggerFactory.getLogger(ManagedLedgerInterceptorImpl.class);\n+    private static final String OFFSET = \"offset\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjU2OQ==", "bodyText": "modify offset to index", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372569", "createdAt": "2020-12-24T04:02:49Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/intercept/ManagedLedgerInterceptorImpl.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.intercept;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.LedgerEntry;\n+import org.apache.bookkeeper.mledger.impl.OpAddEntry;\n+import org.apache.bookkeeper.mledger.interceptor.ManagedLedgerInterceptor;\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+import org.apache.pulsar.common.intercept.AppendOffsetMetadataInterceptor;\n+import org.apache.pulsar.common.intercept.BrokerEntryMetadataInterceptor;\n+import org.apache.pulsar.common.protocol.Commands;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ManagedLedgerInterceptorImpl implements ManagedLedgerInterceptor {\n+    private static final Logger log = LoggerFactory.getLogger(ManagedLedgerInterceptorImpl.class);\n+    private static final String OFFSET = \"offset\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNjU1Mg=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzAzNjM1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDo0NToyMlrOIK02Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMjo1OVrOIK-Adg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIyMjQ5OQ==", "bodyText": "How is the batchSize passed to asyncAddEntry? I failed to see how did you do that in this pull request.\nAt the same time, I think batchSize is not a good term. If I understand this correctly, it should be numberOfMessages, correct?", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548222499", "createdAt": "2020-12-23T20:45:22Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -357,10 +357,7 @@ public void publishMessage(ByteBuf headersAndPayload, PublishContext publishCont\n                 messageDeduplication.isDuplicate(publishContext, headersAndPayload);\n         switch (status) {\n             case NotDup:\n-                // intercept headersAndPayload and add entry metadata\n-                if (appendBrokerEntryMetadata(headersAndPayload, publishContext)) {\n-                    ledger.asyncAddEntry(headersAndPayload, this, publishContext);\n-                }\n+                ledger.asyncAddEntry(headersAndPayload, this, publishContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjU5OA==", "bodyText": "fixed", "url": "https://github.com/apache/pulsar/pull/9039#discussion_r548372598", "createdAt": "2020-12-24T04:02:59Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -357,10 +357,7 @@ public void publishMessage(ByteBuf headersAndPayload, PublishContext publishCont\n                 messageDeduplication.isDuplicate(publishContext, headersAndPayload);\n         switch (status) {\n             case NotDup:\n-                // intercept headersAndPayload and add entry metadata\n-                if (appendBrokerEntryMetadata(headersAndPayload, publishContext)) {\n-                    ledger.asyncAddEntry(headersAndPayload, this, publishContext);\n-                }\n+                ledger.asyncAddEntry(headersAndPayload, this, publishContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIyMjQ5OQ=="}, "originalCommit": {"oid": "a52038b0eaf234175b9803e4f7c63e51eaecc2c4"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}