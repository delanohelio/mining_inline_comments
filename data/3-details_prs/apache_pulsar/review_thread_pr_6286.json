{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzE3NDkx", "number": 6286, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMTo1M1rODetw7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMTo1M1rODetw7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMzNjc4OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-messaging.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMTo1M1rOFoAOZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxODozMFrOFoPhNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTA0Nw==", "bodyText": "I am not sure this clarification here is clear enough. topic-subscription already indicates that messages are fan-out to different subscriptions. The clarification seems to be indicating it is one way or another. I would suggest just adding a tip at the end of this section.\n> If you want to achieve traditional \"fanout pubsub messaging\" among consumers, you can make each consumer ...\n> If you want to achieve \"message queuing\" among cnosumer, you can ...", "url": "https://github.com/apache/pulsar/pull/6286#discussion_r377491047", "createdAt": "2020-02-11T08:21:53Z", "author": {"login": "sijie"}, "path": "site2/docs/concepts-messaging.md", "diffHunk": "@@ -176,9 +176,11 @@ Topic name component | Description\n \n A namespace is a logical nomenclature within a tenant. A tenant can create multiple namespaces via the [admin API](admin-api-namespaces.md#create). For instance, a tenant with different applications can create a separate namespace for each application. A namespace allows the application to create and manage a hierarchy of topics. The topic `my-tenant/app1` is a namespace for the application `app1` for `my-tenant`. You can create any number of [topics](#topics) under the namespace.\n \n-## Subscription modes\n+## Subscriptions\n \n-A subscription is a named configuration rule that determines how messages are delivered to consumers. There are four available subscription modes in Pulsar: [exclusive](#exclusive), [shared](#shared), [failover](#failover), and [key_shared](#key_shared). These modes are illustrated in the figure below.\n+A subscription is a named configuration rule that determines how messages are delivered to consumers.  Each consumer may use a unique subscription name exclusive only to it, and then each consumer on the topic would receive all messages independent of other consumers (fan-out pub-sub messaging).  Alternatively multiple consumers may use the same subscription name in either a shared or failover mode (message queuing). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74852e9788b44d91a1904874f1254487c7cc893e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MTYyMg==", "bodyText": "Updated with your suggestion of making it a separate note and added a bullet point that it isn't just an either-or proposition as you can do both simultaneously.", "url": "https://github.com/apache/pulsar/pull/6286#discussion_r377741622", "createdAt": "2020-02-11T16:18:30Z", "author": {"login": "slominskir"}, "path": "site2/docs/concepts-messaging.md", "diffHunk": "@@ -176,9 +176,11 @@ Topic name component | Description\n \n A namespace is a logical nomenclature within a tenant. A tenant can create multiple namespaces via the [admin API](admin-api-namespaces.md#create). For instance, a tenant with different applications can create a separate namespace for each application. A namespace allows the application to create and manage a hierarchy of topics. The topic `my-tenant/app1` is a namespace for the application `app1` for `my-tenant`. You can create any number of [topics](#topics) under the namespace.\n \n-## Subscription modes\n+## Subscriptions\n \n-A subscription is a named configuration rule that determines how messages are delivered to consumers. There are four available subscription modes in Pulsar: [exclusive](#exclusive), [shared](#shared), [failover](#failover), and [key_shared](#key_shared). These modes are illustrated in the figure below.\n+A subscription is a named configuration rule that determines how messages are delivered to consumers.  Each consumer may use a unique subscription name exclusive only to it, and then each consumer on the topic would receive all messages independent of other consumers (fan-out pub-sub messaging).  Alternatively multiple consumers may use the same subscription name in either a shared or failover mode (message queuing). ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTA0Nw=="}, "originalCommit": {"oid": "74852e9788b44d91a1904874f1254487c7cc893e"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1953, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}