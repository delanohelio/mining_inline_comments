{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTg4NDk0", "number": 8685, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo0OTowM1rOE9Gbtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NjozNFrOE_dpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTAzOTkxOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo0OTowM1rOH5mvOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1NToyMFrOH58SlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NTU2Mw==", "bodyText": "can we add debug log here with epoch.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530165563", "createdAt": "2020-11-25T07:49:03Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxODY3Nw==", "bodyText": "Sure", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530518677", "createdAt": "2020-11-25T16:55:20Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NTU2Mw=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTA1NzM0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo1NDoxN1rOH5m5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1Nzo1N1rOH58ZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODI1MQ==", "bodyText": "can we avoid locking for normal producer usecase?\nif (producers.isEmpty() && producer.getAccessMode() == Shared) {\nreturn CompletableFuture.completedFuture(topicEpoch);\n}", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530168251", "createdAt": "2020-11-25T07:54:17Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTE2Mw==", "bodyText": "+1 to @rdhabalia suggestion", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530175163", "createdAt": "2020-11-25T08:07:58Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODI1MQ=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDMyMw==", "bodyText": "I'm not sure that we can avoid the locking, and I'm not sure that it's something to worry about in the context of adding a producer.\nActually, in the specific case there's still a race condition between updating the producers map, since the update to hasExclusiveProducer and the insertion into producers map should be atomic as well.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530520323", "createdAt": "2020-11-25T16:57:57Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODI1MQ=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTA2Mjk0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo1NjowNFrOH5m9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1ODoxMFrOH58Zcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2OTEwNw==", "bodyText": "is it possible to add producer-type if topic-stats if producer is exclusive for information and debugging.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530169107", "createdAt": "2020-11-25T07:56:04Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMDQzNQ==", "bodyText": "Sure", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530520435", "createdAt": "2020-11-25T16:58:10Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2OTEwNw=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTA3NTkwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo1OTo1MFrOH5nEfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMjoyNlrOH58kYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MTAwNQ==", "bodyText": "I have one suggestion. I am sure you must have thought about it but can't we rename WaitForExclusive with FailOver as it will be consistent to subscription type name and it will need no explanation and easy to understand.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530171005", "createdAt": "2020-11-25T07:59:50Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));\n+                } else {\n+                    // There are currently no existing producers\n+                    hasExclusiveProducer = true;\n+\n+                    CompletableFuture<Optional<Long>> future = incrementTopicEpoch(topicEpoch).thenApply(epoch -> {\n+                        topicEpoch = Optional.of(epoch);\n+                        return topicEpoch;\n+                    });\n+\n+                    future.exceptionally(ex -> {\n+                        hasExclusiveProducer = false;\n+                        return null;\n+                    });\n+                    return future;\n+                }\n+\n+           // case WaitForExclusive:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMzIzMg==", "bodyText": "The problem I see is that it's not exactly the same thing and that can confuse people:\n\nThe semantic of creating a WaitForExclusive is different because the newProducer()....create() call is hanging until that particular producer is selected, unlike in consumers where it's created immediately but it will not receive messages.\nThe use case is mostly different from \"failover\" for reliability purpose, since you can use WaitForExclusive to do leader election", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530523232", "createdAt": "2020-11-25T17:02:26Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));\n+                } else {\n+                    // There are currently no existing producers\n+                    hasExclusiveProducer = true;\n+\n+                    CompletableFuture<Optional<Long>> future = incrementTopicEpoch(topicEpoch).thenApply(epoch -> {\n+                        topicEpoch = Optional.of(epoch);\n+                        return topicEpoch;\n+                    });\n+\n+                    future.exceptionally(ex -> {\n+                        hasExclusiveProducer = false;\n+                        return null;\n+                    });\n+                    return future;\n+                }\n+\n+           // case WaitForExclusive:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MTAwNQ=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTA4NDY2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowMjoyNlrOH5nJvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNDozOFrOH58pfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MjM0OQ==", "bodyText": "shouldn't we need lock here else it may create a race condition and  producer with WaitForExclusive  may wait forever.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530172349", "createdAt": "2020-11-25T08:02:26Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -451,7 +554,44 @@ private boolean isUserProvidedProducerName(Producer producer){\n         return producer.isUserProvidedProducerName() && !producer.getProducerName().startsWith(replicatorPrefix);\n     }\n \n-    protected abstract void handleProducerRemoved(Producer producer);\n+\n+    @Override\n+    public void removeProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        if (producers.remove(producer.getProducerName(), producer)) {\n+            handleProducerRemoved(producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNDU0MQ==", "bodyText": "No lock needed there so far. Other changes are needed for WaitForExclusive, it's not implemented in this PR", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530524541", "createdAt": "2020-11-25T17:04:38Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -451,7 +554,44 @@ private boolean isUserProvidedProducerName(Producer producer){\n         return producer.isUserProvidedProducerName() && !producer.getProducerName().startsWith(replicatorPrefix);\n     }\n \n-    protected abstract void handleProducerRemoved(Producer producer);\n+\n+    @Override\n+    public void removeProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        if (producers.remove(producer.getProducerName(), producer)) {\n+            handleProducerRemoved(producer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MjM0OQ=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTEwNjA1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowODozOVrOH5nWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowODozOVrOH5nWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTUxMQ==", "bodyText": "is it possibile to log and/or to report in the exception who is the current exclusive producer ?", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530175511", "createdAt": "2020-11-25T08:08:39Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTEzMjYyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxNjoxNlrOH5nmDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxNjoxNlrOH5nmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3OTU5Ng==", "bodyText": "nit: please move constants on top of the classs", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530179596", "createdAt": "2020-11-25T08:16:16Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -460,33 +460,37 @@ public synchronized void addFailed(ManagedLedgerException exception, Object ctx)\n     }\n \n     @Override\n-    public void addProducer(Producer producer) throws BrokerServiceException {\n-        checkArgument(producer.getTopic() == this);\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        return super.addProducer(producer).thenApply(epoch -> {\n+            messageDeduplication.producerAdded(producer.getProducerName());\n \n-        lock.readLock().lock();\n-        try {\n-            brokerService.checkTopicNsOwnership(getName());\n+            // Start replication producers if not already\n+            startReplProducers();\n+            return epoch;\n+        });\n+    }\n \n-            checkTopicFenced();\n+    private static final String TOPIC_EPOCH_PROPERTY_NAME = \"pulsar.topic.epoch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTgxNDYxOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/BrokerTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NjozNFrOH9Lkgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjoyNzoyM1rOH9MNGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDc1NA==", "bodyText": "What about setting a fixed seed? In order to have reproducible tests execution.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r533914754", "createdAt": "2020-12-02T05:56:34Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/BrokerTestBase.java", "diffHunk": "@@ -86,5 +88,11 @@ void runMessageExpiryCheck() {\n         }\n     }\n \n+    private static final Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5254a9f38a2c296b249812dca5abc94acb80c87a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyNTE0NA==", "bodyText": "This is just to get random topic names. We don't really need it to be reproducible.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r533925144", "createdAt": "2020-12-02T06:27:23Z", "author": {"login": "merlimat"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/BrokerTestBase.java", "diffHunk": "@@ -86,5 +88,11 @@ void runMessageExpiryCheck() {\n         }\n     }\n \n+    private static final Random random = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDc1NA=="}, "originalCommit": {"oid": "5254a9f38a2c296b249812dca5abc94acb80c87a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2721, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}