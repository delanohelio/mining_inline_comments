{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODQwMjg2", "number": 8372, "title": "[schemaregistry]ProtobufNative Schema Support", "bodyText": "Fixes #7642\nFixes #7674\nMotivation\nProtobuf  Native Schema Support :  PIP-Add ProtobufNative Schema Support \nThis PR proposes to import a new protobuf-v3 schema based on protobuf native Descriptor, Current  ProtobufSchema is based on AVRO schema,  this Causes the following restrictions :\n\nCurrent ProtobufSchema based on avro-protobuf only works when JVM classloader can load Java implementation class of GeneratedMessageV3 . this is unfriendly for long-running server ( e.g. Presto ), restart server for update class is unfriendly.\nDescribe protobuf schema by avro schema will cause losses of information, so based current ProtobufSchema can\u2019t support AutoConsume by DynamicMessage.\nThe amount of support avro language is less than support protobuf language.\n\nIn consideration of backward compatibility , we add a new schema type  SchemaType.PROTOBUF_NATIVE base on protobuf-v3 native Descriptor instead of modify SchemaType.PROTOBUF, aim to support GenericProtobufNativeSchema and AutoConsumeSchema for PROTOBUF.\nModifications\nDescribe in PIP-Add ProtobufNative Schema Support \n\nUsage Example\nCreate ProtobufNative schema Example\nSchemaDefinition def =  SchemaDefinition.<PBMessage>builder()\n                .withAlwaysAllowNull(true)\n                .withPojo(PBMessage.class)\n                .build();\nSchema schema = Schema.PROTOBUFNATIVE(def);\nadmin.schemas().createSchema(topic, schema.getSchemaInfo());\n\nClass-Based schema consumer Example\nConsumer<PBMessage> consumer = client.newConsumer(Schema.PROTOBUFNATIVE(PBMessage.class)).topic(topic)\n                .subscriptionName(\"my-subscription-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n        while (!consumer.hasReachedEndOfTopic()){\n            Message<PBMessage> msg = consumer.receive();\n            PBMessage pBMessage =  msg.getValue();\n            System.out.println(\"getPlatform : \"+ pBMessage.getPlatform());\n        }\n\nProtobufNative AUTO_CONSUME  Example\n Consumer<GenericRecord> consumer = client.newConsumer(Schema.AUTO_CONSUME()).topic(topic)\n                .subscriptionName(\"my-subscription-nameaaa\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n        .subscribe();\n        while (!consumer.hasReachedEndOfTopic()){\n            Message<GenericRecord> msg = consumer.receive() ;\n           // System.out.println(\"GenericRecord :\"+msg.getValue().toString());\n            GenericRecord genericRecord =  msg.getValue();\n            System.out.println(genericRecord.getField(\"platform\"));\n            GenericProtobufNativeRecord genericProtobufNativeRecord = (GenericProtobufNativeRecord)genericRecord;\n            DynamicMessage dynamicMessage = genericProtobufNativeRecord.getProtobufRecord();         \n            String platform = dynamicMessage.getField(dynamicMessage.getDescriptorForType().findFieldByName(\"platform\")).toString();\n            System.out.println(\"platform : \"+ platform);\n        }\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: ( yes )\nThe default values of configurations: (no)\nThe wire protocol: (no)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (PIP-Add ProtobufNative Schema Support )", "createdAt": "2020-10-26T07:42:32Z", "url": "https://github.com/apache/pulsar/pull/8372", "merged": true, "mergeCommit": {"oid": "c01b1eeda3221bdbf863bf0f3f8373e93d90adef"}, "closed": true, "closedAt": "2020-11-17T07:09:13Z", "author": {"login": "hnail"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWPIt6AH2gAyNTA5ODQwMjg2OmM5MTk1ODhmYzA0MWJiNjgzZDc2NzA4MzRjYjJiMmExMTY0OTRiNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdc-qj5gH2gAyNTA5ODQwMjg2OjI1OTdmMmM2Mjg3NzgzYmEyODU3MzdhMjhjYjM5Y2YzZTA1OGFhMzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c919588fc041bb683d7670834cb2b2a116494b5e", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/c919588fc041bb683d7670834cb2b2a116494b5e", "committedDate": "2020-10-26T07:21:40Z", "message": "[WIP]ProtobufNative Schema Support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc698b76317dd148e776c5c9df591f40298cc41", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/4bc698b76317dd148e776c5c9df591f40298cc41", "committedDate": "2020-10-27T03:02:22Z", "message": "commit unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4a5faebec3b593d2b7a721a1af27c4c605dcf4", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/9f4a5faebec3b593d2b7a721a1af27c4c605dcf4", "committedDate": "2020-10-28T03:08:56Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b6686bc2755f3017648a32a9312b4796aa1d149", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/3b6686bc2755f3017648a32a9312b4796aa1d149", "committedDate": "2020-10-28T06:17:40Z", "message": "Merge branch 'master' into support_protobuf_native_schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/9f98f5977ad040743e9d9a9838a0f6d090594ad5", "committedDate": "2020-10-28T06:53:52Z", "message": " fix License check error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3OTQ4Mzcy", "url": "https://github.com/apache/pulsar/pull/8372#pullrequestreview-527948372", "createdAt": "2020-11-11T08:12:19Z", "commit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxMjoxOVrOHxCnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxNDoxOFrOHxCq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTA5OQ==", "bodyText": "why there is \"RootRoot\" in the method name CheckRootRootMessageChange?\nAlso, we need to make the first character low case.", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521185099", "createdAt": "2020-11-11T08:12:19Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/ProtobufNativeSchemaCompatibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.schema;\n+\n+import org.apache.pulsar.broker.service.schema.exceptions.IncompatibleSchemaException;\n+import org.apache.pulsar.client.impl.schema.ProtobufNativeSchemaUtils;\n+import org.apache.pulsar.common.policies.data.SchemaCompatibilityStrategy;\n+import org.apache.pulsar.common.protocol.schema.SchemaData;\n+import org.apache.pulsar.common.schema.SchemaType;\n+\n+import static com.google.protobuf.Descriptors.Descriptor;\n+\n+/**\n+ * The {@link SchemaCompatibilityCheck} implementation for {@link SchemaType#PROTOBUF_NATIVE}.\n+ */\n+public class ProtobufNativeSchemaCompatibilityCheck implements SchemaCompatibilityCheck {\n+\n+    @Override\n+    public SchemaType getSchemaType() {\n+        return SchemaType.PROTOBUF_NATIVE;\n+    }\n+\n+    @Override\n+    public void checkCompatible(SchemaData from, SchemaData to, SchemaCompatibilityStrategy strategy) throws IncompatibleSchemaException {\n+        Descriptor fromDescriptor = ProtobufNativeSchemaUtils.deserialize(from.getData());\n+        Descriptor toDescriptor = ProtobufNativeSchemaUtils.deserialize(to.getData());\n+        switch (strategy) {\n+            case BACKWARD_TRANSITIVE:\n+            case BACKWARD:\n+            case FORWARD_TRANSITIVE:\n+            case FORWARD:\n+            case FULL_TRANSITIVE:\n+            case FULL:\n+                CheckRootRootMessageChange(fromDescriptor, toDescriptor, strategy);\n+                return;\n+            case ALWAYS_COMPATIBLE:\n+                return;\n+            default:\n+                throw new IncompatibleSchemaException(\"Unknown SchemaCompatibilityStrategy\");\n+        }\n+    }\n+\n+    @Override\n+    public void checkCompatible(Iterable<SchemaData> from, SchemaData to, SchemaCompatibilityStrategy strategy) throws IncompatibleSchemaException {\n+        for (SchemaData schemaData : from) {\n+            checkCompatible(schemaData, to, strategy);\n+        }\n+    }\n+\n+    private void CheckRootRootMessageChange(Descriptor fromDescriptor, Descriptor toDescriptor, SchemaCompatibilityStrategy strategy) throws IncompatibleSchemaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTgxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new InvalidSchemaDataException(\"deserialize  ProtobufNative Schema failed\", e);\n          \n          \n            \n                        throw new InvalidSchemaDataException(\"deserialize ProtobufNative Schema failed\", e);", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521185810", "createdAt": "2020-11-11T08:13:54Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/validator/ProtobufNativeSchemaDataValidator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.schema.validator;\n+\n+import com.google.protobuf.Descriptors;\n+import org.apache.pulsar.broker.service.schema.exceptions.InvalidSchemaDataException;\n+import org.apache.pulsar.client.impl.schema.ProtobufNativeSchemaUtils;\n+import org.apache.pulsar.common.protocol.schema.SchemaData;\n+\n+public class ProtobufNativeSchemaDataValidator implements SchemaDataValidator {\n+\n+    @Override\n+    public void validate(SchemaData schemaData) throws InvalidSchemaDataException {\n+        Descriptors.Descriptor descriptor;\n+        try {\n+            descriptor = ProtobufNativeSchemaUtils.deserialize(schemaData.getData());\n+        } catch (Exception e) {\n+            throw new InvalidSchemaDataException(\"deserialize  ProtobufNative Schema failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NjAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new InvalidSchemaDataException(\"protobuf root message Descriptor is null , please recheck rootMessageTypeName or rootFileDescriptorName conf. \");\n          \n          \n            \n                        throw new InvalidSchemaDataException(\"protobuf root message descriptor is null , please recheck rootMessageTypeName or rootFileDescriptorName conf. \");", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521186012", "createdAt": "2020-11-11T08:14:18Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/validator/ProtobufNativeSchemaDataValidator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.schema.validator;\n+\n+import com.google.protobuf.Descriptors;\n+import org.apache.pulsar.broker.service.schema.exceptions.InvalidSchemaDataException;\n+import org.apache.pulsar.client.impl.schema.ProtobufNativeSchemaUtils;\n+import org.apache.pulsar.common.protocol.schema.SchemaData;\n+\n+public class ProtobufNativeSchemaDataValidator implements SchemaDataValidator {\n+\n+    @Override\n+    public void validate(SchemaData schemaData) throws InvalidSchemaDataException {\n+        Descriptors.Descriptor descriptor;\n+        try {\n+            descriptor = ProtobufNativeSchemaUtils.deserialize(schemaData.getData());\n+        } catch (Exception e) {\n+            throw new InvalidSchemaDataException(\"deserialize  ProtobufNative Schema failed\", e);\n+        }\n+        if (descriptor == null) {\n+            throw new InvalidSchemaDataException(\"protobuf root message Descriptor is null , please recheck rootMessageTypeName or rootFileDescriptorName conf. \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTc5MzM4", "url": "https://github.com/apache/pulsar/pull/8372#pullrequestreview-528179338", "createdAt": "2020-11-11T13:40:14Z", "commit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MDoxNFrOHxNj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MToyNlrOHxNm1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDQ0Ng==", "bodyText": "Avoid use import.* here", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521364446", "createdAt": "2020-11-11T13:40:14Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/ProtobufNativeSchemaUtils.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl.schema;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.api.SchemaSerializationException;\n+import org.apache.pulsar.common.protocol.schema.ProtobufNativeSchemaData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.google.protobuf.DescriptorProtos.FileDescriptorProto;\n+import static com.google.protobuf.DescriptorProtos.FileDescriptorSet;\n+import static com.google.protobuf.Descriptors.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NTIwNw==", "bodyText": "Avoid use import.* here", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521365207", "createdAt": "2020-11-11T13:41:26Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/generic/GenericProtobufNativeSchema.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.client.impl.schema.generic;\n+\n+import com.google.protobuf.Descriptors;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.schema.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Njk1Mzgz", "url": "https://github.com/apache/pulsar/pull/8372#pullrequestreview-528695383", "createdAt": "2020-11-12T02:44:31Z", "commit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjo0NDozMVrOHxnFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjo0NDo0OFrOHxnFhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MjU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUFNATIVE(Class<T> clazz) {\n          \n          \n            \n                static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUF_NATIVE(Class<T> clazz) {", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521782576", "createdAt": "2020-11-12T02:44:31Z", "author": {"login": "congbobo184"}, "path": "pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java", "diffHunk": "@@ -251,6 +251,27 @@ default void configureSchemaInfo(String topic, String componentName,\n         return DefaultImplementation.newProtobufSchema(schemaDefinition);\n     }\n \n+    /**\n+     * Create a Protobuf-Native schema type by extracting the fields of the specified class.\n+     *\n+     * @param clazz the Protobuf generated class to be used to extract the schema\n+     * @return a Schema instance\n+     */\n+    static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUFNATIVE(Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MjY2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUFNATIVE(\n          \n          \n            \n                static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUF_NATIVE(", "url": "https://github.com/apache/pulsar/pull/8372#discussion_r521782662", "createdAt": "2020-11-12T02:44:48Z", "author": {"login": "congbobo184"}, "path": "pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java", "diffHunk": "@@ -251,6 +251,27 @@ default void configureSchemaInfo(String topic, String componentName,\n         return DefaultImplementation.newProtobufSchema(schemaDefinition);\n     }\n \n+    /**\n+     * Create a Protobuf-Native schema type by extracting the fields of the specified class.\n+     *\n+     * @param clazz the Protobuf generated class to be used to extract the schema\n+     * @return a Schema instance\n+     */\n+    static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUFNATIVE(Class<T> clazz) {\n+        return DefaultImplementation.newProtobufNativeSchema(SchemaDefinition.builder().withPojo(clazz).build());\n+    }\n+\n+    /**\n+     * Create a Protobuf-Native schema type with schema definition.\n+     *\n+     * @param schemaDefinition schemaDefinition the definition of the schema\n+     * @return a Schema instance\n+     */\n+    static <T extends com.google.protobuf.GeneratedMessageV3> Schema<T> PROTOBUFNATIVE(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f98f5977ad040743e9d9a9838a0f6d090594ad5"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4378645b78ee977edeb4cd8d299ea93bd78ff0ff", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/4378645b78ee977edeb4cd8d299ea93bd78ff0ff", "committedDate": "2020-11-13T07:09:57Z", "message": "Update pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/validator/ProtobufNativeSchemaDataValidator.java\n\nCo-authored-by: Sijie Guo <sg@streamnative.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2487bf25ef6a1d2dd24796d963396fcc02aaf46a", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/2487bf25ef6a1d2dd24796d963396fcc02aaf46a", "committedDate": "2020-11-13T07:10:12Z", "message": "Update pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/validator/ProtobufNativeSchemaDataValidator.java\n\nCo-authored-by: Sijie Guo <sg@streamnative.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb45c1469ff5bfa004c0d20d5279669cd26277bf", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/bb45c1469ff5bfa004c0d20d5279669cd26277bf", "committedDate": "2020-11-13T07:10:31Z", "message": "Update pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java\n\nCo-authored-by: congbo <39078850+congbobo184@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a55bcc897ec45cf6ef436254b53e678d7eca36e", "author": {"user": {"login": "hnail", "name": "hnail"}}, "url": "https://github.com/apache/pulsar/commit/6a55bcc897ec45cf6ef436254b53e678d7eca36e", "committedDate": "2020-11-13T07:10:40Z", "message": "Update pulsar-client-api/src/main/java/org/apache/pulsar/client/api/Schema.java\n\nCo-authored-by: congbo <39078850+congbobo184@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5c5737d3e4fb2d6ab65323fa16d1b3d9d0737f", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/0a5c5737d3e4fb2d6ab65323fa16d1b3d9d0737f", "committedDate": "2020-11-13T08:13:48Z", "message": "Merge branch 'master' of https://github.com/apache/pulsar into support_protobuf_native_schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38e470f68cf89f4959acb5033397c97099b0d17a", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/38e470f68cf89f4959acb5033397c97099b0d17a", "committedDate": "2020-11-13T08:50:18Z", "message": "codeStyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2597f2c6287783ba285737a28cb39cf3e058aa37", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/2597f2c6287783ba285737a28cb39cf3e058aa37", "committedDate": "2020-11-16T06:07:43Z", "message": "codeStyle fix v2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1303, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}