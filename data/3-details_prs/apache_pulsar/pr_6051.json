{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTk3MzY2", "number": 6051, "title": "Expose lastConsumedTimestamp and lastAckedTimestamp to consumer stats", "bodyText": "Master Issue: #6046\nMotivation\nMake people can use the timestamp to tell if acknowledge and consumption\nare happening.\nModifications\n\nAdd lastConsumedTimestamp and lastAckedTimestamp to consume stats\n\nVerify this change\n\nPass the test testConsumerStatsLastTimestamp", "createdAt": "2020-01-14T11:59:38Z", "url": "https://github.com/apache/pulsar/pull/6051", "merged": true, "mergeCommit": {"oid": "57289776ad8305038010b23e49a6b7863ff56d53"}, "closed": true, "closedAt": "2020-02-04T00:16:09Z", "author": {"login": "zymap"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6PnbrgH2gAyMzYyNTk3MzY2OmQyMjI0MmJkNDNjMzFkOTgwZWQzOTk5ZWM2OTEwNjlmNjA4NzEyMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8xTOeAFqTM0NjQwNTMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d22242bd43c31d980ed3999ec691069f60871228", "author": {"user": {"login": "zymap", "name": "Yong Zhang"}}, "url": "https://github.com/apache/pulsar/commit/d22242bd43c31d980ed3999ec691069f60871228", "committedDate": "2020-01-14T11:54:11Z", "message": "Expose lastConsumedTimestamp and lastAckedTimestamp to consumer stats\n---\n\nMaster Issue: #6046\n\n*Motivation*\n\nMake people can use the timestamp to tell if acknowledge and consumption\nare happening.\n\n*Modifications*\n\n- Add lastConsumedTimestamp and lastAckedTimestamp to consume stats\n\n*Verify this change*\n\n- Pass the test `testConsumerStatsLastTimestamp`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTIyMDE5", "url": "https://github.com/apache/pulsar/pull/6051#pullrequestreview-342522019", "createdAt": "2020-01-14T13:16:23Z", "commit": {"oid": "d22242bd43c31d980ed3999ec691069f60871228"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389", "author": {"user": {"login": "zymap", "name": "Yong Zhang"}}, "url": "https://github.com/apache/pulsar/commit/567e6e5b343da5a4f4285e10b5d9feb2dbc1b389", "committedDate": "2020-01-15T05:48:03Z", "message": "* Expose the stats to the subscription stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389", "author": {"user": {"login": "zymap", "name": "Yong Zhang"}}, "url": "https://github.com/apache/pulsar/commit/567e6e5b343da5a4f4285e10b5d9feb2dbc1b389", "committedDate": "2020-01-15T05:48:03Z", "message": "* Expose the stats to the subscription stats"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjQxNzEw", "url": "https://github.com/apache/pulsar/pull/6051#pullrequestreview-343641710", "createdAt": "2020-01-16T02:27:48Z", "commit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTYzNDA3", "url": "https://github.com/apache/pulsar/pull/6051#pullrequestreview-344963407", "createdAt": "2020-01-18T21:25:48Z", "commit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMToyNTo0OVrOFfMKJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMToyNzozNFrOFfMKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTM4Mw==", "bodyText": "don't you need to call #receive to ensure the message is dispatched to the consumer? Otherwise this can easily become a flaky test.", "url": "https://github.com/apache/pulsar/pull/6051#discussion_r368249383", "createdAt": "2020-01-18T21:25:49Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java", "diffHunk": "@@ -948,4 +952,98 @@ public void testCreateNamespaceWithNoClusters() throws PulsarAdminException {\n         assertEquals(admin.namespaces().getNamespaceReplicationClusters(namespace),\n                 Collections.singletonList(localCluster));\n     }\n+\n+    @Test(timeOut = 30000)\n+    public void testConsumerStatsLastTimestamp() throws PulsarClientException, PulsarAdminException, InterruptedException {\n+        long timestamp = System.currentTimeMillis();\n+        final String topicName = \"consumer-stats-\" + timestamp;\n+        final String subscribeName = topicName + \"-test-stats-sub\";\n+        final String topic = \"persistent://prop-xyz/ns1/\" + topicName;\n+        final String producerName = \"producer-\" + topicName;\n+\n+        @Cleanup\n+        PulsarClient client = PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).build();\n+        Producer<byte[]> producer = client.newProducer().topic(topic)\n+            .enableBatching(false)\n+            .producerName(producerName)\n+            .create();\n+\n+        // a. Send a message to the topic.\n+        producer.send(\"message-1\".getBytes(StandardCharsets.UTF_8));\n+\n+        // b. Create a consumer, because there was a message in the topic, the consumer will receive the message pushed\n+        // by the broker, the lastConsumedTimestamp will as the consume subscribe time.\n+        Consumer<byte[]> consumer = client.newConsumer().topic(topic)\n+            .subscriptionName(subscribeName)\n+            .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+            .subscribe();\n+\n+        // Get the consumer stats.\n+        TopicStats topicStats = admin.topics().getStats(topic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTQwOA==", "bodyText": "move this to the line 979", "url": "https://github.com/apache/pulsar/pull/6051#discussion_r368249408", "createdAt": "2020-01-18T21:26:19Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java", "diffHunk": "@@ -948,4 +952,98 @@ public void testCreateNamespaceWithNoClusters() throws PulsarAdminException {\n         assertEquals(admin.namespaces().getNamespaceReplicationClusters(namespace),\n                 Collections.singletonList(localCluster));\n     }\n+\n+    @Test(timeOut = 30000)\n+    public void testConsumerStatsLastTimestamp() throws PulsarClientException, PulsarAdminException, InterruptedException {\n+        long timestamp = System.currentTimeMillis();\n+        final String topicName = \"consumer-stats-\" + timestamp;\n+        final String subscribeName = topicName + \"-test-stats-sub\";\n+        final String topic = \"persistent://prop-xyz/ns1/\" + topicName;\n+        final String producerName = \"producer-\" + topicName;\n+\n+        @Cleanup\n+        PulsarClient client = PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).build();\n+        Producer<byte[]> producer = client.newProducer().topic(topic)\n+            .enableBatching(false)\n+            .producerName(producerName)\n+            .create();\n+\n+        // a. Send a message to the topic.\n+        producer.send(\"message-1\".getBytes(StandardCharsets.UTF_8));\n+\n+        // b. Create a consumer, because there was a message in the topic, the consumer will receive the message pushed\n+        // by the broker, the lastConsumedTimestamp will as the consume subscribe time.\n+        Consumer<byte[]> consumer = client.newConsumer().topic(topic)\n+            .subscriptionName(subscribeName)\n+            .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+            .subscribe();\n+\n+        // Get the consumer stats.\n+        TopicStats topicStats = admin.topics().getStats(topic);\n+        SubscriptionStats subscriptionStats = topicStats.subscriptions.get(subscribeName);\n+        long startConsumedFlowTimestamp = subscriptionStats.lastConsumedFlowTimestamp;\n+        long startAckedTimestampInSubStats = subscriptionStats.lastAckedTimestamp;\n+        ConsumerStats consumerStats = subscriptionStats.consumers.get(0);\n+        long startConsumedTimestampInConsumerStats = consumerStats.lastConsumedTimestamp;\n+        long startAckedTimestampInConsumerStats = consumerStats.lastAckedTimestamp;\n+\n+        // Because the message was pushed by the broker, the consumedTimestamp should not as 0.\n+        assertNotEquals(0, startConsumedTimestampInConsumerStats);\n+        // There is no consumer ack the message, so the lastAckedTimestamp still as 0.\n+        assertEquals(0, startAckedTimestampInConsumerStats);\n+        assertNotEquals(0, startConsumedFlowTimestamp);\n+        assertEquals(0, startAckedTimestampInSubStats);\n+\n+        // c. The Consumer receives the message and acks the message.\n+        Message<byte[]> message = consumer.receive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTQ0MA==", "bodyText": "I wouldn't suggest using sleep here. We should periodically getting the consumer stats until the lastAckedTimestamp get updated.", "url": "https://github.com/apache/pulsar/pull/6051#discussion_r368249440", "createdAt": "2020-01-18T21:27:16Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java", "diffHunk": "@@ -948,4 +952,98 @@ public void testCreateNamespaceWithNoClusters() throws PulsarAdminException {\n         assertEquals(admin.namespaces().getNamespaceReplicationClusters(namespace),\n                 Collections.singletonList(localCluster));\n     }\n+\n+    @Test(timeOut = 30000)\n+    public void testConsumerStatsLastTimestamp() throws PulsarClientException, PulsarAdminException, InterruptedException {\n+        long timestamp = System.currentTimeMillis();\n+        final String topicName = \"consumer-stats-\" + timestamp;\n+        final String subscribeName = topicName + \"-test-stats-sub\";\n+        final String topic = \"persistent://prop-xyz/ns1/\" + topicName;\n+        final String producerName = \"producer-\" + topicName;\n+\n+        @Cleanup\n+        PulsarClient client = PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).build();\n+        Producer<byte[]> producer = client.newProducer().topic(topic)\n+            .enableBatching(false)\n+            .producerName(producerName)\n+            .create();\n+\n+        // a. Send a message to the topic.\n+        producer.send(\"message-1\".getBytes(StandardCharsets.UTF_8));\n+\n+        // b. Create a consumer, because there was a message in the topic, the consumer will receive the message pushed\n+        // by the broker, the lastConsumedTimestamp will as the consume subscribe time.\n+        Consumer<byte[]> consumer = client.newConsumer().topic(topic)\n+            .subscriptionName(subscribeName)\n+            .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+            .subscribe();\n+\n+        // Get the consumer stats.\n+        TopicStats topicStats = admin.topics().getStats(topic);\n+        SubscriptionStats subscriptionStats = topicStats.subscriptions.get(subscribeName);\n+        long startConsumedFlowTimestamp = subscriptionStats.lastConsumedFlowTimestamp;\n+        long startAckedTimestampInSubStats = subscriptionStats.lastAckedTimestamp;\n+        ConsumerStats consumerStats = subscriptionStats.consumers.get(0);\n+        long startConsumedTimestampInConsumerStats = consumerStats.lastConsumedTimestamp;\n+        long startAckedTimestampInConsumerStats = consumerStats.lastAckedTimestamp;\n+\n+        // Because the message was pushed by the broker, the consumedTimestamp should not as 0.\n+        assertNotEquals(0, startConsumedTimestampInConsumerStats);\n+        // There is no consumer ack the message, so the lastAckedTimestamp still as 0.\n+        assertEquals(0, startAckedTimestampInConsumerStats);\n+        assertNotEquals(0, startConsumedFlowTimestamp);\n+        assertEquals(0, startAckedTimestampInSubStats);\n+\n+        // c. The Consumer receives the message and acks the message.\n+        Message<byte[]> message = consumer.receive();\n+        consumer.acknowledge(message);\n+        // Waiting for the ack command send to the broker.\n+        TimeUnit.SECONDS.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTQ2NA==", "bodyText": "same comments as above", "url": "https://github.com/apache/pulsar/pull/6051#discussion_r368249464", "createdAt": "2020-01-18T21:27:34Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/admin/AdminApiTest2.java", "diffHunk": "@@ -948,4 +952,98 @@ public void testCreateNamespaceWithNoClusters() throws PulsarAdminException {\n         assertEquals(admin.namespaces().getNamespaceReplicationClusters(namespace),\n                 Collections.singletonList(localCluster));\n     }\n+\n+    @Test(timeOut = 30000)\n+    public void testConsumerStatsLastTimestamp() throws PulsarClientException, PulsarAdminException, InterruptedException {\n+        long timestamp = System.currentTimeMillis();\n+        final String topicName = \"consumer-stats-\" + timestamp;\n+        final String subscribeName = topicName + \"-test-stats-sub\";\n+        final String topic = \"persistent://prop-xyz/ns1/\" + topicName;\n+        final String producerName = \"producer-\" + topicName;\n+\n+        @Cleanup\n+        PulsarClient client = PulsarClient.builder().serviceUrl(pulsar.getWebServiceAddress()).build();\n+        Producer<byte[]> producer = client.newProducer().topic(topic)\n+            .enableBatching(false)\n+            .producerName(producerName)\n+            .create();\n+\n+        // a. Send a message to the topic.\n+        producer.send(\"message-1\".getBytes(StandardCharsets.UTF_8));\n+\n+        // b. Create a consumer, because there was a message in the topic, the consumer will receive the message pushed\n+        // by the broker, the lastConsumedTimestamp will as the consume subscribe time.\n+        Consumer<byte[]> consumer = client.newConsumer().topic(topic)\n+            .subscriptionName(subscribeName)\n+            .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+            .subscribe();\n+\n+        // Get the consumer stats.\n+        TopicStats topicStats = admin.topics().getStats(topic);\n+        SubscriptionStats subscriptionStats = topicStats.subscriptions.get(subscribeName);\n+        long startConsumedFlowTimestamp = subscriptionStats.lastConsumedFlowTimestamp;\n+        long startAckedTimestampInSubStats = subscriptionStats.lastAckedTimestamp;\n+        ConsumerStats consumerStats = subscriptionStats.consumers.get(0);\n+        long startConsumedTimestampInConsumerStats = consumerStats.lastConsumedTimestamp;\n+        long startAckedTimestampInConsumerStats = consumerStats.lastAckedTimestamp;\n+\n+        // Because the message was pushed by the broker, the consumedTimestamp should not as 0.\n+        assertNotEquals(0, startConsumedTimestampInConsumerStats);\n+        // There is no consumer ack the message, so the lastAckedTimestamp still as 0.\n+        assertEquals(0, startAckedTimestampInConsumerStats);\n+        assertNotEquals(0, startConsumedFlowTimestamp);\n+        assertEquals(0, startAckedTimestampInSubStats);\n+\n+        // c. The Consumer receives the message and acks the message.\n+        Message<byte[]> message = consumer.receive();\n+        consumer.acknowledge(message);\n+        // Waiting for the ack command send to the broker.\n+        TimeUnit.SECONDS.sleep(5);\n+\n+        // Get the consumer stats.\n+        topicStats = admin.topics().getStats(topic);\n+        subscriptionStats = topicStats.subscriptions.get(subscribeName);\n+        long consumedFlowTimestamp = subscriptionStats.lastConsumedFlowTimestamp;\n+        long ackedTimestampInSubStats = subscriptionStats.lastAckedTimestamp;\n+        consumerStats = subscriptionStats.consumers.get(0);\n+        long consumedTimestamp = consumerStats.lastConsumedTimestamp;\n+        long ackedTimestamp = consumerStats.lastAckedTimestamp;\n+\n+        // The lastConsumedTimestamp should same as the last time because the broker does not push any messages and the\n+        // consumer does not pull any messages.\n+        assertEquals(startConsumedTimestampInConsumerStats, consumedTimestamp);\n+        assertTrue(startAckedTimestampInConsumerStats < ackedTimestamp);\n+        assertNotEquals(0, consumedFlowTimestamp);\n+        assertTrue(startAckedTimestampInSubStats < ackedTimestampInSubStats);\n+\n+        // d. Send another messages. The lastConsumedTimestamp should be updated.\n+        producer.send(\"message-2\".getBytes(StandardCharsets.UTF_8));\n+\n+        // e. Receive the message and ack it.\n+        message = consumer.receive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567e6e5b343da5a4f4285e10b5d9feb2dbc1b389"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1711c4c1960db24b022a03dccc31ce25b3f09e6d", "author": {"user": {"login": "zymap", "name": "Yong Zhang"}}, "url": "https://github.com/apache/pulsar/commit/1711c4c1960db24b022a03dccc31ce25b3f09e6d", "committedDate": "2020-01-21T08:15:57Z", "message": "* Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1711c4c1960db24b022a03dccc31ce25b3f09e6d", "author": {"user": {"login": "zymap", "name": "Yong Zhang"}}, "url": "https://github.com/apache/pulsar/commit/1711c4c1960db24b022a03dccc31ce25b3f09e6d", "committedDate": "2020-01-21T08:15:57Z", "message": "* Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDA1MzM2", "url": "https://github.com/apache/pulsar/pull/6051#pullrequestreview-346405336", "createdAt": "2020-01-22T08:16:44Z", "commit": {"oid": "1711c4c1960db24b022a03dccc31ce25b3f09e6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1461, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}