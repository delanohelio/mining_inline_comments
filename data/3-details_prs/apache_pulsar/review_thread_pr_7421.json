{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMDM0Nzk5", "number": 7421, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjowNTo0M1rOEKwdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozOTozNlrOELMQdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE1MTMwOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjowNTo0M1rOGr-l2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjowNTo0M1rOGr-l2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NzQ0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n          \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448767448", "createdAt": "2020-07-02T06:05:43Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE1NjIyOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjowNzo0MVrOGr-opQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjowNzo0MVrOGr-opQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2ODE2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n          \n          \n            \n            A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448768165", "createdAt": "2020-07-02T06:07:41Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE2NjU2OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoxMjoxOFrOGr-uww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoxMzoyMFrOGr-wEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2OTczMQ==", "bodyText": "I did not get the meaning of the first  sentence.\nTry to use the second person when writing technical document, see https://developers.google.com/style/person\nTry not use modal verbs like \"can\" to avoid ambiguity. \"Can\" have two meanings:\na. be able to do sth\nb. the possibility to do sth", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448769731", "createdAt": "2020-07-02T06:12:18Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3MDA2Nw==", "bodyText": "what does \"in front of brokers\" mean?", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448770067", "createdAt": "2020-07-02T06:13:20Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2OTczMQ=="}, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE4NTYxOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyMDo1MVrOGr-6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyMDo1MVrOGr-6YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3MjcwNA==", "bodyText": "Pulsar docs use level 2 heading level as started. Therefore, you should check through the document and change the heading levels one by one.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448772704", "createdAt": "2020-07-02T06:20:51Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE5NDM1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNDoyOFrOGr-_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNDoyOFrOGr-_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NDAxOQ==", "bodyText": "It would be better if  you can write clear and concise sentences, it's easy to read and understand.\nAvoid writing long-winded sentences, see https://developers.google.com/style/tone#some-things-to-avoid-where-possible", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448774019", "createdAt": "2020-07-02T06:24:28Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE5ODg3OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNjowOVrOGr_CDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNjowOVrOGr_CDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NDY2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n          \n          \n            \n            A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448774669", "createdAt": "2020-07-02T06:26:09Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzE5OTM4OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNjoxNFrOGr_CSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyNjoxNFrOGr_CSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NDczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We have to configure two conf files into ATS proxy to support SNI routing.\n          \n          \n            \n            To  support SNI routing, you need to xxx.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448774730", "createdAt": "2020-07-02T06:26:14Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIwNTI1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyODo1NFrOGr_F3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjoyODo1NFrOGr_F3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NTY0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n          \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448775644", "createdAt": "2020-07-02T06:28:54Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIxMTA3OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozMToxNlrOGr_JXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozMToxNlrOGr_JXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NjU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n          \n          \n            \n            ATS supports [Layer 4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with a requirement that inbound connection must be a TLS connection. The Pulsar client supports SNI routing protocol and we can use the ATS proxy in front of brokers. Therefore, the Pulsar client can connect to broker through the ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers through the ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448776543", "createdAt": "2020-07-02T06:31:16Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1MTEzOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0NjozN1rOGr_hkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0NjozN1rOGr_hkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MjczOA==", "bodyText": "please note the indent of the code example, same comments on the below code examples.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448782738", "createdAt": "2020-07-02T06:46:37Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1NDU3OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0Nzo0M1rOGr_jmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0Nzo0M1rOGr_jmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MzI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n          \n          \n            \n            The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (By default, it is located in `/usr/local/etc/trafficserver/`.) is a list of configurable variables used by the Traffic Server and we have to update this file with TLS port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure TLS tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to the broker. If Pulsar brokers are listening on ports 4443 and 6651 then add the brokers\u2019 service port in http.connect_ports configuration.\n          \n      \n    \n    \n  \n\nTraffic Server or Apache Traffic Server?", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448783257", "createdAt": "2020-07-02T06:47:43Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI2NzI1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MjoyOFrOGr_rsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MjoyOFrOGr_rsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NTMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n          \n          \n            \n            The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the default values.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448785328", "createdAt": "2020-07-02T06:52:28Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3MTgxOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NDowNlrOGr_udA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NDowNlrOGr_udA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NjAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n          \n          \n            \n            The following example shows mapping of inbound SNI hostname coming from the client and the actual broker\u2019s service URL where request should be redirected. For example, if the client sends the SNI header `pulsar-broker1`, the  proxy creates a TLS tunnel by redirecting request to the service URL `pulsar-broker1:6651`", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448786036", "createdAt": "2020-07-02T06:54:06Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3NTU3OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NToyN1rOGr_wvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NToyN1rOGr_wvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NjYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n          \n          \n            \n            Once, `ssl_server_name.config` and `records.config` are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between the client and the broker.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448786620", "createdAt": "2020-07-02T06:55:27Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI3ODg4OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NjozN1rOGr_ytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1NjozN1rOGr_ytQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzEyNQ==", "bodyText": "If there is no order sequence for these 2 config files, i suggest using an unordered list instead of an ordered list.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448787125", "createdAt": "2020-07-02T06:56:37Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI4ODA0OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1OTo0NFrOGr_4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1OTo0NFrOGr_4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4ODU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n          \n          \n            \n            Now, ATS proxy server is configured and ready to handle SNI routing and create the TCP tunnel between the client and the broker. Here, we have to note that ATS SNI-routing works only with TLS. Therefore, the ATS proxy and brokers must have TLS enabled before the Pulsar client configures SNI routing protocol to connect to the broker through ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), the pulsar client supports SNI routing by connecting to the proxy and sending target the broker URL into the SNI header. The Pulsar client handles SNI routing internally and the entire connection handling is abstracted from the user. Users only need to configure the following proxy configuration initially when the user creates a Pulsar client to use SNI routing protocol.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448788579", "createdAt": "2020-07-02T06:59:44Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI5NDMxOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMTo1NlrOGr_8Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMTo1NlrOGr_8Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4OTU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.\n          \n          \n            \n            We can also use ATS proxy for geo-replication. The Pulsar broker can connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection, we have to configure SNI proxy URL to the cluster metadata. If the cluster metadata has SNI proxy URL configured, the broker connects to cross cluster broker through the proxy over SNI routing.\n          \n      \n    \n    \n  \n\nwhat does the colo mean? a typo or a technical word?", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448789559", "createdAt": "2020-07-02T07:01:56Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI5NzM1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMjo1OVrOGr_-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowMjo1OVrOGr_-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MDAyNw==", "bodyText": "In general, all images related about pulsar docs are placed in the asset folder. could you please put the original image to that folder and update the local path for the image?", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448790027", "createdAt": "2020-07-02T07:02:59Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.\n+\n+![Snip20200701_36](https://user-images.githubusercontent.com/2898254/86283369-c94cdb80-bb95-11ea-865e-34ddfe1ad33f.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzMwOTY0OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowNzoyNlrOGsAFvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowNzoyNlrOGsAFvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MTk5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region running behind this ATS proxy. Now, we will configure cluster metadata for both the clusters, so brokers in one cluster will use SNI routing and connect to brokers in other clusters via ATS proxy.\n          \n          \n            \n            In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region run behind this ATS proxy. Now, we configure the cluster metadata for both the clusters, so brokers in one cluster can use SNI routing and connect to brokers in other clusters through the ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448791996", "createdAt": "2020-07-02T07:07:26Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.\n+\n+![Snip20200701_36](https://user-images.githubusercontent.com/2898254/86283369-c94cdb80-bb95-11ea-865e-34ddfe1ad33f.png)\n+\n+In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region running behind this ATS proxy. Now, we will configure cluster metadata for both the clusters, so brokers in one cluster will use SNI routing and connect to brokers in other clusters via ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzMxMjcyOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowODozN1rOGsAHug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzowODozN1rOGsAHug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MjUwNg==", "bodyText": "If this is an ordered task, use \"1,2,3...\" instead of \"a, b,c...\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (a) Configure cluster metadata for us-east with us-east broker service url and us-east ATS proxy url with SNI proxy-protocol.\n          \n          \n            \n            (a) Configure the cluster metadata for us-east with us-east broker service URL and us-east ATS proxy URL with SNI proxy-protocol.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448792506", "createdAt": "2020-07-02T07:08:37Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.\n+\n+![Snip20200701_36](https://user-images.githubusercontent.com/2898254/86283369-c94cdb80-bb95-11ea-865e-34ddfe1ad33f.png)\n+\n+In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region running behind this ATS proxy. Now, we will configure cluster metadata for both the clusters, so brokers in one cluster will use SNI routing and connect to brokers in other clusters via ATS proxy.\n+\n+(a) Configure cluster metadata for us-east with us-east broker service url and us-east ATS proxy url with SNI proxy-protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzMyMTMwOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMTo0MFrOGsANPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzoxMTo0MFrOGsANPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MzkxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (b) Configure cluster metadata for us-east with us-east broker service url and us-east ATS proxy url with SNI proxy-protocol.\n          \n          \n            \n            (b) Configure the cluster metadata for us-east with us-east broker service URL and us-east ATS proxy URL with SNI proxy-protocol.\n          \n      \n    \n    \n  \n\nus-west?", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r448793918", "createdAt": "2020-07-02T07:11:40Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+# Pulsar Proxy with SNI routing\n+\n+A proxy server is a go\u2011between or intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server can act as a \u201ctraffic cop,\u201d in both forward and reverse proxy scenarios, and adds various benefits in your system such as load balancing, performance, security, auto-scaling, etc.. There are already many proxy servers already available in the market which are fast, scalable and more importantly covers various essential security aspects that are needed by the large organization to securely share their confidential data over the network. Pulsar already provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar doesn\u2019t provide support to use other proxies such as Apache traffic server (ATS), HAProxy, Nginx, Envoy those are more scalable and secured. Most of these proxy-servers support SNI ROUTING which can route traffic to a destination without having to terminate the SSL connection. Routing at layer 4 gives greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) eexplains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers via proxy. This document explains how to setup ATS proxy and pulsar-client to enable SNI routing and connect pulsar-client to pulsar-broker via ATS proxy.\n+\n+## ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with requirement that inbound connection must be TLS. Pulsar client supports SNI routing protocol and we can use ATS proxy in front of brokers, so pulsar client can connect to broker via ATS proxy. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers via ATS proxy.\n+\n+### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains ATS-setup to enable layer-4 SNI routing and use ATS proxy as a forward proxy where the pulsar broker runs behind the ATS proxy and client connects to pulsar-broker through this ATS proxy.\n+\n+\n+![Snip20200701_37](https://user-images.githubusercontent.com/2898254/86283497-09ac5980-bb96-11ea-8b2b-45351977bd55.png)\n+\n+We have to configure two conf files into ATS proxy to support SNI routing.\n+\n+\n+1. `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (by default, located in `/usr/local/etc/trafficserver/`) is a list of configurable variables used by the Traffic Server and we have to update this file with tls port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure tls tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to pulsar-broker. If Pulsar brokers are listening on 4443 and 6651 then add brokers\u2019 service port in http.connect_ports configuration.\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+2. `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the defaults. \n+Below example of  `ssl_server_name`shows mapping of inbound SNI hostname coming from client and actual broker\u2019s service url where request should be redirected. For example: if client sends SNI header `pulsar-broker1` then proxy creates tls tunnel by redirecting request to service-url: `pulsar-broker1:6651` \n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, ssl_server_name.config and records.config are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between client and broker.\n+\n+### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create TCP tunnel between client and broker. Here, we have to note that ATS SNI-routing works only with TLS. so, ATS proxy and brokers must have tls enabled before Pulsar-client configures SNI routing protocol to connect to broker via ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), pulsar-client supports SNI routing by connecting to proxy and sending target broker url into SNI header. Pulsar-client handles SNI routing internally and entire connection handling is abstracted from the user. Users have to only configure following proxy configuration initially when the user creates a pulsar-client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. Pulsar broker has capability to connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection we have to configure SNI proxy URL to cluster metadata. If cluster metadata has SNI proxy url configured then broker will connect to cross cluster broker via proxy over SNI routing.\n+\n+![Snip20200701_36](https://user-images.githubusercontent.com/2898254/86283369-c94cdb80-bb95-11ea-865e-34ddfe1ad33f.png)\n+\n+In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region running behind this ATS proxy. Now, we will configure cluster metadata for both the clusters, so brokers in one cluster will use SNI routing and connect to brokers in other clusters via ATS proxy.\n+\n+(a) Configure cluster metadata for us-east with us-east broker service url and us-east ATS proxy url with SNI proxy-protocol.\n+\n+```\n+./pulsar-admin clusters update \\\n+--broker-url-secure pulsar+ssl://east-broker-vip:6651 \\\n+--url http://east-broker-vip:8080 \\\n+--proxy-protocol SNI \\\n+--proxy-url pulsar+ssl://east-ats-proxy:443\n+```\n+\n+(b) Configure cluster metadata for us-east with us-east broker service url and us-east ATS proxy url with SNI proxy-protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e979d65577715361843798b3628a81a98c12842"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY5NTk1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNjoyNFrOGsqZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNjoyNFrOGsqZvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NTI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n          \n          \n            \n            A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by large organizations to securely share their confidential data over the network. Pulsar provides a proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports using other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r449485246", "createdAt": "2020-07-03T09:36:24Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,123 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+## Pulsar Proxy with SNI routing\n+\n+A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519133e14330f8da3a233efec161587143e4f16c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY5Njc4OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNjo0MlrOGsqaUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNjo0MlrOGsqaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NTM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.\n          \n          \n            \n            [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains the SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r449485394", "createdAt": "2020-07-03T09:36:42Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,123 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+## Pulsar Proxy with SNI routing\n+\n+A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519133e14330f8da3a233efec161587143e4f16c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY5ODY0OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNzoxOVrOGsqbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNzoxOVrOGsqbZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NTY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To  support SNI routing, you need to configure two files: `records.conf` and `ssl_server_name.conf`.\n          \n          \n            \n            To support SNI routing, you need to configure two files: `records.conf` and `ssl_server_name.conf`.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r449485668", "createdAt": "2020-07-03T09:37:19Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,123 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+## Pulsar Proxy with SNI routing\n+\n+A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.\n+\n+### ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with the requirement that inbound connection must be a TLS connection. The Pulsar client also supports SNI routing protocol on TLS connection and that allows Pulsar to use ATS as a reverse proxy when Pulsar client wants to connect to broker through ATS proxy. Therefore, this section explains how to set up and use ATS as a reverse proxy so pulsar clients can connect to brokers through the ATS proxy using SNI routing protocol on TLS connection. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers through the ATS proxy.\n+\n+\n+#### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains how to set up ATS proxy to enable layer 4 SNI routing which will be used by Pulsar to use ATS as a reverse proxy.\n+\n+\n+![Pulsar client SNI](assets/pulsar-sni-client.png)\n+\n+To  support SNI routing, you need to configure two files: `records.conf` and `ssl_server_name.conf`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519133e14330f8da3a233efec161587143e4f16c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcwMzQwOnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozODo0M1rOGsqePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozODo0M1rOGsqePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now, ATS proxy server is configured and ready to handle SNI routing and create the TCP tunnel between the client and the broker. Here, we have to note that ATS SNI-routing works only with TLS. Therefore, the ATS proxy and brokers must have TLS enabled before the Pulsar client configures SNI routing protocol to connect to the broker through ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), the pulsar client supports SNI routing by connecting to the proxy and sending target the broker URL into the SNI header. The Pulsar client handles SNI routing internally and the entire connection handling is abstracted from the user. Users only need to configure the following proxy configuration initially when the user creates a Pulsar client to use SNI routing protocol.\n          \n          \n            \n            Now, the ATS proxy server is configured and ready to handle SNI routing and create the TCP tunnel between the client and the broker. Here, we have to note that ATS SNI-routing works only with TLS. Therefore, the ATS proxy and brokers must have TLS enabled before the Pulsar client configures the SNI routing protocol to connect to the broker through ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), the pulsar client supports SNI routing by connecting to the proxy and sending target the broker URL into the SNI header. The Pulsar client handles SNI routing internally and the entire connection handling is abstracted from the user. Users only need to configure the following proxy configuration initially when the user creates a Pulsar client to use the SNI routing protocol.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r449486398", "createdAt": "2020-07-03T09:38:43Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,123 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+## Pulsar Proxy with SNI routing\n+\n+A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.\n+\n+### ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with the requirement that inbound connection must be a TLS connection. The Pulsar client also supports SNI routing protocol on TLS connection and that allows Pulsar to use ATS as a reverse proxy when Pulsar client wants to connect to broker through ATS proxy. Therefore, this section explains how to set up and use ATS as a reverse proxy so pulsar clients can connect to brokers through the ATS proxy using SNI routing protocol on TLS connection. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers through the ATS proxy.\n+\n+\n+#### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains how to set up ATS proxy to enable layer 4 SNI routing which will be used by Pulsar to use ATS as a reverse proxy.\n+\n+\n+![Pulsar client SNI](assets/pulsar-sni-client.png)\n+\n+To  support SNI routing, you need to configure two files: `records.conf` and `ssl_server_name.conf`.\n+\n+\n+- `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (By default, it is located in `/usr/local/etc/trafficserver/`.) is a list of configurable variables used by the Apache Traffic Server and we have to update this file with TLS port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure TLS tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to the broker. If Pulsar brokers are listening on ports 4443 and 6651 then add the brokers\u2019 service port in http.connect_ports configuration.\n+\n+**Example:**\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+- `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the default values. \n+\n+The following example shows mapping of inbound SNI hostname coming from the client and the actual broker\u2019s service URL where request should be redirected. For example, if the client sends the SNI header `pulsar-broker1`, the  proxy creates a TLS tunnel by redirecting request to the service URL `pulsar-broker1:6651` \n+\n+**Example:**\n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, `ssl_server_name.config` and `records.config` are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between the client and the broker.\n+\n+#### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create the TCP tunnel between the client and the broker. Here, we have to note that ATS SNI-routing works only with TLS. Therefore, the ATS proxy and brokers must have TLS enabled before the Pulsar client configures SNI routing protocol to connect to the broker through ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), the pulsar client supports SNI routing by connecting to the proxy and sending target the broker URL into the SNI header. The Pulsar client handles SNI routing internally and the entire connection handling is abstracted from the user. Users only need to configure the following proxy configuration initially when the user creates a Pulsar client to use SNI routing protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519133e14330f8da3a233efec161587143e4f16c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcwNjE1OnYy", "diffSide": "RIGHT", "path": "site2/docs/concepts-proxy-sni-routing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozOTozNlrOGsqf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozOTozNlrOGsqf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region run behind this ATS proxy. Now, we configure the cluster metadata for both the clusters, so brokers in one cluster can use SNI routing and connect to brokers in other clusters through the ATS proxy.\n          \n          \n            \n            In this example, we have a Pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both regions and brokers in each region run behind this ATS proxy. Now, we configure the cluster metadata for both the clusters, so brokers in one cluster can use SNI routing and connect to brokers in other clusters through the ATS proxy.", "url": "https://github.com/apache/pulsar/pull/7421#discussion_r449486832", "createdAt": "2020-07-03T09:39:36Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/concepts-proxy-sni-routing.md", "diffHunk": "@@ -0,0 +1,123 @@\n+---\n+id: concepts-proxy-sni-routing\n+title: Proxy support with SNI routing\n+sidebar_label: Proxy support with SNI routing\n+---\n+\n+## Pulsar Proxy with SNI routing\n+\n+A proxy server is an intermediary server that forwards requests from multiple clients to different servers across the Internet. The proxy server acts as a \"traffic cop\" in both forward and reverse proxy scenarios, and brings various benefits to your system such as load balancing, performance, security, auto-scaling, etc. There are already many proxy servers available in the market which are fast and scalable. More importantly, these proxy servers cover various essential security aspects that are needed by the large organizations to securely share their confidential data over the network. Pulsar provides proxy implementation which acts as a reverse proxy and creates a gateway in front of brokers. However, pulsar does not supports to use other proxies such as Apache Traffic Server (ATS), HAProxy, Nginx, and Envoy. These proxies are more scalable and secured. Most of these proxy-servers support **SNI routing** which is used to route traffic to a destination without terminating the SSL connection. Routing at layer 4 provides greater transparency because the outbound connection is determined by examining the destination address in the client TCP packets.\n+\n+[PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing) explains SNI routing protocol and how Pulsar clients support SNI routing protocol to connect to brokers through the proxy. This document explains how to set up the ATS proxy and the Pulsar client to enable SNI routing and connect Pulsar client to the broker through the ATS proxy.\n+\n+### ATS-SNI Routing in Pulsar\n+[ATS supports layer-4 SNI routing](https://docs.trafficserver.apache.org/en/latest/admin-guide/layer-4-routing.en.html) with the requirement that inbound connection must be a TLS connection. The Pulsar client also supports SNI routing protocol on TLS connection and that allows Pulsar to use ATS as a reverse proxy when Pulsar client wants to connect to broker through ATS proxy. Therefore, this section explains how to set up and use ATS as a reverse proxy so pulsar clients can connect to brokers through the ATS proxy using SNI routing protocol on TLS connection. Pulsar also supports SNI routing for geo-replication, so brokers can connect to cross cluster brokers through the ATS proxy.\n+\n+\n+#### ATS Proxy setup for layer-4 SNI routing\n+\n+This section explains how to set up ATS proxy to enable layer 4 SNI routing which will be used by Pulsar to use ATS as a reverse proxy.\n+\n+\n+![Pulsar client SNI](assets/pulsar-sni-client.png)\n+\n+To  support SNI routing, you need to configure two files: `records.conf` and `ssl_server_name.conf`.\n+\n+\n+- `records.conf`: \n+The [records.config fil](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html) (By default, it is located in `/usr/local/etc/trafficserver/`.) is a list of configurable variables used by the Apache Traffic Server and we have to update this file with TLS port (`http.server_ports`) on which proxy can listen and proxy certs (`ssl.client.cert.path` and `ssl.client.cert.filename`) for secure TLS tunneling. We also have to configure a range of server ports (`http.connect_ports`) that can be used for tunneling to the broker. If Pulsar brokers are listening on ports 4443 and 6651 then add the brokers\u2019 service port in http.connect_ports configuration.\n+\n+**Example:**\n+\n+```\n+# PROXY TLS PORT\n+CONFIG proxy.config.http.server_ports STRING 4443:ssl 4080\n+# PROXY CERTS FILE PATH\n+CONFIG proxy.config.ssl.client.cert.path STRING /proxy-cert.pem\n+# PROXY KEY FILE PATH\n+CONFIG proxy.config.ssl.client.cert.filename STRING /proxy-key.pem\n+\n+\n+# The range of origin server ports that can be used for tunneling via CONNECT. # Traffic Server allows tunnels only to the specified ports. Supports both wildcards (*) and ranges (e.g. 0-1023).\n+CONFIG proxy.config.http.connect_ports STRING 4443 6651\n+```\n+\n+- `ssl_server_name.conf`: \n+The [ssl_server_name file](https://docs.trafficserver.apache.org/en/8.0.x/admin-guide/files/ssl_server_name.yaml.en.html) is used to configure aspects of TLS connection handling for both inbound and outbound connections. The configuration is driven by the SNI values provided by the inbound connection. The file consists of a set of configuration items, each identified by an SNI value (`fqdn`). When an inbound TLS connection is made, the SNI value from the TLS negotiation is matched against the items specified by this file and if there is a match, the values specified in that item override the default values. \n+\n+The following example shows mapping of inbound SNI hostname coming from the client and the actual broker\u2019s service URL where request should be redirected. For example, if the client sends the SNI header `pulsar-broker1`, the  proxy creates a TLS tunnel by redirecting request to the service URL `pulsar-broker1:6651` \n+\n+**Example:**\n+\n+```\n+server_config = {\n+  {\n+     fqdn = 'pulsar-broker-vip',\n+     # Forward to Pulsar broker which is listening on 6651\n+     tunnel_route = 'pulsar-broker-vip:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker1',\n+     # Forward to Pulsar broker-1 which is listening on 6651\n+     tunnel_route = 'pulsar-broker1:6651'\n+  },\n+  {\n+     fqdn = 'pulsar-broker2',\n+     # Forward to Pulsar broker-2 which is listening on 6651\n+     tunnel_route = 'pulsar-broker2:6651'\n+  },\n+}\n+```\n+Once, `ssl_server_name.config` and `records.config` are configured, ATS-proxy server is ready to handle SNI routing and can create TCP tunnel between the client and the broker.\n+\n+#### Pulsar-client Configuration with SNI routing\n+\n+Now, ATS proxy server is configured and ready to handle SNI routing and create the TCP tunnel between the client and the broker. Here, we have to note that ATS SNI-routing works only with TLS. Therefore, the ATS proxy and brokers must have TLS enabled before the Pulsar client configures SNI routing protocol to connect to the broker through ATS proxy. With [PIP-60](https://github.com/apache/pulsar/wiki/PIP-60:-Support-Proxy-server-with-SNI-routing), the pulsar client supports SNI routing by connecting to the proxy and sending target the broker URL into the SNI header. The Pulsar client handles SNI routing internally and the entire connection handling is abstracted from the user. Users only need to configure the following proxy configuration initially when the user creates a Pulsar client to use SNI routing protocol.\n+\n+```\n+String brokerServiceUrl = \u201cpulsar+ssl://pulsar-broker-vip:6651/\u201d;\n+String proxyUrl = \u201cpulsar+ssl://ats-proxy:443\u201d;\n+ClientBuilder clientBuilder = PulsarClient.builder()\n+\t\t.serviceUrl(brokerServiceUrl)\n+        .tlsTrustCertsFilePath(TLS_TRUST_CERT_FILE_PATH)\n+        .enableTls(true)\n+        .allowTlsInsecureConnection(false)\n+        .proxyServiceUrl(proxyUrl, ProxyProtocol.SNI)\n+        .operationTimeout(1000, TimeUnit.MILLISECONDS);\n+\n+Map<String, String> authParams = new HashMap<>();\n+authParams.put(\"tlsCertFile\", TLS_CLIENT_CERT_FILE_PATH);\n+authParams.put(\"tlsKeyFile\", TLS_CLIENT_KEY_FILE_PATH);\n+clientBuilder.authentication(AuthenticationTls.class.getName(), authParams);\n+\n+PulsarClient pulsarClient = clientBuilder.build();\n+```\n+\n+#### Pulsar geo-replication with SNI routing\n+\n+We can also use ATS proxy for geo-replication. The Pulsar broker can connect to cross colo brokers for geo-replication using SNI routing. In order to enable SNI routing for cross cluster broker connection, we have to configure SNI proxy URL to the cluster metadata. If the cluster metadata has SNI proxy URL configured, the broker connects to cross cluster broker through the proxy over SNI routing.\n+\n+![Pulsar client SNI](assets/pulsar-sni-geo.png)\n+\n+In this example, we have a pulsar cluster deployed into two separate regions, us-west and us-east. We have also configured ATS proxy in both the regions, and brokers in each region run behind this ATS proxy. Now, we configure the cluster metadata for both the clusters, so brokers in one cluster can use SNI routing and connect to brokers in other clusters through the ATS proxy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519133e14330f8da3a233efec161587143e4f16c"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2409, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}