{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODQxMjc0", "number": 6814, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozNzowMVrOD2DvxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozODo0MlrOD2Dwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDExMDc3OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/stats/prometheus/PrometheusTextFormatUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozNzowMVrOGLxXgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMDozNToxNlrOGLzs7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5NjM1Mg==", "bodyText": "Can we get these metrics at the bookie client side? If can't, I think it's better to use some bookie client metrics in the example.", "url": "https://github.com/apache/pulsar/pull/6814#discussion_r414996352", "createdAt": "2020-04-25T06:37:01Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/stats/prometheus/PrometheusTextFormatUtil.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.stats.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.Collector.MetricFamilySamples;\n+import io.prometheus.client.Collector.MetricFamilySamples.Sample;\n+import io.prometheus.client.CollectorRegistry;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+\n+/**\n+ * Logic to write metrics in Prometheus text format.\n+ */\n+public class PrometheusTextFormatUtil {\n+    static void writeGauge(Writer w, String name, SimpleGauge<? extends Number> gauge) {\n+        // Example:\n+        // # TYPE bookie_storage_entries_count gauge\n+        // bookie_storage_entries_count 519\n+        try {\n+            w.append(\"# TYPE \").append(name).append(\" gauge\\n\");\n+            w.append(name).append(' ').append(gauge.getSample().toString()).append('\\n');\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static void writeCounter(Writer w, String name, Counter counter) {\n+        // Example:\n+        // # TYPE jvm_threads_started_total counter\n+        // jvm_threads_started_total 59\n+        try {\n+            w.append(\"# TYPE \").append(name).append(\" counter\\n\");\n+            w.append(name).append(' ').append(counter.get().toString()).append('\\n');\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static void writeOpStat(Writer w, String name, DataSketchesOpStatsLogger opStat) {\n+        // Example:\n+        // # TYPE bookie_journal_JOURNAL_ADD_ENTRY summary\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.5\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.75\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.95\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.99\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.999\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.9999\",} NaN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c78374dbdc0a5e207fe224559776b9ac1d41658b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzNDYwNQ==", "bodyText": "I have checked the bookie client metric code, some class constructor and functions are package private and can't be accessed in pulsar.", "url": "https://github.com/apache/pulsar/pull/6814#discussion_r415034605", "createdAt": "2020-04-25T10:35:16Z", "author": {"login": "hangc0276"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/stats/prometheus/PrometheusTextFormatUtil.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.stats.prometheus;\n+\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.Collector.MetricFamilySamples;\n+import io.prometheus.client.Collector.MetricFamilySamples.Sample;\n+import io.prometheus.client.CollectorRegistry;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Enumeration;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+\n+/**\n+ * Logic to write metrics in Prometheus text format.\n+ */\n+public class PrometheusTextFormatUtil {\n+    static void writeGauge(Writer w, String name, SimpleGauge<? extends Number> gauge) {\n+        // Example:\n+        // # TYPE bookie_storage_entries_count gauge\n+        // bookie_storage_entries_count 519\n+        try {\n+            w.append(\"# TYPE \").append(name).append(\" gauge\\n\");\n+            w.append(name).append(' ').append(gauge.getSample().toString()).append('\\n');\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static void writeCounter(Writer w, String name, Counter counter) {\n+        // Example:\n+        // # TYPE jvm_threads_started_total counter\n+        // jvm_threads_started_total 59\n+        try {\n+            w.append(\"# TYPE \").append(name).append(\" counter\\n\");\n+            w.append(name).append(' ').append(counter.get().toString()).append('\\n');\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static void writeOpStat(Writer w, String name, DataSketchesOpStatsLogger opStat) {\n+        // Example:\n+        // # TYPE bookie_journal_JOURNAL_ADD_ENTRY summary\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.5\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.75\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.95\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.99\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.999\",} NaN\n+        // bookie_journal_JOURNAL_ADD_ENTRY{success=\"false\",quantile=\"0.9999\",} NaN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5NjM1Mg=="}, "originalCommit": {"oid": "c78374dbdc0a5e207fe224559776b9ac1d41658b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDExMTk2OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozODowMlrOGLxYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozODowMlrOGLxYAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5NjQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    configuration.addProperty(\"prometheusStatsLatencyRolloverSeconds\", config.getPrometheusStatsLatencyRolloverSeconds());\n          \n          \n            \n                    configuration.addProperty(PrometheusMetricsProvider.PROMETHEUS_STATS_LATENCY_ROLLOVER_SECONDS, config.getPrometheusStatsLatencyRolloverSeconds());", "url": "https://github.com/apache/pulsar/pull/6814#discussion_r414996480", "createdAt": "2020-04-25T06:38:02Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerFactoryImpl.java", "diffHunk": "@@ -149,6 +157,12 @@ public ManagedLedgerFactoryImpl(BookkeeperFactoryForCustomEnsemblePlacementPolic\n \n     private ManagedLedgerFactoryImpl(BookkeeperFactoryForCustomEnsemblePlacementPolicy bookKeeperGroupFactory, boolean isBookkeeperManaged, ZooKeeper zooKeeper,\n             ManagedLedgerFactoryConfig config) throws Exception {\n+        Configuration configuration = new ClientConfiguration();\n+        configuration.addProperty(\"prometheusStatsLatencyRolloverSeconds\", config.getPrometheusStatsLatencyRolloverSeconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c78374dbdc0a5e207fe224559776b9ac1d41658b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDExMzExOnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/stats/prometheus/PrometheusMetricsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozODo0MlrOGLxYew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjozODo0MlrOGLxYew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5NjYwMw==", "bodyText": "Avoid use import xxx.* and please check all.", "url": "https://github.com/apache/pulsar/pull/6814#discussion_r414996603", "createdAt": "2020-04-25T06:38:42Z", "author": {"login": "codelipenghui"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/stats/prometheus/PrometheusMetricsProvider.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.bookkeeper.mledger.stats.prometheus;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import io.netty.util.internal.PlatformDependent;\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.CollectorRegistry;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c78374dbdc0a5e207fe224559776b9ac1d41658b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1829, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}