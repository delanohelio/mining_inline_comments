{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTEyNDIy", "number": 6695, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMDoyNFrODwFwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMDoyNFrODwFwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzUyNTE0OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/writer/AvroWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMDoyNFrOGC5N3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMTowNzozNlrOGEYtZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4Nzc3Mw==", "bodyText": "If this encoder is already flushed, shall we skip flushing it again?", "url": "https://github.com/apache/pulsar/pull/6695#discussion_r405687773", "createdAt": "2020-04-08T17:20:24Z", "author": {"login": "sijie"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/writer/AvroWriter.java", "diffHunk": "@@ -47,6 +47,11 @@ public AvroWriter(Schema schema) {\n         } catch (Exception e) {\n             throw new SchemaSerializationException(e);\n         } finally {\n+            try {\n+                this.encoder.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15edbc6567e693a2b150b761f7635eef47f3d769"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5NzU5MA==", "bodyText": "Hi @sijie  thanks for reviewing this promptly.\nBelow are two easy (or minimal code change) alternate option  I see to skip flushing again. Just cosmetic difference. I prefer 1 by the way.\n1 .\n    public synchronized byte[] write(T message) {\n        byte[] outputBytes = null;\n        try {\n            writer.write(message, this.encoder);\n            outputBytes = this.byteArrayOutputStream.toByteArray();\n        } catch (IOException e) {\n            throw new SchemaSerializationException(e);\n        } finally {\n            try {\n                this.encoder.flush();\n            } catch (IOException ex) {\n                throw new SchemaSerializationException(e);\n            }\n            this.byteArrayOutputStream.reset();\n        }\n        return outputBytes;\n    }\n\nAnd 2.\npublic synchronized byte[] write(T message) {\n    try {\n        writer.write(message, this.encoder);\n        this.encoder.flush();\n        return this.byteArrayOutputStream.toByteArray();\n    } catch (IOException e) {\n        try {\n            this.encoder.flush();\n        } catch (IOException ex) {\n            throw new SchemaSerializationException(e);\n        }\n        throw new SchemaSerializationException(e);\n    } finally {\n        this.byteArrayOutputStream.reset();\n    }\n}\n\n\nRegarding your suggestions on slack:\n\nCan flush throw exception?\n\nYes. Infact any method for the encoder throws an IOException!\n\nIf flush also throws exception, then we might need to know where the exception is thrown and whether do we need to call flush.\n\nFlush is here and I want to call it in case of crash because of this line. I understand i need a reset to be precise but there is no way to throw the contents of the stream and reset the cursor to 0.\n\nAlternatively, we can consider adding a flag for indicating if the flush succeeded or not.\n\nThe success or failure is in effect separated by a null pointer exception here. With that, it is still some sort of a hack to catch a null pointer exception and then update a flag. Also, that would require changing the avro library by the way.\nOn the other hand, to add a flag on the pulsar side in the current class will actually mean updating it in the catch/finally which again means there is not much use to adding a flag.\nPlease let me know if (1) is ok. Happy to know if you have any other suggestion(s).", "url": "https://github.com/apache/pulsar/pull/6695#discussion_r407197590", "createdAt": "2020-04-12T13:22:32Z", "author": {"login": "shiv4289"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/writer/AvroWriter.java", "diffHunk": "@@ -47,6 +47,11 @@ public AvroWriter(Schema schema) {\n         } catch (Exception e) {\n             throw new SchemaSerializationException(e);\n         } finally {\n+            try {\n+                this.encoder.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4Nzc3Mw=="}, "originalCommit": {"oid": "15edbc6567e693a2b150b761f7635eef47f3d769"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MjMyNA==", "bodyText": "(1) seems fine to me.", "url": "https://github.com/apache/pulsar/pull/6695#discussion_r407252324", "createdAt": "2020-04-12T21:07:36Z", "author": {"login": "sijie"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/schema/writer/AvroWriter.java", "diffHunk": "@@ -47,6 +47,11 @@ public AvroWriter(Schema schema) {\n         } catch (Exception e) {\n             throw new SchemaSerializationException(e);\n         } finally {\n+            try {\n+                this.encoder.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4Nzc3Mw=="}, "originalCommit": {"oid": "15edbc6567e693a2b150b761f7635eef47f3d769"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1875, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}