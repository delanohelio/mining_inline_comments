{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDYwODU4", "number": 7784, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0OToxMFrOEWwneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0NzoxMVrOEWxvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAwNjY0OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0OToxMVrOG-LUfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0OToxMVrOG-LUfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDM2NA==", "bodyText": "Please complete the asyncResponse with exception", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467850364", "createdAt": "2020-08-10T11:49:11Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n+        } catch (IOException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n+        }\n+    }\n+\n+    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }\n+        if (topicPolicies == null) {\n+            topicPolicies = new TopicPolicies();\n+        }\n+        try {\n+            Map oldPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            oldPolicies.putAll(policies);\n+            topicPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(oldPolicies), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            log.error(\"incorrect policies map\", e);\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policies map\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3e96321390666b574bad6b371fd8b3ab349e65"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAxODQ1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1MzoyMVrOG-LbZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1MzoyMVrOG-LbZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MjEzMw==", "bodyText": "It's better to keep consistent with the delayed delivery setting of the namespace.\n    @GET\n    @Path(\"/{tenant}/{namespace}/delayedDelivery\")\n    @ApiOperation(value = \"Get delayed delivery messages config on a namespace.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"),\n            @ApiResponse(code = 409, message = \"Concurrent modification\"), })\n    public DelayedDeliveryPolicies getDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n                                         @PathParam(\"namespace\") String namespace) {\n        validateNamespaceName(tenant, namespace);\n        return internalGetDelayedDelivery();\n    }\n\n    @POST\n    @Path(\"/{tenant}/{namespace}/delayedDelivery\")\n    @ApiOperation(value = \"Set delayed delivery messages config on a namespace.\")\n    @ApiResponses(value = { @ApiResponse(code = 403, message = \"Don't have admin permission\"),\n            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace doesn't exist\"), })\n    public void setDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n            @PathParam(\"namespace\") String namespace,\n            @ApiParam(value = \"Delayed delivery policies for the specified namespace\") DelayedDeliveryPolicies deliveryPolicies) {\n        validateNamespaceName(tenant, namespace);\n        internalSetDelayedDelivery(deliveryPolicies);\n    }\n\nAnd we should also add deleteDelayedDeliveryPolicies method for clearing the topic level delayed delivery policy.", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467852133", "createdAt": "2020-08-10T11:53:21Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -246,6 +246,41 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/{policyProperties}/getTopicPolicies\")\n+    @ApiOperation(value = \"Get delayed delivery messages config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public TopicPolicies getTopicPolicies(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3e96321390666b574bad6b371fd8b3ab349e65"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzA2NjkyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjowOToxOFrOG-L4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjowOToxOFrOG-L4GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1OTQ4MQ==", "bodyText": "Please add the generic declaration of Map.\nex Map<String,Object>", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467859481", "createdAt": "2020-08-10T12:09:18Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3e96321390666b574bad6b371fd8b3ab349e65"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzA3MTIwOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjoxMDo0MlrOG-L6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjoxMDo0MlrOG-L6tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2MDE0OA==", "bodyText": "Please add the generic declaration of Map.", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467860148", "createdAt": "2020-08-10T12:10:42Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +580,56 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected TopicPolicies internalGetTopicPolicies(String properties) {\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        Map result = new HashMap();\n+        try {\n+            List<String> propertyList = jsonMapper().readValue(properties, new TypeReference<List<String>>() {});\n+            Map policiesMap = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            propertyList.forEach(property -> {\n+                if (policiesMap.get(property) != null) {\n+                    result.put(property, policiesMap.get(property));\n+                }\n+            });\n+            return jsonMapper().readValue(jsonMapper().writeValueAsBytes(result), TopicPolicies.class);\n+        } catch (JsonProcessingException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"incorrect policy properties\");\n+        } catch (IOException e) {\n+            throw new RestException(Status.NOT_ACCEPTABLE, \"serialize the result failed\");\n+        }\n+    }\n+\n+    protected void internalSetTopicPolicies(AsyncResponse asyncResponse, Map<String, String> policies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }\n+        if (topicPolicies == null) {\n+            topicPolicies = new TopicPolicies();\n+        }\n+        try {\n+            Map oldPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(topicPolicies), Map.class);\n+            oldPolicies.putAll(policies);\n+            topicPolicies = jsonMapper().readValue(jsonMapper().writeValueAsString(oldPolicies), TopicPolicies.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3e96321390666b574bad6b371fd8b3ab349e65"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzE3NjE1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0MzowMFrOG-M5iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0MzowMFrOG-M5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3NjIzMg==", "bodyText": "When DelayedDeliveryPolicies is not set, the admin module should not return to the default value.", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467876232", "createdAt": "2020-08-10T12:43:00Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -246,6 +248,59 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/delayedDelivery\")\n+    @ApiOperation(value = \"Get delayed delivery messages config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public DelayedDeliveryPolicies getDelayedDeliveryPolicies(@PathParam(\"tenant\") String tenant,\n+                                                              @PathParam(\"namespace\") String namespace,\n+                                                              @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isDelayedDeliveryEnabledSet() && topicPolicies.isDelayedDeliveryTickTimeMillisSet()) {\n+            return new DelayedDeliveryPolicies(topicPolicies.getDelayedDeliveryTickTimeMillis()\n+                    , topicPolicies.getDelayedDeliveryEnabled());\n+        }\n+        return new DelayedDeliveryPolicies(config().getDelayedDeliveryTickTimeMillis(), config().isDelayedDeliveryEnabled());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f58e8da475e0519687998c75fd77d14c645330"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzE5MDI1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0NzoxMlrOG-NCIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjo0NzoxMlrOG-NCIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3ODQzMg==", "bodyText": "return", "url": "https://github.com/apache/pulsar/pull/7784#discussion_r467878432", "createdAt": "2020-08-10T12:47:12Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java", "diffHunk": "@@ -577,6 +578,30 @@ protected void internalCreateMissedPartitions(AsyncResponse asyncResponse) {\n         });\n     }\n \n+    protected void internalSetDelayedDeliveryPolicies(AsyncResponse asyncResponse, DelayedDeliveryPolicies deliveryPolicies) {\n+        TopicPolicies topicPolicies = null;\n+        try {\n+            topicPolicies = pulsar().getTopicPoliciesService().getTopicPolicies(topicName);\n+        } catch (BrokerServiceException.TopicPoliciesCacheNotInitException e) {\n+            log.error(\"Topic {} policies cache have not init.\", topicName);\n+            asyncResponse.resume(new RestException(e));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f58e8da475e0519687998c75fd77d14c645330"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}