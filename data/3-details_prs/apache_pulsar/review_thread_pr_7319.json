{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzQ3MzQ0", "number": 7319, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDo0MTo0NFrOEHRlzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDo0MTo0NFrOEHRlzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDYzNjk1OnYy", "diffSide": "RIGHT", "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDo0MTo0NFrOGmkvAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjowNzozMVrOGmy-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMDkzMQ==", "bodyText": "Wouldn't there be a race condition here (also in existing code) if the creation completes at the same time that the timeout is triggered?", "url": "https://github.com/apache/pulsar/pull/7319#discussion_r443100931", "createdAt": "2020-06-20T04:41:44Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3177,8 +3177,7 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                ledgerCreated.set(true);\n-                cb.createComplete(BKException.Code.TimeoutException, null, null);\n+                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc6b54be054b5a50d43a041fe27896bbd5be924"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMjU0NA==", "bodyText": "The callback is synchronized at ManagedLedgerImpl. So there is no race condition here.", "url": "https://github.com/apache/pulsar/pull/7319#discussion_r443102544", "createdAt": "2020-06-20T05:13:04Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3177,8 +3177,7 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                ledgerCreated.set(true);\n-                cb.createComplete(BKException.Code.TimeoutException, null, null);\n+                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMDkzMQ=="}, "originalCommit": {"oid": "8dc6b54be054b5a50d43a041fe27896bbd5be924"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjUxOQ==", "bodyText": "It's not always the case. eg: In createNewMetadataLedger() when we create a new cursor ledger, we pass a lambda and there's no mutex. The logic in checkAndCompleteLedgerOpTask() seems race prone.\nI think we should probably use compareAndSet() to manipulate that ledgerCreated flag, which also might be better represented by an enum with multiple states.\nFinally (and this is unrelated to the bug here), we should try to cancel the timeout task, once the create operation succeeds or fails before it times out. Otherwise we can get into a state with many timer tasks pending.", "url": "https://github.com/apache/pulsar/pull/7319#discussion_r443136519", "createdAt": "2020-06-20T14:48:59Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3177,8 +3177,7 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                ledgerCreated.set(true);\n-                cb.createComplete(BKException.Code.TimeoutException, null, null);\n+                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMDkzMQ=="}, "originalCommit": {"oid": "8dc6b54be054b5a50d43a041fe27896bbd5be924"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzNDMyNQ==", "bodyText": "I see. I missed the createNewMetadataLedger operation. I changed it to use CAS.\nFor canceling the timeout tasks, I will have a follow-up issue to do that.", "url": "https://github.com/apache/pulsar/pull/7319#discussion_r443334325", "createdAt": "2020-06-22T06:07:31Z", "author": {"login": "sijie"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedLedgerImpl.java", "diffHunk": "@@ -3177,8 +3177,7 @@ protected void asyncCreateLedger(BookKeeper bookKeeper, ManagedLedgerConfig conf\n                 digestType, config.getPassword(), cb, ledgerCreated, finalMetadata);\n         scheduledExecutor.schedule(() -> {\n             if (!ledgerCreated.get()) {\n-                ledgerCreated.set(true);\n-                cb.createComplete(BKException.Code.TimeoutException, null, null);\n+                cb.createComplete(BKException.Code.TimeoutException, null, ledgerCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwMDkzMQ=="}, "originalCommit": {"oid": "8dc6b54be054b5a50d43a041fe27896bbd5be924"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2532, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}