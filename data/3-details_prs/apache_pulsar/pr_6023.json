{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTQ0NjYy", "number": 6023, "title": "[pulsar-client-go]Add DeliverAfter option for go client", "bodyText": "Motivation\nAdd delay message feature for go client\nModifications\nI'm inspired by PR 5602, but that PR was not active\n\nAdd DeliverAfter field to struct ProducerMessage.\nAdd func durationToUnixTimestampMillis because DeliverAfter is a time.Duration.\nCall C.pulsar_message_set_deliver_after when building message if DeliverAfter is not zero.\nAdd TestProducer_DelayMessage for unit test that covers failover and shared mode as DelayedDeliveryTest.java does.\n\nVerifying this change\n\n Make sure that the change passes the CI checks.\n\n(Please pick either of the following options)\nThis change is a trivial rework / code cleanup without any test coverage.\n(or)\nThis change is already covered by existing tests, such as (please describe tests).\n(or)\nThis change added tests and can be verified as follows:\n(example:)\n\nAdded integration tests for end-to-end deployment with large payloads (10MB)\nExtended integration test for recovery after broker failure\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): no\nThe public API: no\nThe schema: no\nThe default values of configurations: no\nThe wire protocol: no\nThe rest endpoints: no\nThe admin cli options: no\nAnything that affects deployment: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? docs", "createdAt": "2020-01-09T12:53:13Z", "url": "https://github.com/apache/pulsar/pull/6023", "merged": true, "mergeCommit": {"oid": "a1d2455f9d4730cbeda6c9f214668c810772a958"}, "closed": true, "closedAt": "2020-06-03T12:54:21Z", "author": {"login": "snowcrumble"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4pLP-gH2gAyMzYwOTQ0NjYyOjc0NDIwYTkzODE3NzczMGE4ODEwZjc2MjBhZTYxNTU3ZjYzNTIxMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnM66KAH2gAyMzYwOTQ0NjYyOjQzYmEzM2IyMjVmNjkxNmE3OGNiMDRlODJiNGQ1ZjJhNjNhNzU0OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74420a938177730a8810f7620ae61557f635210c", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/74420a938177730a8810f7620ae61557f635210c", "committedDate": "2020-01-09T12:33:05Z", "message": "Add DeliverAfter option for go client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/9e277bbceea77117cabfddf114b01dd7f70ccd67", "committedDate": "2020-01-09T12:47:44Z", "message": "fix doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTEwNzU2", "url": "https://github.com/apache/pulsar/pull/6023#pullrequestreview-386510756", "createdAt": "2020-04-02T14:56:46Z", "commit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjYyNTc5", "url": "https://github.com/apache/pulsar/pull/6023#pullrequestreview-414262579", "createdAt": "2020-05-19T09:24:02Z", "commit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTQ3ODYy", "url": "https://github.com/apache/pulsar/pull/6023#pullrequestreview-415547862", "createdAt": "2020-05-20T17:12:34Z", "commit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoxMjozNFrOGYVx_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoxNTo1N1rOGYV54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NTg2OQ==", "bodyText": "Can we replace fmt.Printf with t.Logf()?", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428175869", "createdAt": "2020-05-20T17:12:34Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjA1OA==", "bodyText": "Please replace fmt.Printf with t.Logf().", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176058", "createdAt": "2020-05-20T17:12:53Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjI3NQ==", "bodyText": "Please replace fmt.Printf with t.Logf().", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176275", "createdAt": "2020-05-20T17:13:15Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjMwOQ==", "bodyText": "Please replace fmt.Printf with t.Logf().", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176309", "createdAt": "2020-05-20T17:13:19Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())\n+\t\tassert.True(t, time.Since(begin) < delay)\n+\t}\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := sharedConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjM2Nw==", "bodyText": "Please replace fmt.Printf with t.Logf().", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176367", "createdAt": "2020-05-20T17:13:24Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)\n+\tfor i := 0; i < 10; i++ {\n+\t\terr := producer.Send(ctx, ProducerMessage{\n+\t\t\tPayload: []byte(fmt.Sprintf(\"hello-%d\", i)),\n+\t\t\tDeliverAfter: delay,\n+\t\t})\n+\t\tfmt.Printf(\"send message %d\\n\", i)\n+\t\tassert.Nil(t, err)\n+\t}\n+\n+\t// Failover consumer will receive the messages immediately while\n+    // the shared consumer will get them after the delay\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := failoverConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = failoverConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())\n+\t\tassert.True(t, time.Since(begin) < delay)\n+\t}\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tmsg, err := sharedConsumer.Receive(ctx)\n+\t\tassert.Nil(t, err)\n+\t\tfmt.Printf(\"message: %s\\n\",msg.Payload())\n+\t\terr = sharedConsumer.Ack(msg)\n+\t\tassert.Nil(t, err)\n+\n+\t\tfmt.Printf(\"after %v\\n\", time.Now())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NjUxMw==", "bodyText": "Please replace fmt.Printf with t.Logf().", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176513", "createdAt": "2020-05-20T17:13:38Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"\n+\tproducer, err := client.CreateProducer(ProducerOptions{\n+\t\tTopic: topicName,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer producer.Close()\n+\n+\tfailoverConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-failover\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer failoverConsumer.Close()\n+\n+\tsharedConsumer, err := client.Subscribe(ConsumerOptions{\n+\t\tTopic:            topicName,\n+\t\tSubscriptionName: \"sub-delay-message-shared\",\n+\t\tType:             Shared,\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer sharedConsumer.Close()\n+\n+\tctx := context.Background()\n+\n+\tdelay := time.Second*5\n+\tbegin := time.Now()\n+\tfmt.Printf(\"begin %v\\n\", begin)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng==", "bodyText": "Can we rename the topic name?", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428176746", "createdAt": "2020-05-20T17:14:02Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3NzM3Mg==", "bodyText": "This topic name is the same as the topic name in another test case, in order to avoid test conflicts, please replace it", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428177372", "createdAt": "2020-05-20T17:15:04Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng=="}, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Nzg5MQ==", "bodyText": "func newTopicName() string {\n\treturn fmt.Sprintf(\"my-topic-%v\", time.Now().Nanosecond())\n}", "url": "https://github.com/apache/pulsar/pull/6023#discussion_r428177891", "createdAt": "2020-05-20T17:15:57Z", "author": {"login": "wolfstudy"}, "path": "pulsar-client-go/pulsar/producer_test.go", "diffHunk": "@@ -416,3 +416,71 @@ func TestProducer_SendAndGetMsgID(t *testing.T) {\n \t\tassert.NotNil(t, IsNil(msgID))\n \t}\n }\n+\n+func TestProducer_DelayMessage(t *testing.T) {\n+\tclient, err := NewClient(ClientOptions{\n+\t\tURL: \"pulsar://localhost:6650\",\n+\t})\n+\tassert.Nil(t, err)\n+\tdefer client.Close()\n+\n+\ttopicName := \"test-send-with-message-id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Njc0Ng=="}, "originalCommit": {"oid": "9e277bbceea77117cabfddf114b01dd7f70ccd67"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8e973095d0c476cbd6309f35f73b0a23559a03", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/7e8e973095d0c476cbd6309f35f73b0a23559a03", "committedDate": "2020-05-21T06:44:44Z", "message": "use t.Logf instead of fmt.Printf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ba33b225f6916a78cb04e82b4d5f2a63a75493", "author": {"user": {"login": "codelipenghui", "name": "lipenghui"}}, "url": "https://github.com/apache/pulsar/commit/43ba33b225f6916a78cb04e82b4d5f2a63a75493", "committedDate": "2020-06-02T04:12:20Z", "message": "Merge remote-tracking branch 'apache/master' into add-delay-message-for-go"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1428, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}