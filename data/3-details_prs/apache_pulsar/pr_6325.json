{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTgxMDM4", "number": 6325, "title": "KeyValue schema support for pulsar sql", "bodyText": "Fixes #5560\nMotivation\nCurrently, the pulsar sql can't read the keyValue schema data.\nModifications\nAdd KeyValue schema support for pulsar sql. Add prefix key. for the key field name, add prefix value. for the value field name.\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded unit tests for keyValue schema handler\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (no)\nThe schema: (don't know)\nThe default values of configurations: (no)\nThe wire protocol: (no)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (don't know)\n\nDocumentation\nIf the key uses the schema Schema.INT32 or other primitive schemas, the field name like this __key.__value__\nif the key uses the struct schema Schema.JSON(User.class) , the field name like this __key.name, __key.age\nThe value field name format unchanged.", "createdAt": "2020-02-14T02:26:58Z", "url": "https://github.com/apache/pulsar/pull/6325", "merged": true, "mergeCommit": {"oid": "3cf6be139e191f3fa058f01c469e1dbd4c8534be"}, "closed": true, "closedAt": "2020-02-17T10:02:06Z", "author": {"login": "gaoran10"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEFMsPAH2gAyMzc1MTgxMDM4OmYyOWQ2MDI1ZjNiMWM0ZGI4N2FlZTQwZTlhMDgyOTgxZTkzOTRhZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFIq-WgFqTM1OTU0MzIzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f29d6025f3b1c4db87aee40e9a082981e9394afc", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/f29d6025f3b1c4db87aee40e9a082981e9394afc", "committedDate": "2020-02-14T01:25:10Z", "message": "add `KeyValueSchema` support for pulsar sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd44892b32e23f7b8007caa01082df6665fde22f", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/dd44892b32e23f7b8007caa01082df6665fde22f", "committedDate": "2020-02-14T01:58:56Z", "message": "add `KeyValueSchema` support for pulsar sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/fcd5fa66c55d0da3736845367942a49525fbcd64", "committedDate": "2020-02-14T02:05:17Z", "message": "Merge branch 'pulsar-sql-schema-kv' of https://github.com/gaoran10/pulsar into pulsar-sql-schema-kv\n\n\u0001 Conflicts:\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarMetadata.java\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplit.java\n\u0001\tpulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplitManager.java\n\u0001\tpulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Njg1NzY1", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-358685765", "createdAt": "2020-02-14T02:53:17Z", "commit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjo1MzoxN1rOFpqRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMzozODowN1rOFpqySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyODQ5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int keyLength2 = dataPayload.readInt();\n          \n          \n            \n                        int keyLength = dataPayload.readInt();", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379228491", "createdAt": "2020-02-14T02:53:17Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/KeyValueSchemaHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.log.Logger;\n+import io.netty.buffer.ByteBuf;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n+import org.apache.pulsar.common.schema.KeyValue;\n+import org.apache.pulsar.common.schema.KeyValueEncodingType;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+\n+\n+/**\n+ * Schema handler for payload in the KeyValue format.\n+ */\n+public class KeyValueSchemaHandler implements SchemaHandler {\n+\n+    private static final Logger log = Logger.get(KeyValueSchemaHandler.class);\n+\n+    private final static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private final List<PulsarColumnHandle> columnHandles;\n+\n+    private final SchemaHandler keySchemaHandler;\n+\n+    private final SchemaHandler valueSchemaHandler;\n+\n+    private KeyValueEncodingType keyValueEncodingType;\n+\n+    public KeyValueSchemaHandler(SchemaInfo schemaInfo, List<PulsarColumnHandle> columnHandles) {\n+        this.columnHandles = columnHandles;\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        keySchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getKey(), columnHandles);\n+        valueSchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getValue(), columnHandles);\n+        keyValueEncodingType = KeyValueSchemaInfo.decodeKeyValueEncodingType(schemaInfo);\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf payload) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf keyPayload, ByteBuf dataPayload) {\n+        ByteBuf keyByteBuf;\n+        ByteBuf valueByteBuf;\n+        if (Objects.equals(keyValueEncodingType, KeyValueEncodingType.INLINE)) {\n+            dataPayload.resetReaderIndex();\n+            int keyLength2 = dataPayload.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyODUyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int valueLength2 = dataPayload.readInt();\n          \n          \n            \n                        int valueLength = dataPayload.readInt();", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379228524", "createdAt": "2020-02-14T02:53:27Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/KeyValueSchemaHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.airlift.log.Logger;\n+import io.netty.buffer.ByteBuf;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n+import org.apache.pulsar.common.schema.KeyValue;\n+import org.apache.pulsar.common.schema.KeyValueEncodingType;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+\n+\n+/**\n+ * Schema handler for payload in the KeyValue format.\n+ */\n+public class KeyValueSchemaHandler implements SchemaHandler {\n+\n+    private static final Logger log = Logger.get(KeyValueSchemaHandler.class);\n+\n+    private final static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private final List<PulsarColumnHandle> columnHandles;\n+\n+    private final SchemaHandler keySchemaHandler;\n+\n+    private final SchemaHandler valueSchemaHandler;\n+\n+    private KeyValueEncodingType keyValueEncodingType;\n+\n+    public KeyValueSchemaHandler(SchemaInfo schemaInfo, List<PulsarColumnHandle> columnHandles) {\n+        this.columnHandles = columnHandles;\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        keySchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getKey(), columnHandles);\n+        valueSchemaHandler = PulsarSchemaHandlers.newPulsarSchemaHandler(kvSchemaInfo.getValue(), columnHandles);\n+        keyValueEncodingType = KeyValueSchemaInfo.decodeKeyValueEncodingType(schemaInfo);\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf payload) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object deserialize(ByteBuf keyPayload, ByteBuf dataPayload) {\n+        ByteBuf keyByteBuf;\n+        ByteBuf valueByteBuf;\n+        if (Objects.equals(keyValueEncodingType, KeyValueEncodingType.INLINE)) {\n+            dataPayload.resetReaderIndex();\n+            int keyLength2 = dataPayload.readInt();\n+            keyByteBuf = dataPayload.readBytes(keyLength2);\n+\n+            int valueLength2 = dataPayload.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMTk0MQ==", "bodyText": "It's better to use a since enum to indicate the column is key column or value column for KeyValueSchema.", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379231941", "createdAt": "2020-02-14T03:11:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnHandle.java", "diffHunk": "@@ -58,6 +59,16 @@\n \n     private final Integer[] positionIndices;\n \n+    /**\n+     * True if the column is key column handler for KeyValueSchema.\n+     */\n+    private final boolean key;\n+\n+    /**\n+     * True if the column is value column handler for KeyValueSchema.\n+     */\n+    private final boolean value;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTQ1MQ==", "bodyText": "Maybe this can be handled in PulsarColumnMetadata.class. If the PulsarColumnMetadata known the column is key or value, straightforward rename it.", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379235451", "createdAt": "2020-02-14T03:29:32Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarMetadata.java", "diffHunk": "@@ -398,6 +408,50 @@ private ConnectorTableMetadata getTableMetadata(SchemaTableName schemaTableName,\n         }\n          return builder.build();\n     }\n+\n+    static List<ColumnMetadata> getPulsarColumnsFromKeyValueSchema(TopicName topicName,\n+                                                                   SchemaInfo schemaInfo,\n+                                                                   boolean withInternalColumns) {\n+        ImmutableList.Builder<ColumnMetadata> builder = ImmutableList.builder();\n+        KeyValue<SchemaInfo, SchemaInfo> kvSchemaInfo = KeyValueSchemaInfo.decodeKeyValueSchemaInfo(schemaInfo);\n+        SchemaInfo keySchemaInfo = kvSchemaInfo.getKey();\n+        List<ColumnMetadata> keyColumnMetadataList = getPulsarColumns(topicName, keySchemaInfo, false,\n+                true, false);\n+        renameColumnName(keyColumnMetadataList, \"key.\");\n+        builder.addAll(keyColumnMetadataList);\n+\n+        SchemaInfo valueSchemaInfo = kvSchemaInfo.getValue();\n+        List<ColumnMetadata> valueColumnMetadataList = getPulsarColumns(topicName, valueSchemaInfo, false,\n+                false, true);\n+        renameColumnName(valueColumnMetadataList, \"value.\");\n+        builder.addAll(valueColumnMetadataList);\n+\n+        if (withInternalColumns) {\n+            PulsarInternalColumn.getInternalFields()\n+                    .forEach(pulsarInternalColumn -> builder.add(pulsarInternalColumn.getColumnMetadata(false)));\n+        }\n+        return builder.build();\n+    }\n+\n+    private static void renameColumnName(List<ColumnMetadata> columnMetadataList, String namePrefix) {\n+        Class<PulsarColumnMetadata> clazz = PulsarColumnMetadata.class;\n+        Class<ColumnMetadata> superClazz = ColumnMetadata.class;\n+        Field nameField = null;\n+        Field nameWithCaseField = null;\n+        try {\n+            nameField = superClazz.getDeclaredField(\"name\");\n+            nameField.setAccessible(true);\n+            nameWithCaseField = clazz.getDeclaredField(\"nameWithCase\");\n+            nameWithCaseField.setAccessible(true);\n+            for (ColumnMetadata columnMetadata : columnMetadataList) {\n+                nameField.set(columnMetadata, namePrefix + columnMetadata.getName());\n+                nameWithCaseField.set(columnMetadata, columnMetadata.getName());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjkzOA==", "bodyText": "We can get the keyBytes by  message.getKeyBytes(), so that you don't need to decode a String by base64 decoder.", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379236938", "createdAt": "2020-02-14T03:38:07Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -418,7 +421,16 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        currentRecord = this.schemaHandler.deserialize(this.currentMessage.getData());\n+        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n+            ByteBuf keyByteBuf = null;\n+            if (this.currentMessage.getKey().isPresent()) {\n+                keyByteBuf = Unpooled.wrappedBuffer(\n+                        Base64.getDecoder().decode(this.currentMessage.getKey().get()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd5fa66c55d0da3736845367942a49525fbcd64"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/0a5f532676951fdfa4fd682216dd49a31a67c9c8", "committedDate": "2020-02-14T18:14:22Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mjg4MTA2", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359288106", "createdAt": "2020-02-15T00:44:04Z", "commit": {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0NDowNFrOFqHLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0NDowNFrOFqHLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjEyMw==", "bodyText": "It's better to named isKeyBase64Encoded().", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379702123", "createdAt": "2020-02-15T00:44:04Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/api/raw/RawMessage.java", "diffHunk": "@@ -101,4 +101,19 @@\n      * @return the key of the message\n      */\n     Optional<String> getKey();\n+\n+    /**\n+     * Get byteBuf of the key.\n+     *\n+     * @return the byte array with the key payload\n+     */\n+    Optional<ByteBuf> getKeyBytes();\n+\n+    /**\n+     * Check whether the key has been base64 encoded.\n+     *\n+     * @return true if the key is base64 encoded, false otherwise\n+     */\n+    boolean hasBase64EncodedKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjkxMzEw", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359291310", "createdAt": "2020-02-15T01:07:40Z", "commit": {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowNzo0MFrOFqHWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowNzo0MFrOFqHWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTAxNQ==", "bodyText": "If exception cause when reading schema properties, we'd better throw a runtime exception.", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379705015", "createdAt": "2020-02-15T01:07:40Z", "author": {"login": "codelipenghui"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarSplit.java", "diffHunk": "@@ -95,7 +97,23 @@ public PulsarSplit(\n         this.tupleDomain = requireNonNull(tupleDomain, \"tupleDomain is null\");\n         this.startPosition = PositionImpl.get(startPositionLedgerId, startPositionEntryId);\n         this.endPosition = PositionImpl.get(endPositionLedgerId, endPositionEntryId);\n+        this.schemaInfoProperties = schemaInfoProperties;\n         this.offloadPolicies = offloadPolicies;\n+\n+        SchemaInfo schemaInfoTemp;\n+        try {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            schemaInfoTemp = SchemaInfo.builder()\n+                    .name(originSchemaName)\n+                    .type(schemaType)\n+                    .schema(schema.getBytes(\"ISO8859-1\"))\n+                    .properties(objectMapper.readValue(schemaInfoProperties, Map.class))\n+                    .build();\n+        } catch (Exception e) {\n+            log.error(\"Create schemaInfo failed!\", e);\n+            schemaInfoTemp = SchemaInfo.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5f532676951fdfa4fd682216dd49a31a67c9c8"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105770625f66f188ae495274617e8f2ee552ed34", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/105770625f66f188ae495274617e8f2ee552ed34", "committedDate": "2020-02-15T01:54:54Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mjk3MTM2", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359297136", "createdAt": "2020-02-15T02:15:11Z", "commit": {"oid": "105770625f66f188ae495274617e8f2ee552ed34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be97bf29692cffd5d474e9051fca4c42b09ab7a2", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/be97bf29692cffd5d474e9051fca4c42b09ab7a2", "committedDate": "2020-02-15T02:34:39Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzM4NDYx", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359338461", "createdAt": "2020-02-15T10:19:11Z", "commit": {"oid": "be97bf29692cffd5d474e9051fca4c42b09ab7a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mzc5NzU0", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359379754", "createdAt": "2020-02-16T04:32:55Z", "commit": {"oid": "be97bf29692cffd5d474e9051fca4c42b09ab7a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwNDozMjo1NlrOFqRtIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwNDozMjo1NlrOFqRtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg3NDU5Mw==", "bodyText": "I don't think we need to add value. for value. We should keep the behavior consistent between messages with keys and without keys.", "url": "https://github.com/apache/pulsar/pull/6325#discussion_r379874593", "createdAt": "2020-02-16T04:32:56Z", "author": {"login": "sijie"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -32,15 +33,20 @@\n     private String nameWithCase;\n     private String[] fieldNames;\n     private Integer[] positionIndices;\n+    private PulsarColumnHandle.HandleKeyValueType handleKeyValueType;\n+    public final static String KEY_SCHEMA_COLUMN_PREFIX = \"key.\";\n+    public final static String VALUE_SCHEMA_COLUMN_PREFIX = \"value.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be97bf29692cffd5d474e9051fca4c42b09ab7a2"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a7056278a762f8c2fc0be51c3232495ebd468b", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/35a7056278a762f8c2fc0be51c3232495ebd468b", "committedDate": "2020-02-16T10:18:13Z", "message": "modify prefix of the key schema filed name to '__key', remove the prefix of the value schema filed name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a92268791f0c3f8bb43aacf16105f23c73fea6", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/e2a92268791f0c3f8bb43aacf16105f23c73fea6", "committedDate": "2020-02-17T00:58:59Z", "message": "test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTQzMjM4", "url": "https://github.com/apache/pulsar/pull/6325#pullrequestreview-359543238", "createdAt": "2020-02-17T08:01:53Z", "commit": {"oid": "e2a92268791f0c3f8bb43aacf16105f23c73fea6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}