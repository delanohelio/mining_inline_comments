{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODI0MDUx", "number": 7818, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMToyNVrOEYeHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMToyNVrOEYeHyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDk0Nzk1OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMToyNVrOHA0qow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoyNTozNFrOHBLSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ==", "bodyText": "minor: remove asyncResponse on setMaxUnackedMessagesOnConsumer", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470624931", "createdAt": "2020-08-14T13:31:25Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MzU3MA==", "bodyText": "emm...I am a little confused that all previous set methods have asyncResponse,such as setBacklogQuota\u3001setMessageTTL\u3001setRetention...\nIs it better to be consistent? @jianyun8023", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470663570", "createdAt": "2020-08-14T14:38:28Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk3Mjc3Nw==", "bodyText": "@jianyun8023 would you please explain a little more of your reason for asyncResponse?\nWe need asyncResponse to make the request async.", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470972777", "createdAt": "2020-08-15T12:27:26Z", "author": {"login": "jiazhai"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5MDYyNg==", "bodyText": "Modify this method, remove the parameter asyncResponse, and modify the return  to CompletableFuture<Void>", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470990626", "createdAt": "2020-08-15T13:50:21Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDgwOA==", "bodyText": "Modify this method, remove the parameter asyncResponse, and modify the return to CompletableFuture<Void>\n\nIs it a mistake? This is not an internal method. Please take a look. @jianyun8023", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470994808", "createdAt": "2020-08-15T14:17:16Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDg2Mg==", "bodyText": "internalSetMaxUnackedMessagesOnConsumer already returns CompletableFuture", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470994862", "createdAt": "2020-08-15T14:18:14Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NTQ4OQ==", "bodyText": "I'm sorry, I made a mistake.", "url": "https://github.com/apache/pulsar/pull/7818#discussion_r470995489", "createdAt": "2020-08-15T14:25:34Z", "author": {"login": "jianyun8023"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/v2/PersistentTopics.java", "diffHunk": "@@ -250,6 +250,69 @@ public void createNonPartitionedTopic(\n         internalCreateNonPartitionedTopic(authoritative);\n     }\n \n+    @GET\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Get max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),\n+            @ApiResponse(code = 500, message = \"Internal server error\"),})\n+    public void getMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        TopicPolicies topicPolicies = getTopicPolicies(topicName).orElse(new TopicPolicies());\n+        if (topicPolicies.isMaxUnackedMessagesOnConsumerSet()) {\n+            asyncResponse.resume(topicPolicies.getMaxUnackedMessagesOnConsumer());\n+        } else {\n+            asyncResponse.resume(Response.noContent().build());\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Set max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void setMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                    @PathParam(\"tenant\") String tenant,\n+                                                    @PathParam(\"namespace\") String namespace,\n+                                                    @PathParam(\"topic\") @Encoded String encodedTopic,\n+                                                    @ApiParam(value = \"Max unacked messages on consumer policies for the specified topic\")\n+                                                            Integer maxUnackedNum) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        validateAdminAccessForTenant(tenant);\n+        validatePoliciesReadOnlyAccess();\n+        checkTopicLevelPolicyEnable();\n+        if (topicName.isGlobal()) {\n+            validateGlobalNamespaceOwnership(namespaceName);\n+        }\n+        internalSetMaxUnackedMessagesOnConsumer(maxUnackedNum).whenComplete((res, ex) -> {\n+            if (ex instanceof RestException) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(ex);\n+            } else if (ex != null) {\n+                log.error(\"Failed set MaxUnackedMessagesOnConsumer\", ex);\n+                asyncResponse.resume(new RestException(ex));\n+            } else {\n+                asyncResponse.resume(Response.noContent().build());\n+            }\n+        });\n+    }\n+\n+    @DELETE\n+    @Path(\"/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer\")\n+    @ApiOperation(value = \"Delete max unacked messages per consumer config on a topic.\")\n+    @ApiResponses(value = {@ApiResponse(code = 403, message = \"Don't have admin permission\"),\n+            @ApiResponse(code = 404, message = \"Tenant or cluster or namespace or topic doesn't exist\"),})\n+    public void deleteMaxUnackedMessagesOnConsumer(@Suspended final AsyncResponse asyncResponse,\n+                                                       @PathParam(\"tenant\") String tenant,\n+                                                       @PathParam(\"namespace\") String namespace,\n+                                                       @PathParam(\"topic\") @Encoded String encodedTopic) {\n+        validateTopicName(tenant, namespace, encodedTopic);\n+        setMaxUnackedMessagesOnConsumer(asyncResponse, tenant, namespace, encodedTopic, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDkzMQ=="}, "originalCommit": {"oid": "9da33f6b44c47c65098a1c9078f0b22f145aedfd"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2245, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}