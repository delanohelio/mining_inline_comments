{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjc4Njg1", "number": 8098, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjo1NDozNlrOEmLbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0MDoxNFrOEmYJvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDY4NDgyOnYy", "diffSide": "RIGHT", "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjo1NDozNlrOHWDpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNToxNVrOHWW2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA==", "bodyText": "I think there is already too arguments for the CLI.  Lets try to create something more generic.  Instead of creating an argument for a specific provider, can we create an argument to allow users to specify the secret provider type?  In the future, if we add more providers, I don't want to keep add one-of arguments.  For example, can we create a enum?\nEnum SecretsProviderType {\nENV,\nDEFAULT,\n...\n}\nbased on the enum determine", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492890528", "createdAt": "2020-09-22T16:54:36Z", "author": {"login": "jerrypeng"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java", "diffHunk": "@@ -627,6 +627,8 @@ protected void validateFunctionConfigs(FunctionConfig functionConfig) {\n         protected Integer instanceIdOffset = 0;\n         @Parameter(names = \"--runtime\", description = \"either THREAD or PROCESS. Only applies for Java functions\")\n         protected String runtime;\n+        @Parameter(names = \"--environment-based-secrets-provider\", description = \"Should we use environment based secret provider\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49261c6e42419dc2f96cddbb7f901ac34cf3e5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NTU4Mg==", "bodyText": "Actually we should just let the user to specify class of the secrets configurator to use.  That is simplest and generic.\n--secrets-provider-configurator-classname", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492895582", "createdAt": "2020-09-22T17:02:39Z", "author": {"login": "jerrypeng"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java", "diffHunk": "@@ -627,6 +627,8 @@ protected void validateFunctionConfigs(FunctionConfig functionConfig) {\n         protected Integer instanceIdOffset = 0;\n         @Parameter(names = \"--runtime\", description = \"either THREAD or PROCESS. Only applies for Java functions\")\n         protected String runtime;\n+        @Parameter(names = \"--environment-based-secrets-provider\", description = \"Should we use environment based secret provider\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA=="}, "originalCommit": {"oid": "e49261c6e42419dc2f96cddbb7f901ac34cf3e5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTAxMw==", "bodyText": "Changed", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205013", "createdAt": "2020-09-23T05:25:15Z", "author": {"login": "srkukarni"}, "path": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java", "diffHunk": "@@ -627,6 +627,8 @@ protected void validateFunctionConfigs(FunctionConfig functionConfig) {\n         protected Integer instanceIdOffset = 0;\n         @Parameter(names = \"--runtime\", description = \"either THREAD or PROCESS. Only applies for Java functions\")\n         protected String runtime;\n+        @Parameter(names = \"--environment-based-secrets-provider\", description = \"Should we use environment based secret provider\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MDUyOA=="}, "originalCommit": {"oid": "e49261c6e42419dc2f96cddbb7f901ac34cf3e5e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDkyNDM5OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1Njo1NlrOHWF9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNToyMVrOHWW2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyODQyNQ==", "bodyText": "Just create an instance using the class name. Use method:\nhttps://github.com/apache/pulsar/blob/master/pulsar-common/src/main/java/org/apache/pulsar/common/util/Reflections.java#L64", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492928425", "createdAt": "2020-09-22T17:56:56Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java", "diffHunk": "@@ -418,11 +428,24 @@ private void startThreadedMode(org.apache.pulsar.functions.proto.Function.Functi\n                                            int parallelism, int instanceIdOffset, String serviceUrl,\n                                            String stateStorageServiceUrl, AuthenticationConfig authConfig,\n                                            String userCodeFile) throws Exception {\n+        SecretsProvider secretsProvider;\n+        if (secretsProviderClassName != null) {\n+            if (secretsProviderClassName.equals(ClearTextSecretsProvider.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTA0NQ==", "bodyText": "Done", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205045", "createdAt": "2020-09-23T05:25:21Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java", "diffHunk": "@@ -418,11 +428,24 @@ private void startThreadedMode(org.apache.pulsar.functions.proto.Function.Functi\n                                            int parallelism, int instanceIdOffset, String serviceUrl,\n                                            String stateStorageServiceUrl, AuthenticationConfig authConfig,\n                                            String userCodeFile) throws Exception {\n+        SecretsProvider secretsProvider;\n+        if (secretsProviderClassName != null) {\n+            if (secretsProviderClassName.equals(ClearTextSecretsProvider.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyODQyNQ=="}, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDkyODQyOnYy", "diffSide": "RIGHT", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1ODowM1rOHWGATQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNToyOFrOHWW2YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMQ==", "bodyText": "These comments don't make sense for this class", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492929101", "createdAt": "2020-09-22T17:58:03Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTA4OQ==", "bodyText": "Reworded", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205089", "createdAt": "2020-09-23T05:25:28Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTEwMQ=="}, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDk4MzMxOnYy", "diffSide": "RIGHT", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoxMjo0OFrOHWGiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNToyNTo0MVrOHWW2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzgxMg==", "bodyText": "There is not really point to have this class. Just refactor ProcessRuntime to take in a SecretsProvider like ThreadRuntime", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r492937812", "createdAt": "2020-09-22T18:12:48Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.\n+ * As such this implementation is strictly when workers are configured to use kubernetes runtime.\n+ * We use kubernetes in built secrets and bind them as environment variables within the function container\n+ * to ensure that the secrets are available to the function at runtime. Then we plug in the\n+ * EnvironmentBasedSecretsConfig as the secrets provider who knows how to read these environment variables.\n+ */\n+public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTE1MA==", "bodyText": "Not really in the scope of the pr", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493205150", "createdAt": "2020-09-23T05:25:41Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+import org.apache.pulsar.functions.secretsprovider.EnvironmentBasedSecretsProvider;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This file defines the SecretsProviderConfigurator that will be used by default for running in Kubernetes.\n+ * As such this implementation is strictly when workers are configured to use kubernetes runtime.\n+ * We use kubernetes in built secrets and bind them as environment variables within the function container\n+ * to ensure that the secrets are available to the function at runtime. Then we plug in the\n+ * EnvironmentBasedSecretsConfig as the secrets provider who knows how to read these environment variables.\n+ */\n+public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzgxMg=="}, "originalCommit": {"oid": "41434775b3ca4fae735f5f037585c95279729ed9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Njc3MDAwOnYy", "diffSide": "RIGHT", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0MDowMlrOHWXHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0MDowMlrOHWXHqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTUxNQ==", "bodyText": "nit not sure why we mention kubernetes here in the comment.  SecretsProviderConfigurator are not kubernetes specific", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493209515", "createdAt": "2020-09-23T05:40:02Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1717dac772bf198b7d8b691e95a24e770292f7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Njc3MDU1OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0MDoxNFrOHWXH7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0MDoxNFrOHWXH7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwOTU4MA==", "bodyText": "nit remove this comment", "url": "https://github.com/apache/pulsar/pull/8098#discussion_r493209580", "createdAt": "2020-09-23T05:40:14Z", "author": {"login": "jerrypeng"}, "path": "pulsar-functions/secrets/src/main/java/org/apache/pulsar/functions/secretsproviderconfigurator/NameAndConfigBasedSecretsProviderConfigurator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.functions.secretsproviderconfigurator;\n+\n+import com.google.gson.reflect.TypeToken;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import org.apache.pulsar.functions.proto.Function;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * This is a very simple secrets provider which wires in a given secrets provider classname/config\n+ * to the function instances/containers. This does not do any special kubernetes specific wiring.\n+ */\n+public class NameAndConfigBasedSecretsProviderConfigurator implements SecretsProviderConfigurator {\n+    private String className;\n+    private Map<String, String> config;\n+    public NameAndConfigBasedSecretsProviderConfigurator(String className, Map<String, String> config) {\n+        this.className = className;\n+        this.config = config;\n+    }\n+    @Override\n+    public String getSecretsProviderClassName(Function.FunctionDetails functionDetails) {\n+        return className;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSecretsProviderConfig(Function.FunctionDetails functionDetails) {\n+        return config;\n+    }\n+\n+    // Kubernetes secrets can be exposed as volume mounts or as environment variables in the pods. We are currently using the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1717dac772bf198b7d8b691e95a24e770292f7"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2109, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}