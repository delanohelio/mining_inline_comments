{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mzg4OTEx", "number": 8325, "title": "[Issue 8311][pulsar-client-go] Fix memory leak in cgo golang client", "bodyText": "Fixes #8311.\nMotivation\nIn the C/C++ glue code, file c_Producer.cc function handle_producer_send(), a new pulsar_message_id_t is created. This needs to be freed at some point.\nBecause of issues with legacy C clients, it is not possible to call delete from inside c_Producer.cc (see here). Instead, the client must call pulsar_message_id_free().\nPreviously, the cgo interface was not freeing this message ID, which caused a memory leak on every message sent.\nModifications\nThis PR adds the missing calls to pulsar_message_id_free(). The calls are added in the cgo layer, in pulsarProducerSendCallbackProxy() and pulsarProducerSendCallbackProxyWithMsgID().\nVerifying this change\nThis change is a trivial rework / code cleanup without any test coverage.\nI have manually checked (using valgrind) that this fixes the leak I was previously seeing.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API: no\nThe schema: no\nThe default values of configurations: no\nThe wire protocol: no\nThe rest endpoints: no\nThe admin cli options: no\nAnything that affects deployment: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no", "createdAt": "2020-10-21T09:25:37Z", "url": "https://github.com/apache/pulsar/pull/8325", "merged": true, "mergeCommit": {"oid": "c5705f247f865b1a24f1309c22dc2d08fbba966a"}, "closed": true, "closedAt": "2020-10-29T02:21:46Z", "author": {"login": "bschofield"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUxNHuAFqTUxNDAzMjY2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXHuYCgFqTUxOTI2NTYwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDMyNjY1", "url": "https://github.com/apache/pulsar/pull/8325#pullrequestreview-514032665", "createdAt": "2020-10-21T17:55:24Z", "commit": {"oid": "fa4356d95417fea946d56d469efb53ad25f6204c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NToyNFrOHl6YSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NToyNFrOHl6YSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxNTg0OA==", "bodyText": "This doesn't change anything, it's just for consistency with the next line.", "url": "https://github.com/apache/pulsar/pull/8325#discussion_r509515848", "createdAt": "2020-10-21T17:55:24Z", "author": {"login": "bschofield"}, "path": "pulsar-client-go/pulsar/c_go_pulsar.h", "diffHunk": "@@ -61,7 +61,7 @@ static inline void _pulsar_producer_close_async(pulsar_producer_t *producer, voi\n     pulsar_producer_close_async(producer, pulsarProducerCloseCallbackProxy, ctx);\n }\n \n-void pulsarProducerSendCallbackProxy(pulsar_result result, pulsar_message_id_t *message, void *ctx);\n+void pulsarProducerSendCallbackProxy(pulsar_result result, pulsar_message_id_t *messageId, void *ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4356d95417fea946d56d469efb53ad25f6204c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODc4MTc1", "url": "https://github.com/apache/pulsar/pull/8325#pullrequestreview-514878175", "createdAt": "2020-10-22T15:52:03Z", "commit": {"oid": "fa4356d95417fea946d56d469efb53ad25f6204c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MjowM1rOHmoksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MjowM1rOHmoksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjY5MQ==", "bodyText": "@bschofield I think this free should not be done, because getMessageId(messageId) is already attaching a finalizer to the Go object and it will free the message id automatically:\nfunc getMessageId(messageId *C.pulsar_message_id_t) MessageID {\n\tmsgId := &messageID{ptr: messageId}\n\truntime.SetFinalizer(msgId, messageIdFinalizer)\n\treturn msgId\n}", "url": "https://github.com/apache/pulsar/pull/8325#discussion_r510272691", "createdAt": "2020-10-22T15:52:03Z", "author": {"login": "merlimat"}, "path": "pulsar-client-go/pulsar/c_producer.go", "diffHunk": "@@ -298,6 +298,7 @@ func pulsarProducerSendCallbackProxyWithMsgID(res C.pulsar_result, messageId *C.\n \t\tsendCallback.callback(getMessageId(messageId), newError(res, \"Failed to send message\"))\n \t} else {\n \t\tsendCallback.callback(getMessageId(messageId), nil)\n+\t\tC.pulsar_message_id_free(messageId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4356d95417fea946d56d469efb53ad25f6204c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95d48811e5f6d51a2cdb0d3b8c443a70a03da4f", "author": {"user": {"login": "bschofield", "name": "Ben Schofield"}}, "url": "https://github.com/apache/pulsar/commit/a95d48811e5f6d51a2cdb0d3b8c443a70a03da4f", "committedDate": "2020-10-22T17:03:33Z", "message": "[Issue 8311] Fixes memory leak in cgo golang client\n\nIn the C/C++ glue code, file c_Producer.cc function handle_producer_send(),\na new pulsar_message_id_t is created. This needs to be freed at some point.\n\nBecause of issues with legacy C clients, it is not possible to call delete\nfrom inside c_Producer.cc. Instead, the client must call pulsar_message_id_free().\n\nPreviously, the cgo interface was not freeing this message ID, which caused a\nmemory leak on every message sent."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b8f4a4510449274e50af6b1233f73f22d83b3d3", "author": {"user": {"login": "bschofield", "name": "Ben Schofield"}}, "url": "https://github.com/apache/pulsar/commit/0b8f4a4510449274e50af6b1233f73f22d83b3d3", "committedDate": "2020-10-22T17:03:33Z", "message": "The explicit free inside pulsarProducerSendCallbackProxyWithMsgID() is not required, because the getMessageId() call attaches a finalizer which will take care of things."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODIxOTIy", "url": "https://github.com/apache/pulsar/pull/8325#pullrequestreview-518821922", "createdAt": "2020-10-28T15:56:51Z", "commit": {"oid": "0b8f4a4510449274e50af6b1233f73f22d83b3d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjY1NjA3", "url": "https://github.com/apache/pulsar/pull/8325#pullrequestreview-519265607", "createdAt": "2020-10-29T01:17:29Z", "commit": {"oid": "0b8f4a4510449274e50af6b1233f73f22d83b3d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1270, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}