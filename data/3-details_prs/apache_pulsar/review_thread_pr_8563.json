{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNTY3NTMy", "number": 8563, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozMDoyMFrOE4qm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozMDoyMFrOE4qm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODUzNzc3OnYy", "diffSide": "RIGHT", "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozMDoyMFrOHyuXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzozMjo0NlrOHyucVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MDQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (partition > 0) {\n          \n          \n            \n                    if (partition >= 0) {", "url": "https://github.com/apache/pulsar/pull/8563#discussion_r522950492", "createdAt": "2020-11-13T13:30:20Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "diffHunk": "@@ -75,34 +76,48 @@ public void start() throws TransactionCoordinatorClientException {\n     public CompletableFuture<Void> startAsync() {\n         if (STATE_UPDATER.compareAndSet(this, State.NONE, State.STARTING)) {\n             return pulsarClient.getLookup().getPartitionedTopicMetadata(TopicName.TRANSACTION_COORDINATOR_ASSIGN)\n-                .thenAccept(partitionMeta -> {\n+                .thenCompose(partitionMeta -> {\n+                    List<CompletableFuture<Void>> connectFutureList = new ArrayList<>();\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Transaction meta store assign partition is {}.\", partitionMeta.partitions);\n                     }\n                     if (partitionMeta.partitions > 0) {\n                         handlers = new TransactionMetaStoreHandler[partitionMeta.partitions];\n                         for (int i = 0; i < partitionMeta.partitions; i++) {\n-                            TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(i, pulsarClient,\n-                                    TopicName.TRANSACTION_COORDINATOR_ASSIGN.toString() + TopicName.PARTITIONED_TOPIC_SUFFIX + i);\n+                            CompletableFuture<Void> connectFuture = new CompletableFuture<>();\n+                            connectFutureList.add(connectFuture);\n+                            TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(\n+                                    i, pulsarClient, getTCAssignTopicName(i), connectFuture);\n                             handlers[i] = handler;\n                             handlerMap.put(i, handler);\n                         }\n                     } else {\n                         handlers = new TransactionMetaStoreHandler[1];\n+                        CompletableFuture<Void> connectFuture = new CompletableFuture<>();\n+                        connectFutureList.add(connectFuture);\n                         TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(0, pulsarClient,\n-                                TopicName.TRANSACTION_COORDINATOR_ASSIGN.toString());\n+                                getTCAssignTopicName(-1), connectFuture);\n                         handlers[0] = handler;\n                         handlerMap.put(0, handler);\n                     }\n \n                     STATE_UPDATER.set(TransactionCoordinatorClientImpl.this, State.READY);\n \n+                    return FutureUtil.waitForAll(connectFutureList);\n                 });\n         } else {\n             return FutureUtil.failedFuture(new CoordinatorClientStateException(\"Can not start while current state is \" + state));\n         }\n     }\n \n+    private String getTCAssignTopicName(int partition) {\n+        if (partition > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87931546be0edf217437f9b6884613682e70dee4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MTc2NA==", "bodyText": "Ok, I'll fix this.", "url": "https://github.com/apache/pulsar/pull/8563#discussion_r522951764", "createdAt": "2020-11-13T13:32:46Z", "author": {"login": "gaoran10"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/transaction/TransactionCoordinatorClientImpl.java", "diffHunk": "@@ -75,34 +76,48 @@ public void start() throws TransactionCoordinatorClientException {\n     public CompletableFuture<Void> startAsync() {\n         if (STATE_UPDATER.compareAndSet(this, State.NONE, State.STARTING)) {\n             return pulsarClient.getLookup().getPartitionedTopicMetadata(TopicName.TRANSACTION_COORDINATOR_ASSIGN)\n-                .thenAccept(partitionMeta -> {\n+                .thenCompose(partitionMeta -> {\n+                    List<CompletableFuture<Void>> connectFutureList = new ArrayList<>();\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Transaction meta store assign partition is {}.\", partitionMeta.partitions);\n                     }\n                     if (partitionMeta.partitions > 0) {\n                         handlers = new TransactionMetaStoreHandler[partitionMeta.partitions];\n                         for (int i = 0; i < partitionMeta.partitions; i++) {\n-                            TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(i, pulsarClient,\n-                                    TopicName.TRANSACTION_COORDINATOR_ASSIGN.toString() + TopicName.PARTITIONED_TOPIC_SUFFIX + i);\n+                            CompletableFuture<Void> connectFuture = new CompletableFuture<>();\n+                            connectFutureList.add(connectFuture);\n+                            TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(\n+                                    i, pulsarClient, getTCAssignTopicName(i), connectFuture);\n                             handlers[i] = handler;\n                             handlerMap.put(i, handler);\n                         }\n                     } else {\n                         handlers = new TransactionMetaStoreHandler[1];\n+                        CompletableFuture<Void> connectFuture = new CompletableFuture<>();\n+                        connectFutureList.add(connectFuture);\n                         TransactionMetaStoreHandler handler = new TransactionMetaStoreHandler(0, pulsarClient,\n-                                TopicName.TRANSACTION_COORDINATOR_ASSIGN.toString());\n+                                getTCAssignTopicName(-1), connectFuture);\n                         handlers[0] = handler;\n                         handlerMap.put(0, handler);\n                     }\n \n                     STATE_UPDATER.set(TransactionCoordinatorClientImpl.this, State.READY);\n \n+                    return FutureUtil.waitForAll(connectFutureList);\n                 });\n         } else {\n             return FutureUtil.failedFuture(new CoordinatorClientStateException(\"Can not start while current state is \" + state));\n         }\n     }\n \n+    private String getTCAssignTopicName(int partition) {\n+        if (partition > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MDQ5Mg=="}, "originalCommit": {"oid": "87931546be0edf217437f9b6884613682e70dee4"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2793, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}