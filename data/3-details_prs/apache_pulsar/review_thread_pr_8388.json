{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzAwMjU1", "number": 8388, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMDowNFrOEywd0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNDo1N1rOEywyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjU4MzIzOnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-non-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMDowNFrOHpkmaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTozODo0NlrOHpl6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MzMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sidebar_label: Topics2\n          \n          \n            \n            sidebar_label: Topics 2", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513353321", "createdAt": "2020-10-28T11:00:04Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-non-partitioned-topics.md", "diffHunk": "@@ -1,159 +1,5 @@\n ---\n id: admin-api-non-partitioned-topics\n title: Managing non-partitioned topics\n-sidebar_label: Non-Partitioned topics\n----\n-\n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage non-partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Non-Partitioned topics resources\n-\n-### Create\n-\n-Non-partitioned topics in Pulsar must be explicitly created. When creating a new non-partitioned topic you\n-need to provide a name for the topic.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n-\n-#### pulsar-admin\n-\n-You can create non-partitioned topics using the [`create`](reference-pulsar-admin.md#create-3)\n-command and specifying the topic name as an argument.\n-Here's an example:\n-\n-```shell\n-$ bin/pulsar-admin topics create \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-> #### Note\n->\n-> It's only allowed to create non partitioned topic of name contains suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', if there's already a partitioned topic with same name, in this case 'xyz-topic', and has\n-> number of partition larger then that numeric value in this case 11(partition index is start from 0). Else creation of such topic will fail.\n-\n-#### REST API\n-\n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic|operation/createNonPartitionedTopic}\n-\n-#### Java\n-\n-```java\n-String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.topics().createNonPartitionedTopic(topicName);\n-```\n-\n-### Delete\n-\n-#### pulsar-admin\n-\n-Non-partitioned topics can be deleted using the\n-[`delete`](reference-pulsar-admin.md#delete-4) command, specifying the topic by name:\n-\n-```shell\n-$ bin/pulsar-admin topics delete \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|DELETE|/admin/v2/persistent/:tenant/:namespace/:topic|operation/deleteTopic}\n-\n-#### Java\n-\n-```java\n-admin.topics().delete(persistentTopic);\n-```\n-\n-### List\n-\n-It provides a list of topics existing under a given namespace.  \n-\n-#### pulsar-admin\n-\n-```shell\n-$ pulsar-admin topics list tenant/namespace\n-persistent://tenant/namespace/topic1\n-persistent://tenant/namespace/topic2\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace|operation/getList}\n-\n-#### Java\n-\n-```java\n-admin.topics().getList(namespace);\n-```\n-\n-### Stats\n-\n-It shows current statistics of a given topic. Here's an example payload:\n-\n-The following stats are available:\n-\n-|Stat|Description|\n-|----|-----------|\n-|msgRateIn|The sum of all local and replication publishers\u2019 publish rates in messages per second|\n-|msgThroughputIn|Same as msgRateIn but in bytes per second instead of messages per second|\n-|msgRateOut|The sum of all local and replication consumers\u2019 dispatch rates in messages per second|\n-|msgThroughputOut|Same as msgRateOut but in bytes per second instead of messages per second|\n-|averageMsgSize|Average message size, in bytes, from this publisher within the last interval|\n-|storageSize|The sum of the ledgers\u2019 storage size for this topic|\n-|publishers|The list of all local publishers into the topic. There can be anywhere from zero to thousands.|\n-|producerId|Internal identifier for this producer on this topic|\n-|producerName|Internal identifier for this producer, generated by the client library|\n-|address|IP address and source port for the connection of this producer|\n-|connectedSince|Timestamp this producer was created or last reconnected|\n-|subscriptions|The list of all local subscriptions to the topic|\n-|my-subscription|The name of this subscription (client defined)|\n-|msgBacklog|The count of messages in backlog for this subscription|\n-|msgBacklogNoDelayed|The count of messages in backlog without delayed messages for this subscription|\n-|type|This subscription type|\n-|msgRateExpired|The rate at which messages were discarded instead of dispatched from this subscription due to TTL|\n-|consumers|The list of connected consumers for this subscription|\n-|consumerName|Internal identifier for this consumer, generated by the client library|\n-|availablePermits|The number of messages this consumer has space for in the client library\u2019s listen queue. A value of 0 means the client library\u2019s queue is full and receive() isn\u2019t being called. A nonzero value means this consumer is ready to be dispatched messages.|\n-|replication|This section gives the stats for cross-colo replication of this topic|\n-|replicationBacklog|The outbound replication backlog in messages|\n-|connected|Whether the outbound replicator is connected|\n-|replicationDelayInSeconds|How long the oldest message has been waiting to be sent through the connection, if connected is true|\n-|inboundConnection|The IP and port of the broker in the remote cluster\u2019s publisher connection to this broker|\n-|inboundConnectedSince|The TCP connection being used to publish messages to the remote cluster. If there are no local publishers connected, this connection is automatically closed after a minute.|\n-\n-#### pulsar-admin\n-\n-The stats for the topic and its connected producers and consumers can be fetched by using the\n-[`stats`](reference-pulsar-admin.md#stats) command, specifying the topic by name:\n-\n-```shell\n-$ pulsar-admin topics stats \\\n-  persistent://test-tenant/namespace/topic \\\n-  --get-precise-backlog\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/stats|operation/getStats}\n-\n-#### Java\n-\n-```java\n-admin.topics().getStats(persistentTopic, false /* is precise backlog */);\n-```\n+sidebar_label: Topics2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1Mzk5OA==", "bodyText": "I don't think topics 2 is a good sidebar title. Could you please help refine the title?", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513353998", "createdAt": "2020-10-28T11:01:14Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-non-partitioned-topics.md", "diffHunk": "@@ -1,159 +1,5 @@\n ---\n id: admin-api-non-partitioned-topics\n title: Managing non-partitioned topics\n-sidebar_label: Non-Partitioned topics\n----\n-\n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage non-partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Non-Partitioned topics resources\n-\n-### Create\n-\n-Non-partitioned topics in Pulsar must be explicitly created. When creating a new non-partitioned topic you\n-need to provide a name for the topic.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n-\n-#### pulsar-admin\n-\n-You can create non-partitioned topics using the [`create`](reference-pulsar-admin.md#create-3)\n-command and specifying the topic name as an argument.\n-Here's an example:\n-\n-```shell\n-$ bin/pulsar-admin topics create \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-> #### Note\n->\n-> It's only allowed to create non partitioned topic of name contains suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', if there's already a partitioned topic with same name, in this case 'xyz-topic', and has\n-> number of partition larger then that numeric value in this case 11(partition index is start from 0). Else creation of such topic will fail.\n-\n-#### REST API\n-\n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic|operation/createNonPartitionedTopic}\n-\n-#### Java\n-\n-```java\n-String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.topics().createNonPartitionedTopic(topicName);\n-```\n-\n-### Delete\n-\n-#### pulsar-admin\n-\n-Non-partitioned topics can be deleted using the\n-[`delete`](reference-pulsar-admin.md#delete-4) command, specifying the topic by name:\n-\n-```shell\n-$ bin/pulsar-admin topics delete \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|DELETE|/admin/v2/persistent/:tenant/:namespace/:topic|operation/deleteTopic}\n-\n-#### Java\n-\n-```java\n-admin.topics().delete(persistentTopic);\n-```\n-\n-### List\n-\n-It provides a list of topics existing under a given namespace.  \n-\n-#### pulsar-admin\n-\n-```shell\n-$ pulsar-admin topics list tenant/namespace\n-persistent://tenant/namespace/topic1\n-persistent://tenant/namespace/topic2\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace|operation/getList}\n-\n-#### Java\n-\n-```java\n-admin.topics().getList(namespace);\n-```\n-\n-### Stats\n-\n-It shows current statistics of a given topic. Here's an example payload:\n-\n-The following stats are available:\n-\n-|Stat|Description|\n-|----|-----------|\n-|msgRateIn|The sum of all local and replication publishers\u2019 publish rates in messages per second|\n-|msgThroughputIn|Same as msgRateIn but in bytes per second instead of messages per second|\n-|msgRateOut|The sum of all local and replication consumers\u2019 dispatch rates in messages per second|\n-|msgThroughputOut|Same as msgRateOut but in bytes per second instead of messages per second|\n-|averageMsgSize|Average message size, in bytes, from this publisher within the last interval|\n-|storageSize|The sum of the ledgers\u2019 storage size for this topic|\n-|publishers|The list of all local publishers into the topic. There can be anywhere from zero to thousands.|\n-|producerId|Internal identifier for this producer on this topic|\n-|producerName|Internal identifier for this producer, generated by the client library|\n-|address|IP address and source port for the connection of this producer|\n-|connectedSince|Timestamp this producer was created or last reconnected|\n-|subscriptions|The list of all local subscriptions to the topic|\n-|my-subscription|The name of this subscription (client defined)|\n-|msgBacklog|The count of messages in backlog for this subscription|\n-|msgBacklogNoDelayed|The count of messages in backlog without delayed messages for this subscription|\n-|type|This subscription type|\n-|msgRateExpired|The rate at which messages were discarded instead of dispatched from this subscription due to TTL|\n-|consumers|The list of connected consumers for this subscription|\n-|consumerName|Internal identifier for this consumer, generated by the client library|\n-|availablePermits|The number of messages this consumer has space for in the client library\u2019s listen queue. A value of 0 means the client library\u2019s queue is full and receive() isn\u2019t being called. A nonzero value means this consumer is ready to be dispatched messages.|\n-|replication|This section gives the stats for cross-colo replication of this topic|\n-|replicationBacklog|The outbound replication backlog in messages|\n-|connected|Whether the outbound replicator is connected|\n-|replicationDelayInSeconds|How long the oldest message has been waiting to be sent through the connection, if connected is true|\n-|inboundConnection|The IP and port of the broker in the remote cluster\u2019s publisher connection to this broker|\n-|inboundConnectedSince|The TCP connection being used to publish messages to the remote cluster. If there are no local publishers connected, this connection is automatically closed after a minute.|\n-\n-#### pulsar-admin\n-\n-The stats for the topic and its connected producers and consumers can be fetched by using the\n-[`stats`](reference-pulsar-admin.md#stats) command, specifying the topic by name:\n-\n-```shell\n-$ pulsar-admin topics stats \\\n-  persistent://test-tenant/namespace/topic \\\n-  --get-precise-backlog\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/stats|operation/getStats}\n-\n-#### Java\n-\n-```java\n-admin.topics().getStats(persistentTopic, false /* is precise backlog */);\n-```\n+sidebar_label: Topics2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MzMyMQ=="}, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3NDkyMQ==", "bodyText": "@Huanli-Meng thank you very much for your comments.\nThe body content in the current md file will be merged into another md file, and then this md file will be empty or removed.\nSo it will not be displayed in the sidebar. You can regard the current metadata as placeholder.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513374921", "createdAt": "2020-10-28T11:38:46Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/admin-api-non-partitioned-topics.md", "diffHunk": "@@ -1,159 +1,5 @@\n ---\n id: admin-api-non-partitioned-topics\n title: Managing non-partitioned topics\n-sidebar_label: Non-Partitioned topics\n----\n-\n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage non-partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Non-Partitioned topics resources\n-\n-### Create\n-\n-Non-partitioned topics in Pulsar must be explicitly created. When creating a new non-partitioned topic you\n-need to provide a name for the topic.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n-\n-#### pulsar-admin\n-\n-You can create non-partitioned topics using the [`create`](reference-pulsar-admin.md#create-3)\n-command and specifying the topic name as an argument.\n-Here's an example:\n-\n-```shell\n-$ bin/pulsar-admin topics create \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-> #### Note\n->\n-> It's only allowed to create non partitioned topic of name contains suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', if there's already a partitioned topic with same name, in this case 'xyz-topic', and has\n-> number of partition larger then that numeric value in this case 11(partition index is start from 0). Else creation of such topic will fail.\n-\n-#### REST API\n-\n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic|operation/createNonPartitionedTopic}\n-\n-#### Java\n-\n-```java\n-String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.topics().createNonPartitionedTopic(topicName);\n-```\n-\n-### Delete\n-\n-#### pulsar-admin\n-\n-Non-partitioned topics can be deleted using the\n-[`delete`](reference-pulsar-admin.md#delete-4) command, specifying the topic by name:\n-\n-```shell\n-$ bin/pulsar-admin topics delete \\\n-  persistent://my-tenant/my-namespace/my-topic\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|DELETE|/admin/v2/persistent/:tenant/:namespace/:topic|operation/deleteTopic}\n-\n-#### Java\n-\n-```java\n-admin.topics().delete(persistentTopic);\n-```\n-\n-### List\n-\n-It provides a list of topics existing under a given namespace.  \n-\n-#### pulsar-admin\n-\n-```shell\n-$ pulsar-admin topics list tenant/namespace\n-persistent://tenant/namespace/topic1\n-persistent://tenant/namespace/topic2\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace|operation/getList}\n-\n-#### Java\n-\n-```java\n-admin.topics().getList(namespace);\n-```\n-\n-### Stats\n-\n-It shows current statistics of a given topic. Here's an example payload:\n-\n-The following stats are available:\n-\n-|Stat|Description|\n-|----|-----------|\n-|msgRateIn|The sum of all local and replication publishers\u2019 publish rates in messages per second|\n-|msgThroughputIn|Same as msgRateIn but in bytes per second instead of messages per second|\n-|msgRateOut|The sum of all local and replication consumers\u2019 dispatch rates in messages per second|\n-|msgThroughputOut|Same as msgRateOut but in bytes per second instead of messages per second|\n-|averageMsgSize|Average message size, in bytes, from this publisher within the last interval|\n-|storageSize|The sum of the ledgers\u2019 storage size for this topic|\n-|publishers|The list of all local publishers into the topic. There can be anywhere from zero to thousands.|\n-|producerId|Internal identifier for this producer on this topic|\n-|producerName|Internal identifier for this producer, generated by the client library|\n-|address|IP address and source port for the connection of this producer|\n-|connectedSince|Timestamp this producer was created or last reconnected|\n-|subscriptions|The list of all local subscriptions to the topic|\n-|my-subscription|The name of this subscription (client defined)|\n-|msgBacklog|The count of messages in backlog for this subscription|\n-|msgBacklogNoDelayed|The count of messages in backlog without delayed messages for this subscription|\n-|type|This subscription type|\n-|msgRateExpired|The rate at which messages were discarded instead of dispatched from this subscription due to TTL|\n-|consumers|The list of connected consumers for this subscription|\n-|consumerName|Internal identifier for this consumer, generated by the client library|\n-|availablePermits|The number of messages this consumer has space for in the client library\u2019s listen queue. A value of 0 means the client library\u2019s queue is full and receive() isn\u2019t being called. A nonzero value means this consumer is ready to be dispatched messages.|\n-|replication|This section gives the stats for cross-colo replication of this topic|\n-|replicationBacklog|The outbound replication backlog in messages|\n-|connected|Whether the outbound replicator is connected|\n-|replicationDelayInSeconds|How long the oldest message has been waiting to be sent through the connection, if connected is true|\n-|inboundConnection|The IP and port of the broker in the remote cluster\u2019s publisher connection to this broker|\n-|inboundConnectedSince|The TCP connection being used to publish messages to the remote cluster. If there are no local publishers connected, this connection is automatically closed after a minute.|\n-\n-#### pulsar-admin\n-\n-The stats for the topic and its connected producers and consumers can be fetched by using the\n-[`stats`](reference-pulsar-admin.md#stats) command, specifying the topic by name:\n-\n-```shell\n-$ pulsar-admin topics stats \\\n-  persistent://test-tenant/namespace/topic \\\n-  --get-precise-backlog\n-```\n-\n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/stats|operation/getStats}\n-\n-#### Java\n-\n-```java\n-admin.topics().getStats(persistentTopic, false /* is precise backlog */);\n-```\n+sidebar_label: Topics2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MzMyMQ=="}, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYxMzA5OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowODowOVrOHpk4kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowODowOVrOHpk4kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1Nzk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n          \n          \n            \n            By default, 60 seconds after creation, topics are considered inactive and deleted automatically to avoid generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` as required.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513357970", "createdAt": "2020-10-28T11:08:09Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYxOTc5OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxMDowM1rOHpk8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxMDowM1rOHpk8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1OTAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.\n          \n          \n            \n            > If a non-partitioned topic with the suffix '-partition-' followed by a numeric value like 'xyz-topic-partition-10', you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513359030", "createdAt": "2020-10-28T11:10:03Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n \n-You can create partitioned topics using the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n-command and specifying the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n+For more information about the two parameters, see [here](reference-configuration.md#broker).\n \n-Here's an example:\n+You can create partitioned topics in the following ways.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+When you create partitioned topics with the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n+command, you need to specify the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n \n ```shell\n $ bin/pulsar-admin topics create-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 4\n ```\n \n-> #### Note\n->\n-> If there already exists a non-partitioned topic with the suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic' as the partitions\n-> of the partitioned topic could override the existing non partitioned topic. You have to delete that non\n-> partitioned topic first then create the partitioned topic.\n-\n-#### REST API\n+> **Note**    \n+> If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYyNDg3OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxMTozMlrOHpk_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzoyMDoyMFrOHqGvVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1OTgzNA==", "bodyText": "when topics cannot be automatically created? or when auto-creation operation is disabled?", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513359834", "createdAt": "2020-10-28T11:11:32Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n \n-You can create partitioned topics using the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n-command and specifying the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n+For more information about the two parameters, see [here](reference-configuration.md#broker).\n \n-Here's an example:\n+You can create partitioned topics in the following ways.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+When you create partitioned topics with the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n+command, you need to specify the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n \n ```shell\n $ bin/pulsar-admin topics create-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 4\n ```\n \n-> #### Note\n->\n-> If there already exists a non-partitioned topic with the suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic' as the partitions\n-> of the partitioned topic could override the existing non partitioned topic. You have to delete that non\n-> partitioned topic first then create the partitioned topic.\n-\n-#### REST API\n+> **Note**    \n+> If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.\n \n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|PUT|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n int numPartitions = 4;\n-admin.persistentTopics().createPartitionedTopic(topicName, numPartitions);\n+admin.topics().createPartitionedTopic(topicName, numPartitions);\n ```\n \n-### Create missed partitions\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-Try to create partitions for partitioned topic. The partitions of partition topic have to be created, \n-can be used by repair partitions when topic auto creation is disabled\n-\n-#### pulsar-admin\n+### Create missed partitions\n \n-You can create missed partitions using the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions)\n-command and specifying the topic name as an argument.\n+When topic auto creation is disabled, and you have a partitioned topic without any partitions, you can use the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command to create partitions for the topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkxMjY2MQ==", "bodyText": "yes, when you set \"setAllowAutoTopicCreation\" to \"false\", topics cannot be created automatically.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513912661", "createdAt": "2020-10-29T03:20:20Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n \n-You can create partitioned topics using the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n-command and specifying the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n+For more information about the two parameters, see [here](reference-configuration.md#broker).\n \n-Here's an example:\n+You can create partitioned topics in the following ways.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+When you create partitioned topics with the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n+command, you need to specify the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n \n ```shell\n $ bin/pulsar-admin topics create-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 4\n ```\n \n-> #### Note\n->\n-> If there already exists a non-partitioned topic with the suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic' as the partitions\n-> of the partitioned topic could override the existing non partitioned topic. You have to delete that non\n-> partitioned topic first then create the partitioned topic.\n-\n-#### REST API\n+> **Note**    \n+> If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.\n \n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|PUT|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n int numPartitions = 4;\n-admin.persistentTopics().createPartitionedTopic(topicName, numPartitions);\n+admin.topics().createPartitionedTopic(topicName, numPartitions);\n ```\n \n-### Create missed partitions\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-Try to create partitions for partitioned topic. The partitions of partition topic have to be created, \n-can be used by repair partitions when topic auto creation is disabled\n-\n-#### pulsar-admin\n+### Create missed partitions\n \n-You can create missed partitions using the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions)\n-command and specifying the topic name as an argument.\n+When topic auto creation is disabled, and you have a partitioned topic without any partitions, you can use the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command to create partitions for the topic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1OTgzNA=="}, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYyNzY3OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxMjoyNVrOHplBmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzoyMTo1NlrOHqGzaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MDI4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can view the number of partitions in a partitioned topic with the [`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata) subcommand. \n          \n          \n            \n            You can check the number of partitions in a partitioned topic with the [`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata) subcommand.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513360282", "createdAt": "2020-10-28T11:12:25Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n \n-You can create partitioned topics using the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n-command and specifying the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n+For more information about the two parameters, see [here](reference-configuration.md#broker).\n \n-Here's an example:\n+You can create partitioned topics in the following ways.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+When you create partitioned topics with the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n+command, you need to specify the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n \n ```shell\n $ bin/pulsar-admin topics create-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 4\n ```\n \n-> #### Note\n->\n-> If there already exists a non-partitioned topic with the suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic' as the partitions\n-> of the partitioned topic could override the existing non partitioned topic. You have to delete that non\n-> partitioned topic first then create the partitioned topic.\n-\n-#### REST API\n+> **Note**    \n+> If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.\n \n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|PUT|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n int numPartitions = 4;\n-admin.persistentTopics().createPartitionedTopic(topicName, numPartitions);\n+admin.topics().createPartitionedTopic(topicName, numPartitions);\n ```\n \n-### Create missed partitions\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-Try to create partitions for partitioned topic. The partitions of partition topic have to be created, \n-can be used by repair partitions when topic auto creation is disabled\n-\n-#### pulsar-admin\n+### Create missed partitions\n \n-You can create missed partitions using the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions)\n-command and specifying the topic name as an argument.\n+When topic auto creation is disabled, and you have a partitioned topic without any partitions, you can use the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command to create partitions for the topic.\n \n-Here's an example:\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can create missed partitions with the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command and specify the topic name as an argument.\n \n ```shell\n $ bin/pulsar-admin topics create-missed-partitions \\\n   persistent://my-tenant/my-namespace/my-topic \\\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|POST|/admin/v2/persistent/:tenant/:namespace/:topic|operation/createMissedPartitions}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|POST|/admin/v2/topics/:tenant/:namespace/:topic|operation/createMissedPartitions}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.persistentTopics().createMissedPartitions(topicName);\n+admin.topics().createMissedPartitions(topicName);\n ```\n \n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n ### Get metadata\n \n-Partitioned topics have metadata associated with them that you can fetch as a JSON object.\n-The following metadata fields are currently available:\n+Partitioned topics are associated with metadata, you can view it as a JSON object. The following metadata field is available.\n \n-Field | Meaning\n+Field | Description\n :-----|:-------\n-`partitions` | The number of partitions into which the topic is divided\n+`partitions` | The number of partitions into which the topic is divided.\n \n-#### pulsar-admin\n-\n-You can see the number of partitions in a partitioned topic using the\n-[`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata)\n-subcommand. Here's an example:\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can view the number of partitions in a partitioned topic with the [`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata) subcommand. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkxMzcwNw==", "bodyText": "nice catch, thank you~", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513913707", "createdAt": "2020-10-29T03:21:56Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -1,109 +1,82 @@\n ---\n id: admin-api-partitioned-topics\n title: Managing partitioned topics\n-sidebar_label: Partitioned topics\n+sidebar_label: Topics1\n ---\n \n-\n-You can use Pulsar's [admin API](admin-api-overview.md) to create and manage partitioned topics.\n-\n-In all of the instructions and commands below, the topic name structure is:\n-\n-```shell\n-persistent://tenant/namespace/topic\n-```\n-\n-## Partitioned topics resources\n+## Manage partitioned topics\n+You can use Pulsar [admin API](admin-api-overview.md) to create, update, delete and check status of partitioned topics.\n \n ### Create\n \n-Partitioned topics in Pulsar must be explicitly created. When creating a new partitioned topic you\n-need to provide a name for the topic as well as the desired number of partitions.\n-\n-> #### Note\n->\n-> By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data.\n->\n-> To disable this feature, set `brokerDeleteInactiveTopicsEnabled`  to `false`.\n->\n-> To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n->\n-> For more information about these two parameters, see [here](reference-configuration.md#broker).\n+Partitioned topics must be explicitly created. When creating a new partitioned topic, you need to provide a name and the number of partitions for the topic.\n \n-#### pulsar-admin\n+By default, after 60 seconds of creation, topics are considered inactive and deleted automatically to prevent from generating trash data. To disable this feature, set `brokerDeleteInactiveTopicsEnabled` to `false`. To change the frequency of checking inactive topics, set `brokerDeleteInactiveTopicsFrequencySeconds` to your desired value.\n \n-You can create partitioned topics using the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n-command and specifying the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n+For more information about the two parameters, see [here](reference-configuration.md#broker).\n \n-Here's an example:\n+You can create partitioned topics in the following ways.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+When you create partitioned topics with the [`create-partitioned-topic`](reference-pulsar-admin.md#create-partitioned-topic)\n+command, you need to specify the topic name as an argument and the number of partitions using the `-p` or `--partitions` flag.\n \n ```shell\n $ bin/pulsar-admin topics create-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 4\n ```\n \n-> #### Note\n->\n-> If there already exists a non-partitioned topic with the suffix '-partition-' followed by numeric value like\n-> 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic' as the partitions\n-> of the partitioned topic could override the existing non partitioned topic. You have to delete that non\n-> partitioned topic first then create the partitioned topic.\n-\n-#### REST API\n+> **Note**    \n+> If a non-partitioned topic with the suffix '-partition-' followed by numeric value like 'xyz-topic-partition-10', then you can not create a partitioned topic with name 'xyz-topic', because the partitions of the partitioned topic could override the existing non-partitioned topic. To create such partitioned topic, you have to delete that non-partitioned topic first.\n \n-{@inject: endpoint|PUT|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|PUT|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/createPartitionedTopic}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n int numPartitions = 4;\n-admin.persistentTopics().createPartitionedTopic(topicName, numPartitions);\n+admin.topics().createPartitionedTopic(topicName, numPartitions);\n ```\n \n-### Create missed partitions\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-Try to create partitions for partitioned topic. The partitions of partition topic have to be created, \n-can be used by repair partitions when topic auto creation is disabled\n-\n-#### pulsar-admin\n+### Create missed partitions\n \n-You can create missed partitions using the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions)\n-command and specifying the topic name as an argument.\n+When topic auto creation is disabled, and you have a partitioned topic without any partitions, you can use the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command to create partitions for the topic.\n \n-Here's an example:\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can create missed partitions with the [`create-missed-partitions`](reference-pulsar-admin.md#create-missed-partitions) command and specify the topic name as an argument.\n \n ```shell\n $ bin/pulsar-admin topics create-missed-partitions \\\n   persistent://my-tenant/my-namespace/my-topic \\\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|POST|/admin/v2/persistent/:tenant/:namespace/:topic|operation/createMissedPartitions}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|POST|/admin/v2/topics/:tenant/:namespace/:topic|operation/createMissedPartitions}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.persistentTopics().createMissedPartitions(topicName);\n+admin.topics().createMissedPartitions(topicName);\n ```\n \n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n ### Get metadata\n \n-Partitioned topics have metadata associated with them that you can fetch as a JSON object.\n-The following metadata fields are currently available:\n+Partitioned topics are associated with metadata, you can view it as a JSON object. The following metadata field is available.\n \n-Field | Meaning\n+Field | Description\n :-----|:-------\n-`partitions` | The number of partitions into which the topic is divided\n+`partitions` | The number of partitions into which the topic is divided.\n \n-#### pulsar-admin\n-\n-You can see the number of partitions in a partitioned topic using the\n-[`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata)\n-subcommand. Here's an example:\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can view the number of partitions in a partitioned topic with the [`get-partitioned-topic-metadata`](reference-pulsar-admin.md#get-partitioned-topic-metadata) subcommand. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MDI4Mg=="}, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYzMzY0OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNDoxMFrOHplFPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNDoxMFrOHplFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MTIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can view the current statistics of a given partitioned topic. The following is an example. For description of each stats, refer to [get stats](#get-stats).\n          \n          \n            \n            You can check the current statistics of a given partitioned topic. The following is an example. For description of each stats, refer to [get stats](#get-stats).", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513361215", "createdAt": "2020-10-28T11:14:10Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -113,210 +86,162 @@ $ pulsar-admin topics get-partitioned-topic-metadata \\\n }\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/getPartitionedMetadata}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|GET|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/getPartitionedMetadata}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.persistentTopics().getPartitionedTopicMetadata(topicName);\n+admin.topics().getPartitionedTopicMetadata(topicName);\n ```\n \n-### Update\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-You can update the number of partitions on an existing partitioned topic\n-*if* the topic is non-global. To update, the new number of partitions must be greater\n-than the existing number.\n-\n-Decrementing the number of partitions would deleting the topic, which is not supported in Pulsar.\n+### Update\n \n-Already created partitioned producers and consumers will automatically find the newly created partitions.\n+You can update the number of partitions for an existing partitioned topic *if* the topic is non-global. However, you can only add the partition number. Decrementing the number of partitions would delete the topic, which is not supported in Pulsar.\n \n-#### pulsar-admin\n+Producers and consumers can find the newly created partitions automatically.\n \n-Partitioned topics can be updated using the\n-[`update-partitioned-topic`](reference-pulsar-admin.md#update-partitioned-topic) command.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can update partitioned topics with the [`update-partitioned-topic`](reference-pulsar-admin.md#update-partitioned-topic) command.\n \n ```shell\n $ pulsar-admin topics update-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 8\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|POST|/admin/v2/persistent/:tenant/:cluster/:namespace/:destination/partitions|operation/updatePartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|POST|/admin/v2/topics/:tenant/:cluster/:namespace/:destination/partitions|operation/updatePartitionedTopic}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().updatePartitionedTopic(persistentTopic, numPartitions);\n+admin.topics().updatePartitionedTopic(topic, numPartitions);\n ```\n \n-### Delete\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-#### pulsar-admin\n-\n-Partitioned topics can be deleted using the\n-[`delete-partitioned-topic`](reference-pulsar-admin.md#delete-partitioned-topic) command, specifying the topic by name:\n+### Delete\n+You can delete partitioned topics with the [`delete-partitioned-topic`](reference-pulsar-admin.md#delete-partitioned-topic) command, REST API and Java. \n \n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n ```shell\n $ bin/pulsar-admin topics delete-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|DELETE|/admin/v2/persistent/:topic/:namespace/:destination/partitions|operation/deletePartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|DELETE|/admin/v2/topics/:topic/:namespace/:destination/partitions|operation/deletePartitionedTopic}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().delete(persistentTopic);\n+admin.topics().delete(topic);\n ```\n \n-### List\n-\n-It provides a list of persistent topics existing under a given namespace.  \n-\n-#### pulsar-admin\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n+### List\n+You can get the list of topics under a given namespace in the following ways.  \n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n ```shell\n $ pulsar-admin topics list tenant/namespace\n persistent://tenant/namespace/topic1\n persistent://tenant/namespace/topic2\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace|operation/getPartitionedTopicList}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|GET|/admin/v2/topics/:tenant/:namespace|operation/getPartitionedTopicList}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().getList(namespace);\n+admin.topics().getList(namespace);\n ```\n \n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n ### Stats\n \n-It shows the current statistics of a given partitioned topic. Here is an example payload:\n+You can view the current statistics of a given partitioned topic. The following is an example. For description of each stats, refer to [get stats](#get-stats).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYzNjU3OnYy", "diffSide": "RIGHT", "path": "site2/docs/admin-api-partitioned-topics.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNDo1N1rOHplG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNDo1N1rOHplG7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MTY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can view the detailed statistics of a topic. The following is an example. For description of each stats, refer to [get internal stats](#get-internal-stats).\n          \n          \n            \n            You can check the detailed statistics of a topic. The following is an example. For description of each stats, refer to [get internal stats](#get-internal-stats).\n          \n      \n    \n    \n  \n\nsame comments for the following, please check through the whole doc updates.", "url": "https://github.com/apache/pulsar/pull/8388#discussion_r513361647", "createdAt": "2020-10-28T11:14:57Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/admin-api-partitioned-topics.md", "diffHunk": "@@ -113,210 +86,162 @@ $ pulsar-admin topics get-partitioned-topic-metadata \\\n }\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/partitions|operation/getPartitionedMetadata}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|GET|/admin/v2/topics/:tenant/:namespace/:topic/partitions|operation/getPartitionedMetadata}\n \n+<!--Java-->\n ```java\n String topicName = \"persistent://my-tenant/my-namespace/my-topic\";\n-admin.persistentTopics().getPartitionedTopicMetadata(topicName);\n+admin.topics().getPartitionedTopicMetadata(topicName);\n ```\n \n-### Update\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-You can update the number of partitions on an existing partitioned topic\n-*if* the topic is non-global. To update, the new number of partitions must be greater\n-than the existing number.\n-\n-Decrementing the number of partitions would deleting the topic, which is not supported in Pulsar.\n+### Update\n \n-Already created partitioned producers and consumers will automatically find the newly created partitions.\n+You can update the number of partitions for an existing partitioned topic *if* the topic is non-global. However, you can only add the partition number. Decrementing the number of partitions would delete the topic, which is not supported in Pulsar.\n \n-#### pulsar-admin\n+Producers and consumers can find the newly created partitions automatically.\n \n-Partitioned topics can be updated using the\n-[`update-partitioned-topic`](reference-pulsar-admin.md#update-partitioned-topic) command.\n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n+You can update partitioned topics with the [`update-partitioned-topic`](reference-pulsar-admin.md#update-partitioned-topic) command.\n \n ```shell\n $ pulsar-admin topics update-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic \\\n   --partitions 8\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|POST|/admin/v2/persistent/:tenant/:cluster/:namespace/:destination/partitions|operation/updatePartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|POST|/admin/v2/topics/:tenant/:cluster/:namespace/:destination/partitions|operation/updatePartitionedTopic}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().updatePartitionedTopic(persistentTopic, numPartitions);\n+admin.topics().updatePartitionedTopic(topic, numPartitions);\n ```\n \n-### Delete\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-#### pulsar-admin\n-\n-Partitioned topics can be deleted using the\n-[`delete-partitioned-topic`](reference-pulsar-admin.md#delete-partitioned-topic) command, specifying the topic by name:\n+### Delete\n+You can delete partitioned topics with the [`delete-partitioned-topic`](reference-pulsar-admin.md#delete-partitioned-topic) command, REST API and Java. \n \n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n ```shell\n $ bin/pulsar-admin topics delete-partitioned-topic \\\n   persistent://my-tenant/my-namespace/my-topic\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|DELETE|/admin/v2/persistent/:topic/:namespace/:destination/partitions|operation/deletePartitionedTopic}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|DELETE|/admin/v2/topics/:topic/:namespace/:destination/partitions|operation/deletePartitionedTopic}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().delete(persistentTopic);\n+admin.topics().delete(topic);\n ```\n \n-### List\n-\n-It provides a list of persistent topics existing under a given namespace.  \n-\n-#### pulsar-admin\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n+### List\n+You can get the list of topics under a given namespace in the following ways.  \n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n ```shell\n $ pulsar-admin topics list tenant/namespace\n persistent://tenant/namespace/topic1\n persistent://tenant/namespace/topic2\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace|operation/getPartitionedTopicList}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|GET|/admin/v2/topics/:tenant/:namespace|operation/getPartitionedTopicList}\n \n+<!--Java-->\n ```java\n-admin.persistentTopics().getList(namespace);\n+admin.topics().getList(namespace);\n ```\n \n+<!--END_DOCUSAURUS_CODE_TABS-->\n+\n ### Stats\n \n-It shows the current statistics of a given partitioned topic. Here is an example payload:\n+You can view the current statistics of a given partitioned topic. The following is an example. For description of each stats, refer to [get stats](#get-stats).\n \n ```json\n {\n-  \"msgRateIn\": 4641.528542257553,\n-  \"msgThroughputIn\": 44663039.74947473,\n-  \"msgRateOut\": 0,\n-  \"msgThroughputOut\": 0,\n-  \"averageMsgSize\": 1232439.816728665,\n-  \"storageSize\": 135532389160,\n-  \"publishers\": [\n-    {\n-      \"msgRateIn\": 57.855383881403576,\n-      \"msgThroughputIn\": 558994.7078932219,\n-      \"averageMsgSize\": 613135,\n-      \"producerId\": 0,\n-      \"producerName\": null,\n-      \"address\": null,\n-      \"connectedSince\": null\n-    }\n-  ],\n-  \"subscriptions\": {\n-    \"my-topic_subscription\": {\n-      \"msgRateOut\": 0,\n-      \"msgThroughputOut\": 0,\n-      \"msgBacklog\": 116632,\n-      \"type\": null,\n-      \"msgRateExpired\": 36.98245516804671,\n-      \"consumers\": []\n+  \"msgRateIn\" : 999.992947159793,\n+  \"msgThroughputIn\" : 1070918.4635439808,\n+  \"msgRateOut\" : 0.0,\n+  \"msgThroughputOut\" : 0.0,\n+  \"bytesInCounter\" : 270318763,\n+  \"msgInCounter\" : 252489,\n+  \"bytesOutCounter\" : 0,\n+  \"msgOutCounter\" : 0,\n+  \"averageMsgSize\" : 1070.926056966454,\n+  \"msgChunkPublished\" : false,\n+  \"storageSize\" : 270316646,\n+  \"backlogSize\" : 200921133,\n+  \"publishers\" : [ {\n+    \"msgRateIn\" : 999.992947159793,\n+    \"msgThroughputIn\" : 1070918.4635439808,\n+    \"averageMsgSize\" : 1070.3333333333333,\n+    \"chunkedMessageRate\" : 0.0,\n+    \"producerId\" : 0\n+  } ],\n+  \"subscriptions\" : {\n+    \"test\" : {\n+      \"msgRateOut\" : 0.0,\n+      \"msgThroughputOut\" : 0.0,\n+      \"bytesOutCounter\" : 0,\n+      \"msgOutCounter\" : 0,\n+      \"msgRateRedeliver\" : 0.0,\n+      \"chuckedMessageRate\" : 0,\n+      \"msgBacklog\" : 144318,\n+      \"msgBacklogNoDelayed\" : 144318,\n+      \"blockedSubscriptionOnUnackedMsgs\" : false,\n+      \"msgDelayed\" : 0,\n+      \"unackedMessages\" : 0,\n+      \"msgRateExpired\" : 0.0,\n+      \"lastExpireTimestamp\" : 0,\n+      \"lastConsumedFlowTimestamp\" : 0,\n+      \"lastConsumedTimestamp\" : 0,\n+      \"lastAckedTimestamp\" : 0,\n+      \"consumers\" : [ ],\n+      \"isDurable\" : true,\n+      \"isReplicated\" : false\n     }\n   },\n-  \"replication\": {}\n+  \"replication\" : { },\n+  \"metadata\" : {\n+    \"partitions\" : 3\n+  },\n+  \"partitions\" : { }\n }\n ```\n \n-The following stats are available:\n-\n-|Stat|Description|\n-|----|-----------|\n-|msgRateIn|The sum of all local and replication publishers\u2019 publish rates in messages per second|\n-|msgThroughputIn|Same as msgRateIn but in bytes per second instead of messages per second|\n-|msgRateOut|The sum of all local and replication consumers\u2019 dispatch rates in messages per second|\n-|msgThroughputOut|Same as msgRateOut but in bytes per second instead of messages per second|\n-|averageMsgSize|Average message size, in bytes, from this publisher within the last interval|\n-|storageSize|The sum of the ledgers\u2019 storage size for this topic|\n-|publishers|The list of all local publishers into the topic. There can be anywhere from zero to thousands.|\n-|producerId|Internal identifier for this producer on this topic|\n-|producerName|Internal identifier for this producer, generated by the client library|\n-|address|IP address and source port for the connection of this producer|\n-|connectedSince|Timestamp this producer was created or last reconnected|\n-|subscriptions|The list of all local subscriptions to the topic|\n-|my-subscription|The name of this subscription (client defined)|\n-|msgBacklog|The count of messages in backlog for this subscription|\n-|msgBacklogNoDelayed|The count of messages in backlog without delayed messages for this subscription|\n-|type|This subscription type|\n-|msgRateExpired|The rate at which messages were discarded instead of dispatched from this subscription due to TTL|\n-|consumers|The list of connected consumers for this subscription|\n-|consumerName|Internal identifier for this consumer, generated by the client library|\n-|availablePermits|The number of messages this consumer has space for in the client library\u2019s listen queue. A value of 0 means the client library\u2019s queue is full and receive() isn\u2019t being called. A nonzero value means this consumer is ready to be dispatched messages.|\n-|replication|This section gives the stats for cross-colo replication of this topic|\n-|replicationBacklog|The outbound replication backlog in messages|\n-|connected|Whether the outbound replicator is connected|\n-|replicationDelayInSeconds|How long the oldest message has been waiting to be sent through the connection, if connected is true|\n-|inboundConnection|The IP and port of the broker in the remote cluster\u2019s publisher connection to this broker|\n-|inboundConnectedSince|The TCP connection being used to publish messages to the remote cluster. If there are no local publishers connected, this connection is automatically closed after a minute.|\n-\n-#### pulsar-admin\n-\n-The stats for the partitioned topic and its connected producers and consumers can be fetched by using the\n-[`partitioned-stats`](reference-pulsar-admin.md#partitioned-stats) command, specifying the topic by name:\n+You can view the current statistics of a given partitioned topic and its connected producers and consumers in the following ways. \n \n+<!--DOCUSAURUS_CODE_TABS-->\n+<!--pulsar-admin-->\n ```shell\n $ pulsar-admin topics partitioned-stats \\\n   persistent://test-tenant/namespace/topic \\\n   --per-partition\n ```\n \n-#### REST API\n-\n-{@inject: endpoint|GET|/admin/v2/persistent/:tenant/:namespace/:topic/partitioned-stats|operation/getPartitionedStats}\n-\n-#### Java\n+<!--REST API-->\n+{@inject: endpoint|GET|/admin/v2/topics/:tenant/:namespace/:topic/partitioned-stats|operation/getPartitionedStats}\n \n+<!--Java-->\n ```java\n-admin.topics().getPartitionedStats(persistentTopic, true /* per partition */, false /* is precise backlog */);\n+admin.topics().getPartitionedStats(topic, true /* per partition */, false /* is precise backlog */);\n ```\n \n-### Internal stats\n+<!--END_DOCUSAURUS_CODE_TABS-->\n \n-It shows detailed statistics of a topic.\n-\n-|Stat|Description|\n-|----|-----------|\n-|entriesAddedCounter|Messages published since this broker loaded this topic|\n-|numberOfEntries|Total number of messages being tracked|\n-|totalSize|Total storage size in bytes of all messages|\n-|currentLedgerEntries|Count of messages written to the ledger currently open for writing|\n-|currentLedgerSize|Size in bytes of messages written to ledger currently open for writing|\n-|lastLedgerCreatedTimestamp|Time when last ledger was created|\n-|lastLedgerCreationFailureTimestamp|time when last ledger was failed|\n-|waitingCursorsCount|How many cursors are caught up and waiting for a new message to be published|\n-|pendingAddEntriesCount|How many messages have (asynchronous) write requests we are waiting on completion|\n-|lastConfirmedEntry|The ledgerid:entryid of the last message successfully written. If the entryid is -1, then the ledger has been opened or is currently being opened but has no entries written yet.|\n-|state|The state of the cursor ledger. Open means we have a cursor ledger for saving updates of the markDeletePosition.|\n-|ledgers|The ordered list of all ledgers for this topic holding its messages|\n-|cursors|The list of all cursors on this topic. There will be one for every subscription you saw in the topic stats.|\n-|markDeletePosition|The ack position: the last message the subscriber acknowledged receiving|\n-|readPosition|The latest position of subscriber for reading message|\n-|waitingReadOp|This is true when the subscription has read the latest message published to the topic and is waiting on new messages to be published.|\n-|pendingReadOps|The counter for how many outstanding read requests to the BookKeepers we have in progress|\n-|messagesConsumedCounter|Number of messages this cursor has acked since this broker loaded this topic|\n-|cursorLedger|The ledger being used to persistently store the current markDeletePosition|\n-|cursorLedgerLastEntry|The last entryid used to persistently store the current markDeletePosition|\n-|individuallyDeletedMessages|If Acks are being done out of order, shows the ranges of messages Acked between the markDeletePosition and the read-position|\n-|lastLedgerSwitchTimestamp|The last time the cursor ledger was rolled over|\n+### Internal stats\n \n+You can view the detailed statistics of a topic. The following is an example. For description of each stats, refer to [get internal stats](#get-internal-stats).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2355959f70dfcce094b0fb0be4935837cea2be77"}, "originalPosition": 443}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}