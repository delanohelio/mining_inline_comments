{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODc4NzQ0", "number": 6787, "title": "Using Readers still causes backlog quota to be observed", "bodyText": "Motivation\nWhen using Readers API, backlog quotas are still enforced on these ephemeral readers.\nModifications\nIf a cursor is non-durable then we don't add it to the min-heap we are using keep track of the slowest cursor.\nWe use in the min-heap to access the slowest cursor for backlog and quota calculations.\nIt is also used to determine up to which ledger we can trim.  Thus, with this change, reader's ephemeral subscriptions won't be preventing ledgers from being clean up as well which is what you expect the behavior to be.\nThere are some caveats to the above.  Since triggering of trimming of ledgers is piggy packed on top of ledger operations, if there is no new data coming in ledgers will not be trimmed.  The most recently closed ledger we be persisted past any retention.  Perhaps in a subsequent PR, we implement the trimming to be trigger on a schedule as well.\nPlease note this PR includes changes from:\n#6769\nVerifying this change\nAdded a test to verify that readers don't cause any backlog issues", "createdAt": "2020-04-21T20:02:11Z", "url": "https://github.com/apache/pulsar/pull/6787", "merged": true, "mergeCommit": {"oid": "bcfa7f00554b72314799b2d38a5815d5ee802e5e"}, "closed": true, "closedAt": "2020-06-08T11:15:12Z", "author": {"login": "jerrypeng"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ5dttAFqTM5NzYzOTAxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpJSq9gBqjM0MTgwODY5MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjM5MDEy", "url": "https://github.com/apache/pulsar/pull/6787#pullrequestreview-397639012", "createdAt": "2020-04-21T20:11:14Z", "commit": {"oid": "8ce2886d98a3a5bebfcad139cb441cada0118851"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMToxNFrOGJWeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMToxNFrOGJWeJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1ODUzMg==", "bodyText": "nit: the section below should get indented.", "url": "https://github.com/apache/pulsar/pull/6787#discussion_r412458532", "createdAt": "2020-04-21T20:11:14Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorContainer.java", "diffHunk": "@@ -124,6 +130,8 @@ public void removeCursor(String name) {\n \n             PositionImpl previousSlowestConsumer = heap.get(0).position;\n \n+            if (item.cursor.isDurable()) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce2886d98a3a5bebfcad139cb441cada0118851"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzU0NjQ4", "url": "https://github.com/apache/pulsar/pull/6787#pullrequestreview-397754648", "createdAt": "2020-04-21T23:58:48Z", "commit": {"oid": "48558dd7b01748cfd45e4dc261a063e386afb7a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MzY4MDg3", "url": "https://github.com/apache/pulsar/pull/6787#pullrequestreview-398368087", "createdAt": "2020-04-22T16:31:27Z", "commit": {"oid": "3d0132221ecc371c1229573a76ad325841f0d92e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMToyN1rOGJ_pQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozMjoyN1rOGJ_sCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMzEyMw==", "bodyText": "It's becoming a bit confusing now to understand the meaning of hasCursors() and isEmpty(). We should be use a more unambiguous/explicit naming here.\nMy suggestion:\n\nhasCursors() --> isEmtpy() // Since we're talking about a cursors container\nisEmpty() --> hasDurableCursors()\n\n(and fix the reversal of the boolean logic)", "url": "https://github.com/apache/pulsar/pull/6787#discussion_r413133123", "createdAt": "2020-04-22T16:31:27Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorContainer.java", "diffHunk": "@@ -164,6 +175,22 @@ public ManagedCursor getSlowestReader() {\n         }\n     }\n \n+    public boolean hasCursors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0132221ecc371c1229573a76ad325841f0d92e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMzgzNA==", "bodyText": "Wouldn't the logic be the reverse here? We're checking isEmpty but the method should return true if it's not empty, no?", "url": "https://github.com/apache/pulsar/pull/6787#discussion_r413133834", "createdAt": "2020-04-22T16:32:27Z", "author": {"login": "merlimat"}, "path": "managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/ManagedCursorContainer.java", "diffHunk": "@@ -164,6 +175,22 @@ public ManagedCursor getSlowestReader() {\n         }\n     }\n \n+    public boolean hasCursors() {\n+        long stamp = rwLock.tryOptimisticRead();\n+        boolean isEmpty = cursors.isEmpty();\n+        if (!rwLock.validate(stamp)) {\n+            // Fallback to read lock\n+            stamp = rwLock.readLock();\n+            try {\n+                isEmpty = cursors.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0132221ecc371c1229573a76ad325841f0d92e"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDQyMzQ0", "url": "https://github.com/apache/pulsar/pull/6787#pullrequestreview-398442344", "createdAt": "2020-04-22T18:00:10Z", "commit": {"oid": "3cf95c4b161bec055dd68374b44e178ba5d21bca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cf95c4b161bec055dd68374b44e178ba5d21bca", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/3cf95c4b161bec055dd68374b44e178ba5d21bca", "committedDate": "2020-04-22T17:52:55Z", "message": "addressing comments"}, "afterCommit": {"oid": "3603a85dac7aa6e92149687cffdb48b879c60c7f", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/3603a85dac7aa6e92149687cffdb48b879c60c7f", "committedDate": "2020-04-22T18:05:16Z", "message": "Using Readers still causes backlog quota to be observed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTAxNjE1", "url": "https://github.com/apache/pulsar/pull/6787#pullrequestreview-425901615", "createdAt": "2020-06-08T03:54:22Z", "commit": {"oid": "2bab9316bd8f252d6d3e34d7fe1efd11c810f3ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360044f30097dd26bed71ac16c685b28ecd4ed37", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/360044f30097dd26bed71ac16c685b28ecd4ed37", "committedDate": "2020-06-08T05:06:14Z", "message": "Using Readers still causes backlog quota to be observed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bab9316bd8f252d6d3e34d7fe1efd11c810f3ee", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/2bab9316bd8f252d6d3e34d7fe1efd11c810f3ee", "committedDate": "2020-06-06T00:52:14Z", "message": "adding docs"}, "afterCommit": {"oid": "360044f30097dd26bed71ac16c685b28ecd4ed37", "author": {"user": null}, "url": "https://github.com/apache/pulsar/commit/360044f30097dd26bed71ac16c685b28ecd4ed37", "committedDate": "2020-06-08T05:06:14Z", "message": "Using Readers still causes backlog quota to be observed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}