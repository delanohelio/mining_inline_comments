{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTU4MzYy", "number": 8387, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNTowNFrOEyzigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNzowNFrOEyzlrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzA4NjczOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNTowNFrOHppZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo1MjoxN1rOHp2mXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMTgxMQ==", "bodyText": "The message count is always 5, it's better to only receive 5 messages to avoid the 3 sec block, we should reduce the test time occupied", "url": "https://github.com/apache/pulsar/pull/8387#discussion_r513431811", "createdAt": "2020-10-28T13:15:04Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "diffHunk": "@@ -3037,6 +3037,74 @@ public void testConsumerSubscriptionInitialize() throws Exception {\n         log.info(\"-- Exiting {} test --\", methodName);\n     }\n \n+    @Test\n+    public void testMultiTopicsConsumerImplPause() throws Exception {\n+        log.info(\"-- Starting {} test --\", methodName);\n+        String topicName = \"persistent://my-property/my-ns/partition-topic\";\n+\n+        admin.topics().createPartitionedTopic(topicName, 1);\n+\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .enableBatching(false)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .create();\n+\n+        // 1. produce 5 messages\n+        for (int i = 0; i < 5; i++) {\n+            final String message = \"my-message-\" + i;\n+            producer.send(message.getBytes(UTF_8));\n+        }\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName)\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .receiverQueueSize(1)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .subscriptionName(\"test-multi-topic-consumer\").subscribe();\n+\n+        int counter = 0;\n+        Message<byte[]> consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        while(consumedMessage != null) {\n+            assertEquals(consumedMessage.getData(), (\"my-message-\" + counter++ ).getBytes());\n+            consumedMessage = consumer.receive(3, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e31429422cdfb98cbbab606f6035e50450122e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0ODIyMA==", "bodyText": "will fix it", "url": "https://github.com/apache/pulsar/pull/8387#discussion_r513648220", "createdAt": "2020-10-28T17:52:17Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "diffHunk": "@@ -3037,6 +3037,74 @@ public void testConsumerSubscriptionInitialize() throws Exception {\n         log.info(\"-- Exiting {} test --\", methodName);\n     }\n \n+    @Test\n+    public void testMultiTopicsConsumerImplPause() throws Exception {\n+        log.info(\"-- Starting {} test --\", methodName);\n+        String topicName = \"persistent://my-property/my-ns/partition-topic\";\n+\n+        admin.topics().createPartitionedTopic(topicName, 1);\n+\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .enableBatching(false)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .create();\n+\n+        // 1. produce 5 messages\n+        for (int i = 0; i < 5; i++) {\n+            final String message = \"my-message-\" + i;\n+            producer.send(message.getBytes(UTF_8));\n+        }\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName)\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .receiverQueueSize(1)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .subscriptionName(\"test-multi-topic-consumer\").subscribe();\n+\n+        int counter = 0;\n+        Message<byte[]> consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        while(consumedMessage != null) {\n+            assertEquals(consumedMessage.getData(), (\"my-message-\" + counter++ ).getBytes());\n+            consumedMessage = consumer.receive(3, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMTgxMQ=="}, "originalCommit": {"oid": "09e31429422cdfb98cbbab606f6035e50450122e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzA5NDg2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzoxNzowNFrOHppeTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzo1Mjo0M1rOHp2naw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMzE2NQ==", "bodyText": "Is there any way to check the partitioned updated? such as check the internal consumers of the multiple-consumer. Maybe this can reduce the test time occupied", "url": "https://github.com/apache/pulsar/pull/8387#discussion_r513433165", "createdAt": "2020-10-28T13:17:04Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "diffHunk": "@@ -3037,6 +3037,74 @@ public void testConsumerSubscriptionInitialize() throws Exception {\n         log.info(\"-- Exiting {} test --\", methodName);\n     }\n \n+    @Test\n+    public void testMultiTopicsConsumerImplPause() throws Exception {\n+        log.info(\"-- Starting {} test --\", methodName);\n+        String topicName = \"persistent://my-property/my-ns/partition-topic\";\n+\n+        admin.topics().createPartitionedTopic(topicName, 1);\n+\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .enableBatching(false)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .create();\n+\n+        // 1. produce 5 messages\n+        for (int i = 0; i < 5; i++) {\n+            final String message = \"my-message-\" + i;\n+            producer.send(message.getBytes(UTF_8));\n+        }\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName)\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .receiverQueueSize(1)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .subscriptionName(\"test-multi-topic-consumer\").subscribe();\n+\n+        int counter = 0;\n+        Message<byte[]> consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        while(consumedMessage != null) {\n+            assertEquals(consumedMessage.getData(), (\"my-message-\" + counter++ ).getBytes());\n+            consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        }\n+        assertEquals(counter, 5);\n+\n+        // 2. pause multi-topic consumer\n+        consumer.pause();\n+\n+        // 3. update partition\n+        admin.topics().updatePartitionedTopic(topicName, 3);\n+\n+        // 4. wait for client to update partitions\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e31429422cdfb98cbbab606f6035e50450122e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0ODQ5MQ==", "bodyText": "will optimize", "url": "https://github.com/apache/pulsar/pull/8387#discussion_r513648491", "createdAt": "2020-10-28T17:52:43Z", "author": {"login": "aloyszhang"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleProducerConsumerTest.java", "diffHunk": "@@ -3037,6 +3037,74 @@ public void testConsumerSubscriptionInitialize() throws Exception {\n         log.info(\"-- Exiting {} test --\", methodName);\n     }\n \n+    @Test\n+    public void testMultiTopicsConsumerImplPause() throws Exception {\n+        log.info(\"-- Starting {} test --\", methodName);\n+        String topicName = \"persistent://my-property/my-ns/partition-topic\";\n+\n+        admin.topics().createPartitionedTopic(topicName, 1);\n+\n+\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .enableBatching(false)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .create();\n+\n+        // 1. produce 5 messages\n+        for (int i = 0; i < 5; i++) {\n+            final String message = \"my-message-\" + i;\n+            producer.send(message.getBytes(UTF_8));\n+        }\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName)\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .receiverQueueSize(1)\n+                .autoUpdatePartitionsInterval(2 ,TimeUnit.SECONDS)\n+                .subscriptionName(\"test-multi-topic-consumer\").subscribe();\n+\n+        int counter = 0;\n+        Message<byte[]> consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        while(consumedMessage != null) {\n+            assertEquals(consumedMessage.getData(), (\"my-message-\" + counter++ ).getBytes());\n+            consumedMessage = consumer.receive(3, TimeUnit.SECONDS);\n+        }\n+        assertEquals(counter, 5);\n+\n+        // 2. pause multi-topic consumer\n+        consumer.pause();\n+\n+        // 3. update partition\n+        admin.topics().updatePartitionedTopic(topicName, 3);\n+\n+        // 4. wait for client to update partitions\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzMzE2NQ=="}, "originalCommit": {"oid": "09e31429422cdfb98cbbab606f6035e50450122e"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}