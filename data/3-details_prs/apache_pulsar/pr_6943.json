{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDc4MjU0", "number": 6943, "title": "Fix docs of gcs offload", "bodyText": "Signed-off-by: xiaolong.ran rxl@apache.org\nModifications\n\nFix docs of gcs offload", "createdAt": "2020-05-12T04:32:50Z", "url": "https://github.com/apache/pulsar/pull/6943", "merged": true, "mergeCommit": {"oid": "73172ce1695a4320ad6c36e63cfea25a01da2117"}, "closed": true, "closedAt": "2020-05-12T06:08:18Z", "author": {"login": "wolfstudy"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgcnI2gH2gAyNDE2NDc4MjU0OmY5ODFhMTllMzU0OTdiYjcwMDBiZDE1MmQ1N2RmMGQzMmE4MDk1ZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgd1sMgFqTQwOTcxODczNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8", "author": {"user": {"login": "wolfstudy", "name": "xiaolong ran"}}, "url": "https://github.com/apache/pulsar/commit/f981a19e35497bb7000bd152d57df0d32a8095e8", "committedDate": "2020-05-12T04:31:45Z", "message": "Fix docs of gcs offload\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzA2MzQ5", "url": "https://github.com/apache/pulsar/pull/6943#pullrequestreview-409706349", "createdAt": "2020-05-12T05:23:21Z", "commit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzE0MzQy", "url": "https://github.com/apache/pulsar/pull/6943#pullrequestreview-409714342", "createdAt": "2020-05-12T05:46:30Z", "commit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0NjozMFrOGT24dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0Nzo1OFrOGT26Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NTMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To generate service-account credentials, or to view the public credentials that you've already generated, do the following:\n          \n          \n            \n            To generate service account credentials or view the public credentials that you've already generated, follow the following steps:", "url": "https://github.com/apache/pulsar/pull/6943#discussion_r423475318", "createdAt": "2020-05-12T05:46:30Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/cookbooks-tiered-storage.md", "diffHunk": "@@ -168,12 +168,15 @@ a Json file, containing the GCS credentials of a service account.\n more information of how to create this key file for authentication. More information about google cloud IAM\n is available [here](https://cloud.google.com/storage/docs/access-control/iam).\n \n-Usually these are the steps to create the authentication file:\n-1. Open the API Console Credentials page.\n-2. If it's not already selected, select the project that you're creating credentials for.\n-3. To set up a new service account, click New credentials and then select Service account key.\n-4. Choose the service account to use for the key.\n-5. Download the service account's public/private key as a JSON file that can be loaded by a Google API client library.\n+To generate service-account credentials, or to view the public credentials that you've already generated, do the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NTQ1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. If prompted, select a project, or create a new one.\n          \n          \n            \n            2. Select a project or create a new one.", "url": "https://github.com/apache/pulsar/pull/6943#discussion_r423475450", "createdAt": "2020-05-12T05:46:55Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/cookbooks-tiered-storage.md", "diffHunk": "@@ -168,12 +168,15 @@ a Json file, containing the GCS credentials of a service account.\n more information of how to create this key file for authentication. More information about google cloud IAM\n is available [here](https://cloud.google.com/storage/docs/access-control/iam).\n \n-Usually these are the steps to create the authentication file:\n-1. Open the API Console Credentials page.\n-2. If it's not already selected, select the project that you're creating credentials for.\n-3. To set up a new service account, click New credentials and then select Service account key.\n-4. Choose the service account to use for the key.\n-5. Download the service account's public/private key as a JSON file that can be loaded by a Google API client library.\n+To generate service-account credentials, or to view the public credentials that you've already generated, do the following:\n+\n+1. Open the [Service accounts page](https://console.developers.google.com/iam-admin/serviceaccounts).\n+2. If prompted, select a project, or create a new one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NTc4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > Notes: Make ensure that the service account you create has permission to operate gcs, please assign **Storage Admin** permission to your service account in [here](https://cloud.google.com/storage/docs/access-control/iam)\n          \n          \n            \n            > Notes: Make ensure that the service account you create has permission to operate GCS, so you need to assign **Storage Admin** permission to your service account [here](https://cloud.google.com/storage/docs/access-control/iam).", "url": "https://github.com/apache/pulsar/pull/6943#discussion_r423475783", "createdAt": "2020-05-12T05:47:58Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/cookbooks-tiered-storage.md", "diffHunk": "@@ -168,12 +168,15 @@ a Json file, containing the GCS credentials of a service account.\n more information of how to create this key file for authentication. More information about google cloud IAM\n is available [here](https://cloud.google.com/storage/docs/access-control/iam).\n \n-Usually these are the steps to create the authentication file:\n-1. Open the API Console Credentials page.\n-2. If it's not already selected, select the project that you're creating credentials for.\n-3. To set up a new service account, click New credentials and then select Service account key.\n-4. Choose the service account to use for the key.\n-5. Download the service account's public/private key as a JSON file that can be loaded by a Google API client library.\n+To generate service-account credentials, or to view the public credentials that you've already generated, do the following:\n+\n+1. Open the [Service accounts page](https://console.developers.google.com/iam-admin/serviceaccounts).\n+2. If prompted, select a project, or create a new one.\n+3. Click **Create service account**.\n+4. In the **Create service account** window, type a name for the service account, and select **Furnish a new private key**. If you want to [grant G Suite domain-wide authority](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#delegatingauthority) to the service account, also select **Enable G Suite Domain-wide Delegation**.\n+5. Click **Create**.\n+\n+> Notes: Make ensure that the service account you create has permission to operate gcs, please assign **Storage Admin** permission to your service account in [here](https://cloud.google.com/storage/docs/access-control/iam)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f981a19e35497bb7000bd152d57df0d32a8095e8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65f632258577e9bd152fce1dca5ff6a559cf2971", "author": {"user": {"login": "wolfstudy", "name": "xiaolong ran"}}, "url": "https://github.com/apache/pulsar/commit/65f632258577e9bd152fce1dca5ff6a559cf2971", "committedDate": "2020-05-12T05:55:55Z", "message": "fix comments\n\nSigned-off-by: xiaolong.ran <rxl@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzE4NzM0", "url": "https://github.com/apache/pulsar/pull/6943#pullrequestreview-409718734", "createdAt": "2020-05-12T05:57:33Z", "commit": {"oid": "65f632258577e9bd152fce1dca5ff6a559cf2971"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2809, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}