{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTg4NDk0", "number": 8685, "title": "PIP 68: Exclusive Producer", "bodyText": "Motivation\nImplementation of https://github.com/apache/pulsar/wiki/PIP-68%3A-Exclusive-Producer\nThis is the first part of the implementation of exclusive producer. It adds support for ProducerAccessMode.Exclusive.\nThe 2nd mode, ProducerAccessMode.WaitForExclusive, will be added in separate PR.", "createdAt": "2020-11-24T15:59:45Z", "url": "https://github.com/apache/pulsar/pull/8685", "merged": true, "mergeCommit": {"oid": "d12486b9b012fc8264fa0d4cb7f4e3e148c30187"}, "closed": true, "closedAt": "2020-12-03T01:38:41Z", "author": {"login": "merlimat"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfsLSDABqjQwMzM2Nzg4OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiXWIZgBqjQwNjQ4NjUxNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ceb670265b208661a26804b552d687a72949b5f", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/0ceb670265b208661a26804b552d687a72949b5f", "committedDate": "2020-11-24T15:51:05Z", "message": "PIP 68: Exclusive Producer"}, "afterCommit": {"oid": "e6f7c8eaf00b53ea8a610c13c8d513233fbc3c1f", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/e6f7c8eaf00b53ea8a610c13c8d513233fbc3c1f", "committedDate": "2020-11-24T16:16:50Z", "message": "PIP 68: Exclusive Producer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjI3OTU4", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-538227958", "createdAt": "2020-11-25T07:49:02Z", "commit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo0OTowM1rOH5mvOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowMjoyNlrOH5nJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NTU2Mw==", "bodyText": "can we add debug log here with epoch.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530165563", "createdAt": "2020-11-25T07:49:03Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODI1MQ==", "bodyText": "can we avoid locking for normal producer usecase?\nif (producers.isEmpty() && producer.getAccessMode() == Shared) {\nreturn CompletableFuture.completedFuture(topicEpoch);\n}", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530168251", "createdAt": "2020-11-25T07:54:17Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2OTEwNw==", "bodyText": "is it possible to add producer-type if topic-stats if producer is exclusive for information and debugging.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530169107", "createdAt": "2020-11-25T07:56:04Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MTAwNQ==", "bodyText": "I have one suggestion. I am sure you must have thought about it but can't we rename WaitForExclusive with FailOver as it will be consistent to subscription type name and it will need no explanation and easy to understand.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530171005", "createdAt": "2020-11-25T07:59:50Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));\n+                } else {\n+                    // Normal producer getting added, we don't need a new epoch\n+                    return CompletableFuture.completedFuture(topicEpoch);\n+                }\n+\n+            case Exclusive:\n+                 if (hasExclusiveProducer || !producers.isEmpty()) {\n+                    return FutureUtil.failedFuture(new ProducerFencedException(\"Topic has existing producers\"));\n+                 } else if (producer.getTopicEpoch().isPresent() && producer.getTopicEpoch().get() < topicEpoch.orElse(-1L)){\n+                     // If a producer reconnects, but all the topic epoch has already moved forward, this producer needs to\n+                     // be fenced, because a new producer had been present in between.\n+                     return FutureUtil.failedFuture(new ProducerFencedException(\"Topic epoch has already moved\"));\n+                } else {\n+                    // There are currently no existing producers\n+                    hasExclusiveProducer = true;\n+\n+                    CompletableFuture<Optional<Long>> future = incrementTopicEpoch(topicEpoch).thenApply(epoch -> {\n+                        topicEpoch = Optional.of(epoch);\n+                        return topicEpoch;\n+                    });\n+\n+                    future.exceptionally(ex -> {\n+                        hasExclusiveProducer = false;\n+                        return null;\n+                    });\n+                    return future;\n+                }\n+\n+           // case WaitForExclusive:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MjM0OQ==", "bodyText": "shouldn't we need lock here else it may create a race condition and  producer with WaitForExclusive  may wait forever.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530172349", "createdAt": "2020-11-25T08:02:26Z", "author": {"login": "rdhabalia"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -451,7 +554,44 @@ private boolean isUserProvidedProducerName(Producer producer){\n         return producer.isUserProvidedProducerName() && !producer.getProducerName().startsWith(replicatorPrefix);\n     }\n \n-    protected abstract void handleProducerRemoved(Producer producer);\n+\n+    @Override\n+    public void removeProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        if (producers.remove(producer.getProducerName(), producer)) {\n+            handleProducerRemoved(producer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjM5OTA4", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-538239908", "createdAt": "2020-11-25T08:07:58Z", "commit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowNzo1OFrOH5nUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxNjoxNlrOH5nmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTE2Mw==", "bodyText": "+1 to @rdhabalia suggestion", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530175163", "createdAt": "2020-11-25T08:07:58Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODI1MQ=="}, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTUxMQ==", "bodyText": "is it possibile to log and/or to report in the exception who is the current exclusive producer ?", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530175511", "createdAt": "2020-11-25T08:08:39Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractTopic.java", "diffHunk": "@@ -317,6 +332,94 @@ public String getReplicatorPrefix() {\n                 .checkConsumerCompatibility(id, schema, schemaCompatibilityStrategy);\n     }\n \n+    @Override\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        checkArgument(producer.getTopic() == this);\n+\n+        CompletableFuture<Optional<Long>> future = new CompletableFuture<>();\n+\n+        incrementTopicEpochIfNeeded(producer)\n+                .thenAccept(epoch -> {\n+                    lock.readLock().lock();\n+                    try {\n+                        brokerService.checkTopicNsOwnership(getName());\n+                        checkTopicFenced();\n+                        if (isTerminated()) {\n+                            log.warn(\"[{}] Attempting to add producer to a terminated topic\", topic);\n+                            throw new TopicTerminatedException(\"Topic was already terminated\");\n+                        }\n+                        internalAddProducer(producer);\n+\n+                        USAGE_COUNT_UPDATER.incrementAndGet(this);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"[{}] [{}] Added producer -- count: {}\", topic, producer.getProducerName(),\n+                                    USAGE_COUNT_UPDATER.get(this));\n+                        }\n+\n+                        future.complete(epoch);\n+                    } catch (Throwable e) {\n+                        future.completeExceptionally(e);\n+                    } finally {\n+                        lock.readLock().unlock();\n+                    }\n+                }).exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                });\n+\n+        return future;\n+    }\n+\n+    protected CompletableFuture<Optional<Long>> incrementTopicEpochIfNeeded(Producer producer) {\n+        lock.writeLock().lock();\n+        try {\n+            switch (producer.getAccessMode()) {\n+            case Shared:\n+                if (hasExclusiveProducer) {\n+                   return FutureUtil.failedFuture(new ProducerBusyException(\"Topic has an existing exclusive producer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3OTU5Ng==", "bodyText": "nit: please move constants on top of the classs", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r530179596", "createdAt": "2020-11-25T08:16:16Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java", "diffHunk": "@@ -460,33 +460,37 @@ public synchronized void addFailed(ManagedLedgerException exception, Object ctx)\n     }\n \n     @Override\n-    public void addProducer(Producer producer) throws BrokerServiceException {\n-        checkArgument(producer.getTopic() == this);\n+    public CompletableFuture<Optional<Long>> addProducer(Producer producer) {\n+        return super.addProducer(producer).thenApply(epoch -> {\n+            messageDeduplication.producerAdded(producer.getProducerName());\n \n-        lock.readLock().lock();\n-        try {\n-            brokerService.checkTopicNsOwnership(getName());\n+            // Start replication producers if not already\n+            startReplProducers();\n+            return epoch;\n+        });\n+    }\n \n-            checkTopicFenced();\n+    private static final String TOPIC_EPOCH_PROPERTY_NAME = \"pulsar.topic.epoch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjkyODYw", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-541292860", "createdAt": "2020-11-30T21:04:03Z", "commit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ef1fc1e3da5bd5a8707acfec1e184968814274f", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/6ef1fc1e3da5bd5a8707acfec1e184968814274f", "committedDate": "2020-11-25T01:57:47Z", "message": "Added missing enums cases in C++"}, "afterCommit": {"oid": "c2d57bcc10bebcc91587d23496b57a0d54efa6be", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/c2d57bcc10bebcc91587d23496b57a0d54efa6be", "committedDate": "2020-12-01T18:53:05Z", "message": "Addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTE4NTcz", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-542518573", "createdAt": "2020-12-02T05:56:33Z", "commit": {"oid": "5254a9f38a2c296b249812dca5abc94acb80c87a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NjozNFrOH9Lkgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NjozNFrOH9Lkgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDc1NA==", "bodyText": "What about setting a fixed seed? In order to have reproducible tests execution.", "url": "https://github.com/apache/pulsar/pull/8685#discussion_r533914754", "createdAt": "2020-12-02T05:56:34Z", "author": {"login": "eolivelli"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/BrokerTestBase.java", "diffHunk": "@@ -86,5 +88,11 @@ void runMessageExpiryCheck() {\n         }\n     }\n \n+    private static final Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5254a9f38a2c296b249812dca5abc94acb80c87a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTQwNTgw", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-543140580", "createdAt": "2020-12-02T18:51:41Z", "commit": {"oid": "f6aecc31e457d701563955ba7d4bbee53831f683"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTQzNTU2", "url": "https://github.com/apache/pulsar/pull/8685#pullrequestreview-543143556", "createdAt": "2020-12-02T18:55:29Z", "commit": {"oid": "f6aecc31e457d701563955ba7d4bbee53831f683"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60156f6d31cd5ed62f41c9ab08fe049af8c3f13", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/a60156f6d31cd5ed62f41c9ab08fe049af8c3f13", "committedDate": "2020-12-02T23:42:22Z", "message": "PIP 68: Exclusive Producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3524cc00f57002a6f272d5e4f1560689f59405f9", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/3524cc00f57002a6f272d5e4f1560689f59405f9", "committedDate": "2020-12-02T23:42:22Z", "message": "Added missing enums cases in C++"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f86250bdc81a8174f34718f1b3b6e02ccaf836e", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/1f86250bdc81a8174f34718f1b3b6e02ccaf836e", "committedDate": "2020-12-02T23:42:22Z", "message": "Addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a0a8f91e6624b8f5809c448295b26fa586eb1b", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/69a0a8f91e6624b8f5809c448295b26fa586eb1b", "committedDate": "2020-12-02T23:42:22Z", "message": "Moved constant to top of file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0dda252e4afa5ad541728ddbe93f641f4fa282", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/9c0dda252e4afa5ad541728ddbe93f641f4fa282", "committedDate": "2020-12-02T23:42:22Z", "message": "Fix mistake in previous update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba7bbe04d50dd09a111eae521aa32e970262d6d", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/eba7bbe04d50dd09a111eae521aa32e970262d6d", "committedDate": "2020-12-02T23:42:22Z", "message": "Added handling for topic deletion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6aecc31e457d701563955ba7d4bbee53831f683", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/f6aecc31e457d701563955ba7d4bbee53831f683", "committedDate": "2020-12-02T18:38:49Z", "message": "Added handling for topic deletion"}, "afterCommit": {"oid": "eba7bbe04d50dd09a111eae521aa32e970262d6d", "author": {"user": {"login": "merlimat", "name": "Matteo Merli"}}, "url": "https://github.com/apache/pulsar/commit/eba7bbe04d50dd09a111eae521aa32e970262d6d", "committedDate": "2020-12-02T23:42:22Z", "message": "Added handling for topic deletion"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 965, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}