{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDc0ODg4", "number": 6763, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzowMTowOFrODzOEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyMVrOD3Tg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDM0NDYxOnYy", "diffSide": "RIGHT", "path": "site2/docs/security-encryption.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzowMTowOFrOGHq3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzo0ODo1N1rOGHrLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NTYyMg==", "bodyText": "In above 2 lines SEND and DISCARD should be removed?", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r410695622", "createdAt": "2020-04-18T13:01:08Z", "author": {"login": "jiazhai"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -160,16 +165,15 @@ When producers want to encrypt the messages with multiple keys, producers add al\n If you need to encrypt the messages using 2 keys (myapp.messagekey1 and myapp.messagekey2), refer to the following example.\n \n ```java\n-conf.addEncryptionKey(\"myapp.messagekey1\");\n-conf.addEncryptionKey(\"myapp.messagekey2\");\n+PulsarClient.newProducer().addEncryptionKey(\"myapp.messagekey1\").addEncryptionKey(\"myapp.messagekey2\");\n ```\n ## Decrypt encrypted messages at the consumer application\n Consumers require access one of the private keys to decrypt messages that the producer produces. If you want to receive encrypted messages, create a public or private key and give your public key to the producer application to encrypt messages using your public key.\n \n ## Handle failures\n * Producer/ Consumer loses access to the key\n-  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call conf.setCryptoFailureAction(ProducerCryptoFailureAction) to control the producer behavior. The default behavior is to fail the request.\n-  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call conf.setCryptoFailureAction(ConsumerCryptoFailureAction) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.\n+  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call PulsarClient.newProducer().cryptoFailureAction(ProducerCryptoFailureAction.SEND) to control the producer behavior. The default behavior is to fail the request.\n+  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call PulsarClient.newConsumer().cryptoFailureAction(ConsumerCryptoFailureAction.DISCARD) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1601b79cc96fa82f05ceb5aa4852cb56b7599356"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMDY0Mg==", "bodyText": "Done", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r410700642", "createdAt": "2020-04-18T13:48:57Z", "author": {"login": "trexinc"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -160,16 +165,15 @@ When producers want to encrypt the messages with multiple keys, producers add al\n If you need to encrypt the messages using 2 keys (myapp.messagekey1 and myapp.messagekey2), refer to the following example.\n \n ```java\n-conf.addEncryptionKey(\"myapp.messagekey1\");\n-conf.addEncryptionKey(\"myapp.messagekey2\");\n+PulsarClient.newProducer().addEncryptionKey(\"myapp.messagekey1\").addEncryptionKey(\"myapp.messagekey2\");\n ```\n ## Decrypt encrypted messages at the consumer application\n Consumers require access one of the private keys to decrypt messages that the producer produces. If you want to receive encrypted messages, create a public or private key and give your public key to the producer application to encrypt messages using your public key.\n \n ## Handle failures\n * Producer/ Consumer loses access to the key\n-  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call conf.setCryptoFailureAction(ProducerCryptoFailureAction) to control the producer behavior. The default behavior is to fail the request.\n-  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call conf.setCryptoFailureAction(ConsumerCryptoFailureAction) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.\n+  * Producer action fails indicating the cause of the failure. Application has the option to proceed with sending unencrypted message in such cases. Call PulsarClient.newProducer().cryptoFailureAction(ProducerCryptoFailureAction.SEND) to control the producer behavior. The default behavior is to fail the request.\n+  * If consumption fails due to decryption failure or missing keys in consumer, application has the option to consume the encrypted message or discard it. Call PulsarClient.newConsumer().cryptoFailureAction(ConsumerCryptoFailureAction.DISCARD) to control the consumer behavior. The default behavior is to fail the request. Application is never able to decrypt the messages if the private key is permanently lost.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5NTYyMg=="}, "originalCommit": {"oid": "1601b79cc96fa82f05ceb5aa4852cb56b7599356"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDgwOTk2OnYy", "diffSide": "RIGHT", "path": "site2/docs/security-encryption.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjowMDoxOVrOGLDHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjowMDoxOVrOGLDHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzODYwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.\n          \n          \n            \n            Pulsar generates a new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r414238608", "createdAt": "2020-04-24T02:00:19Z", "author": {"login": "Anonymitaet"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -144,11 +148,12 @@ for (int i = 0; i < 10; i++) {\n \n // Acknowledge the consumption of all messages at once\n consumer.acknowledgeCumulative(msg);\n+consumer.close();\n pulsarClient.close();\n ```\n \n ## Key rotation\n-Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader::getPublicKey() to retrieve the latest version.\n+Pulsar generates new AES data key every 4 hours or after publishing a certain number of messages. A producer fetches the asymmetric public key every 4 hours by calling CryptoKeyReader.getPublicKey() to retrieve the latest version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzE3OTc2OnYy", "diffSide": "RIGHT", "path": "site2/docs/security-encryption.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyMVrOGNfPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowODoyMVrOGNi2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ==", "bodyText": "what will be the myappkey", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416796519", "createdAt": "2020-04-28T17:32:21Z", "author": {"login": "kjaggann"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODk1NA==", "bodyText": "Its just a \u201ctag\u201d for the key. So the consumer knows with which key to decrypt. As basically every producer can use a different encryption key", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416798954", "createdAt": "2020-04-28T17:36:12Z", "author": {"login": "trexinc"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNDY3NQ==", "bodyText": "I used secured  AES key generated from this method\nKey key;\nSecureRandom rand = new SecureRandom();\nKeyGenerator generator = KeyGenerator.getInstance(\"AES\");\ngenerator.init(256, rand);\nkey = generator.generateKey();\nand  created a producer\nProducer<byte[]> producer = client.newProducer()\n.topic(\"persistent://my-tenant/my-namespace/my-topic-1\")\n.cryptoKeyReader(new RawFileKeyReader(\"src/main/resources/test_ecdsa_pubkey.pem\", \"src/main/resources/test_ecdsa_privkey.pem\"))\n.addEncryptionKey(\"key\")\n.enableBatching(false)\n.create();\nBut i got this exception\norg.apache.pulsar.client.api.PulsarClientException: java.util.concurrent.ExecutionException: org.apache.pulsar.client.api.PulsarClientException: java.lang.NoSuchMethodError: 'org.apache.pulsar.shade.io.netty.buffer.ByteBuf org.apache.pulsar.client.api.MessageCrypto.encrypt(java.util.Set, org.apache.pulsar.client.api.CryptoKeyReader, java.util.function.Supplier, org.apache.pulsar.shade.io.netty.buffer.ByteBuf)'\n\nI followed the document", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416814675", "createdAt": "2020-04-28T18:00:26Z", "author": {"login": "kjaggann"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMTkzMQ==", "bodyText": "Yep, this seems to be completely broken in 2.5.1. Works fine in 2.5.0.", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416821931", "createdAt": "2020-04-28T18:12:09Z", "author": {"login": "trexinc"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyOTA1MQ==", "bodyText": "Well, it works fine if you add this dependency:\ncompile group: 'org.apache.pulsar', name: 'pulsar-client-messagecrypto-bc', version: '2.5.1'\nDon't know if this a bug or this is how it is supposed to be now with the whole addition of bcfips support.", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416829051", "createdAt": "2020-04-28T18:23:49Z", "author": {"login": "trexinc"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTgwMQ==", "bodyText": "I have already added that dependency\nhowever i have raised a ticket for this\nISSUE-6834: Apache pulsar Encryption failed using ecdsa", "url": "https://github.com/apache/pulsar/pull/6763#discussion_r416855801", "createdAt": "2020-04-28T19:08:21Z", "author": {"login": "kjaggann"}, "path": "site2/docs/security-encryption.md", "diffHunk": "@@ -78,18 +78,20 @@ class RawFileKeyReader implements CryptoKeyReader {\n         return keyInfo;\n     }\n }\n-PulsarClient pulsarClient = PulsarClient.create(\"http://localhost:8080\");\n \n-ProducerConfiguration prodConf = new ProducerConfiguration();\n-prodConf.setCryptoKeyReader(new RawFileKeyReader(\"test_ecdsa_pubkey.pem\", \"test_ecdsa_privkey.pem\"));\n-prodConf.addEncryptionKey(\"myappkey\");\n+PulsarClient pulsarClient = PulsarClient.builder().serviceUrl(\"pulsar://localhost:6650\").build();\n \n-Producer producer = pulsarClient.createProducer(\"persistent://my-tenant/my-ns/my-topic\", prodConf);\n+Producer producer = pulsarClient.newProducer()\n+                .topic(\"persistent://my-tenant/my-ns/my-topic\")\n+                .addEncryptionKey(\"myappkey\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjUxOQ=="}, "originalCommit": {"oid": "e1f7d63ce88c1c3f28cad372365bfdeed3d67ea4"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1799, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}