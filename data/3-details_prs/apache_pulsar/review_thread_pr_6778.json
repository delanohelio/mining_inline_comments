{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTUyNTYz", "number": 6778, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMTozMVrODzzqXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMjo1OFrODzzs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUwMzk3OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMTozMVrOGIcV-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODozNzoxNVrOGIiQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA==", "bodyText": "The assignment is not needed, the builder would update in-place", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411506170", "createdAt": "2020-04-20T16:11:31Z", "author": {"login": "merlimat"}, "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -80,17 +80,17 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                     .messageListener(this);\n \n             if (conf.isRegexPattern) {\n-                cb.topicsPattern(topic);\n+                cb = cb.topicsPattern(topic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMjk2Mw==", "bodyText": "This is needed for test, since otherwise the mock would return null", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411602963", "createdAt": "2020-04-20T18:37:15Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -80,17 +80,17 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                     .messageListener(this);\n \n             if (conf.isRegexPattern) {\n-                cb.topicsPattern(topic);\n+                cb = cb.topicsPattern(topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjE3MA=="}, "originalCommit": {"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUxMDY3OnYy", "diffSide": "RIGHT", "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMjo1OFrOGIcaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToyMTozM1rOGJfGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ==", "bodyText": "This could be simplified into:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Consumer<T> consumer = cb.subscribeAsync().join();\n          \n          \n            \n                        Consumer<T> consumer = cb.subscribe();\n          \n      \n    \n    \n  \n\nIn any case, I think we should be catching any exception thrown over the loop and close down all the consumers that were already created and added to the list.", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411507239", "createdAt": "2020-04-20T16:12:58Z", "author": {"login": "merlimat"}, "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -99,11 +99,12 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 if (pulsarSourceConfig.getDeadLetterTopic() != null && !pulsarSourceConfig.getDeadLetterTopic().isEmpty()) {\n                     deadLetterPolicyBuilder.deadLetterTopic(pulsarSourceConfig.getDeadLetterTopic());\n                 }\n-                cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n+                cb = cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n             }\n \n-            return cb.subscribeAsync();\n-        }).collect(Collectors.toList()).stream().map(CompletableFuture::join).collect(Collectors.toList());\n+            Consumer<T> consumer = cb.subscribeAsync().join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwMzczMQ==", "bodyText": "The current philosophy is that all cleaning up logic is inside the close which will get called as soon as there is an error. Shouldn't that suffice?", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r411603731", "createdAt": "2020-04-20T18:38:31Z", "author": {"login": "srkukarni"}, "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -99,11 +99,12 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 if (pulsarSourceConfig.getDeadLetterTopic() != null && !pulsarSourceConfig.getDeadLetterTopic().isEmpty()) {\n                     deadLetterPolicyBuilder.deadLetterTopic(pulsarSourceConfig.getDeadLetterTopic());\n                 }\n-                cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n+                cb = cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n             }\n \n-            return cb.subscribeAsync();\n-        }).collect(Collectors.toList()).stream().map(CompletableFuture::join).collect(Collectors.toList());\n+            Consumer<T> consumer = cb.subscribeAsync().join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}, "originalCommit": {"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5OTgzOA==", "bodyText": "The client close? What wouldn't work when running in the thread mode, since the PulsarClient is shared.", "url": "https://github.com/apache/pulsar/pull/6778#discussion_r412599838", "createdAt": "2020-04-22T01:21:33Z", "author": {"login": "merlimat"}, "path": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java", "diffHunk": "@@ -99,11 +99,12 @@ public void open(Map<String, Object> config, SourceContext sourceContext) throws\n                 if (pulsarSourceConfig.getDeadLetterTopic() != null && !pulsarSourceConfig.getDeadLetterTopic().isEmpty()) {\n                     deadLetterPolicyBuilder.deadLetterTopic(pulsarSourceConfig.getDeadLetterTopic());\n                 }\n-                cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n+                cb = cb.deadLetterPolicy(deadLetterPolicyBuilder.build());\n             }\n \n-            return cb.subscribeAsync();\n-        }).collect(Collectors.toList()).stream().map(CompletableFuture::join).collect(Collectors.toList());\n+            Consumer<T> consumer = cb.subscribeAsync().join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzIzOQ=="}, "originalCommit": {"oid": "c454d6287e631b446da85c3ad8629b06a3a555c6"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1810, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}