{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Njc2MzIy", "number": 6676, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozOTo0M1rODvPFEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MjozM1rODvPI3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU2NzIyOnYy", "diffSide": "RIGHT", "path": "conf/broker.conf", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozOTo0M1rOGBiyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozOTo0M1rOGBiyIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MTY0OQ==", "bodyText": "maybe called it retentionCheckIntervalInSeconds?", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404271649", "createdAt": "2020-04-06T17:39:43Z", "author": {"login": "sijie"}, "path": "conf/broker.conf", "diffHunk": "@@ -346,6 +346,10 @@ maxMessagePublishBufferSizeInMB=\n # Use 0 or negative number to disable the max publish buffer limiting.\n messagePublishBufferCheckIntervalInMillis=100\n \n+# Check between intervals to see if consumed ledgers need to be trimmed\n+# Use 0 or negative number to disable the check\n+consumedLedgersCheckIntervalInSeconds=120", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU2OTY5OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MDoyNVrOGBizvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MDoyNVrOGBizvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjA2Mw==", "bodyText": "close the producer at the end. or add @Cleanup annotation.", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404272063", "createdAt": "2020-04-06T17:40:25Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU3MDExOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MDozNFrOGBi0Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MDozNFrOGBi0Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjE0Mw==", "bodyText": "Same comment as above.", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404272143", "createdAt": "2020-04-06T17:40:34Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .producerName(\"producer-name\")\n+                .create();\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU3MjM5OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MToxM1rOGBi1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMjo0NTowMVrOGBw9jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjUxNg==", "bodyText": "why not just call the synchronous send?", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404272516", "createdAt": "2020-04-06T17:41:13Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .producerName(\"producer-name\")\n+                .create();\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .subscribe();\n+        Topic topicRef = pulsar.getBrokerService().getTopicReference(topicName).get();\n+        Assert.assertNotNull(topicRef);\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n+\n+        ManagedLedgerConfig managedLedgerConfig = persistentTopic.getManagedLedger().getConfig();\n+        managedLedgerConfig.setRetentionSizeInMB(1L);\n+        managedLedgerConfig.setRetentionTime(1, TimeUnit.SECONDS);\n+        managedLedgerConfig.setMaxEntriesPerLedger(2);\n+        managedLedgerConfig.setMinimumRolloverTime(1, TimeUnit.MILLISECONDS);\n+\n+        int msgNum = 10;\n+        for (int i = 0; i < msgNum; i++) {\n+            producer.sendAsync(new byte[1024 * 1024]).get(2, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwMzk1MA==", "bodyText": "But synchronous send can not set the timeout period, should this feature be added?", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404503950", "createdAt": "2020-04-07T02:45:01Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .producerName(\"producer-name\")\n+                .create();\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .subscribe();\n+        Topic topicRef = pulsar.getBrokerService().getTopicReference(topicName).get();\n+        Assert.assertNotNull(topicRef);\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n+\n+        ManagedLedgerConfig managedLedgerConfig = persistentTopic.getManagedLedger().getConfig();\n+        managedLedgerConfig.setRetentionSizeInMB(1L);\n+        managedLedgerConfig.setRetentionTime(1, TimeUnit.SECONDS);\n+        managedLedgerConfig.setMaxEntriesPerLedger(2);\n+        managedLedgerConfig.setMinimumRolloverTime(1, TimeUnit.MILLISECONDS);\n+\n+        int msgNum = 10;\n+        for (int i = 0; i < msgNum; i++) {\n+            producer.sendAsync(new byte[1024 * 1024]).get(2, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjUxNg=="}, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU3NDE2OnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MTo0NlrOGBi2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MTo0NlrOGBi2yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3Mjg0MA==", "bodyText": "why do we sleep 4 seconds here?", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404272840", "createdAt": "2020-04-06T17:41:46Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU3NjkyOnYy", "diffSide": "RIGHT", "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MjozM1rOGBi4jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMjozMjozOVrOGBwx_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MzI5Mg==", "bodyText": "nit: Ideally we should try to avoid using sleep as the condition to wait until the task to be triggered. we might need to consider how to do this better in the future.", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404273292", "createdAt": "2020-04-06T17:42:33Z", "author": {"login": "sijie"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .producerName(\"producer-name\")\n+                .create();\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .subscribe();\n+        Topic topicRef = pulsar.getBrokerService().getTopicReference(topicName).get();\n+        Assert.assertNotNull(topicRef);\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n+\n+        ManagedLedgerConfig managedLedgerConfig = persistentTopic.getManagedLedger().getConfig();\n+        managedLedgerConfig.setRetentionSizeInMB(1L);\n+        managedLedgerConfig.setRetentionTime(1, TimeUnit.SECONDS);\n+        managedLedgerConfig.setMaxEntriesPerLedger(2);\n+        managedLedgerConfig.setMinimumRolloverTime(1, TimeUnit.MILLISECONDS);\n+\n+        int msgNum = 10;\n+        for (int i = 0; i < msgNum; i++) {\n+            producer.sendAsync(new byte[1024 * 1024]).get(2, TimeUnit.SECONDS);\n+        }\n+\n+        ManagedLedgerImpl managedLedger = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+        Assert.assertEquals(managedLedger.getLedgersInfoAsList().size(), msgNum / 2);\n+\n+        //no traffic, unconsumed ledger will be retained\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwMDk4OA==", "bodyText": "If we want to simulate the actual scenario, we must wait for the scheduler to execute. In addition to reducing the scheduling interval, I did not think of a better way.\nOverall, existing unit tests can be optimized to meet parallel execution", "url": "https://github.com/apache/pulsar/pull/6676#discussion_r404500988", "createdAt": "2020-04-07T02:32:39Z", "author": {"login": "315157973"}, "path": "pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsumedLedgersTrimTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service;\n+\n+\n+import org.apache.bookkeeper.mledger.ManagedLedgerConfig;\n+import org.apache.bookkeeper.mledger.impl.ManagedLedgerImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.junit.Test;\n+import org.testng.Assert;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ConsumedLedgersTrimTest extends BrokerTestBase {\n+    @Override\n+    protected void setup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Override\n+    protected void cleanup() throws Exception {\n+        //No-op\n+    }\n+\n+    @Test\n+    public void TestConsumedLedgersTrim() throws Exception {\n+        conf.setConsumedLedgersCheckIntervalInSeconds(2);\n+        super.baseSetup();\n+        Thread.sleep(4);\n+        final String topicName = \"persistent://prop/ns-abc/TestConsumedLedgersTrim\";\n+        final String subscriptionName = \"my-subscriber-name\";\n+        Producer<byte[]> producer = pulsarClient.newProducer()\n+                .topic(topicName)\n+                .producerName(\"producer-name\")\n+                .create();\n+\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .subscribe();\n+        Topic topicRef = pulsar.getBrokerService().getTopicReference(topicName).get();\n+        Assert.assertNotNull(topicRef);\n+\n+        PersistentTopic persistentTopic = (PersistentTopic) pulsar.getBrokerService().getOrCreateTopic(topicName).get();\n+\n+        ManagedLedgerConfig managedLedgerConfig = persistentTopic.getManagedLedger().getConfig();\n+        managedLedgerConfig.setRetentionSizeInMB(1L);\n+        managedLedgerConfig.setRetentionTime(1, TimeUnit.SECONDS);\n+        managedLedgerConfig.setMaxEntriesPerLedger(2);\n+        managedLedgerConfig.setMinimumRolloverTime(1, TimeUnit.MILLISECONDS);\n+\n+        int msgNum = 10;\n+        for (int i = 0; i < msgNum; i++) {\n+            producer.sendAsync(new byte[1024 * 1024]).get(2, TimeUnit.SECONDS);\n+        }\n+\n+        ManagedLedgerImpl managedLedger = (ManagedLedgerImpl) persistentTopic.getManagedLedger();\n+        Assert.assertEquals(managedLedger.getLedgersInfoAsList().size(), msgNum / 2);\n+\n+        //no traffic, unconsumed ledger will be retained\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MzI5Mg=="}, "originalCommit": {"oid": "6b233315e0ded9083153200f49305b6af8c7f7f6"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1867, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}