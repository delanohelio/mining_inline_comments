{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODA1Njk4", "number": 8422, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowMjoxNlrOE-pLqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxNVrOE-vHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTIxODk2OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowMjoxNlrOH76HFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QwMjo0NDowN1rOIVK0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDExNg==", "bodyText": "Does this dependency is necessary?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532580116", "createdAt": "2020-11-30T13:02:16Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/pom.xml", "diffHunk": "@@ -109,6 +109,32 @@\n           <version>${joda.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-record-decoder</artifactId>\n+            <version>${presto.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>pulsar-client-original</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1MjU2Ng==", "bodyText": "Yes , PulsarRowDecoder.decodeRow() call GenericXXXSchema.decode(ByteBuf byteBuf)  for GenericRecord.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547752566", "createdAt": "2020-12-23T07:29:51Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/pom.xml", "diffHunk": "@@ -109,6 +109,32 @@\n           <version>${joda.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-record-decoder</artifactId>\n+            <version>${presto.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>pulsar-client-original</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDExNg=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA2ODI1Nw==", "bodyText": "It seems that the dependency pulsar-client-original is already in the pulsar-client-admin-original.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r559068257", "createdAt": "2021-01-17T02:44:07Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/pom.xml", "diffHunk": "@@ -109,6 +109,32 @@\n           <version>${joda.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-record-decoder</artifactId>\n+            <version>${presto.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>pulsar-client-original</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDExNg=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTM3OTMwOnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MjoxOVrOH77m5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMzowMVrOIKYTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDY0NA==", "bodyText": "Does the DecoderExtraInfo need to be printed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532604644", "createdAt": "2020-11-30T13:42:19Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -88,8 +85,6 @@ public String toString() {\n         return \"PulsarColumnMetadata{\"\n             + \"isInternal=\" + isInternal\n             + \", nameWithCase='\" + nameWithCase + '\\''\n-            + \", fieldNames=\" + Arrays.toString(fieldNames)\n-            + \", positionIndices=\" + Arrays.toString(positionIndices)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NDc1Mg==", "bodyText": "@gaoran10 thanks for the remind,  fixed as suggestion.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547754752", "createdAt": "2020-12-23T07:33:01Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -88,8 +85,6 @@ public String toString() {\n         return \"PulsarColumnMetadata{\"\n             + \"isInternal=\" + isInternal\n             + \", nameWithCase='\" + nameWithCase + '\\''\n-            + \", fieldNames=\" + Arrays.toString(fieldNames)\n-            + \", positionIndices=\" + Arrays.toString(positionIndices)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDY0NA=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTM4MzM3OnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0MzoyN1rOH77phQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMzoxOVrOIKYUDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTMxNw==", "bodyText": "Is it necessary to compare the DecoderExtraInfo?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532605317", "createdAt": "2020-11-30T13:43:27Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -114,12 +109,6 @@ public boolean equals(Object o) {\n         if (nameWithCase != null ? !nameWithCase.equals(that.nameWithCase) : that.nameWithCase != null) {\n             return false;\n         }\n-        if (!Arrays.deepEquals(fieldNames, that.fieldNames)) {\n-            return false;\n-        }\n-        if (!Arrays.deepEquals(positionIndices, that.positionIndices)) {\n-            return false;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NTAyMg==", "bodyText": "thanks for the remind, fixed as suggestion.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547755022", "createdAt": "2020-12-23T07:33:19Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -114,12 +109,6 @@ public boolean equals(Object o) {\n         if (nameWithCase != null ? !nameWithCase.equals(that.nameWithCase) : that.nameWithCase != null) {\n             return false;\n         }\n-        if (!Arrays.deepEquals(fieldNames, that.fieldNames)) {\n-            return false;\n-        }\n-        if (!Arrays.deepEquals(positionIndices, that.positionIndices)) {\n-            return false;\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTMxNw=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTM4NTM1OnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo0Mzo1N1rOH77qvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozNTowOVrOIKYaAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTYyOQ==", "bodyText": "Is it necessary to compute the DecoderExtraInfo?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532605629", "createdAt": "2020-11-30T13:43:57Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -128,9 +117,91 @@ public int hashCode() {\n         int result = super.hashCode();\n         result = 31 * result + (isInternal ? 1 : 0);\n         result = 31 * result + (nameWithCase != null ? nameWithCase.hashCode() : 0);\n-        result = 31 * result + Arrays.hashCode(fieldNames);\n-        result = 31 * result + Arrays.hashCode(positionIndices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NjU0Ng==", "bodyText": "thanks for the remind, fixed as suggestion.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547756546", "createdAt": "2020-12-23T07:35:09Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarColumnMetadata.java", "diffHunk": "@@ -128,9 +117,91 @@ public int hashCode() {\n         int result = super.hashCode();\n         result = 31 * result + (isInternal ? 1 : 0);\n         result = 31 * result + (nameWithCase != null ? nameWithCase.hashCode() : 0);\n-        result = 31 * result + Arrays.hashCode(fieldNames);\n-        result = 31 * result + Arrays.hashCode(positionIndices);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTYyOQ=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTUzMzI2OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarDispatchingRowDecoderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDoxNzoxMlrOH79D4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0MzoyOVrOIKYzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyODQ0OA==", "bodyText": "The various decoder factories could be initialized at the Pulsar SQL beginning, one time is enough and they could be reused.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532628448", "createdAt": "2020-11-30T14:17:12Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarDispatchingRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import static java.lang.String.format;\n+\n+import com.google.inject.Inject;\n+\n+import io.airlift.log.Logger;\n+\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.TypeManager;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.common.schema.SchemaType;\n+import org.apache.pulsar.sql.presto.decoder.avro.PulsarAvroRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.json.PulsarJsonRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.primitive.PulsarPrimitiveRowDecoderFactory;\n+\n+/**\n+ * dispatcher RowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType}.\n+ */\n+public class PulsarDispatchingRowDecoderFactory {\n+\n+    private static final Logger log = Logger.get(PulsarDispatchingRowDecoderFactory.class);\n+\n+    private TypeManager typeManager;\n+\n+    @Inject\n+    public PulsarDispatchingRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.createRowDecoder(topicName, schemaInfo, columns);\n+    }\n+\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.extractColumnMetadata(topicName, schemaInfo, handleKeyValueType);\n+    }\n+\n+    private PulsarRowDecoderFactory createDecoderFactory(SchemaInfo schemaInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MzA2OA==", "bodyText": "@gaoran10 Agreed, That sounds like a good ieda to me. But i proposal can add another individual PR to optimize this , in current state, Make PR-8422 more simpler for friendly review is a good choice?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547763068", "createdAt": "2020-12-23T07:43:29Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarDispatchingRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto;\n+\n+import static java.lang.String.format;\n+\n+import com.google.inject.Inject;\n+\n+import io.airlift.log.Logger;\n+\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.TypeManager;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.common.schema.SchemaType;\n+import org.apache.pulsar.sql.presto.decoder.avro.PulsarAvroRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.json.PulsarJsonRowDecoderFactory;\n+import org.apache.pulsar.sql.presto.decoder.primitive.PulsarPrimitiveRowDecoderFactory;\n+\n+/**\n+ * dispatcher RowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType}.\n+ */\n+public class PulsarDispatchingRowDecoderFactory {\n+\n+    private static final Logger log = Logger.get(PulsarDispatchingRowDecoderFactory.class);\n+\n+    private TypeManager typeManager;\n+\n+    @Inject\n+    public PulsarDispatchingRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.createRowDecoder(topicName, schemaInfo, columns);\n+    }\n+\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        PulsarRowDecoderFactory rowDecoderFactory = createDecoderFactory(schemaInfo);\n+        return rowDecoderFactory.extractColumnMetadata(topicName, schemaInfo, handleKeyValueType);\n+    }\n+\n+    private PulsarRowDecoderFactory createDecoderFactory(SchemaInfo schemaInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyODQ0OA=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTczNTcyOnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo1OTo1MFrOH7-_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0Mzo1OVrOIKY0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDEyMw==", "bodyText": "It seems that the multi-version schema decoder cache could be added and the decoders could be reused.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532660123", "createdAt": "2020-11-30T14:59:50Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MzQ0OQ==", "bodyText": "same as above. I proposal add another individual PR to optimize this.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547763449", "createdAt": "2020-12-23T07:43:59Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDEyMw=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTc0MDE3OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTowMDo0MlrOH7_CWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0NDoyM1rOIKY2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDgyNw==", "bodyText": "same as above.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532660827", "createdAt": "2020-11-30T15:00:42Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2Mzc5Nw==", "bodyText": "same as above. I proposal add another individual PR to optimize this.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547763797", "createdAt": "2020-12-23T07:44:23Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2MDgyNw=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTgwNTEwOnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNToxNDozMFrOH7_ppg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0ODo1MFrOIKZE5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MDg4Ng==", "bodyText": "The switch is more efficient and the PulsarInternalColumn could be changed to an enum.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532670886", "createdAt": "2020-11-30T15:14:30Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.VALUE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedKey;\n             if (this.currentMessage.getKeyBytes().isPresent()) {\n-                keyByteBuf = this.currentMessage.getKeyBytes().get();\n+                decodedKey = keyDecoder.decodeRow(this.currentMessage.getKeyBytes().get());\n+                decodedKey.ifPresent(currentRowValuesMap::putAll);\n             }\n-            currentRecord = this.schemaHandler.deserialize(keyByteBuf,\n-                    this.currentMessage.getData(), this.currentMessage.getSchemaVersion());\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n         } else {\n-            currentRecord = this.schemaHandler.deserialize(this.currentMessage.getData(),\n-                    this.currentMessage.getSchemaVersion());\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.NONE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n+        }\n+\n+        for (DecoderColumnHandle columnHandle : columnHandles) {\n+            if (columnHandle.isInternal()) {\n+                if (PulsarInternalColumn.PARTITION.getName().equals(columnHandle.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NzUyNQ==", "bodyText": "thanks for the suggest, PulsarInternalColumn is static & final field, maybe this improvement is relatively small ? If we want optimize this, i suggest add another individual PR.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547767525", "createdAt": "2020-12-23T07:48:50Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/PulsarRecordCursor.java", "diffHunk": "@@ -420,17 +435,92 @@ public boolean advanceNextPosition() {\n         //start time for deseralizing record\n         metricsTracker.start_RECORD_DESERIALIZE_TIME();\n \n-        if (this.schemaHandler instanceof KeyValueSchemaHandler) {\n-            ByteBuf keyByteBuf = null;\n+        SchemaInfo schemaInfo;\n+        try {\n+            schemaInfo =  schemaInfoProvider.getSchemaByVersion(this.currentMessage.getSchemaVersion()).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Map<ColumnHandle, FieldValueProvider> currentRowValuesMap = new HashMap<>();\n+\n+        if (schemaInfo.getType().equals(SchemaType.KEY_VALUE)) {\n+\n+            PulsarRowDecoder keyDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.KEY\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.VALUE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedKey;\n             if (this.currentMessage.getKeyBytes().isPresent()) {\n-                keyByteBuf = this.currentMessage.getKeyBytes().get();\n+                decodedKey = keyDecoder.decodeRow(this.currentMessage.getKeyBytes().get());\n+                decodedKey.ifPresent(currentRowValuesMap::putAll);\n             }\n-            currentRecord = this.schemaHandler.deserialize(keyByteBuf,\n-                    this.currentMessage.getData(), this.currentMessage.getSchemaVersion());\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n         } else {\n-            currentRecord = this.schemaHandler.deserialize(this.currentMessage.getData(),\n-                    this.currentMessage.getSchemaVersion());\n+            PulsarRowDecoder messageDecoder = decoderFactory.createRowDecoder(topicName,\n+                    schemaInfo,\n+                    columnHandles.stream()\n+                            .filter(col -> !col.isInternal())\n+                            .filter(col -> PulsarColumnHandle.HandleKeyValueType.NONE\n+                                    .equals(col.getHandleKeyValueType()))\n+                            .collect(toImmutableSet()));\n+            Optional<Map<DecoderColumnHandle, FieldValueProvider>> decodedValue =\n+                    messageDecoder.decodeRow(this.currentMessage.getData());\n+            decodedValue.ifPresent(currentRowValuesMap::putAll);\n+        }\n+\n+        for (DecoderColumnHandle columnHandle : columnHandles) {\n+            if (columnHandle.isInternal()) {\n+                if (PulsarInternalColumn.PARTITION.getName().equals(columnHandle.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MDg4Ng=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTkwNjQ2OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTozNDo0NVrOH8Ancw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODowNzozNFrOIKaBtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4NjcwNw==", "bodyText": "Does this problem is fixed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532686707", "createdAt": "2020-11-30T15:34:45Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4MzA5NQ==", "bodyText": "I wanted to leave it to the future before, As your suggest, fix it in this PR may be fine choice.\nCircular reference is bad schema in relational database. ( e.g. spark https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/JavaTypeInference.scala#142).\nAt current code position, Cyclic definition will case java.lang.StackOverflowError instead of OOM, so this only cause current query failed instead of JVM crash. (so i wanted to leave it to the future before)\nAs your suggest , i add StackOverflowError check (TestAvroDecoder/TestJsonDecoder.testCyclicDefinitionDetect) as a simple solution, if we need complex solution, we can add a separate PR ( based graph traversals: https://www.geeksforgeeks.org/detect-cycle-in-a-graph/) to optimize it.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547783095", "createdAt": "2020-12-23T08:07:34Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4NjcwNw=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTkxNTg1OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTozNjozOFrOH8AtQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxMToyN1rOIKaPHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4ODE5NA==", "bodyText": "This feature will be added in the future, right?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532688194", "createdAt": "2020-11-30T15:36:38Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError\n+\n+        return schema.getFields().stream()\n+                .map(field ->\n+                        new PulsarColumnMetadata(field.name(), parseAvroPrestoType(\n+                                field.name(), field.schema()), field.schema().toString(), null, false, false,\n+                                handleKeyValueType, new PulsarColumnMetadata.DecoderExtraInfo(field.name(),\n+                                null, null))\n+\n+                ).collect(toList());\n+    }\n+\n+    private Type parseAvroPrestoType(String fieldname, Schema schema) {\n+        Schema.Type type = schema.getType();\n+        LogicalType logicalType  = schema.getLogicalType();\n+        switch (type) {\n+            case STRING:\n+            case ENUM:\n+                return createUnboundedVarcharType();\n+            case NULL:\n+                throw new UnsupportedOperationException(\n+                        format(\"field '%s' NULL type code should not be reached,\"\n+                                + \"please check the schema or report the bug.\", fieldname));\n+            case FIXED:\n+            case BYTES:\n+                //TODO: support decimal logicalType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4NjUyNw==", "bodyText": "Yes,presto kafka and spark haven't support it also :\n\nkafka https://prestosql.io/docs/current/connector/kafka.html#avro-encoder\nspark https://github.com/databricks/spark-avro/blob/branch-4.0/README-for-old-spark-versions.md", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547786527", "createdAt": "2020-12-23T08:11:27Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError\n+\n+        return schema.getFields().stream()\n+                .map(field ->\n+                        new PulsarColumnMetadata(field.name(), parseAvroPrestoType(\n+                                field.name(), field.schema()), field.schema().toString(), null, false, false,\n+                                handleKeyValueType, new PulsarColumnMetadata.DecoderExtraInfo(field.name(),\n+                                null, null))\n+\n+                ).collect(toList());\n+    }\n+\n+    private Type parseAvroPrestoType(String fieldname, Schema schema) {\n+        Schema.Type type = schema.getType();\n+        LogicalType logicalType  = schema.getLogicalType();\n+        switch (type) {\n+            case STRING:\n+            case ENUM:\n+                return createUnboundedVarcharType();\n+            case NULL:\n+                throw new UnsupportedOperationException(\n+                        format(\"field '%s' NULL type code should not be reached,\"\n+                                + \"please check the schema or report the bug.\", fieldname));\n+            case FIXED:\n+            case BYTES:\n+                //TODO: support decimal logicalType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4ODE5NA=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTkxOTQwOnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTozNzoyMlrOH8Avfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTozNzoyMlrOH8Avfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4ODc2Ng==", "bodyText": "same as above.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532688766", "createdAt": "2020-11-30T15:37:22Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/avro/PulsarAvroRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.avro;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericAvroSchema;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoder;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#AVRO}.\n+ */\n+public class PulsarAvroRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarAvroRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                             Set<DecoderColumnHandle> columns) {\n+        return new PulsarAvroRowDecoder((GenericAvroSchema) GenericAvroSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError\n+\n+        return schema.getFields().stream()\n+                .map(field ->\n+                        new PulsarColumnMetadata(field.name(), parseAvroPrestoType(\n+                                field.name(), field.schema()), field.schema().toString(), null, false, false,\n+                                handleKeyValueType, new PulsarColumnMetadata.DecoderExtraInfo(field.name(),\n+                                null, null))\n+\n+                ).collect(toList());\n+    }\n+\n+    private Type parseAvroPrestoType(String fieldname, Schema schema) {\n+        Schema.Type type = schema.getType();\n+        LogicalType logicalType  = schema.getLogicalType();\n+        switch (type) {\n+            case STRING:\n+            case ENUM:\n+                return createUnboundedVarcharType();\n+            case NULL:\n+                throw new UnsupportedOperationException(\n+                        format(\"field '%s' NULL type code should not be reached,\"\n+                                + \"please check the schema or report the bug.\", fieldname));\n+            case FIXED:\n+            case BYTES:\n+                //TODO: support decimal logicalType\n+                return VarbinaryType.VARBINARY;\n+            case INT:\n+                if (logicalType == LogicalTypes.timeMillis()) {\n+                    return TIME;\n+                } else if (logicalType == LogicalTypes.date()) {\n+                    return DATE;\n+                }\n+                return IntegerType.INTEGER;\n+            case LONG:\n+                if (logicalType == LogicalTypes.timestampMillis()) {\n+                    return TimestampType.TIMESTAMP;\n+                }\n+                //TODO:  support timestamp_microseconds logicalType : https://github.com/prestosql/presto/issues/1284", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTk1NzQzOnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/json/PulsarJsonRowDecoderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NToxMFrOH8BGgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NToxMFrOH8BGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NDY1Nw==", "bodyText": "Does this problem is fixed?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532694657", "createdAt": "2020-11-30T15:45:10Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/main/java/org/apache/pulsar/sql/presto/decoder/json/PulsarJsonRowDecoderFactory.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.sql.presto.decoder.json;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static io.prestosql.spi.type.DateType.DATE;\n+import static io.prestosql.spi.type.TimeType.TIME;\n+import static io.prestosql.spi.type.VarcharType.createUnboundedVarcharType;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.decoder.DecoderColumnHandle;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.type.ArrayType;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.spi.type.BooleanType;\n+import io.prestosql.spi.type.DoubleType;\n+import io.prestosql.spi.type.IntegerType;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.RowType;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.spi.type.TypeSignature;\n+import io.prestosql.spi.type.TypeSignatureParameter;\n+import io.prestosql.spi.type.VarbinaryType;\n+import io.prestosql.spi.type.VarcharType;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.avro.LogicalType;\n+import org.apache.avro.LogicalTypes;\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.impl.schema.generic.GenericJsonSchema;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.sql.presto.PulsarColumnHandle;\n+import org.apache.pulsar.sql.presto.PulsarColumnMetadata;\n+import org.apache.pulsar.sql.presto.PulsarRowDecoderFactory;\n+\n+/**\n+ * PulsarRowDecoderFactory for {@link org.apache.pulsar.common.schema.SchemaType#JSON}.\n+ */\n+public class PulsarJsonRowDecoderFactory implements PulsarRowDecoderFactory {\n+\n+    private TypeManager typeManager;\n+\n+    public PulsarJsonRowDecoderFactory(TypeManager typeManager) {\n+        this.typeManager = typeManager;\n+    }\n+\n+    @Override\n+    public PulsarJsonRowDecoder createRowDecoder(TopicName topicName, SchemaInfo schemaInfo,\n+                                                 Set<DecoderColumnHandle> columns) {\n+        return new PulsarJsonRowDecoder((GenericJsonSchema) GenericJsonSchema.of(schemaInfo), columns);\n+    }\n+\n+    @Override\n+    public List<ColumnMetadata> extractColumnMetadata(TopicName topicName, SchemaInfo schemaInfo,\n+                                                      PulsarColumnHandle.HandleKeyValueType handleKeyValueType) {\n+        String schemaJson = new String(schemaInfo.getSchema());\n+        if (StringUtils.isBlank(schemaJson)) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+        Schema schema;\n+        try {\n+            schema = GenericJsonSchema.of(schemaInfo).getAvroSchema();\n+        } catch (SchemaParseException ex) {\n+            throw new PrestoException(NOT_SUPPORTED, \"Topic \"\n+                    + topicName.toString() + \" does not have a valid schema\");\n+        }\n+\n+        //TODO : check schema cyclic definitions which may case java.lang.StackOverflowError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEwNTExOnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNDo0MVrOH8Cflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNDo0MVrOH8Cflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNzQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<TopicName>  topicNames;\n          \n          \n            \n                protected static List<TopicName> topicNames;", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532717463", "createdAt": "2020-11-30T16:14:41Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEwNjY4OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNTowMFrOH8CgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNTowMFrOH8CgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNzcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<TopicName>  partitionedTopicNames;\n          \n          \n            \n                protected static List<TopicName> partitionedTopicNames;", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532717708", "createdAt": "2020-11-30T16:15:00Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;\n+    protected static List<TopicName>  partitionedTopicNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEwODU0OnYy", "diffSide": "RIGHT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNToyNFrOH8Chyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxNToyNFrOH8Chyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxODAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static List<String> fooFieldNames =  new ArrayList<>();\n          \n          \n            \n                protected static List<String> fooFieldNames = new ArrayList<>();", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532718026", "createdAt": "2020-11-30T16:15:24Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -110,16 +81,20 @@\n \n     protected Map<TopicName, PulsarRecordCursor> pulsarRecordCursors = new HashMap<>();\n \n+    protected static PulsarDispatchingRowDecoderFactory dispatchingRowDecoderFactory;\n+\n     protected final static PulsarConnectorId pulsarConnectorId = new PulsarConnectorId(\"test-connector\");\n \n-    protected static List<TopicName> topicNames;\n-    protected static List<TopicName> partitionedTopicNames;\n+    protected static List<TopicName>  topicNames;\n+    protected static List<TopicName>  partitionedTopicNames;\n     protected static Map<String, Integer> partitionedTopicsToPartitions;\n     protected static Map<String, SchemaInfo> topicsToSchemas;\n     protected static Map<String, Long> topicsToNumEntries;\n \n     private final static ObjectMapper objectMapper = new ObjectMapper();\n \n+    protected static List<String> fooFieldNames =  new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEyMTE4OnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxODoxOVrOH8CpwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxNDozNVrOIKaZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDA2NA==", "bodyText": "Is there any test to test the nest object query?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532720064", "createdAt": "2020-11-30T16:18:19Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -179,28 +150,13 @@\n     public static class Bar {\n         public Integer field1;\n         public String field2;\n-        public Boo test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4OTE4OA==", "bodyText": "Yes, Foo.bar tested in main modules, and TestAvroDecoder\\TestJsonDecoder has also test nest object in Decoder.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547789188", "createdAt": "2020-12-23T08:14:35Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarConnector.java", "diffHunk": "@@ -179,28 +150,13 @@\n     public static class Bar {\n         public Integer field1;\n         public String field2;\n-        public Boo test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDA2NA=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE4NDY2OnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarPrimitiveSchemaHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMTo0NFrOH8DRKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoxNTo0MlrOIKacpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDE1NQ==", "bodyText": "Could you add a test for PulsarPrimitiveRowDecoder?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532730155", "createdAt": "2020-11-30T16:31:44Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarPrimitiveSchemaHandler.java", "diffHunk": "@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import io.netty.buffer.ByteBufAllocator;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import org.apache.pulsar.client.impl.schema.BooleanSchema;\n-import org.apache.pulsar.client.impl.schema.ByteSchema;\n-import org.apache.pulsar.client.impl.schema.BytesSchema;\n-import org.apache.pulsar.client.impl.schema.DateSchema;\n-import org.apache.pulsar.client.impl.schema.DoubleSchema;\n-import org.apache.pulsar.client.impl.schema.FloatSchema;\n-import org.apache.pulsar.client.impl.schema.IntSchema;\n-import org.apache.pulsar.client.impl.schema.LongSchema;\n-import org.apache.pulsar.client.impl.schema.ShortSchema;\n-import org.apache.pulsar.client.impl.schema.StringSchema;\n-import org.apache.pulsar.client.impl.schema.TimeSchema;\n-import org.apache.pulsar.client.impl.schema.TimestampSchema;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.apache.pulsar.common.schema.SchemaType;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Date;\n-import java.util.List;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-@Slf4j\n-public class TestPulsarPrimitiveSchemaHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4OTk5MA==", "bodyText": "thanks for the remind, added TestPrimitiveDecoder", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547789990", "createdAt": "2020-12-23T08:15:42Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarPrimitiveSchemaHandler.java", "diffHunk": "@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import io.netty.buffer.ByteBufAllocator;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import lombok.extern.slf4j.Slf4j;\n-\n-import org.apache.pulsar.client.impl.schema.BooleanSchema;\n-import org.apache.pulsar.client.impl.schema.ByteSchema;\n-import org.apache.pulsar.client.impl.schema.BytesSchema;\n-import org.apache.pulsar.client.impl.schema.DateSchema;\n-import org.apache.pulsar.client.impl.schema.DoubleSchema;\n-import org.apache.pulsar.client.impl.schema.FloatSchema;\n-import org.apache.pulsar.client.impl.schema.IntSchema;\n-import org.apache.pulsar.client.impl.schema.LongSchema;\n-import org.apache.pulsar.client.impl.schema.ShortSchema;\n-import org.apache.pulsar.client.impl.schema.StringSchema;\n-import org.apache.pulsar.client.impl.schema.TimeSchema;\n-import org.apache.pulsar.client.impl.schema.TimestampSchema;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.apache.pulsar.common.schema.SchemaType;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.sql.Time;\n-import java.sql.Timestamp;\n-import java.util.Date;\n-import java.util.List;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-@Slf4j\n-public class TestPulsarPrimitiveSchemaHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDE1NQ=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE5MTc2OnYy", "diffSide": "LEFT", "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarKeyValueSchemaHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxNVrOH8DVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODoyMzoxOVrOIKa4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMTI1Nw==", "bodyText": "Could you add a test for KeyValueSchema datas?", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r532731257", "createdAt": "2020-11-30T16:33:15Z", "author": {"login": "gaoran10"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarKeyValueSchemaHandler.java", "diffHunk": "@@ -1,353 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.Unpooled;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import java.io.IOException;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.pulsar.client.api.Schema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.api.raw.RawMessageImpl;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.KeyValue;\n-import org.apache.pulsar.common.schema.KeyValueEncodingType;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.mockito.Mockito;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import static org.mockito.Mockito.mock;\n-\n-\n-/**\n- * Unit test for KeyValueSchemaHandler\n- */\n-@Slf4j\n-public class TestPulsarKeyValueSchemaHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc5NzA4MQ==", "bodyText": "Thanks for the remind, added TestPulsarRecordCursor.TestKeyValueXXXSchema. In current version, KeyValue is a single-layer container schema without separate decoder, this Keep the codeStyle similar with presto-kafka.", "url": "https://github.com/apache/pulsar/pull/8422#discussion_r547797081", "createdAt": "2020-12-23T08:23:19Z", "author": {"login": "hnail"}, "path": "pulsar-sql/presto-pulsar/src/test/java/org/apache/pulsar/sql/presto/TestPulsarKeyValueSchemaHandler.java", "diffHunk": "@@ -1,353 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.sql.presto;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.Unpooled;\n-import io.prestosql.spi.connector.ColumnMetadata;\n-import java.io.IOException;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import lombok.Data;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.pulsar.client.api.Schema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchema;\n-import org.apache.pulsar.client.impl.schema.KeyValueSchemaInfo;\n-import org.apache.pulsar.common.api.raw.RawMessage;\n-import org.apache.pulsar.common.api.raw.RawMessageImpl;\n-import org.apache.pulsar.common.naming.TopicName;\n-import org.apache.pulsar.common.schema.KeyValue;\n-import org.apache.pulsar.common.schema.KeyValueEncodingType;\n-import org.apache.pulsar.common.schema.SchemaInfo;\n-import org.mockito.Mockito;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import static org.mockito.Mockito.mock;\n-\n-\n-/**\n- * Unit test for KeyValueSchemaHandler\n- */\n-@Slf4j\n-public class TestPulsarKeyValueSchemaHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMTI1Nw=="}, "originalCommit": {"oid": "7c5f93ce2e89894e985c5d986982dd34b54ba228"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}