{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDUwOTYz", "number": 8347, "title": "[Transaction] TransactionBuffer Refactor", "bodyText": "Fix streamnative#1575\nFix issue #8378\nMotivation\n\nUse the above approach instead of the sidecar approach.\nModifications\n\nProduce transaction messages to the topic partition.\nThe commit marker needs to record the related message-id list of its transaction.\nWhen the dispatcher read a transaction marker, get the messages of the transaction by message-id list in the marker and send them to the consumer.\nTransactionBuffer doesn't maintain any index data.\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\n\nAdded unit tests for produce transaction messages and end transaction and read the messages\norg.apache.pulsar.broker.transaction.TransactionProduceTest\norg.apache.pulsar.broker.transaction.TransactionConsumeTest\n\n\nDoes this pull request potentially affect one of the following parts:\nIf yes was chosen, please highlight the changes\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API: (yes)\nThe schema: (no)\nThe default values of configurations: (no)\nThe wire protocol: (yes)\nThe rest endpoints: (no)\nThe admin cli options: (no)\nAnything that affects deployment: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)", "createdAt": "2020-10-22T17:33:00Z", "url": "https://github.com/apache/pulsar/pull/8347", "merged": true, "mergeCommit": {"oid": "91731743fc64712fabbc62e00c674c42586bb985"}, "closed": true, "closedAt": "2020-10-30T01:21:23Z", "author": {"login": "gaoran10"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVsejBAFqTUxNjI4MzM3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXTGS9AFqTUxOTcyOTAzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MjgzMzcz", "url": "https://github.com/apache/pulsar/pull/8347#pullrequestreview-516283373", "createdAt": "2020-10-24T14:52:59Z", "commit": {"oid": "a68f0a994c774ac823be5163098f970f68981d53"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNDo1Mjo1OVrOHnyGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNDo1NzozNFrOHnyJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3NzI5Nw==", "bodyText": "Why we need partition information in the marker?  A marker can only belong to a single partition right?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511477297", "createdAt": "2020-10-24T14:52:59Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarMarkers.proto", "diffHunk": "@@ -80,10 +80,12 @@ message ClusterMessageId {\n message MessageIdData {\n \trequired uint64 ledger_id = 1;\n \trequired uint64 entry_id  = 2;\n+    optional int32 partition = 3 [default = -1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68f0a994c774ac823be5163098f970f68981d53"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3Nzc5NA==", "bodyText": "I think we can keep repeated MessageIdData message_ids here. Since we don't need to consider the compatibility guarantee for the first transaction release.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511477794", "createdAt": "2020-10-24T14:54:54Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarMarkers.proto", "diffHunk": "@@ -80,10 +80,12 @@ message ClusterMessageId {\n message MessageIdData {\n \trequired uint64 ledger_id = 1;\n \trequired uint64 entry_id  = 2;\n+    optional int32 partition = 3 [default = -1];\n }\n \n \n /// --- Transaction marker ---\n message TxnCommitMarker {\n-    required MessageIdData message_id = 1;\n+    optional MessageIdData message_id = 1;\n+    repeated MessageIdData messageIdList = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68f0a994c774ac823be5163098f970f68981d53"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ3ODE5Nw==", "bodyText": "It's some of the old codes are not useful, we can delete them directly. we don't want to tell users there some deprecated components in the first transaction release.\nPlease check all.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511478197", "createdAt": "2020-10-24T14:57:34Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/PersistentTransactionBufferProvider.java", "diffHunk": "@@ -34,6 +34,7 @@\n /**\n  * Persistent transaction buffer provider.\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68f0a994c774ac823be5163098f970f68981d53"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTc2Nzkz", "url": "https://github.com/apache/pulsar/pull/8347#pullrequestreview-516576793", "createdAt": "2020-10-26T09:03:16Z", "commit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowMzoxN1rOHoGLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozNToxNFrOHoHXyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PersistentTopic topic;\n          \n          \n            \n                private final PersistentTopic topic;", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511806283", "createdAt": "2020-10-26T09:03:17Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzExMg==", "bodyText": "Shall we need this method?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511807112", "createdAt": "2020-10-26T09:04:46Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzU4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n          \n          \n            \n                            log.error(\"Failed to append buffer to txn {}\", txnId, e);", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511807580", "createdAt": "2020-10-26T09:05:39Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwODgzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();\n          \n          \n            \n                    List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>(sendMessageIdList.size());", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511808837", "createdAt": "2020-10-26T09:07:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> abortTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} abort on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf abortMarker = Markers.newTxnAbortMarker(\n+                -1L, txnID.getMostSigBits(), txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(abortMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to abort for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    private List<PulsarMarkers.MessageIdData> getMessageIdDataList(List<MessageIdData> sendMessageIdList) {\n+        List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDQwMA==", "bodyText": "Recycle the MessageIdData list before return?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511810400", "createdAt": "2020-10-26T09:10:21Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> abortTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} abort on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf abortMarker = Markers.newTxnAbortMarker(\n+                -1L, txnID.getMostSigBits(), txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(abortMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to abort for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;\n+    }\n+\n+    private List<PulsarMarkers.MessageIdData> getMessageIdDataList(List<MessageIdData> sendMessageIdList) {\n+        List<PulsarMarkers.MessageIdData> messageIdDataList = new ArrayList<>();\n+        for (MessageIdData msgIdData : sendMessageIdList) {\n+            messageIdDataList.add(\n+                    PulsarMarkers.MessageIdData.newBuilder()\n+                            .setLedgerId(msgIdData.getLedgerId())\n+                            .setEntryId(msgIdData.getEntryId()).build());\n+        }\n+        return messageIdDataList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDkwOQ==", "bodyText": "I'm not sure where the MessageId list that getMessageIdDataList(sendMessageIdList) getted will be recycle.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511810909", "createdAt": "2020-10-26T09:11:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferReader;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionMeta;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.api.proto.PulsarApi.MessageIdData;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Markers;\n+\n+/**\n+ * Transaction buffer based on normal persistent topic.\n+ */\n+@Slf4j\n+public class TopicTransactionBuffer implements TransactionBuffer {\n+\n+    private PersistentTopic topic;\n+\n+    public TopicTransactionBuffer(PersistentTopic topic) {\n+        this.topic = topic;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionMeta> getTransactionMeta(TxnID txnID) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Position> appendBufferToTxn(TxnID txnId, long sequenceId, ByteBuf buffer) {\n+        CompletableFuture<Position> completableFuture = new CompletableFuture<>();\n+        topic.publishMessage(buffer, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to appendBufferToTxn for txn {}\", txnId, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(PositionImpl.get(ledgerId, entryId));\n+        });\n+        return completableFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<TransactionBufferReader> openTransactionBufferReader(TxnID txnID, long startSequenceId) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> commitTxn(TxnID txnID, List<MessageIdData> sendMessageIdList) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Transaction {} commit on topic {}.\", txnID.toString(), topic.getName());\n+        }\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+\n+        ByteBuf commitMarker = Markers.newTxnCommitMarker(-1L, txnID.getMostSigBits(),\n+                txnID.getLeastSigBits(), getMessageIdDataList(sendMessageIdList));\n+        topic.publishMessage(commitMarker, (e, ledgerId, entryId) -> {\n+            if (e != null) {\n+                log.error(\"Failed to commit for txn {}\", txnID, e);\n+                completableFuture.completeExceptionally(e);\n+                return;\n+            }\n+            completableFuture.complete(null);\n+        });\n+        return completableFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMjMzNw==", "bodyText": "throw Not support exception?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511812337", "createdAt": "2020-10-26T09:13:40Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBufferProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+import org.apache.pulsar.broker.service.Topic;\n+import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n+import org.apache.pulsar.broker.transaction.buffer.TransactionBufferProvider;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * A provider that provides topic implementations of {@link TransactionBuffer}.\n+ */\n+public class TopicTransactionBufferProvider implements TransactionBufferProvider {\n+    @Override\n+    public CompletableFuture<TransactionBuffer> newTransactionBuffer() {\n+        return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMzIwMw==", "bodyText": "Why we should delete these lines?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511813203", "createdAt": "2020-10-26T09:15:03Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBufferReader.java", "diffHunk": "@@ -66,15 +66,15 @@ public InMemTransactionBufferReader(TxnID txnId, Iterator<Entry<Long, ByteBuf>>\n         int i = 0;\n         while (i < numEntries && entries.hasNext()) {\n             Entry<Long, ByteBuf> entry = entries.next();\n-            TransactionEntry txnEntry = new TransactionEntryImpl(\n-                txnId,\n-                entry.getKey(),\n-                EntryImpl.create(-1L, -1L, entry.getValue()),\n-                committedAtLedgerId,\n-                committedAtEntryId,\n-                -1\n-            );\n-            txnEntries.add(txnEntry);\n+//            TransactionEntry txnEntry = new TransactionEntryImpl(\n+//                txnId,\n+//                entry.getKey(),\n+//                EntryImpl.create(-1L, -1L, entry.getValue()),\n+//                committedAtLedgerId,\n+//                committedAtEntryId,\n+//                -1\n+//            );\n+//            txnEntries.add(txnEntry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDc3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {\n          \n          \n            \n                private CompletableFuture<Void> endTxnInTransactionBuffer(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511814771", "createdAt": "2020-10-26T09:17:40Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -206,7 +210,7 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n         return completableFuture;\n     }\n \n-    private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction) {\n+    private CompletableFuture<Void> endToTB(TxnID txnID, int txnAction, List<PulsarApi.MessageIdData> messageIdDataList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjE4Ng==", "bodyText": "Please recycle the Pulsar command after If confirmed no longer use. Please check all.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511816186", "createdAt": "2020-10-26T09:20:01Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java", "diffHunk": "@@ -229,12 +233,24 @@ public void removeTransactionMetadataStore(TransactionCoordinatorID tcId) {\n                 completableFutureList.add(actionFuture);\n             });\n \n+            List<MessageId> messageIdList = new ArrayList<>();\n+            for (PulsarApi.MessageIdData messageIdData : messageIdDataList) {\n+                messageIdList.add(new MessageIdImpl(\n+                        messageIdData.getLedgerId(), messageIdData.getEntryId(), messageIdData.getPartition()));\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxODI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                repeated MessageIdData message_id = 1;\n          \n          \n            \n                repeated MessageIdData message_ids = 1;", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511818264", "createdAt": "2020-10-26T09:23:29Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarMarkers.proto", "diffHunk": "@@ -85,5 +85,5 @@ message MessageIdData {\n \n /// --- Transaction marker ---\n message TxnCommitMarker {\n-    required MessageIdData message_id = 1;\n+    repeated MessageIdData message_id = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxODUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                repeated MessageIdData messageIdList = 6;\n          \n          \n            \n                repeated MessageIdData message_ids = 6;", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511818509", "createdAt": "2020-10-26T09:23:51Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -783,6 +784,7 @@ message CommandEndTxnOnPartition {\n     optional uint64 txnid_most_bits = 3 [default = 0];\n     optional string topic = 4;\n     optional TxnAction txn_action = 5;\n+    repeated MessageIdData messageIdList = 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxODcyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                repeated MessageIdData messageIdList = 5;\n          \n          \n            \n                repeated MessageIdData message_ids = 5;", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511818721", "createdAt": "2020-10-26T09:24:12Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/proto/PulsarApi.proto", "diffHunk": "@@ -767,6 +767,7 @@ message CommandEndTxn {\n     optional uint64 txnid_least_bits = 2 [default = 0];\n     optional uint64 txnid_most_bits = 3 [default = 0];\n     optional TxnAction txn_action = 4;\n+    repeated MessageIdData messageIdList = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzQ3Mw==", "bodyText": "The commitMarkerBuilder always not null.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511823473", "createdAt": "2020-10-26T09:31:28Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java", "diffHunk": "@@ -309,24 +306,24 @@ private static ByteBuf newTxnMarker(MarkerType markerType, long sequenceId, long\n         MessageMetadata msgMetadata = msgMetadataBuilder.build();\n \n         ByteBuf payload;\n-        if (messageIdData.isPresent()) {\n-            PulsarMarkers.TxnCommitMarker commitMarker = PulsarMarkers.TxnCommitMarker.newBuilder()\n-                                                                                      .setMessageId(messageIdData.get())\n-                                                                                      .build();\n-            int size = commitMarker.getSerializedSize();\n-            payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n-            ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n-            commitMarker.writeTo(outStream);\n-        } else {\n-            payload = PooledByteBufAllocator.DEFAULT.buffer();\n-        }\n+        PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n+\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();\n+        int size = commitMarker.getSerializedSize();\n+        payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n+        ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n+        commitMarker.writeTo(outStream);\n \n         try {\n             return Commands.serializeMetadataAndPayload(ChecksumType.Crc32c, msgMetadata, payload);\n         } finally {\n             payload.release();\n             msgMetadata.recycle();\n             msgMetadataBuilder.recycle();\n+            if (commitMarkerBuilder != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzc4NQ==", "bodyText": "The commitMarker also should be recycled.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511823785", "createdAt": "2020-10-26T09:31:56Z", "author": {"login": "codelipenghui"}, "path": "pulsar-common/src/main/java/org/apache/pulsar/common/protocol/Markers.java", "diffHunk": "@@ -309,24 +306,24 @@ private static ByteBuf newTxnMarker(MarkerType markerType, long sequenceId, long\n         MessageMetadata msgMetadata = msgMetadataBuilder.build();\n \n         ByteBuf payload;\n-        if (messageIdData.isPresent()) {\n-            PulsarMarkers.TxnCommitMarker commitMarker = PulsarMarkers.TxnCommitMarker.newBuilder()\n-                                                                                      .setMessageId(messageIdData.get())\n-                                                                                      .build();\n-            int size = commitMarker.getSerializedSize();\n-            payload = PooledByteBufAllocator.DEFAULT.buffer(size);\n-            ByteBufCodedOutputStream outStream = ByteBufCodedOutputStream.get(payload);\n-            commitMarker.writeTo(outStream);\n-        } else {\n-            payload = PooledByteBufAllocator.DEFAULT.buffer();\n-        }\n+        PulsarMarkers.TxnCommitMarker.Builder commitMarkerBuilder = PulsarMarkers.TxnCommitMarker.newBuilder();\n+\n+        messageIdDataList.ifPresent(commitMarkerBuilder::addAllMessageId);\n+        PulsarMarkers.TxnCommitMarker commitMarker = commitMarkerBuilder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDc4Ng==", "bodyText": "Should be recycled after no longer use", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511824786", "createdAt": "2020-10-26T09:33:33Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java", "diffHunk": "@@ -236,7 +238,16 @@ public void handleAddSubscriptionToTxnResponse(PulsarApi.CommandAddSubscriptionT\n             return callback;\n         }\n         long requestId = client.newRequestId();\n-        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(), PulsarApi.TxnAction.COMMIT);\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNDg4OQ==", "bodyText": "Should be recycled after no longer use", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511824889", "createdAt": "2020-10-26T09:33:42Z", "author": {"login": "codelipenghui"}, "path": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/TransactionMetaStoreHandler.java", "diffHunk": "@@ -255,7 +266,17 @@ public void handleAddSubscriptionToTxnResponse(PulsarApi.CommandAddSubscriptionT\n             return callback;\n         }\n         long requestId = client.newRequestId();\n-        ByteBuf cmd = Commands.newEndTxn(requestId, txnID.getLeastSigBits(), txnID.getMostSigBits(), PulsarApi.TxnAction.ABORT);\n+\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTg2NQ==", "bodyText": "Should be recycled after no longer use", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r511825865", "createdAt": "2020-10-26T09:35:14Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferHandlerImpl.java", "diffHunk": "@@ -71,13 +75,21 @@ public TransactionBufferHandlerImpl(ConnectionPool connectionPool, NamespaceServ\n     }\n \n     @Override\n-    public CompletableFuture<TxnID> endTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, PulsarApi.TxnAction action) {\n+    public CompletableFuture<TxnID> endTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, PulsarApi.TxnAction action, List<MessageId> messageIdList) {\n         CompletableFuture<TxnID> cb = new CompletableFuture<>();\n         if (!canSendRequest(cb)) {\n             return cb;\n         }\n         long requestId = requestIdGenerator.getAndIncrement();\n-        ByteBuf cmd = Commands.newEndTxnOnPartition(requestId, txnIdLeastBits, txnIdMostBits, topic, action);\n+        List<PulsarApi.MessageIdData> messageIdDataList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483638a0ef45e17483d29e53726a2a15ed4e5760"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54578e4c803696ca117b6950ea7cf2dc35066b1b", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/54578e4c803696ca117b6950ea7cf2dc35066b1b", "committedDate": "2020-10-28T17:30:43Z", "message": "1. produce transaction message refactor.\n2. transaction commit refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14400cbbd8297d103f568a111a06ea0226609733", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/14400cbbd8297d103f568a111a06ea0226609733", "committedDate": "2020-10-28T17:30:43Z", "message": "add transaction message reader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f93730c5f7218a05b463dab50a49c8971c112506", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/f93730c5f7218a05b463dab50a49c8971c112506", "committedDate": "2020-10-28T17:30:43Z", "message": "1. topic transaction buffer abort operation.\n2. add new test for topic transaction buffer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afedd9431244d4178476b583113ccd245ddd64e1", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/afedd9431244d4178476b583113ccd245ddd64e1", "committedDate": "2020-10-28T17:30:43Z", "message": "add tests for produce transaction messages and end transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a68ee4665b15099a301d2c21099d3bc7423035", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/f7a68ee4665b15099a301d2c21099d3bc7423035", "committedDate": "2020-10-28T17:32:38Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31a9bbcf4f24609bb42aa171b1325a99489c888", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/f31a9bbcf4f24609bb42aa171b1325a99489c888", "committedDate": "2020-10-28T17:32:39Z", "message": "code clean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb1162e469fe19fb5491ca221b2a7b4f2eda40c", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/edb1162e469fe19fb5491ca221b2a7b4f2eda40c", "committedDate": "2020-10-28T17:32:39Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb4e90e43b6b5703d758b5744086e56840bee23", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/fbb4e90e43b6b5703d758b5744086e56840bee23", "committedDate": "2020-10-28T17:32:39Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9b53bf63e5bdf944f74d0223bc005913cedebb", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/da9b53bf63e5bdf944f74d0223bc005913cedebb", "committedDate": "2020-10-28T17:32:39Z", "message": "change protocol field name, messageIdData recycle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "committedDate": "2020-10-28T17:32:39Z", "message": "transaction messages read refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "667a25d0aa482dcb038e87482ff9ffa70313ea33", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/667a25d0aa482dcb038e87482ff9ffa70313ea33", "committedDate": "2020-10-26T12:27:26Z", "message": "change protocol field name, messageIdData recycle."}, "afterCommit": {"oid": "37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/37e56ec79acb2f4fcdb8f58a0bc750200beddab4", "committedDate": "2020-10-28T17:32:39Z", "message": "transaction messages read refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/3f60bf981dc9d09390d798b91bad79f25d4d2423", "committedDate": "2020-10-28T17:42:41Z", "message": "transaction abort marker clean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjUxMjUw", "url": "https://github.com/apache/pulsar/pull/8347#pullrequestreview-517651250", "createdAt": "2020-10-27T12:32:48Z", "commit": {"oid": "667a25d0aa482dcb038e87482ff9ffa70313ea33"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjozMjo0OFrOHo55Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo1ODoxMFrOHqEYKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MzY0Mg==", "bodyText": "Looks not related to this PR.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r512653642", "createdAt": "2020-10-27T12:32:48Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageDeduplication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import org.apache.bookkeeper.mledger.ManagedLedger;\n+import org.apache.pulsar.broker.PulsarService;\n+\n+public class TransactionMessageDeduplication extends MessageDeduplication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667a25d0aa482dcb038e87482ff9ffa70313ea33"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDk4Mg==", "bodyText": "Only instantiate when the transaction is enabled.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513854982", "createdAt": "2020-10-29T01:19:52Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java", "diffHunk": "@@ -73,9 +77,11 @@\n     private final ServiceConfiguration serviceConfig;\n     private volatile ScheduledFuture<?> readOnActiveConsumerTask = null;\n \n+    LongPairSet messagesToRedeliver = new ConcurrentSortedLongPairSet(128, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default void addMessageToRedelivery(long ledgerId, long entryId) {\n          \n          \n            \n                default void addMessageToReplay(long ledgerId, long entryId) {", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513857820", "createdAt": "2020-10-29T01:25:16Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java", "diffHunk": "@@ -115,4 +115,9 @@ default void cursorIsReset() {\n     default void acknowledgementWasProcessed() {\n         // No-op\n     }\n+\n+    default void addMessageToRedelivery(long ledgerId, long entryId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1ODUyMA==", "bodyText": "I think use replay is more reasonable here.  The redeliver looks like the consumer receiver the messages.", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513858520", "createdAt": "2020-10-29T01:26:34Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/Dispatcher.java", "diffHunk": "@@ -115,4 +115,9 @@ default void cursorIsReset() {\n     default void acknowledgementWasProcessed() {\n         // No-op\n     }\n+\n+    default void addMessageToRedelivery(long ledgerId, long entryId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzgyMA=="}, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2MjAyNA==", "bodyText": "It's better to print the topic name ,subscription name in the log. You can refer to other log patterns in the PersistentDispatcherSingleActiveConsumer.java", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513862024", "createdAt": "2020-10-29T01:31:45Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentDispatcherSingleActiveConsumer.java", "diffHunk": "@@ -447,8 +460,21 @@ protected void readMoreEntries(Consumer consumer) {\n             }\n             havePendingRead = true;\n \n-            if (transactionReader.havePendingTxnToRead()) {\n-                transactionReader.read(messagesToRead, consumer, this);\n+            if (havePendingReplayRead) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"have pending replay read\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3MTI5Nw==", "bodyText": "We already have messageToRedeliver in the Dispatcher, why need to add a pendingReadPosition?", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513871297", "createdAt": "2020-10-29T01:52:16Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/TransactionMessageReader.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.service.persistent;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.bookkeeper.mledger.Entry;\n+import org.apache.bookkeeper.mledger.Position;\n+import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.service.Dispatcher;\n+import org.apache.pulsar.broker.service.Subscription;\n+import org.apache.pulsar.common.api.proto.PulsarApi;\n+import org.apache.pulsar.common.api.proto.PulsarMarkers;\n+import org.apache.pulsar.common.protocol.Commands;\n+import org.apache.pulsar.common.protocol.Markers;\n+import org.apache.pulsar.common.util.collections.ConcurrentLongPairSet;\n+\n+/**\n+ * Transaction message reader.\n+ */\n+@Slf4j\n+public class TransactionMessageReader {\n+\n+    private final Subscription subscription;\n+    private final Dispatcher dispatcher;\n+    private final Executor executor;\n+\n+    private final ConcurrentLongPairSet pendingReadPosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg3Mzk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean afterTxnCommitMarker = false;\n          \n          \n            \n                    boolean isAfterTxnCommitMarker = false;", "url": "https://github.com/apache/pulsar/pull/8347#discussion_r513873963", "createdAt": "2020-10-29T01:58:10Z", "author": {"login": "codelipenghui"}, "path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/AbstractBaseDispatcher.java", "diffHunk": "@@ -70,11 +69,13 @@ protected AbstractBaseDispatcher(Subscription subscription) {\n      */\n     public void filterEntriesForConsumer(List<Entry> entries, EntryBatchSizes batchSizes,\n                                          SendMessageInfo sendMessageInfo, EntryBatchIndexesAcks indexesAcks,\n-                                         ManagedCursor cursor, TransactionReader transactionReader) {\n+                                         ManagedCursor cursor, TransactionMessageReader transactionMessageReader) {\n         int totalMessages = 0;\n         long totalBytes = 0;\n         int totalChunkedMessages = 0;\n \n+        boolean afterTxnCommitMarker = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f60bf981dc9d09390d798b91bad79f25d4d2423"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9abf625a13f44214f7cccd3c06b629b4f6592a9", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/a9abf625a13f44214f7cccd3c06b629b4f6592a9", "committedDate": "2020-10-29T05:16:32Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a9e1e555dcb8e83330ee3ef087fa405236c9f32", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/3a9e1e555dcb8e83330ee3ef087fa405236c9f32", "committedDate": "2020-10-29T10:13:35Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d6e2ac3bb61e6a74d92d81ebf5fafa660e97ab", "author": {"user": {"login": "gaoran10", "name": "ran"}}, "url": "https://github.com/apache/pulsar/commit/c3d6e2ac3bb61e6a74d92d81ebf5fafa660e97ab", "committedDate": "2020-10-29T14:06:38Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzI5MDM2", "url": "https://github.com/apache/pulsar/pull/8347#pullrequestreview-519729036", "createdAt": "2020-10-29T14:32:34Z", "commit": {"oid": "c3d6e2ac3bb61e6a74d92d81ebf5fafa660e97ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1282, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}