{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDY4NzQx", "number": 7302, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyMTowN1rOEHHSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyMzozN1rOEHHVqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODk0OTM4OnYy", "diffSide": "RIGHT", "path": "site2/docs/security-overview.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyMTowN1rOGmUmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyMTowN1rOGmUmhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjYxMg==", "bodyText": "remove the redundant space before the last period.", "url": "https://github.com/apache/pulsar/pull/7302#discussion_r442836612", "createdAt": "2020-06-19T13:21:07Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/security-overview.md", "diffHunk": "@@ -10,6 +10,10 @@ By default, Pulsar configures no encryption, authentication, or authorization. A\n \n Pulsar supports a pluggable authentication mechanism. And Pulsar clients use this mechanism to authenticate with brokers and proxies. You can also configure Pulsar to support multiple authentication sources.\n \n+The Pulsar broker validates the authentication credentials when a connection is established. After the initial connection is authenticated, the \"principal\" token is stored for authorization though the connection is not re-authenticated. The broker periodically checks the expiration status of every `ServerCnx` object. You can set the `authenticationRefreshCheckSeconds` on the broker to control the frequency to check the expiration status. By default, the `authenticationRefreshCheckSeconds` is set to 60s. When the authentication is expired, the broker forces to re-authenticate the connection. If the re-authentication fails, the broker disconnects the client .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7a4a471c994c4f7d11bf54ce69aa2dd792639a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODk1NzIzOnYy", "diffSide": "RIGHT", "path": "site2/docs/security-overview.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyMzozN1rOGmUrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo1MzowNlrOGmv4sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzkwMQ==", "bodyText": "\"knows\" is not a good verb here, we can use another verb to avoid attributing human qualities to software or hardware.\nFor details, refer to attribute human qualities to software or hardware", "url": "https://github.com/apache/pulsar/pull/7302#discussion_r442837901", "createdAt": "2020-06-19T13:23:37Z", "author": {"login": "Jennifer88huang"}, "path": "site2/docs/security-overview.md", "diffHunk": "@@ -10,6 +10,10 @@ By default, Pulsar configures no encryption, authentication, or authorization. A\n \n Pulsar supports a pluggable authentication mechanism. And Pulsar clients use this mechanism to authenticate with brokers and proxies. You can also configure Pulsar to support multiple authentication sources.\n \n+The Pulsar broker validates the authentication credentials when a connection is established. After the initial connection is authenticated, the \"principal\" token is stored for authorization though the connection is not re-authenticated. The broker periodically checks the expiration status of every `ServerCnx` object. You can set the `authenticationRefreshCheckSeconds` on the broker to control the frequency to check the expiration status. By default, the `authenticationRefreshCheckSeconds` is set to 60s. When the authentication is expired, the broker forces to re-authenticate the connection. If the re-authentication fails, the broker disconnects the client .\n+\n+The broker knows whether a particular client supports authentication refreshing. If a client supports authentication refreshing and the credential is expired, the authentication provider calls the `refreshAuthentication` method to initiate the refreshing process. If a client does not support authentication refreshing and the credential is expired, the broker disconnects the client.\n+\n You had better secure the service components in your Apache Pulsar deployment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7a4a471c994c4f7d11bf54ce69aa2dd792639a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MzYzNQ==", "bodyText": "updated", "url": "https://github.com/apache/pulsar/pull/7302#discussion_r443283635", "createdAt": "2020-06-22T01:53:06Z", "author": {"login": "Huanli-Meng"}, "path": "site2/docs/security-overview.md", "diffHunk": "@@ -10,6 +10,10 @@ By default, Pulsar configures no encryption, authentication, or authorization. A\n \n Pulsar supports a pluggable authentication mechanism. And Pulsar clients use this mechanism to authenticate with brokers and proxies. You can also configure Pulsar to support multiple authentication sources.\n \n+The Pulsar broker validates the authentication credentials when a connection is established. After the initial connection is authenticated, the \"principal\" token is stored for authorization though the connection is not re-authenticated. The broker periodically checks the expiration status of every `ServerCnx` object. You can set the `authenticationRefreshCheckSeconds` on the broker to control the frequency to check the expiration status. By default, the `authenticationRefreshCheckSeconds` is set to 60s. When the authentication is expired, the broker forces to re-authenticate the connection. If the re-authentication fails, the broker disconnects the client .\n+\n+The broker knows whether a particular client supports authentication refreshing. If a client supports authentication refreshing and the credential is expired, the authentication provider calls the `refreshAuthentication` method to initiate the refreshing process. If a client does not support authentication refreshing and the credential is expired, the broker disconnects the client.\n+\n You had better secure the service components in your Apache Pulsar deployment.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzkwMQ=="}, "originalCommit": {"oid": "fa7a4a471c994c4f7d11bf54ce69aa2dd792639a"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2524, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}