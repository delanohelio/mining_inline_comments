{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1ODE5MDIy", "number": 1296, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNjoyMFrOEBZmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjowMTo0NVrOEB0GDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTAzNDcyOnYy", "diffSide": "RIGHT", "path": "sdk/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNjoyMFrOGdOUHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTowMDozMVrOGd13Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjQxMw==", "bodyText": "Can you comment somewhere why is this needed? I am sure we will forget.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433296413", "createdAt": "2020-06-01T15:16:20Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08c3127c8940287008d38840617b2f0af4ec13f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NTYwMw==", "bodyText": "I created a comment in [Simple|Batch]SpanProcessorTest", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433665603", "createdAt": "2020-06-02T07:11:25Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjQxMw=="}, "originalCommit": {"oid": "08c3127c8940287008d38840617b2f0af4ec13f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0MTA3Mw==", "bodyText": "@thisthat I'm guessing we can't create a comment right in this file?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433941073", "createdAt": "2020-06-02T14:56:14Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjQxMw=="}, "originalCommit": {"oid": "08c3127c8940287008d38840617b2f0af4ec13f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0NDMyMw==", "bodyText": "Unfortunately, according to the documentation it says \"containing a single line\" :(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433944323", "createdAt": "2020-06-02T15:00:31Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjQxMw=="}, "originalCommit": {"oid": "08c3127c8940287008d38840617b2f0af4ec13f7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTA0MzY2OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxODozOVrOGdOZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxODozOVrOGdOZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Nzg0Mw==", "bodyText": "Use containsExactly to confirm that only expected values are in the map", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433297843", "createdAt": "2020-06-01T15:18:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.sdk.common.export.ConfigBuilder.NamingConvention;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.ProvideSystemProperty;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link ConfigBuilderTest}. */\n+@RunWith(JUnit4.class)\n+public class ConfigBuilderTest {\n+  @Rule public final ExpectedException thrown = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalize_dot() {\n+    assertThat(NamingConvention.DOT.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"lower_case\")).isEqualTo(\"lower_case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer_cAsE\")).isEqualTo(\"lower_case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_env() {\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower_case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer_cAsE\")).isEqualTo(\"lower.case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_dotMap() {\n+    Map<String, String> map = new HashMap<>();\n+    map.put(\"lower.case\", \"1\");\n+    map.put(\"lower_case\", \"2\");\n+    map.put(\"loWer.cAsE\", \"3\");\n+    map.put(\"loWer_cAsE\", \"4\");\n+    Map<String, String> normalized = NamingConvention.DOT.normalize(map);\n+    assertThat(normalized.size()).isEqualTo(2);\n+    assertThat(normalized.get(\"lower.case\")).isNotEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08c3127c8940287008d38840617b2f0af4ec13f7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzM3NTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjowMTo0NVrOGd46cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjowMTo0NVrOGd46cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5NDM1Mw==", "bodyText": "This is not necessary if you use contains exactly :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1296#discussion_r433994353", "createdAt": "2020-06-02T16:01:45Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java", "diffHunk": "@@ -123,4 +127,174 @@ public void nullValue_DoubleProperty() {\n         ConfigBuilder.getDoubleProperty(\"double\", Collections.<String, String>emptyMap());\n     assertThat(doubleProperty).isNull();\n   }\n+\n+  @Test\n+  public void testNormalize_dot() {\n+    assertThat(NamingConvention.DOT.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"lower_case\")).isEqualTo(\"lower_case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.DOT.normalize(\"loWer_cAsE\")).isEqualTo(\"lower_case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_env() {\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower.case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"lower_case\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer.cAsE\")).isEqualTo(\"lower.case\");\n+    assertThat(NamingConvention.ENV_VAR.normalize(\"loWer_cAsE\")).isEqualTo(\"lower.case\");\n+  }\n+\n+  @Test\n+  public void testNormalize_dotMap() {\n+    Map<String, String> map = new HashMap<>();\n+    map.put(\"lower.case\", \"1\");\n+    map.put(\"lower_case\", \"2\");\n+    map.put(\"loWer.cAsE\", \"3\");\n+    map.put(\"loWer_cAsE\", \"4\");\n+    Map<String, String> normalized = NamingConvention.DOT.normalize(map);\n+    assertThat(normalized.size()).isEqualTo(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9975a07890aa753e4e251a0276ddc6df461f8"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 761, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}