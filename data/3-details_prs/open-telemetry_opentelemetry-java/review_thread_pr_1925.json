{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNTY0NTk5", "number": 1925, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTowMDoxN1rOEzewXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzozMTo1OVrOEz5GdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDE2NzM1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTowMDoxN1rOHqud3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTowMDoxN1rOHqud3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MzU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use `final` everywhere is possible, this ensures that classes cannot be extended when the API does not intend to offer that functionality;\n          \n          \n            \n            * Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514563549", "createdAt": "2020-10-29T21:00:17Z", "author": {"login": "jkwatson"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` everywhere is possible, this ensures that classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f36bb5c13afc73482f473d4a402fec028d44332"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDYzMDc1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowMToxMlrOHqyycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo1MzozMlrOHrQCeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Avoid exposing publicly any class/method/variable that don't need to be public;\n          \n          \n            \n            * By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n          \n          \n            \n            * The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n          \n          \n            \n            * Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;\n          \n          \n            \n            * Avoid exposing publicly any class/method/variable that don't need to be public.\n          \n          \n            \n            * By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n          \n          \n            \n            * The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n          \n          \n            \n            * Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.\n          \n          \n            \n            \n          \n          \n            \n            If you notice any practice being applied in the project consistently that isn't listed here, please consider a pull request to add it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514634352", "createdAt": "2020-10-30T00:01:12Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDY4NA==", "bodyText": "Just some formatting and a note about adding to these when something's found.\nFor final classes do you mean public? I tend to not nit for package-private classes though we could be more strict about that if the consistency helps.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514634684", "createdAt": "2020-10-30T00:02:28Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTE2MQ==", "bodyText": "I agree. It's most important for public classes on the API. Let's not go overboard if we don't have a good reason to.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514635161", "createdAt": "2020-10-30T00:04:14Z", "author": {"login": "jkwatson"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjU0Nw==", "bodyText": "Cool - edited my suggestion to add \"for public\" to final", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514636547", "createdAt": "2020-10-30T00:09:21Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzMDUyNw==", "bodyText": "If you notice any practice being applied in the project that isn't listed here, it would be great to add it\n\nI don't understand this sentence in the context of consistent experience. Also \"would be great to\" is not particularly actionable :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514930527", "createdAt": "2020-10-30T08:12:48Z", "author": {"login": "iNikem"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0MTYwMw==", "bodyText": "I thought there may be things noticed that are consistent but not documented here so wanted to encourage people adding them. Is there a better wording, or should I remove it if it's too unclear?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514941603", "createdAt": "2020-10-30T08:36:21Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjQxMA==", "bodyText": "Encouragement may be good, but I think it should be as a separate sentence then. Not part of consistency section. Because that section does not actually list anything, so I got confused: \"listed here\" - where?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514956410", "createdAt": "2020-10-30T09:05:48Z", "author": {"login": "iNikem"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTk0Nw==", "bodyText": "Ah I see yeah - tried separating it out", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514959947", "createdAt": "2020-10-30T09:12:51Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMjc3Mg==", "bodyText": "I would prefer for all the classes to use final (for consistency and showing clearly the intent), but definitely it is very important for everything that is public.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515112772", "createdAt": "2020-10-30T13:52:39Z", "author": {"login": "bogdandrutu"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzU5Mw==", "bodyText": "Also @jkwatson made that correction for only classes, but methods as well in case the class is not final for whatever reason.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515113593", "createdAt": "2020-10-30T13:53:32Z", "author": {"login": "bogdandrutu"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, "originalCommit": {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODQ4MzcyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzozMTo1OVrOHrZQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzoxMDoyOVrOHrkd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw==", "bodyText": "Doesn't this somehow contradict #1935?\nBut note that this requirement might be annoying to follow in combination with Mockito which cannot mock final classes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515264603", "createdAt": "2020-10-30T17:31:59Z", "author": {"login": "Oberon00"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,15 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public.\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n+* Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726ff76df9117c40ebcfcb325fca0f53d852210c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2OTY3Mg==", "bodyText": "It says to use it for classes, but if there's an interface, obviously that can't be final. I think we should prefer interfaces to public classes in the public API, at least as much as we can.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515269672", "createdAt": "2020-10-30T17:37:17Z", "author": {"login": "jkwatson"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,15 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public.\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n+* Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw=="}, "originalCommit": {"oid": "726ff76df9117c40ebcfcb325fca0f53d852210c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0ODI5MQ==", "bodyText": "Mockito can mock final classes now adays and it's awesome :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515448291", "createdAt": "2020-10-31T03:10:29Z", "author": {"login": "anuraaga"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,15 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public.\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n+* Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw=="}, "originalCommit": {"oid": "726ff76df9117c40ebcfcb325fca0f53d852210c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2051, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}