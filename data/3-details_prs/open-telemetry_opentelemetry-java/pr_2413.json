{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTgzNTAy", "number": 2413, "title": "Change MetricData to expose the Point type that is expected for each data type", "bodyText": "Depends on #2412", "createdAt": "2020-12-28T18:03:04Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413", "merged": true, "mergeCommit": {"oid": "450db6c2b239832072bd37d9e2c0d236850264c5"}, "closed": true, "closedAt": "2021-01-03T16:32:53Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdsDaXagFqTU2MDYxNjAxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdskKb2gBqjQxNjI1OTY0Njc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjE2MDE2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#pullrequestreview-560616016", "createdAt": "2021-01-02T02:08:25Z", "commit": {"oid": "db5bfd4917bb99667d7b104c3d0246ea661e32dc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQwMjowODoyNVrOINUG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQwMjowODoyNVrOINUG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzMTg3MA==", "bodyText": "this could be replaced with a single default:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#discussion_r550831870", "createdAt": "2021-01-02T02:08:25Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/DoubleLastValueAggregation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregation;\n+\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.accumulation.DoubleAccumulation;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.DoubleLastValueAggregator;\n+import io.opentelemetry.sdk.metrics.common.InstrumentDescriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class DoubleLastValueAggregation extends AbstractAggregation<DoubleAccumulation> {\n+  static final DoubleLastValueAggregation INSTANCE =\n+      new DoubleLastValueAggregation(DoubleLastValueAggregator.getInstance());\n+\n+  private DoubleLastValueAggregation(Aggregator<DoubleAccumulation> aggregator) {\n+    super(aggregator);\n+  }\n+\n+  @Override\n+  public DoubleAccumulation merge(DoubleAccumulation a1, DoubleAccumulation a2) {\n+    // TODO: Define the order between accumulation.\n+    return a2;\n+  }\n+\n+  @Override\n+  public MetricData toMetricData(\n+      Resource resource,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      InstrumentDescriptor descriptor,\n+      Map<Labels, DoubleAccumulation> accumulationByLabels,\n+      long startEpochNanos,\n+      long epochNanos) {\n+    List<MetricData.DoublePoint> points =\n+        MetricDataUtils.toDoublePointList(accumulationByLabels, startEpochNanos, epochNanos);\n+\n+    switch (descriptor.getType()) {\n+      case SUM_OBSERVER:\n+        return MetricDataUtils.toDoubleSumMetricData(\n+            resource, instrumentationLibraryInfo, descriptor, points, /* isMonotonic= */ true);\n+      case UP_DOWN_SUM_OBSERVER:\n+        return MetricDataUtils.toDoubleSumMetricData(\n+            resource, instrumentationLibraryInfo, descriptor, points, /* isMonotonic= */ false);\n+      case VALUE_OBSERVER:\n+        return MetricData.createDoubleGauge(\n+            resource,\n+            instrumentationLibraryInfo,\n+            descriptor.getName(),\n+            descriptor.getDescription(),\n+            descriptor.getUnit(),\n+            MetricData.DoubleGaugeData.create(points));\n+      case COUNTER:\n+      case UP_DOWN_COUNTER:\n+      case VALUE_RECORDER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db5bfd4917bb99667d7b104c3d0246ea661e32dc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjE2MTE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#pullrequestreview-560616114", "createdAt": "2021-01-02T02:12:27Z", "commit": {"oid": "db5bfd4917bb99667d7b104c3d0246ea661e32dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjE4MjY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#pullrequestreview-560618266", "createdAt": "2021-01-02T03:23:41Z", "commit": {"oid": "db5bfd4917bb99667d7b104c3d0246ea661e32dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204c90d5479cc9f2ca23464954e8060b9ef69056", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204c90d5479cc9f2ca23464954e8060b9ef69056", "committedDate": "2021-01-03T16:17:40Z", "message": "Change MetricData to expose the Point type that is expected for each data type\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db5bfd4917bb99667d7b104c3d0246ea661e32dc", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db5bfd4917bb99667d7b104c3d0246ea661e32dc", "committedDate": "2020-12-28T18:02:22Z", "message": "Change MetricData to expose the Point type that is expected for each data type\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "204c90d5479cc9f2ca23464954e8060b9ef69056", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204c90d5479cc9f2ca23464954e8060b9ef69056", "committedDate": "2021-01-03T16:17:40Z", "message": "Change MetricData to expose the Point type that is expected for each data type\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3569, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}