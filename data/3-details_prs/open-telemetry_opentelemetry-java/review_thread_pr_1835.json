{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDM4ODI2", "number": 1835, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0MjozOFrOEvWhOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0NDoxMlrOEvWkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDg3NDgzOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0MjozOFrOHkSQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0MjozOFrOHkSQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTkxOA==", "bodyText": "This should probably fixed -- either remove the check and let an NPE occur \"naturally\" or use Objects.requireNonNull. Or we could change all propagators to do something like here (best with logging though).\nIn any case, this should be a follow-up.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1835#discussion_r507809918", "createdAt": "2020-10-19T14:42:38Z", "author": {"login": "Oberon00"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -64,8 +65,9 @@ public static OtTracerPropagator getInstance() {\n   }\n \n   @Override\n-  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+  public <C> Context extract(Context context, @Nullable C carrier, Getter<C> getter) {\n     if (context == null || getter == null) {\n+      // TODO Other propagators throw exceptions here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0628dae1c17fede6c4409917803727144b70051"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDg4MjQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0NDoxMlrOHkSVPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMTowOVrOHkTLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMTEzNA==", "bodyText": "This test here demonstrates one case where a null carrier might be sensibly used.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1835#discussion_r507811134", "createdAt": "2020-10-19T14:44:12Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "diffHunk": "@@ -166,6 +166,18 @@ void extract_SampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_NullCarrier() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(TRACE_PARENT, TRACEPARENT_HEADER_SAMPLED);\n+    assertThat(\n+            getSpanContext(\n+                httpTraceContext.extract(Context.current(), null, (c, k) -> carrier.get(k))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0628dae1c17fede6c4409917803727144b70051"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNDkzMQ==", "bodyText": "*sensibly is relative here but at least it demonstrates how checking for null could be surprising", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1835#discussion_r507824931", "createdAt": "2020-10-19T15:01:09Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "diffHunk": "@@ -166,6 +166,18 @@ void extract_SampledContext() {\n                 TRACE_ID_BASE16, SPAN_ID_BASE16, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n   }\n \n+  @Test\n+  void extract_NullCarrier() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(TRACE_PARENT, TRACEPARENT_HEADER_SAMPLED);\n+    assertThat(\n+            getSpanContext(\n+                httpTraceContext.extract(Context.current(), null, (c, k) -> carrier.get(k))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMTEzNA=="}, "originalCommit": {"oid": "f0628dae1c17fede6c4409917803727144b70051"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1974, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}