{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTM1NTMz", "number": 1631, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozMDoyOFrOEiMvoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0NDo1NVrOEjjWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mjk1ODQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozMDoyOFrOHP8SUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoyMzozOFrOHRc93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw==", "bodyText": "Should this change to LongKey, long value?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486478417", "createdAt": "2020-09-10T16:30:28Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMzM0Mg==", "bodyText": "My thought was, since these are already type-safe, to keep the easy option in the API, for cases where people don't want to directly use the new keys. The method that takes the generic key should cover the particular, and would end up being the same method signature as this if we change the first parameter to LongKey.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486513342", "createdAt": "2020-09-10T17:28:32Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NDcyOQ==", "bodyText": "Yeah I don't think we need to change these methods to use the keys. We could consider removing these methods - I'm on the fence on how useful these are for users. Keys will always have a significant performance benefit compared to creating a wrapper key every time this is invoked, so removing them reduces the chances of a user not realizing that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486844729", "createdAt": "2020-09-11T08:04:12Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5OTU1Nw==", "bodyText": "At the very least, I was thinking we should add some strongly worded language to the javadoc about preferring to use the method that takes the Key.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487099557", "createdAt": "2020-09-11T14:52:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MjQyOQ==", "bodyText": "added some javadoc to the relevant methods.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488062429", "createdAt": "2020-09-14T16:23:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMwNDczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1Mzo1OFrOHQSUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo0OTowMFrOHQp-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n          \n          \n            \n             * This interface provides a handle for setting the values of {@link Attributes}. The type of a value", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486839388", "createdAt": "2020-09-11T07:53:58Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyNzExMg==", "bodyText": "hmm. I think the original reads a little better, personally.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487227112", "createdAt": "2020-09-11T18:49:00Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTM4OA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMwNzQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NDo0MlrOHQSV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo1NToyN1rOHQtmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              String get();\n          \n          \n            \n              String getName();\n          \n      \n    \n    \n  \n\nNot strong suggestion but I feel lack of symmetry between this get and getType", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486839794", "createdAt": "2020-09-11T07:54:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n+ * that can be set with an implementation of this key is denoted by the type parameter.\n+ *\n+ * @param <T> The type of value that can be set with the key.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public interface AttributeKey<T> extends Comparable<AttributeKey> {\n+  /** Returns the underlying String representation of the key. */\n+  String get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Mjk2MA==", "bodyText": "getKey() seems better than name to me. And, I agree with the sentiment, for sure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487092960", "createdAt": "2020-09-11T14:42:52Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n+ * that can be set with an implementation of this key is denoted by the type parameter.\n+ *\n+ * @param <T> The type of value that can be set with the key.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public interface AttributeKey<T> extends Comparable<AttributeKey> {\n+  /** Returns the underlying String representation of the key. */\n+  String get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTc5NA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NjM5MQ==", "bodyText": "done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487286391", "createdAt": "2020-09-11T20:55:27Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n+ * that can be set with an implementation of this key is denoted by the type parameter.\n+ *\n+ * @param <T> The type of value that can be set with the key.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public interface AttributeKey<T> extends Comparable<AttributeKey> {\n+  /** Returns the underlying String representation of the key. */\n+  String get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTc5NA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMxMDExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NToyNFrOHQSXiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NToyNFrOHQSXiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDIwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n          \n          \n            \n            abstract class AttributeKeyImpl<T> implements AttributeKey<T> {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840200", "createdAt": "2020-09-11T07:55:24Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMxMTk1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NTo1MFrOHQSYlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToyNzozNlrOHQrM_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDQ2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n          \n          \n            \n                return key;\n          \n      \n    \n    \n  \n\nI think just the key is a better toString for keys", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840469", "createdAt": "2020-09-11T07:55:50Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzcwNQ==", "bodyText": "I'm on the fence. It will certainly read better, but I wonder if it could be misleading in tests if the failure happens when you're trying to compare to a raw String, and the toStrings would look identical.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487097705", "createdAt": "2020-09-11T14:49:47Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDQ2OQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0OTI5Ng==", "bodyText": "Admittedly I'm biased because instrumentation tests are groovy and would be able to use the key itself in assertions instead of calling a method. This is not a strong enough reason to pick one or another though so ok with either \ud83d\ude03", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487149296", "createdAt": "2020-09-11T16:15:46Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDQ2OQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0NzEwMQ==", "bodyText": "wait...spock uses the toString to do assertions??? That sounds like a terrible idea.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487247101", "createdAt": "2020-09-11T19:27:36Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDQ2OQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMxNDc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1Njo0M1rOHQSaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0OToyNVrOHQtdEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDkyMw==", "bodyText": "key should never be null I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840923", "createdAt": "2020-09-11T07:56:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NjQzMw==", "bodyText": "This is generated code; I'd rather not mess with it if I don't have to.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487266433", "createdAt": "2020-09-11T20:09:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDkyMw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Njk2Mg==", "bodyText": "Maybe I should switch this to autovalue....", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487266962", "createdAt": "2020-09-11T20:10:53Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDkyMw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4Mzk4Nw==", "bodyText": "We currently do allow null keys from the API (in the effort to not throw errors when people mis-use the API). So, this check is important. But, even so, Autovalue allows removing all the hand-built implementations, as long as we provide a custom equals/hashcode that ignores the type and only considers the key.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487283987", "createdAt": "2020-09-11T20:49:25Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDkyMw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMxODE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NzozN1rOHQScUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo1NjoxOFrOHQtnwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ==", "bodyText": "I guess the class may be public for these guys but I think AttributeKeys is a better home than the impl class", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486841425", "createdAt": "2020-09-11T07:57:37Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTg0NA==", "bodyText": "Also I think we can return AttributeKey<String> etc to be more generic and keep these types private as well", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486841844", "createdAt": "2020-09-11T07:58:25Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MTc4MQ==", "bodyText": "I'll try this. I thought I had run into some issue with that, but I can't imagine what it was. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487171781", "createdAt": "2020-09-11T16:57:46Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NjcyMg==", "bodyText": "cool. I moved all of these to a new AttributeKeys class and made the methods return the interface types with parameter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487286722", "createdAt": "2020-09-11T20:56:18Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTM0Njk5OnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODowNjo1MFrOHQSudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo1OTozM1rOHQmqmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA==", "bodyText": "IIRC, the suggestion for a consumer interface with method per type was to avoid the somewhat lost type-safety of this pattern :) But I don't think it's that bad anyways", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486846070", "createdAt": "2020-09-11T08:06:50Z", "author": {"login": "anuraaga"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwODgyOQ==", "bodyText": "A (not very pretty) alternative is to have AttributeKey.getValue(value) to automatically cast it (and report an error otherwise). Not sure it's a required addition though.\nOtherwise, the type safety we lose is not bad.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487008829", "createdAt": "2020-09-11T12:23:52Z", "author": {"login": "carlosalberto"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzEwOQ==", "bodyText": "We can also add a secondary consumer interface that has the 8 methods on it. I originally had that when I was working on this, but discovered that it was much more cumbersome to use in basically every case inside the SDK itself.\n@carlosalberto I'm not sure how we could do the casting on the List types, though, since generics are all erased. The best we could do was verify that it was a List, but not what kind, unfortunately.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487097109", "createdAt": "2020-09-11T14:48:51Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1Mjc1Mw==", "bodyText": "Did you find it cumbersome in the exporters? I'm surprised since I think I see the 8-way switch coming up a few times and figure it'd be similar if separate methods. But might be missing something, definitely agree to optimize the API for the export case since that's almost all of the iterating of attributes in practice.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487152753", "createdAt": "2020-09-11T16:22:14Z", "author": {"login": "anuraaga"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3Mjc2Mg==", "bodyText": "It was super awkward in the exporters that convert to protobuf representations. There might be a better way to approach it, but I wanted to at least reduce the scope of the PR as much as I could. ;) Given that this export is SDK internal functionality, I think we can iterate on it at little more easily than the instrumentation API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487172762", "createdAt": "2020-09-11T16:59:33Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODYwMjMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1NTo0NVrOHQyAAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0Mzo0MFrOHRbUFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODQ2NQ==", "bodyText": "Also need to check key.getKey is null?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487358465", "createdAt": "2020-09-12T02:55:45Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -169,20 +197,16 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    /**\n-     * Sets a bare {@link AttributeValue} into this.\n-     *\n-     * @return this Builder\n-     */\n-    public Builder setAttribute(String key, AttributeValue value) {\n-      if (key == null || key.length() == 0) {\n+    /** Sets a {@link AttributeKey} with associated value into this. */\n+    public <T> Builder setAttribute(AttributeKey<T> key, T value) {\n+      if (key == null || key.getKey().length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyNDUwMQ==", "bodyText": "yes, good catch. obviously, we need a unit test for it, as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487424501", "createdAt": "2020-09-12T16:16:22Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -169,20 +197,16 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    /**\n-     * Sets a bare {@link AttributeValue} into this.\n-     *\n-     * @return this Builder\n-     */\n-    public Builder setAttribute(String key, AttributeValue value) {\n-      if (key == null || key.length() == 0) {\n+    /** Sets a {@link AttributeKey} with associated value into this. */\n+    public <T> Builder setAttribute(AttributeKey<T> key, T value) {\n+      if (key == null || key.getKey().length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODQ2NQ=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTM1MQ==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488035351", "createdAt": "2020-09-14T15:43:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -169,20 +197,16 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    /**\n-     * Sets a bare {@link AttributeValue} into this.\n-     *\n-     * @return this Builder\n-     */\n-    public Builder setAttribute(String key, AttributeValue value) {\n-      if (key == null || key.length() == 0) {\n+    /** Sets a {@link AttributeKey} with associated value into this. */\n+    public <T> Builder setAttribute(AttributeKey<T> key, T value) {\n+      if (key == null || key.getKey().length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODQ2NQ=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODYwNTk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributesKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMzowMDo1NVrOHQyB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjoxNToyM1rOHQ2BqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODkzMg==", "bodyText": "Just had an idea which I think could have been possible with separate key impls but don't think so with AutoValue version. If the array keys implemented a marker interface like AttributeArrayKey<T> then we could also provide setAttribute(AttributeArrayKey<T>, T...). Array keys aren't so common though and we could rework later too so no big deal now though.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487358932", "createdAt": "2020-09-12T03:00:55Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributesKeys.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+/**\n+ * Creation methods for {@link AttributeKey} implementations.\n+ *\n+ * @see Attributes\n+ */\n+public class AttributesKeys {\n+  private AttributesKeys() {}\n+\n+  /** Create a new AttributeKey for String valued attributes. */\n+  public static AttributeKey<String> stringKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING);\n+  }\n+\n+  /** Create a new AttributeKey for Boolean valued attributes. */\n+  public static AttributeKey<Boolean> booleanKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.BOOLEAN);\n+  }\n+\n+  /** Create a new AttributeKey for Long valued attributes. */\n+  public static AttributeKey<Long> longKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.LONG);\n+  }\n+\n+  /** Create a new AttributeKey for Double valued attributes. */\n+  public static AttributeKey<Double> doubleKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.DOUBLE);\n+  }\n+\n+  /** Create a new AttributeKey for List&lt;String&gt; valued attributes. */\n+  public static AttributeKey<List<String>> stringArrayKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyNDQyNA==", "bodyText": "yeah, I don't think we have any semantic conventions for array attributes, so I'm much less worried about them. Let's punt on this for now, and revisit if array attributes really become important.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487424424", "createdAt": "2020-09-12T16:15:23Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributesKeys.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+/**\n+ * Creation methods for {@link AttributeKey} implementations.\n+ *\n+ * @see Attributes\n+ */\n+public class AttributesKeys {\n+  private AttributesKeys() {}\n+\n+  /** Create a new AttributeKey for String valued attributes. */\n+  public static AttributeKey<String> stringKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING);\n+  }\n+\n+  /** Create a new AttributeKey for Boolean valued attributes. */\n+  public static AttributeKey<Boolean> booleanKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.BOOLEAN);\n+  }\n+\n+  /** Create a new AttributeKey for Long valued attributes. */\n+  public static AttributeKey<Long> longKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.LONG);\n+  }\n+\n+  /** Create a new AttributeKey for Double valued attributes. */\n+  public static AttributeKey<Double> doubleKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.DOUBLE);\n+  }\n+\n+  /** Create a new AttributeKey for List&lt;String&gt; valued attributes. */\n+  public static AttributeKey<List<String>> stringArrayKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODkzMg=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDA1ODQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMzo1MjozNlrOHQ8nLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0NjowM1rOHRbbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjMzNA==", "bodyText": "Why? Can there be attributes with the same key but different types?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487532334", "createdAt": "2020-09-13T13:52:36Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5OTI1NQ==", "bodyText": "Well... what would that mean, exactly? Certainly with the previous implementation, you get only one value per key. Having multiple values per string-key would be very odd to have to deal with in an Exporter, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487999255", "createdAt": "2020-09-14T14:58:09Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjMzNA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNjQ4Mg==", "bodyText": "My though was that if there is NO two attributes with the same key but different type, why it is important to include only key, but not type, into equals/hashcode/compareTo?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488026482", "createdAt": "2020-09-14T15:31:02Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjMzNA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNzE1MA==", "bodyText": "Something has to make the replacement of one keyed-value with another (of a different type). This is the implementation that makes that happen. The de-duping relies on the equals/hashcode not including the type.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488037150", "createdAt": "2020-09-14T15:46:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjMzNA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDA2MDk1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMzo1NTowOVrOHQ8ocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTozMjozNVrOHRa12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjY1OA==", "bodyText": "what if key==null?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487532658", "createdAt": "2020-09-13T13:55:09Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -125,6 +146,13 @@ public static Attributes of(\n   }\n \n   private static Attributes sortAndFilterToAttributes(Object... data) {\n+    // null out any empty keys\n+    for (int i = 0; i < data.length; i += 2) {\n+      AttributeKey<?> key = (AttributeKey<?>) data[i];\n+      if (key != null && (key.getKey() == null || \"\".equals(key.getKey()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyMjc0MA==", "bodyText": "If the key is already null, we don't need to null it out again, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488022740", "createdAt": "2020-09-14T15:27:48Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -125,6 +146,13 @@ public static Attributes of(\n   }\n \n   private static Attributes sortAndFilterToAttributes(Object... data) {\n+    // null out any empty keys\n+    for (int i = 0; i < data.length; i += 2) {\n+      AttributeKey<?> key = (AttributeKey<?>) data[i];\n+      if (key != null && (key.getKey() == null || \"\".equals(key.getKey()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjY1OA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNzYwOA==", "bodyText": "A :) I see :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488027608", "createdAt": "2020-09-14T15:32:35Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -125,6 +146,13 @@ public static Attributes of(\n   }\n \n   private static Attributes sortAndFilterToAttributes(Object... data) {\n+    // null out any empty keys\n+    for (int i = 0; i < data.length; i += 2) {\n+      AttributeKey<?> key = (AttributeKey<?>) data[i];\n+      if (key != null && (key.getKey() == null || \"\".equals(key.getKey()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjY1OA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTM3NDk3OnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0NDoyNVrOHRHrXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0Mzo1M1rOHRbUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzYzMA==", "bodyText": "I would still keep the @since", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487713630", "createdAt": "2020-09-14T07:44:25Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -16,10 +16,7 @@\n \n package io.opentelemetry.common;\n \n-/**\n- * Convenience interface for consuming {@link ReadableAttributes}.\n- *\n- * @since 0.9.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwMTIxNQ==", "bodyText": "oh, good call. I didn't mean to delete that. will fix.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488001215", "createdAt": "2020-09-14T15:00:34Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -16,10 +16,7 @@\n \n package io.opentelemetry.common;\n \n-/**\n- * Convenience interface for consuming {@link ReadableAttributes}.\n- *\n- * @since 0.9.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzYzMA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTUyNw==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488035527", "createdAt": "2020-09-14T15:43:53Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -16,10 +16,7 @@\n \n package io.opentelemetry.common;\n \n-/**\n- * Convenience interface for consuming {@link ReadableAttributes}.\n- *\n- * @since 0.9.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzYzMA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjA0MjQxOnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozOToyNVrOHRN63A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1ODowMlrOHRgfPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNTkwMA==", "bodyText": "I would prefer to sanitize here rather than in the caller methods. This way this class is future proof.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487815900", "createdAt": "2020-09-14T10:39:25Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -98,14 +92,24 @@ private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n     quickSort(data, counter, rightIndex);\n   }\n \n+  private static <K extends Comparable<K>> int compareToNullSafe(K key, K pivotKey) {\n+    if (key == null) {\n+      return pivotKey == null ? 0 : -1;\n+    }\n+    if (pivotKey == null) {\n+      return 1;\n+    }\n+    return key.compareTo(pivotKey);\n+  }\n+\n   private static List<Object> dedupe(Object[] data) {\n     List<Object> result = new ArrayList<>(data.length);\n     Object previousKey = null;\n \n     for (int i = 0; i < data.length; i += 2) {\n       Object key = data[i];\n       Object value = data[i + 1];\n-      if (key == null || \"\".equals(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5ODQxMg==", "bodyText": "The issue is that the keys are no longer always strings, so I don't know how to do this check. Ideas welcome!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487998412", "createdAt": "2020-09-14T14:57:02Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -98,14 +92,24 @@ private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n     quickSort(data, counter, rightIndex);\n   }\n \n+  private static <K extends Comparable<K>> int compareToNullSafe(K key, K pivotKey) {\n+    if (key == null) {\n+      return pivotKey == null ? 0 : -1;\n+    }\n+    if (pivotKey == null) {\n+      return 1;\n+    }\n+    return key.compareTo(pivotKey);\n+  }\n+\n   private static List<Object> dedupe(Object[] data) {\n     List<Object> result = new ArrayList<>(data.length);\n     Object previousKey = null;\n \n     for (int i = 0; i < data.length; i += 2) {\n       Object key = data[i];\n       Object value = data[i + 1];\n-      if (key == null || \"\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNTkwMA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMzUwOA==", "bodyText": "You're right, I didn't realize that! \ud83e\udd14 I have no idea how at the moment. I  would then add some lines in the class Javadoc saying that sanitization should be done before calling sortAndFilter.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488113508", "createdAt": "2020-09-14T17:46:32Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -98,14 +92,24 @@ private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n     quickSort(data, counter, rightIndex);\n   }\n \n+  private static <K extends Comparable<K>> int compareToNullSafe(K key, K pivotKey) {\n+    if (key == null) {\n+      return pivotKey == null ? 0 : -1;\n+    }\n+    if (pivotKey == null) {\n+      return 1;\n+    }\n+    return key.compareTo(pivotKey);\n+  }\n+\n   private static List<Object> dedupe(Object[] data) {\n     List<Object> result = new ArrayList<>(data.length);\n     Object previousKey = null;\n \n     for (int i = 0; i < data.length; i += 2) {\n       Object key = data[i];\n       Object value = data[i + 1];\n-      if (key == null || \"\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNTkwMA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDEyNQ==", "bodyText": "I added some clarification to the class javadoc. Thanks for the suggestion!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488120125", "createdAt": "2020-09-14T17:58:02Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -98,14 +92,24 @@ private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n     quickSort(data, counter, rightIndex);\n   }\n \n+  private static <K extends Comparable<K>> int compareToNullSafe(K key, K pivotKey) {\n+    if (key == null) {\n+      return pivotKey == null ? 0 : -1;\n+    }\n+    if (pivotKey == null) {\n+      return 1;\n+    }\n+    return key.compareTo(pivotKey);\n+  }\n+\n   private static List<Object> dedupe(Object[] data) {\n     List<Object> result = new ArrayList<>(data.length);\n     Object previousKey = null;\n \n     for (int i = 0; i < data.length; i += 2) {\n       Object key = data[i];\n       Object value = data[i + 1];\n-      if (key == null || \"\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNTkwMA=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjI2MzAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0NjozMlrOHRP-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo1OTo1NlrOHRZM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTU4Mg==", "bodyText": "I don't quite follow, why so much extends clauses were eliminated?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487849582", "createdAt": "2020-09-14T11:46:32Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -21,6 +21,15 @@\n  *\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n-public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n-  AttributeValue get(String key);\n+public interface ReadableAttributes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwMDczMQ==", "bodyText": "They weren't adding any value, and making it much more complicated to deal with the generic keys. It ended up being much simpler and easier to understand without the extra interface that wasn't a meaningful one to the end-consumer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488000731", "createdAt": "2020-09-14T14:59:56Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -21,6 +21,15 @@\n  *\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n-public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n-  AttributeValue get(String key);\n+public interface ReadableAttributes {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTU4Mg=="}, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzE0MzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0Mzo0NlrOHR9xlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToyODowNlrOHUR3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5OTk1Nw==", "bodyText": "Use https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n          \n          \n            \n                return Objects.equals(getKey(), that.getKey());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488599957", "createdAt": "2020-09-15T11:43:46Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczNTY3Ng==", "bodyText": "We can't use that in the API, due to java 7/android", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488735676", "createdAt": "2020-09-15T14:56:58Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5OTk1Nw=="}, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyNjQyNA==", "bodyText": "This API is definititely in Java 7, check the link I posted \ud83d\ude03", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r491026424", "createdAt": "2020-09-18T15:28:06Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5OTk1Nw=="}, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzE0ODIwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0NDo1NVrOHR90NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxMDoyNVrOHSGs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMDYyOQ==", "bodyText": "Why no null check here? Use Objects.compare?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488600629", "createdAt": "2020-09-15T11:44:55Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n+  }\n+\n+  @Override\n+  public final int hashCode() {\n+    return getKey() != null ? getKey().hashCode() : 0;\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return getKey().compareTo(o.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxNjczMw==", "bodyText": "For some reason I thought we couldn't use that with java 7/android. Let me take a look.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488716733", "createdAt": "2020-09-15T14:32:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n+  }\n+\n+  @Override\n+  public final int hashCode() {\n+    return getKey() != null ? getKey().hashCode() : 0;\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return getKey().compareTo(o.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMDYyOQ=="}, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0NjE5Mw==", "bodyText": "updated to be null-safe", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488746193", "createdAt": "2020-09-15T15:10:25Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n+  }\n+\n+  @Override\n+  public final int hashCode() {\n+    return getKey() != null ? getKey().hashCode() : 0;\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return getKey().compareTo(o.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMDYyOQ=="}, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1421, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}