{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTQ5MTUx", "number": 913, "title": "Block Disruptor until flush is performed", "bodyText": "This fixes #906", "createdAt": "2020-02-24T11:49:53Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913", "merged": true, "mergeCommit": {"oid": "c4537e0d67f54d25c584264a8b2950dcabd4101b"}, "closed": true, "closedAt": "2020-02-26T17:01:40Z", "author": {"login": "thisthat"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHb-cwAH2gAyMzc4OTQ5MTUxOmI1YTg1Nzc4ZThjY2UyMzU5ZGRiMDI0ZjAxZDVlYWJiMzhlY2Y5YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIJyPhAFqTM2NTA3NzIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5a85778e8cce2359ddb024f01d5eabb38ecf9aa", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5a85778e8cce2359ddb024f01d5eabb38ecf9aa", "committedDate": "2020-02-24T11:39:12Z", "message": "Block disruptor until flush is performed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b510f24c2d4565130f45bfd0bd10665463f013", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/91b510f24c2d4565130f45bfd0bd10665463f013", "committedDate": "2020-02-24T11:45:48Z", "message": "Fix format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/19c3375296dcf00ccebf170e8d7997e8264a2783", "committedDate": "2020-02-24T11:49:17Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzM0ODI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#pullrequestreview-363334826", "createdAt": "2020-02-24T11:51:22Z", "commit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTo1MToyMlrOFteA1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTo1MToyMlrOFteA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMTk3NQ==", "bodyText": "@bogdandrutu is this correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383221975", "createdAt": "2020-02-24T11:51:22Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -190,11 +247,13 @@ public void onEvent(DisruptorEvent event, long sequence, boolean endOfBatch) {\n             spanProcessor.onEnd(readableSpan);\n             break;\n           case ON_SHUTDOWN:\n+            spanProcessor.forceFlush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTkwMTAy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#pullrequestreview-363590102", "createdAt": "2020-02-24T18:04:39Z", "commit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowNDozOVrOFtqZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MDoxN1rOFtretA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDk5NQ==", "bodyText": "I would change the order EventType, ReadableSpan, CDL", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383424995", "createdAt": "2020-02-24T18:04:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -51,6 +52,20 @@ public void translateTo(\n               event.setEntry(arg0, arg1);\n             }\n           };\n+  private static final EventTranslatorThreeArg<\n+          DisruptorEvent, ReadableSpan, EventType, CountDownLatch>\n+      TRANSLATOR_THREE_ARG =\n+          new EventTranslatorThreeArg<DisruptorEvent, ReadableSpan, EventType, CountDownLatch>() {\n+            @Override\n+            public void translateTo(\n+                DisruptorEvent event,\n+                long sequence,\n+                ReadableSpan arg0,\n+                EventType arg1,\n+                CountDownLatch arg2) {\n+              event.setEntry(arg0, arg1, arg2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNTgzNg==", "bodyText": "1 - represents the number of consumer threads, maybe make it a constant?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383425836", "createdAt": "2020-02-24T18:06:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -138,19 +170,38 @@ void forceFlush() {\n       if (isShutdown) {\n         return;\n       }\n-      enqueue(null, EventType.ON_FORCE_FLUSH);\n+      CountDownLatch flushLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTIwNQ==", "bodyText": "Can shutdown be implemented as?\n\nSet shutdown variable;\nFlush and wait;\nCall shutdown for the SpanProcessor next;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383441205", "createdAt": "2020-02-24T18:37:30Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -138,19 +170,38 @@ void forceFlush() {\n       if (isShutdown) {\n         return;\n       }\n-      enqueue(null, EventType.ON_FORCE_FLUSH);\n+      CountDownLatch flushLatch = new CountDownLatch(1);\n+      enqueue(null, EventType.ON_FORCE_FLUSH, flushLatch);\n+      try {\n+        flushLatch.await();\n+      } catch (InterruptedException e) {\n+        // Preserve the interruption.\n+        Thread.currentThread().interrupt();\n+        logger.warning(\"Thread interrupted, shutdown may not finished.\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MjYxMg==", "bodyText": "Why do we have duplicate enqueue method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383442612", "createdAt": "2020-02-24T18:40:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -109,6 +124,23 @@ void enqueue(ReadableSpan readableSpan, EventType eventType) {\n     }\n   }\n \n+  // Enqueues an event on the {@link DisruptorEventQueue}.\n+  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }\n+      return;\n+    }\n+\n+    if (blocking) {\n+      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, readableSpan, eventType, flushLatch);\n+    } else {\n+      // TODO: Record metrics if element not added.\n+      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, readableSpan, eventType, flushLatch);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763fc82978f434e150dd929b819e0b82c6c29e7b", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/763fc82978f434e150dd929b819e0b82c6c29e7b", "committedDate": "2020-02-25T10:41:43Z", "message": "Single enqueue method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/549760d411f56879b6b53fb09cf4ebeacbb7e0e2", "committedDate": "2020-02-25T10:58:31Z", "message": "General cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDE5NDk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#pullrequestreview-364419494", "createdAt": "2020-02-25T20:18:25Z", "commit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxODoyNVrOFuTzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxOToyMlrOFuT1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMzM2OA==", "bodyText": "Now that we pass a CDL for flush I think we should do the same for the shutdown one and not have a special case for that one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384103368", "createdAt": "2020-02-25T20:18:25Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -92,8 +99,12 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n   void enqueue(ReadableSpan readableSpan, EventType eventType) {\n+    enqueue(readableSpan, eventType, null);\n+  }\n+\n+  // Enqueues an event on the {@link DisruptorEventQueue}.\n+  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMzgxNw==", "bodyText": "s/FLUSH_WAITER_COUNTER/NUM_CONSUMERS?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384103817", "createdAt": "2020-02-25T20:19:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -67,6 +72,8 @@ public DisruptorEvent newInstance() {\n   private volatile boolean isShutdown = false;\n   private final boolean blocking;\n \n+  private static final byte FLUSH_WAITER_COUNTER = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b735e2ff3d0f8749fd08b84c5427c7305f16c362", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b735e2ff3d0f8749fd08b84c5427c7305f16c362", "committedDate": "2020-02-26T06:53:05Z", "message": "Refactor shutdown/forceFlush"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDc3MjA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#pullrequestreview-365077205", "createdAt": "2020-02-26T17:01:30Z", "commit": {"oid": "b735e2ff3d0f8749fd08b84c5427c7305f16c362"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3085, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}