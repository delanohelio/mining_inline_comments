{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NTE1NTE1", "number": 2150, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMjo1N1rOE-vHMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxMFrOE-vHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE5MDU4OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezSpanBuckets.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMjo1N1rOH8DUug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMjo1N1rOH8DUug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMTA2Ng==", "bodyText": "this can now be moved to the declaration, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2150#discussion_r532731066", "createdAt": "2020-11-30T16:32:57Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezSpanBuckets.java", "diffHunk": "@@ -5,33 +5,30 @@\n \n package io.opentelemetry.sdk.extension.zpages;\n \n-import com.google.common.collect.ImmutableMap;\n import io.opentelemetry.api.trace.StatusCode;\n import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n import java.util.EnumMap;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n final class TracezSpanBuckets {\n-  private final ImmutableMap<LatencyBoundary, SpanBucket> latencyBuckets;\n-  private final ImmutableMap<StatusCode, SpanBucket> errorBuckets;\n+  private final Map<LatencyBoundary, SpanBucket> latencyBuckets;\n+  private final Map<StatusCode, SpanBucket> errorBuckets;\n \n   TracezSpanBuckets() {\n-    ImmutableMap.Builder<LatencyBoundary, SpanBucket> latencyBucketsBuilder =\n-        ImmutableMap.builder();\n+    latencyBuckets = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bea2530592df4a2d065e74f2bad7fd13df6b1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE5MTQzOnYy", "diffSide": "RIGHT", "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezSpanBuckets.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxMFrOH8DVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMzoxMFrOH8DVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMTIxMQ==", "bodyText": "would also prefer this to be moved to the declaration", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2150#discussion_r532731211", "createdAt": "2020-11-30T16:33:10Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezSpanBuckets.java", "diffHunk": "@@ -5,33 +5,30 @@\n \n package io.opentelemetry.sdk.extension.zpages;\n \n-import com.google.common.collect.ImmutableMap;\n import io.opentelemetry.api.trace.StatusCode;\n import io.opentelemetry.sdk.trace.ReadableSpan;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n import java.util.EnumMap;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n final class TracezSpanBuckets {\n-  private final ImmutableMap<LatencyBoundary, SpanBucket> latencyBuckets;\n-  private final ImmutableMap<StatusCode, SpanBucket> errorBuckets;\n+  private final Map<LatencyBoundary, SpanBucket> latencyBuckets;\n+  private final Map<StatusCode, SpanBucket> errorBuckets;\n \n   TracezSpanBuckets() {\n-    ImmutableMap.Builder<LatencyBoundary, SpanBucket> latencyBucketsBuilder =\n-        ImmutableMap.builder();\n+    latencyBuckets = new HashMap<>();\n     for (LatencyBoundary bucket : LatencyBoundary.values()) {\n-      latencyBucketsBuilder.put(bucket, new SpanBucket(/* isLatencyBucket= */ true));\n+      latencyBuckets.put(bucket, new SpanBucket(/* isLatencyBucket= */ true));\n     }\n-    latencyBuckets = latencyBucketsBuilder.build();\n-    ImmutableMap.Builder<StatusCode, SpanBucket> errorBucketsBuilder = ImmutableMap.builder();\n+    errorBuckets = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bea2530592df4a2d065e74f2bad7fd13df6b1"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1802, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}