{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzYyODEw", "number": 1428, "title": "Makes Export methods async", "bodyText": "This PR recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We, therefore, see that these method return types are represented using a CompletableResultCode type that can be completed asynchronously for either failure or success scenarios. In either instance, the export code can now perform actions on failure and success. In the case of failure, which can also constitute a cancellation by an upstream component (such as a batch span processor), an exporter can now interrupt its threads or perform any other action it needs to. This approach of handling failure is also safer than what now exists, which is for an upstream component to interrupt a thread.\nThe PR approach is focused on changing the signatures within the export methods now, while we can still introduce API-breaking changes. The implementation of the existing exporters mostly assumes a blocking interaction as before. The remaining internal exporter behaviour can be modified in the future if required and without affecting the API. One exception to this is the OtlpGrpcMetricExporter where @anuraaga kindly updated it to become async.\nFor further background information on this change, see ##1422, which also refers to spec clarification via open-telemetry/opentelemetry-specification#707.", "createdAt": "2020-07-17T04:35:17Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428", "merged": true, "mergeCommit": {"oid": "d6b53e60f4b7251d7a5845f3e3f9b9e57a5dc8dc"}, "closed": true, "closedAt": "2020-08-18T18:45:27Z", "author": {"login": "huntc"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1sSq2gFqTQ1MDM2Nzg0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdALjpyAFqTQ2OTcyOTI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzY3ODQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-450367841", "createdAt": "2020-07-17T04:40:16Z", "commit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MDoxNlrOGzFHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MDoxNlrOGzFHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNDI5OQ==", "bodyText": "This felt like an ok dependency to introduce on the exporters given its usage elsewhere. While we don't use Guava in the public signatures of anything, we do use it to build completed futures internally.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456214299", "createdAt": "2020-07-17T04:40:16Z", "author": {"login": "huntc"}, "path": "exporters/inmemory/build.gradle", "diffHunk": "@@ -11,6 +11,8 @@ ext.moduleName = \"io.opentelemetry.exporters.inmemory\"\n dependencies {\n     api project(':opentelemetry-sdk')\n \n+    implementation libraries.guava\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzY3OTgz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-450367983", "createdAt": "2020-07-17T04:40:52Z", "commit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MDo1MlrOGzFHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MDo1MlrOGzFHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNDQzMw==", "bodyText": "I don't think Future is very useful in modern Java, since we target Java 7, we should probably have a callback parameter to the method instead.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456214433", "createdAt": "2020-07-17T04:40:52Z", "author": {"login": "anuraaga"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporter.java", "diffHunk": "@@ -103,12 +105,12 @@ public void reset() {\n    * <p>If this is called after {@code shutdown}, this will return {@code ResultCode.FAILURE}.\n    */\n   @Override\n-  public ResultCode export(Collection<MetricData> metrics) {\n+  public Future<ResultCode> export(Collection<MetricData> metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzY4MzI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-450368329", "createdAt": "2020-07-17T04:42:13Z", "commit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MjoxM1rOGzFI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MjoxM1rOGzFI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNDc0Nw==", "bodyText": "If an exception is thrown with the export or flush methods, it is probably unrecoverable, hence allowing the exception to propagate. These methods should return a failure status for recoverable failures.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456214747", "createdAt": "2020-07-17T04:42:13Z", "author": {"login": "huntc"}, "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemoryMetricExporterTest.java", "diffHunk": "@@ -51,26 +52,26 @@ private static MetricData generateFakeMetric() {\n   }\n \n   @Test\n-  public void test_getFinishedMetricItems() {\n+  public void test_getFinishedMetricItems() throws ExecutionException, InterruptedException {\n     List<MetricData> metrics = new ArrayList<MetricData>();\n     metrics.add(generateFakeMetric());\n     metrics.add(generateFakeMetric());\n     metrics.add(generateFakeMetric());\n \n-    assertThat(exporter.export(metrics)).isEqualTo(ResultCode.SUCCESS);\n+    assertThat(exporter.export(metrics).get()).isEqualTo(ResultCode.SUCCESS);\n     List<MetricData> metricItems = exporter.getFinishedMetricItems();\n     assertThat(metricItems).isNotNull();\n     assertThat(metricItems.size()).isEqualTo(3);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzY4NTcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-450368571", "createdAt": "2020-07-17T04:43:06Z", "commit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MzowN1rOGzFJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0MzowN1rOGzFJmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNDkzNw==", "bodyText": "This logging is consistent with other internal call sites.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456214937", "createdAt": "2020-07-17T04:43:07Z", "author": {"login": "huntc"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -50,12 +53,16 @@ public ResultCode flush() {\n         resultCode = ResultCode.FAILURE;\n       }\n     }\n-    return resultCode;\n+    return Futures.immediateFuture(resultCode);\n   }\n \n   @Override\n   public void shutdown() {\n     // no-op\n-    this.flush();\n+    try {\n+      this.flush().get();\n+    } catch (InterruptedException | ExecutionException e) {\n+      logger.log(Level.WARNING, \"Metric Exporter threw an Exception\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzY4OTQy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-450368942", "createdAt": "2020-07-17T04:44:20Z", "commit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0NDoyMFrOGzFK2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo0NDoyMFrOGzFK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNTI1OQ==", "bodyText": "Note that if any of the existing exporters throw an exception during export or flush then they are in error in accordance with the API. I've therefore assumed that they don't.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456215259", "createdAt": "2020-07-17T04:44:20Z", "author": {"login": "huntc"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingSpanExporter.java", "diffHunk": "@@ -50,11 +53,15 @@ public ResultCode flush() {\n         resultCode = ResultCode.FAILURE;\n       }\n     }\n-    return resultCode;\n+    return Futures.immediateFuture(resultCode);\n   }\n \n   @Override\n   public void shutdown() {\n-    this.flush();\n+    try {\n+      this.flush().get();\n+    } catch (InterruptedException | ExecutionException e) {\n+      logger.log(Level.WARNING, \"Span Exporter threw an Exception\", e);\n+    }\n   }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79097e78c0e571b98d089c66bf1b2a8a60e6b976", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79097e78c0e571b98d089c66bf1b2a8a60e6b976", "committedDate": "2020-07-17T04:27:17Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}, "afterCommit": {"oid": "3e662fd85a93fe8e89550f3cd7c6a73ad860edcb", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3e662fd85a93fe8e89550f3cd7c6a73ad860edcb", "committedDate": "2020-07-17T05:01:18Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDk0MTY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451094164", "createdAt": "2020-07-19T02:41:24Z", "commit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0MToyNFrOGzr8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0MToyNFrOGzr8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDU2Mg==", "bodyText": "if we go with this PR, we should definitely create follow-on issues to make the exporter implementations actually do their work async.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456850562", "createdAt": "2020-07-19T02:41:24Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "diffHunk": "@@ -126,9 +128,9 @@ public ResultCode export(Collection<SpanData> spans) {\n       // for now, there's nothing to check in the response object\n       //noinspection ResultOfMethodCallIgnored\n       stub.postSpans(request);\n-      return ResultCode.SUCCESS;\n+      return Futures.immediateFuture(ResultCode.SUCCESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDk0MjIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451094223", "createdAt": "2020-07-19T02:43:34Z", "commit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0MzozNFrOGzr9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0MzozNFrOGzr9Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDY5NA==", "bodyText": "this is another point at which we should probably have a follow-on issue, so we don't lose track of the fact that we're making something sync that could be async.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456850694", "createdAt": "2020-07-19T02:43:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "diffHunk": "@@ -285,9 +285,9 @@ private void onBatchExport(final List<SpanData> spans) {\n                 public void run() {\n                   // In case of any exception thrown by the service handlers catch and log.\n                   try {\n-                    spanExporter.export(spans);\n-                  } catch (Throwable t) {\n-                    logger.log(Level.WARNING, \"Exception thrown by the export.\", t);\n+                    spanExporter.export(spans).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDk0MjM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451094238", "createdAt": "2020-07-19T02:44:08Z", "commit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0NDowOFrOGzr9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo0NDowOFrOGzr9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MDczNQ==", "bodyText": "ditto on needing an issue for this one as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456850735", "createdAt": "2020-07-19T02:44:08Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -77,8 +78,8 @@ public void onEnd(ReadableSpan span) {\n     }\n     try {\n       List<SpanData> spans = Collections.singletonList(span.toSpanData());\n-      spanExporter.export(spans);\n-    } catch (Throwable e) {\n+      spanExporter.export(spans).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDk0NTk5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451094599", "createdAt": "2020-07-19T02:55:59Z", "commit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo1NTo1OVrOGzsAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMjo1NTo1OVrOGzsAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTQ4NQ==", "bodyText": "I'm not super happy with having a public method be synchronized. There is an unintended consequence to this that if someone externally uses an instance of this class to synchronize on, it will lock this from ever executing.\nThe combination of volatile and public synchronized methods makes me a bit queasy. Can we use some more modern concurrency primitives, like Atomics to make this a little less prone to accidental (or intentional) abuse?\nAt the very least, if we do need to have old-school synchronization in here, we should synchronize on a private final field that is not accessible outside the class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456851485", "createdAt": "2020-07-19T02:55:59Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  public CompletableResultCode() {}\n+\n+  private volatile boolean succeeded = false;\n+  private boolean completed = false;\n+  private Runnable action = null;\n+  private Executor actionExecutor = null;\n+\n+  /** The export operation finished successfully. */\n+  public synchronized void success() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDk1NjE1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451095615", "createdAt": "2020-07-19T03:27:15Z", "commit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMzoyNzoxNVrOGzsIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMzozMzozMFrOGzsJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MzUxOA==", "bodyText": "We may as well make this generic", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456853518", "createdAt": "2020-07-19T03:27:15Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MzYyMQ==", "bodyText": "Agree that we can probably use atomic and cas to avoid synchronization. We're not an asynchronous framework or anything, this is just our export API so we wouldn't expect significant overhead due to extra objects from the atomics", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456853621", "createdAt": "2020-07-19T03:28:40Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  public CompletableResultCode() {}\n+\n+  private volatile boolean succeeded = false;\n+  private boolean completed = false;\n+  private Runnable action = null;\n+  private Executor actionExecutor = null;\n+\n+  /** The export operation finished successfully. */\n+  public synchronized void success() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTQ4NQ=="}, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1Mzg2Ng==", "bodyText": "If we only support one callback anyways I would definitely prefer just using the callback pattern. How about we just go ahead and maintain a list of runnables here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456853866", "createdAt": "2020-07-19T03:32:00Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  public CompletableResultCode() {}\n+\n+  private volatile boolean succeeded = false;\n+  private boolean completed = false;\n+  private Runnable action = null;\n+  private Executor actionExecutor = null;\n+\n+  /** The export operation finished successfully. */\n+  public synchronized void success() {\n+    if (!completed) {\n+      if (!succeeded) {\n+        succeeded = true;\n+      }\n+      if (action != null) {\n+        actionExecutor.execute(action);\n+      }\n+      completed = true;\n+    }\n+  }\n+\n+  /** The export operation finished with an error. */\n+  public synchronized void failure() {\n+    if (!completed) {\n+      if (action != null) {\n+        actionExecutor.execute(action);\n+      }\n+      completed = true;\n+    }\n+  }\n+\n+  /**\n+   * Obtain the current state of completion. Generally call once completion is achieved via the\n+   * thenRun method.\n+   *\n+   * @return the current state of completion\n+   */\n+  public boolean isSuccess() {\n+    return succeeded;\n+  }\n+\n+  /**\n+   * Perform an action on completion. Actions are guaranteed to be called only once.\n+   *\n+   * <p>There should only be one action for this class instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MzkzMw==", "bodyText": "I realized my comment about list of runnables may make it impractical to avoid a lock.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r456853933", "createdAt": "2020-07-19T03:33:30Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  public CompletableResultCode() {}\n+\n+  private volatile boolean succeeded = false;\n+  private boolean completed = false;\n+  private Runnable action = null;\n+  private Executor actionExecutor = null;\n+\n+  /** The export operation finished successfully. */\n+  public synchronized void success() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg1MTQ4NQ=="}, "originalCommit": {"oid": "8461ffc282b1804dba851707030f291ceaf2821f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzI3MTY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451327169", "createdAt": "2020-07-20T06:30:08Z", "commit": {"oid": "db478fd31bd06f702978aee22d797c69caef8220"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozMDowOFrOGz61DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozMDowOFrOGz61DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NDQxMw==", "bodyText": "This TODO has been actioned.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457094413", "createdAt": "2020-07-20T06:30:08Z", "author": {"login": "huntc"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/MetricExporter.java", "diffHunk": "@@ -29,36 +30,22 @@\n  */\n public interface MetricExporter {\n \n-  /**\n-   * The possible results for the export method.\n-   *\n-   * @since 0.1.0\n-   */\n-  // TODO: extract this enum and unify it with SpanExporter.ResultCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db478fd31bd06f702978aee22d797c69caef8220"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzI4MjA2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-451328206", "createdAt": "2020-07-20T06:32:26Z", "commit": {"oid": "db478fd31bd06f702978aee22d797c69caef8220"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozMjoyNlrOGz66Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozMjoyNlrOGz66Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NTY5NQ==", "bodyText": "A bit of a change here is that there's no longer a timeout on export. Given that export is potentially async, we can't reliably cancel. Also, an exporter's contract is to always complete a CompletableResultCode - it is a promise that must be fulfilled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457095695", "createdAt": "2020-07-20T06:32:26Z", "author": {"login": "huntc"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "diffHunk": "@@ -96,15 +90,8 @@ private BatchSpanProcessor(\n       boolean sampled,\n       long scheduleDelayMillis,\n       int maxQueueSize,\n-      int maxExportBatchSize,\n-      int exporterTimeoutMillis) {\n-    this.worker =\n-        new Worker(\n-            spanExporter,\n-            scheduleDelayMillis,\n-            maxQueueSize,\n-            maxExportBatchSize,\n-            exporterTimeoutMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db478fd31bd06f702978aee22d797c69caef8220"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDkxNjUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-452091652", "createdAt": "2020-07-21T02:57:24Z", "commit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo1NzoyNFrOG0mSkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzowODo1N1rOG0mdLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjQ4Mw==", "bodyText": "Would recommend keeping the constants private and having factory methods ofSuccess() ofFailure() it seems to be more idiomatic now adays", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457806483", "createdAt": "2020-07-21T02:57:24Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success */\n+  public static final CompletableResultCode SUCCESS = new CompletableResultCode().success();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzI0OA==", "bodyText": "Since we have an object for this lock now, is there any need for it to be a ReentrantLock as opposed to an Object which we use synchronized on? IIRC, the latter is a bit faster with a bit less syntax (though maybe not in Java 15 where they're finally removing biased locking)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457807248", "createdAt": "2020-07-21T03:00:41Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success */\n+  public static final CompletableResultCode SUCCESS = new CompletableResultCode().success();\n+\n+  /** A convenience for declaring failure */\n+  public static final CompletableResultCode FAILURE = new CompletableResultCode().failure();\n+\n+  public CompletableResultCode() {}\n+\n+  private volatile Boolean succeeded = null;\n+  private final ArrayList<Runnable> actions = new ArrayList<>();\n+  private final Lock state = new ReentrantLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODM5Nw==", "bodyText": "Do we need this copy? With succeeded always accessed in the lock seems ok without it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457808397", "createdAt": "2020-07-21T03:05:34Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success */\n+  public static final CompletableResultCode SUCCESS = new CompletableResultCode().success();\n+\n+  /** A convenience for declaring failure */\n+  public static final CompletableResultCode FAILURE = new CompletableResultCode().failure();\n+\n+  public CompletableResultCode() {}\n+\n+  private volatile Boolean succeeded = null;\n+  private final ArrayList<Runnable> actions = new ArrayList<>();\n+  private final Lock state = new ReentrantLock();\n+\n+  /** The export operation finished successfully. */\n+  public CompletableResultCode success() {\n+    List<Runnable> actionsToRun = new ArrayList<>();\n+    state.lock();\n+    try {\n+      if (succeeded == null) {\n+        succeeded = true;\n+        actionsToRun.addAll(actions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODYzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (succeeded != null && succeeded) {\n          \n          \n            \n                  if (succeeded != null) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457808634", "createdAt": "2020-07-21T03:06:35Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success */\n+  public static final CompletableResultCode SUCCESS = new CompletableResultCode().success();\n+\n+  /** A convenience for declaring failure */\n+  public static final CompletableResultCode FAILURE = new CompletableResultCode().failure();\n+\n+  public CompletableResultCode() {}\n+\n+  private volatile Boolean succeeded = null;\n+  private final ArrayList<Runnable> actions = new ArrayList<>();\n+  private final Lock state = new ReentrantLock();\n+\n+  /** The export operation finished successfully. */\n+  public CompletableResultCode success() {\n+    List<Runnable> actionsToRun = new ArrayList<>();\n+    state.lock();\n+    try {\n+      if (succeeded == null) {\n+        succeeded = true;\n+        actionsToRun.addAll(actions);\n+      }\n+    } finally {\n+      state.unlock();\n+    }\n+    for (Runnable action : actionsToRun) {\n+      action.run();\n+    }\n+    return this;\n+  }\n+\n+  /** The export operation finished with an error. */\n+  public CompletableResultCode failure() {\n+    List<Runnable> actionsToRun = new ArrayList<>();\n+    state.lock();\n+    try {\n+      if (succeeded == null) {\n+        succeeded = false;\n+        actionsToRun.addAll(actions);\n+      }\n+    } finally {\n+      state.unlock();\n+    }\n+    for (Runnable action : actionsToRun) {\n+      action.run();\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Obtain the current state of completion. Generally call once completion is achieved via the\n+   * thenRun method.\n+   *\n+   * @return the current state of completion\n+   */\n+  public boolean isSuccess() {\n+    return succeeded != null && succeeded;\n+  }\n+\n+  /**\n+   * Perform an action on completion. Actions are guaranteed to be called only once.\n+   *\n+   * <p>There should only be one action for this class instance.\n+   *\n+   * @param action the action to perform\n+   * @return this completable result so that it may be further composed\n+   */\n+  public CompletableResultCode thenRun(Runnable action) {\n+    boolean runActionImmediately = false;\n+    state.lock();\n+    try {\n+      if (succeeded != null && succeeded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTE5Nw==", "bodyText": "IIUC this changes the behavior to export essentially being \"scheduleAtFixedRate\" instead of the current \"scheduleAtFixedDelay\" since this always returns immediately now. I don't know if this is the intention of this class. Also given a significant refactor in #1395 which will make this class much easier to reason about, maybe we can keep the behavior unchanged for now?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457809197", "createdAt": "2020-07-21T03:08:57Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "diffHunk": "@@ -277,28 +258,26 @@ private void exportBatches(ArrayList<ReadableSpan> spanList) {\n     }\n \n     // Exports the list of SpanData to the SpanExporter.\n+    @SuppressWarnings(\"BooleanParameter\")\n     private void onBatchExport(final List<SpanData> spans) {\n-      Future<?> submission =\n-          executorService.submit(\n+      if (exportAvailable.compareAndSet(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567548b0c7c00559fa2c0fbae9f2584cb440532b"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE1NTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-452115521", "createdAt": "2020-07-21T04:20:22Z", "commit": {"oid": "ce97d50ca92bb2838126d272ead96e77d382cba0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMDoyM1rOG0niqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMDoyM1rOG0niqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjk4NA==", "bodyText": "Thanks last nit, these methods looks weird at the call sites since they're not verbs. Something like\nsucceed / fail\ncomplete / completeExceptionally\n?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r457826984", "createdAt": "2020-07-21T04:20:23Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success */\n+  public static CompletableResultCode ofSuccess() {\n+    return SUCCESS;\n+  }\n+\n+  /** A convenience for declaring failure */\n+  public static CompletableResultCode ofFailure() {\n+    return FAILURE;\n+  }\n+\n+  private static final CompletableResultCode SUCCESS = new CompletableResultCode().success();\n+  private static final CompletableResultCode FAILURE = new CompletableResultCode().failure();\n+\n+  public CompletableResultCode() {}\n+\n+  @GuardedBy(\"lock\")\n+  private Boolean succeeded = null;\n+\n+  @GuardedBy(\"lock\")\n+  private final ArrayList<Runnable> actions = new ArrayList<>();\n+\n+  private final Object lock = new Object();\n+\n+  /** The export operation finished successfully. */\n+  public CompletableResultCode success() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce97d50ca92bb2838126d272ead96e77d382cba0"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTY1MDk4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-459565098", "createdAt": "2020-08-01T08:53:00Z", "commit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjEzNTE1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-459613515", "createdAt": "2020-08-02T01:32:28Z", "commit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozMjoyOFrOG6hbpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozMjoyOFrOG6hbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODM0Mw==", "bodyText": "this makes me think that we probably should think about adding an Exception/Throwable to the CompletableResultCode, but that isn't necessary for this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r464018343", "createdAt": "2020-08-02T01:32:28Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.java", "diffHunk": "@@ -277,28 +258,26 @@ private void exportBatches(ArrayList<ReadableSpan> spanList) {\n     }\n \n     // Exports the list of SpanData to the SpanExporter.\n+    @SuppressWarnings(\"BooleanParameter\")\n     private void onBatchExport(final List<SpanData> spans) {\n-      Future<?> submission =\n-          executorService.submit(\n+      if (exportAvailable.compareAndSet(true, false)) {\n+        try {\n+          final CompletableResultCode result = spanExporter.export(spans);\n+          result.thenRun(\n               new Runnable() {\n                 @Override\n                 public void run() {\n-                  // In case of any exception thrown by the service handlers catch and log.\n-                  try {\n-                    spanExporter.export(spans);\n-                  } catch (Throwable t) {\n-                    logger.log(Level.WARNING, \"Exception thrown by the export.\", t);\n+                  if (!result.isSuccess()) {\n+                    logger.log(Level.FINE, \"Exporter failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjEzNTc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-459613577", "createdAt": "2020-08-02T01:34:11Z", "commit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozNDoxMlrOG6hcAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMTozNDoxMlrOG6hcAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODQzNA==", "bodyText": "is anything waiting on this latch?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r464018434", "createdAt": "2020-08-02T01:34:12Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/MultiSpanExporter.java", "diffHunk": "@@ -67,18 +68,19 @@ public ResultCode export(Collection<SpanData> spans) {\n    * @return the result of the operation\n    */\n   @Override\n-  public ResultCode flush() {\n-    ResultCode currentResultCode = SUCCESS;\n+  public CompletableResultCode flush() {\n+    final CompletableResultCode compositeResultCode = new CompletableResultCode();\n+    final CountDownLatch completionsToProcess = new CountDownLatch(spanExporters.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbcecc1a104aa49714358ae7e10893456b7e7f98", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fbcecc1a104aa49714358ae7e10893456b7e7f98", "committedDate": "2020-08-02T05:59:56Z", "message": "Re-instated test"}, "afterCommit": {"oid": "34dae0f7f27d56c9fa43ef9e7bd3ca819e662767", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/34dae0f7f27d56c9fa43ef9e7bd3ca819e662767", "committedDate": "2020-08-02T06:19:27Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34dae0f7f27d56c9fa43ef9e7bd3ca819e662767", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/34dae0f7f27d56c9fa43ef9e7bd3ca819e662767", "committedDate": "2020-08-02T06:19:27Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}, "afterCommit": {"oid": "d3e3d8d0cab3ad409b156bdb0a63a142d44aee18", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d3e3d8d0cab3ad409b156bdb0a63a142d44aee18", "committedDate": "2020-08-02T07:06:22Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67c7b3be142e503212377a00ce60fbe0a6f4ae1", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f67c7b3be142e503212377a00ce60fbe0a6f4ae1", "committedDate": "2020-08-02T07:54:23Z", "message": "Re-instated batch span processor cancellation\n\nCancellation now provides the exporter with the opportunity to handle it. An exporter could, for example, cancel activity in flight in the way it knows how."}, "afterCommit": {"oid": "b7cfcab79e4cad7dbc7edf2269e0355a506d39f8", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7cfcab79e4cad7dbc7edf2269e0355a506d39f8", "committedDate": "2020-08-03T00:09:58Z", "message": "Re-instated batch span processor cancellation\n\nCancellation now provides the exporter with the opportunity to handle it. An exporter could, for example, cancel activity in flight in the way it knows how."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzAxMTI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-459701126", "createdAt": "2020-08-03T01:20:55Z", "commit": {"oid": "b7cfcab79e4cad7dbc7edf2269e0355a506d39f8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMToyMDo1NVrOG6phag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMToyNDo1N1rOG6pkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE1MDg5MA==", "bodyText": "@carlosalberto We will need to change this from MetricsServiceBlockingStub to MetricsServiceFutureStub to see the main result of this PR, making at least the gRPC exporters truly async. I'm ok with that being in a followup but do you want to see it now?\n@huntc I guess it's not a huge code change so maybe can knock it out.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r464150890", "createdAt": "2020-08-03T01:20:55Z", "author": {"login": "anuraaga"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -89,7 +90,7 @@ private OtlpGrpcMetricExporter(ManagedChannel channel, long deadlineMs) {\n    * @return the result of the operation\n    */\n   @Override\n-  public ResultCode export(Collection<MetricData> metrics) {\n+  public CompletableResultCode export(Collection<MetricData> metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cfcab79e4cad7dbc7edf2269e0355a506d39f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE1MTI0MA==", "bodyText": "If not waiting on it, may as well use AtomicInteger to clarify that it's just for counting.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r464151240", "createdAt": "2020-08-03T01:22:52Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/MultiSpanExporter.java", "diffHunk": "@@ -67,18 +68,19 @@ public ResultCode export(Collection<SpanData> spans) {\n    * @return the result of the operation\n    */\n   @Override\n-  public ResultCode flush() {\n-    ResultCode currentResultCode = SUCCESS;\n+  public CompletableResultCode flush() {\n+    final CompletableResultCode compositeResultCode = new CompletableResultCode();\n+    final CountDownLatch completionsToProcess = new CountDownLatch(spanExporters.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxODQzNA=="}, "originalCommit": {"oid": "b6deaad5a33e748eab694382a57da7764c3ade1f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE1MTU4Nw==", "bodyText": "For SimpleSpanProcessor I think I'd expect it to be simple and just call export in all cases (if there is a backup in the exporter, that is a reason to use a more complicated span processor like batch span processor).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r464151587", "createdAt": "2020-08-03T01:24:57Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -71,15 +74,30 @@ public boolean isStartRequired() {\n   }\n \n   @Override\n+  @SuppressWarnings(\"BooleanParameter\")\n   public void onEnd(ReadableSpan span) {\n-    if (sampled && !span.getSpanContext().getTraceFlags().isSampled()) {\n-      return;\n-    }\n-    try {\n-      List<SpanData> spans = Collections.singletonList(span.toSpanData());\n-      spanExporter.export(spans);\n-    } catch (Throwable e) {\n-      logger.log(Level.WARNING, \"Exception thrown by the export.\", e);\n+    if (exportAvailable.compareAndSet(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cfcab79e4cad7dbc7edf2269e0355a506d39f8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTM3MTU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-460937157", "createdAt": "2020-08-04T15:41:13Z", "commit": {"oid": "6ed3e68bf135eda445e777a9f28108349cb37cfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0MToxM1rOG7mQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0MToxM1rOG7mQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTg3NA==", "bodyText": "This does make me think we should consider adding an optional Throwable/message to the fail() method.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r465145874", "createdAt": "2020-08-04T15:41:13Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -89,26 +97,29 @@ private OtlpGrpcMetricExporter(ManagedChannel channel, long deadlineMs) {\n    * @return the result of the operation\n    */\n   @Override\n-  public ResultCode export(Collection<MetricData> metrics) {\n+  public CompletableResultCode export(Collection<MetricData> metrics) {\n     ExportMetricsServiceRequest exportMetricsServiceRequest =\n         ExportMetricsServiceRequest.newBuilder()\n             .addAllResourceMetrics(MetricAdapter.toProtoResourceMetrics(metrics))\n             .build();\n \n-    try {\n-      MetricsServiceGrpc.MetricsServiceBlockingStub stub = this.blockingStub;\n-      if (deadlineMs > 0) {\n-        stub = stub.withDeadlineAfter(deadlineMs, TimeUnit.MILLISECONDS);\n-      }\n+    final CompletableResultCode result = new CompletableResultCode();\n+    Futures.addCallback(\n+        metricsService.export(exportMetricsServiceRequest),\n+        new FutureCallback<ExportMetricsServiceResponse>() {\n+          @Override\n+          public void onSuccess(@Nullable ExportMetricsServiceResponse response) {\n+            result.succeed();\n+          }\n \n-      // for now, there's nothing to check in the response object\n-      // noinspection ResultOfMethodCallIgnored\n-      stub.export(exportMetricsServiceRequest);\n-      return ResultCode.SUCCESS;\n-    } catch (Throwable e) {\n-      logger.log(Level.WARNING, \"Failed to export metrics\", e);\n-      return ResultCode.FAILURE;\n-    }\n+          @Override\n+          public void onFailure(Throwable t) {\n+            logger.log(Level.WARNING, \"Failed to export spans\", t);\n+            result.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed3e68bf135eda445e777a9f28108349cb37cfc"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ed3e68bf135eda445e777a9f28108349cb37cfc", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6ed3e68bf135eda445e777a9f28108349cb37cfc", "committedDate": "2020-08-03T08:21:59Z", "message": "Re-instated back-pressure handling for IntervalMetricReader and BatchSpanProcessor\n\nThis has been done so that we avoid overwhelming exporters."}, "afterCommit": {"oid": "dfc71f62a19a8c31bacfe117a537028940588775", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dfc71f62a19a8c31bacfe117a537028940588775", "committedDate": "2020-08-14T22:26:18Z", "message": "Re-instated back-pressure handling for IntervalMetricReader and BatchSpanProcessor\n\nThis has been done so that we avoid overwhelming exporters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1c86fa263d17dd82da3af413bb9c4d071b03c3a", "committedDate": "2020-08-14T22:53:33Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfc71f62a19a8c31bacfe117a537028940588775", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dfc71f62a19a8c31bacfe117a537028940588775", "committedDate": "2020-08-14T22:26:18Z", "message": "Re-instated back-pressure handling for IntervalMetricReader and BatchSpanProcessor\n\nThis has been done so that we avoid overwhelming exporters."}, "afterCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1c86fa263d17dd82da3af413bb9c4d071b03c3a", "committedDate": "2020-08-14T22:53:33Z", "message": "Makes Export methods async\n\nThis commit recognises that the export and flush methods of span and trace exporters can be, and often are, implemented with long-lived operations over networks. We therefore see that these method return types are represented using Java's Future type to account for this common behaviour."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTQwNDIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-467940423", "createdAt": "2020-08-15T02:22:54Z", "commit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjoyMjo1NVrOHBHDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjozMDowOVrOHBHGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjIxOA==", "bodyText": "Should we early return here? Similar comment elsewhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r470926218", "createdAt": "2020-08-15T02:22:55Z", "author": {"login": "anuraaga"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -41,16 +42,16 @@ public ResultCode export(Collection<MetricData> metrics) {\n    * @return the result of the operation\n    */\n   @Override\n-  public ResultCode flush() {\n-    ResultCode resultCode = ResultCode.SUCCESS;\n+  public CompletableResultCode flush() {\n+    CompletableResultCode resultCode = new CompletableResultCode();\n     for (Handler handler : logger.getHandlers()) {\n       try {\n         handler.flush();\n       } catch (Throwable t) {\n-        resultCode = ResultCode.FAILURE;\n+        resultCode.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjYwNQ==", "bodyText": "This could be second sentence, first sentences should describe the class. e.g. A result which will be completed at a later time asynchronously.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r470926605", "createdAt": "2020-08-15T02:27:03Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjcxMQ==", "bodyText": "Returns a {@link CompletableResultCode} that has been completed successfully.\nDitto for below with unsuccessfully", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r470926711", "createdAt": "2020-08-15T02:28:29Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjc3Ng==", "bodyText": "Completed this {@link CompletableResultCode} successfully.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r470926776", "createdAt": "2020-08-15T02:29:26Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success. */\n+  public static CompletableResultCode ofSuccess() {\n+    return SUCCESS;\n+  }\n+\n+  /** A convenience for declaring failure. */\n+  public static CompletableResultCode ofFailure() {\n+    return FAILURE;\n+  }\n+\n+  private static final CompletableResultCode SUCCESS = new CompletableResultCode().succeed();\n+  private static final CompletableResultCode FAILURE = new CompletableResultCode().fail();\n+\n+  public CompletableResultCode() {}\n+\n+  @Nullable\n+  @GuardedBy(\"lock\")\n+  private Boolean succeeded = null;\n+\n+  @GuardedBy(\"lock\")\n+  private final ArrayList<Runnable> completionActions = new ArrayList<>();\n+\n+  private final Object lock = new Object();\n+\n+  /** The export operation finished successfully. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjg1NA==", "bodyText": "Realized we can probably just copy paste javadoc from CompletableFuture", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r470926854", "createdAt": "2020-08-15T02:30:09Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNjcxMQ=="}, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjgwNDUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-468680452", "createdAt": "2020-08-17T17:32:47Z", "commit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozMjo0OFrOHBzO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozMjo0OFrOHBzO_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MDA0NQ==", "bodyText": "I don't think this is needed on this method.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r471650045", "createdAt": "2020-08-17T17:32:48Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -71,15 +74,25 @@ public boolean isStartRequired() {\n   }\n \n   @Override\n+  @SuppressWarnings(\"BooleanParameter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Njg1Njcz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-468685673", "createdAt": "2020-08-17T17:40:31Z", "commit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0MDozMVrOHBzewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0MDozMVrOHBzewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NDA4Mg==", "bodyText": "This behavior should be documented, since I think it's non-obvious that it's first-in-wins with succeed/fail.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r471654082", "createdAt": "2020-08-17T17:40:31Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success. */\n+  public static CompletableResultCode ofSuccess() {\n+    return SUCCESS;\n+  }\n+\n+  /** A convenience for declaring failure. */\n+  public static CompletableResultCode ofFailure() {\n+    return FAILURE;\n+  }\n+\n+  private static final CompletableResultCode SUCCESS = new CompletableResultCode().succeed();\n+  private static final CompletableResultCode FAILURE = new CompletableResultCode().fail();\n+\n+  public CompletableResultCode() {}\n+\n+  @Nullable\n+  @GuardedBy(\"lock\")\n+  private Boolean succeeded = null;\n+\n+  @GuardedBy(\"lock\")\n+  private final ArrayList<Runnable> completionActions = new ArrayList<>();\n+\n+  private final Object lock = new Object();\n+\n+  /** The export operation finished successfully. */\n+  public CompletableResultCode succeed() {\n+    synchronized (lock) {\n+      if (succeeded == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Njg3MTEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-468687113", "createdAt": "2020-08-17T17:42:53Z", "commit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0Mjo1M1rOHBzjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0Mjo1M1rOHBzjGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NTE5Mw==", "bodyText": "This can be declared as a simple List on the LHS, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#discussion_r471655193", "createdAt": "2020-08-17T17:42:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/CompletableResultCode.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import java.util.ArrayList;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+/**\n+ * The implementation of Export operations are often asynchronous in nature, hence the need to\n+ * convey a result at a later time. CompletableResultCode facilitates this.\n+ *\n+ * <p>This class models JDK 8's CompletableFuture to afford migration should Open Telemetry's SDK\n+ * select JDK 8 or greater as a baseline, and also to offer familiarity to developers.\n+ */\n+public class CompletableResultCode {\n+  /** A convenience for declaring success. */\n+  public static CompletableResultCode ofSuccess() {\n+    return SUCCESS;\n+  }\n+\n+  /** A convenience for declaring failure. */\n+  public static CompletableResultCode ofFailure() {\n+    return FAILURE;\n+  }\n+\n+  private static final CompletableResultCode SUCCESS = new CompletableResultCode().succeed();\n+  private static final CompletableResultCode FAILURE = new CompletableResultCode().fail();\n+\n+  public CompletableResultCode() {}\n+\n+  @Nullable\n+  @GuardedBy(\"lock\")\n+  private Boolean succeeded = null;\n+\n+  @GuardedBy(\"lock\")\n+  private final ArrayList<Runnable> completionActions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1c86fa263d17dd82da3af413bb9c4d071b03c3a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca101359423ea888c7f64127a709a2397cf15a52", "author": {"user": {"login": "huntc", "name": "Christopher Hunt"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca101359423ea888c7f64127a709a2397cf15a52", "committedDate": "2020-08-18T05:27:42Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzI5MjY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1428#pullrequestreview-469729265", "createdAt": "2020-08-18T18:45:08Z", "commit": {"oid": "ca101359423ea888c7f64127a709a2397cf15a52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2572, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}