{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjUwNzA2", "number": 2069, "title": "Make the OpenTelemetrySdk a subclass of DefaultOpenTelemetry", "bodyText": "We discussed this possibility several times, so I thought I'd give it a try.\nFeedback welcome. This resolves #2018 as well.", "createdAt": "2020-11-13T00:59:06Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069", "merged": true, "mergeCommit": {"oid": "7a5d8df1482996387529f9c157c416b4890ca853"}, "closed": true, "closedAt": "2020-11-17T00:06:44Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb8Ql2gH2gAyNTIwMjUwNzA2OmIwZDBjNjJiNTc2ZGNjYTc5ZmU0ZDg1MGRkMGUwMGYyMzc3NjVhMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddOER1gFqTUzMTkyMDM1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0d0c62b576dcca79fe4d850dd0e00f237765a25", "committedDate": "2020-11-13T00:45:37Z", "message": "Make the OpenTelemetrySdk a subclass of DefaultOpenTelemetry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQ1ODQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#pullrequestreview-529645846", "createdAt": "2020-11-13T01:53:58Z", "commit": {"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1Mzo1OFrOHyWd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NjozMFrOHyWg8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODk2NA==", "bodyText": "I think the customized javadoc was good, and even more important now I guess", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522558964", "createdAt": "2020-11-13T01:53:58Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,68 +85,44 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n-    private ContextPropagators propagators = DefaultContextPropagators.builder().build();\n-\n-    private TracerProvider tracerProvider;\n-    private MeterProvider meterProvider;\n \n-    /**\n-     * Sets the {@link TracerProvider} to use. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n-     *\n-     * @see TracerSdkProvider#builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTMwNw==", "bodyText": "For a builder, since it's app startup, I think we may still keep the null checks. But don't have to", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522559307", "createdAt": "2020-11-13T01:55:04Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,68 +85,44 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();\n     private Resource resource = Resource.getDefault();\n-    private ContextPropagators propagators = DefaultContextPropagators.builder().build();\n-\n-    private TracerProvider tracerProvider;\n-    private MeterProvider meterProvider;\n \n-    /**\n-     * Sets the {@link TracerProvider} to use. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link TracerSdkProvider.Builder}.\n-     *\n-     * @see TracerSdkProvider#builder()\n-     */\n     @Override\n     public Builder setTracerProvider(TracerProvider tracerProvider) {\n-      requireNonNull(tracerProvider, \"tracerProvider\");\n-      this.tracerProvider = tracerProvider;\n+      if (!(tracerProvider instanceof TracerSdkProvider)) {\n+        throw new IllegalArgumentException(\n+            \"The OpenTelemetrySdk can only be configured with a TracerSdkProvider\");\n+      }\n+      super.setTracerProvider(tracerProvider);\n       return this;\n     }\n \n-    /**\n-     * Sets the {@link MeterProvider} to use.. This can be used to configure tracing settings by\n-     * returning the instance created by a {@link MeterSdkProvider.Builder}.\n-     *\n-     * @see MeterSdkProvider#builder()\n-     */\n     @Override\n     public Builder setMeterProvider(MeterProvider meterProvider) {\n-      requireNonNull(meterProvider, \"meterProvider\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTcyOA==", "bodyText": "Probably my fault for missing a unit test, but it looks like this isn't using the resource / clock in this builder anymore", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522559728", "createdAt": "2020-11-13T01:56:30Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -208,34 +155,21 @@ public Builder setResource(Resource resource) {\n      */\n     @Override\n     public OpenTelemetrySdk build() {\n-      MeterProvider meterProvider = this.meterProvider;\n-      if (meterProvider == null) {\n-        MeterProviderFactory meterProviderFactory = loadSpi(MeterProviderFactory.class);\n-        if (meterProviderFactory != null) {\n-          meterProvider = meterProviderFactory.create();\n-        } else if (HAS_METRICS_SDK) {\n-          meterProvider = MeterSdkProvider.builder().setClock(clock).setResource(resource).build();\n-        } else {\n-          meterProvider = MeterProvider.getDefault();\n-        }\n-      }\n-\n-      TracerProvider tracerProvider = this.tracerProvider;\n-      if (tracerProvider == null) {\n-        TracerProviderFactory tracerProviderFactory = loadSpi(TracerProviderFactory.class);\n-        if (tracerProviderFactory != null) {\n-          tracerProvider = new ObfuscatedTracerProvider(tracerProviderFactory.create());\n-        } else if (HAS_TRACING_SDK) {\n-          tracerProvider =\n-              new ObfuscatedTracerProvider(\n-                  TracerSdkProvider.builder().setClock(clock).setResource(resource).build());\n-        } else {\n-          tracerProvider = TracerProvider.getDefault();\n-        }\n+      MeterProvider meterProvider = super.buildMeterProvider();\n+      TracerProvider tracerProvider = super.buildTracerProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d0c62b576dcca79fe4d850dd0e00f237765a25"}, "originalPosition": 189}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f06e8bbb31c96a8c7817c406adc0bd76f650546", "committedDate": "2020-11-13T03:56:17Z", "message": "Remove SPI from the explicit OpenTelemetrySdk builder usage.\nAdd a (super ugly) test to make sure that the clock and resource are getting set."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NzIxMDQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#pullrequestreview-529721041", "createdAt": "2020-11-13T04:33:02Z", "commit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozMzowMlrOHyaGWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozNTowNFrOHyaMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODQ1OA==", "bodyText": "Should we go ahead and be consistent and only accept MeterSdkProvider here since our goal is for this class to only configure the SDK?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522618458", "createdAt": "2020-11-13T04:33:02Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -158,24 +131,14 @@ public Builder setTracerProvider(TracerProvider tracerProvider) {\n      */\n     @Override\n     public Builder setMeterProvider(MeterProvider meterProvider) {\n-      requireNonNull(meterProvider, \"meterProvider\");\n-      this.meterProvider = meterProvider;\n+      super.setMeterProvider(meterProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODkyMw==", "bodyText": "For the below null checks to work I think these need to default to null", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522618923", "createdAt": "2020-11-13T04:33:38Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -114,39 +85,41 @@ public Clock getClock() {\n \n   /** Returns the {@link TracerSdkManagement} for this {@link OpenTelemetrySdk}. */\n   public TracerSdkManagement getTracerManagement() {\n-    return (TracerSdkProvider) ((ObfuscatedTracerProvider) tracerProvider).unobfuscate();\n+    return (TracerSdkProvider) ((ObfuscatedTracerProvider) getTracerProvider()).unobfuscate();\n   }\n \n   /** Returns a new {@link Builder} initialized with the values of this {@link OpenTelemetrySdk}. */\n   @Override\n   public Builder toBuilder() {\n-    return builder()\n-        .setTracerProvider(tracerProvider)\n-        .setMeterProvider(meterProvider)\n+    return new Builder()\n+        .setTracerProvider(getTracerProvider())\n+        .setMeterProvider(getMeterProvider())\n         .setPropagators(getPropagators())\n         .setClock(clock)\n         .setResource(resource);\n   }\n \n   /** A builder for configuring an {@link OpenTelemetrySdk}. */\n-  public static class Builder implements OpenTelemetryBuilder<Builder> {\n+  public static class Builder extends DefaultOpenTelemetry.Builder {\n     private Clock clock = MillisClock.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // this is not a great way to test this...\n          \n          \n            \n                // Since TracerProvider is in a different package, the only alternative to this reflective\n          \n          \n            \n                // approach would be to make the fields public for testing which is worse than this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522619597", "createdAt": "2020-11-13T04:34:33Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java", "diffHunk": "@@ -76,10 +76,38 @@ void testReconfigure() {\n             .setClock(clock)\n             .setResource(resource)\n             .build();\n-    assertThat(openTelemetry.getTracerProvider()).isEqualTo(tracerProvider);\n+    assertThat(((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate())\n+        .isEqualTo(tracerProvider);\n     assertThat(openTelemetry.getMeterProvider()).isEqualTo(meterProvider);\n     assertThat(openTelemetry.getPropagators()).isEqualTo(propagators);\n     assertThat(openTelemetry.getResource()).isEqualTo(resource);\n     assertThat(openTelemetry.getClock()).isEqualTo(clock);\n   }\n+\n+  @Test\n+  void testReconfigure_justClockAndResource() {\n+    Resource resource = Resource.create(Attributes.builder().put(\"cat\", \"meow\").build());\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder().setClock(clock).setResource(resource).build();\n+    TracerProvider unobfuscatedTracerProvider =\n+        ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n+\n+    assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n+    // this is not a great way to test this...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMDAyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // this is not awesome\n          \n          \n            \n                // Since MeterProvider is in a different package, the only alternative to this reflective\n          \n          \n            \n                // approach would be to make the fields public for testing which is worse than this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#discussion_r522620028", "createdAt": "2020-11-13T04:35:04Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java", "diffHunk": "@@ -76,10 +76,38 @@ void testReconfigure() {\n             .setClock(clock)\n             .setResource(resource)\n             .build();\n-    assertThat(openTelemetry.getTracerProvider()).isEqualTo(tracerProvider);\n+    assertThat(((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate())\n+        .isEqualTo(tracerProvider);\n     assertThat(openTelemetry.getMeterProvider()).isEqualTo(meterProvider);\n     assertThat(openTelemetry.getPropagators()).isEqualTo(propagators);\n     assertThat(openTelemetry.getResource()).isEqualTo(resource);\n     assertThat(openTelemetry.getClock()).isEqualTo(clock);\n   }\n+\n+  @Test\n+  void testReconfigure_justClockAndResource() {\n+    Resource resource = Resource.create(Attributes.builder().put(\"cat\", \"meow\").build());\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder().setClock(clock).setResource(resource).build();\n+    TracerProvider unobfuscatedTracerProvider =\n+        ((ObfuscatedTracerProvider) openTelemetry.getTracerProvider()).unobfuscate();\n+\n+    assertThat(unobfuscatedTracerProvider).isInstanceOf(TracerSdkProvider.class);\n+    // this is not a great way to test this...\n+    assertThat(unobfuscatedTracerProvider)\n+        .extracting(\"sharedState\")\n+        .hasFieldOrPropertyWithValue(\"clock\", clock)\n+        .hasFieldOrPropertyWithValue(\"resource\", resource);\n+\n+    assertThat(openTelemetry.getMeterProvider()).isInstanceOf(MeterSdkProvider.class);\n+    // this is not awesome", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f06e8bbb31c96a8c7817c406adc0bd76f650546"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9fc935cff48140a15dbaba5b0f6cd6c21ae3d7ef", "committedDate": "2020-11-13T16:49:31Z", "message": "Update sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "111a49da707edbfdf999c6862c43e32227b9cdb1", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/111a49da707edbfdf999c6862c43e32227b9cdb1", "committedDate": "2020-11-13T16:49:41Z", "message": "Update sdk/all/src/test/java/io/opentelemetry/sdk/OpenTelemetrySdkTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e38a2caee98af3a5cdace54f0963471e349bdf1", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6e38a2caee98af3a5cdace54f0963471e349bdf1", "committedDate": "2020-11-13T17:15:06Z", "message": "address code review comments; add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNTU3MTgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#pullrequestreview-530557181", "createdAt": "2020-11-14T05:57:13Z", "commit": {"oid": "6e38a2caee98af3a5cdace54f0963471e349bdf1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6206fcb93ab7b0bbc099133c67e0242c374d6cda", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6206fcb93ab7b0bbc099133c67e0242c374d6cda", "committedDate": "2020-11-16T22:39:18Z", "message": "Require the MeterProvider to be a MeterSdkProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTIwMzU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2069#pullrequestreview-531920355", "createdAt": "2020-11-17T00:04:23Z", "commit": {"oid": "6206fcb93ab7b0bbc099133c67e0242c374d6cda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4035, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}