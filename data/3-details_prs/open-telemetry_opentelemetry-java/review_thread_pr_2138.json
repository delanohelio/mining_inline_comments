{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzIwMzc4", "number": 2138, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMTozMlrOE9ccKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0NTowN1rOE9cldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY0NTUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMTozMlrOH6IyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0MTowOFrOH8O8ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzM2OQ==", "bodyText": "Move this to a package private field in ArrayBasedTraceState so it's not public", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530723369", "createdAt": "2020-11-26T01:31:32Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTk2Ng==", "bodyText": "I tried this, but it ended up breaking with a class loading issue like the other one. :(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530731966", "createdAt": "2020-11-26T02:03:42Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzM2OQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNzUzMA==", "bodyText": "What if it's in the builder? I think one of the two is supposed to work ok (or otherwise I guess another package private class)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530737530", "createdAt": "2020-11-26T02:24:49Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzM2OQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTI5Mw==", "bodyText": "If I were to put this into a separate class, what would I call it? TraceStateDefaultHolder?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r532905293", "createdAt": "2020-11-30T21:10:15Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzM2OQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMTQ0NQ==", "bodyText": "I called it DefaultTraceState. Seems like an obvious enough name. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r532921445", "createdAt": "2020-11-30T21:41:08Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzM2OQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY0NjU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjowNVrOH6Iytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjowNVrOH6Iytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Returns a {@code Builder} based on an empty {@code TraceState}.\n          \n          \n            \n               *\n          \n          \n            \n               * @return a {@code Builder} based on an empty {@code TraceState}.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Returns an empty {@code TraceStateBuilder}.\n          \n          \n            \n               */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530723511", "createdAt": "2020-11-26T01:32:05Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();\n \n   /**\n    * Returns the default {@code TraceState} with no entries.\n    *\n    * @return the default {@code TraceState}.\n    */\n-  public static TraceState getDefault() {\n+  static TraceState getDefault() {\n     return DEFAULT;\n   }\n \n+  /**\n+   * Returns a {@code Builder} based on an empty {@code TraceState}.\n+   *\n+   * @return a {@code Builder} based on an empty {@code TraceState}.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY0NzAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjoyM1rOH6IzAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0MToxOVrOH8O8wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU4Nw==", "bodyText": "I pondered a bit on whether this needs to return an interface too - but since it's static guess not", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530723587", "createdAt": "2020-11-26T01:32:23Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();\n \n   /**\n    * Returns the default {@code TraceState} with no entries.\n    *\n    * @return the default {@code TraceState}.\n    */\n-  public static TraceState getDefault() {\n+  static TraceState getDefault() {\n     return DEFAULT;\n   }\n \n+  /**\n+   * Returns a {@code Builder} based on an empty {@code TraceState}.\n+   *\n+   * @return a {@code Builder} based on an empty {@code TraceState}.\n+   */\n+  static TraceStateBuilder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTA0NA==", "bodyText": "@trask Actually can you check this - will we be able to do the interface interop if this doesn't return an interface? I guess we may intercept every method in TraceStateBuilder but not sure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530729044", "createdAt": "2020-11-26T01:52:48Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();\n \n   /**\n    * Returns the default {@code TraceState} with no entries.\n    *\n    * @return the default {@code TraceState}.\n    */\n-  public static TraceState getDefault() {\n+  static TraceState getDefault() {\n     return DEFAULT;\n   }\n \n+  /**\n+   * Returns a {@code Builder} based on an empty {@code TraceState}.\n+   *\n+   * @return a {@code Builder} based on an empty {@code TraceState}.\n+   */\n+  static TraceStateBuilder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU4Nw=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTUyNg==", "bodyText": "it's the toBuilder() method that hurts: https://github.com/open-telemetry/opentelemetry-java/pull/2134/files#r530758547\n@jkwatson sorry to ask, would you mind turning these builders into interfaces?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530759526", "createdAt": "2020-11-26T03:55:29Z", "author": {"login": "trask"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();\n \n   /**\n    * Returns the default {@code TraceState} with no entries.\n    *\n    * @return the default {@code TraceState}.\n    */\n-  public static TraceState getDefault() {\n+  static TraceState getDefault() {\n     return DEFAULT;\n   }\n \n+  /**\n+   * Returns a {@code Builder} based on an empty {@code TraceState}.\n+   *\n+   * @return a {@code Builder} based on an empty {@code TraceState}.\n+   */\n+  static TraceStateBuilder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU4Nw=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMTUzOA==", "bodyText": "done. please take a look", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r532921538", "createdAt": "2020-11-30T21:41:19Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.\n  */\n @Immutable\n-@AutoValue\n-public abstract class TraceState {\n-  private static final TraceState DEFAULT = TraceState.builder().build();\n+public interface TraceState {\n+\n+  TraceState DEFAULT = new TraceStateBuilder().build();\n \n   /**\n    * Returns the default {@code TraceState} with no entries.\n    *\n    * @return the default {@code TraceState}.\n    */\n-  public static TraceState getDefault() {\n+  static TraceState getDefault() {\n     return DEFAULT;\n   }\n \n+  /**\n+   * Returns a {@code Builder} based on an empty {@code TraceState}.\n+   *\n+   * @return a {@code Builder} based on an empty {@code TraceState}.\n+   */\n+  static TraceStateBuilder builder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU4Nw=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY0NzUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjo0M1rOH6IzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjo0M1rOH6IzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * here via the {@link TraceStateBuilder}.\n          \n          \n            \n             * here via the {@link TraceState#builder}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530723671", "createdAt": "2020-11-26T01:32:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceState.java", "diffHunk": "@@ -24,21 +21,40 @@\n  *\n  * <p>Value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\n  * range 0x20 to 0x7E) except comma , and =.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>Implementations of this interface that do not conform to the W3C specification risk\n+ * incompatibility with W3C-compatible implementations.\n+ *\n+ * <p>For these reasons, it is strongly suggested that you use the implementation that is provided\n+ * here via the {@link TraceStateBuilder}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY1MDI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozNDo0M1rOH6I1Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoyNjo0NFrOH6Jrpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDExOA==", "bodyText": "Thinking about your question about w3c prefix, it's a bit weird. The w3c'ness is only in this builder, not the TraceState, not sure how best to deal with that. I wonder if we should remove the validation from this class and do it in the propagator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530724118", "createdAt": "2020-11-26T01:34:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -10,27 +10,31 @@\n import java.util.Objects;\n import javax.annotation.Nullable;\n \n-/** A builder of {@link TraceState}. */\n+/**\n+ * A builder of {@link TraceState}. This implementation does full validation of the keys and values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzI4Mw==", "bodyText": "yeah...it's a weird thing to be first-class in the APIs, and not constrained to be part of the propagator, TBH. I was pondering only making this class prefixed with W3C, and leaving the TraceState itself to be generic.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530733283", "createdAt": "2020-11-26T02:08:43Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -10,27 +10,31 @@\n import java.util.Objects;\n import javax.annotation.Nullable;\n \n-/** A builder of {@link TraceState}. */\n+/**\n+ * A builder of {@link TraceState}. This implementation does full validation of the keys and values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDExOA=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczODA4Ng==", "bodyText": "I think I'd leave it as is then - the builder of TraceState being TraceStateBuilder seems clearer even with the w3c caveats.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530738086", "createdAt": "2020-11-26T02:26:44Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -10,27 +10,31 @@\n import java.util.Objects;\n import javax.annotation.Nullable;\n \n-/** A builder of {@link TraceState}. */\n+/**\n+ * A builder of {@link TraceState}. This implementation does full validation of the keys and values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNDExOA=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY1OTkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozOTo1MlrOH6I6mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0NTo1OVrOH8PGEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTUzMQ==", "bodyText": "This loop has a lot of shadiness :) Relies on entries.size() being invoked on every loop iteration (true in every language, but not something people expect to matter I think), and two calls to the same entries.remove(i) ouch. Let's use ListIterator.remove instead.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530725531", "createdAt": "2020-11-26T01:39:52Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczODI1MQ==", "bodyText": "Thought a bit more and realized the suggestion doesn't make much sense. Hmm - let's at least add comments if nothing comes to mind to clean up in this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530738251", "createdAt": "2020-11-26T02:27:23Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTUzMQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMzkyMQ==", "bodyText": "It doesn't actually rely on entries.size() being called each time, since we break as soon as we remove one. I'll extract out the size and add some comments.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r532923921", "createdAt": "2020-11-30T21:45:59Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNTUzMQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY2NzY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0NDowOFrOH6I-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1NDo0OVrOH8PYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjY0NQ==", "bodyText": "Inserting at the head of ArrayList looks like lots of overhead for the standard case of having no dupes, etc. Can we instead build up in opposite order and Collections.reverse in build? We'd need to reverse when copying from parent.getEntries() but I guess that's just a couple more lines of code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530726645", "createdAt": "2020-11-26T01:44:08Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);\n         entries.remove(i);\n         // Exit now because the entries list cannot contain duplicates.\n         break;\n       }\n     }\n     // Inserts the element at the front of this list.\n-    entries.add(0, entry);\n+    entries.add(0, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzgxMA==", "bodyText": "we could also consider just waiting until the final build to de-dupe. There are options here, for sure. Luckily, it's all internal, so we can make it better whenever.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530733810", "createdAt": "2020-11-26T02:10:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);\n         entries.remove(i);\n         // Exit now because the entries list cannot contain duplicates.\n         break;\n       }\n     }\n     // Inserts the element at the front of this list.\n-    entries.add(0, entry);\n+    entries.add(0, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjY0NQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyODU5Mw==", "bodyText": "we could put the working data into a LinkedList for easy insert efficiency, as well. there are definitely options here. Not sure how much I want to take on this PR, though.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r532928593", "createdAt": "2020-11-30T21:54:49Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -50,20 +54,21 @@ public TraceStateBuilder set(String key, String value) {\n       return this;\n     }\n     // Initially create the Entry to validate input.\n-    TraceState.Entry entry = TraceState.Entry.create(key, value);\n     if (entries == null) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(entry.getKey())) {\n+    for (int i = 0; i < entries.size(); i += 2) {\n+      if (entries.get(i).equals(key)) {\n+        entries.remove(i);\n         entries.remove(i);\n         // Exit now because the entries list cannot contain duplicates.\n         break;\n       }\n     }\n     // Inserts the element at the front of this list.\n-    entries.add(0, entry);\n+    entries.add(0, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjY0NQ=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY2Nzk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0NDoyNVrOH6I_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0NDoyNVrOH6I_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjY5OA==", "bodyText": "Looks like we can extract a private doRemove type of method that's used in both set and remove", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530726698", "createdAt": "2020-11-26T01:44:25Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TraceStateBuilder.java", "diffHunk": "@@ -81,8 +86,9 @@ public TraceStateBuilder remove(String key) {\n       // Copy entries from the parent.\n       entries = new ArrayList<>(parent.getEntries());\n     }\n-    for (int i = 0; i < entries.size(); i++) {\n-      if (entries.get(i).getKey().equals(key)) {\n+    for (int i = 0; i < entries.size(); i += 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY2OTMzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/trace/TraceStateTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0NTowN1rOH6I_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoxMTowNFrOH6JbVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjg5Mw==", "bodyText": "Ok ok, let me get asMap in soon :P", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530726893", "createdAt": "2020-11-26T01:45:07Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/trace/TraceStateTest.java", "diffHunk": "@@ -217,11 +217,11 @@ void addAndUpdateEntry() {\n             firstTraceState.toBuilder()\n                 .set(FIRST_KEY, SECOND_VALUE) // update the existing entry\n                 .set(SECOND_KEY, FIRST_VALUE) // add a new entry\n-                .build()\n-                .getEntries())\n-        .containsExactly(\n-            TraceState.Entry.create(SECOND_KEY, FIRST_VALUE),\n-            TraceState.Entry.create(FIRST_KEY, SECOND_VALUE));\n+                .build())\n+        .asInstanceOf(type(ArrayBasedTraceState.class))\n+        .extracting(ArrayBasedTraceState::getEntries)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzkxMQ==", "bodyText": "hah!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2138#discussion_r530733911", "createdAt": "2020-11-26T02:11:04Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/trace/TraceStateTest.java", "diffHunk": "@@ -217,11 +217,11 @@ void addAndUpdateEntry() {\n             firstTraceState.toBuilder()\n                 .set(FIRST_KEY, SECOND_VALUE) // update the existing entry\n                 .set(SECOND_KEY, FIRST_VALUE) // add a new entry\n-                .build()\n-                .getEntries())\n-        .containsExactly(\n-            TraceState.Entry.create(SECOND_KEY, FIRST_VALUE),\n-            TraceState.Entry.create(FIRST_KEY, SECOND_VALUE));\n+                .build())\n+        .asInstanceOf(type(ArrayBasedTraceState.class))\n+        .extracting(ArrayBasedTraceState::getEntries)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjg5Mw=="}, "originalCommit": {"oid": "bac3d1b4109325b9c7ed378d1a62e9c3538c6034"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1781, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}