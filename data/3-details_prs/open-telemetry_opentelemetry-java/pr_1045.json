{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjA0Mjk1", "number": 1045, "title": "Fill in the Metrics details in the Getting Started guide.", "bodyText": "Updates #1002\nSome copy paste from Python's guide https://github.com/open-telemetry/opentelemetry-python/blob/master/docs/getting-started.rst#adding-metrics\nwith Java example", "createdAt": "2020-03-27T07:54:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045", "merged": true, "mergeCommit": {"oid": "66aab81258d598bec719f7b5a76c59889f7b5ac0"}, "closed": true, "closedAt": "2020-03-30T20:37:10Z", "author": {"login": "malafeev"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRr5-NAH2gAyMzk0NjA0Mjk1OjQyODA4YThjZjllYThmYzRiMTJkZTllOTdmMjMxZWJmNGI3NGNmMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSxwN6AFqTM4NDA2NDc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "committedDate": "2020-03-27T07:52:02Z", "message": "#1002 Fill in the Metrics details in the Getting Started guide.\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjQ2MTcy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-382646172", "createdAt": "2020-03-27T08:06:56Z", "commit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjQyNjE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-382642619", "createdAt": "2020-03-27T07:59:38Z", "commit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1OTozOFrOF8mgqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoxMToxN1rOF8mzEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTgzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n          \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n          \n      \n    \n    \n  \n\nI'd use the same as in the examples above.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399089832", "createdAt": "2020-03-27T07:59:38Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkBound.add(123);\n          \n          \n            \n            BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkCounter .add(123);\n          \n      \n    \n    \n  \n\nbind needs to be supplied with a list of key/value pairs, not just the values.\nAlso the use of \"Bound\" as a subject name was dropped a while ago.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399094545", "createdAt": "2020-03-27T08:11:17Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4dde8dd883786a53b9c57a4d2e7e3460e351f663", "committedDate": "2020-03-27T08:20:29Z", "message": "#1002 implement suggested changes\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzAwMTU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-382700155", "createdAt": "2020-03-27T09:33:15Z", "commit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTAyNzEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-382902710", "createdAt": "2020-03-27T14:22:56Z", "commit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMjo1NlrOF8zWtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMjo1NlrOF8zWtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDI3OA==", "bodyText": "Consider to remove for the moment the set label key. For the moment we don't do anything with that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399300278", "createdAt": "2020-03-27T14:22:56Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a5d6f92ca173b957630428c13b0ff9bf2dd79de6", "committedDate": "2020-03-30T03:51:44Z", "message": "#1002 remove set label key\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDIxNzc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-384021775", "createdAt": "2020-03-30T16:22:19Z", "commit": {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMjoxOVrOF9xzOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMjoxOVrOF9xzOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzM4Nw==", "bodyText": "We should specify that we expect this to stay alive for the entire time or call unbind when no-longer needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400323387", "createdAt": "2020-03-30T16:22:19Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,35 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1511a7f7c9475f29b4d3d92eb69441ff087db9ee", "committedDate": "2020-03-30T16:28:21Z", "message": "#1002 add clarification to counter bind\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDY0Nzk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#pullrequestreview-384064794", "createdAt": "2020-03-30T17:14:43Z", "commit": {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNDo0NFrOF9z6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNDo0NFrOF9z6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Nzk3OQ==", "bodyText": "I'd remove the \"semver:\" from the beginning of the version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400357979", "createdAt": "2020-03-30T17:14:44Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2875, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}