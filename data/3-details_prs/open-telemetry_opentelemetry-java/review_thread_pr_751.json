{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzUwNTk4", "number": 751, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNDo0NVrODXtrKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NToxMFrODYACdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTkyMTY4OnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNDo0NVrOFdKS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNDo0NVrOFdKS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyMTcyMw==", "bodyText": "This should be used in the SpanData.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366121723", "createdAt": "2020-01-14T02:04:45Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -59,8 +58,6 @@\n   // The displayed name of the span.\n   // List of recorded links to parent and child spans.\n   private final List<Link> links;\n-  // Number of links recorded.\n-  private final int totalRecordedLinks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759a3d2f0a440d67624c0d7317808b9bceb945d0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTkyNDM0OnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNjo0N1rOFdKUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNjo0N1rOFdKUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyMjEyNw==", "bodyText": "This should be used in the SpanData see https://github.com/open-telemetry/opentelemetry-proto/blob/master/opentelemetry/proto/trace/v1/trace.proto#L35 for where in the SpanData is used.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366122127", "createdAt": "2020-01-14T02:06:47Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -83,12 +80,6 @@\n   // List of recorded events.\n   @GuardedBy(\"lock\")\n   private final EvictingQueue<TimedEvent> events;\n-  // Number of events recorded.\n-  @GuardedBy(\"lock\")\n-  private int totalRecordedEvents = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759a3d2f0a440d67624c0d7317808b9bceb945d0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTkyNjEzOnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNzo0MVrOFdKVgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjowNzo0MVrOFdKVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyMjM2OQ==", "bodyText": "We should use this if we don't already.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366122369", "createdAt": "2020-01-14T02:07:41Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -83,12 +80,6 @@\n   // List of recorded events.\n   @GuardedBy(\"lock\")\n   private final EvictingQueue<TimedEvent> events;\n-  // Number of events recorded.\n-  @GuardedBy(\"lock\")\n-  private int totalRecordedEvents = 0;\n-  // The number of children.\n-  @GuardedBy(\"lock\")\n-  private int numberOfChildren;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759a3d2f0a440d67624c0d7317808b9bceb945d0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkzMDQ3OnYy", "diffSide": "LEFT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NToxMFrOFdnD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxMjoyNVrOFdng3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw==", "bodyText": "Why do we remove these tests?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366592993", "createdAt": "2020-01-14T21:55:10Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MzcxMw==", "bodyText": "as far as I could tell, these tests weren't actually providing any value, or were testing internals where we could be testing via the SpanData instead.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366593713", "createdAt": "2020-01-14T21:56:54Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw=="}, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDA2NQ==", "bodyText": "If you think that noting that the clock isn't somehow swapped out by something is important, then I can re-instate them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366594065", "createdAt": "2020-01-14T21:57:44Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw=="}, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NTg2NQ==", "bodyText": "I think the test were to prove that the Builder when creates a child Span inherits the Clock from the parent which I don't think it is tested with SpanData.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366595865", "createdAt": "2020-01-14T22:01:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw=="}, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NjU0OQ==", "bodyText": "Yeah, I guessed that was the purpose, but it seems like any other answer would be very strange. I can put them back if you feel they provide value.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366596549", "createdAt": "2020-01-14T22:03:32Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw=="}, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMDQxMw==", "bodyText": "added back, with cleaned up naming.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/751#discussion_r366600413", "createdAt": "2020-01-14T22:12:25Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -420,40 +420,12 @@ public void parent_invalidContext() {\n             tracerSdk.spanBuilder(SPAN_NAME).setParent(parent.getContext()).startSpan();\n     try {\n       assertThat(span.getContext().getTraceId()).isNotEqualTo(parent.getContext().getTraceId());\n-      assertFalse(span.getParentSpanId().isValid());\n+      assertFalse(span.toSpanData().getParentSpanId().isValid());\n     } finally {\n       span.end();\n     }\n   }\n \n-  @Test\n-  public void parent_timestampConverter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mjk5Mw=="}, "originalCommit": {"oid": "ac5c95f406e49b2344469450fae706a7d6c53da1"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1158, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}