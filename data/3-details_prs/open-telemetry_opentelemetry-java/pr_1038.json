{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODQ5NjQy", "number": 1038, "title": "test: end to end opentelemetry test with jaeger exporter", "bodyText": "End to end test with Jaeger all in one\nShould solve #498", "createdAt": "2020-03-21T11:53:39Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038", "merged": true, "mergeCommit": {"oid": "26d4dbfb4be350cfb7812b2ca748c2a1c390beb2"}, "closed": true, "closedAt": "2020-03-27T14:04:03Z", "author": {"login": "DotSpy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPzucZAH2gAyMzkxODQ5NjQyOmFiNjNiMjZjMDY4N2MwOWVmZjA1MGQwYTFmYTNhNjYxZWQ4YTRmM2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRxOdOAFqTM4Mjg4NjA4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab63b26c0687c09eff050d0a1fa3a661ed8a4f3f", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab63b26c0687c09eff050d0a1fa3a661ed8a4f3f", "committedDate": "2020-03-21T11:50:50Z", "message": "test: end to end opentelemetry test with jaeger exporter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924d2ef673ad609a9529a721afb7d98866b7d7b1", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/924d2ef673ad609a9529a721afb7d98866b7d7b1", "committedDate": "2020-03-21T11:58:00Z", "message": "fix: add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68caa9089b7ef16e0c7fee4df6af16cf3868e503", "committedDate": "2020-03-21T12:12:12Z", "message": "build: circle ci use machine executor type\n\nhttps://www.testcontainers.org/supported_docker_environment/continuous_integration/circle_ci/"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDk3MjMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-379097230", "createdAt": "2020-03-23T02:15:56Z", "commit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoxNTo1N1rOF51Icg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyMDowMlrOF51LWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng==", "bodyText": "Why do we need this change? Can you document if this is required why.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396183666", "createdAt": "2020-03-23T02:15:57Z", "author": {"login": "bogdandrutu"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA==", "bodyText": "Can we file an issue to remove the serviceName from the Jaeger config and use the Resource to define service?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396184408", "createdAt": "2020-03-23T02:20:02Z", "author": {"login": "bogdandrutu"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTcyMTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-379172121", "createdAt": "2020-03-23T07:07:18Z", "commit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzoxOFrOF544kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxNjo0MFrOF55EhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String JAEGER_IP = \"http://localhost\";\n          \n          \n            \n              private static final String JAEGER_URL = \"http://localhost\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396245137", "createdAt": "2020-03-23T07:07:18Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjA0Ng==", "bodyText": "Maybe use getClass().getCanonicalName()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246046", "createdAt": "2020-03-23T07:10:08Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ==", "bodyText": "I would move this method after the definition of the jaeger container", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246669", "createdAt": "2020-03-23T07:12:12Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NzM4NQ==", "bodyText": "@bogdandrutu it exists already: #978", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396247385", "createdAt": "2020-03-23T07:14:15Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODA0OQ==", "bodyText": "Also, WDYT about adding @before?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248049", "createdAt": "2020-03-23T07:16:15Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng==", "bodyText": "this can be add to a SetUp method - see my other comment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248196", "createdAt": "2020-03-23T07:16:40Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/387d07be42b35bd96758cb0097f19f1a275e58c9", "committedDate": "2020-03-23T08:31:49Z", "message": "Update exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java\n\nCo-Authored-By: Giovanni Liva <giovanni.liva@dynatrace.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjM2NDA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-379236409", "createdAt": "2020-03-23T09:01:45Z", "commit": {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMTo0NVrOF58Eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMTo0NVrOF58Eew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NzMzOQ==", "bodyText": "Am I missing something. The code is not using testcontainers. This could be done without testcontainers. Just generate the collector service and keep the spans in a list.\nThis might help you to use testcontainers with Jaeger https://github.com/jaegertracing/jaeger-analytics-java/blob/master/proto/src/test/java/io/jaegertracing/api_v2/GrpcQueryTest.java#L20", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396297339", "createdAt": "2020-03-23T09:01:45Z", "author": {"login": "pavolloffay"}, "path": "build.gradle", "diffHunk": "@@ -125,6 +125,8 @@ subprojects {\n                 truth                : 'com.google.truth:truth:1.0',\n                 slf4jsimple          : 'org.slf4j:slf4j-simple:1.7.25', // Compatibility layer\n                 awaitility           : 'org.awaitility:awaitility:3.0.0', // Compatibility layer\n+                testcontainers       : 'org.testcontainers:testcontainers:1.13.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d6c4c0f0bf72d87b8a8b458d3b650b31a32328", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/81d6c4c0f0bf72d87b8a8b458d3b650b31a32328", "committedDate": "2020-03-23T17:37:18Z", "message": "refactor: apply review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6d91741c99f5534786d5dd4bc563c7cc23030e", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa6d91741c99f5534786d5dd4bc563c7cc23030e", "committedDate": "2020-03-23T17:40:21Z", "message": "style: apply google code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf3a96300e1373e9b307ed8593729b42ad74423", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9cf3a96300e1373e9b307ed8593729b42ad74423", "committedDate": "2020-03-24T17:47:11Z", "message": "docs: add comment explaining why executor type machine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODk5MjU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-380899254", "createdAt": "2020-03-25T07:12:22Z", "commit": {"oid": "9cf3a96300e1373e9b307ed8593729b42ad74423"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMjY0NzA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-381264709", "createdAt": "2020-03-25T15:30:37Z", "commit": {"oid": "9cf3a96300e1373e9b307ed8593729b42ad74423"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e886f5204e401d6c74895f4866f3b449ba743b3", "author": {"user": {"login": "vladislav-kiva", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e886f5204e401d6c74895f4866f3b449ba743b3", "committedDate": "2020-03-26T09:32:04Z", "message": "fix: remove setup as it run via @Before"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODg2MDg5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#pullrequestreview-382886089", "createdAt": "2020-03-27T14:03:56Z", "commit": {"oid": "1e886f5204e401d6c74895f4866f3b449ba743b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3241, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}