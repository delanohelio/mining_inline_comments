{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODYwMzAz", "number": 2060, "title": "Alternative OpenCensus shim implementation", "bodyText": "This implements the alternative shim approach suggested at #2013:\n\u2705  The OpenCensus.Tracer will be a simple wrapper of the OpenTelemetry.Tracer with a name \"opencensus\".\n\u2705  The PropagationComponent can be implemented by wrapping the propagators from OpenTelemetry (w3c, b3). One small problem is that you will need to re-implement the BinaryFormat (this is most likely a duplicate code).\n\u2705  The clock does not need to be re-implemented. just return the Millis clock.\n\u2611\ufe0f  The ExporterComponent has not been implemented as we are dropping all OpenCensus spans and only exporting OpenTelemetry spans.\n\u2611\ufe0f The TraceConfig seems unlikely to be used, so leaving it unmapped here unless someone actually asks for it.", "createdAt": "2020-11-11T00:39:51Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060", "merged": true, "mergeCommit": {"oid": "0c5be3a723666507ecb861505893109f00d0d683"}, "closed": true, "closedAt": "2020-12-21T05:36:07Z", "author": {"login": "zoercai"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVBS_1AH2gAyNTE4ODYwMzAzOmU0NjY4ZWYwNDA1OTc5YzcyNGQxODg1ZjMzNzM0NDk0YzlkYjI1ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoOt0BgH2gAyNTE4ODYwMzAzOjE0NmVhNWRmYjMxNzZlNzdiYjQxOGY1MDIxMjMzNzFmZTQ1NTRhODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4668ef0405979c724d1885f33734494c9db2581", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e4668ef0405979c724d1885f33734494c9db2581", "committedDate": "2020-10-22T12:40:18Z", "message": "Add OpenCensus shim"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/48698c19e373d62c2b7949875157e44b015aa414", "committedDate": "2020-10-22T12:55:40Z", "message": "Fix dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39649c7893ac47e426d50ae1e5c95725d827264b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/39649c7893ac47e426d50ae1e5c95725d827264b", "committedDate": "2020-10-26T22:21:41Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2fd4f24a71e808f901f442ad377e03455176a7", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a2fd4f24a71e808f901f442ad377e03455176a7", "committedDate": "2020-10-27T03:04:00Z", "message": "Add interoperability test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a27ff3295f687b2540dbc1379f98d0e07036b4", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5a27ff3295f687b2540dbc1379f98d0e07036b4", "committedDate": "2020-10-27T03:08:04Z", "message": "Add interoperability test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22fa46a1182eccead6a7471a8f25f8d0a88eb37b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22fa46a1182eccead6a7471a8f25f8d0a88eb37b", "committedDate": "2020-10-27T07:39:21Z", "message": "Add interoperability test: all opencensus spans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d00fa47fcad9a1f11b69c47d2767f2c70c6fd1", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7d00fa47fcad9a1f11b69c47d2767f2c70c6fd1", "committedDate": "2020-10-28T06:34:26Z", "message": "Fix license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cce0645f38d7e46b5baedd9c62e44b855a12524", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6cce0645f38d7e46b5baedd9c62e44b855a12524", "committedDate": "2020-10-28T07:09:46Z", "message": "fix build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10b5697aa36b24afce0b34334177fbc7112f1b47", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/10b5697aa36b24afce0b34334177fbc7112f1b47", "committedDate": "2020-10-28T07:10:42Z", "message": "fix build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10d6270ac0b528c61b0bcb21d906d1608000e2a", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c10d6270ac0b528c61b0bcb21d906d1608000e2a", "committedDate": "2020-10-28T07:12:57Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "999e580d3af5e102891dafe740af699a2f266e67", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/999e580d3af5e102891dafe740af699a2f266e67", "committedDate": "2020-10-28T08:57:48Z", "message": "Pull upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c4c8bc25b4a35e7d6224aecbcfeb175779ef318d", "committedDate": "2020-10-29T01:25:06Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0fdee0b4d7ca883aa0d0381cfd6c434a9a3fb9d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f0fdee0b4d7ca883aa0d0381cfd6c434a9a3fb9d", "committedDate": "2020-10-30T01:05:15Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f08ae2ec12ef533ea3d43ae74fc32787fac226", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99f08ae2ec12ef533ea3d43ae74fc32787fac226", "committedDate": "2020-11-02T12:22:25Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e198ae5957e0e745087da71a4cdba1e87b8423", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1e198ae5957e0e745087da71a4cdba1e87b8423", "committedDate": "2020-11-02T12:22:56Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef130f38f9684883d295070c837da12854378930", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ef130f38f9684883d295070c837da12854378930", "committedDate": "2020-11-02T12:31:52Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b2fb17f8e44fad97c16035645076a8134fa8635", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b2fb17f8e44fad97c16035645076a8134fa8635", "committedDate": "2020-11-04T04:22:40Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e64a65f97d296e37c9a0e684aeb8e35d3d8814b2", "committedDate": "2020-11-04T05:46:46Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8df4ca71aac237959fd1162533b5239f1f5c91", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cc8df4ca71aac237959fd1162533b5239f1f5c91", "committedDate": "2020-11-11T00:22:48Z", "message": "Alternative shim approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954efa22895a14316abd47540b0c48d154de1fb8", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/954efa22895a14316abd47540b0c48d154de1fb8", "committedDate": "2020-11-11T00:39:06Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache\n\n# Conflicts:\n#\topencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java\n#\topencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java\n#\topencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java\n#\topencensus-shim/src/test/java/io/opentelemetry/opencensusshim/SpanConverterTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODU1MTU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-527855158", "createdAt": "2020-11-11T04:33:39Z", "commit": {"oid": "954efa22895a14316abd47540b0c48d154de1fb8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDozMzozOVrOHw9zVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDozNDozMVrOHw90aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNjI2Mw==", "bodyText": "This file is missing a licence header, and I'm actually not sure what should we put here, since parts of the code were copied from OpenCensus IIUC?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r521106263", "createdAt": "2020-11-11T04:33:39Z", "author": {"login": "nilebox"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.opentelemetry.opencensusshim;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954efa22895a14316abd47540b0c48d154de1fb8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwNjUzOQ==", "bodyText": "nit: Do we even need to perform these checks if the implementation is a no-op?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r521106539", "createdAt": "2020-11-11T04:34:31Z", "author": {"login": "nilebox"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Status;\n+import java.util.EnumSet;\n+import java.util.Map;\n+\n+public class OpenTelemetryNoRecordEventsSpanImpl extends Span {\n+  private static final EnumSet<Options> NOT_RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.noneOf(Options.class);\n+\n+  static OpenTelemetryNoRecordEventsSpanImpl create(SpanContext context) {\n+    return new OpenTelemetryNoRecordEventsSpanImpl(context);\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(description, \"description\");\n+    Preconditions.checkNotNull(attributes, \"attribute\");\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    Preconditions.checkNotNull(annotation, \"annotation\");\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954efa22895a14316abd47540b0c48d154de1fb8"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12129a5affe118671f2efec5c01983f97d38fc40", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/12129a5affe118671f2efec5c01983f97d38fc40", "committedDate": "2020-11-16T11:23:00Z", "message": "Fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDI1Njg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-532425684", "createdAt": "2020-11-17T14:37:02Z", "commit": {"oid": "12129a5affe118671f2efec5c01983f97d38fc40"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDozNzowMlrOH031cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0NjowN1rOH04RPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwMjgwMg==", "bodyText": "Why protected?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r525202802", "createdAt": "2020-11-17T14:37:02Z", "author": {"login": "bogdandrutu"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.internal.TimestampConverter;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  // The time converter used to convert nano time to Timestamp. This is needed because Java has\n+  // millisecond granularity for Timestamp and tracing events are recorded more often.\n+  private final TimestampConverter timestampConverter;\n+\n+  private final RecordEventsSpanImpl ocSpan;\n+  private final io.opentelemetry.api.trace.Span otSpan;\n+\n+  /**\n+   * Creates a new {@code Span}.\n+   *\n+   * @param context the context associated with this {@code Span}.\n+   * @param options the options associated with this {@code Span}. If {@code null} then default\n+   *     options will be set.\n+   * @param timestampConverter time stamp converter\n+   * @throws NullPointerException if context is {@code null}.\n+   * @throws IllegalArgumentException if the {@code SpanContext} is sampled but no RECORD_EVENTS\n+   *     options.\n+   * @since 0.5\n+   */\n+  protected OpenTelemetrySpanImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12129a5affe118671f2efec5c01983f97d38fc40"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTkxOQ==", "bodyText": "Maybe I miss something, but I would see this simpler than this:\npublic class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\nprivate final otel.Builder builder;\n... // All methods redirect to the otel builder\n}\npublic class OpenCensusSpanWrapper extends oc.Span {\nprivate final otel.ReadableSpan;\nprivate final oc.SpanContext;  // probably worth constructing this once not when getContext is called.\n... // All methods redirect to the\n}\nCan you tell me if this is possible?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r525209919", "createdAt": "2020-11-17T14:46:07Z", "author": {"login": "bogdandrutu"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.internal.TimestampConverter;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12129a5affe118671f2efec5c01983f97d38fc40"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633d7d8b92ccc55af6addd2a15f7efb1035b4515", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/633d7d8b92ccc55af6addd2a15f7efb1035b4515", "committedDate": "2020-11-18T10:51:52Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2833cd5560041c31066e4adae414731a90232cea", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2833cd5560041c31066e4adae414731a90232cea", "committedDate": "2020-11-18T11:09:14Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fce6f1a19f4207b93c6e0556eb2c3fff7839067", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5fce6f1a19f4207b93c6e0556eb2c3fff7839067", "committedDate": "2020-11-23T01:51:19Z", "message": "Small refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fed6b2efc3fb79e844fac2ad4668daa229a4dd1", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0fed6b2efc3fb79e844fac2ad4668daa229a4dd1", "committedDate": "2020-11-23T01:52:28Z", "message": "Small refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05aa31fa404665f25f83ff597edd4f9d4057392b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/05aa31fa404665f25f83ff597edd4f9d4057392b", "committedDate": "2020-11-23T02:58:01Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d4b47e1b202197f54360b23c9eb47c9eaab1db", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84d4b47e1b202197f54360b23c9eb47c9eaab1db", "committedDate": "2020-11-23T03:21:00Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache\n\n# Conflicts:\n#\topencensus-shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9e2d300a48cf696fcded2d8eb984f2bf481df9", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f9e2d300a48cf696fcded2d8eb984f2bf481df9", "committedDate": "2020-11-26T04:56:02Z", "message": "Add binary format converter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b387735a3215a887663f671de68f785af6e99b7", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1b387735a3215a887663f671de68f785af6e99b7", "committedDate": "2020-11-26T05:18:22Z", "message": "Fix flaky test NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7d8b25cb24466f5a678cfd67dd5769fe599d4e", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e7d8b25cb24466f5a678cfd67dd5769fe599d4e", "committedDate": "2020-11-26T07:39:13Z", "message": "Add propagators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcec92249b027f2b1cd134693aef059950e934b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0fcec92249b027f2b1cd134693aef059950e934b", "committedDate": "2020-11-26T07:53:27Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b418d64b3becf54927eb6287840d44999e656c", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22b418d64b3becf54927eb6287840d44999e656c", "committedDate": "2020-11-26T07:55:41Z", "message": "fix deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "173ebbaca08dc69c717da433f8b5ea6f02260df4", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/173ebbaca08dc69c717da433f8b5ea6f02260df4", "committedDate": "2020-11-27T01:56:38Z", "message": "Add test for binary format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf90075bc392b53d6da498fc6999238e3b1766d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dbf90075bc392b53d6da498fc6999238e3b1766d", "committedDate": "2020-11-27T01:59:11Z", "message": "Nits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42a29e39ea83ca3227d57739447dab0fdc944f5d", "committedDate": "2020-11-27T02:00:40Z", "message": "Nits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODEyNDYy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-539812462", "createdAt": "2020-11-27T09:08:42Z", "commit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "state": "COMMENTED", "comments": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTowODo0MlrOH62SFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0MjozMlrOH63bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return new ArrayList<>();\n          \n          \n            \n                            // OC Getter cannot return keys for an object, but users should not need it either.\n          \n          \n            \n                            return Collections.emptyList();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531468821", "createdAt": "2020-11-27T09:08:42Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.TextFormat;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetryB3FormatImpl extends TextFormat {\n+\n+  private static final B3Propagator OTEL_B3_PROPAGATOR =\n+      B3Propagator.builder().injectMultipleHeaders().build();\n+\n+  @Override\n+  public List<String> fields() {\n+    return OTEL_B3_PROPAGATOR.fields();\n+  }\n+\n+  @Override\n+  public <C> void inject(SpanContext spanContext, C carrier, Setter<C> setter) {\n+    io.opentelemetry.api.trace.SpanContext otelSpanContext = mapSpanContext(spanContext);\n+    Context otelContext = Context.current().with(Span.wrap(otelSpanContext));\n+    OTEL_B3_PROPAGATOR.inject(otelContext, carrier, setter::put);\n+  }\n+\n+  @Override\n+  public <C> SpanContext extract(C carrier, Getter<C> getter) {\n+    Context context =\n+        OTEL_B3_PROPAGATOR.extract(\n+            Context.current(),\n+            carrier,\n+            new TextMapPropagator.Getter<C>() {\n+              @Override\n+              public Iterable<String> keys(C carrier) {\n+                return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTI0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryB3FormatImpl extends TextFormat {\n          \n          \n            \n            class OpenTelemetryB3FormatImpl extends TextFormat {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531469240", "createdAt": "2020-11-27T09:09:27Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.TextFormat;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetryB3FormatImpl extends TextFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryBinaryFormatImpl extends BinaryFormat {\n          \n          \n            \n            class OpenTelemetryBinaryFormatImpl extends BinaryFormat {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531469340", "createdAt": "2020-11-27T09:09:38Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryBinaryFormatImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opencensus.internal.Utils;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+\n+public class OpenTelemetryBinaryFormatImpl extends BinaryFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MTA1OA==", "bodyText": "Add a comment something like OpenCensus's code for BinaryFormat is in the implementation, not API. Since we don't want to depend on the implementation for shim users, we reimplement it here.\nAlso, let's just copy https://github.com/census-instrumentation/opencensus-java/blob/0a2f5799a2809b84e4c0da4b2cb743b798ca0fc8/impl_core/src/main/java/io/opencensus/implcore/trace/propagation/BinaryFormatImpl.java 100% - there seems to be no benefit in mapping into the OTel types here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531471058", "createdAt": "2020-11-27T09:12:41Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryBinaryFormatImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opencensus.internal.Utils;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+\n+public class OpenTelemetryBinaryFormatImpl extends BinaryFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MA=="}, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MTY0MA==", "bodyText": "Also I think this should be OpenTelemetryTextFormat and it can have a constructor to accept any TextMapPropagator instead of being hardcoded to b3.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531471640", "createdAt": "2020-11-27T09:13:46Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.TextFormat;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetryB3FormatImpl extends TextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTI0MA=="}, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MzAxNA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531473014", "createdAt": "2020-11-27T09:15:53Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -21,11 +21,8 @@\n \n   private static final Logger LOGGER =\n       Logger.getLogger(OpenTelemetryContextManager.class.getName());\n-  private final SpanCache spanCache;\n \n-  public OpenTelemetryContextManager() {\n-    this.spanCache = SpanCache.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MzY3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryNoRecordEventsSpanImpl extends Span\n          \n          \n            \n            class OpenTelemetryNoRecordEventsSpanImpl extends Span", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531473670", "createdAt": "2020-11-27T09:17:06Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetryNoRecordEventsSpanImpl extends Span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NDE3Mw==", "bodyText": "Let's go ahead and put the constructor above the methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531474173", "createdAt": "2020-11-27T09:17:59Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetryNoRecordEventsSpanImpl extends Span\n+    implements io.opentelemetry.api.trace.Span {\n+  private static final EnumSet<Options> NOT_RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.noneOf(Options.class);\n+\n+  static OpenTelemetryNoRecordEventsSpanImpl create(SpanContext context) {\n+    return new OpenTelemetryNoRecordEventsSpanImpl(context);\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(description, \"description\");\n+    Preconditions.checkNotNull(attributes, \"attribute\");\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    Preconditions.checkNotNull(annotation, \"annotation\");\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+  }\n+\n+  @Override\n+  public void addMessageEvent(MessageEvent messageEvent) {\n+    Preconditions.checkNotNull(messageEvent, \"messageEvent\");\n+  }\n+\n+  @Override\n+  public void addLink(Link link) {\n+    Preconditions.checkNotNull(link, \"link\");\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    Preconditions.checkNotNull(status, \"status\");\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode, String description) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void end(EndSpanOptions options) {\n+    Preconditions.checkNotNull(options, \"options\");\n+  }\n+\n+  @Override\n+  public void end(long timestamp, TimeUnit unit) {\n+    // do nothing\n+  }\n+\n+  private OpenTelemetryNoRecordEventsSpanImpl(SpanContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NDUxMw==", "bodyText": "return this instead of return null throughout", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531474513", "createdAt": "2020-11-27T09:18:35Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetryNoRecordEventsSpanImpl extends Span\n+    implements io.opentelemetry.api.trace.Span {\n+  private static final EnumSet<Options> NOT_RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.noneOf(Options.class);\n+\n+  static OpenTelemetryNoRecordEventsSpanImpl create(SpanContext context) {\n+    return new OpenTelemetryNoRecordEventsSpanImpl(context);\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(description, \"description\");\n+    Preconditions.checkNotNull(attributes, \"attribute\");\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    Preconditions.checkNotNull(annotation, \"annotation\");\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+  }\n+\n+  @Override\n+  public void addMessageEvent(MessageEvent messageEvent) {\n+    Preconditions.checkNotNull(messageEvent, \"messageEvent\");\n+  }\n+\n+  @Override\n+  public void addLink(Link link) {\n+    Preconditions.checkNotNull(link, \"link\");\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    Preconditions.checkNotNull(status, \"status\");\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode, String description) {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NDcxOA==", "bodyText": "Shouldn't it be the mapped context, not invalid? Is SpanContext guaranteed to be invalid in the constructor? I'm guessing no since in that case we wouldn't even need a constructor parameter for it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531474718", "createdAt": "2020-11-27T09:18:58Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryNoRecordEventsSpanImpl.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetryNoRecordEventsSpanImpl extends Span\n+    implements io.opentelemetry.api.trace.Span {\n+  private static final EnumSet<Options> NOT_RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.noneOf(Options.class);\n+\n+  static OpenTelemetryNoRecordEventsSpanImpl create(SpanContext context) {\n+    return new OpenTelemetryNoRecordEventsSpanImpl(context);\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(description, \"description\");\n+    Preconditions.checkNotNull(attributes, \"attribute\");\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    Preconditions.checkNotNull(annotation, \"annotation\");\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+  }\n+\n+  @Override\n+  public void addMessageEvent(MessageEvent messageEvent) {\n+    Preconditions.checkNotNull(messageEvent, \"messageEvent\");\n+  }\n+\n+  @Override\n+  public void addLink(Link link) {\n+    Preconditions.checkNotNull(link, \"link\");\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    Preconditions.checkNotNull(status, \"status\");\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode, String description) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void end(EndSpanOptions options) {\n+    Preconditions.checkNotNull(options, \"options\");\n+  }\n+\n+  @Override\n+  public void end(long timestamp, TimeUnit unit) {\n+    // do nothing\n+  }\n+\n+  private OpenTelemetryNoRecordEventsSpanImpl(SpanContext context) {\n+    super(context, NOT_RECORD_EVENTS_SPAN_OPTIONS);\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setAttribute(String key, @Nonnull String value) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setAttribute(String key, long value) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setAttribute(String key, double value) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setAttribute(String key, boolean value) {\n+    return null;\n+  }\n+\n+  @Override\n+  public <T> io.opentelemetry.api.trace.Span setAttribute(AttributeKey<T> key, @Nonnull T value) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span addEvent(String name) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span addEvent(String name, long timestamp, TimeUnit unit) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span addEvent(String name, Attributes attributes) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span addEvent(\n+      String name, Attributes attributes, long timestamp, TimeUnit unit) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span recordException(Throwable exception) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span recordException(\n+      Throwable exception, Attributes additionalAttributes) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span updateName(String name) {\n+    return null;\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.SpanContext getSpanContext() {\n+    return io.opentelemetry.api.trace.SpanContext.getInvalid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NTU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryPropagationComponentImpl extends PropagationComponent {\n          \n          \n            \n            class OpenTelemetryPropagationComponentImpl extends PropagationComponent {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531475549", "createdAt": "2020-11-27T09:20:26Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryPropagationComponentImpl.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+import io.opencensus.trace.propagation.TextFormat;\n+\n+public class OpenTelemetryPropagationComponentImpl extends PropagationComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NTgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n          \n          \n            \n            class OpenTelemetrySpanBuilderImpl extends SpanBuilder {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531475836", "createdAt": "2020-11-27T09:20:56Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NjE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n          \n          \n            \n                  OpenTelemetry.getGlobalTracer(\"io.opentelemetry.opencensusshim\");\n          \n      \n    \n    \n  \n\nUnless a specific reason for the other name, we want this name to be the name of the instrumentation library, not the instrumented one, so I think it's the shim in this case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531476173", "createdAt": "2020-11-27T09:21:35Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NjgxNA==", "bodyText": "I think we need to prefix almost every variable in this file with either oc or otel, quite hard to read right now", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531476814", "createdAt": "2020-11-27T09:22:44Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NzA0Nw==", "bodyText": "Or at least otel for all otel (e.g., OTEL_TRACER)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531477047", "createdAt": "2020-11-27T09:23:15Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NjgxNA=="}, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3OTc5MQ==", "bodyText": "@bogdandrutu If I'm not mistaken, we can't eagerly delegate to OTel because it doesn't have setRecordEvents or setSampler. Having setSampler on OTel's SpanBuilder seems useful to me but guess it's a spec change. setRecordEvents we shouldn't need since pretty sure that can just be implemented as setSampler(ALWAYS_OFF). If we could do it, then all the logic in this class goes away I think (would need mapSampler to shim the sampler)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531479791", "createdAt": "2020-11-27T09:28:15Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.internal.TimestampConverter;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTkxOQ=="}, "originalCommit": {"oid": "12129a5affe118671f2efec5c01983f97d38fc40"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean hasRemoteParent = null;\n          \n          \n            \n                boolean hasRemoteParent = false;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531480865", "createdAt": "2020-11-27T09:30:09Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();\n+  private static final TraceOptions SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(true).build();\n+  private static final TraceOptions NOT_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(false).build();\n+\n+  private final String name;\n+  private final Options options;\n+\n+  private List<Span> parentLinks = Collections.emptyList();\n+  private final List<io.opentelemetry.api.trace.SpanContext> otelParentLinks = new ArrayList<>();\n+  @Nullable private final Span parent;\n+  @Nullable private final SpanContext remoteParentSpanContext;\n+  @Nullable private Sampler sampler;\n+  @Nullable private Boolean recordEvents;\n+  @Nullable private io.opentelemetry.api.trace.Span.Kind kind;\n+\n+  @Override\n+  public SpanBuilder setSampler(Sampler sampler) {\n+    this.sampler = checkNotNull(sampler, \"sampler\");\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setParentLinks(List<Span> parentLinks) {\n+    this.parentLinks = checkNotNull(parentLinks, \"parentLinks\");\n+    for (Span parent : parentLinks) {\n+      this.otelParentLinks.add(\n+          io.opentelemetry.api.trace.SpanContext.create(\n+              io.opentelemetry.api.trace.TraceId.bytesToHex(\n+                  parent.getContext().getTraceId().getBytes()),\n+              io.opentelemetry.api.trace.SpanId.bytesToHex(\n+                  parent.getContext().getSpanId().getBytes()),\n+              TraceFlags.getDefault(),\n+              TraceState.getDefault()));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setRecordEvents(boolean recordEvents) {\n+    this.recordEvents = recordEvents;\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setSpanKind(@Nullable Kind kind) {\n+    this.kind = mapKind(kind);\n+    return this;\n+  }\n+\n+  @Override\n+  public Span startSpan() {\n+    // To determine whether to sample this span\n+    TraceParams activeTraceParams = options.traceConfig.getActiveTraceParams();\n+    Random random = options.randomHandler.current();\n+    TraceId traceId;\n+    SpanId spanId = SpanId.generateRandomId(random);\n+    Tracestate tracestate = TRACESTATE_DEFAULT;\n+    SpanContext parentContext = null;\n+    Boolean hasRemoteParent = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  hasRemoteParent = Boolean.TRUE;\n          \n          \n            \n                  hasRemoteParent = true;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531480948", "createdAt": "2020-11-27T09:30:18Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();\n+  private static final TraceOptions SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(true).build();\n+  private static final TraceOptions NOT_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(false).build();\n+\n+  private final String name;\n+  private final Options options;\n+\n+  private List<Span> parentLinks = Collections.emptyList();\n+  private final List<io.opentelemetry.api.trace.SpanContext> otelParentLinks = new ArrayList<>();\n+  @Nullable private final Span parent;\n+  @Nullable private final SpanContext remoteParentSpanContext;\n+  @Nullable private Sampler sampler;\n+  @Nullable private Boolean recordEvents;\n+  @Nullable private io.opentelemetry.api.trace.Span.Kind kind;\n+\n+  @Override\n+  public SpanBuilder setSampler(Sampler sampler) {\n+    this.sampler = checkNotNull(sampler, \"sampler\");\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setParentLinks(List<Span> parentLinks) {\n+    this.parentLinks = checkNotNull(parentLinks, \"parentLinks\");\n+    for (Span parent : parentLinks) {\n+      this.otelParentLinks.add(\n+          io.opentelemetry.api.trace.SpanContext.create(\n+              io.opentelemetry.api.trace.TraceId.bytesToHex(\n+                  parent.getContext().getTraceId().getBytes()),\n+              io.opentelemetry.api.trace.SpanId.bytesToHex(\n+                  parent.getContext().getSpanId().getBytes()),\n+              TraceFlags.getDefault(),\n+              TraceState.getDefault()));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setRecordEvents(boolean recordEvents) {\n+    this.recordEvents = recordEvents;\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setSpanKind(@Nullable Kind kind) {\n+    this.kind = mapKind(kind);\n+    return this;\n+  }\n+\n+  @Override\n+  public Span startSpan() {\n+    // To determine whether to sample this span\n+    TraceParams activeTraceParams = options.traceConfig.getActiveTraceParams();\n+    Random random = options.randomHandler.current();\n+    TraceId traceId;\n+    SpanId spanId = SpanId.generateRandomId(random);\n+    Tracestate tracestate = TRACESTATE_DEFAULT;\n+    SpanContext parentContext = null;\n+    Boolean hasRemoteParent = null;\n+    if (remoteParentSpanContext != null && remoteParentSpanContext.isValid()) {\n+      parentContext = remoteParentSpanContext;\n+      hasRemoteParent = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MTAyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  hasRemoteParent = Boolean.FALSE;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531481026", "createdAt": "2020-11-27T09:30:27Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();\n+  private static final TraceOptions SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(true).build();\n+  private static final TraceOptions NOT_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(false).build();\n+\n+  private final String name;\n+  private final Options options;\n+\n+  private List<Span> parentLinks = Collections.emptyList();\n+  private final List<io.opentelemetry.api.trace.SpanContext> otelParentLinks = new ArrayList<>();\n+  @Nullable private final Span parent;\n+  @Nullable private final SpanContext remoteParentSpanContext;\n+  @Nullable private Sampler sampler;\n+  @Nullable private Boolean recordEvents;\n+  @Nullable private io.opentelemetry.api.trace.Span.Kind kind;\n+\n+  @Override\n+  public SpanBuilder setSampler(Sampler sampler) {\n+    this.sampler = checkNotNull(sampler, \"sampler\");\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setParentLinks(List<Span> parentLinks) {\n+    this.parentLinks = checkNotNull(parentLinks, \"parentLinks\");\n+    for (Span parent : parentLinks) {\n+      this.otelParentLinks.add(\n+          io.opentelemetry.api.trace.SpanContext.create(\n+              io.opentelemetry.api.trace.TraceId.bytesToHex(\n+                  parent.getContext().getTraceId().getBytes()),\n+              io.opentelemetry.api.trace.SpanId.bytesToHex(\n+                  parent.getContext().getSpanId().getBytes()),\n+              TraceFlags.getDefault(),\n+              TraceState.getDefault()));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setRecordEvents(boolean recordEvents) {\n+    this.recordEvents = recordEvents;\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setSpanKind(@Nullable Kind kind) {\n+    this.kind = mapKind(kind);\n+    return this;\n+  }\n+\n+  @Override\n+  public Span startSpan() {\n+    // To determine whether to sample this span\n+    TraceParams activeTraceParams = options.traceConfig.getActiveTraceParams();\n+    Random random = options.randomHandler.current();\n+    TraceId traceId;\n+    SpanId spanId = SpanId.generateRandomId(random);\n+    Tracestate tracestate = TRACESTATE_DEFAULT;\n+    SpanContext parentContext = null;\n+    Boolean hasRemoteParent = null;\n+    if (remoteParentSpanContext != null && remoteParentSpanContext.isValid()) {\n+      parentContext = remoteParentSpanContext;\n+      hasRemoteParent = Boolean.TRUE;\n+      traceId = parentContext.getTraceId();\n+      tracestate = parentContext.getTracestate();\n+    } else if (parent != null && parent.getContext().isValid()) {\n+      parentContext = parent.getContext();\n+      hasRemoteParent = Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MTA3NA==", "bodyText": "I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531481074", "createdAt": "2020-11-27T09:30:32Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+  private static final Tracestate TRACESTATE_DEFAULT = Tracestate.builder().build();\n+  private static final TraceOptions SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(true).build();\n+  private static final TraceOptions NOT_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(false).build();\n+\n+  private final String name;\n+  private final Options options;\n+\n+  private List<Span> parentLinks = Collections.emptyList();\n+  private final List<io.opentelemetry.api.trace.SpanContext> otelParentLinks = new ArrayList<>();\n+  @Nullable private final Span parent;\n+  @Nullable private final SpanContext remoteParentSpanContext;\n+  @Nullable private Sampler sampler;\n+  @Nullable private Boolean recordEvents;\n+  @Nullable private io.opentelemetry.api.trace.Span.Kind kind;\n+\n+  @Override\n+  public SpanBuilder setSampler(Sampler sampler) {\n+    this.sampler = checkNotNull(sampler, \"sampler\");\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setParentLinks(List<Span> parentLinks) {\n+    this.parentLinks = checkNotNull(parentLinks, \"parentLinks\");\n+    for (Span parent : parentLinks) {\n+      this.otelParentLinks.add(\n+          io.opentelemetry.api.trace.SpanContext.create(\n+              io.opentelemetry.api.trace.TraceId.bytesToHex(\n+                  parent.getContext().getTraceId().getBytes()),\n+              io.opentelemetry.api.trace.SpanId.bytesToHex(\n+                  parent.getContext().getSpanId().getBytes()),\n+              TraceFlags.getDefault(),\n+              TraceState.getDefault()));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setRecordEvents(boolean recordEvents) {\n+    this.recordEvents = recordEvents;\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setSpanKind(@Nullable Kind kind) {\n+    this.kind = mapKind(kind);\n+    return this;\n+  }\n+\n+  @Override\n+  public Span startSpan() {\n+    // To determine whether to sample this span\n+    TraceParams activeTraceParams = options.traceConfig.getActiveTraceParams();\n+    Random random = options.randomHandler.current();\n+    TraceId traceId;\n+    SpanId spanId = SpanId.generateRandomId(random);\n+    Tracestate tracestate = TRACESTATE_DEFAULT;\n+    SpanContext parentContext = null;\n+    Boolean hasRemoteParent = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDg2NQ=="}, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MTg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n          \n          \n            \n            class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531481862", "createdAt": "2020-11-27T09:32:04Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.Status;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MTk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final io.opentelemetry.api.trace.Span otSpan;\n          \n          \n            \n              private final io.opentelemetry.api.trace.Span otelSpan;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531481967", "createdAt": "2020-11-27T09:32:15Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.Status;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otSpan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MjA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otSpan) {\n          \n          \n            \n              OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otelSpan) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531482044", "createdAt": "2020-11-27T09:32:22Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.Status;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otSpan;\n+\n+  OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otSpan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MjI1Mw==", "bodyText": "Think you an use mapSpanContext", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531482253", "createdAt": "2020-11-27T09:32:48Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.Status;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otSpan;\n+\n+  OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otSpan) {\n+    super(\n+        SpanContext.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4Mzg1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                otSpan.setStatus(canonicalCode, description);\n          \n          \n            \n                return this;\n          \n      \n    \n    \n  \n\nDon't we need to delegate to the OTel span for all of these methods too since they might be called from OTel instrumentation?\nAlso make sure to return this everywhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531483850", "createdAt": "2020-11-27T09:35:48Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.Status;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+public class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otSpan;\n+\n+  OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otSpan) {\n+    super(\n+        SpanContext.create(\n+            TraceId.fromBytes(otSpan.getSpanContext().getTraceIdBytes()),\n+            SpanId.fromBytes(otSpan.getSpanContext().getSpanIdBytes()),\n+            TraceOptions.builder().setIsSampled(true).build(),\n+            Tracestate.builder().build()),\n+        RECORD_EVENTS_SPAN_OPTIONS);\n+    this.otSpan = otSpan;\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+    value.match(\n+        arg -> otSpan.setAttribute(key, arg),\n+        arg -> otSpan.setAttribute(key, arg),\n+        arg -> otSpan.setAttribute(key, arg),\n+        arg -> otSpan.setAttribute(key, arg),\n+        arg -> null);\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+    for (Map.Entry<String, AttributeValue> attribute : attributes.entrySet()) {\n+      putAttribute(attribute.getKey(), attribute.getValue());\n+    }\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    AttributesBuilder attributesBuilder = Attributes.builder();\n+    attributes.forEach(\n+        (s, attributeValue) ->\n+            attributeValue.match(\n+                setStringAttribute(attributesBuilder, s),\n+                setBooleanAttribute(attributesBuilder, s),\n+                setLongAttribute(attributesBuilder, s),\n+                setDoubleAttribute(attributesBuilder, s),\n+                arg -> null));\n+    otSpan.addEvent(description, attributesBuilder.build());\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    AttributesBuilder attributesBuilder = Attributes.builder();\n+    annotation\n+        .getAttributes()\n+        .forEach(\n+            (s, attributeValue) ->\n+                attributeValue.match(\n+                    setStringAttribute(attributesBuilder, s),\n+                    setBooleanAttribute(attributesBuilder, s),\n+                    setLongAttribute(attributesBuilder, s),\n+                    setDoubleAttribute(attributesBuilder, s),\n+                    arg -> null));\n+    otSpan.addEvent(annotation.getDescription(), attributesBuilder.build());\n+  }\n+\n+  @Override\n+  public void addLink(Link link) {\n+    LOGGER.warning(\"OpenTelemetry does not support links added after a span is created.\");\n+  }\n+\n+  @Override\n+  public void addMessageEvent(MessageEvent messageEvent) {\n+    otSpan.addEvent(\n+        String.valueOf(messageEvent.getMessageId()),\n+        Attributes.of(\n+            AttributeKey.stringKey(MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE),\n+            messageEvent.getType().toString(),\n+            AttributeKey.longKey(MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED),\n+            messageEvent.getUncompressedMessageSize(),\n+            AttributeKey.longKey(MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED),\n+            messageEvent.getCompressedMessageSize()));\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    Preconditions.checkNotNull(status, \"status\");\n+    otSpan.setStatus(status.isOk() ? StatusCode.OK : StatusCode.ERROR);\n+  }\n+\n+  @Override\n+  public io.opentelemetry.api.trace.Span setStatus(StatusCode canonicalCode, String description) {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NDU1MQ==", "bodyText": "Per my above comment, you should be able to have just one class for both b3 and w3c", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531484551", "createdAt": "2020-11-27T09:36:58Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceContextFormatImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.propagation.TextFormat;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetryTraceContextFormatImpl extends TextFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NDY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryTracerImpl extends Tracer {\n          \n          \n            \n            class OpenTelemetryTracerImpl extends Tracer {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531484661", "createdAt": "2020-11-27T09:37:10Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTracerImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opentelemetry.opencensusshim.OpenTelemetrySpanBuilderImpl.Options;\n+import javax.annotation.Nullable;\n+\n+public class OpenTelemetryTracerImpl extends Tracer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTAxMg==", "bodyText": "Do we still need FakeSpan? Can't we use one of the new Span implementations where this is being used?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531485012", "createdAt": "2020-11-27T09:37:49Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -50,6 +41,12 @@ protected FakeSpan(SpanContext context) {\n       super(context, RECORD_EVENTS_SPAN_OPTIONS);\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTQ3OQ==", "bodyText": "Let's use fullly qualified class names, it's really tricky knowing which Kind is which", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531485479", "createdAt": "2020-11-27T09:38:42Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -69,64 +66,12 @@ public void end(EndSpanOptions options) {}\n   public static final String MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED =\n       \"message.event.size.compressed\";\n \n-  private static final Tracer TRACER =\n-      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n-\n   private SpanConverter() {}\n \n-  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n-    if (span == null) {\n-      return io.opentelemetry.api.trace.Span.getInvalid();\n-    }\n-    SpanData ocSpanData = ((RecordEventsSpanImpl) span).toSpanData();\n-    SpanBuilder builder =\n-        TRACER\n-            .spanBuilder(ocSpanData.getName())\n-            .setStartTimestamp(\n-                TimeUnit.SECONDS.toNanos(ocSpanData.getStartTimestamp().getSeconds())\n-                    + ocSpanData.getStartTimestamp().getNanos(),\n-                TimeUnit.NANOSECONDS);\n-    if (ocSpanData.getKind() != null) {\n-      builder.setSpanKind(mapKind(ocSpanData.getKind()));\n-    }\n-    if (ocSpanData.getAttributes() != null) {\n-      for (Map.Entry<String, AttributeValue> attribute :\n-          ocSpanData.getAttributes().getAttributeMap().entrySet()) {\n-        attribute\n-            .getValue()\n-            .match(\n-                setStringAttribute(builder, attribute),\n-                setBooleanAttribute(builder, attribute),\n-                setLongAttribute(builder, attribute),\n-                setDoubleAttribute(builder, attribute),\n-                arg -> null);\n-      }\n-    }\n-    if (ocSpanData.getLinks() != null) {\n-      for (Link link : ocSpanData.getLinks().getLinks()) {\n-        AttributesBuilder attributesBuilder = Attributes.builder();\n-        link.getAttributes()\n-            .forEach(\n-                (s, attributeValue) ->\n-                    attributeValue.match(\n-                        setStringAttribute(attributesBuilder, s),\n-                        setBooleanAttribute(attributesBuilder, s),\n-                        setLongAttribute(attributesBuilder, s),\n-                        setDoubleAttribute(attributesBuilder, s),\n-                        arg -> null));\n-        builder.addLink(\n-            io.opentelemetry.api.trace.SpanContext.create(\n-                TraceId.bytesToHex(link.getTraceId().getBytes()),\n-                SpanId.bytesToHex(link.getSpanId().getBytes()),\n-                TraceFlags.getDefault(),\n-                TraceState.getDefault()),\n-            attributesBuilder.build());\n-      }\n+  static Kind mapKind(@Nullable Span.Kind kind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTU3OA==", "bodyText": "An OTel kind should never be null - INTERNAL?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531485578", "createdAt": "2020-11-27T09:38:52Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -69,64 +66,12 @@ public void end(EndSpanOptions options) {}\n   public static final String MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED =\n       \"message.event.size.compressed\";\n \n-  private static final Tracer TRACER =\n-      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n-\n   private SpanConverter() {}\n \n-  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n-    if (span == null) {\n-      return io.opentelemetry.api.trace.Span.getInvalid();\n-    }\n-    SpanData ocSpanData = ((RecordEventsSpanImpl) span).toSpanData();\n-    SpanBuilder builder =\n-        TRACER\n-            .spanBuilder(ocSpanData.getName())\n-            .setStartTimestamp(\n-                TimeUnit.SECONDS.toNanos(ocSpanData.getStartTimestamp().getSeconds())\n-                    + ocSpanData.getStartTimestamp().getNanos(),\n-                TimeUnit.NANOSECONDS);\n-    if (ocSpanData.getKind() != null) {\n-      builder.setSpanKind(mapKind(ocSpanData.getKind()));\n-    }\n-    if (ocSpanData.getAttributes() != null) {\n-      for (Map.Entry<String, AttributeValue> attribute :\n-          ocSpanData.getAttributes().getAttributeMap().entrySet()) {\n-        attribute\n-            .getValue()\n-            .match(\n-                setStringAttribute(builder, attribute),\n-                setBooleanAttribute(builder, attribute),\n-                setLongAttribute(builder, attribute),\n-                setDoubleAttribute(builder, attribute),\n-                arg -> null);\n-      }\n-    }\n-    if (ocSpanData.getLinks() != null) {\n-      for (Link link : ocSpanData.getLinks().getLinks()) {\n-        AttributesBuilder attributesBuilder = Attributes.builder();\n-        link.getAttributes()\n-            .forEach(\n-                (s, attributeValue) ->\n-                    attributeValue.match(\n-                        setStringAttribute(attributesBuilder, s),\n-                        setBooleanAttribute(attributesBuilder, s),\n-                        setLongAttribute(attributesBuilder, s),\n-                        setDoubleAttribute(attributesBuilder, s),\n-                        arg -> null));\n-        builder.addLink(\n-            io.opentelemetry.api.trace.SpanContext.create(\n-                TraceId.bytesToHex(link.getTraceId().getBytes()),\n-                SpanId.bytesToHex(link.getSpanId().getBytes()),\n-                TraceFlags.getDefault(),\n-                TraceState.getDefault()),\n-            attributesBuilder.build());\n-      }\n+  static Kind mapKind(@Nullable Span.Kind kind) {\n+    if (kind == null) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NjcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Tracestate.builder().build());\n          \n          \n            \n                    mapTracestate(otelSpanContext.getTraceState()));", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531486717", "createdAt": "2020-11-27T09:40:53Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -142,117 +87,90 @@ static Span fromOtelSpan(io.opentelemetry.api.trace.Span otSpan) {\n     }\n     SpanContext spanContext =\n         SpanContext.create(\n-            io.opencensus.trace.TraceId.fromLowerBase16(\n-                otSpan.getSpanContext().getTraceIdAsHexString()),\n-            io.opencensus.trace.SpanId.fromLowerBase16(\n-                otSpan.getSpanContext().getSpanIdAsHexString()),\n+            TraceId.fromLowerBase16(otSpan.getSpanContext().getTraceIdAsHexString()),\n+            SpanId.fromLowerBase16(otSpan.getSpanContext().getSpanIdAsHexString()),\n             TraceOptions.builder().setIsSampled(otSpan.getSpanContext().isSampled()).build(),\n             mapTracestate(otSpan.getSpanContext().getTraceState()));\n     return new FakeSpan(spanContext);\n   }\n \n-  private static Tracestate mapTracestate(TraceState traceState) {\n-    Tracestate.Builder tracestateBuilder = Tracestate.builder();\n-    traceState.forEach(tracestateBuilder::set);\n-    return tracestateBuilder.build();\n+  static SpanContext mapSpanContext(io.opentelemetry.api.trace.SpanContext otelSpanContext) {\n+    return SpanContext.create(\n+        TraceId.fromLowerBase16(otelSpanContext.getTraceIdAsHexString()),\n+        SpanId.fromLowerBase16(otelSpanContext.getSpanIdAsHexString()),\n+        TraceOptions.builder().setIsSampled(otelSpanContext.isSampled()).build(),\n+        Tracestate.builder().build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NzAwNg==", "bodyText": "Should we map this trace state?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531487006", "createdAt": "2020-11-27T09:41:25Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -142,117 +87,90 @@ static Span fromOtelSpan(io.opentelemetry.api.trace.Span otSpan) {\n     }\n     SpanContext spanContext =\n         SpanContext.create(\n-            io.opencensus.trace.TraceId.fromLowerBase16(\n-                otSpan.getSpanContext().getTraceIdAsHexString()),\n-            io.opencensus.trace.SpanId.fromLowerBase16(\n-                otSpan.getSpanContext().getSpanIdAsHexString()),\n+            TraceId.fromLowerBase16(otSpan.getSpanContext().getTraceIdAsHexString()),\n+            SpanId.fromLowerBase16(otSpan.getSpanContext().getSpanIdAsHexString()),\n             TraceOptions.builder().setIsSampled(otSpan.getSpanContext().isSampled()).build(),\n             mapTracestate(otSpan.getSpanContext().getTraceState()));\n     return new FakeSpan(spanContext);\n   }\n \n-  private static Tracestate mapTracestate(TraceState traceState) {\n-    Tracestate.Builder tracestateBuilder = Tracestate.builder();\n-    traceState.forEach(tracestateBuilder::set);\n-    return tracestateBuilder.build();\n+  static SpanContext mapSpanContext(io.opentelemetry.api.trace.SpanContext otelSpanContext) {\n+    return SpanContext.create(\n+        TraceId.fromLowerBase16(otelSpanContext.getTraceIdAsHexString()),\n+        SpanId.fromLowerBase16(otelSpanContext.getSpanIdAsHexString()),\n+        TraceOptions.builder().setIsSampled(otelSpanContext.isSampled()).build(),\n+        Tracestate.builder().build());\n   }\n \n-  static void mapAndAddTimedEvents(\n-      io.opentelemetry.api.trace.Span span, List<TimedEvent<MessageEvent>> events) {\n-    for (TimedEvent<MessageEvent> event : events) {\n-      span.addEvent(\n-          String.valueOf(event.getEvent().getMessageId()),\n-          Attributes.of(\n-              AttributeKey.stringKey(MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE),\n-              event.getEvent().getType().toString(),\n-              AttributeKey.longKey(MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED),\n-              event.getEvent().getUncompressedMessageSize(),\n-              AttributeKey.longKey(MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED),\n-              event.getEvent().getCompressedMessageSize()),\n-          TimeUnit.SECONDS.toNanos(event.getTimestamp().getSeconds())\n-              + event.getTimestamp().getNanos(),\n-          TimeUnit.NANOSECONDS);\n-    }\n+  static io.opentelemetry.api.trace.SpanContext mapSpanContext(SpanContext ocSpanContext) {\n+    return io.opentelemetry.api.trace.SpanContext.create(\n+        ocSpanContext.getTraceId().toLowerBase16(),\n+        ocSpanContext.getSpanId().toLowerBase16(),\n+        ocSpanContext.getTraceOptions().isSampled()\n+            ? TraceFlags.getSampled()\n+            : TraceFlags.getDefault(),\n+        TraceState.getDefault());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NzYyMw==", "bodyText": "By making a generic OpenTelemetryTextFormat we won't need all this testing, we'd be able to test a mock TextMapPropagator", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531487623", "createdAt": "2020-11-27T09:42:32Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImplTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opencensus.trace.propagation.SpanContextParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link OpenTelemetryBinaryFormatImpl}. */\n+@RunWith(JUnit4.class)\n+public class OpenTelemetryB3FormatImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODM4NjEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-539838611", "createdAt": "2020-11-27T09:45:50Z", "commit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0NTo1MFrOH63jKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0NjowM1rOH63jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4OTU3OA==", "bodyText": "Oh wait - this is the binary format test XD. Rename the class. I guess we need tests for the textmappropagator wrapper too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531489578", "createdAt": "2020-11-27T09:45:50Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImplTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opencensus.trace.propagation.SpanContextParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link OpenTelemetryBinaryFormatImpl}. */\n+@RunWith(JUnit4.class)\n+public class OpenTelemetryB3FormatImplTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NzYyMw=="}, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4OTY4Nw==", "bodyText": "Not using any junit4 features here, can you switch to jupiter?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r531489687", "createdAt": "2020-11-27T09:46:03Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/OpenTelemetryB3FormatImplTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opencensus.trace.propagation.SpanContextParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for {@link OpenTelemetryBinaryFormatImpl}. */\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a29e39ea83ca3227d57739447dab0fdc944f5d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5001ecadb3b2c4d874bd8c4714287ff19df8642", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5001ecadb3b2c4d874bd8c4714287ff19df8642", "committedDate": "2020-12-01T04:53:52Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02057fd93b7e8ae90a009ab765f50776db436060", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/02057fd93b7e8ae90a009ab765f50776db436060", "committedDate": "2020-12-01T06:28:10Z", "message": "Add tests for text format propagator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2266220bad21e296e5f8d3d8f21d8262660afe57", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2266220bad21e296e5f8d3d8f21d8262660afe57", "committedDate": "2020-12-01T06:28:29Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a97b7539170bc9c1a4ba894a1ad8a3df4c988d3", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a97b7539170bc9c1a4ba894a1ad8a3df4c988d3", "committedDate": "2020-12-01T06:30:22Z", "message": "Pull upstream & fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2538655375cfedc453f0bb17cf6bf6ecea3f1f7f", "committedDate": "2020-12-01T06:47:26Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjI4MTQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-541628140", "createdAt": "2020-12-01T08:28:17Z", "commit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODoyODoxN1rOH8c_qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODozMjozN1rOH8dJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MTY1Nw==", "bodyText": "Do you think we need to support the OC clock? I'd recommend removing this line if it seems reasonable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r533151657", "createdAt": "2020-12-01T08:28:17Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanBuilderImpl.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapKind;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.trace.Sampler;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Span.Kind;\n+import io.opencensus.trace.SpanBuilder;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+class OpenTelemetrySpanBuilderImpl extends SpanBuilder {\n+  private static final Tracer OTEL_TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opentelemetry.opencensusshim\");\n+  private static final Tracestate OC_TRACESTATE_DEFAULT = Tracestate.builder().build();\n+  private static final TraceOptions OC_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(true).build();\n+  private static final TraceOptions OC_NOT_SAMPLED_TRACE_OPTIONS =\n+      TraceOptions.builder().setIsSampled(false).build();\n+\n+  private final String name;\n+  private final Options options;\n+\n+  private List<Span> ocParentLinks = Collections.emptyList();\n+  private final List<io.opentelemetry.api.trace.SpanContext> otelParentLinks = new ArrayList<>();\n+  @Nullable private final Span ocParent;\n+  @Nullable private final SpanContext ocRemoteParentSpanContext;\n+  @Nullable private Sampler ocSampler;\n+  @Nullable private Boolean recordEvents;\n+  @Nullable private io.opentelemetry.api.trace.Span.Kind otelKind;\n+\n+  @Override\n+  public SpanBuilder setSampler(Sampler sampler) {\n+    this.ocSampler = checkNotNull(sampler, \"sampler\");\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setParentLinks(List<Span> parentLinks) {\n+    this.ocParentLinks = checkNotNull(parentLinks, \"parentLinks\");\n+    for (Span parent : parentLinks) {\n+      this.otelParentLinks.add(SpanConverter.mapSpanContext(parent.getContext()));\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setRecordEvents(boolean recordEvents) {\n+    this.recordEvents = recordEvents;\n+    return this;\n+  }\n+\n+  @Override\n+  public SpanBuilder setSpanKind(@Nullable Kind kind) {\n+    this.otelKind = mapKind(kind);\n+    return this;\n+  }\n+\n+  @Override\n+  public Span startSpan() {\n+    // To determine whether to sample this span\n+    TraceParams ocActiveTraceParams = options.traceConfig.getActiveTraceParams();\n+    Random random = options.randomHandler.current();\n+    TraceId ocTraceId;\n+    SpanId ocSpanId = SpanId.generateRandomId(random);\n+    Tracestate ocTracestate = OC_TRACESTATE_DEFAULT;\n+    SpanContext ocParentContext = null;\n+    Boolean hasRemoteParent = null;\n+    if (ocRemoteParentSpanContext != null && ocRemoteParentSpanContext.isValid()) {\n+      ocParentContext = ocRemoteParentSpanContext;\n+      hasRemoteParent = Boolean.TRUE;\n+      ocTraceId = ocParentContext.getTraceId();\n+      ocTracestate = ocParentContext.getTracestate();\n+    } else if (ocParent != null && ocParent.getContext().isValid()) {\n+      ocParentContext = ocParent.getContext();\n+      hasRemoteParent = Boolean.FALSE;\n+      ocTraceId = ocParentContext.getTraceId();\n+      ocTracestate = ocParentContext.getTracestate();\n+    } else {\n+      // New root span.\n+      ocTraceId = TraceId.generateRandomId(random);\n+    }\n+    TraceOptions ocTraceOptions =\n+        makeSamplingDecision(\n+                ocParentContext,\n+                hasRemoteParent,\n+                name,\n+                ocSampler,\n+                ocParentLinks,\n+                ocTraceId,\n+                ocSpanId,\n+                ocActiveTraceParams)\n+            ? OC_SAMPLED_TRACE_OPTIONS\n+            : OC_NOT_SAMPLED_TRACE_OPTIONS;\n+    if (!ocTraceOptions.isSampled() && !Boolean.TRUE.equals(recordEvents)) {\n+      return OpenTelemetryNoRecordEventsSpanImpl.create(\n+          SpanContext.create(ocTraceId, ocSpanId, ocTraceOptions, ocTracestate));\n+    }\n+\n+    // If sampled\n+    io.opentelemetry.api.trace.SpanBuilder otelSpanBuilder =\n+        OTEL_TRACER\n+            .spanBuilder(name)\n+            .setStartTimestamp(options.clock.nowNanos(), TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MjQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (Map.Entry<String, AttributeValue> attribute : attributes.entrySet()) {\n          \n          \n            \n                  putAttribute(attribute.getKey(), attribute.getValue());\n          \n          \n            \n                }\n          \n          \n            \n                attributes.forEach(this::putAttribute);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r533152474", "createdAt": "2020-12-01T08:29:38Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otelSpan;\n+\n+  OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otelSpan) {\n+    super(mapSpanContext(otelSpan.getSpanContext()), RECORD_EVENTS_SPAN_OPTIONS);\n+    this.otelSpan = otelSpan;\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+    value.match(\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> null);\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+    for (Map.Entry<String, AttributeValue> attribute : attributes.entrySet()) {\n+      putAttribute(attribute.getKey(), attribute.getValue());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MzEyNw==", "bodyText": "Looks like you can extract a helper for converting oc attributes to otel attributes", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r533153127", "createdAt": "2020-12-01T08:30:42Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetrySpanImpl.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2018, OpenCensus Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_COMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_SIZE_UNCOMPRESSED;\n+import static io.opentelemetry.opencensusshim.SpanConverter.MESSAGE_EVENT_ATTRIBUTE_KEY_TYPE;\n+import static io.opentelemetry.opencensusshim.SpanConverter.mapSpanContext;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setBooleanAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setDoubleAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setLongAttribute;\n+import static io.opentelemetry.opencensusshim.SpanConverter.setStringAttribute;\n+\n+import com.google.common.base.Preconditions;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.Status;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.StatusCode;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Logger;\n+import javax.annotation.Nonnull;\n+\n+class OpenTelemetrySpanImpl extends Span implements io.opentelemetry.api.trace.Span {\n+  private static final Logger LOGGER = Logger.getLogger(OpenTelemetrySpanImpl.class.getName());\n+  private static final EnumSet<Span.Options> RECORD_EVENTS_SPAN_OPTIONS =\n+      EnumSet.of(Span.Options.RECORD_EVENTS);\n+\n+  private final io.opentelemetry.api.trace.Span otelSpan;\n+\n+  OpenTelemetrySpanImpl(io.opentelemetry.api.trace.Span otelSpan) {\n+    super(mapSpanContext(otelSpan.getSpanContext()), RECORD_EVENTS_SPAN_OPTIONS);\n+    this.otelSpan = otelSpan;\n+  }\n+\n+  @Override\n+  public void putAttribute(String key, AttributeValue value) {\n+    Preconditions.checkNotNull(key, \"key\");\n+    Preconditions.checkNotNull(value, \"value\");\n+    value.match(\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> otelSpan.setAttribute(key, arg),\n+        arg -> null);\n+  }\n+\n+  @Override\n+  public void putAttributes(Map<String, AttributeValue> attributes) {\n+    Preconditions.checkNotNull(attributes, \"attributes\");\n+    for (Map.Entry<String, AttributeValue> attribute : attributes.entrySet()) {\n+      putAttribute(attribute.getKey(), attribute.getValue());\n+    }\n+  }\n+\n+  @Override\n+  public void addAnnotation(String description, Map<String, AttributeValue> attributes) {\n+    AttributesBuilder attributesBuilder = Attributes.builder();\n+    attributes.forEach(\n+        (s, attributeValue) ->\n+            attributeValue.match(\n+                setStringAttribute(attributesBuilder, s),\n+                setBooleanAttribute(attributesBuilder, s),\n+                setLongAttribute(attributesBuilder, s),\n+                setDoubleAttribute(attributesBuilder, s),\n+                arg -> null));\n+    otelSpan.addEvent(description, attributesBuilder.build());\n+  }\n+\n+  @Override\n+  public void addAnnotation(Annotation annotation) {\n+    AttributesBuilder attributesBuilder = Attributes.builder();\n+    annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NDAzMw==", "bodyText": "Can remove public from test methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r533154033", "createdAt": "2020-12-01T08:32:17Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/OpenTelemetryBinaryFormatImplTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.propagation.BinaryFormat;\n+import io.opencensus.trace.propagation.SpanContextParseException;\n+import org.junit.jupiter.api.Test;\n+\n+class OpenTelemetryBinaryFormatImplTest {\n+  private static final byte[] TRACE_ID_BYTES =\n+      new byte[] {64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79};\n+  private static final TraceId TRACE_ID = TraceId.fromBytes(TRACE_ID_BYTES);\n+  private static final byte[] SPAN_ID_BYTES = new byte[] {97, 98, 99, 100, 101, 102, 103, 104};\n+  private static final SpanId SPAN_ID = SpanId.fromBytes(SPAN_ID_BYTES);\n+  private static final byte TRACE_OPTIONS_BYTES = 1;\n+  private static final TraceOptions TRACE_OPTIONS = TraceOptions.fromByte(TRACE_OPTIONS_BYTES);\n+  private static final Tracestate TRACESTATE = Tracestate.builder().build();\n+  private static final byte[] EXAMPLE_BYTES =\n+      new byte[] {\n+        0, 0, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 1, 97, 98, 99, 100,\n+        101, 102, 103, 104, 2, 1\n+      };\n+  private static final SpanContext EXAMPLE_SPAN_CONTEXT =\n+      SpanContext.create(TRACE_ID, SPAN_ID, TRACE_OPTIONS, TRACESTATE);\n+  private final BinaryFormat binaryFormat = new OpenTelemetryBinaryFormatImpl();\n+\n+  private void testSpanContextConversion(SpanContext spanContext) throws SpanContextParseException {\n+    SpanContext propagatedBinarySpanContext =\n+        binaryFormat.fromByteArray(binaryFormat.toByteArray(spanContext));\n+\n+    assertThat(propagatedBinarySpanContext).isEqualTo(spanContext);\n+  }\n+\n+  @Test\n+  public void propagate_SpanContextTracingEnabled() throws SpanContextParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NDIzNQ==", "bodyText": "Can remove public from all the methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#discussion_r533154235", "createdAt": "2020-12-01T08:32:37Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/OpenTelemetryTextFormatImplTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.propagation.TextFormat.Getter;\n+import io.opencensus.trace.propagation.TextFormat.Setter;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+class OpenTelemetryTextFormatImplTest {\n+  private static final Setter<Map<String, String>> SETTER =\n+      new Setter<Map<String, String>>() {\n+        @Override\n+        public void put(Map<String, String> carrier, String key, String value) {\n+          carrier.put(key, value);\n+        }\n+      };\n+  private static final Getter<Map<String, String>> GETTER =\n+      new Getter<Map<String, String>>() {\n+        @Nullable\n+        @Override\n+        public String get(Map<String, String> carrier, String key) {\n+          return carrier.get(key);\n+        }\n+      };\n+\n+  private static final Random RANDOM = new Random();\n+  private static final SpanContext SPAN_CONTEXT =\n+      SpanContext.create(\n+          TraceId.generateRandomId(RANDOM),\n+          SpanId.generateRandomId(RANDOM),\n+          TraceOptions.builder().setIsSampled(true).build(),\n+          Tracestate.builder().set(\"key\", \"value\").build());\n+\n+  @Test\n+  public void testInject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2538655375cfedc453f0bb17cf6bf6ecea3f1f7f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3462164a5983d6acfbb7285808c17e53d117d89e", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3462164a5983d6acfbb7285808c17e53d117d89e", "committedDate": "2020-12-02T08:31:55Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e2f0942e1b7bccc42cad8639c6fb1464099954", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0e2f0942e1b7bccc42cad8639c6fb1464099954", "committedDate": "2020-12-03T03:07:17Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bac829f8482ea1b28e59420d9d7a5f7f3d050f4", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6bac829f8482ea1b28e59420d9d7a5f7f3d050f4", "committedDate": "2020-12-07T23:34:13Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache\n\n# Conflicts:\n#\topencensus-shim/build.gradle\n#\topencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8bafebab78099bca250a5c7c9b1505d9f0ed79", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf8bafebab78099bca250a5c7c9b1505d9f0ed79", "committedDate": "2020-12-08T07:12:16Z", "message": "Add test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "283d3659c75ce0bfe526fe15397f4bb5db44e039", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/283d3659c75ce0bfe526fe15397f4bb5db44e039", "committedDate": "2020-12-08T08:58:18Z", "message": "Add test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d026f94176e7a9d3c2cadc7a323d1f091ecab6ed", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d026f94176e7a9d3c2cadc7a323d1f091ecab6ed", "committedDate": "2020-12-08T09:54:33Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTU5NzI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-547959725", "createdAt": "2020-12-09T08:52:05Z", "commit": {"oid": "283d3659c75ce0bfe526fe15397f4bb5db44e039"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052994bf54d61a6a161d2e3cd1f3b1822db11329", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/052994bf54d61a6a161d2e3cd1f3b1822db11329", "committedDate": "2020-12-11T01:34:17Z", "message": "Remove OC clock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e715f0f8740dfbc4d71b9a5d826a69108767b7", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f5e715f0f8740dfbc4d71b9a5d826a69108767b7", "committedDate": "2020-12-11T01:34:31Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f549cabbe7215d2767b848104bb331e93b710a", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8f549cabbe7215d2767b848104bb331e93b710a", "committedDate": "2020-12-11T04:30:33Z", "message": "Add test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be84f498515f7a636123e38b4085fd3f2092bd8", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1be84f498515f7a636123e38b4085fd3f2092bd8", "committedDate": "2020-12-11T05:00:11Z", "message": "Add test coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODA1MjA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2060#pullrequestreview-549805205", "createdAt": "2020-12-11T05:09:31Z", "commit": {"oid": "1be84f498515f7a636123e38b4085fd3f2092bd8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5334a5522227b812cdf11ad16a735517914d9478", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5334a5522227b812cdf11ad16a735517914d9478", "committedDate": "2020-12-11T05:31:40Z", "message": "Remove unnecessary recordEvents field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225a0c939742e7d0d16208b8ffea8c2e51c09f29", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/225a0c939742e7d0d16208b8ffea8c2e51c09f29", "committedDate": "2020-12-16T00:14:13Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache\n\n# Conflicts:\n#\topencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java\n#\topencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd593c67a064c7f3f88630b69c056ad37aff9777", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cd593c67a064c7f3f88630b69c056ad37aff9777", "committedDate": "2020-12-16T00:19:03Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache\n\n# Conflicts:\n#\topencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java\n#\topencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f6e0138b98cbccd909d2b8aa537a151dafc14c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/21f6e0138b98cbccd909d2b8aa537a151dafc14c", "committedDate": "2020-12-18T03:30:57Z", "message": "Merge branch 'master' into remove-otel-to-oc-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "146ea5dfb3176e77bb418f502123371fe4554a86", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/146ea5dfb3176e77bb418f502123371fe4554a86", "committedDate": "2020-12-21T05:02:55Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into remove-otel-to-oc-cache"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4016, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}