{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTEwNDQ2", "number": 1317, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyMDo1OVrOEDgHOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyODowNFrOEDgS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTA3MzIyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/StringAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyMDo1OVrOGgjk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyNToxN1rOGgjwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MDUxMA==", "bodyText": "would it make sense to return this, or the builder from this call? Or does that not help make a more fluent API?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436790510", "createdAt": "2020-06-08T15:20:59Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/StringAttributeSetter.java", "diffHunk": "@@ -61,4 +61,14 @@ public String key() {\n   public void set(Span span, @Nullable String value) {\n     span.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided span builder.\n+   *\n+   * @param spanBuilder the span builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span.Builder spanBuilder, @Nullable String value) {\n+    spanBuilder.setAttribute(key(), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MTk2MA==", "bodyText": "I guess it doesn't make any sense to return this, but would returning the Builder be at all useful?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436791960", "createdAt": "2020-06-08T15:23:04Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/StringAttributeSetter.java", "diffHunk": "@@ -61,4 +61,14 @@ public String key() {\n   public void set(Span span, @Nullable String value) {\n     span.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided span builder.\n+   *\n+   * @param spanBuilder the span builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span.Builder spanBuilder, @Nullable String value) {\n+    spanBuilder.setAttribute(key(), value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MDUxMA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5Mjk0MQ==", "bodyText": "And, I see that @Oberon00 already made this comment above. sorry for the extra noise.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436792941", "createdAt": "2020-06-08T15:24:26Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/StringAttributeSetter.java", "diffHunk": "@@ -61,4 +61,14 @@ public String key() {\n   public void set(Span span, @Nullable String value) {\n     span.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided span builder.\n+   *\n+   * @param spanBuilder the span builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span.Builder spanBuilder, @Nullable String value) {\n+    spanBuilder.setAttribute(key(), value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MDUxMA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MzUyNA==", "bodyText": "SemanticAttributes are now used like this: SemanticAttribute.HTTP_URL.set(span, value). No quick way to have fluent interface out of this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436793524", "createdAt": "2020-06-08T15:25:17Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/StringAttributeSetter.java", "diffHunk": "@@ -61,4 +61,14 @@ public String key() {\n   public void set(Span span, @Nullable String value) {\n     span.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided span builder.\n+   *\n+   * @param spanBuilder the span builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span.Builder spanBuilder, @Nullable String value) {\n+    spanBuilder.setAttribute(key(), value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MDUxMA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTEwMzA4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyODowNFrOGgj4OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1OTozMlrOGgpzjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA==", "bodyText": "This test doesn't actually test anything except that you can loop over the fields of the class. Can we add some actual assertions about the functionality, rather than just making calls that don't test anything?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436795448", "createdAt": "2020-06-08T15:28:04Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwNzgzOA==", "bodyText": "Current test indeed only tested that you can call set method on every semantic attribute without any errors. But neither Span nor Span.Builder provides any API for reading attribute values. What else can you test here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436807838", "createdAt": "2020-06-08T15:45:53Z", "author": {"login": "iNikem"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwOTk4Ng==", "bodyText": "You would usually mock the builder using Mockito and verify that builder.setAttribute was called once with key() and the provided value.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436809986", "createdAt": "2020-06-08T15:48:49Z", "author": {"login": "arminru"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMTU5Ng==", "bodyText": "You can additionally mock the Span instance and do the same.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436811596", "createdAt": "2020-06-08T15:51:06Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxOTE5Mw==", "bodyText": "To tell you the truth, we don't do this at all for existing classes (in SemanticAttributeTest that is) and thus I feel we should do it in a follow-up PR where we apply the mocking for all of them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436819193", "createdAt": "2020-06-08T16:01:54Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1MDc3Ng==", "bodyText": "Please create an issue for it, then. We need to make sure our tests are really useful. This isn't going to be available to the instrumentation project until the next release, anyway, so I'm not sure why we're in such a hurry to get this merged.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436850776", "createdAt": "2020-06-08T16:51:13Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1MjMwMg==", "bodyText": "We have a branch against otel-java snapshots :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436852302", "createdAt": "2020-06-08T16:53:42Z", "author": {"login": "iNikem"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1NjAwMg==", "bodyText": "I can do verification of mock calls, no problem.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436856002", "createdAt": "2020-06-08T17:00:09Z", "author": {"login": "iNikem"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MjU1Ng==", "bodyText": "@jkwatson take a look now, please", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1317#discussion_r436892556", "createdAt": "2020-06-08T17:59:32Z", "author": {"login": "iNikem"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -51,15 +53,20 @@ public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n         keys.add(((StringAttributeSetter) attribute).key());\n         ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n         ((StringAttributeSetter) attribute).set(span, null);\n+        ((StringAttributeSetter) attribute).set(builder, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(builder, null);\n       } else if (attribute instanceof LongAttributeSetter) {\n         keys.add(((LongAttributeSetter) attribute).key());\n         ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).set(builder, 42L);\n       } else if (attribute instanceof DoubleAttributeSetter) {\n         keys.add(((DoubleAttributeSetter) attribute).key());\n         ((DoubleAttributeSetter) attribute).set(span, 3.14);\n+        ((DoubleAttributeSetter) attribute).set(builder, 3.14);\n       } else if (attribute instanceof BooleanAttributeSetter) {\n         keys.add(((BooleanAttributeSetter) attribute).key());\n         ((BooleanAttributeSetter) attribute).set(span, true);\n+        ((BooleanAttributeSetter) attribute).set(builder, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTQ0OA=="}, "originalCommit": {"oid": "a8b1e7525a50d84c8760ff020c0ac23926847cd5"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 778, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}