{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDQ3OTA1", "number": 889, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNDowNlrODhQtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxODozOFrODhROyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjAzMjc0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNDowNlrOFr7j8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxNjo0N1rOFr8Wkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwODk0NA==", "bodyText": "As a limitation of the current API for metrics the bound needs to be static or you need to unbind it, maybe in shutdown?\nAlso creating the same instrument twice may fail (we have not implement that check yet). So the instrument can easily be static :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381608944", "createdAt": "2020-02-19T23:34:06Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -267,12 +272,25 @@ private Worker(\n       this.maxExportBatchSize = maxExportBatchSize;\n       this.spansList = new ArrayList<>(maxQueueSize);\n       this.exporterTimeoutMillis = exporterTimeoutMillis;\n+\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");\n+      LongCounter droppedSpansCounter =\n+          meter\n+              .longCounterBuilder(\"droppedSpans\")\n+              .setMonotonic(true)\n+              .setUnit(\"1\")\n+              .setDescription(\n+                  \"The number of spans dropped by the BatchSpansProcessor due to high throughput.\")\n+              .build();\n+      this.droppedSpans =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7343a271e5e074cecf1a2f7da9c345871dcc4f19"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMDM5MQ==", "bodyText": "Making it static seems like a good option. I'll do it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381610391", "createdAt": "2020-02-19T23:38:49Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -267,12 +272,25 @@ private Worker(\n       this.maxExportBatchSize = maxExportBatchSize;\n       this.spansList = new ArrayList<>(maxQueueSize);\n       this.exporterTimeoutMillis = exporterTimeoutMillis;\n+\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");\n+      LongCounter droppedSpansCounter =\n+          meter\n+              .longCounterBuilder(\"droppedSpans\")\n+              .setMonotonic(true)\n+              .setUnit(\"1\")\n+              .setDescription(\n+                  \"The number of spans dropped by the BatchSpansProcessor due to high throughput.\")\n+              .build();\n+      this.droppedSpans =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwODk0NA=="}, "originalCommit": {"oid": "7343a271e5e074cecf1a2f7da9c345871dcc4f19"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMTkwNg==", "bodyText": "ok, done! Thanks for the quick feedback on this one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381621906", "createdAt": "2020-02-20T00:16:47Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -267,12 +272,25 @@ private Worker(\n       this.maxExportBatchSize = maxExportBatchSize;\n       this.spansList = new ArrayList<>(maxQueueSize);\n       this.exporterTimeoutMillis = exporterTimeoutMillis;\n+\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");\n+      LongCounter droppedSpansCounter =\n+          meter\n+              .longCounterBuilder(\"droppedSpans\")\n+              .setMonotonic(true)\n+              .setUnit(\"1\")\n+              .setDescription(\n+                  \"The number of spans dropped by the BatchSpansProcessor due to high throughput.\")\n+              .build();\n+      this.droppedSpans =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwODk0NA=="}, "originalCommit": {"oid": "7343a271e5e074cecf1a2f7da9c345871dcc4f19"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjExOTEzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxODozOFrOFr8YsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoyMToxOFrOFr8btQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMjQ0OA==", "bodyText": "io.opentelemetry.sdk.trace?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381622448", "createdAt": "2020-02-20T00:18:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -233,6 +237,23 @@ private static Thread newThread(Runnable runnable) {\n   // concurrency.\n   private static final class Worker implements Runnable {\n \n+    static {\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8376a6e119976a18a4e46373cdae7e991c556b6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMjY4MA==", "bodyText": "sure! I like that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381622680", "createdAt": "2020-02-20T00:19:28Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -233,6 +237,23 @@ private static Thread newThread(Runnable runnable) {\n   // concurrency.\n   private static final class Worker implements Runnable {\n \n+    static {\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMjQ0OA=="}, "originalCommit": {"oid": "a8376a6e119976a18a4e46373cdae7e991c556b6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMzIyMQ==", "bodyText": "updated", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/889#discussion_r381623221", "createdAt": "2020-02-20T00:21:18Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -233,6 +237,23 @@ private static Thread newThread(Runnable runnable) {\n   // concurrency.\n   private static final class Worker implements Runnable {\n \n+    static {\n+      Meter meter = OpenTelemetry.getMeterRegistry().get(\"opentelemetry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMjQ0OA=="}, "originalCommit": {"oid": "a8376a6e119976a18a4e46373cdae7e991c556b6"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}