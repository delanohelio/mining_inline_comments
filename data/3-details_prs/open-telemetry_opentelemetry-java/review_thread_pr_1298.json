{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTQxNzM2", "number": 1298, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToyODo1M1rOEBfICw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToyODo1M1rOEBfICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTkzOTk1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumObserverSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToyODo1M1rOGdXNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozMjo1NFrOGdXWBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjEyOA==", "bodyText": "Why are we double-wrapping here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1298#discussion_r433442128", "createdAt": "2020-06-01T19:28:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumObserverSdk.java", "diffHunk": "@@ -17,47 +17,35 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.DoubleSumObserver;\n+import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleSumObserver;\n import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n import io.opentelemetry.sdk.metrics.common.InstrumentType;\n import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n-import io.opentelemetry.sdk.metrics.data.MetricData;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.concurrent.locks.ReentrantLock;\n-import javax.annotation.Nullable;\n+import io.opentelemetry.sdk.metrics.view.Aggregations;\n \n-final class DoubleSumObserverSdk extends AbstractAsynchronousInstrument\n+final class DoubleSumObserverSdk extends AbstractAsynchronousInstrument<ResultDoubleSumObserver>\n     implements DoubleSumObserver {\n-  @Nullable private volatile Callback<ResultDoubleSumObserver> metricUpdater = null;\n-  private final ReentrantLock collectLock = new ReentrantLock();\n \n   DoubleSumObserverSdk(\n       InstrumentDescriptor descriptor,\n       MeterProviderSharedState meterProviderSharedState,\n       MeterSharedState meterSharedState) {\n-    super(descriptor, meterProviderSharedState, meterSharedState);\n+    super(\n+        descriptor,\n+        meterProviderSharedState,\n+        meterSharedState,\n+        new ActiveBatcher(\n+            new ActiveBatcher(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf162a2bdf032c4e98ae015e2b5893556cc07c8e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NDM1OA==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1298#discussion_r433444358", "createdAt": "2020-06-01T19:32:54Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumObserverSdk.java", "diffHunk": "@@ -17,47 +17,35 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.DoubleSumObserver;\n+import io.opentelemetry.metrics.DoubleSumObserver.ResultDoubleSumObserver;\n import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n import io.opentelemetry.sdk.metrics.common.InstrumentType;\n import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n-import io.opentelemetry.sdk.metrics.data.MetricData;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.concurrent.locks.ReentrantLock;\n-import javax.annotation.Nullable;\n+import io.opentelemetry.sdk.metrics.view.Aggregations;\n \n-final class DoubleSumObserverSdk extends AbstractAsynchronousInstrument\n+final class DoubleSumObserverSdk extends AbstractAsynchronousInstrument<ResultDoubleSumObserver>\n     implements DoubleSumObserver {\n-  @Nullable private volatile Callback<ResultDoubleSumObserver> metricUpdater = null;\n-  private final ReentrantLock collectLock = new ReentrantLock();\n \n   DoubleSumObserverSdk(\n       InstrumentDescriptor descriptor,\n       MeterProviderSharedState meterProviderSharedState,\n       MeterSharedState meterSharedState) {\n-    super(descriptor, meterProviderSharedState, meterSharedState);\n+    super(\n+        descriptor,\n+        meterProviderSharedState,\n+        meterSharedState,\n+        new ActiveBatcher(\n+            new ActiveBatcher(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjEyOA=="}, "originalCommit": {"oid": "bf162a2bdf032c4e98ae015e2b5893556cc07c8e"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 764, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}