{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjcwNDQy", "number": 1863, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1MjozNVrOEw4UEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjowNzoyMVrOE1FUDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njg5NzQ1OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1MjozNVrOHmtVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1MjozNVrOHmtVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MDY4Ng==", "bodyText": "What about using TimeUnit.SECONDS.toNanos() here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510350686", "createdAt": "2020-10-22T17:52:35Z", "author": {"login": "jkwatson"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.AttributeKey;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  static final long NANOS_PER_SECOND = (long) 1e9;\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                spanData.getStartTimestamp().getSeconds() * NANOS_PER_SECOND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njk2ODgzOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoxMjozNVrOHmuCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowMToxNFrOHm2vRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MjIyMA==", "bodyText": "I'm somewhat nervous about holding on to a Scope reference like this. Can we guarantee that attach and detach are always called on the same thread, and no other detach calls will be made on that thread in between the attach/detach pairs? I don't know enough (or anything) about Census to answer this question, but it makes me nervous.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510362220", "createdAt": "2020-10-22T18:12:35Z", "author": {"login": "jkwatson"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNDc3Mg==", "bodyText": "FYI the attach/detach methods are an abstraction for gRPC context used in OpenCensus by default:\n\nhttps://grpc.github.io/grpc-java/javadoc/io/grpc/Context.html#attach--\nhttps://grpc.github.io/grpc-java/javadoc/io/grpc/Context.html#detach-io.grpc.Context-\n\n\nThis context should be the same context that was previously attached. The provided replacement should be what was returned by the same attach() call. If an attach() and a detach() meet above requirements, they match.\n\n\nIt is expected that between any pair of matching attach() and detach(), all attach()es and detach()es are called in matching pairs. If this method finds that this context is not current, either you or some code in-between are not detaching correctly, and a SEVERE message will be logged but the context to attach will still be bound. Never use Context.current().detach(), as this will compromise this error-detecting mechanism.\n\nAre there any safeguards we can introduce to make sure we have the same semantics in this shim implementation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510504772", "createdAt": "2020-10-22T23:01:14Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MjIyMA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg5MTMyOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNDoyNlrOHm2y8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjowMlrOHplJLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA==", "bodyText": "From https://grpc.github.io/grpc-java/javadoc/io/grpc/Context.html#attach--\n\nThe previously current context is returned.\n\nWe may need to create a \"child\" context here somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510505714", "createdAt": "2020-10-22T23:04:26Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTkwMw==", "bodyText": "I think we're okay \ud83d\ude42  I've just added a test that tests parent-child relationships for:\n\nOpenTelemetry span (grandparent)\n\nOpenCensus span (parent)\n\nOpenTelemetry span (child)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512391903", "createdAt": "2020-10-27T03:15:11Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MzQ5Ng==", "bodyText": "Thanks! Could you also add a test where all 3 spans are coming from OpenCensus? This is to make sure they don't overwrite each other.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512393496", "createdAt": "2020-10-27T03:21:33Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTEyOA==", "bodyText": "I think the use case is very small, but it's conceivable that user code relies on the return value being the previous value (they get values out of it expecting old values). So something like this could be more correct if I'm not mistaken.\nContext current = Context.current();\ncurrent.scope = this.context.makeCurrent();\nreturn current;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512395128", "createdAt": "2020-10-27T03:28:14Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2MzU0NA==", "bodyText": "@nilebox yep, added\n@anuraaga Did you mean something like this?\n    // Get the current context, soon to be replaced\n    Context prev = Context.current();\n    // Replace the scope with the scope of `this` context\n    scope = context.makeCurrent();\n    // Return the previous context and the current scope\n    context = prev;\n    return this;\n\nThis would make the context inconsistent, as it would replace this context with the previous context every time attach() is called, whereas before attach() is called the context would be this context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512563544", "createdAt": "2020-10-27T10:12:09Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3NDA4MA==", "bodyText": "Nah think my code is what I was thinking. The scope (used to close later) is attached to the previous context (which is what is normally returned by attach). Is there anything that would break by doing that?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512574080", "createdAt": "2020-10-27T10:28:49Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDI3MQ==", "bodyText": "The attach() doesn't return a Context, it returns a ContextHandle, so to return the previous context I'd either have to do the above or create a new ContextHandle with the previous context and the current scope \u2014 is this what you're suggesting?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513094271", "createdAt": "2020-10-27T23:37:04Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjIyMg==", "bodyText": "Ah yeah I think that's what I'm suggesting. I think it's required to match the definition of that API (return the previous context) but it could be reasonable to tell interop users this isn't supported because it's a very small use case for their to actually be an effect.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513362222", "createdAt": "2020-10-28T11:16:02Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzg5Nzc4OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNzo0OVrOHm22ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyNDozNVrOHm6ByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjY4Mg==", "bodyText": "Note that we are closing the scope of a context passed as an argument here, not the scope of this.scope.\nWhich seems to imply that we should implement a \"nesting\" mechanism (using a Stack data structure probably), e.g.\ncreate context\n-- attach - creates root scope 1\n   -- attach - creates child scope 2\n       -- attach creates a sub-child scope 3\n       -- detach closes scope 3 and restores scope 2 as current\n   -- detach closes scope 2 and restores scope 1 as current\n-- detach closes scope 1 and there is no current scope anymore", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510506682", "createdAt": "2020-10-22T23:07:49Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;\n+  }\n+\n+  @Override\n+  public void detach(ContextHandle ctx) {\n+    OpenTelemetryCtx impl = (OpenTelemetryCtx) ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODY2NQ==", "bodyText": "The OpenTelemetry context has the same semantics as the grpc context (the implementation was heavily inspired by it), so I think this should all \"just work\" as long as everything is kept in alignment the same way.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510558665", "createdAt": "2020-10-23T02:24:35Z", "author": {"login": "jkwatson"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;\n+  }\n+\n+  @Override\n+  public void detach(ContextHandle ctx) {\n+    OpenTelemetryCtx impl = (OpenTelemetryCtx) ctx;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjY4Mg=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjk2NDY5OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1MjozNlrOHnnR9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMDozN1rOHqKmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ==", "bodyText": "Instead of using opencensus TracerImpl, can you use a shim implementation that delegates to a opentelemetry tracer? This will remove the need for the SpanCache which looks like it can affect performance a lot, the custom OC Tracer would return OC Spans that just wrap the OTel spans. FWIU, the opentracing shim takes such an approach so might be a good reference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511300085", "createdAt": "2020-10-24T03:52:36Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxMjQzMg==", "bodyText": "Yeah I tried a solution where I changed OpenCensus so that the shim would turn on another path in span creation, where an OTel tracer would take over to create the span and handle the rest. We didn't end up going with this approach as we didn't want OpenCensus to depend on OpenTelemetry, especially since we're not really maintaining OpenCensus anymore and don't want to do any more releases on OpenCensus unless there is some critical bug.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513312432", "createdAt": "2020-10-28T09:54:38Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNDA1OA==", "bodyText": "I haven't looked into opentracing much, but my understanding is that the opentracing shim is able to do so as opentracing is mainly interfaces that can be overridden, whereas with OpenCensus we'd actually have to change the implementation inside as well", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513314058", "createdAt": "2020-10-28T09:56:52Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NzMyOQ==", "bodyText": "Apologies if this is basic since I didn't dig into enough but from my understanding here we have Tracer which is an interface but we are returning TracerImpl from OC. Doesn't returning an implementation backed by OTel reduce the OC in the app instead of increasing it?\nIIUC the goal of the project is to allow OC users to gracefully migrate to OTel. So I guess the first step is to implement the OC API using OTel - then OC API usage can be migrated to OTel API usage gradually with no practical effect since the implementation is still OTel, the OC API dependency is finally removed and user has fully migrated. If this isn't the case, I think I'm missing a big point so let me know :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513367329", "createdAt": "2020-10-28T11:25:17Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzMzU5MA==", "bodyText": "Tracer is an abstract class not an interface\nSpan is an abstract class not an interface\nIn addition, I believe there are some static methods which may rely on certain implementation details which can't be easily swapped out with custom code using OT.\n\nGiven that OpenCensus was never designed to support custom SDK implementation (unlike OpenTracing and OpenTelemetry), it makes it pretty hard to completely replace the implementation.\nSo what we did instead is replaced the low-level Context management to use OT under the hood and also introduced a StartEndHandler hook which allows us to mirror all changes on OC side to OT. The rest of the code behaves as if there is a standard OC implementation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513833590", "createdAt": "2020-10-29T00:07:12Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjAxMQ==", "bodyText": "Thanks for the context, makes sense especially given the Span not being an interface", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976011", "createdAt": "2020-10-29T05:10:37Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjk3MTgzOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1NjoxOVrOHnnWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzo0Njo0N1rOHoqZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw==", "bodyText": "Have you considered the opposite approach, having OTel context use the OpenCensus context? Scope is more flexible than returning previousCtx, so the bridge can be a bit cleaner than the other way around. I suspect this code could be adapted to opencensus context trivially.\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context/src/otelAsGrpcTest/java/io/opentelemetry/context/GrpcContextStorageProvider.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511301317", "createdAt": "2020-10-24T03:56:19Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDk0MQ==", "bodyText": "Yep, decided on the current approach as we're trying to migrate everyone away from OpenCensus. Having OTel context use the OpenCensus context would mean that applications and libraries would have to configure OpenCensus rather than OpenTelemetry, which is something we want to avoid. The goal is to remove this once everyone moves to OpenTelemetry.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512390941", "createdAt": "2020-10-27T03:11:28Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NDY1Ng==", "bodyText": "My understanding is that with @anuraaga 's suggestion we would still use the OpenTelemetry pipeline at a high level, though it would be storing context in OpenCensus.\nI still do agree this would be more confusing than migrating everything to OpenTelemetry like it's done in this PR.\nSide effects of this shim only affect code instrumented with OpenCensus, not touching parts instrumented with OpenTelemetry at all.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512394656", "createdAt": "2020-10-27T03:26:11Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTc2MA==", "bodyText": "I guess this shim by nature assumes OC is there - so I think having the OTel context implementation also assume that should be ok? Once OC is removed from the classpath it'd just be normal OTel with no change in the app.\nThis approach seems fine too though, so just wanted to point it out, the main advantage would just be that the .scope stuff below could be a bit simpler.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512395760", "createdAt": "2020-10-27T03:30:34Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzA1Mw==", "bodyText": "Crosstalk :) But yeah I think either approach is fine if they can satisfy bidirectional interop like in\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context/src/otelAsGrpcTest/java/io/opentelemetry/context/OtelAsGrpcTest.java\nI know the OTelAsOC approach would work, but not sure about the reverse until we try :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512397053", "createdAt": "2020-10-27T03:35:47Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5Nzg1NA==", "bodyText": "I guess this shim by nature assumes OC is there\n\nActually no - this shim will work fine for libraries instrumented with OpenCensus API (e.g. Google Cloud Spanner client) even if OpenCensus SDK is not configured in the application.\ni.e. the assumption is that OpenCensus \"Implementation\" pipeline has been replaced with OpenTelemetry but there are certain cases where OpenCensus \"API\" is still used, so shim helps with implicitly exporting those into OpenTelemetry as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512397854", "createdAt": "2020-10-27T03:39:11Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5OTc4Mg==", "bodyText": "Ah got it - thanks for the explanation", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512399782", "createdAt": "2020-10-27T03:46:47Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw=="}, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjk3NDM1OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1Nzo0MVrOHnnYlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1Nzo0MVrOHnnYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTc4MA==", "bodyText": "Null check for impl.scope - if the user did incorrectly use scope and introduce a threading problem, it could be null here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511301780", "createdAt": "2020-10-24T03:57:41Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;\n+  }\n+\n+  @Override\n+  public void detach(ContextHandle ctx) {\n+    OpenTelemetryCtx impl = (OpenTelemetryCtx) ctx;\n+    impl.scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDQxNjg2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozMjozN1rOHoqMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozMjozN1rOHoqMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjI5Ng==", "bodyText": "Do you mind writing a similar test as this one?\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context/src/otelAsGrpcTest/java/io/opentelemetry/context/OtelAsGrpcTest.java\nWant to make sure both sides of the propagation are working.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512396296", "createdAt": "2020-10-27T03:32:37Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opencensus.trace.Tracing;\n+import io.opencensus.trace.samplers.Samplers;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collection;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+\n+public class InteroperabilityTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a27ff3295f687b2540dbc1379f98d0e07036b4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ4MTY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTozMlrOHqKocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjoxMToxNVrOHqMduQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjQzNQ==", "bodyText": "context.with(span)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976435", "createdAt": "2020-10-29T05:11:32Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -23,7 +23,7 @@\n    * @param context the parent {@code Context}.\n    * @return a new context with the given value set.\n    */\n-  static Context withSpan(Span span, Context context) {\n+  public static Context withSpan(Span span, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNjQ1Nw==", "bodyText": "GitHub ordered this above the important explanatory note in #1863 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514006457", "createdAt": "2020-10-29T06:11:15Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -23,7 +23,7 @@\n    * @param context the parent {@code Context}.\n    * @return a new context with the given value set.\n    */\n-  static Context withSpan(Span span, Context context) {\n+  public static Context withSpan(Span span, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjQzNQ=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ4MjI5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo0M1rOHqKo1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo0M1rOHqKo1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjUzMg==", "bodyText": "These APIs were replaced so go ahead and revert the changes in this file", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976532", "createdAt": "2020-10-29T05:11:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -23,7 +23,7 @@\n    * @param context the parent {@code Context}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ4MjY2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo0OVrOHqKpEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo0OVrOHqKpEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjU5Mw==", "bodyText": "Span.current()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976593", "createdAt": "2020-10-29T05:11:49Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -33,7 +33,7 @@ static Context withSpan(Span span, Context context) {\n    *\n    * @return the {@link Span} from the current {@code Context}.\n    */\n-  static Span getCurrentSpan() {\n+  public static Span getCurrentSpan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ4MzI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo1N1rOHqKpXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTo1N1rOHqKpXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjY2OA==", "bodyText": "Span.fromContext(context)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976668", "createdAt": "2020-10-29T05:11:57Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -44,7 +44,7 @@ static Span getCurrentSpan() {\n    * @param context the specified {@code Context}.\n    * @return the {@link Span} from the specified {@code Context}.\n    */\n-  static Span getSpan(Context context) {\n+  public static Span getSpan(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ4MzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMjowN1rOHqKpnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMjowN1rOHqKpnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjczMw==", "bodyText": "Span.fromContextOrNull(context)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976733", "createdAt": "2020-10-29T05:12:07Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -57,7 +57,7 @@ static Span getSpan(Context context) {\n    * @return the {@link Span} from the specified {@code Context}.\n    */\n   @Nullable\n-  static Span getSpanWithoutDefault(Context context) {\n+  public static Span getSpanWithoutDefault(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ5MDE1OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxNDoyMlrOHqKtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxNDoyMlrOHqKtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3Nzc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Scope scope;\n          \n          \n            \n              @Nullable\n          \n          \n            \n              private Scope scope;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513977793", "createdAt": "2020-10-29T05:14:22Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQ5NjgyOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxNjo0NlrOHqKyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxNjo0NlrOHqKyKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3ODkyMA==", "bodyText": "Is there a corner case where a user implemented their own ContextHandle and used it? It's extremely unexpected but it wouldn't hurt either to add an instanceof with a log telling them not to do that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513978920", "createdAt": "2020-10-29T05:16:46Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.api.trace.TracingContextUtils;\n+import io.opentelemetry.context.Context;\n+\n+public class OpenTelemetryContextManager implements ContextManager {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryContextManager() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public ContextHandle currentContext() {\n+    return wrapContext(Context.current());\n+  }\n+\n+  @Override\n+  public ContextHandle withValue(ContextHandle ctx, Span span) {\n+    OpenTelemetryCtx openTelemetryCtx = (OpenTelemetryCtx) ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUwMjExOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxODo0OFrOHqK1sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxODo0OFrOHqK1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3OTgyNg==", "bodyText": "Would name it addToCache", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513979826", "createdAt": "2020-10-29T05:18:48Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUwMjcwOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxOTowM1rOHqK2Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxOTowM1rOHqK2Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3OTkxMA==", "bodyText": "Would have removeFromCache return Span instead of two calls to the cache, guessing removing from cache doesn't affect the call to toSpanData", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513979910", "createdAt": "2020-10-29T05:19:03Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);\n+  }\n+\n+  @Override\n+  public void onEnd(RecordEventsSpanImpl ocSpan) {\n+    Span span = spanCache.toOtelSpan(ocSpan);\n+    SpanData spanData = ocSpan.toSpanData();\n+    spanCache.removeFromCache(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUwNjI2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyMDoxMlrOHqK4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyMDoxMlrOHqK4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MDQ2Ng==", "bodyText": "Good to name the variable otelSpan", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513980466", "createdAt": "2020-10-29T05:20:12Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);\n+  }\n+\n+  @Override\n+  public void onEnd(RecordEventsSpanImpl ocSpan) {\n+    Span span = spanCache.toOtelSpan(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUxMjM1OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyMjoyMVrOHqK8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNjo1NVrOHqLE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MTQ5Ng==", "bodyText": "Don't think I see anything specific to Java 8 here, can you describe more what this is referring to? I see it's setting the StartEndHandler which seems to be key, maybe we can just mention that instead of Java 8?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513981496", "createdAt": "2020-10-29T05:22:21Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzY5Nw==", "bodyText": "Also let's add the reference to the loading mechanism https://github.com/census-instrumentation/opencensus-java/blob/f8ea9bb4107eddb34324d9baf74737da470f4294/api/src/main/java/io/opencensus/trace/Tracing.java#L97", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983697", "createdAt": "2020-10-29T05:26:55Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MTQ5Ng=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUxOTk2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNTowMlrOHqLBYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNTowMlrOHqLBYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MjgxOA==", "bodyText": "Can you add some javadoc, especially describing the naming scheme resulting in it being used with a link to where this is recognized in opencensus?\nhttps://github.com/census-instrumentation/opencensus-java/blob/f8ea9bb4107eddb34324d9baf74737da470f4294/api/src/main/java/io/opencensus/trace/unsafe/ContextHandleUtils.java#L40", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513982818", "createdAt": "2020-10-29T05:25:02Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.api.trace.TracingContextUtils;\n+import io.opentelemetry.context.Context;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUyMjI2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNTo1N1rOHqLDAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNTo1N1rOHqLDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzIzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryCtx implements ContextHandle {\n          \n          \n            \n            class OpenTelemetryCtx implements ContextHandle {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983233", "createdAt": "2020-10-29T05:25:57Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUyMzE4OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNjoyMlrOHqLDqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNjoyMlrOHqLDqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryStartEndHandler implements StartEndHandler {\n          \n          \n            \n            class OpenTelemetryStartEndHandler implements StartEndHandler {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983401", "createdAt": "2020-10-29T05:26:22Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUyNTQzOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNzowNFrOHqLFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyNzowNFrOHqLFDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4Mzc1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpanCache {\n          \n          \n            \n            class SpanCache {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983758", "createdAt": "2020-10-29T05:27:04Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUyODY4OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyODoxNVrOHqLHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyODoxNVrOHqLHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDMxMg==", "bodyText": "MINUTES can just be inlined, it's already a constant no need to alias it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513984312", "createdAt": "2020-10-29T05:28:15Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {\n+\n+  private static final SpanCache SPAN_CACHE = new SpanCache();\n+\n+  private static final int MAXIMUM_CACHE_SIZE = 10000;\n+  private static final int CACHE_EXPIRE_TIME_MINUTES = 10;\n+  private static final TimeUnit CACHE_EXPIRE_UNIT = TimeUnit.MINUTES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDUzNDg4OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyOTo1OVrOHqLLHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToyOTo1OVrOHqLLHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NTMxMQ==", "bodyText": "Any thoughts on system properties? Or maybe just go with 100000 - I think more than 10K concurrent requests is, while not common, fairly reasonable too. More than 100K is getting to pretty awesome scale though and much more rare.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513985311", "createdAt": "2020-10-29T05:29:59Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {\n+\n+  private static final SpanCache SPAN_CACHE = new SpanCache();\n+\n+  private static final int MAXIMUM_CACHE_SIZE = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYwMTc1OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1MjoyOVrOHqL3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjozMjoyNFrOHsCc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjU5MA==", "bodyText": "I'm back here :) Looked through the abstract classes, and I noticed a pattern similar to what we do in the java agent could work well here (not delegating OC Span calls to OTel span).\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/trace/ApplicationSpan.java\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/trace/ApplicationTracer.java\nDelegating to the OC implementations but wrapping the returned OC span with OCSpanWrapper which delegates to the created OC span and also stores a correspond OTel span. OpenTelemetryContextManager.withValue stores both OTel span as currently and a reference to the OCSpanWrapper. OpenTelemetryContextManager.getValue just returns the OCSpanWrapper.\nCould have the startEndHandler just listen on end events to finish things up, or maybe even remove it and override Span.end which looks safe.\nThis looks like it could get rid of the cache so users migrating don't have to worry about its limits. What do you think?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513996590", "createdAt": "2020-10-29T05:52:29Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAxMjcwNw==", "bodyText": "By the way if it sounds good, happy for it to be a followup PR, I know the rebases must be hurting (sorry ><). I think the rest of the changes are mechanical.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514012707", "createdAt": "2020-10-29T06:23:12Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjU5MA=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzOTU3MA==", "bodyText": "Yep I've made a ticket, will come back to this later!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r515939570", "createdAt": "2020-11-02T12:32:24Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjU5MA=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYwMjYxOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1Mjo0NVrOHqL3pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1Mjo0NVrOHqL3pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpanConverter {\n          \n          \n            \n            class SpanConverter {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513996711", "createdAt": "2020-10-29T05:52:45Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYwNTgyOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1Mzo1MVrOHqL51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1Mzo1MVrOHqL51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NzI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static class FakeSpan extends Span {\n          \n          \n            \n              static class FakeSpan extends Span {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513997269", "createdAt": "2020-10-29T05:53:51Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYwOTkxOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1NTowMVrOHqL8lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1NTowMVrOHqL8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5Nzk3NA==", "bodyText": "Don't believe span can be null. But if it can or to be extra defensive, we should return Span.invalid(), null span is almost never used in code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513997974", "createdAt": "2020-10-29T05:55:01Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYxNTc2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1Njo1M1rOHqMAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDowNzo0OVrOHq97ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5ODg5MQ==", "bodyText": "SpanData methods won't return null", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513998891", "createdAt": "2020-10-29T05:56:53Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgxMDY3NQ==", "bodyText": ".getKind() has a @Nullable annotation and kind isn't required to be set when an OpenCensus span is created, so I think we do need it here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514810675", "createdAt": "2020-10-30T04:02:11Z", "author": {"login": "zoercai"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5ODg5MQ=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgxNjkwNg==", "bodyText": "Sorry I think I read this as OTel SpanData. Can you rename the variable to ocSpanData? :-)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514816906", "createdAt": "2020-10-30T04:07:49Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5ODg5MQ=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYxNzMxOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1NzoyOFrOHqMBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNTo1NzoyOFrOHqMBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5OTE3MA==", "bodyText": "I know this won't ever happen since opencensus is deprecated, but it'd still be nice to return a real value like INTERNAL here, or at least add a comment like my first sentence here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513999170", "createdAt": "2020-10-29T05:57:28Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {\n+      builder.setSpanKind(mapKind(spanData.getKind()));\n+    }\n+    if (spanData.getAttributes() != null) {\n+      for (Map.Entry<String, AttributeValue> attribute :\n+          spanData.getAttributes().getAttributeMap().entrySet()) {\n+        attribute\n+            .getValue()\n+            .match(\n+                setStringAttribute(builder, attribute),\n+                setBooleanAttribute(builder, attribute),\n+                setLongAttribute(builder, attribute),\n+                setDoubleAttribute(builder, attribute),\n+                arg -> null);\n+      }\n+    }\n+    if (spanData.getLinks() != null) {\n+      for (Link link : spanData.getLinks().getLinks()) {\n+        Attributes.Builder attributesBuilder = Attributes.builder();\n+        link.getAttributes()\n+            .forEach(\n+                (s, attributeValue) ->\n+                    attributeValue.match(\n+                        setStringAttribute(attributesBuilder, s),\n+                        setBooleanAttribute(attributesBuilder, s),\n+                        setLongAttribute(attributesBuilder, s),\n+                        setDoubleAttribute(attributesBuilder, s),\n+                        arg -> null));\n+        builder.addLink(\n+            io.opentelemetry.api.trace.SpanContext.create(\n+                TraceId.bytesToHex(link.getTraceId().getBytes()),\n+                SpanId.bytesToHex(link.getSpanId().getBytes()),\n+                TraceFlags.getDefault(),\n+                TraceState.getDefault()),\n+            attributesBuilder.build());\n+      }\n+    }\n+    return builder.startSpan();\n+  }\n+\n+  private static Kind mapKind(Span.Kind kind) {\n+    switch (kind) {\n+      case CLIENT:\n+        return Kind.CLIENT;\n+      case SERVER:\n+        return Kind.SERVER;\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDYzOTUwOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNDozOVrOHqMPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNDozOVrOHqMPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMjg1NA==", "bodyText": "Let's document what this fake span does, it's job seems to be to record events and only that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514002854", "createdAt": "2020-10-29T06:04:39Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDY0Mjg2OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNTo1MVrOHqMR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNTo1MVrOHqMR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMzQyNA==", "bodyText": "Store the attribute keys as private static final", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514003424", "createdAt": "2020-10-29T06:05:51Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {\n+      builder.setSpanKind(mapKind(spanData.getKind()));\n+    }\n+    if (spanData.getAttributes() != null) {\n+      for (Map.Entry<String, AttributeValue> attribute :\n+          spanData.getAttributes().getAttributeMap().entrySet()) {\n+        attribute\n+            .getValue()\n+            .match(\n+                setStringAttribute(builder, attribute),\n+                setBooleanAttribute(builder, attribute),\n+                setLongAttribute(builder, attribute),\n+                setDoubleAttribute(builder, attribute),\n+                arg -> null);\n+      }\n+    }\n+    if (spanData.getLinks() != null) {\n+      for (Link link : spanData.getLinks().getLinks()) {\n+        Attributes.Builder attributesBuilder = Attributes.builder();\n+        link.getAttributes()\n+            .forEach(\n+                (s, attributeValue) ->\n+                    attributeValue.match(\n+                        setStringAttribute(attributesBuilder, s),\n+                        setBooleanAttribute(attributesBuilder, s),\n+                        setLongAttribute(attributesBuilder, s),\n+                        setDoubleAttribute(attributesBuilder, s),\n+                        arg -> null));\n+        builder.addLink(\n+            io.opentelemetry.api.trace.SpanContext.create(\n+                TraceId.bytesToHex(link.getTraceId().getBytes()),\n+                SpanId.bytesToHex(link.getSpanId().getBytes()),\n+                TraceFlags.getDefault(),\n+                TraceState.getDefault()),\n+            attributesBuilder.build());\n+      }\n+    }\n+    return builder.startSpan();\n+  }\n+\n+  private static Kind mapKind(Span.Kind kind) {\n+    switch (kind) {\n+      case CLIENT:\n+        return Kind.CLIENT;\n+      case SERVER:\n+        return Kind.SERVER;\n+    }\n+    return null;\n+  }\n+\n+  static Span fromOtelSpan(io.opentelemetry.api.trace.Span otSpan) {\n+    if (otSpan == null) {\n+      return null;\n+    }\n+    SpanContext spanContext =\n+        SpanContext.create(\n+            io.opencensus.trace.TraceId.fromLowerBase16(\n+                otSpan.getSpanContext().getTraceIdAsHexString()),\n+            io.opencensus.trace.SpanId.fromLowerBase16(\n+                otSpan.getSpanContext().getSpanIdAsHexString()),\n+            TraceOptions.builder().setIsSampled(otSpan.getSpanContext().isSampled()).build(),\n+            mapTracestate(otSpan.getSpanContext().getTraceState()));\n+    return new FakeSpan(spanContext);\n+  }\n+\n+  private static Tracestate mapTracestate(TraceState traceState) {\n+    Tracestate.Builder tracestateBuilder = Tracestate.builder();\n+    traceState\n+        .getEntries()\n+        .forEach(entry -> tracestateBuilder.set(entry.getKey(), entry.getValue()));\n+    return tracestateBuilder.build();\n+  }\n+\n+  static void mapAndAddTimedEvents(\n+      io.opentelemetry.api.trace.Span span, List<TimedEvent<MessageEvent>> events) {\n+    for (TimedEvent<MessageEvent> event : events) {\n+      span.addEvent(\n+          String.valueOf(event.getEvent().getMessageId()),\n+          Attributes.of(\n+              AttributeKey.stringKey(\"message.event.type\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDY0OTY4OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/ThreadLocalRandomHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNzo1MFrOHqMWUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNzo1MFrOHqMWUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNDU2Mg==", "bodyText": "Let's add a comment that the OpenCensus one is in the implementation which we don't want to use here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514004562", "createdAt": "2020-10-29T06:07:50Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/ThreadLocalRandomHandler.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Implementation of the {@link RandomHandler} using {@link ThreadLocalRandom}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDY1MjEwOnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowODozOFrOHqMYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowODozOFrOHqMYBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNDk5Ng==", "bodyText": "Since this is a new test can you use junit5 / mockitoextension? e.g. \n  \n    \n      opentelemetry-java/extensions/trace_utils/src/test/java/io/opentelemetry/extensions/trace/CurrentSpanUtilsTest.java\n    \n    \n         Line 20\n      in\n      7ebbe79\n    \n    \n    \n    \n\n        \n          \n           @ExtendWith(MockitoExtension.class)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514004996", "createdAt": "2020-10-29T06:08:38Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opencensus.trace.Tracing;\n+import io.opencensus.trace.samplers.Samplers;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.util.Collection;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+\n+public class InteroperabilityTest {\n+\n+  private static final String NULL_SPAN_ID = \"0000000000000000\";\n+\n+  @Captor private ArgumentCaptor<Collection<SpanData>> spanDataCaptor;\n+\n+  @Spy private SpanExporter spanExporter;\n+\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDY1Nzc5OnYy", "diffSide": "RIGHT", "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/SpanConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjoxMDoyMFrOHqMbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjoxMDoyMFrOHqMbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNTkzMg==", "bodyText": "Prefer assertj assertions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514005932", "createdAt": "2020-10-29T06:10:20Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/SpanConverterTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opencensus.trace.Link.Type.PARENT_LINKED_SPAN;\n+import static io.opencensus.trace.Span.Kind.CLIENT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opencensus.implcore.internal.TimestampConverter;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.internal.ZeroTimeClock;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+class SpanConverterTest {\n+  private static final IdsGenerator RANDOM_IDS_GENERATOR = IdsGenerator.random();\n+\n+  @Test\n+  void testToOtelSpan() {\n+    RecordEventsSpanImpl span = createOpenCensusSpan();\n+\n+    Span otelSpan = SpanConverter.toOtelSpan(span);\n+\n+    assertEquals(0x1, otelSpan.getSpanContext().getTraceFlags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDk3MDM4OnYy", "diffSide": "RIGHT", "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjowNzoyMVrOHtKMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMToxODowN1rOHtTx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNTAxNw==", "bodyText": "Doesn't it record events because we pass the RECORD_EVENTS option?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r517115017", "createdAt": "2020-11-04T06:07:21Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class SpanConverter {\n+\n+  /**\n+   * FakeSpan is used to represent OpenTelemetry spans in the OpenCensus context. Only the trace ID,\n+   * span ID, trace options, and trace state are mapped, so that the correct context information can\n+   * be picked up by the child spans. FakeSpan does not record events or links.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MTAzNw==", "bodyText": "What I'm trying to say with the comment is that the FakeSpan doesn't record events since .addAnnotation() is never called on it, and that it doesn't do anything even if .addAnnotation() was called on it, but it is the OpenCensus representation of the OpenTelemetry span which does record events. It has the record events option, which according to the RECORD_EVENTS documentation means \"This option is set if the Span is part of a sampled distributed trace\", so having this option just means it's sampled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r517241037", "createdAt": "2020-11-04T10:24:37Z", "author": {"login": "zoercai"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class SpanConverter {\n+\n+  /**\n+   * FakeSpan is used to represent OpenTelemetry spans in the OpenCensus context. Only the trace ID,\n+   * span ID, trace options, and trace state are mapped, so that the correct context information can\n+   * be picked up by the child spans. FakeSpan does not record events or links.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNTAxNw=="}, "originalCommit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MzYzNw==", "bodyText": "Let me know if that doesn't make sense, happy to modify the comment :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r517243637", "createdAt": "2020-11-04T10:28:40Z", "author": {"login": "zoercai"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class SpanConverter {\n+\n+  /**\n+   * FakeSpan is used to represent OpenTelemetry spans in the OpenCensus context. Only the trace ID,\n+   * span ID, trace options, and trace state are mapped, so that the correct context information can\n+   * be picked up by the child spans. FakeSpan does not record events or links.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNTAxNw=="}, "originalCommit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3MjA1NQ==", "bodyText": "Ah got it - since we have a word event with a specific meaning it was confusing. \"Does not record\" by itself seems fine to me.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r517272055", "createdAt": "2020-11-04T11:18:07Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class SpanConverter {\n+\n+  /**\n+   * FakeSpan is used to represent OpenTelemetry spans in the OpenCensus context. Only the trace ID,\n+   * span ID, trace options, and trace state are mapped, so that the correct context information can\n+   * be picked up by the child spans. FakeSpan does not record events or links.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNTAxNw=="}, "originalCommit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1998, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}