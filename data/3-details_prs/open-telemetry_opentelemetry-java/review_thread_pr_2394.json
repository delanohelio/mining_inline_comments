{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NDQ4NTA2", "number": 2394, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMToxNDo0N1rOFIWmUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMjo1MzowMFrOFIXmog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzAzMTg2OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMToxNDo0N1rOIKOEFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMToxNDo0N1rOIKOEFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NzA5NA==", "bodyText": "This hides the actual type behind the generic <V>, still safe in the Accumulator and Processor but because of this you can see in DoubleMinMaxSumCountAggregatorTest.java that I need to add an annotation (errorprone complained), then discovered that I cannot use MinMaxSumCountAccumulation there because everything is actually hidden behind this conversion.\nI will most likely need to make the factory have 2 generic types and 2 methods createLong and createDouble which will return their own generic.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547587094", "createdAt": "2020-12-23T01:14:47Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/ImmutableAggregationFactory.java", "diffHunk": "@@ -9,36 +9,40 @@\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class ImmutableAggregationFactory implements AggregationFactory {\n+final class ImmutableAggregationFactory<L extends Accumulation, D extends Accumulation>\n+    implements AggregationFactory {\n   static final AggregationFactory SUM =\n-      new ImmutableAggregationFactory(SumAggregation.LONG_INSTANCE, SumAggregation.DOUBLE_INSTANCE);\n+      new ImmutableAggregationFactory<>(\n+          SumAggregation.LONG_INSTANCE, SumAggregation.DOUBLE_INSTANCE);\n \n   static final AggregationFactory COUNT =\n-      new ImmutableAggregationFactory(CountAggregation.INSTANCE, CountAggregation.INSTANCE);\n+      new ImmutableAggregationFactory<>(CountAggregation.INSTANCE, CountAggregation.INSTANCE);\n \n   static final AggregationFactory LAST_VALUE =\n-      new ImmutableAggregationFactory(\n+      new ImmutableAggregationFactory<>(\n           LastValueAggregation.LONG_INSTANCE, LastValueAggregation.DOUBLE_INSTANCE);\n \n   static final AggregationFactory MIN_MAX_SUM_COUNT =\n-      new ImmutableAggregationFactory(\n+      new ImmutableAggregationFactory<>(\n           MinMaxSumCountAggregation.LONG_INSTANCE, MinMaxSumCountAggregation.DOUBLE_INSTANCE);\n \n-  private final Aggregation longAggregation;\n-  private final Aggregation doubleAggregation;\n+  private final Aggregation<L> longAggregation;\n+  private final Aggregation<D> doubleAggregation;\n \n-  private ImmutableAggregationFactory(Aggregation longAggregation, Aggregation doubleAggregation) {\n+  private ImmutableAggregationFactory(\n+      Aggregation<L> longAggregation, Aggregation<D> doubleAggregation) {\n     this.longAggregation = longAggregation;\n     this.doubleAggregation = doubleAggregation;\n   }\n \n   @Override\n-  public Aggregation create(InstrumentValueType instrumentValueType) {\n+  @SuppressWarnings(\"unchecked\")\n+  public <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType) {\n     switch (instrumentValueType) {\n       case LONG:\n-        return longAggregation;\n+        return (Aggregation<V>) longAggregation;\n       case DOUBLE:\n-        return doubleAggregation;\n+        return (Aggregation<V>) doubleAggregation;\n     }\n     throw new IllegalArgumentException(\"Invalid instrument value type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzA0NTgzOnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMToyMjozM1rOIKOLzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMToyMjozM1rOIKOLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4OTA2OQ==", "bodyText": "This will be transformed in T as well soon, but trying to limit the size of the PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547589069", "createdAt": "2020-12-23T01:22:33Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregation.java", "diffHunk": "@@ -55,7 +55,7 @@ MetricData toMetricData(\n       Resource resource,\n       InstrumentationLibraryInfo instrumentationLibraryInfo,\n       InstrumentDescriptor descriptor,\n-      Map<Labels, Accumulation> accumulationMap,\n+      Map<Labels, ? extends Accumulation> accumulationMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzE5Mjk3OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMjo1MDo0NlrOIKPfZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowMzo0MVrOIKPr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMDQ2OA==", "bodyText": "V?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547610468", "createdAt": "2020-12-23T02:50:46Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java", "diffHunk": "@@ -61,5 +61,5 @@ static AggregationFactory minMaxSumCount() {\n    * @param instrumentValueType the type of recorded values for the {@code Instrument}.\n    * @return a new {@link Aggregation}.\n    */\n-  Aggregation create(InstrumentValueType instrumentValueType);\n+  <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzY5MQ==", "bodyText": "Changed to T :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547613691", "createdAt": "2020-12-23T03:03:41Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/AggregationFactory.java", "diffHunk": "@@ -61,5 +61,5 @@ static AggregationFactory minMaxSumCount() {\n    * @param instrumentValueType the type of recorded values for the {@code Instrument}.\n    * @return a new {@link Aggregation}.\n    */\n-  Aggregation create(InstrumentValueType instrumentValueType);\n+  <V extends Accumulation> Aggregation<V> create(InstrumentValueType instrumentValueType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMDQ2OA=="}, "originalCommit": {"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzE5NjUwOnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/MinMaxSumCountAggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMjo1MzowMFrOIKPhgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMjo1MzowMFrOIKPhgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMTAwOQ==", "bodyText": "for future, I might name this parameter \"accumulationsByLabels\". No need to change it now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2394#discussion_r547611009", "createdAt": "2020-12-23T02:53:00Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/MinMaxSumCountAggregation.java", "diffHunk": "@@ -18,40 +18,33 @@\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class MinMaxSumCountAggregation implements Aggregation {\n+final class MinMaxSumCountAggregation extends AbstractAggregation<MinMaxSumCountAccumulation> {\n   static final MinMaxSumCountAggregation LONG_INSTANCE =\n       new MinMaxSumCountAggregation(LongMinMaxSumCountAggregator.getFactory());\n   static final MinMaxSumCountAggregation DOUBLE_INSTANCE =\n       new MinMaxSumCountAggregation(DoubleMinMaxSumCountAggregator.getFactory());\n \n-  private final AggregatorFactory<?> aggregatorFactory;\n-\n-  private MinMaxSumCountAggregation(AggregatorFactory<?> aggregatorFactory) {\n-    this.aggregatorFactory = aggregatorFactory;\n-  }\n-\n-  @Override\n-  public AggregatorFactory<?> getAggregatorFactory() {\n-    return aggregatorFactory;\n+  private MinMaxSumCountAggregation(\n+      AggregatorFactory<MinMaxSumCountAccumulation> aggregatorFactory) {\n+    super(aggregatorFactory);\n   }\n \n   @Override\n-  public Accumulation merge(Accumulation a1, Accumulation a2) {\n-    MinMaxSumCountAccumulation minMaxSumCountAccumulation1 = (MinMaxSumCountAccumulation) a1;\n-    MinMaxSumCountAccumulation minMaxSumCountAccumulation2 = (MinMaxSumCountAccumulation) a2;\n+  public MinMaxSumCountAccumulation merge(\n+      MinMaxSumCountAccumulation a1, MinMaxSumCountAccumulation a2) {\n     return MinMaxSumCountAccumulation.create(\n-        minMaxSumCountAccumulation1.getCount() + minMaxSumCountAccumulation2.getCount(),\n-        minMaxSumCountAccumulation1.getSum() + minMaxSumCountAccumulation2.getSum(),\n-        Math.min(minMaxSumCountAccumulation1.getMin(), minMaxSumCountAccumulation2.getMin()),\n-        Math.max(minMaxSumCountAccumulation1.getMax(), minMaxSumCountAccumulation2.getMax()));\n+        a1.getCount() + a2.getCount(),\n+        a1.getSum() + a2.getSum(),\n+        Math.min(a1.getMin(), a2.getMin()),\n+        Math.max(a1.getMax(), a2.getMax()));\n   }\n \n   @Override\n   public MetricData toMetricData(\n       Resource resource,\n       InstrumentationLibraryInfo instrumentationLibraryInfo,\n       InstrumentDescriptor descriptor,\n-      Map<Labels, Accumulation> accumulationMap,\n+      Map<Labels, ? extends Accumulation> accumulationMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067caa8eeb1923a04f61fc1e98c2dd4b4e054555"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}