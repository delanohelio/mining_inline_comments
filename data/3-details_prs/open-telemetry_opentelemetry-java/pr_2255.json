{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTc5MTIw", "number": 2255, "title": "Rename accumulator to processor to match Go", "bodyText": "I was wrong initially, what we had as Batcher is actually the Processor in Go.\nSigned-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-12-10T01:49:07Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255", "merged": true, "mergeCommit": {"oid": "feedef236676edf08387b0064f8deb210cf5d7d8"}, "closed": true, "closedAt": "2020-12-10T04:19:32Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkpV6WgH2gAyNTM1NTc5MTIwOjZhNjJjN2EzYTIxYTk4ZTQ4ZDkyOTFkYzA0YjQ1OGMxYTgzOWRiNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkreBSgFqTU0ODgwNjg0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6a62c7a3a21a98e48d9291dc04b458c1a839db48", "committedDate": "2020-12-10T01:48:33Z", "message": "Rename accumulator to processor to match Go\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODAxODQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#pullrequestreview-548801846", "createdAt": "2020-12-10T04:00:19Z", "commit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowMDoxOVrOIC0eRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowMDoxOVrOIC0eRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc4Mg==", "bodyText": "I was following this rename until I hit this. Why are we passing a processor to create a new binding for an instrument? That doesn't seem like the role of the processor to me. I could think that the binding would be registered with the accumulator, not the processor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539827782", "createdAt": "2020-12-10T04:00:19Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/AbstractSynchronousInstrument.java", "diffHunk": "@@ -68,14 +68,13 @@ public B bind(Labels labels) {\n           // acquire but because we requested a specific value only one will succeed.\n           boundLabels.remove(entry.getKey(), entry.getValue());\n         }\n-        instrumentAccumulator.batch(\n-            entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n+        instrumentProcessor.batch(entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n       }\n-      return instrumentAccumulator.completeCollectionCycle();\n+      return instrumentProcessor.completeCollectionCycle();\n     } finally {\n       collectLock.unlock();\n     }\n   }\n \n-  abstract B newBinding(InstrumentAccumulator instrumentAccumulator);\n+  abstract B newBinding(InstrumentProcessor instrumentProcessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODAzMzQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#pullrequestreview-548803340", "createdAt": "2020-12-10T04:05:32Z", "commit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNTozM1rOIC0kKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNTozM1rOIC0kKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI4OA==", "bodyText": "this definitely doesn't feel right to me. The Accumulator should be handling the binding, so it can keep track of when to released the resources associated with the labelset. I don't think that's the job of the Processor, which needs to hold long-term state of all the labelsets against which recordings have been made, even if they're not currently being actively recorded.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539829288", "createdAt": "2020-12-10T04:05:33Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "diffHunk": "@@ -35,15 +34,15 @@ public void add(long increment) {\n   }\n \n   @Override\n-  BoundInstrument newBinding(InstrumentAccumulator instrumentAccumulator) {\n-    return new BoundInstrument(instrumentAccumulator);\n+  BoundInstrument newBinding(InstrumentProcessor instrumentProcessor) {\n+    return new BoundInstrument(instrumentProcessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODA2ODQy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#pullrequestreview-548806842", "createdAt": "2020-12-10T04:17:13Z", "commit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3615, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}