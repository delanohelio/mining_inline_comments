{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDQ4Mjk4", "number": 1535, "title": "Fix for Issue with bound instruments generating datapoints from no recordings.", "bodyText": "Fixes #1453\nThe fix is to introduce an AtomicBoolean in the AbstractAggregator that tracks whether recordings have been made since the last reset was done. The ActiveBatcher queries the aggregator and if no recordings have been made, it skips generating metric points.", "createdAt": "2020-08-12T22:56:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535", "merged": true, "mergeCommit": {"oid": "dfc5cbe4aae26c6d9c09b180b557e7432e5f8951"}, "closed": true, "closedAt": "2020-08-15T02:42:21Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-NdLCgH2gAyNDY3MDQ4Mjk4OjQ1OTE1YjZkODc0MzZhNzFjMWM3NTJhMDMwOTBlZjg1ODI3YzY0OWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-_i7_AFqTQ2NzkzOTczNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45915b6d87436a71c1c752a03090ef85827c649c", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45915b6d87436a71c1c752a03090ef85827c649c", "committedDate": "2020-08-12T15:50:01Z", "message": "write a test that demonstrates a bound counter reporting zeros with no observations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee2fc7d72334078e4e1afc56b9bd03a861737b7", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ee2fc7d72334078e4e1afc56b9bd03a861737b7", "committedDate": "2020-08-12T22:47:22Z", "message": "Have the metric Aggregator keep track of if there have been recordings since a reset has been done.\nHave the batcher skip batching if no recordings have been made."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "committedDate": "2020-08-12T23:13:06Z", "message": "Add a test to assert the NoopAggregator has no recordings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NDkyNzcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#pullrequestreview-466492771", "createdAt": "2020-08-13T07:00:38Z", "commit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjczOTc0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#pullrequestreview-467273974", "createdAt": "2020-08-14T02:47:21Z", "commit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0NzoyMlrOHAluMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0OTowN1rOHAlv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDA4Mw==", "bodyText": "Since we're not using CAS, this can just be volatile boolean.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380083", "createdAt": "2020-08-14T02:47:22Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -16,14 +16,22 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n abstract class AbstractAggregator implements Aggregator {\n+  // Note: This is not 100% thread-safe. There is a race condition where recordings can\n+  // be made in the moment between the reset and the setting of this field's value. In those\n+  // cases, it is possible that a recording could be missed in a given recording interval, but\n+  // it should be picked up in the next, assuming that more recordings are being made.\n+  private final AtomicBoolean hasRecordings = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDE0Ng==", "bodyText": "Isn't it better to set after recording since that's when it actually \"has recordings\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380146", "createdAt": "2020-08-14T02:47:36Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -38,12 +46,37 @@ public void mergeToAndReset(Aggregator other) {\n   abstract void doMergeAndReset(Aggregator aggregator);\n \n   @Override\n-  public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+  public final void recordLong(long value) {\n+    hasRecordings.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDUxNw==", "bodyText": "No particular preference but wondered if isEmpty is more idiomatic", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380517", "createdAt": "2020-08-14T02:49:07Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "diffHunk": "@@ -57,4 +57,7 @@\n    * @param value the new {@code double} value to be added.\n    */\n   void recordDouble(double value);\n+\n+  /** Whether there have been any recordings since this aggregator has been reset. */\n+  boolean hasRecordings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "108537dbd9b7acaa4373ef9c0b0d5e7b7135a988", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/108537dbd9b7acaa4373ef9c0b0d5e7b7135a988", "committedDate": "2020-08-14T18:40:03Z", "message": "Tweaks from PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM5NzM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#pullrequestreview-467939737", "createdAt": "2020-08-15T02:11:34Z", "commit": {"oid": "108537dbd9b7acaa4373ef9c0b0d5e7b7135a988"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2329, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}