{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MjgxNzU1", "number": 2051, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNTozOVrOE3F7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNTozOVrOE3F7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjA0Mjg4OnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNTozOVrOHwPMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0Njo1N1rOHwoQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MjcxNQ==", "bodyText": "Since it's a testing helper, I think we can assume user's won't try to trick the compiler with a bad array.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2051#discussion_r520342715", "createdAt": "2020-11-10T07:25:39Z", "author": {"login": "anuraaga"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.assertj.core.api.AbstractIterableAssert;\n+\n+/** Assertions for an exported trace, a list of {@link SpanData} with the same trace ID. */\n+public class TraceAssert\n+    extends AbstractIterableAssert<TraceAssert, List<SpanData>, SpanData, SpanDataAssert> {\n+\n+  TraceAssert(List<SpanData> spanData) {\n+    super(spanData, TraceAssert.class);\n+  }\n+\n+  public TraceAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    isNotEmpty();\n+\n+    String actualTraceId = actual.get(0).getTraceId();\n+    if (!actualTraceId.equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actualTraceId,\n+          traceId,\n+          \"Expected trace to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actualTraceId);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Asserts that the trace under assertion has the same number of spans as provided {@code\n+   * assertions} and executes each {@link SpanDataAssert} in {@code assertions} in order with the\n+   * corresponding span.\n+   */\n+  @SafeVarargs\n+  @SuppressWarnings(\"varargs\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507b0a766bbe2ce115c10d4b22b8dd3d40bbd216"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzI4NQ==", "bodyText": "I think you mean: Users will certainly try to trick the compiler with a bad array.  \ud83d\ude06", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2051#discussion_r520753285", "createdAt": "2020-11-10T17:46:57Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/assertj/TraceAssert.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.assertj;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.assertj.core.api.AbstractIterableAssert;\n+\n+/** Assertions for an exported trace, a list of {@link SpanData} with the same trace ID. */\n+public class TraceAssert\n+    extends AbstractIterableAssert<TraceAssert, List<SpanData>, SpanData, SpanDataAssert> {\n+\n+  TraceAssert(List<SpanData> spanData) {\n+    super(spanData, TraceAssert.class);\n+  }\n+\n+  public TraceAssert hasTraceId(String traceId) {\n+    isNotNull();\n+    isNotEmpty();\n+\n+    String actualTraceId = actual.get(0).getTraceId();\n+    if (!actualTraceId.equals(traceId)) {\n+      failWithActualExpectedAndMessage(\n+          actualTraceId,\n+          traceId,\n+          \"Expected trace to have trace ID <%s> but was <%s>\",\n+          traceId,\n+          actualTraceId);\n+    }\n+    return this;\n+  }\n+\n+  /**\n+   * Asserts that the trace under assertion has the same number of spans as provided {@code\n+   * assertions} and executes each {@link SpanDataAssert} in {@code assertions} in order with the\n+   * corresponding span.\n+   */\n+  @SafeVarargs\n+  @SuppressWarnings(\"varargs\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MjcxNQ=="}, "originalCommit": {"oid": "507b0a766bbe2ce115c10d4b22b8dd3d40bbd216"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1927, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}