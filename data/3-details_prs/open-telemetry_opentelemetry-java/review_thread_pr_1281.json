{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDExNDQx", "number": 1281, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTozMzoxOFrOEAeALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTozMzoxOFrOEAeALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTI3MDIyOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTozMzoxOFrOGbxEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1Njo0OVrOGb76wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg==", "bodyText": "I don't think we want enforce versions for all grpc components for all artifacts. But probably this is a (serious) issue that will only be resolved with #575. That is, even though we \"only\" depend on grpc-context, we force every user of the API to only use grpc versions (including other artifacts) that can work together with our grpc-context version. BTW, if grpc also depends on the proposed \"propagation.io\" context, we will still have the same problem.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431768732", "createdAt": "2020-05-28T11:33:18Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0NDQ4NA==", "bodyText": "Not sure I understand the latest concern. Can you elaborate why it will be the same problem?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431844484", "createdAt": "2020-05-28T13:43:21Z", "author": {"login": "bogdandrutu"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTE4NA==", "bodyText": "Any user of propagation-io-context still needs to use a propagation-io-context version compatible with the grpc version they use. It's not the same problem with BOMs but that fundamental problem remains.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431865184", "createdAt": "2020-05-28T14:10:58Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NzM1NQ==", "bodyText": "If the user uses a grpc BOM, that BOM should include propagation-io-context and would override the version declared by opentelemetry-api.\nOn second thought, as for this PR, I think we should just not use the GRPC bom. BOMs for ensuring that all the versions of related dependencies match. But we want to depend only on a single dependency, namely the context. So there is nothing we could be incompatible with. If the user uses a grpc bom, it will override the API grpc version, which can be bad (see first paragraph of this comment, and my previous comment), but arguably better than opentelemetry-api overriding the grpc version of a user who does not use BOMs (not sure if that's the case).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431867355", "createdAt": "2020-05-28T14:14:06Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2ODcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    implementation platform(boms.grpc)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431868721", "createdAt": "2020-05-28T14:16:00Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3MDQzNg==", "bodyText": "we should use the bom for otlp exporter probably but not for API, I think that is what you say. Also user can overwrite all the versions by using their own bom. A bom ensures that all the versions for a set of artifacts are the same, user can still overwrite the bom version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431870436", "createdAt": "2020-05-28T14:18:30Z", "author": {"login": "bogdandrutu"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3MzE2MA==", "bodyText": "We use several grpc artifacts, e.g. grpc-protobuf and grpc-stub. So using bom to align their version seems like a totally sensible thing to do. The only concern that I raised and try to solve with this PR, is the unneeded dependency in api, which breaks api clients, such as otel auto-instrumentation agent. All other concerns regarding artifacts dependencies can be addressed separately, if they signal the actual problems.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431873160", "createdAt": "2020-05-28T14:22:08Z", "author": {"login": "iNikem"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NTM4MA==", "bodyText": "I agree we should use the grpc BOM for anything that actually uses grpc. But here it is applied to all artifacts, including API and SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431875380", "createdAt": "2020-05-28T14:24:57Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NTM0OQ==", "bodyText": "api uses context_prop which uses grpc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431885349", "createdAt": "2020-05-28T14:35:33Z", "author": {"login": "iNikem"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMDAzMQ==", "bodyText": "From  #575 I got the impression that we should treat grpc-context as \"not actually grpc but just in the same group\". Anyway, the api uses a single artifact from that BOM so I think the following choices are equally valid technically:\n\nUse the BOM for api. Then any consumers of api using gprc will be forced (by default; I know now this can be overriden) to use a grpc compatible with the grpc-context that the API uses.\nDon't use the BOM for api. Then any consumers of api using grpc will use whatever version of grpc they declared. If that version is incompatible with our grpc-context, I'm not sure what will happen.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431910031", "createdAt": "2020-05-28T15:06:13Z", "author": {"login": "Oberon00"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNDQ5MQ==", "bodyText": "Don't use the BOM for api.\n\n+1 on this. This would simplify things overall (which is exactly what we need for the API case).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431934491", "createdAt": "2020-05-28T15:39:43Z", "author": {"login": "carlosalberto"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NjQzMg==", "bodyText": "That would mean removing all shared dependency management related stuff from api. I cannot even write api libraries.grpc_context then, but have to spell it out api \"io.grpc:grpc-context:${grpcVersion}\". Are you sure? :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1281#discussion_r431946432", "createdAt": "2020-05-28T15:56:49Z", "author": {"login": "iNikem"}, "path": "build.gradle", "diffHunk": "@@ -180,10 +180,7 @@ configure(opentelemetryProjects) {\n \n     dependencies {\n \n-        implementation platform(boms.grpc),\n-                platform(boms.guava),\n-                platform(boms.protobuf),\n-                platform(boms.zipkin_reporter)\n+        implementation platform(boms.grpc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2ODczMg=="}, "originalCommit": {"oid": "2834f4b2dc1074b0fb31cc1182a81496e07d34b3"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}