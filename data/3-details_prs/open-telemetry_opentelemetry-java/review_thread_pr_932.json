{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTE5MTQ2", "number": 932, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDozNzozOVrODjGbkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzozMzo0OFrODjK_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTMyMTE0OnYy", "diffSide": "RIGHT", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDozNzozOVrOFut-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDozNzozOVrOFut-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzMjAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  meter.doubleCounterBuilder(\"benchmark_long_counter\").build();\n          \n          \n            \n                  meter.doubleCounterBuilder(\"benchmark_double_counter\").build();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384532030", "createdAt": "2020-02-26T14:37:39Z", "author": {"login": "arminru"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(1)\n+public class DoubleCounterSdkBenchmark {\n+\n+  private static final MeterProviderSharedState METER_PROVIDER_SHARED_STATE =\n+      MeterProviderSharedState.create(MillisClock.getInstance(), Resource.getEmpty());\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics\", null);\n+  private static final String KEY = \"key\";\n+  private static final String VALUE = \"value\";\n+\n+  private static final Meter meter =\n+      new MeterSdk(METER_PROVIDER_SHARED_STATE, INSTRUMENTATION_LIBRARY_INFO);\n+  private static final DoubleCounter doubleCounter =\n+      meter.doubleCounterBuilder(\"benchmark_long_counter\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecef6e7f1943da0c1203c3ddd7db472326d16860"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA2ODMxOnYy", "diffSide": "RIGHT", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzozMzo0OFrOFu1OzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0Njo1MVrOFu1rRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDk1Nw==", "bodyText": "why 8? I think it would be useful to have a benchmark with a number of threads that's unlikely to match a multiple of the number of cores. 5 or 10 would be other nice numbers to try.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384650957", "createdAt": "2020-02-26T17:33:48Z", "author": {"login": "jkwatson"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(1)\n+public class DoubleCounterSdkBenchmark {\n+\n+  private static final MeterProviderSharedState METER_PROVIDER_SHARED_STATE =\n+      MeterProviderSharedState.create(MillisClock.getInstance(), Resource.getEmpty());\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics\", null);\n+  private static final String KEY = \"key\";\n+  private static final String VALUE = \"value\";\n+\n+  private static final Meter meter =\n+      new MeterSdk(METER_PROVIDER_SHARED_STATE, INSTRUMENTATION_LIBRARY_INFO);\n+  private static final DoubleCounter doubleCounter =\n+      meter.doubleCounterBuilder(\"benchmark_double_counter\").build();\n+  private static final BoundDoubleCounter boundDoubleCounter =\n+      doubleCounter.bind(meter.createLabelSet(KEY, VALUE));\n+\n+  @State(Scope.Thread)\n+  public static class ThreadState {\n+\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      threadKey = KEY + \"_\" + Thread.currentThread().getId();\n+      boundDoubleCounter = doubleCounter.bind(meter.createLabelSet(threadKey, VALUE));\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      boundDoubleCounter.unbind();\n+    }\n+\n+    private String threadKey;\n+    private BoundDoubleCounter boundDoubleCounter;\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void add_1Threads() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_SameLabelSet() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_DifferentLabelSet(ThreadState state) {\n+    doubleCounter.add(100.1d, meter.createLabelSet(state.threadKey, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void bindingAdd_1Threads() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_SameLabelSet() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_DifferentLabelSet(ThreadState state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e251e0c055a2f1c39488a3932ae39f0e54bb7ff"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1ODI0Nw==", "bodyText": "Let me think about this, and will do the change in a different PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384658247", "createdAt": "2020-02-26T17:46:51Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(1)\n+public class DoubleCounterSdkBenchmark {\n+\n+  private static final MeterProviderSharedState METER_PROVIDER_SHARED_STATE =\n+      MeterProviderSharedState.create(MillisClock.getInstance(), Resource.getEmpty());\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics\", null);\n+  private static final String KEY = \"key\";\n+  private static final String VALUE = \"value\";\n+\n+  private static final Meter meter =\n+      new MeterSdk(METER_PROVIDER_SHARED_STATE, INSTRUMENTATION_LIBRARY_INFO);\n+  private static final DoubleCounter doubleCounter =\n+      meter.doubleCounterBuilder(\"benchmark_double_counter\").build();\n+  private static final BoundDoubleCounter boundDoubleCounter =\n+      doubleCounter.bind(meter.createLabelSet(KEY, VALUE));\n+\n+  @State(Scope.Thread)\n+  public static class ThreadState {\n+\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      threadKey = KEY + \"_\" + Thread.currentThread().getId();\n+      boundDoubleCounter = doubleCounter.bind(meter.createLabelSet(threadKey, VALUE));\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      boundDoubleCounter.unbind();\n+    }\n+\n+    private String threadKey;\n+    private BoundDoubleCounter boundDoubleCounter;\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void add_1Threads() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_SameLabelSet() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_DifferentLabelSet(ThreadState state) {\n+    doubleCounter.add(100.1d, meter.createLabelSet(state.threadKey, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void bindingAdd_1Threads() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_SameLabelSet() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_DifferentLabelSet(ThreadState state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDk1Nw=="}, "originalCommit": {"oid": "5e251e0c055a2f1c39488a3932ae39f0e54bb7ff"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 924, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}