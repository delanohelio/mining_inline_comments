{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4Njg5OTcx", "number": 1659, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyMDo0M1rOEkl5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyMDo0M1rOEkl5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA1MTcxOnYy", "diffSide": "RIGHT", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyMDo0M1rOHTn2KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzoxODo0NlrOHVDKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzNzgzMg==", "bodyText": "Rather than the clever replacing, I think I'd personally prefer just having another constant defined with the non-metric value. To me, that makes the code a little easier to read. Also, the common properties could be put somewhere common and shared between the metric/span exporter config.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1659#discussion_r490337832", "createdAt": "2020-09-17T15:20:43Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -282,24 +292,43 @@ private Builder() {}\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n       configMap = namingConvention.normalize(configMap);\n-      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+\n+      Long value = getLongProperty(KEY_TIMEOUT, configMap);\n+      if (value == null) {\n+        value = getLongProperty(KEY_TIMEOUT.replace(\"metric\", \"\"), configMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c4e7c1dbfc66fe43e05e779b35b010d888ec0eb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzMzk2Nw==", "bodyText": "Done in 34c8c25", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1659#discussion_r491833967", "createdAt": "2020-09-21T07:18:46Z", "author": {"login": "thisthat"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -282,24 +292,43 @@ private Builder() {}\n     protected Builder fromConfigMap(\n         Map<String, String> configMap, NamingConvention namingConvention) {\n       configMap = namingConvention.normalize(configMap);\n-      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+\n+      Long value = getLongProperty(KEY_TIMEOUT, configMap);\n+      if (value == null) {\n+        value = getLongProperty(KEY_TIMEOUT.replace(\"metric\", \"\"), configMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzNzgzMg=="}, "originalCommit": {"oid": "7c4e7c1dbfc66fe43e05e779b35b010d888ec0eb"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1184, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}