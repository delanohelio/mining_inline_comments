{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDkwNTY4", "number": 1218, "title": "Extract SpanData to an interface", "bodyText": "This also moves the SpanData inner classes into the interface, and out of the implementation.", "createdAt": "2020-05-14T15:56:54Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218", "merged": true, "mergeCommit": {"oid": "d7f6d5a64176b44752bbd4bd403716a0f150b3e6"}, "closed": true, "closedAt": "2020-05-15T01:10:38Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchPDm7AH2gAyNDE4MDkwNTY4Ojk1MzkyZjZlYWJhZDA4N2MzNzQ5YmY0YjA0NTc5MDg3NDcxM2FhZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchXh3BgFqTQxMjI4MzkwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "95392f6eabad087c3749bf4b045790874713aaf7", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95392f6eabad087c3749bf4b045790874713aaf7", "committedDate": "2020-05-14T15:18:06Z", "message": "Extract SpanData to an interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8614675804e6c0c91d5338a5c4caf53455a64de9", "committedDate": "2020-05-14T15:33:57Z", "message": "Move the inner link and event classes to the top level and rename for consistency."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTU0MjMz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#pullrequestreview-411954233", "createdAt": "2020-05-14T16:01:45Z", "commit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMTo0NlrOGVjToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowNDoxM1rOGVjZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MTc0NA==", "bodyText": "This is not the right annotation", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425251744", "createdAt": "2020-05-14T16:01:46Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -16,63 +16,54 @@\n \n package io.opentelemetry.sdk.trace.data;\n \n-import com.google.auto.value.AutoValue;\n import io.opentelemetry.common.AttributeValue;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.resources.Resource;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n-import io.opentelemetry.trace.Event;\n import io.opentelemetry.trace.Span.Kind;\n-import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.annotation.concurrent.Immutable;\n+import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA==", "bodyText": "Use singletonList here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425253308", "createdAt": "2020-05-14T16:04:13Z", "author": {"login": "bogdandrutu"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1e4f40994a78347043f9ec0b2e876fa0587baf", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be1e4f40994a78347043f9ec0b2e876fa0587baf", "committedDate": "2020-05-14T16:08:08Z", "message": "clean up a few errant references to the impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c6cf8b201f43e813c8b2a859230805a0d1aae5a", "committedDate": "2020-05-14T16:11:04Z", "message": "use the right annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTE5NDMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#pullrequestreview-412119430", "createdAt": "2020-05-14T19:29:08Z", "commit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOToyOTowOFrOGVrHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTozMDoyOFrOGVrJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3OTYzMA==", "bodyText": "What about moving this into a testing package and maybe rename to SpanData or TestingSpanData?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425379630", "createdAt": "2020-05-14T19:29:08Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanDataImpl.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Immutable representation of all data collected by the {@link io.opentelemetry.trace.Span} class.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class SpanDataImpl implements SpanData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDI3OA==", "bodyText": "This is inconsistent, SpanData represents the interface to access recorded properties to the Span, but LinkData represents a concrete implementation of the Link interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425380278", "createdAt": "2020-05-14T19:30:28Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/LinkData.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable implementation of {@link Link}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class LinkData implements Link {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjI3NTE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#pullrequestreview-412227519", "createdAt": "2020-05-14T22:24:54Z", "commit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyNDo1NFrOGVwTzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyNDo1NFrOGVwTzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NDc4MA==", "bodyText": "Eh, wondering how we ended up with this one here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425464780", "createdAt": "2020-05-14T22:24:54Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -29,7 +29,7 @@\n import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjI3OTM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#pullrequestreview-412227936", "createdAt": "2020-05-14T22:25:53Z", "commit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "765274d5016782cae656999d89ab6fe9aa26a828", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/765274d5016782cae656999d89ab6fe9aa26a828", "committedDate": "2020-05-14T22:35:57Z", "message": "move the Link and Event back into the SpanData and give them simple names."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjgzOTA2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#pullrequestreview-412283906", "createdAt": "2020-05-15T01:10:23Z", "commit": {"oid": "765274d5016782cae656999d89ab6fe9aa26a828"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2710, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}