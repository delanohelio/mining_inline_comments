{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTk5Nzc4", "number": 1255, "title": "Support env vars for TraceConfig initialization", "bodyText": "Extended ConfigBuilder for building TraceConfig class to support config from env vars\nAdded getDoubleProperty to ConfigBuilder class\n\nFixes #1239", "createdAt": "2020-05-20T08:42:07Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255", "merged": true, "mergeCommit": {"oid": "322b661e3734ac4dafd89ecd20572a19bbc72cef"}, "closed": true, "closedAt": "2020-06-01T18:51:14Z", "author": {"login": "RashmiRam"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjFoUqAFqTQxNTE0MDc2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnEmptAH2gAyNDIwNTk5Nzc4OjlkZGNiMzJhNTlkYjhmMDM3NDJmYmQ5NTdlMWRmODRiNzIwNTQ3YjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTQwNzY4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-415140768", "createdAt": "2020-05-20T09:11:59Z", "commit": {"oid": "a5f23fe49998611fb89a8a37d717ed1155659b51"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxMTo1OVrOGYCeKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToxODoxNlrOGYCt4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTQ5Ng==", "bodyText": "Please, keep the AutoValue so we don't need to write and maintain trivial code", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427859496", "createdAt": "2020-05-20T09:11:59Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -35,17 +38,16 @@\n  * io.opentelemetry.sdk.trace.TracerSdkProvider#updateActiveTraceConfig(TraceConfig)} with the\n  * resulting TraceConfig instance.\n  */\n-@AutoValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f23fe49998611fb89a8a37d717ed1155659b51"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MDQxOA==", "bodyText": "Please, document the behavior env < sys prop in the getDefualt() method", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427860418", "createdAt": "2020-05-20T09:13:31Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f23fe49998611fb89a8a37d717ed1155659b51"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MjU1OA==", "bodyText": "Also here, please use AutoValue. A reference of how using AutoValue with ConfigBuilder is available here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427862558", "createdAt": "2020-05-20T09:16:47Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();\n+\n+  private TraceConfig(\n+      Sampler sampler,\n+      int maxNumberOfAttributes,\n+      int maxNumberOfEvents,\n+      int maxNumberOfLinks,\n+      int maxNumberOfAttributesPerEvent,\n+      int maxNumberOfAttributesPerLink) {\n+    this.sampler = sampler;\n+    this.maxNumberOfAttributes = maxNumberOfAttributes;\n+    this.maxNumberOfEvents = maxNumberOfEvents;\n+    this.maxNumberOfLinks = maxNumberOfLinks;\n+    this.maxNumberOfAttributesPerEvent = maxNumberOfAttributesPerEvent;\n+    this.maxNumberOfAttributesPerLink = maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns the global default {@code Sampler} which is used when constructing a new {@code Span}.\n    *\n    * @return the global default {@code Sampler}.\n    */\n-  public abstract Sampler getSampler();\n+  public Sampler getSampler() {\n+    return sampler;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Span}.\n    *\n    * @return the global default max number of attributes per {@link Span}.\n    */\n-  public abstract int getMaxNumberOfAttributes();\n+  public int getMaxNumberOfAttributes() {\n+    return maxNumberOfAttributes;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Event}s per {@link Span}.\n    *\n    * @return the global default max number of {@code Event}s per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfEvents();\n+  public int getMaxNumberOfEvents() {\n+    return maxNumberOfEvents;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Link} entries per {@link Span}.\n    *\n    * @return the global default max number of {@code Link} entries per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfLinks();\n+  public int getMaxNumberOfLinks() {\n+    return maxNumberOfLinks;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Event}.\n    *\n    * @return the global default max number of attributes per {@link Event}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerEvent();\n+  public int getMaxNumberOfAttributesPerEvent() {\n+    return maxNumberOfAttributesPerEvent;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Link}.\n    *\n    * @return the global default max number of attributes per {@link Link}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerLink();\n+  public int getMaxNumberOfAttributesPerLink() {\n+    return maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns a new {@link Builder}.\n    *\n    * @return a new {@link Builder}.\n    */\n-  private static Builder newBuilder() {\n-    return new AutoValue_TraceConfig.Builder();\n+  public static Builder newBuilder() {\n+    return new Builder();\n   }\n \n   /**\n    * Returns a {@link Builder} initialized to the same property values as the current instance.\n    *\n    * @return a {@link Builder} initialized to the same property values as the current instance.\n    */\n-  public abstract Builder toBuilder();\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static final class Builder extends ConfigBuilder<Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f23fe49998611fb89a8a37d717ed1155659b51"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MzUyMQ==", "bodyText": "In #1181, we decided to get rid of this documentation from the methods and push it to the class and package-info javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427863521", "createdAt": "2020-05-20T09:18:16Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();\n+\n+  private TraceConfig(\n+      Sampler sampler,\n+      int maxNumberOfAttributes,\n+      int maxNumberOfEvents,\n+      int maxNumberOfLinks,\n+      int maxNumberOfAttributesPerEvent,\n+      int maxNumberOfAttributesPerLink) {\n+    this.sampler = sampler;\n+    this.maxNumberOfAttributes = maxNumberOfAttributes;\n+    this.maxNumberOfEvents = maxNumberOfEvents;\n+    this.maxNumberOfLinks = maxNumberOfLinks;\n+    this.maxNumberOfAttributesPerEvent = maxNumberOfAttributesPerEvent;\n+    this.maxNumberOfAttributesPerLink = maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns the global default {@code Sampler} which is used when constructing a new {@code Span}.\n    *\n    * @return the global default {@code Sampler}.\n    */\n-  public abstract Sampler getSampler();\n+  public Sampler getSampler() {\n+    return sampler;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Span}.\n    *\n    * @return the global default max number of attributes per {@link Span}.\n    */\n-  public abstract int getMaxNumberOfAttributes();\n+  public int getMaxNumberOfAttributes() {\n+    return maxNumberOfAttributes;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Event}s per {@link Span}.\n    *\n    * @return the global default max number of {@code Event}s per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfEvents();\n+  public int getMaxNumberOfEvents() {\n+    return maxNumberOfEvents;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Link} entries per {@link Span}.\n    *\n    * @return the global default max number of {@code Link} entries per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfLinks();\n+  public int getMaxNumberOfLinks() {\n+    return maxNumberOfLinks;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Event}.\n    *\n    * @return the global default max number of attributes per {@link Event}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerEvent();\n+  public int getMaxNumberOfAttributesPerEvent() {\n+    return maxNumberOfAttributesPerEvent;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Link}.\n    *\n    * @return the global default max number of attributes per {@link Link}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerLink();\n+  public int getMaxNumberOfAttributesPerLink() {\n+    return maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns a new {@link Builder}.\n    *\n    * @return a new {@link Builder}.\n    */\n-  private static Builder newBuilder() {\n-    return new AutoValue_TraceConfig.Builder();\n+  public static Builder newBuilder() {\n+    return new Builder();\n   }\n \n   /**\n    * Returns a {@link Builder} initialized to the same property values as the current instance.\n    *\n    * @return a {@link Builder} initialized to the same property values as the current instance.\n    */\n-  public abstract Builder toBuilder();\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static final class Builder extends ConfigBuilder<Builder> {\n+    private static final String KEY_SAMPLER_PROBABILITY = \"otel.config.sampler.probability\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES = \"otel.config.max.attrs\";\n+    private static final String KEY_SPAN_MAX_NUM_EVENTS = \"otel.config.max.events\";\n+    private static final String KEY_SPAN_MAX_NUM_LINKS = \"otel.config.max.links\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT =\n+        \"otel.config.max.event.attrs\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = \"otel.config.max.link.attrs\";\n \n-  /** A {@code Builder} class for {@link TraceConfig}. */\n-  @AutoValue.Builder\n-  public abstract static class Builder {\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_EVENTS = 128;\n+    private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+\n+    private Sampler sampler = Samplers.alwaysOn();\n+    private int maxNumberOfAttributes = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES;\n+    private int maxNumberOfEvents = DEFAULT_SPAN_MAX_NUM_EVENTS;\n+    private int maxNumberOfLinks = DEFAULT_SPAN_MAX_NUM_LINKS;\n+    private int maxNumberOfAttributesPerEvent = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT;\n+    private int maxNumberOfAttributesPerLink = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK;\n+\n+    private Builder(TraceConfig traceConfig) {\n+      this.sampler = traceConfig.sampler;\n+      this.maxNumberOfEvents = traceConfig.maxNumberOfEvents;\n+      this.maxNumberOfLinks = traceConfig.maxNumberOfLinks;\n+      this.maxNumberOfAttributesPerLink = traceConfig.maxNumberOfAttributesPerLink;\n+      this.maxNumberOfAttributesPerEvent = traceConfig.maxNumberOfAttributesPerEvent;\n+    }\n+\n+    private Builder() {}\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f23fe49998611fb89a8a37d717ed1155659b51"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjI4OTM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-415228938", "createdAt": "2020-05-20T11:13:07Z", "commit": {"oid": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxMzowN1rOGYGqzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMToxODowMFrOGYG02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkyODI3MQ==", "bodyText": "Please, open an issue or leave it in otherwise, we will forget of this detail ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427928271", "createdAt": "2020-05-20T11:13:07Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -34,39 +39,66 @@\n  * Builder} instance, then use the {@link\n  * io.opentelemetry.sdk.trace.TracerSdkProvider#updateActiveTraceConfig(TraceConfig)} with the\n  * resulting TraceConfig instance.\n+ *\n+ * <p>Configuration options for {@link TraceConfig} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For system properties and {@link java.util.Properties} objects, {@link TraceConfig} will look\n+ * for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.sampler.probability}: to set the global default sampler for traces.\n+ *   <li>{@code otel.config.max.attrs}: to set the global default max number of attributes per\n+ *       {@link Span}.\n+ *   <li>{@code otel.config.max.events}: to set the global default max number of {@link Event}s per\n+ *       {@link Span}.\n+ *   <li>{@code otel.config.max.links}: to set the global default max number of {@link Link} entries\n+ *       per {@link Span}.\n+ *   <li>{@code otel.config.max.event.attrs}: to set the global default max number of attributes per\n+ *       {@link Event}.\n+ *   <li>{@code otel.config.max.link.attrs}: to set the global default max number of attributes per\n+ *       {@link Link}.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link TraceConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_CONFIG_SAMPLER_PROBABILITY}: to set the global default sampler for traces.\n+ *   <li>{@code OTEL_CONFIG_MAX_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_EVENTS}: to set the global default max number of {@link Event}s per\n+ *       {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_LINKS}: to set the global default max number of {@link Link} entries\n+ *       per {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_EVENT_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Event}.\n+ *   <li>{@code OTEL_CONFIG_MAX_LINK_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Link}.\n+ * </ul>\n  */\n @AutoValue\n @Immutable\n public abstract class TraceConfig {\n-  // These values are the default values for all the global parameters.\n-  // TODO: decide which default sampler to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDAwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For System Properties and {@link java.util.Properties} objects, {@link\n          \n          \n            \n             * <p>For system properties and {@link java.util.Properties} objects, {@link", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930000", "createdAt": "2020-05-20T11:16:24Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n+ * properties, environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDIwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n          \n          \n            \n             * <p>Configuration options for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930202", "createdAt": "2020-05-20T11:16:48Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for\n          \n          \n            \n             * <p>For environment variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930840", "createdAt": "2020-05-20T11:18:00Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n+ * properties, environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link\n+ * io.opentelemetry.sdk.trace.config.TraceConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.sampler.probability}: to set the global default sampler for traces.\n+ *   <li>{@code otel.config.max.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.events}: to set the global default max number of {@link\n+ *       io.opentelemetry.trace.Event}s per {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.links}: to set the global default max number of {@link\n+ *       io.opentelemetry.trace.Link} entries per {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.event.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Event}.\n+ *   <li>{@code otel.config.max.link.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Link}.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjEwODk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-415610894", "createdAt": "2020-05-20T18:33:19Z", "commit": {"oid": "244c0ca17df5cbe6d679de01669814ab46cfa252"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMzoxOVrOGYYvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMzoxOVrOGYYvIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNDI4OQ==", "bodyText": "We should have a unit test for this method (and for this whole class).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428224289", "createdAt": "2020-05-20T18:33:19Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,21 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a double property from the map, {@code null} if it cannot be found or it has a wrong type.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link Double} value of the property, {@code null} in case of error or if the\n+   *     property cannot be found.\n+   */\n+  @Nullable\n+  protected static Double getDoubleProperty(String name, Map<String, String> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244c0ca17df5cbe6d679de01669814ab46cfa252"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjYwMzM0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-415660334", "createdAt": "2020-05-20T19:44:36Z", "commit": {"oid": "244c0ca17df5cbe6d679de01669814ab46cfa252"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTo0NDozNlrOGYbQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTo0NDozNlrOGYbQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ==", "bodyText": "Usually getDefault() methods return a a static, read-only value. I wonder if we should have the same here, or else have this method use a different name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428265579", "createdAt": "2020-05-20T19:44:36Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -48,25 +89,17 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n \n   /**\n-   * Returns the default {@code TraceConfig}.\n+   * Returns a new {@link TraceConfig} reading the configuration values from the environment and\n+   * from system properties. System properties override values defined in the environment. If a\n+   * configuration value is missing, it uses the default value.\n    *\n    * @return the default {@code TraceConfig}.\n    * @since 0.1.0\n    */\n   public static TraceConfig getDefault() {\n-    return DEFAULT;\n+    return newBuilder().readEnvironmentVariables().readSystemProperties().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244c0ca17df5cbe6d679de01669814ab46cfa252"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzQzNjEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-416343613", "createdAt": "2020-05-21T17:24:03Z", "commit": {"oid": "38dd99ffa517937c3eb23cb627df7dfc46915a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoyNDowM1rOGY71IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoyNDowM1rOGY71IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5OTI2NQ==", "bodyText": "this javadoc is wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428799265", "createdAt": "2020-05-21T17:24:03Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -138,6 +255,28 @@ private static Builder newBuilder() {\n      */\n     public abstract Builder setSampler(Sampler sampler);\n \n+    /**\n+     * Sets the global default {@code Sampler}. It must be not {@code null} otherwise {@link\n+     * #build()} will throw an exception.\n+     *\n+     * @param samplerProbability the global default {@code Sampler}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38dd99ffa517937c3eb23cb627df7dfc46915a95"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjIyNTcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-419222570", "createdAt": "2020-05-27T13:45:41Z", "commit": {"oid": "69142783c7d7922f7efaf2e110c2d8486ce901af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjM3MzA0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-419637304", "createdAt": "2020-05-27T21:55:31Z", "commit": {"oid": "69142783c7d7922f7efaf2e110c2d8486ce901af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NzU2NzMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#pullrequestreview-419756730", "createdAt": "2020-05-28T03:43:28Z", "commit": {"oid": "69142783c7d7922f7efaf2e110c2d8486ce901af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "531357dad842a5fa6bfad6cb140c0faf5b2c4f4b", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/531357dad842a5fa6bfad6cb140c0faf5b2c4f4b", "committedDate": "2020-05-29T06:18:07Z", "message": "Added ConfigBuilder for TraceConfig class to support config from env vars\n\nFixes #1239"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dfbcbac210d3d725b304e2ee40d2acc0319f1e2", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1dfbcbac210d3d725b304e2ee40d2acc0319f1e2", "committedDate": "2020-05-29T06:18:25Z", "message": "Updated doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed18dc07c62af160329ef9d440457bfbf60fc42", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ed18dc07c62af160329ef9d440457bfbf60fc42", "committedDate": "2020-05-29T06:18:25Z", "message": "Addressed review comments\n\n1. Brought back the AutoValue\n2. Added AutoValue.Builder for ConfigBuilder\n3. Added javaDoc as per the decisions taken in #1181\n4. Added tests to read from system properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8161deecd210c26c58b0de73876e00bdf57bd67", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e8161deecd210c26c58b0de73876e00bdf57bd67", "committedDate": "2020-05-29T06:18:25Z", "message": "Fixed javadoc + brought back old comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ce3e57cf38964b4461d5865fbdaaa3535bc9ad9", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ce3e57cf38964b4461d5865fbdaaa3535bc9ad9", "committedDate": "2020-05-29T06:18:25Z", "message": "Fixed formatting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e31d04aaaa718e08fcb0425da155f9479bf0e0", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/37e31d04aaaa718e08fcb0425da155f9479bf0e0", "committedDate": "2020-05-29T06:18:25Z", "message": "Added tests for configbuilder class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15eef91d6e059980f2b42fe74ca09c193d7a01ac", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15eef91d6e059980f2b42fe74ca09c193d7a01ac", "committedDate": "2020-05-29T06:18:25Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c80fcbe6e419cc205d7ac8ab3b660d159a715b", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42c80fcbe6e419cc205d7ac8ab3b660d159a715b", "committedDate": "2020-05-29T06:18:25Z", "message": "Fixed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "committedDate": "2020-05-29T06:18:25Z", "message": "TraceConfig.getDefault() to return default settings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69142783c7d7922f7efaf2e110c2d8486ce901af", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/69142783c7d7922f7efaf2e110c2d8486ce901af", "committedDate": "2020-05-27T05:12:56Z", "message": "TraceConfig.getDefault() to return default settings"}, "afterCommit": {"oid": "d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "committedDate": "2020-05-29T06:18:25Z", "message": "TraceConfig.getDefault() to return default settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90c94ffd0e5ece1f81782471fcb8630e19c49474", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/90c94ffd0e5ece1f81782471fcb8630e19c49474", "committedDate": "2020-06-01T08:15:43Z", "message": "Removed setup from systemprop traceconfig test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ddcb32a59db8f03742fbd957e1df84b720547b2", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ddcb32a59db8f03742fbd957e1df84b720547b2", "committedDate": "2020-06-01T18:30:58Z", "message": "test commit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2754, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}