{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjcxMTI3", "number": 1336, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMToxMjo0NlrOEFstqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDowOTo1MVrOEF9M9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDEwOTIyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMToxMjo0NlrOGkC8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo0NDoyMVrOGkFNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MDIxNw==", "bodyText": "*A read-only", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440450217", "createdAt": "2020-06-15T21:12:46Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -16,225 +16,28 @@\n \n package io.opentelemetry.common;\n \n-import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n-\n-import com.google.auto.value.AutoValue;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.annotation.concurrent.Immutable;\n+import javax.annotation.Nullable;\n \n /**\n- * An immutable container for attributes.\n+ * An read-only container for String-keyed attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a31a9be90d2a74ecf503441623a82941ce929e1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NzMzMQ==", "bodyText": "fixed!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440487331", "createdAt": "2020-06-15T22:44:21Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -16,225 +16,28 @@\n \n package io.opentelemetry.common;\n \n-import static io.opentelemetry.common.AttributeValue.arrayAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.booleanAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.doubleAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.longAttributeValue;\n-import static io.opentelemetry.common.AttributeValue.stringAttributeValue;\n-\n-import com.google.auto.value.AutoValue;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.annotation.concurrent.Immutable;\n+import javax.annotation.Nullable;\n \n /**\n- * An immutable container for attributes.\n+ * An read-only container for String-keyed attributes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MDIxNw=="}, "originalCommit": {"oid": "7a31a9be90d2a74ecf503441623a82941ce929e1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDgxMzUwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzoxMjoyMlrOGkJtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTowOTo1MlrOGkgDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA==", "bodyText": "Think we can remove this warning now. Seems too scary for what it actually is", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440560938", "createdAt": "2020-06-16T03:12:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A read-only container for String-keyed attributes.\n+ *\n+ * <p>See {@link Attributes} for the public API implementation.\n+ */\n+public interface ReadableAttributes {\n+  /** The number of attributes contained in this. */\n+  int size();\n+\n+  /** Whether there are any attributes contained in this. */\n+  boolean isEmpty();\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<AttributeValue> consumer);\n+\n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3Mzc5MQ==", "bodyText": "Be afraid, be very afraid.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440573791", "createdAt": "2020-06-16T04:05:18Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A read-only container for String-keyed attributes.\n+ *\n+ * <p>See {@link Attributes} for the public API implementation.\n+ */\n+public interface ReadableAttributes {\n+  /** The number of attributes contained in this. */\n+  int size();\n+\n+  /** Whether there are any attributes contained in this. */\n+  boolean isEmpty();\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<AttributeValue> consumer);\n+\n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3OTc4NQ==", "bodyText": "I'd be up for leaving the comment, but without the \"Warning\" word, to not scare people (yet have they understand the operation price ;) )", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440879785", "createdAt": "2020-06-16T14:08:15Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A read-only container for String-keyed attributes.\n+ *\n+ * <p>See {@link Attributes} for the public API implementation.\n+ */\n+public interface ReadableAttributes {\n+  /** The number of attributes contained in this. */\n+  int size();\n+\n+  /** Whether there are any attributes contained in this. */\n+  boolean isEmpty();\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<AttributeValue> consumer);\n+\n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzAyMA==", "bodyText": "Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927020", "createdAt": "2020-06-16T15:09:52Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A read-only container for String-keyed attributes.\n+ *\n+ * <p>See {@link Attributes} for the public API implementation.\n+ */\n+public interface ReadableAttributes {\n+  /** The number of attributes contained in this. */\n+  int size();\n+\n+  /** Whether there are any attributes contained in this. */\n+  boolean isEmpty();\n+\n+  /** Iterates over all the key-value pairs of attributes contained by this instance. */\n+  void forEach(KeyValueConsumer<AttributeValue> consumer);\n+\n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently may be implemented via a linear search, depending on implementation, so", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MDkzOA=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjgwODM2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDowOToxNVrOGkdNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMDoyOVrOGkgFDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw==", "bodyText": "This should stay as AttributesTest, no?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440880503", "createdAt": "2020-06-16T14:09:15Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java", "diffHunk": "@@ -31,7 +31,7 @@\n import org.junit.rules.ExpectedException;\n \n /** Unit tests for {@link Attributes}s. */\n-public class AttributesTest {\n+public class ImmutableAttributesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMzE5Mw==", "bodyText": "Yep, will fix.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440923193", "createdAt": "2020-06-16T15:04:37Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java", "diffHunk": "@@ -31,7 +31,7 @@\n import org.junit.rules.ExpectedException;\n \n /** Unit tests for {@link Attributes}s. */\n-public class AttributesTest {\n+public class ImmutableAttributesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzUwMA==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927500", "createdAt": "2020-06-16T15:10:29Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/ImmutableAttributesTest.java", "diffHunk": "@@ -31,7 +31,7 @@\n import org.junit.rules.ExpectedException;\n \n /** Unit tests for {@link Attributes}s. */\n-public class AttributesTest {\n+public class ImmutableAttributesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDUwMw=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjgxMDc5OnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDowOTo1MVrOGkdPDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMDo0M1rOGkgFvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ==", "bodyText": "How did this end up here? ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440880909", "createdAt": "2020-06-16T14:09:51Z", "author": {"login": "carlosalberto"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -21,9 +21,9 @@ public static void main(String[] args) {\n         .build();\n \n     observer.setCallback(\n-        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+        new LongValueObserver.Callback<LongResult>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMzA3NQ==", "bodyText": "I have the examples project wired up in my IDE, so I have to fix failures to be able to compile. I can move this to a separate PR, if you prefer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440923075", "createdAt": "2020-06-16T15:04:28Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -21,9 +21,9 @@ public static void main(String[] args) {\n         .build();\n \n     observer.setCallback(\n-        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+        new LongValueObserver.Callback<LongResult>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzY3OA==", "bodyText": "removed. will submit separately", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1336#discussion_r440927678", "createdAt": "2020-06-16T15:10:43Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -21,9 +21,9 @@ public static void main(String[] args) {\n         .build();\n \n     observer.setCallback(\n-        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+        new LongValueObserver.Callback<LongResult>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4MDkwOQ=="}, "originalCommit": {"oid": "8fd40667016b2427d5bfc01bd339fe5a4e79d38c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1427, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}