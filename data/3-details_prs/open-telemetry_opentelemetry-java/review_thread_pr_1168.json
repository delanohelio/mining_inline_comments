{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTczNDAy", "number": 1168, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxODowN1rOD5FeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxMDoyM1rOD6RFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg1MDYwOnYy", "diffSide": "RIGHT", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxODowN1rOGQKHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToxMTo1OFrOGREQFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ==", "bodyText": "Still says Jaeger in here, FYI.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419596181", "createdAt": "2020-05-04T17:18:07Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -40,8 +43,8 @@\n    * Creates a new Jaeger gRPC Metric Reporter with the given name, using the given channel.\n    *\n    * @param channel the channel to use when communicating with the Jaeger Collector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODAxMQ==", "bodyText": "do you want to update the javadoc while you're in here, updating other javadoc?  ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420368011", "createdAt": "2020-05-05T19:54:50Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -40,8 +43,8 @@\n    * Creates a new Jaeger gRPC Metric Reporter with the given name, using the given channel.\n    *\n    * @param channel the channel to use when communicating with the Jaeger Collector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ=="}, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0ODYzMQ==", "bodyText": "Better do it now before this slips through again ;) Done in d013f7b", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420548631", "createdAt": "2020-05-06T05:11:58Z", "author": {"login": "thisthat"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -40,8 +43,8 @@\n    * Creates a new Jaeger gRPC Metric Reporter with the given name, using the given channel.\n    *\n    * @param channel the channel to use when communicating with the Jaeger Collector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ=="}, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg4MDAxOnYy", "diffSide": "RIGHT", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNjowMFrOGQKaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTozMTozNVrOGQ4dXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ==", "bodyText": "Is the purpose of these overrides just to provide a handle for documenting the properties? If so, could we do that just in the class javadoc, rather than introducing a ton of lines of code simply for repeating documentation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419601019", "createdAt": "2020-05-04T17:26:00Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2ODMwNg==", "bodyText": "As for now, all overrides have the function to provide better documentation w.r.t. the variables that they require.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419868306", "createdAt": "2020-05-05T05:17:34Z", "author": {"login": "thisthat"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MjMyOQ==", "bodyText": "My preference would be to have the documentation not repeated, but have it just in the class-level javadoc and in the package-info.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420192329", "createdAt": "2020-05-05T15:19:36Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1NTQyMg==", "bodyText": "I agree! I would, however, suggest doing this doc refactoring in a follow-up PR where I address this in all the different classes that use a configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420355422", "createdAt": "2020-05-05T19:31:35Z", "author": {"login": "thisthat"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}, "originalCommit": {"oid": "95f07918390b94eea8677b9224cd7195c951200a"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDIyNDg3OnYy", "diffSide": "RIGHT", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowNzowNlrOGSARgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowNzowNlrOGSARgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMjAzMg==", "bodyText": "0.5?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421532032", "createdAt": "2020-05-07T14:07:06Z", "author": {"login": "bogdandrutu"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -96,6 +99,18 @@ public static Builder newBuilder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Returns a new {@link OtlpGrpcMetricExporter} reading the configuration values from the\n+   * environment and from system properties. System properties override values defined in the\n+   * environment. If a configuration value is missing, it uses the default value.\n+   *\n+   * @return a new {@link OtlpGrpcMetricExporter} instance.\n+   * @since 0.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDIzOTk3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxMDoyM1rOGSAbOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToxNzozN1rOGTFDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw==", "bodyText": "I expect that everything that is not possible to configure via eng/sysprop to be passed as an argument to a factory method create", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421534523", "createdAt": "2020-05-07T14:10:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNTc1NA==", "bodyText": "This is just a suggestion, please let me know if you think it is better.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421535754", "createdAt": "2020-05-07T14:12:05Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4NDA5MA==", "bodyText": "I'm not clear on how the suggestion would work. Would the create method take the builder as a parameter? Would the Builder have a create method that took the non-env-configurable parameters, rather than having a build() method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421584090", "createdAt": "2020-05-07T15:14:18Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU5NTI1Mg==", "bodyText": "I was thinking that Config contains only things that can be configured via env or sysprop everything else is passed as argument to a factory method.\nSo in this case: create(Config, List<MetricProducer>, MetricExporter)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421595252", "createdAt": "2020-05-07T15:29:21Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxMTQyMw==", "bodyText": "What class exposes the create method, though?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421611423", "createdAt": "2020-05-07T15:52:07Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTE0Mg==", "bodyText": "Now I am more confused, because I thought that we do the model of having a Config class as an inner class (see https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java#L313), something like this:\npublic final class IntervalMetricReader {\n \n  public create(Config, List<MetricProducer>, MetricExporter);\n\n  public static final Config {\n     public static Config defaultConfig();\n     public static Builder newBuilder();\n\n     public static final Builder extends ConfigBuilder<> {\n       public Config build();\n     }\n  }\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421629142", "createdAt": "2020-05-07T16:18:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NDcyNg==", "bodyText": "Only while I was working on the metrics I noticed that having a config object for a single parameter it's a bit overkill and the same result can be archived enhancing the existing builder.\nHowever, I agree that we have different API for different components:\n\nSpan classes use a config object;\nMetric classes do that directly in the builder.\n\nSo, either we use config objects in all classes, or every class uses the standard builder pattern enhanced with support to env/sys vars.\nI am more in favor of the latter since currently, a Config object makes sense IMHO only for the BatchSpanProcessor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421954726", "createdAt": "2020-05-08T05:58:37Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTA4Nw==", "bodyText": "I am asking for consistency. If we believe builder pattern + support for env/sysprop config in that builder pattern is good then we should go with that model everywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422255087", "createdAt": "2020-05-08T16:56:50Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDA0OA==", "bodyText": "I would argue to use the build pattern + support of env/sys. My motivation is that this way, the API surface is not increased and memory is not used to store the Configuration class. I have changed the PR message so it does not resolve the issue and I will adapt the span processors to use only the builder.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422524048", "createdAt": "2020-05-09T17:36:41Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4MDg4NA==", "bodyText": "Sure thing, @trask does that work for you in auto instrumentation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422580884", "createdAt": "2020-05-10T04:04:47Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4NTMxMQ==", "bodyText": "Yes, this is looking good @thisthat \ud83d\udc4d. Thanks for including readProperties(Properties), we will probably use that for something like an opentelemetry-auto.properties file (in addition to calling readEnvironment and readSystemProperties).\nOnly (very) minor thought is maybe rename readEnvironment to readEnvironmentVariables.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422585311", "createdAt": "2020-05-10T05:03:25Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4ODc1MA==", "bodyText": "Oh, I forgot, what about endpoint configuration for the otlp exporters? Are we waiting for open-telemetry/opentelemetry-specification#172 to be resolved before adding? Just curious. Thanks.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422588750", "createdAt": "2020-05-10T05:36:15Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NTA5MA==", "bodyText": "I was waiting to resolve #996 and then report in open-telemetry/opentelemetry-specification#572 what the Java current implementation uses for the variable names. I don't think open-telemetry/opentelemetry-specification#172 is blocking us since it is a matter of renaming of few constants and updating the documentation in the worst case", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422655090", "createdAt": "2020-05-10T14:45:46Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODkyNg==", "bodyText": "Filed #1194 to not forget about the suggestion from @trask", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422658926", "createdAt": "2020-05-10T15:17:37Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, "originalCommit": {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 892, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}