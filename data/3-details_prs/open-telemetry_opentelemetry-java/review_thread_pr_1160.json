{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzU1OTUy", "number": 1160, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1Nzo1NlrOD4FMmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMTo1NVrOD4YAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTMxOTk0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1Nzo1NlrOGOtQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1Nzo1NlrOGOtQNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NDY3OA==", "bodyText": "Can we have some generic comments so that lazy people that just use override will inherit and are good enough?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418074678", "createdAt": "2020-04-30T14:57:56Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Maps;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public abstract class ConfigBuilder<T> {\n+\n+  @VisibleForTesting\n+  protected enum NamingConvention {\n+    DOT {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase();\n+      }\n+    },\n+    ENV_VAR {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase().replace(\"_\", \".\");\n+      }\n+    };\n+\n+    public abstract String normalize(@Nonnull String key);\n+\n+    /**\n+     * Normalize the key value of the map using the class {@link #normalize(String)} method.\n+     *\n+     * @see #normalize(String)\n+     * @param map The map to normalize\n+     * @return an unmodifiable normalized map\n+     */\n+    public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+      Map<String, String> properties = new HashMap<>();\n+      for (Map.Entry<String, String> entry : map.entrySet()) {\n+        properties.put(normalize(entry.getKey()), entry.getValue());\n+      }\n+      return Collections.unmodifiableMap(properties);\n+    }\n+  }\n+\n+  protected abstract T fromConfigMap(\n+      Map<String, String> configMap, NamingConvention namingConvention);\n+\n+  public T readProperties(Properties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3c610bd42ca236bd021b432e6c58fc733156ef"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTMzMDYxOnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTowMDoxMFrOGOtXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozNzoxMVrOGPE9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQzMw==", "bodyText": "Can you please leave these todos? Or create issue if you want.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418076433", "createdAt": "2020-04-30T15:00:10Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -79,50 +106,137 @@ public void forceFlush() {\n     // Do nothing.\n   }\n \n-  /**\n-   * Returns a new Builder for {@link SimpleSpansProcessor}.\n-   *\n-   * @param spanExporter the {@code SpanExporter} to where the Spans are pushed.\n-   * @return a new {@link SimpleSpansProcessor}.\n-   * @throws NullPointerException if the {@code spanExporter} is {@code null}.\n-   */\n-  public static Builder newBuilder(SpanExporter spanExporter) {\n-    return new Builder(spanExporter);\n-  }\n-\n   /** Builder class for {@link SimpleSpansProcessor}. */\n-  public static final class Builder {\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private final SpanExporter spanExporter;\n-    private boolean sampled = true;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    private Builder(SpanExporter spanExporter) {\n-      this.spanExporter = Objects.requireNonNull(spanExporter, \"spanExporter\");\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n     /**\n-     * Set whether only sampled spans should be reported.\n+     * Creates a {@link SimpleSpansProcessor.Config} object using the default configuration.\n      *\n-     * @param sampled report only sampled spans.\n-     * @return this.\n+     * @return The {@link SimpleSpansProcessor.Config} object.\n+     * @since 0.4.0\n      */\n-    public Builder reportOnlySampled(boolean sampled) {\n-      this.sampled = sampled;\n-      return this;\n+    public static Config getDefault() {\n+      return newBuilder().build();\n     }\n \n-    // TODO: Add metrics for total exported spans.\n-    // TODO: Consider to add support for constant Attributes and/or Resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3c610bd42ca236bd021b432e6c58fc733156ef"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2Mjk4OQ==", "bodyText": "Could you please elaborate more on the second TODO? So I can provide a comprehensive description for the issue (and take it \ud83d\ude09)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418462989", "createdAt": "2020-05-01T08:37:11Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -79,50 +106,137 @@ public void forceFlush() {\n     // Do nothing.\n   }\n \n-  /**\n-   * Returns a new Builder for {@link SimpleSpansProcessor}.\n-   *\n-   * @param spanExporter the {@code SpanExporter} to where the Spans are pushed.\n-   * @return a new {@link SimpleSpansProcessor}.\n-   * @throws NullPointerException if the {@code spanExporter} is {@code null}.\n-   */\n-  public static Builder newBuilder(SpanExporter spanExporter) {\n-    return new Builder(spanExporter);\n-  }\n-\n   /** Builder class for {@link SimpleSpansProcessor}. */\n-  public static final class Builder {\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n \n-    private final SpanExporter spanExporter;\n-    private boolean sampled = true;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n \n-    private Builder(SpanExporter spanExporter) {\n-      this.spanExporter = Objects.requireNonNull(spanExporter, \"spanExporter\");\n-    }\n+    public abstract boolean isExportOnlySampled();\n \n     /**\n-     * Set whether only sampled spans should be reported.\n+     * Creates a {@link SimpleSpansProcessor.Config} object using the default configuration.\n      *\n-     * @param sampled report only sampled spans.\n-     * @return this.\n+     * @return The {@link SimpleSpansProcessor.Config} object.\n+     * @since 0.4.0\n      */\n-    public Builder reportOnlySampled(boolean sampled) {\n-      this.sampled = sampled;\n-      return this;\n+    public static Config getDefault() {\n+      return newBuilder().build();\n     }\n \n-    // TODO: Add metrics for total exported spans.\n-    // TODO: Consider to add support for constant Attributes and/or Resource.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQzMw=="}, "originalCommit": {"oid": "7e3c610bd42ca236bd021b432e6c58fc733156ef"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUyNTk0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0NTo1MlrOGOvUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0NTo1MlrOGOvUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwODUzNQ==", "bodyText": "Please add javadoc about what <T> is here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418108535", "createdAt": "2020-04-30T15:45:52Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Maps;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public abstract class ConfigBuilder<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3c610bd42ca236bd021b432e6c58fc733156ef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM5MTA4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1NzoyOFrOGPKZAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDozOTo0NVrOGPLhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjA2NA==", "bodyText": "What's the rationale behind having normalize on both the naming convention enum and the ConfigBuilder itself?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418552064", "createdAt": "2020-05-01T13:57:28Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Maps;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Base class for all the config builder classes (SimpleSpanProcessor, BatchSpanProcessor, etc).\n+ *\n+ * @param <T> the type of the config builder\n+ */\n+public abstract class ConfigBuilder<T> {\n+\n+  @VisibleForTesting\n+  protected enum NamingConvention {\n+    DOT {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase();\n+      }\n+    },\n+    ENV_VAR {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase().replace(\"_\", \".\");\n+      }\n+    };\n+\n+    public abstract String normalize(@Nonnull String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93d8f34a24378ff28c5c8c92bdcf9bcd8a3687e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NTkxOA==", "bodyText": "This method is abstract so each NamingConvention has to implement its normalization. It is only available inside the enum.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418565918", "createdAt": "2020-05-01T14:29:43Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Maps;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Base class for all the config builder classes (SimpleSpanProcessor, BatchSpanProcessor, etc).\n+ *\n+ * @param <T> the type of the config builder\n+ */\n+public abstract class ConfigBuilder<T> {\n+\n+  @VisibleForTesting\n+  protected enum NamingConvention {\n+    DOT {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase();\n+      }\n+    },\n+    ENV_VAR {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase().replace(\"_\", \".\");\n+      }\n+    };\n+\n+    public abstract String normalize(@Nonnull String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjA2NA=="}, "originalCommit": {"oid": "e93d8f34a24378ff28c5c8c92bdcf9bcd8a3687e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MDU0MQ==", "bodyText": "Oooh, my bad. I had read it as being outside the enum.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418570541", "createdAt": "2020-05-01T14:39:45Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common.export;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Maps;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Base class for all the config builder classes (SimpleSpanProcessor, BatchSpanProcessor, etc).\n+ *\n+ * @param <T> the type of the config builder\n+ */\n+public abstract class ConfigBuilder<T> {\n+\n+  @VisibleForTesting\n+  protected enum NamingConvention {\n+    DOT {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase();\n+      }\n+    },\n+    ENV_VAR {\n+      @Override\n+      public String normalize(@Nonnull String key) {\n+        return key.toLowerCase().replace(\"_\", \".\");\n+      }\n+    };\n+\n+    public abstract String normalize(@Nonnull String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjA2NA=="}, "originalCommit": {"oid": "e93d8f34a24378ff28c5c8c92bdcf9bcd8a3687e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQwMjU3OnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMTo1NVrOGPKgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoyNjoyMFrOGPLI_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1Mzg4NA==", "bodyText": "What happened to these default values? Doing a quick pass, I don't see them anywhere and don't know whether they exist anymore in this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418553884", "createdAt": "2020-05-01T14:01:55Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -151,126 +147,6 @@ public void forceFlush() {\n     worker.forceFlush();\n   }\n \n-  /**\n-   * Returns a new Builder for {@link BatchSpansProcessor}.\n-   *\n-   * @param spanExporter the {@code SpanExporter} to where the Spans are pushed.\n-   * @return a new {@link BatchSpansProcessor}.\n-   * @throws NullPointerException if the {@code spanExporter} is {@code null}.\n-   */\n-  public static Builder newBuilder(SpanExporter spanExporter) {\n-    return new Builder(spanExporter);\n-  }\n-\n-  /** Builder class for {@link BatchSpansProcessor}. */\n-  public static final class Builder {\n-\n-    private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-    private static final int MAX_QUEUE_SIZE = 2048;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93d8f34a24378ff28c5c8c92bdcf9bcd8a3687e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NDM0OQ==", "bodyText": "They have been moved to the Config class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1160#discussion_r418564349", "createdAt": "2020-05-01T14:26:20Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -151,126 +147,6 @@ public void forceFlush() {\n     worker.forceFlush();\n   }\n \n-  /**\n-   * Returns a new Builder for {@link BatchSpansProcessor}.\n-   *\n-   * @param spanExporter the {@code SpanExporter} to where the Spans are pushed.\n-   * @return a new {@link BatchSpansProcessor}.\n-   * @throws NullPointerException if the {@code spanExporter} is {@code null}.\n-   */\n-  public static Builder newBuilder(SpanExporter spanExporter) {\n-    return new Builder(spanExporter);\n-  }\n-\n-  /** Builder class for {@link BatchSpansProcessor}. */\n-  public static final class Builder {\n-\n-    private static final long SCHEDULE_DELAY_MILLIS = 5000;\n-    private static final int MAX_QUEUE_SIZE = 2048;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1Mzg4NA=="}, "originalCommit": {"oid": "e93d8f34a24378ff28c5c8c92bdcf9bcd8a3687e"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 886, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}