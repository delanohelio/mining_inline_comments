{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDI3MDQ3", "number": 1541, "title": "1503 prometheus example", "bodyText": "resolves #1503", "createdAt": "2020-08-16T10:32:06Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541", "merged": true, "mergeCommit": {"oid": "a08dd9fbe4a98f34aec3618475905fa55fece87e"}, "closed": true, "closedAt": "2020-08-17T21:17:06Z", "author": {"login": "jarebudev"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_bKqwAH2gAyNDY4NDI3MDQ3OmIxYmJjMDdhYWMwYWQzOWVkZmNhMTlkNWJhNzBjMzhlZTEyNDg0Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_0kM7gFqTQ2ODU5MjE1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1bbc07aac0ad39edfca19d5ba70c38ee1248478", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1bbc07aac0ad39edfca19d5ba70c38ee1248478", "committedDate": "2020-08-16T10:22:24Z", "message": "added prometheus exporter example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1eb7157dc71f673cf4637165f9d60e62a36ddb1", "committedDate": "2020-08-16T10:27:39Z", "message": "tidying up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTY5NDgz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#pullrequestreview-468169483", "createdAt": "2020-08-17T05:19:37Z", "commit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxOTozN1rOHBZ_eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTozMTowNlrOHBaLgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNjQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These are collected by a Prometheus instance which is configured to pull these  metrics via HTTP. \n          \n          \n            \n            These are collected by a Prometheus instance which is configured to pull these metrics via HTTP.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471236474", "createdAt": "2020-08-17T05:19:37Z", "author": {"login": "thisthat"}, "path": "examples/prometheus/README.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Prometheus Example\n+\n+This example demonstrates how to use the OpenTelemetry SDK \n+to instrument a simple application using Prometheus as the metric exporter and expose the metrics via HTTP. \n+\n+These are collected by a Prometheus instance which is configured to pull these  metrics via HTTP. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNjYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471236632", "createdAt": "2020-08-17T05:20:15Z", "author": {"login": "thisthat"}, "path": "examples/prometheus/README.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Prometheus Example\n+\n+This example demonstrates how to use the OpenTelemetry SDK \n+to instrument a simple application using Prometheus as the metric exporter and expose the metrics via HTTP. \n+\n+These are collected by a Prometheus instance which is configured to pull these  metrics via HTTP. \n+\n+# How to run\n+\n+## Prerequisites\n+* Java 1.7\n+* Docker 19.03\n+\n+## 1 - Compile \n+```shell script\n+../gradlew fatJar\n+```\n+## 2 - Run Prometheus\n+\n+Start Prometheus instance with a configuration that sets up a HTTP collection job for  ```127.0.0.1:19090```\n+`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzODkyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                prom/prometheus \n          \n          \n            \n                -p 9090:9090 \\\n          \n          \n            \n                prom/prometheus", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471238927", "createdAt": "2020-08-17T05:28:32Z", "author": {"login": "thisthat"}, "path": "examples/prometheus/README.md", "diffHunk": "@@ -0,0 +1,44 @@\n+# Prometheus Example\n+\n+This example demonstrates how to use the OpenTelemetry SDK \n+to instrument a simple application using Prometheus as the metric exporter and expose the metrics via HTTP. \n+\n+These are collected by a Prometheus instance which is configured to pull these  metrics via HTTP. \n+\n+# How to run\n+\n+## Prerequisites\n+* Java 1.7\n+* Docker 19.03\n+\n+## 1 - Compile \n+```shell script\n+../gradlew fatJar\n+```\n+## 2 - Run Prometheus\n+\n+Start Prometheus instance with a configuration that sets up a HTTP collection job for  ```127.0.0.1:19090```\n+`\n+\n+See [prometheus.yml](prometheus.yml)\n+\n+```shell script\n+docker run --network=\"host\" --rm -it \\\n+    --name prometheus \\\n+    -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \\\n+    prom/prometheus ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzOTU1Mw==", "bodyText": "I would add a simple check that verifies the port is passed as an argument and prints a message if it is missing.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#discussion_r471239553", "createdAt": "2020-08-17T05:31:06Z", "author": {"login": "thisthat"}, "path": "examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.metrics.AsynchronousInstrument;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Example of using the {@link PrometheusCollector} to convert OTel metrics to Prometheus format and\n+ * expose these to a Prometheus instance via a {@link HTTPServer} exporter.\n+ *\n+ * <p>A {@link LongValueObserver} is used to periodically measure how many incoming messages are\n+ * awaiting processing. The {@link LongValueObserver.Callback} gets executed every collection\n+ * interval.\n+ */\n+public class PrometheusExample {\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+  private final Meter meter = meterSdkProvider.get(\"PrometheusExample\", \"0.7\");\n+  private final HTTPServer server;\n+  private long incomingMessageCount;\n+\n+  public PrometheusExample(int port) throws IOException {\n+\n+    LongValueObserver observer =\n+        meter\n+            .longValueObserverBuilder(\"incoming.messages\")\n+            .setDescription(\"No of incoming messages awaiting processing\")\n+            .setUnit(\"message\")\n+            .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.LongResult>() {\n+          @Override\n+          public void update(AsynchronousInstrument.LongResult result) {\n+            result.observe(incomingMessageCount, Labels.empty());\n+          }\n+        });\n+\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+\n+    server = new HTTPServer(port);\n+  }\n+\n+  void shutdown() {\n+    server.stop();\n+  }\n+\n+  void simulate() {\n+    for (int i = 300; i > 0; i--) {\n+      try {\n+        System.out.println(\n+            i + \" Iterations to go, current incomingMessageCount is:  \" + incomingMessageCount);\n+        incomingMessageCount = ThreadLocalRandom.current().nextLong(100);\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+      }\n+    }\n+  }\n+\n+  public static void main(String[] args) throws IOException {\n+\n+    int port = Integer.parseInt(args[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1eb7157dc71f673cf4637165f9d60e62a36ddb1"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e9f90d507cf731f51dbee0cf3061bf5c247fac", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89e9f90d507cf731f51dbee0cf3061bf5c247fac", "committedDate": "2020-08-17T07:01:33Z", "message": "Update examples/prometheus/README.md\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639e4b73a0a3be73a185ed91d09fcd043b2c2694", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/639e4b73a0a3be73a185ed91d09fcd043b2c2694", "committedDate": "2020-08-17T07:01:49Z", "message": "Update examples/prometheus/README.md\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa106d9ef5cb03e3524c7e71caf1090336201713", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa106d9ef5cb03e3524c7e71caf1090336201713", "committedDate": "2020-08-17T07:15:26Z", "message": "added port arg check as per code review suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d2620ea6e52e10533e85b86083c14933f3e657b", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d2620ea6e52e10533e85b86083c14933f3e657b", "committedDate": "2020-08-17T07:15:58Z", "message": "Merge branch '1503_prometheus_example' of https://github.com/jarebudev/opentelemetry-java into 1503_prometheus_example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MjI4NTEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#pullrequestreview-468228511", "createdAt": "2020-08-17T07:29:35Z", "commit": {"oid": "2d2620ea6e52e10533e85b86083c14933f3e657b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTU3Njc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#pullrequestreview-468557677", "createdAt": "2020-08-17T15:17:57Z", "commit": {"oid": "2d2620ea6e52e10533e85b86083c14933f3e657b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTkyMTU5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1541#pullrequestreview-468592159", "createdAt": "2020-08-17T15:57:55Z", "commit": {"oid": "2d2620ea6e52e10533e85b86083c14933f3e657b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2336, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}