{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMzc1OTkz", "number": 1433, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjoxNjo1OFrOEQJPbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo0Mjo0MVrOEQU2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzY0MDc2OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjoxNjo1OFrOG0JLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzowNzozMVrOG0LYjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyOTQzMA==", "bodyText": "Before returning, I would add a log to notify the error since the spec requires that key MUST not be null https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#set-attributes\nFurthermore, I just noticed that we allow empty strings as a key", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1433#discussion_r457329430", "createdAt": "2020-07-20T12:16:58Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -300,7 +299,9 @@ public void setAttribute(String key, boolean value) {\n \n   @Override\n   public void setAttribute(String key, AttributeValue value) {\n-    Preconditions.checkNotNull(key, \"key\");\n+    if (key == null) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f41e6af94bae3a086eebcaed8e173dc5779c47f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzNDQ1Mg==", "bodyText": "I have created #1436", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1433#discussion_r457334452", "createdAt": "2020-07-20T12:24:22Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -300,7 +299,9 @@ public void setAttribute(String key, boolean value) {\n \n   @Override\n   public void setAttribute(String key, AttributeValue value) {\n-    Preconditions.checkNotNull(key, \"key\");\n+    if (key == null) {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyOTQzMA=="}, "originalCommit": {"oid": "3f41e6af94bae3a086eebcaed8e173dc5779c47f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MDk5Nw==", "bodyText": "I have used a property controlled pattern for validating before, would it make sense here?\nhttps://github.com/aws/aws-xray-sdk-java/blob/master/aws-xray-recorder-sdk-core/src/main/java/com/amazonaws/xray/utils/LooseValidations.java#L47\nI don't think we should log unconditionally since in many apps log spam can be almost as bad as runtime errors.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1433#discussion_r457360997", "createdAt": "2020-07-20T13:01:04Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -300,7 +299,9 @@ public void setAttribute(String key, boolean value) {\n \n   @Override\n   public void setAttribute(String key, AttributeValue value) {\n-    Preconditions.checkNotNull(key, \"key\");\n+    if (key == null) {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyOTQzMA=="}, "originalCommit": {"oid": "3f41e6af94bae3a086eebcaed8e173dc5779c47f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2NTY0Ng==", "bodyText": "I think your suggestion is very valuable used in combination with #1419", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1433#discussion_r457365646", "createdAt": "2020-07-20T13:07:31Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -300,7 +299,9 @@ public void setAttribute(String key, boolean value) {\n \n   @Override\n   public void setAttribute(String key, AttributeValue value) {\n-    Preconditions.checkNotNull(key, \"key\");\n+    if (key == null) {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMyOTQzMA=="}, "originalCommit": {"oid": "3f41e6af94bae3a086eebcaed8e173dc5779c47f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTU0MjEzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo0Mjo0MVrOG0as1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo0Mjo0MVrOG0as1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNjU5Nw==", "bodyText": "We need new tests for all the SDK changes too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1433#discussion_r457616597", "createdAt": "2020-07-20T18:42:41Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -385,7 +386,9 @@ private void addTimedEvent(TimedEvent timedEvent) {\n \n   @Override\n   public void setStatus(Status status) {\n-    Preconditions.checkNotNull(status, \"status\");\n+    if (status == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f41e6af94bae3a086eebcaed8e173dc5779c47f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1502, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}