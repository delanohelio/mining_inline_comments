{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzE0Nzk3", "number": 1524, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjozODozMVrOEW_OJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMzowNVrOEkfAJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTM5OTQyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/common/AnyValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjozODozMVrOG-iJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxOTo0OFrOG-kD5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNDMxOQ==", "bodyText": "I think these should all be 0.8.0 now, since we've already released 0.7.0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468224319", "createdAt": "2020-08-10T22:38:31Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.7.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NTcxNw==", "bodyText": "Also I think we can add it only to the class, not all the methods in the class, for new classes. I think it's how the JDK manages it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468255717", "createdAt": "2020-08-11T00:19:48Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.7.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNDMxOQ=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQxNjM3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo0NTozNlrOG-iS4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoyMToyOFrOG-kFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNjc4Ng==", "bodyText": "Any reason not to use AutoValue for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468226786", "createdAt": "2020-08-10T22:45:36Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Map;\n+\n+public class DefaultLogRecord implements LogRecord {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NDczNA==", "bodyText": "The intent is to allow for flexibility in implementing these records- for example I would prefer to make an adapter for a Log4j record rather than copying each of the fields.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468244734", "createdAt": "2020-08-10T23:42:06Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Map;\n+\n+public class DefaultLogRecord implements LogRecord {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNjc4Ng=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NjE5Mw==", "bodyText": "We can make that change if we need to later, it's sort of an implementation detail. Since this seems to be a simple POJO for now, we may as well get sane equality / tostring for free while we're here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468256193", "createdAt": "2020-08-11T00:21:28Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Map;\n+\n+public class DefaultLogRecord implements LogRecord {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNjc4Ng=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTI5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNlrOG-ieGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNlrOG-ieGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY1OQ==", "bodyText": "Prefer using a single-threaded ExecutorService, rather than using a Timer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468229659", "createdAt": "2020-08-10T22:54:36Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ0NDk4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1ODo0M1rOG-ijzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0MTo1N1rOG-jYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMTExNg==", "bodyText": "why not just have a fixed rate of export, and have the exporter no-op if there's nothing to export? This extra bit of complication, and extra synchronization on every log record(!) seems like more than is needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468231116", "createdAt": "2020-08-10T22:58:43Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;\n+  private List<LogRecord> batch = new ArrayList<>();\n+  private boolean timerPending = false;\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+  }\n+\n+  @Override\n+  public void add(LogRecord record) {\n+    synchronized (this) {\n+      if (!timerPending) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NDY3OQ==", "bodyText": "I got over-fixated on having the \"right\" interval between batches. Of course it's better to do this more simply, avoid the synchronization, and occasionally have an extra batch.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468244679", "createdAt": "2020-08-10T23:41:57Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;\n+  private List<LogRecord> batch = new ArrayList<>();\n+  private boolean timerPending = false;\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+  }\n+\n+  @Override\n+  public void add(LogRecord record) {\n+    synchronized (this) {\n+      if (!timerPending) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMTExNg=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ1MDg2OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowMToyOVrOG-inQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowMToyOVrOG-inQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjAwMw==", "bodyText": "Can this be implemented with a Queue, rather than a bare List? The synchronization needed to manage this seems like a recipe for bad contention issues.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468232003", "createdAt": "2020-08-10T23:01:29Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;\n+  private List<LogRecord> batch = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ1MzQwOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowMjo0M1rOG-iovg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0MToxMFrOG-jXzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjM4Mg==", "bodyText": "If we do end up needing to synchronize on every record addition, we should definitely synchronize on a private final member variable, rather than this, which could allow another user to deadlock this process by synchronizing on the Strategy instance by accident (or on purpose).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468232382", "createdAt": "2020-08-10T23:02:43Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;\n+  private List<LogRecord> batch = new ArrayList<>();\n+  private boolean timerPending = false;\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+  }\n+\n+  @Override\n+  public void add(LogRecord record) {\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NDQyOQ==", "bodyText": "Thanks. I think I'll take the approach of reducing the synchronization, but I'll remember this for next time.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468244429", "createdAt": "2020-08-10T23:41:10Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;\n+  private List<LogRecord> batch = new ArrayList<>();\n+  private boolean timerPending = false;\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+  }\n+\n+  @Override\n+  public void add(LogRecord record) {\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjM4Mg=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ1NTc4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowNDowMlrOG-iqSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjoxMjoyNlrOG-l5yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjc3OQ==", "bodyText": "Why the WeakReference here? Is it really needed? Having this would make it easy for someone to assign an exporter, and not keep a reference to it, ending exports altogether without them knowing why it had happened.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468232779", "createdAt": "2020-08-10T23:04:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NjUwMQ==", "bodyText": "I added this because the LogSink holds a reference to the strategy, and then passes itself in as a delegate, so I was trying to avoid a reference cycle. It would be much cleaner to not have the weak reference and just pass an anonymous inner class instead. I'll change that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468246501", "createdAt": "2020-08-10T23:48:39Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjc3OQ=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1Njg3OA==", "bodyText": "Reference cycles are common in Java, especially because of inner classes, as long as we're careful not to have those for static fields I'd avoid the complexity of WeakReference", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468256878", "createdAt": "2020-08-11T00:24:04Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjc3OQ=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI4NTg5OA==", "bodyText": "Right. The GC is very, very good about handling these cases, as long (as you say), it's not static cycles in the classes themselves.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468285898", "createdAt": "2020-08-11T02:12:26Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private static final Timer timer = new Timer();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+\n+  private WeakReference<LoggingBatchExporter> batchHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMjc3OQ=="}, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ2MDQ0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/test/java/io/opentelemetry/logging/SdkLogSinkProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowNjowOFrOG-is-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowNjowOFrOG-is-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMzQ2Ng==", "bodyText": "I think having this tight a tolerence for testing code is going to probably cause sporadic test failures. Can we use something like awaitility for this instead?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468233466", "createdAt": "2020-08-10T23:06:08Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/test/java/io/opentelemetry/logging/SdkLogSinkProviderTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.logging.api.LogRecord.Severity;\n+import io.opentelemetry.logging.api.LogSink;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class SdkLogSinkProviderTest {\n+  @Test\n+  public void testProviderAggregation() throws InterruptedException {\n+    List<LogRecord> records1 = new ArrayList<>();\n+    List<LogRecord> records2 = new ArrayList<>();\n+    SdkLogSinkProvider provider =\n+        new SdkLogSinkProvider.Builder()\n+            .withBatchManager(\n+                new SizeOrLatencyBatchStrategy.Builder()\n+                    .withMaxBatchSize(5)\n+                    .withMaxDelay(50, TimeUnit.MILLISECONDS)\n+                    .build())\n+            .withExporter(records1::addAll)\n+            .withExporter(records2::addAll)\n+            .build();\n+    LogSink sink = provider.get(\"test\", \"0.8.0\");\n+    for (int i = 0; i < 11; i++) {\n+      sink.offer(\n+          sink.buildRecord()\n+              .withUnixTimeMillis(System.currentTimeMillis())\n+              .withSeverity(Severity.DEBUG)\n+              .withBody(\"test\")\n+              .build());\n+    }\n+    assertThat(records1.size()).isEqualTo(10);\n+    assertThat(records2.size()).isEqualTo(10);\n+    Thread.sleep(55);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ2Mzg0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/test/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowNzo1NFrOG-iu6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowNzo1NFrOG-iu6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMzk2Mg==", "bodyText": "same comment on test timing. let's see if we can use awaitility for this kind of test that has timing requirements.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468233962", "createdAt": "2020-08-10T23:07:54Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/test/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategyTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class SizeOrLatencyBatchStrategyTest {\n+\n+  @Test\n+  public void testSizeStrategy() {\n+    SizeOrLatencyBatchStrategy strategy =\n+        new SizeOrLatencyBatchStrategy.Builder().withMaxBatchSize(5).build();\n+    final List<LogRecord> transmittedBatch = new ArrayList<>();\n+\n+    strategy.setBatchHandler(transmittedBatch::addAll);\n+\n+    for (int i = 0; i < 7; i++) {\n+      strategy.add(null);\n+    }\n+\n+    assertThat(transmittedBatch.size()).isEqualTo(5);\n+\n+    for (int i = 0; i < 3; i++) {\n+      strategy.add(null);\n+    }\n+\n+    assertThat(transmittedBatch.size()).isEqualTo(10);\n+  }\n+\n+  @Test\n+  public void testLatencyStrategy() throws InterruptedException {\n+    SizeOrLatencyBatchStrategy strategy =\n+        new SizeOrLatencyBatchStrategy.Builder().withMaxDelay(50, TimeUnit.MILLISECONDS).build();\n+\n+    final List<LogRecord> transmittedBatch = new ArrayList<>();\n+\n+    strategy.setBatchHandler(transmittedBatch::addAll);\n+\n+    for (int i = 0; i < 7; i++) {\n+      strategy.add(null);\n+      Thread.sleep(10);\n+    }\n+\n+    assertThat(transmittedBatch.size()).isEqualTo(5);\n+    Thread.sleep(55);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ2NjQ3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SdkLogSinkProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowOToxMVrOG-iwcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzowOToxMVrOG-iwcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNDM1Mg==", "bodyText": "field name should match the class/interface name a little more closely.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468234352", "createdAt": "2020-08-10T23:09:11Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/SdkLogSinkProvider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.logging.api.LogSink;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class SdkLogSinkProvider implements LoggingBatchExporter {\n+  private final LoggingBatchStrategy batchManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTYxMjMzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoyMDo1MFrOG-kFIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoyMDo1MFrOG-kFIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NjAzMw==", "bodyText": "Looks like these can all be final", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r468256033", "createdAt": "2020-08-11T00:20:50Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging_support/src/main/java/io/opentelemetry/logging/DefaultLogRecord.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Map;\n+\n+public class DefaultLogRecord implements LogRecord {\n+  private long timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d12042a2d829ef52f6afa6f0a75b5893c9b46e4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAwMDc4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNzo0MFrOHHV9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo1MjozNVrOHQFVPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTgyMQ==", "bodyText": "This may need to be replaced by AttributeValue, I think the missing part is the KVList, maybe a comment for the moment explaining the difference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477461821", "createdAt": "2020-08-26T17:17:40Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.8.0\n+ */\n+@Immutable\n+public abstract class AnyValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNTE3Nw==", "bodyText": "This is a good point. In Collector codebase for example we use the same AttributeValue data type for Spans, Resources and LogRecords. This mirrors what we have in the OTLP Proto definitions.\nIs there any reason we cannot extend AttributeValue to fully handle all possible types that AnyValue can represent?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486605177", "createdAt": "2020-09-10T20:10:46Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.8.0\n+ */\n+@Immutable\n+public abstract class AnyValue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTgyMQ=="}, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNjYyMA==", "bodyText": "If the recent PR #1631 gets merged, then AttributeValue won't exist any more. Also, I don't think we want to accept map-values into our tracing attributes, which that would impact.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486626620", "createdAt": "2020-09-10T20:52:35Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.8.0\n+ */\n+@Immutable\n+public abstract class AnyValue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTgyMQ=="}, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAxMTc0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDozMVrOHHWD2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMDozMVrOHHWD2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MzUxMw==", "bodyText": "s/LoggingBatchExporter/LogsExporter to be in sync with others exporters. Also move it to a directory called export", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477463513", "createdAt": "2020-08-26T17:20:31Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchExporter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Collection;\n+\n+/**\n+ * A LoggingBatchExporter accepts a batch of records and handles the transmission of those records\n+ * to a remote system.\n+ */\n+public interface LoggingBatchExporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAxNzM0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMjowMlrOHHWHeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMjowMlrOHHWHeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NDQ0MA==", "bodyText": "In trace we call this a \"SpanProcessor\", probably same name here LogRecordProcessor, which has one implementation as BatchingLogRecordProcessor.\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#span-processor", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477464440", "createdAt": "2020-08-26T17:22:02Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+\n+/**\n+ * A LoggingBatchStrategy encodes the logic for how to batch and aggregate records for transmission.\n+ * {@link SizeOrLatencyBatchStrategy}\n+ */\n+public interface LoggingBatchStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTAyMDk1OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMzowMVrOHHWJ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMzowMVrOHHWJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NTA0Mw==", "bodyText": "This should be probably part of the ctor, we should not allow to set/remove exporters during runtime.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477465043", "createdAt": "2020-08-26T17:23:01Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LoggingBatchStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+\n+/**\n+ * A LoggingBatchStrategy encodes the logic for how to batch and aggregate records for transmission.\n+ * {@link SizeOrLatencyBatchStrategy}\n+ */\n+public interface LoggingBatchStrategy {\n+  void stop();\n+\n+  /**\n+   * Add a LogRecord to the existing batch.\n+   *\n+   * @param record record to enqueue\n+   */\n+  void add(LogRecord record);\n+\n+  /** Explicitly flush the batch. */\n+  void flush();\n+\n+  /**\n+   * This sets the handler for the batch. {@link\n+   * LoggingBatchExporter#handleLogRecordBatch(Collection)} will be called whenever this strategy's\n+   * constraints are fulfilled.\n+   *\n+   * @param handler Exporter to invoke when the batch is full\n+   */\n+  void setBatchHandler(LoggingBatchExporter handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzgzMDA0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoxNjoxNVrOHHy3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoxNjoxNVrOHHy3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzkzNTQ1Nw==", "bodyText": "I assume AnyValue here mirrors AnyValue from OTLP Protobufs. If that's the case then we likely need to use long instead of int since OTLP Protobufs use int64.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477935457", "createdAt": "2020-08-27T02:16:15Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.8.0\n+ */\n+@Immutable\n+public abstract class AnyValue {\n+\n+  /** An enum that represents all the possible value types for an {@code AnyValue}. */\n+  public enum Type {\n+    STRING,\n+    BOOL,\n+    INT,\n+    DOUBLE,\n+    ARRAY,\n+    KVLIST\n+  }\n+\n+  /**\n+   * Returns an {@code AnyValue} with a string value.\n+   *\n+   * @param stringValue The new value.\n+   * @return an {@code AnyValue} with a string value.\n+   */\n+  public static AnyValue stringAnyValue(String stringValue) {\n+    return AnyValueString.create(stringValue);\n+  }\n+\n+  /**\n+   * Returns the string value of this {@code AnyValue}. An UnsupportedOperationException will be\n+   * thrown if getType() is not {@link AnyValue.Type#STRING}.\n+   *\n+   * @return the string value of this {@code AttributeValue}.\n+   */\n+  public String getStringValue() {\n+    throw new UnsupportedOperationException(\n+        String.format(\"This type can only return %s data\", getType().name()));\n+  }\n+\n+  /**\n+   * Returns an {@code AnyValue} with an int value.\n+   *\n+   * @param intValue The new value.\n+   * @return an {@code AnyValue} with a int value.\n+   */\n+  public static AnyValue intAnyValue(int intValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Nzg0OTQ4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoxNzo1MlrOHHzEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoxNzo1MlrOHHzEAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzkzODY4OQ==", "bodyText": "May be worth doing this to make the size of the int clear:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                INT,\n          \n          \n            \n                INT64,", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477938689", "createdAt": "2020-08-27T02:17:52Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A class that represents all the possible values for a data body. An {@code AnyValue} can have 6\n+ * types of values: {@code String}, {@code boolean}, {@code int}, {@code double}, {@code array}, or\n+ * {@code kvlist}. represented through {@code AnyValue.Type}. A {@code array} or a {@code kvlist}\n+ * can in turn hold other {@code AnyValue} instances, allowing for mapping to JSON-like structures.\n+ *\n+ * @since 0.8.0\n+ */\n+@Immutable\n+public abstract class AnyValue {\n+\n+  /** An enum that represents all the possible value types for an {@code AnyValue}. */\n+  public enum Type {\n+    STRING,\n+    BOOL,\n+    INT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Nzg4MzAwOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoyMjoxMVrOHHzbBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoyMjoxMVrOHHzbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk0NDU4MA==", "bodyText": "I am not sure what defaults we use for trace and metrics but I think a lower default would be nicer. Latencies at every node are additive and keeping it low is beneficial otherwise the data may take a lot of time to arrive. We use 200ms in the Collector.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477944580", "createdAt": "2020-08-27T02:22:11Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzkxMzkyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoyNjowNlrOHHzwDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoyNjowNlrOHHzwDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk0OTk2NQ==", "bodyText": "Minor: will this run periodically regardless of whether flush() is also called from add()? Ideally flush() called from add() should reset the periodic timer so that flush() is not called too soon.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477949965", "createdAt": "2020-08-27T02:26:06Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+  private final ScheduledFuture<?> schedule;\n+\n+  private LoggingBatchExporter batchHandler;\n+  private Queue<LogRecord> batch = buildNewQueue();\n+\n+  private static Queue<LogRecord> buildNewQueue() {\n+    return new LinkedBlockingQueue<>();\n+  }\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+    this.schedule =\n+        executor.scheduleWithFixedDelay(\n+            new Runnable() {\n+              @Override\n+              public void run() {\n+                flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODAzMjUxOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0MToxNVrOHH1DeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0MToxNVrOHH1DeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3MTMyMA==", "bodyText": "Shouldn't this also be synchronized to avoid the race on this.batch in flash()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477971320", "createdAt": "2020-08-27T02:41:15Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/SizeOrLatencyBatchStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.logging.api.LogRecord;\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Batching strategy that allows specifying both a maximum size and a maximum amount of time before\n+ * sending a batch of records. Batch will be flushed whenever the list of records queued exceeds the\n+ * maximum threshold (default 50), or a set timeout expires (default 5 seconds).\n+ */\n+public class SizeOrLatencyBatchStrategy implements LoggingBatchStrategy {\n+  private static final int DEFAULT_BATCH_SIZE = 50;\n+  private static final int DEFAULT_MAX_DELAY = 5;\n+  private static final TimeUnit DEFAULT_MAX_DELAY_UNITS = TimeUnit.SECONDS;\n+  private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+\n+  private final int maxBatch;\n+  private final int maxDelay;\n+  private final TimeUnit maxDelayUnits;\n+  private final ScheduledFuture<?> schedule;\n+\n+  private LoggingBatchExporter batchHandler;\n+  private Queue<LogRecord> batch = buildNewQueue();\n+\n+  private static Queue<LogRecord> buildNewQueue() {\n+    return new LinkedBlockingQueue<>();\n+  }\n+\n+  private SizeOrLatencyBatchStrategy(int maxBatch, int maxDelay, TimeUnit units) {\n+    this.maxBatch = maxBatch > 0 ? maxBatch : DEFAULT_BATCH_SIZE;\n+    this.maxDelay = maxDelay > 0 ? maxDelay : DEFAULT_MAX_DELAY;\n+    this.maxDelayUnits = units != null ? units : DEFAULT_MAX_DELAY_UNITS;\n+    this.schedule =\n+        executor.scheduleWithFixedDelay(\n+            new Runnable() {\n+              @Override\n+              public void run() {\n+                flush();\n+              }\n+            },\n+            this.maxDelay,\n+            this.maxDelay,\n+            this.maxDelayUnits);\n+  }\n+\n+  @Override\n+  public void stop() {\n+    schedule.cancel(false);\n+  }\n+\n+  @Override\n+  public void add(LogRecord record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODA0OTQzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0MzoyNlrOHH1PLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0MzoyNlrOHH1PLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NDMxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">\n          \n          \n            \n             * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/logs/data-model.md\">", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r477974319", "createdAt": "2020-08-27T02:43:26Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A LogRecord is an implementation of the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f2ed0a99841bcab6e1b7db9ae0bf550de84e14a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc2MzAyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNDozMVrOHQEItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMzo1MlrOHQFrWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzAyOQ==", "bodyText": "We need to be careful to avoid self-reinforcing loops if metric operations decide to log on metering failures like we decide to meter on logging failures here. Do we know that none of the metric API calls we make here is log-free or that metric API implementation will not use our logging methods?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486607029", "createdAt": "2020-09-10T20:14:31Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogProcessor;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      Exporter exporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, exporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(Exporter exporter) {\n+    return new Builder(exporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDM3MQ==", "bodyText": "This is a good point. I'm also trying to get the message out if logs are not getting out- do we have patterns for how we manage this type of situation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486630371", "createdAt": "2020-09-10T21:00:01Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogProcessor;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      Exporter exporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, exporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(Exporter exporter) {\n+    return new Builder(exporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzAyOQ=="}, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjI4Mg==", "bodyText": "The only recommendation I can think of is to be careful and don't make calls that looks mutually recursive. Unfortunately that means you have to do flow control analysis manually. It results in fragile code, I know. Someone touches anything there (adds an innocent looking debug statement) and it can become a disaster :-(\nMore complicated technical means are possible, like detecting the recursion and aborting it, not sure if we want to go that route.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486632282", "createdAt": "2020-09-10T21:03:52Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogProcessor;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      Exporter exporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, exporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(Exporter exporter) {\n+    return new Builder(exporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzAyOQ=="}, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc3MDM3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNjo0NlrOHQENOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoxNjo0NlrOHQENOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwODE4Nw==", "bodyText": "Can we have a smaller default, please? I don't want to increase logging end-to-end latency this much.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486608187", "createdAt": "2020-09-10T20:16:46Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogProcessor;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      Exporter exporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, exporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(Exporter exporter) {\n+    return new Builder(exporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");\n+      LongCounter logProcessorErrors =\n+          meter\n+              .longCounterBuilder(\"logProcessorErrors\")\n+              .setUnit(\"1\")\n+              .setDescription(\"Number of errors encountered while processing logs\")\n+              .build();\n+      Labels.Builder builder =\n+          Labels.of(\"logProcessorType\", BatchLogProcessor.class.getName()).toBuilder();\n+      exporterFailureCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter failure\").build());\n+      exporterBusyCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter busy\").build());\n+      droppedRecordCounter =\n+          logProcessorErrors.bind(\n+              builder.setLabel(\"errorType\", \"dropped record - queue full\").build());\n+    }\n+\n+    private static final BoundLongCounter exporterFailureCounter;\n+    private static final BoundLongCounter exporterBusyCounter;\n+    private static final BoundLongCounter droppedRecordCounter;\n+    private static final Logger logger = Logger.getLogger(Worker.class.getName());\n+\n+    private final Object monitor = new Object();\n+    private final int maxQueueSize;\n+    private final long scheduleDelayMillis;\n+    private final ArrayList<LogRecord> logRecords;\n+    private final int maxExportBatchSize;\n+    private final ExecutorService executor;\n+    private final Exporter exporter;\n+    private final Timer timer = new Timer(TIMER_THREAD_NAME, /* isDaemon= */ true);\n+    private final long exporterTimeout;\n+\n+    private Worker(\n+        int maxQueueSize,\n+        long scheduleDelayMillis,\n+        int maxExportBatchSize,\n+        long exporterTimeout,\n+        Exporter exporter) {\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+\n+      this.exporterTimeout = exporterTimeout;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.exporter = exporter;\n+      this.logRecords = new ArrayList<>(maxQueueSize);\n+      // We should be able to drain a full queue without dropping a batch\n+      int exportQueueSize = maxQueueSize / maxExportBatchSize;\n+      RejectedExecutionHandler h =\n+          new RejectedExecutionHandler() {\n+            @Override\n+            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+              exporterBusyCounter.add(1);\n+            }\n+          };\n+      this.executor =\n+          new ThreadPoolExecutor(\n+              1,\n+              1,\n+              0L,\n+              TimeUnit.MILLISECONDS,\n+              new LinkedBlockingQueue<Runnable>(exportQueueSize),\n+              h);\n+    }\n+\n+    @Override\n+    public void run() {\n+      ArrayList<LogRecord> logsCopy;\n+      while (!Thread.currentThread().isInterrupted()) {\n+        synchronized (monitor) {\n+          if (this.logRecords.size() < maxExportBatchSize) {\n+            do {\n+              try {\n+                monitor.wait(scheduleDelayMillis);\n+              } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                return;\n+              }\n+            } while (this.logRecords.isEmpty());\n+          }\n+          logsCopy = new ArrayList<>(this.logRecords);\n+          logRecords.clear();\n+        }\n+        exportBatches(logsCopy);\n+      }\n+    }\n+\n+    private void exportBatches(ArrayList<LogRecord> recordsToShip) {\n+      for (int i = 0; i < recordsToShip.size(); ) {\n+        int lastIndexToTake = Math.min(i + maxExportBatchSize, recordsToShip.size());\n+        onBatchExport(createLogDataForExport(recordsToShip, i, lastIndexToTake));\n+        i = lastIndexToTake;\n+      }\n+    }\n+\n+    private void onBatchExport(final List<LogRecord> logDataForExport) {\n+      final Future<CompletableResultCode> f =\n+          executor.submit(\n+              new Callable<CompletableResultCode>() {\n+                @Override\n+                public CompletableResultCode call() {\n+                  return exporter.accept(logDataForExport);\n+                }\n+              });\n+\n+      timer.schedule(\n+          new TimerTask() {\n+            @Override\n+            public void run() {\n+              if (f.isDone()) {\n+                try {\n+                  final CompletableResultCode result = f.get(0, TimeUnit.MILLISECONDS);\n+                  if (!result.isSuccess()) {\n+                    // This may mean that the export process has failed, or that it's still running\n+                    // but it's at the end of it's timeout.\n+                    logger.warning(\"log exporter has failed or timed out\");\n+                    exporterFailureCounter.add(1);\n+                  }\n+                } catch (InterruptedException | ExecutionException e) {\n+                  logger.warning(\"log exporter failure:\" + e.getLocalizedMessage());\n+                  exporterFailureCounter.add(1);\n+                } catch (TimeoutException e) {\n+                  logger.warning(\"log exporter has failed to return async result\");\n+                  exporterFailureCounter.add(1);\n+                }\n+              }\n+            }\n+          },\n+          exporterTimeout);\n+    }\n+\n+    private static List<LogRecord> createLogDataForExport(\n+        ArrayList<LogRecord> recordsToShip, int startIndex, int endIndex) {\n+      List<LogRecord> logDataBuffer = new ArrayList<>(endIndex - startIndex);\n+      for (int i = startIndex; i < endIndex; i++) {\n+        logDataBuffer.add(recordsToShip.get(i));\n+        recordsToShip.set(i, null);\n+      }\n+      return Collections.unmodifiableList(logDataBuffer);\n+    }\n+\n+    public void addLogRecord(LogRecord record) {\n+      synchronized (monitor) {\n+        if (logRecords.size() >= maxQueueSize) {\n+          droppedRecordCounter.add(1);\n+          // FIXME: call callback\n+        }\n+        logRecords.add(record);\n+        if (logRecords.size() >= maxExportBatchSize) {\n+          monitor.notifyAll();\n+        }\n+      }\n+    }\n+\n+    private void shutdown() {\n+      forceFlush();\n+      timer.cancel();\n+      exporter.shutdown();\n+    }\n+\n+    private void forceFlush() {\n+      ArrayList<LogRecord> logsCopy;\n+      synchronized (monitor) {\n+        logsCopy = new ArrayList<>(this.logRecords);\n+        logRecords.clear();\n+      }\n+      exportBatches(logsCopy);\n+    }\n+  }\n+\n+  static class Builder extends ConfigBuilder<Builder> {\n+    /* @VisibleForTesting */ static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    static final long DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+\n+    private final Exporter exporter;\n+    private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+    private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+    private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+    private long exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+\n+    private Builder(Exporter exporter) {\n+      this.exporter = Utils.checkNotNull(exporter, \"Exporter argument can not be null\");\n+    }\n+\n+    public Builder newBuilder(Exporter exporter) {\n+      return new Builder(exporter);\n+    }\n+\n+    public BatchLogProcessor build() {\n+      return new BatchLogProcessor(\n+          maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeoutMillis, exporter);\n+    }\n+\n+    /**\n+     * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+     * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+     *\n+     * <p>Default value is {@code 5000}ms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc5MzY3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/Exporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyMzo0MVrOHQEbRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyMzo0MVrOHQEbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMTc4Mw==", "bodyText": "For consistency we probably to name this export, same as we do for traces: \n  \n    \n      opentelemetry-java/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/export/SpanExporter.java\n    \n    \n         Line 41\n      in\n      d138908\n    \n    \n    \n    \n\n        \n          \n           CompletableResultCode export(Collection<SpanData> spans); \n        \n    \n  \n\n\nSimilarly, probably name the class LogExporter.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486611783", "createdAt": "2020-09-10T20:23:41Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/Exporter.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.Collection;\n+\n+/**\n+ * An exporter is responsible for taking a list of {@link LogRecord}s and transmitting them to their\n+ * ultimate destination.\n+ */\n+public interface Exporter {\n+  CompletableResultCode accept(Collection<LogRecord> records);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzc5OTc0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/Exporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNToxOFrOHQEeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNToxOFrOHQEeuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMjY2Nw==", "bodyText": "SpanExporter.shutdown returns CompletableResultCode. Should we too for consistency? Generally I think it is worth trying to be consistent with our tracing peers such as SpanExporter.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486612667", "createdAt": "2020-09-10T20:25:18Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/Exporter.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.Collection;\n+\n+/**\n+ * An exporter is responsible for taking a list of {@link LogRecord}s and transmitting them to their\n+ * ultimate destination.\n+ */\n+public interface Exporter {\n+  CompletableResultCode accept(Collection<LogRecord> records);\n+\n+  void shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzgwMzk0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDoyNjozM1rOHQEhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDo0OTo1NFrOHQFPzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMzMxOA==", "bodyText": "SpanData uses string instead of byte[]: \n  \n    \n      opentelemetry-java/sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java\n    \n    \n         Line 46\n      in\n      d138908\n    \n    \n    \n    \n\n        \n          \n           String getTraceId(); \n        \n    \n  \n\n\nI don't know what is better in Java but let's be consistent.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486613318", "createdAt": "2020-09-10T20:26:33Z", "author": {"login": "tigrannajaryan"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A LogRecord is an implementation of the <a\n+ * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/logs/data-model.md\">\n+ * OpenTelemetry logging model</a>.\n+ */\n+@AutoValue\n+public abstract class LogRecord {\n+  abstract long getTimeUnixNano();\n+\n+  @SuppressWarnings(\"mutable\")\n+  abstract byte[] getTraceId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTIzMA==", "bodyText": "we avoided using byte[] specifically because it's a mutable type, where as String is immutable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486625230", "createdAt": "2020-09-10T20:49:54Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A LogRecord is an implementation of the <a\n+ * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/logs/data-model.md\">\n+ * OpenTelemetry logging model</a>.\n+ */\n+@AutoValue\n+public abstract class LogRecord {\n+  abstract long getTimeUnixNano();\n+\n+  @SuppressWarnings(\"mutable\")\n+  abstract byte[] getTraceId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxMzMxOA=="}, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDEyNTYyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoxNDowM1rOHQHiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoxNDowM1rOHQHiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2Mjg0MQ==", "bodyText": "This was a bit that gave me fits. In the span export, there's a monitor that dumps a batch if a batch is already in process. Unfortunately exportBatches is set up to export several batches at the same time, meaning that the first will lock subsequent batches, so if the incoming queue fills, the first batch goes to the exporter and the rest are silently discarded. The intent here is to use an execution queue to allow enough exports to occur to drain a full input queue, but still retain the behavior of shedding batches if the exporter can't keep up.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r486662841", "createdAt": "2020-09-10T22:14:03Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.logging.api.Exporter;\n+import io.opentelemetry.logging.api.LogProcessor;\n+import io.opentelemetry.logging.api.LogRecord;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      Exporter exporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, exporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(Exporter exporter) {\n+    return new Builder(exporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");\n+      LongCounter logProcessorErrors =\n+          meter\n+              .longCounterBuilder(\"logProcessorErrors\")\n+              .setUnit(\"1\")\n+              .setDescription(\"Number of errors encountered while processing logs\")\n+              .build();\n+      Labels.Builder builder =\n+          Labels.of(\"logProcessorType\", BatchLogProcessor.class.getName()).toBuilder();\n+      exporterFailureCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter failure\").build());\n+      exporterBusyCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter busy\").build());\n+      droppedRecordCounter =\n+          logProcessorErrors.bind(\n+              builder.setLabel(\"errorType\", \"dropped record - queue full\").build());\n+    }\n+\n+    private static final BoundLongCounter exporterFailureCounter;\n+    private static final BoundLongCounter exporterBusyCounter;\n+    private static final BoundLongCounter droppedRecordCounter;\n+    private static final Logger logger = Logger.getLogger(Worker.class.getName());\n+\n+    private final Object monitor = new Object();\n+    private final int maxQueueSize;\n+    private final long scheduleDelayMillis;\n+    private final ArrayList<LogRecord> logRecords;\n+    private final int maxExportBatchSize;\n+    private final ExecutorService executor;\n+    private final Exporter exporter;\n+    private final Timer timer = new Timer(TIMER_THREAD_NAME, /* isDaemon= */ true);\n+    private final long exporterTimeout;\n+\n+    private Worker(\n+        int maxQueueSize,\n+        long scheduleDelayMillis,\n+        int maxExportBatchSize,\n+        long exporterTimeout,\n+        Exporter exporter) {\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+\n+      this.exporterTimeout = exporterTimeout;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.exporter = exporter;\n+      this.logRecords = new ArrayList<>(maxQueueSize);\n+      // We should be able to drain a full queue without dropping a batch\n+      int exportQueueSize = maxQueueSize / maxExportBatchSize;\n+      RejectedExecutionHandler h =\n+          new RejectedExecutionHandler() {\n+            @Override\n+            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+              exporterBusyCounter.add(1);\n+            }\n+          };\n+      this.executor =\n+          new ThreadPoolExecutor(\n+              1,\n+              1,\n+              0L,\n+              TimeUnit.MILLISECONDS,\n+              new LinkedBlockingQueue<Runnable>(exportQueueSize),\n+              h);\n+    }\n+\n+    @Override\n+    public void run() {\n+      ArrayList<LogRecord> logsCopy;\n+      while (!Thread.currentThread().isInterrupted()) {\n+        synchronized (monitor) {\n+          if (this.logRecords.size() < maxExportBatchSize) {\n+            do {\n+              try {\n+                monitor.wait(scheduleDelayMillis);\n+              } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                return;\n+              }\n+            } while (this.logRecords.isEmpty());\n+          }\n+          logsCopy = new ArrayList<>(this.logRecords);\n+          logRecords.clear();\n+        }\n+        exportBatches(logsCopy);\n+      }\n+    }\n+\n+    private void exportBatches(ArrayList<LogRecord> recordsToShip) {\n+      for (int i = 0; i < recordsToShip.size(); ) {\n+        int lastIndexToTake = Math.min(i + maxExportBatchSize, recordsToShip.size());\n+        onBatchExport(createLogDataForExport(recordsToShip, i, lastIndexToTake));\n+        i = lastIndexToTake;\n+      }\n+    }\n+\n+    private void onBatchExport(final List<LogRecord> logDataForExport) {\n+      final Future<CompletableResultCode> f =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a73bc497ba8c44a75d485080d9b056fbadc6a0"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzQ2NjkzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNzoyNlrOHQnhxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNzoyNlrOHQnhxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4Njg4NQ==", "bodyText": "To match trace and metrics this should be in data package.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r487186885", "createdAt": "2020-09-11T17:27:26Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/api/LogRecord.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging.api;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AnyValue;\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A LogRecord is an implementation of the <a\n+ * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/logs/data-model.md\">\n+ * OpenTelemetry logging model</a>.\n+ */\n+@AutoValue\n+public abstract class LogRecord {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b30efe0a9b3ea11effb4f29f0d95e82401a380"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzQ2ODI0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNzo1M1rOHQnipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNzo1M1rOHQnipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NzEwOQ==", "bodyText": "put this for the moment in the same data package as LogRecord", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r487187109", "createdAt": "2020-09-11T17:27:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/common/AnyValue.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b30efe0a9b3ea11effb4f29f0d95e82401a380"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzQ3MTU1OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyOTowMlrOHQnkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyOTowMlrOHQnkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NzY2MQ==", "bodyText": "Move this class to io.opentelemetry.logging.export", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r487187661", "createdAt": "2020-09-11T17:29:02Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b30efe0a9b3ea11effb4f29f0d95e82401a380"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzQ3NjY0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LogSinkSdkProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozMDozNFrOHQnn_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozMDozNFrOHQnn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4ODQ3OQ==", "bodyText": "This package should be io.opentelemetry.sdk.logging (and everywhere else)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r487188479", "createdAt": "2020-09-11T17:30:34Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/logging/LogSinkSdkProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.logging;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b30efe0a9b3ea11effb4f29f0d95e82401a380"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzQ4MzkwOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozMjo1MFrOHQnspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozMjo1MFrOHQnspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4OTY3MQ==", "bodyText": "This should be \"io.opentelemetry.sdk.extensions.logging\" and all the classes should be in this package or subpackages of this package", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r487189671", "createdAt": "2020-09-11T17:32:50Z", "author": {"login": "bogdandrutu"}, "path": "sdk_extensions/logging/support/build.gradle", "diffHunk": "@@ -0,0 +1,20 @@\n+plugins {\n+    id \"java\"\n+    id \"maven-publish\"\n+\n+    id \"ru.vyarus.animalsniffer\"\n+}\n+\n+description = 'OpenTelemetry Contrib Logging Support'\n+ext.moduleName = \"io.opentelemetry.extensions.logging.support\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b30efe0a9b3ea11effb4f29f0d95e82401a380"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkxMTMzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowOTo1OFrOHTc9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTowOTo1OFrOHTc9qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTUyOA==", "bodyText": "We're returning CompletableResultCode for shutdown / forceFlush now, can we update these?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490159528", "createdAt": "2020-09-17T11:09:58Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogProcessor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging;\n+\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+\n+public interface LogProcessor {\n+\n+  void addLogRecord(LogRecord record);\n+\n+  /**\n+   * Called when {@link TracerSdkProvider#shutdown()} is called.\n+   *\n+   * <p>Implementations must ensure that all span events are processed before returning.\n+   */\n+  void shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkxMzQ3OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMDozN1rOHTc-4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxNToyM1rOHTdH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              LogRecord.Builder buildRecord();\n          \n          \n            \n              LogRecord.Builder recordBuilder();\n          \n      \n    \n    \n  \n\nI'd expect build to return something that's already built", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490159840", "createdAt": "2020-09-17T11:10:37Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSink.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging;\n+\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+\n+/** A LogSink accepts logging records for transmission to an aggregator or log processing system. */\n+public interface LogSink {\n+  /**\n+   * Pass a record to the SDK for transmission to a logging exporter.\n+   *\n+   * @param record record to transmit\n+   */\n+  void offer(LogRecord record);\n+\n+  /**\n+   * Convenience method for creating a record to be transmitted.\n+   *\n+   * @return builder instance\n+   */\n+  LogRecord.Builder buildRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MjE2Ng==", "bodyText": "Though how about removing this and just adding .builder() to LogRecord? Unlike spans, we're not following the pattern of something like end on the log record offering to the sink, we call offer above. In that case, I don't see a reason to follow the pattern of returning a builder here - it's a bit surprising for a sink to create anything, it's supposed to be just a receiver of stuff.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490162166", "createdAt": "2020-09-17T11:15:23Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSink.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging;\n+\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+\n+/** A LogSink accepts logging records for transmission to an aggregator or log processing system. */\n+public interface LogSink {\n+  /**\n+   * Pass a record to the SDK for transmission to a logging exporter.\n+   *\n+   * @param record record to transmit\n+   */\n+  void offer(LogRecord record);\n+\n+  /**\n+   * Convenience method for creating a record to be transmitted.\n+   *\n+   * @return builder instance\n+   */\n+  LogRecord.Builder buildRecord();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTg0MA=="}, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkxNTM0OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSinkSdkProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMToxNFrOHTdAAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzowMjozMVrOHTs1Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MDEyOA==", "bodyText": "Ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490160128", "createdAt": "2020-09-17T11:11:14Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSinkSdkProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging;\n+\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LogSinkSdkProvider {\n+  private final LogSink logSink = new SdkLogSink();\n+  private final List<LogProcessor> processors = new ArrayList<>();\n+\n+  private LogSinkSdkProvider() {}\n+\n+  public LogSink get(String instrumentationName, String instrumentationVersion) {\n+    // Currently there is no differentiation by instrumentation library\n+    return logSink;\n+  }\n+\n+  public void addLogProcessor(LogProcessor processor) {\n+    processors.add(Utils.checkNotNull(processor, \"Processor can not be null\"));\n+  }\n+\n+  /** Flushes all attached processors. */\n+  public void forceFlush() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxOTUyNg==", "bodyText": "Ouf. I think this one was actually hiding a bug where I wouldn't have finished flushing before shutting down the exporter.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490419526", "createdAt": "2020-09-17T17:02:31Z", "author": {"login": "zenmoto"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/LogSinkSdkProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging;\n+\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LogSinkSdkProvider {\n+  private final LogSink logSink = new SdkLogSink();\n+  private final List<LogProcessor> processors = new ArrayList<>();\n+\n+  private LogSinkSdkProvider() {}\n+\n+  public LogSink get(String instrumentationName, String instrumentationVersion) {\n+    // Currently there is no differentiation by instrumentation library\n+    return logSink;\n+  }\n+\n+  public void addLogProcessor(LogProcessor processor) {\n+    processors.add(Utils.checkNotNull(processor, \"Processor can not be null\"));\n+  }\n+\n+  /** Flushes all attached processors. */\n+  public void forceFlush() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MDEyOA=="}, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkxODczOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/data/LogRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMjoxOVrOHTdCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMjoxOVrOHTdCEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MDY1OQ==", "bodyText": "We use set on our builder methods in general let's stick with that pattern", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490160659", "createdAt": "2020-09-17T11:12:19Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/data/LogRecord.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A LogRecord is an implementation of the <a\n+ * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/logs/data-model.md\">\n+ * OpenTelemetry logging model</a>.\n+ */\n+@AutoValue\n+public abstract class LogRecord {\n+  abstract long getTimeUnixNano();\n+\n+  abstract String getTraceId();\n+\n+  abstract String getSpanId();\n+\n+  abstract int getFlags();\n+\n+  abstract Severity getSeverity();\n+\n+  @Nullable\n+  abstract String getSeverityText();\n+\n+  @Nullable\n+  abstract String getName();\n+\n+  abstract AnyValue getBody();\n+\n+  abstract Map<String, AttributeValue> getAttributes();\n+\n+  public enum Severity {\n+    UNDEFINED_SEVERITY_NUMBER(0),\n+    TRACE(1),\n+    TRACE2(2),\n+    TRACE3(3),\n+    TRACE4(4),\n+    DEBUG(5),\n+    DEBUG2(6),\n+    DEBUG3(7),\n+    DEBUG4(8),\n+    INFO(9),\n+    INFO2(10),\n+    INFO3(11),\n+    INFO4(12),\n+    WARN(13),\n+    WARN2(14),\n+    WARN3(15),\n+    WARN4(16),\n+    ERROR(17),\n+    ERROR2(18),\n+    ERROR3(19),\n+    ERROR4(20),\n+    FATAL(21),\n+    FATAL2(22),\n+    FATAL3(23),\n+    FATAL4(24),\n+    ;\n+\n+    private final int severityNumber;\n+\n+    Severity(int severityNumber) {\n+      this.severityNumber = severityNumber;\n+    }\n+\n+    public int getSeverityNumber() {\n+      return severityNumber;\n+    }\n+  }\n+\n+  public static class Builder {\n+    private long timeUnixNano;\n+    private String traceId = \"\";\n+    private String spanId = \"\";\n+    private int flags;\n+    private Severity severity = Severity.UNDEFINED_SEVERITY_NUMBER;\n+    private String severityText;\n+    private String name;\n+    private AnyValue body = AnyValue.stringAnyValue(\"\");\n+    private final Map<String, AttributeValue> attributes = new HashMap<>();\n+\n+    public Builder withUnixTimeNano(long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjkyMTMzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/export/BatchLogProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMzowNVrOHTdDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToxMzowNVrOHTdDpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MTA2MA==", "bodyText": "We recently refactored BatchSpanProcessor. It'd be nice if we could update to follow the same pattern.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1524#discussion_r490161060", "createdAt": "2020-09-17T11:13:05Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/logging/support/src/main/java/io/opentelemetry/sdk/logging/export/BatchLogProcessor.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.logging.export;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.common.DaemonThreadFactory;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.sdk.logging.LogProcessor;\n+import io.opentelemetry.sdk.logging.data.LogRecord;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.logging.Logger;\n+\n+public class BatchLogProcessor implements LogProcessor {\n+  private static final String WORKER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_WorkerThread\";\n+  private static final String TIMER_THREAD_NAME =\n+      BatchLogProcessor.class.getSimpleName() + \"_TimerThread\";\n+\n+  private final Worker worker;\n+  private final Thread workerThread;\n+\n+  private BatchLogProcessor(\n+      int maxQueueSize,\n+      long scheduleDelayMillis,\n+      int maxExportBatchSize,\n+      long exporterTimeout,\n+      LogExporter logExporter) {\n+    this.worker =\n+        new Worker(\n+            maxQueueSize, scheduleDelayMillis, maxExportBatchSize, exporterTimeout, logExporter);\n+    this.workerThread = new DaemonThreadFactory(WORKER_THREAD_NAME).newThread(worker);\n+    this.workerThread.start();\n+  }\n+\n+  public static Builder builder(LogExporter logExporter) {\n+    return new Builder(logExporter);\n+  }\n+\n+  @Override\n+  public void addLogRecord(LogRecord record) {\n+    worker.addLogRecord(record);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    workerThread.interrupt();\n+    worker.shutdown();\n+  }\n+\n+  @Override\n+  public void forceFlush() {\n+    worker.forceFlush();\n+  }\n+\n+  private static class Worker implements Runnable {\n+    static {\n+      Meter meter = OpenTelemetry.getMeter(\"io.opentelemetry.sdk.logging\");\n+      LongCounter logProcessorErrors =\n+          meter\n+              .longCounterBuilder(\"logProcessorErrors\")\n+              .setUnit(\"1\")\n+              .setDescription(\"Number of errors encountered while processing logs\")\n+              .build();\n+      Labels.Builder builder =\n+          Labels.of(\"logProcessorType\", BatchLogProcessor.class.getName()).toBuilder();\n+      exporterFailureCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter failure\").build());\n+      exporterBusyCounter =\n+          logProcessorErrors.bind(builder.setLabel(\"errorType\", \"exporter busy\").build());\n+      droppedRecordCounter =\n+          logProcessorErrors.bind(\n+              builder.setLabel(\"errorType\", \"dropped record - queue full\").build());\n+    }\n+\n+    private static final BoundLongCounter exporterFailureCounter;\n+    private static final BoundLongCounter exporterBusyCounter;\n+    private static final BoundLongCounter droppedRecordCounter;\n+    private static final Logger logger = Logger.getLogger(Worker.class.getName());\n+\n+    private final Object monitor = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d652fcb2846cbc7c885fc92482d049e520aa397"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1328, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}