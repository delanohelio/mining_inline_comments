{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDI4NjY4", "number": 1459, "title": "Update database attributes", "bodyText": "Fix #1456", "createdAt": "2020-07-24T01:24:04Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459", "merged": true, "mergeCommit": {"oid": "8525405239173cb8cb6eb4e72cc421b37a8ab2fb"}, "closed": true, "closedAt": "2020-07-24T20:33:54Z", "author": {"login": "heyams"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc35oUugH2gAyNDU2MDI4NjY4OjY3N2FlZGZiYjVjN2U4NzE5YzEwYjk3NmU3ZWJhZDUwOTc5NDcwYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4IXozAH2gAyNDU2MDI4NjY4OjJhOTVlNDEyNmM4OWIxNzcwM2EzNWIwNzg3NjU1Mjk1ZmFiNGQ4Y2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/677aedfbb5c7e8719c10b976e7ebad50979470b4", "committedDate": "2020-07-24T01:20:33Z", "message": "Add new database attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTk4ODkw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#pullrequestreview-454598890", "createdAt": "2020-07-24T01:57:16Z", "commit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjU0NDQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#pullrequestreview-454654440", "createdAt": "2020-07-24T06:17:39Z", "commit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxNzozOVrOG2kPjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyMDoxMVrOG2kSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDA5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n          \n          \n            \n              An identifier for the database management system (DBMS) product being used.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870092", "createdAt": "2020-07-24T06:17:39Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg==", "bodyText": "db.url was removed from the semantic conventions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870742", "createdAt": "2020-07-24T06:20:11Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjU1Nzcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#pullrequestreview-454655770", "createdAt": "2020-07-24T06:22:06Z", "commit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyMjowNlrOG2kUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOTo1NlrOG2kcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTI3Mw==", "bodyText": "I think this comment is out of date, the list of identifiers has e.g., mysql, postgresql now. How about linking to the list?\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md#notes-and-well-known-identifiers-for-dbsystem", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871273", "createdAt": "2020-07-24T06:22:06Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance.\n          \n          \n            \n               */\n          \n          \n            \n               * For db.system == mssql, the instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance. When set, {@link #NET_PEER_PORT} is not required\n          \n          \n            \n               * but recommended when connecting to a non-standard port.\n          \n          \n            \n               */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871826", "createdAt": "2020-07-24T06:24:15Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n          \n          \n            \n              public static final StringAttributeSetter MSSQL_INSTANCE_NAME =\n          \n      \n    \n    \n  \n\nIf this was a setter of all the attributes for MSSQL, this name would make sense but it's referring to a specific key.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871940", "createdAt": "2020-07-24T06:24:44Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n          \n          \n            \n               * For JDBC clients, the fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872127", "createdAt": "2020-07-24T06:25:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter JDBC_CLIENTS =\n          \n          \n            \n              public static final StringAttributeSetter JDBC_DRIVER_CLASSNAME =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872178", "createdAt": "2020-07-24T06:25:35Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.\n          \n          \n            \n               * For db.system == cassandra, the name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872482", "createdAt": "2020-07-24T06:26:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjUyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter CASSANDRA =\n          \n          \n            \n              public static final StringAttributeSetter CASSANDRA_NAMESPACE =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872524", "createdAt": "2020-07-24T06:26:54Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjYzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n          \n          \n            \n               * For db.system == hbase, the HBase namespace being accessed. To be used", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872631", "createdAt": "2020-07-24T06:27:18Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter HBASE =\n          \n          \n            \n              public static final StringAttributeSetter HBASE_NAMESPACE =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872673", "createdAt": "2020-07-24T06:27:27Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3Mjk2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The index of the database being accessed as\n          \n          \n            \n               * For db.system == redis, the index of the database being accessed as", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872968", "createdAt": "2020-07-24T06:28:34Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzA1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter REDIS =\n          \n          \n            \n              public static final StringAttributeSetter REDIS_DATABASE_INDEX =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873054", "createdAt": "2020-07-24T06:28:54Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The collection being accessed within the\n          \n          \n            \n               * For db.system == monbodb, the collection being accessed within the", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873199", "createdAt": "2020-07-24T06:29:27Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MONGODB =\n          \n          \n            \n              public static final StringAttributeSetter MONGODB_COLLECTION =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873360", "createdAt": "2020-07-24T06:29:56Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the\n+   * database stated in db.name\n+   */\n+  public static final StringAttributeSetter MONGODB =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDM2MzIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#pullrequestreview-455036320", "createdAt": "2020-07-24T16:46:47Z", "commit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecef6fc421e4f01e7b688f3723ae02c64f4fbe3b", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ecef6fc421e4f01e7b688f3723ae02c64f4fbe3b", "committedDate": "2020-07-24T16:51:15Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31a34ad48ac019f2bc28dd654d3f863e6694838", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d31a34ad48ac019f2bc28dd654d3f863e6694838", "committedDate": "2020-07-24T17:01:54Z", "message": "Update javadoc and rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe24112147e8dcd5bc6ad8a1ac6a7e502dae753f", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe24112147e8dcd5bc6ad8a1ac6a7e502dae753f", "committedDate": "2020-07-24T17:03:48Z", "message": "Update javadoc for Cassandra.\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d956c32273929f314468715fe74d1cc8f723cf86", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d956c32273929f314468715fe74d1cc8f723cf86", "committedDate": "2020-07-24T17:04:18Z", "message": "Rename Cassandra constant.\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df8b81a8b3f211b4708f6928ff744988ab475bf0", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/df8b81a8b3f211b4708f6928ff744988ab475bf0", "committedDate": "2020-07-24T17:07:12Z", "message": "Apply GoogleJavaFormat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b891e854a521f46f88ff560cd3c95635f3414353", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b891e854a521f46f88ff560cd3c95635f3414353", "committedDate": "2020-07-24T18:02:21Z", "message": "Fix javadoc exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a95e4126c89b17703a35b0787655295fab4d8cd", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a95e4126c89b17703a35b0787655295fab4d8cd", "committedDate": "2020-07-24T18:30:54Z", "message": "Delete db.url"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2634, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}