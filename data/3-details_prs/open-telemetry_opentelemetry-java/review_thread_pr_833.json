{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjEwOTI4", "number": 833, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxNjo1MVrODd8TwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxOTowMVrODd8WTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzIzMzkyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxNjo1MVrOFm1Myg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1ODo1MlrOFnB0pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MTgzNA==", "bodyText": "I would prefer to have this.current for readability.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                current.getAndAdd(other.current.get());\n          \n          \n            \n                this.current.getAndAdd(other.current.get());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376261834", "createdAt": "2020-02-07T08:16:51Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator.DoubleAggregator<DoubleSumAggregator> {\n+final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n   // TODO: Change to use DoubleAdder when changed to java8.\n-  private final AtomicDouble value;\n+  private final AtomicDouble current;\n \n   DoubleSumAggregator() {\n-    this.value = new AtomicDouble();\n+    this.current = new AtomicDouble(0.0);\n   }\n \n   @Override\n   public void merge(DoubleSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2ODY0Ng==", "bodyText": "done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376468646", "createdAt": "2020-02-07T15:58:52Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator.DoubleAggregator<DoubleSumAggregator> {\n+final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n   // TODO: Change to use DoubleAdder when changed to java8.\n-  private final AtomicDouble value;\n+  private final AtomicDouble current;\n \n   DoubleSumAggregator() {\n-    this.value = new AtomicDouble();\n+    this.current = new AtomicDouble(0.0);\n   }\n \n   @Override\n   public void merge(DoubleSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MTgzNA=="}, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzIzNTE0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongSumAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxNzoyM1rOFm1NeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1ODo1OVrOFnB07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MjAwOQ==", "bodyText": "The same comment applies here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376262009", "createdAt": "2020-02-07T08:17:23Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import java.util.concurrent.atomic.AtomicLong;\n \n-final class LongSumAggregator implements Aggregator.LongAggregator<LongSumAggregator> {\n+final class LongSumAggregator implements Aggregator<LongSumAggregator> {\n   // TODO: Change to use LongAdder when changed to java8.\n-  private final AtomicLong value;\n+  private final AtomicLong current;\n \n   LongSumAggregator() {\n-    this.value = new AtomicLong();\n+    this.current = new AtomicLong(0L);\n   }\n \n   @Override\n   public void merge(LongSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2ODcxNw==", "bodyText": "done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376468717", "createdAt": "2020-02-07T15:58:59Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import java.util.concurrent.atomic.AtomicLong;\n \n-final class LongSumAggregator implements Aggregator.LongAggregator<LongSumAggregator> {\n+final class LongSumAggregator implements Aggregator<LongSumAggregator> {\n   // TODO: Change to use LongAdder when changed to java8.\n-  private final AtomicLong value;\n+  private final AtomicLong current;\n \n   LongSumAggregator() {\n-    this.value = new AtomicLong();\n+    this.current = new AtomicLong(0L);\n   }\n \n   @Override\n   public void merge(LongSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MjAwOQ=="}, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzI0MDQ2OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODoxOTowMVrOFm1QZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowMDozMVrOFnB4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mjc1OA==", "bodyText": "Could you please also add a test class for DoubleSumAggregator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376262758", "createdAt": "2020-02-07T08:19:01Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "diffHunk": "@@ -26,6 +26,6 @@\n   @Test\n   public void longSumAggregation() {\n     LongSumAggregator longSumAggregator = new LongSumAggregator();\n-    longSumAggregator.update(12);\n+    longSumAggregator.recordLong(12);\n   }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2OTUzNQ==", "bodyText": "Added, so far this is a trivial test until I defined the entire Aggregation class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376469535", "createdAt": "2020-02-07T16:00:31Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "diffHunk": "@@ -26,6 +26,6 @@\n   @Test\n   public void longSumAggregation() {\n     LongSumAggregator longSumAggregator = new LongSumAggregator();\n-    longSumAggregator.update(12);\n+    longSumAggregator.recordLong(12);\n   }\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mjc1OA=="}, "originalCommit": {"oid": "bbb300fd84a1b988604c0753437a291926ddba8f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}