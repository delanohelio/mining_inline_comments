{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTU3ODky", "number": 1740, "title": "Simple throughput tester tool, with toxiproxy to make things difficult.", "bodyText": "This is a very very simple little stress-testing setup that I'm starting to play around with. It's the first step on the way to doing something useful around #1438 .\nCurrently, it sends spans to the collector and outputs metrics on the console, in order to be able to see how many spans are being dropped when things get difficult.\nIt uses toxiproxy in docker-compose to sit in between the SDK and the collector, to enable making life hard for the either the collector, or the SDK or both.\nThe load it is currently generating is single-threaded, almost certainly biased in every bad way possible.", "createdAt": "2020-10-02T22:15:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740", "merged": true, "mergeCommit": {"oid": "b1d2c8ef0fb1236b41bb6b78347c2bea6383018c"}, "closed": true, "closedAt": "2020-10-08T18:45:44Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPdcHDgFqTUwMTc0MDk1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQjAcRgH2gAyNDk3MTU3ODkyOjU2ZTlhMmRmMjBkOTQ2YmJjYTdiNTMxMzUzOGFmYWE0NzRiYjg0MWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzQwOTU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#pullrequestreview-501740957", "createdAt": "2020-10-05T06:04:02Z", "commit": {"oid": "fee6596442335fdf91bbc90c7efa8488b5af4929"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjowNDowMlrOHcOk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjowNDowMlrOHcOk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2MTAxOA==", "bodyText": "Maybe start using setup described in open-telemetry/opentelemetry-specification#748 ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r499361018", "createdAt": "2020-10-05T06:04:02Z", "author": {"login": "iNikem"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+class OtlpPipelineDriver {\n+\n+  public static final String COLLECTOR_PROXY_PORT = \"44444\";\n+\n+  public static void main(String[] args) throws InterruptedException, IOException {\n+    ToxiproxyClient toxiproxyClient = new ToxiproxyClient();\n+    toxiproxyClient.reset();\n+    Proxy collectorProxy = toxiproxyClient.getProxyOrNull(\"collector\");\n+\n+    if (collectorProxy == null) {\n+      collectorProxy =\n+          toxiproxyClient.createProxy(\n+              \"collector\", \"0.0.0.0:\" + COLLECTOR_PROXY_PORT, \"otel-collector:55680\");\n+    }\n+    collectorProxy.enable();\n+\n+    ToxicList toxics = collectorProxy.toxics();\n+    Latency latency = toxics.latency(\"jittery_latency\", ToxicDirection.DOWNSTREAM, 800);\n+    latency.setJitter(10);\n+\n+    for (Toxic toxic : toxiproxyClient.getProxy(\"collector\").toxics().getAll()) {\n+      System.out.println(\"toxic = \" + toxic.getName() + \" : \" + toxic.getToxicity());\n+    }\n+\n+    IntervalMetricReader intervalMetricReader = setupSdk();\n+\n+    Tracer tracer = OpenTelemetry.getTracer(\"io.opentelemetry.perf\");\n+\n+    for (int i = 0; i < 10000; i++) {\n+      Span exampleSpan = tracer.spanBuilder(\"exampleSpan\").startSpan();\n+      try (Scope scope = tracer.withSpan(exampleSpan)) {\n+        exampleSpan.setAttribute(\"good\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee6596442335fdf91bbc90c7efa8488b5af4929"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f141bcf27218e83225ba06296150dd18d1e78a02", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f141bcf27218e83225ba06296150dd18d1e78a02", "committedDate": "2020-10-05T19:41:37Z", "message": "Simple throughput tester tool, with toxiproxy to make things difficult."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46f7c1f6b7ae1f02d4e7ea4ea2c59b0f5c5fe76", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a46f7c1f6b7ae1f02d4e7ea4ea2c59b0f5c5fe76", "committedDate": "2020-10-05T19:41:37Z", "message": "fix build issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5446add76216d269f7395a19c944721776d3d1fc", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5446add76216d269f7395a19c944721776d3d1fc", "committedDate": "2020-10-05T19:41:37Z", "message": "add some silly javadoc to make checkstyle happy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fee6596442335fdf91bbc90c7efa8488b5af4929", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fee6596442335fdf91bbc90c7efa8488b5af4929", "committedDate": "2020-10-02T22:29:18Z", "message": "fix build issues"}, "afterCommit": {"oid": "5446add76216d269f7395a19c944721776d3d1fc", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5446add76216d269f7395a19c944721776d3d1fc", "committedDate": "2020-10-05T19:41:37Z", "message": "add some silly javadoc to make checkstyle happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3e647c090b8e3419725e8e2c147ad6d091e1247", "committedDate": "2020-10-06T17:13:59Z", "message": "Add multi-threaded span creation, warmup cycle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDAyNTMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#pullrequestreview-504402531", "createdAt": "2020-10-08T03:21:46Z", "commit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyMTo0N1rOHeMmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoyNjozN1rOHeMqgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTY2OA==", "bodyText": "Should we delete this file? It seems copied for a demo that doesn't relate to our config at all", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501425668", "createdAt": "2020-10-08T03:21:47Z", "author": {"login": "anuraaga"}, "path": "perf_harness/docker/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# OpenTelemetry Collector Demo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNTcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            # Alternatively, use jaeger_thrift_http with the settings below. In this case\n          \n          \n            \n            # update the list of exporters on the traces pipeline.\n          \n          \n            \n            #\n          \n          \n            \n            #  jaeger_thrift_http:\n          \n          \n            \n            #    url: http://jaeger-all-in-one:14268/api/traces", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501425725", "createdAt": "2020-10-08T03:22:02Z", "author": {"login": "anuraaga"}, "path": "perf_harness/docker/otel-collector-config-perf.yaml", "diffHunk": "@@ -0,0 +1,36 @@\n+receivers:\n+  otlp:\n+    protocols:\n+        grpc:\n+\n+exporters:\n+  logging:\n+\n+# Alternatively, use jaeger_thrift_http with the settings below. In this case\n+# update the list of exporters on the traces pipeline.\n+#\n+#  jaeger_thrift_http:\n+#    url: http://jaeger-all-in-one:14268/api/traces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyNjgxOQ==", "bodyText": "As a followup, testcontainers would make it easier to run the benchmark than docker-compose", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1740#discussion_r501426819", "createdAt": "2020-10-08T03:26:37Z", "author": {"login": "anuraaga"}, "path": "perf_harness/src/main/java/io/opentelemetry/perf/OtlpPipelineDriver.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.perf;\n+\n+import eu.rekawek.toxiproxy.Proxy;\n+import eu.rekawek.toxiproxy.ToxiproxyClient;\n+import eu.rekawek.toxiproxy.model.Toxic;\n+import eu.rekawek.toxiproxy.model.ToxicDirection;\n+import eu.rekawek.toxiproxy.model.ToxicList;\n+import eu.rekawek.toxiproxy.model.toxic.Latency;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A testing tool. */\n+public class OtlpPipelineDriver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e647c090b8e3419725e8e2c147ad6d091e1247"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af1aed4d6d421671d22f1ec048cdbbc3ac0fa6ef", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af1aed4d6d421671d22f1ec048cdbbc3ac0fa6ef", "committedDate": "2020-10-08T15:04:37Z", "message": "Update perf_harness/docker/otel-collector-config-perf.yaml\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8910fa114878a1488bdc398ef4ccb2627addc5f6", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8910fa114878a1488bdc398ef4ccb2627addc5f6", "committedDate": "2020-10-08T15:06:57Z", "message": "remove 2 un-needed files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e9a2df20d946bbca7b5313538afaa474bb841e", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/56e9a2df20d946bbca7b5313538afaa474bb841e", "committedDate": "2020-10-08T15:07:11Z", "message": "Merge remote-tracking branch 'origin/perf_testing' into perf_testing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}