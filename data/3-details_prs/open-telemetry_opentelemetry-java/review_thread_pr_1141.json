{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODc1Mjcw", "number": 1141, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDowNzowN1rOD2LOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDowNzowN1rOD2LOug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTMzNjkwOnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDowNzowN1rOGL5x5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNzoyMzoyN1rOGMHb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!span.getStatus().isOk() && !span.getAttributes().containsKey(KEY_ERROR)) {\n          \n          \n            \n                if (!span.getStatus().isOk()) {\n          \n      \n    \n    \n  \n\nI think it may be more important that the jaeger error tag always maps to span status, than preserve an attribute named error that the user may set on the span.\nUnfortunately, we don't have a spec to resolve this kind of thing yet (see open-telemetry/opentelemetry-specification#414), but that issue does reference the python implementation, and I think this is how they've implemented it (+/- my python reading skill).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1141#discussion_r415134182", "createdAt": "2020-04-25T20:07:07Z", "author": {"login": "trask"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -111,6 +112,10 @@ private Adapter() {}\n             .setVType(Model.ValueType.INT64)\n             .build());\n \n+    if (!span.getStatus().isOk() && !span.getAttributes().containsKey(KEY_ERROR)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfd47f8db800cb05a88b4e9d9d0a7069afcffda7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE1OTExNQ==", "bodyText": "You are correct @trask, we don't want to add new semantic conventions for Jaeger only.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1141#discussion_r415159115", "createdAt": "2020-04-25T22:37:09Z", "author": {"login": "bogdandrutu"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -111,6 +112,10 @@ private Adapter() {}\n             .setVType(Model.ValueType.INT64)\n             .build());\n \n+    if (!span.getStatus().isOk() && !span.getAttributes().containsKey(KEY_ERROR)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDE4Mg=="}, "originalCommit": {"oid": "dfd47f8db800cb05a88b4e9d9d0a7069afcffda7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyMjMzMw==", "bodyText": "The logic there should be based on the span status as per the suggested change. The additional check was just because it is possible to add duplicate Model.KeyValue entries as it is a List, unlike the attributes Map that it is built from. I'll accept your suggested changes as the Otel Collector and Jaeger appear to accept this behaviour without failure. Thanks for that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1141#discussion_r415222333", "createdAt": "2020-04-26T05:37:00Z", "author": {"login": "sleighzy"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -111,6 +112,10 @@ private Adapter() {}\n             .setVType(Model.ValueType.INT64)\n             .build());\n \n+    if (!span.getStatus().isOk() && !span.getAttributes().containsKey(KEY_ERROR)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDE4Mg=="}, "originalCommit": {"oid": "dfd47f8db800cb05a88b4e9d9d0a7069afcffda7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM1NzkzNQ==", "bodyText": "Btw, thanks @sleighzy for all of the auto-instrumentation related testing you've been doing!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1141#discussion_r415357935", "createdAt": "2020-04-26T17:23:27Z", "author": {"login": "trask"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -111,6 +112,10 @@ private Adapter() {}\n             .setVType(Model.ValueType.INT64)\n             .build());\n \n+    if (!span.getStatus().isOk() && !span.getAttributes().containsKey(KEY_ERROR)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDE4Mg=="}, "originalCommit": {"oid": "dfd47f8db800cb05a88b4e9d9d0a7069afcffda7"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 874, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}