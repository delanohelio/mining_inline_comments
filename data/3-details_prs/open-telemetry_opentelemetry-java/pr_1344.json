{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDk2NjQx", "number": 1344, "title": "Log4j2 extensions", "bodyText": "A small library that allows for adding request correlation information to Log4j 2.x. The two extensions are a context data provider that makes the correlation information available to layout components, and a layout that attempts to follow the Log Data Model, though the JSON representation of that model probably needs to be more strictly defined.", "createdAt": "2020-06-17T21:07:40Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344", "merged": true, "mergeCommit": {"oid": "f28396b812046bb69daf9899d777e140ff8de0e9"}, "closed": true, "closedAt": "2020-07-01T17:27:50Z", "author": {"login": "zenmoto"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsRFuDgFqTQzMjgwMzU5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuIqJ6gFqTQzNTk4NzU5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODAzNTkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#pullrequestreview-432803591", "createdAt": "2020-06-17T21:53:17Z", "commit": {"oid": "8368f1e0eb4569a4a3f66a9249956574c723250a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MzoxN1rOGlYtVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1MzoxN1rOGlYtVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NTMxOQ==", "bodyText": "This is fixed in master", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r441855319", "createdAt": "2020-06-17T21:53:17Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/propagation/HttpTraceContextTest.java", "diffHunk": "@@ -58,7 +58,7 @@\n   private static final String TRACEPARENT_HEADER_NOT_SAMPLED =\n       \"00-\" + TRACE_ID_BASE16 + \"-\" + SPAN_ID_BASE16 + \"-00\";\n   private static final Setter<Map<String, String>> setter = Map::put;\n-  private static final Getter<Map<String, String>> getter = (carrier, key) -> carrier.get(key);\n+  private static final Getter<Map<String, String>> getter = Map::get;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8368f1e0eb4569a4a3f66a9249956574c723250a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a62b5f065ab6d85eab9e43817ed7a2e4508215", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68a62b5f065ab6d85eab9e43817ed7a2e4508215", "committedDate": "2020-06-18T17:34:06Z", "message": "Initial commit of ContextDataProvider for Log4j 2.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdf409966d6b0a6b0cfe4b76f90ff646af9a22e", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2bdf409966d6b0a6b0cfe4b76f90ff646af9a22e", "committedDate": "2020-06-18T17:34:06Z", "message": "add initial OpenTelemetryJsonLayout implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b7d56cfbf06b940fa5fa753a730874dd2cf883", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d5b7d56cfbf06b940fa5fa753a730874dd2cf883", "committedDate": "2020-06-18T17:34:07Z", "message": "move and reformat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a87622225e1b75080070f824a727a516573acb3b", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a87622225e1b75080070f824a727a516573acb3b", "committedDate": "2020-06-18T17:34:08Z", "message": "add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9deff0fcfed8d43867fc14c6bbacc72b931b85bb", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9deff0fcfed8d43867fc14c6bbacc72b931b85bb", "committedDate": "2020-06-18T17:34:09Z", "message": "update formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7381ea886adf0b30f3df1522a145f7063a3278e1", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7381ea886adf0b30f3df1522a145f7063a3278e1", "committedDate": "2020-06-18T17:34:10Z", "message": "fixes for errorprone warnings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88c12ada2e1e31a1ba086be60645516dd14e11ae", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/88c12ada2e1e31a1ba086be60645516dd14e11ae", "committedDate": "2020-06-18T16:42:43Z", "message": "Merge remote-tracking branch 'origin/master' into log4j_2x_extensions"}, "afterCommit": {"oid": "7381ea886adf0b30f3df1522a145f7063a3278e1", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7381ea886adf0b30f3df1522a145f7063a3278e1", "committedDate": "2020-06-18T17:34:10Z", "message": "fixes for errorprone warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33d8a9240a088e120009d8f17c77dd60464d47c2", "committedDate": "2020-06-18T18:22:31Z", "message": "Merge branch 'master' into log4j_2x_extensions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTQxNTc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#pullrequestreview-433541575", "createdAt": "2020-06-18T18:27:29Z", "commit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoyNzoyOVrOGl7PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNTo1NVrOGl7hBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMTE3Mg==", "bodyText": "new line here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442421172", "createdAt": "2020-06-18T18:27:29Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/test/resources/ContextDataProviderTestConfig.xml", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020, OpenTelemetry Authors\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<Configuration status=\"WARN\" >\n+  <Appenders>\n+    <List name=\"SyncList\">\n+      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} traceid='%X{traceid}' spanid='%X{spanid}' traceflags='%X{traceflags}' - %msg%n\"/>\n+    </List>\n+    <List name=\"AsyncList\">\n+      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} traceid='%X{traceid}' spanid='%X{spanid}' traceflags='%X{traceflags}' - %msg%n\"/>\n+    </List>\n+    <List name=\"JsonList\">\n+      <JsonLayout complete=\"false\" compact=\"true\">\n+        <KeyValuePair key=\"traceid\" value=\"$${ctx:traceid}\"/>\n+        <KeyValuePair key=\"spanid\" value=\"$${ctx:spanid}\"/>\n+        <KeyValuePair key=\"traceflags\" value=\"$${ctx:traceflags}\"/>\n+      </JsonLayout>\n+    </List>\n+  </Appenders>\n+  <Loggers>\n+    <Root level=\"debug\">\n+      <AppenderRef ref=\"SyncList\"/>\n+    </Root>\n+    <AsyncLogger name=\"AsyncContextDataProviderTest\" level=\"debug\">\n+      <AppenderRef ref=\"AsyncList\"/>\n+    </AsyncLogger>\n+    <Logger name=\"JsonContextDataProviderTest\" level=\"debug\">\n+      <AppenderRef ref=\"JsonList\"/>\n+    </Logger>\n+  </Loggers>\n+</Configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjIyMQ==", "bodyText": "I think you can use TracingContextUtils.getCurrentSpan()\nOtherwise please make the tracer static member.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442422221", "createdAt": "2020-06-18T18:29:29Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Mw==", "bodyText": "the \"isRecording\" should be a property of the TraceContextDataProvider to record for non recording spans as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442422793", "createdAt": "2020-06-18T18:30:32Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");\n+    Span span = tracer.getCurrentSpan();\n+    Map<String, String> map = new HashMap<>();\n+    if (span != null && span.isRecording()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzY3MQ==", "bodyText": "Can this PR be split between OpenTelemetryJsonLayout and TraceContextDataProvider?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442423671", "createdAt": "2020-06-18T18:32:15Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.time.Instant;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+import org.apache.logging.log4j.spi.StandardLevel;\n+import org.apache.logging.log4j.util.ReadOnlyStringMap;\n+import org.apache.logging.log4j.util.Strings;\n+\n+/**\n+ * This class implements a JSON layout for Log4j 2.x that will include request correlation\n+ * information in the form of traceid, spanid, and traceflags fields. The format is provisional, but\n+ * is designed to mirror the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">Log\n+ * Data Model</a>\n+ */\n+@Plugin(name = \"OpenTelemetryJsonLayout\", category = \"Core\", elementType = \"layout\")\n+public class OpenTelemetryJsonLayout extends AbstractStringLayout {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzk4Mw==", "bodyText": "Probably you should cache the value of event.getContextData()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442423983", "createdAt": "2020-06-18T18:32:50Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayout.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.time.Instant;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+import org.apache.logging.log4j.spi.StandardLevel;\n+import org.apache.logging.log4j.util.ReadOnlyStringMap;\n+import org.apache.logging.log4j.util.Strings;\n+\n+/**\n+ * This class implements a JSON layout for Log4j 2.x that will include request correlation\n+ * information in the form of traceid, spanid, and traceflags fields. The format is provisional, but\n+ * is designed to mirror the <a\n+ * href=\"https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md\">Log\n+ * Data Model</a>\n+ */\n+@Plugin(name = \"OpenTelemetryJsonLayout\", category = \"Core\", elementType = \"layout\")\n+public class OpenTelemetryJsonLayout extends AbstractStringLayout {\n+  JsonFactory factory = new JsonFactory();\n+\n+  protected OpenTelemetryJsonLayout() {\n+    super(StandardCharsets.UTF_8);\n+  }\n+\n+  @Override\n+  public String toSerializable(LogEvent event) {\n+    StringBuilderWriter writer = new StringBuilderWriter();\n+    try {\n+      JsonGenerator generator = factory.createGenerator(writer);\n+      generator.writeStartObject();\n+      writeTimestamp(generator, event.getInstant());\n+\n+      generator.writeFieldName(\"name\");\n+      generator.writeString(event.getLoggerName());\n+\n+      generator.writeFieldName(\"body\");\n+      generator.writeString(event.getMessage().getFormattedMessage());\n+\n+      generator.writeFieldName(\"severitytext\");\n+      generator.writeString(event.getLevel().name());\n+\n+      generator.writeFieldName(\"severitynumber\");\n+      generator.writeNumber(decodeSeverity(event.getLevel()));\n+\n+      if (event.getContextData().containsKey(\"traceid\")) {\n+        writeRequestCorrelation(generator, event.getContextData());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNTYwNg==", "bodyText": "Please investigate if possible to not call toLowerBase16 on the critical path. Save the current SpanContext in the map and format the strings when exporting:\n\nRemove unnecessary formatting and allocations from the critical path\nRemove unnecessary formatting and allocations if log is dropped in the export pipeline.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442425606", "createdAt": "2020-06-18T18:35:55Z", "author": {"login": "bogdandrutu"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjAwOTU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#pullrequestreview-433600954", "createdAt": "2020-06-18T19:53:50Z", "commit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1Mzo1MFrOGl-D3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1Mzo1MFrOGl-D3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NzI5Mg==", "bodyText": "It's odd to get a handle to a tracer like this without intending to actually do any tracing. If we do end up with a tracer, I agree with @bogdandrutu that it should be a static member of this class. Also, the name of it should match the standard of using the package name where it is used, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442467292", "createdAt": "2020-06-18T19:53:50Z", "author": {"login": "jkwatson"}, "path": "extensions/logging/log4j2_extensions/src/main/java/io/opentelemetry/contrib/logging/log4j2/TraceContextDataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+/**\n+ * This ContextDataProvider is loaded via the ServiceProvider facility. {@link #supplyContextData()}\n+ * is called when a log entry is created.\n+ */\n+public class TraceContextDataProvider implements ContextDataProvider {\n+  /**\n+   * This method is called on the creation of a log event, and is called in the same thread as the\n+   * call to the logger. This allows us to pull out request correlation information and make it\n+   * available to a layout, even if the logger is using an {@link\n+   * org.apache.logging.log4j.core.appender.AsyncAppender}\n+   *\n+   * @return A map containing string versions of the traceid, spanid, and traceflags which can then\n+   *     be accessed from layout components\n+   * @see OpenTelemetryJsonLayout\n+   */\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"ot_prototype_logging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjAyMjky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#pullrequestreview-433602292", "createdAt": "2020-06-18T19:55:51Z", "commit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1MVrOGl-INQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTo1NTo1MVrOGl-INQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQwNQ==", "bodyText": "We prefer using the truth library for assertions, rather than using assertEquals.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#discussion_r442468405", "createdAt": "2020-06-18T19:55:51Z", "author": {"login": "jkwatson"}, "path": "extensions/logging/log4j2_extensions/src/test/java/io/opentelemetry/contrib/logging/log4j2/OpenTelemetryJsonLayoutTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.logging.log4j2;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.gson.Gson;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.junit.LoggerContextRule;\n+import org.apache.logging.log4j.test.appender.ListAppender;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class OpenTelemetryJsonLayoutTest {\n+  @Rule public LoggerContextRule init = new LoggerContextRule(\"OpenTelemetryJsonLayoutConfig.xml\");\n+  private final Gson gson = new Gson();\n+\n+  @Test\n+  public void testOpenTelemetryJsonLayoutDefaults() {\n+    Logger logger = init.getLogger(\"DefaultJsonLogger\");\n+    ListAppender appender = init.getListAppender(\"Defaults\");\n+    double logTime = System.currentTimeMillis();\n+\n+    // First log outside a span\n+    logger.warn(\"test\");\n+\n+    // Now with an open span\n+    Tracer tracer = OpenTelemetry.getTracer(\"JsonLayoutTest\");\n+    Span span = tracer.spanBuilder(\"a_span\").startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      logger.error(\"test 2\");\n+    }\n+\n+    List<String> messages = appender.getMessages();\n+    String first = messages.get(0);\n+    Map<?, ?> data = gson.fromJson(first, Map.class);\n+    assertEquals(\"test\", data.get(\"body\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d8a9240a088e120009d8f17c77dd60464d47c2"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c2e208deb6c20116a3f135bc9d7c49f6b879ac", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3c2e208deb6c20116a3f135bc9d7c49f6b879ac", "committedDate": "2020-06-22T15:51:06Z", "message": "integrate feedback for TraceContextDataProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e53fcbe8b89766e0cf96ffefcd745764573335", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e9e53fcbe8b89766e0cf96ffefcd745764573335", "committedDate": "2020-06-22T15:52:08Z", "message": "integrate feedback for OpenTelemetryJsonLayout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbef96ac19d88d065f5357e29c7a07009e3ba310", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fbef96ac19d88d065f5357e29c7a07009e3ba310", "committedDate": "2020-06-22T15:53:50Z", "message": "test reformat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8481acd560d94f4887f9fb5f8dac50fa472d687", "author": {"user": {"login": "zenmoto", "name": "David Poncelow"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8481acd560d94f4887f9fb5f8dac50fa472d687", "committedDate": "2020-06-23T14:00:38Z", "message": "check span validity rather than isRecording"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTg3NTk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1344#pullrequestreview-435987594", "createdAt": "2020-06-23T17:11:53Z", "commit": {"oid": "f8481acd560d94f4887f9fb5f8dac50fa472d687"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2474, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}