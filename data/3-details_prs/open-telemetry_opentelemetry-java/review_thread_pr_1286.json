{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Nzk5ODUy", "number": 1286, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMToyOTo1NFrOEAujjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMToyOTo1NFrOEAujjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTk4MjIwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMToyOTo1NFrOGcL-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozOTowMFrOGch98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg==", "bodyText": "One of the goals of this change in the spec was to enable deferring the generation of a span id when one wasn't needed. Is it possible to defer the spanId creation, and if not, why not?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432209482", "createdAt": "2020-05-29T01:29:54Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTUxNg==", "bodyText": "@jkwatson To be clear, you are talking about SpanId being crated unconditionally before this line? e.g.\nSpanId spanId = idsGenerator.generateSpanId();\n\n?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432431516", "createdAt": "2020-05-29T11:49:25Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNDI0MQ==", "bodyText": "@carlosalberto Exactly, this was mentioned on the original spec PR (open-telemetry/opentelemetry-specification#621) to improve performance.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432434241", "createdAt": "2020-05-29T11:55:56Z", "author": {"login": "arminru"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzODIwMA==", "bodyText": "Follow-up idea (for spec): why not also generate trace ID later? And provide an option for samplers that need it (only one single one: ProbabilitySampler) to optionally generate a trace ID themselves that the SDK will use.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432438200", "createdAt": "2020-05-29T12:05:24Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0MDA3MA==", "bodyText": "Please move this conversation to an issue. I think it is important to fix API first then we can address the optimizations.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432540070", "createdAt": "2020-05-29T14:51:35Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0ODY4MQ==", "bodyText": "Yeah, I was focusing on avoiding samplers starting to use the SpanId and missed the optimization. Let me see what can be done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432548681", "createdAt": "2020-05-29T15:05:00Z", "author": {"login": "pjanotti"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MTQ0Ng==", "bodyText": "Changed the code to use SpanId.getInvalid() if the span is not sampled and only generate a new SpanId if it is sampled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432551446", "createdAt": "2020-05-29T15:09:37Z", "author": {"login": "pjanotti"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTk3NQ==", "bodyText": "Please revert the last commit, and don't do the optimization now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432561975", "createdAt": "2020-05-29T15:26:15Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2OTg0Mg==", "bodyText": "Done, reverted the optimization - didn't see your comment on GH prior to the change...", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1286#discussion_r432569842", "createdAt": "2020-05-29T15:39:00Z", "author": {"login": "pjanotti"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanBuilderSdk.java", "diffHunk": "@@ -223,13 +223,7 @@ public Span startSpan() {\n         traceConfig\n             .getSampler()\n             .shouldSample(\n-                parentContext,\n-                traceId,\n-                spanId,\n-                spanName,\n-                spanKind,\n-                immutableAttributes,\n-                immutableLinks);\n+                parentContext, traceId, spanName, spanKind, immutableAttributes, immutableLinks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTQ4Mg=="}, "originalCommit": {"oid": "c90ae9a69d57280aea665b37e06f8a4a17b8ea38"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 746, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}