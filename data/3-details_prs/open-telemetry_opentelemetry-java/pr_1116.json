{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDAzMzIy", "number": 1116, "title": "Add probability to decision when appropriate", "bodyText": "Resolves #1087\nDoes this look like what you're looking for, @pavolloffay ?", "createdAt": "2020-04-15T21:40:46Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116", "merged": true, "mergeCommit": {"oid": "4d62068b522872f19a4f90fd4b665d682a888e53"}, "closed": true, "closedAt": "2020-04-22T23:32:44Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX_JRMgH2gAyNDA0MDAzMzIyOjBlNzlkMTZjOGQ5YjM1Mjg0ZjAwMzkxNjZjY2FkZTk2M2RmZWVmNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaMulBgFqTM5ODQ3MTQ3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0e79d16c8d9b35284f0039166ccade963dfeef55", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e79d16c8d9b35284f0039166ccade963dfeef55", "committedDate": "2020-04-15T21:40:29Z", "message": "add the sampling probability to the decision, when appropriate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b0e50210c9befe355da70cf5eea06e902fbc612", "committedDate": "2020-04-15T22:02:07Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzE1ODQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-394315846", "createdAt": "2020-04-16T05:50:39Z", "commit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTE1MjI0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-394515224", "createdAt": "2020-04-16T10:48:00Z", "commit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTIxOTI0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-394521924", "createdAt": "2020-04-16T10:58:10Z", "commit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1ODoxMFrOGGf68w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1ODoxMFrOGGf68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ==", "bodyText": "All other semantic conventions use a prefix followed by a dot and underscores instead of camelCase (e.g. messaging.protocol_version). So a better name would probably be probability_sampler.probability.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409467635", "createdAt": "2020-04-16T10:58:10Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -233,4 +244,33 @@ public boolean isSampled() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision, singletonMap(\"samplingProbability\", doubleAttributeValue(probability)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Njg5NTcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-394689571", "createdAt": "2020-04-16T14:27:53Z", "commit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyNzo1M1rOGGoErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyOToyOVrOGGoKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTE5OQ==", "bodyText": "To be more java we should use getAttributes in the Decision class I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409601199", "createdAt": "2020-04-16T14:27:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -233,4 +244,33 @@ public boolean isSampled() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision, singletonMap(\"samplingProbability\", doubleAttributeValue(probability)));\n+    }\n+\n+    @Override\n+    public abstract boolean isSampled();\n+\n+    public abstract Map<String, AttributeValue> getAttributes();\n+\n+    @Override\n+    public Map<String, AttributeValue> attributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMjU5MQ==", "bodyText": "Or just sampler.probability if we intend to have this cross samplers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409602591", "createdAt": "2020-04-16T14:29:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -233,4 +244,33 @@ public boolean isSampled() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision, singletonMap(\"samplingProbability\", doubleAttributeValue(probability)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NzYzNQ=="}, "originalCommit": {"oid": "9b0e50210c9befe355da70cf5eea06e902fbc612"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9", "committedDate": "2020-04-16T15:26:04Z", "message": "normalize a method name and move attribute to semantic convention attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzU5NTE3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-394759517", "createdAt": "2020-04-16T15:38:48Z", "commit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozODo0OFrOGGrZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozODo0OFrOGGrZ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA==", "bodyText": "I would put this in the SDK since it is SDK specific.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r409655770", "createdAt": "2020-04-16T15:38:48Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -125,5 +125,9 @@\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /** Probability value used by a probability-based Span sampling strategy. */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Njg4Mzc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-396688379", "createdAt": "2020-04-20T18:02:38Z", "commit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMjozOFrOGIg9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowNDowOVrOGIhBBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTc4MA==", "bodyText": "nit: I like more to see Collections.singletonMap :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411581780", "createdAt": "2020-04-20T18:02:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -229,8 +241,35 @@ public boolean isSampled() {\n     }\n \n     @Override\n-    public Map<String, AttributeValue> attributes() {\n+    public Map<String, AttributeValue> getAttributes() {\n       return Collections.emptyMap();\n     }\n   }\n+\n+  /** Probability-based sampling decision with a single attribute for the probability. */\n+  @Immutable\n+  @AutoValue\n+  abstract static class ProbabilityDecision implements Decision {\n+\n+    ProbabilityDecision() {}\n+\n+    /**\n+     * Creates sampling decision without attributes.\n+     *\n+     * @param decision sampling decision\n+     * @param probability the probability that was used for the decision.\n+     */\n+    static ProbabilityDecision create(boolean decision, double probability) {\n+      return new AutoValue_Samplers_ProbabilityDecision(\n+          decision,\n+          singletonMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjcyNQ==", "bodyText": "Even if that is the case, I am not sure we can have this in the API: Sampler is not part of the API (and explicitly removed from the API any \"sampling\" logic).\nSo I think this should be moved to SDK anyway.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411582725", "createdAt": "2020-04-20T18:04:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -125,5 +125,9 @@\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /** Probability value used by a probability-based Span sampling strategy. */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NTc3MA=="}, "originalCommit": {"oid": "204b4d33708a3b5e8b8d53e7d79f38b3fd9540e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ffc5903b256575e3f9d6f575844a47845cb5e74", "committedDate": "2020-04-20T20:33:37Z", "message": "move the sampling attribute to its own class in the SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYzMTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-396863144", "createdAt": "2020-04-20T22:42:58Z", "commit": {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0Mjo1OFrOGIqpUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0Mjo1OFrOGIqpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw==", "bodyText": "As I mentioned in a previous comment, I would make this internal in the Samplers until a decision in the specs is made. I think this was the confusion from the other thread, but would not expose it for the moment, my comment there was that if we decide to expose it will definitely not going to be in the API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411740497", "createdAt": "2020-04-20T22:42:58Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.trace.attributes.DoubleAttributeSetter;\n+\n+/** Attributes that are applied by {@link Sampler} instances. */\n+public class SamplingAttributes {\n+\n+  /**\n+   * Probability value used by a probability-based Span sampling strategy.\n+   *\n+   * <p>Note: This will need to be updated if a specification for this value is merged which changes\n+   * this proposed value.\n+   *\n+   * <p>See https://github.com/open-telemetry/opentelemetry-specification/pull/570\n+   */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n+      DoubleAttributeSetter.create(\"sampling.probability\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODcwOTQ1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-396870945", "createdAt": "2020-04-20T23:01:58Z", "commit": {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowMTo1OFrOGIrIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowMTo1OFrOGIrIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0ODU1NA==", "bodyText": "Thanks, please do it before merging :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#discussion_r411748554", "createdAt": "2020-04-20T23:01:58Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SamplingAttributes.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.trace.attributes.DoubleAttributeSetter;\n+\n+/** Attributes that are applied by {@link Sampler} instances. */\n+public class SamplingAttributes {\n+\n+  /**\n+   * Probability value used by a probability-based Span sampling strategy.\n+   *\n+   * <p>Note: This will need to be updated if a specification for this value is merged which changes\n+   * this proposed value.\n+   *\n+   * <p>See https://github.com/open-telemetry/opentelemetry-specification/pull/570\n+   */\n+  public static final DoubleAttributeSetter SAMPLING_PROBABILITY =\n+      DoubleAttributeSetter.create(\"sampling.probability\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MDQ5Nw=="}, "originalCommit": {"oid": "8ffc5903b256575e3f9d6f575844a47845cb5e74"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ab8f525ed0b3947e615e97c54c1d191c779c79", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/94ab8f525ed0b3947e615e97c54c1d191c779c79", "committedDate": "2020-04-20T23:31:32Z", "message": "Move the sampling priority attribute to a non-public spot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDU1OTUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-398455950", "createdAt": "2020-04-22T18:17:11Z", "commit": {"oid": "94ab8f525ed0b3947e615e97c54c1d191c779c79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDcxNDc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1116#pullrequestreview-398471475", "createdAt": "2020-04-22T18:37:51Z", "commit": {"oid": "94ab8f525ed0b3947e615e97c54c1d191c779c79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2973, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}