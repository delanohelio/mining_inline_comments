{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTU1OTg3", "number": 1577, "title": "Rename ParentOrElse to ParentBased and generalize to support all cases", "bodyText": "closes  #1572", "createdAt": "2020-08-22T08:06:37Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577", "merged": true, "mergeCommit": {"oid": "f6800940393af32c561cbd1656674d30e9f00bc4"}, "closed": true, "closedAt": "2020-08-28T17:43:39Z", "author": {"login": "dengliming"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBUzq_AH2gAyNDcxOTU1OTg3OjBmNzEwMTY2MmU3N2ZlMTlhODk3ODZmNGM3ZGRiMTE4YzUzMmFlMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDRuPVAFqTQ3NzU4OTA1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f7101662e77fe19a89786f4c7ddb118c532ae1a", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0f7101662e77fe19a89786f4c7ddb118c532ae1a", "committedDate": "2020-08-22T08:05:42Z", "message": "Rename ParentOrElse to ParentBased"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTM0NTM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-472934539", "createdAt": "2020-08-22T15:47:22Z", "commit": {"oid": "0f7101662e77fe19a89786f4c7ddb118c532ae1a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70bbe23b94c243da064bcc8885cde80448e84aad", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/70bbe23b94c243da064bcc8885cde80448e84aad", "committedDate": "2020-08-26T15:23:00Z", "message": "Update samplers to match spec."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9eeb0fe8a13c56316ab59f87d3c076973ebea5", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f9eeb0fe8a13c56316ab59f87d3c076973ebea5", "committedDate": "2020-08-26T15:34:10Z", "message": "Fix check style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjIzMjEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-475623210", "createdAt": "2020-08-26T15:46:47Z", "commit": {"oid": "70bbe23b94c243da064bcc8885cde80448e84aad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0Njo0N1rOHHSa5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0Njo0N1rOHHSa5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwMzg3Nw==", "bodyText": "I'd prefer if these were final and assigned in the constructor. Then, the single-arg constructor can just pass these values in to the other constructor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r477403877", "createdAt": "2020-08-26T15:46:47Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -215,10 +248,35 @@ public String getDescription() {\n \n   @Immutable\n   static class ParentBased implements Sampler {\n-    private final Sampler delegateSampler;\n+    private final Sampler root;\n+    private Sampler remoteParentSampled = alwaysOn();\n+    private Sampler remoteParentNotSampled = alwaysOff();\n+    private Sampler localParentSampled = alwaysOn();\n+    private Sampler localParentNotSampled = alwaysOff();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bbe23b94c243da064bcc8885cde80448e84aad"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1966048f4f4677e384fadd16a155eaa60fc72a9e", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1966048f4f4677e384fadd16a155eaa60fc72a9e", "committedDate": "2020-08-26T15:46:59Z", "message": "Fix check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af5b011f4b81212823101bae20ed3100285a9e7", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0af5b011f4b81212823101bae20ed3100285a9e7", "committedDate": "2020-08-26T15:53:24Z", "message": "Fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjQ4NTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-475648521", "createdAt": "2020-08-26T16:15:38Z", "commit": {"oid": "0af5b011f4b81212823101bae20ed3100285a9e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoxNTozOFrOHHTmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoxNTozOFrOHHTmYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMzIwMg==", "bodyText": "What do you think about breaking this up into smaller tests, so they will fail/pass individually, rather than having one giant test?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r477423202", "createdAt": "2020-08-26T16:15:38Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/test/java/io/opentelemetry/sdk/trace/SamplersTest.java", "diffHunk": "@@ -231,13 +261,75 @@ void parentOrElseSampler_AlwaysOn() {\n                     Collections.emptyList())\n                 .getDecision())\n         .isEqualTo(Decision.RECORD_AND_SAMPLED);\n+\n+    assertThat(\n+            Samplers.parentBased(Samplers.alwaysOn(), null, null, null, Samplers.alwaysOn())\n+                .shouldSample(\n+                    invalidSpanContext,\n+                    traceId,\n+                    SPAN_NAME,\n+                    SPAN_KIND,\n+                    Attributes.empty(),\n+                    Collections.emptyList())\n+                .getDecision())\n+        .isEqualTo(Decision.RECORD_AND_SAMPLED);\n+\n+    // Sampled remote parent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af5b011f4b81212823101bae20ed3100285a9e7"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b3a89c66f10d6cf910d67e11200f72b8496a63", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5b3a89c66f10d6cf910d67e11200f72b8496a63", "committedDate": "2020-08-26T16:50:37Z", "message": "Separate test for parentOrElse sampler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NzQ4MjU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-475748258", "createdAt": "2020-08-26T18:26:37Z", "commit": {"oid": "e5b3a89c66f10d6cf910d67e11200f72b8496a63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoyNjozOFrOHHYYKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoyNjozOFrOHHYYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTQ4MA==", "bodyText": "I would use a Builder pattern:\npublic static Builder newBuilder(Sampler root)\n\nWhere Builder allows to set any other Sampler. this way user don't have to configure all the others default samplers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r477501480", "createdAt": "2020-08-26T18:26:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -147,14 +147,47 @@ public static Sampler alwaysOff() {\n    * whether or not to sample. If there is no parent, the Sampler uses the provided Sampler delegate\n    * to determine the sampling decision.\n    *\n-   * @param delegateSampler the {@code Sampler} which is used to make the sampling decisions if the\n-   *     parent does not exist.\n+   * @param root the {@code Sampler} which is used to make the sampling decisions if the parent does\n+   *     not exist.\n    * @return a {@code Sampler} that follows the parent's sampling decision if one exists, otherwise\n-   *     following the delegate sampler's decision.\n+   *     following the root sampler's decision.\n    * @since 0.7.0\n    */\n-  public static Sampler parentOrElse(Sampler delegateSampler) {\n-    return new ParentOrElse(delegateSampler);\n+  public static Sampler parentBased(Sampler root) {\n+    return new ParentBased(root);\n+  }\n+\n+  /**\n+   * Returns a {@link Sampler} that always makes the same decision as the parent {@link Span} to\n+   * whether or not to sample. If there is no parent, the Sampler uses the provided Sampler delegate\n+   * to determine the sampling decision.\n+   *\n+   * @param root the required {@code Sampler} which is used to make the sampling decisions if the\n+   *     parent does not exist.\n+   * @param remoteParentSampled the optional {@code Sampler} which is used to make the sampling\n+   *     decisions if the remote parent exist and is sampled.\n+   * @param remoteParentNotSampled the optional {@code Sampler} which is used to make the sampling\n+   *     decisions if the remote parent exist and is not sampled.\n+   * @param localParentSampled the optional {@code Sampler} which is used to make the sampling\n+   *     decisions if the local parent exist and is sampled.\n+   * @param localParentNotSampled the optional {@code Sampler} which is used to make the sampling\n+   *     decisions if the local parent exist and is not sampled.\n+   * @return a {@code Sampler} that follows the parent's sampling decision if one exists, otherwise\n+   *     following the root sampler and other optional sampler's decision.\n+   * @since 0.8.0\n+   */\n+  public static Sampler parentBased(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b3a89c66f10d6cf910d67e11200f72b8496a63"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78333571cf1dcb22b298d7cc8184b18821ae73a8", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78333571cf1dcb22b298d7cc8184b18821ae73a8", "committedDate": "2020-08-27T05:31:41Z", "message": "Provide ParentBased.Builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583078ab28a14ab78a009d8207685e7f20aac138", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/583078ab28a14ab78a009d8207685e7f20aac138", "committedDate": "2020-08-27T05:48:21Z", "message": "Fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDAyMjM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-476402236", "createdAt": "2020-08-27T05:49:06Z", "commit": {"oid": "78333571cf1dcb22b298d7cc8184b18821ae73a8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNTo0OTowNlrOHIABew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNTo1MzozNFrOHIANGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1MTAzNQ==", "bodyText": "Also to @jkwatson I think we should either have new on both or new on neither the non-builder and builder factories, they seem equally new. wdyt?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478151035", "createdAt": "2020-08-27T05:49:06Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -147,14 +147,27 @@ public static Sampler alwaysOff() {\n    * whether or not to sample. If there is no parent, the Sampler uses the provided Sampler delegate\n    * to determine the sampling decision.\n    *\n-   * @param delegateSampler the {@code Sampler} which is used to make the sampling decisions if the\n-   *     parent does not exist.\n+   * @param root the {@code Sampler} which is used to make the sampling decisions if the parent does\n+   *     not exist.\n    * @return a {@code Sampler} that follows the parent's sampling decision if one exists, otherwise\n-   *     following the delegate sampler's decision.\n+   *     following the root sampler's decision.\n    * @since 0.7.0\n    */\n-  public static Sampler parentOrElse(Sampler delegateSampler) {\n-    return new ParentOrElse(delegateSampler);\n+  public static Sampler parentBased(Sampler root) {\n+    return newParentBasedBuilder(root).build();\n+  }\n+\n+  /**\n+   * Returns a {@link ParentBased.Builder} that follows the parent's sampling decision if one\n+   * exists, otherwise following the root sampler and other optional sampler's decision.\n+   *\n+   * @param root the required {@code Sampler} which is used to make the sampling decisions if the\n+   *     parent does not exist.\n+   * @return a {@code ParentBased.Builder}\n+   * @since 0.8.0\n+   */\n+  public static ParentBased.Builder newParentBasedBuilder(Sampler root) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78333571cf1dcb22b298d7cc8184b18821ae73a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1MjIxNA==", "bodyText": "Our other builders like SpanBuilder and Attributes.Builder use set instead of with, can you use set here too?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478152214", "createdAt": "2020-08-27T05:50:47Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,109 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the remoteParentSampled. Optional.\n+       *\n+       * @param remoteParentSampled used to make the sampling decisions if the remote parent exist\n+       *     and is sampled.\n+       * @return this.\n+       */\n+      public Builder withRemoteParentSampled(Sampler remoteParentSampled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583078ab28a14ab78a009d8207685e7f20aac138"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1Mjg3Mw==", "bodyText": "Alternatively, when seems like it could fit as a special semantics for this class, in particular I think if the variable was named Sampler whenRemoteParentSampled it's really easy to read.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478152873", "createdAt": "2020-08-27T05:51:49Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,109 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the remoteParentSampled. Optional.\n+       *\n+       * @param remoteParentSampled used to make the sampling decisions if the remote parent exist\n+       *     and is sampled.\n+       * @return this.\n+       */\n+      public Builder withRemoteParentSampled(Sampler remoteParentSampled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1MjIxNA=="}, "originalCommit": {"oid": "583078ab28a14ab78a009d8207685e7f20aac138"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1MzY5Mw==", "bodyText": "Sets the {@link Sampler} to use when there is a remote parent that was sampled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478153693", "createdAt": "2020-08-27T05:53:06Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,109 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the remoteParentSampled. Optional.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583078ab28a14ab78a009d8207685e7f20aac138"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE1NDAwOQ==", "bodyText": "I think we leave @param out when it basically matches the javadoc, e.g. https://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/common/Attributes.java#L204", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478154009", "createdAt": "2020-08-27T05:53:34Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,109 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the remoteParentSampled. Optional.\n+       *\n+       * @param remoteParentSampled used to make the sampling decisions if the remote parent exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583078ab28a14ab78a009d8207685e7f20aac138"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f0b1c2335869509a9823c39c0bbab2755a110f", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33f0b1c2335869509a9823c39c0bbab2755a110f", "committedDate": "2020-08-27T06:22:19Z", "message": "Fix java doc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDE3NzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-476417749", "createdAt": "2020-08-27T06:25:11Z", "commit": {"oid": "33f0b1c2335869509a9823c39c0bbab2755a110f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoyNToxMVrOHIBjIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoyNToyM1rOHIBjxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NjAzMw==", "bodyText": "If not set, defaults to always sampling if the remote parent was sampled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478176033", "createdAt": "2020-08-27T06:25:11Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,101 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the {@link Sampler} to use when there is a remote parent that was sampled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f0b1c2335869509a9823c39c0bbab2755a110f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NjE5Nw==", "bodyText": "If not set, defaults to never sampling when the remote parent isn't sampled.\nSimilar for local", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#discussion_r478176197", "createdAt": "2020-08-27T06:25:23Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -231,19 +259,101 @@ public SamplingResult shouldSample(\n         Kind spanKind,\n         ReadableAttributes attributes,\n         List<Link> parentLinks) {\n-      if (parentContext.isValid()) {\n-        if (parentContext.getTraceFlags().isSampled()) {\n-          return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n-        }\n-        return EMPTY_NOT_SAMPLED_OR_RECORDED_SAMPLING_RESULT;\n+      if (!parentContext.isValid()) {\n+        return this.root.shouldSample(\n+            parentContext, traceId, name, spanKind, attributes, parentLinks);\n       }\n-      return this.delegateSampler.shouldSample(\n-          parentContext, traceId, name, spanKind, attributes, parentLinks);\n+\n+      if (parentContext.isRemote()) {\n+        return parentContext.getTraceFlags().isSampled()\n+            ? this.remoteParentSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks)\n+            : this.remoteParentNotSampled.shouldSample(\n+                parentContext, traceId, name, spanKind, attributes, parentLinks);\n+      }\n+      return parentContext.getTraceFlags().isSampled()\n+          ? this.localParentSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks)\n+          : this.localParentNotSampled.shouldSample(\n+              parentContext, traceId, name, spanKind, attributes, parentLinks);\n     }\n \n     @Override\n     public String getDescription() {\n-      return String.format(\"ParentOrElse{%s}\", this.delegateSampler.getDescription());\n+      return String.format(\n+          \"ParentBased{root:%s,remoteParentSampled:%s,remoteParentNotSampled:%s,\"\n+              + \"localParentSampled:%s,localParentNotSampled:%s}\",\n+          this.root.getDescription(),\n+          this.remoteParentSampled.getDescription(),\n+          this.remoteParentNotSampled.getDescription(),\n+          this.localParentSampled.getDescription(),\n+          this.localParentNotSampled.getDescription());\n+    }\n+\n+    static class Builder {\n+      private final Sampler root;\n+      private Sampler remoteParentSampled;\n+      private Sampler remoteParentNotSampled;\n+      private Sampler localParentSampled;\n+      private Sampler localParentNotSampled;\n+\n+      /**\n+       * Sets the {@link Sampler} to use when there is a remote parent that was sampled.\n+       *\n+       * @return this Builder\n+       */\n+      public Builder withRemoteParentSampled(Sampler remoteParentSampled) {\n+        this.remoteParentSampled = remoteParentSampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the {@link Sampler} to use when there is a remote parent that was not sampled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33f0b1c2335869509a9823c39c0bbab2755a110f"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90da0171cbf9370a8330f5095b4fcbf92295d1f2", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/90da0171cbf9370a8330f5095b4fcbf92295d1f2", "committedDate": "2020-08-27T06:42:19Z", "message": "Update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54db6690a73580bd14aceb12e6ad398345bafe18", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/54db6690a73580bd14aceb12e6ad398345bafe18", "committedDate": "2020-08-27T17:07:49Z", "message": "Builder use set instead of with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0ba9c0a0a544130a012dc90ffaaf2401d24912", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4d0ba9c0a0a544130a012dc90ffaaf2401d24912", "committedDate": "2020-08-28T09:32:51Z", "message": "Rename newParentBasedBuilder to parentBasedBuilder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTg5MDUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1577#pullrequestreview-477589051", "createdAt": "2020-08-28T09:37:54Z", "commit": {"oid": "4d0ba9c0a0a544130a012dc90ffaaf2401d24912"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2390, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}