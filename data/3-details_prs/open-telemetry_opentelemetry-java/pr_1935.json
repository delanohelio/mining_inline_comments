{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzY4NTIw", "number": 1935, "title": "Split SpanContext into interface / impl", "bodyText": "As enabled by open-telemetry/opentelemetry-specification#969", "createdAt": "2020-10-30T05:33:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935", "merged": true, "mergeCommit": {"oid": "0163a8c12166f0ef3c994042fb559504d3f0f43f"}, "closed": true, "closedAt": "2020-12-01T19:06:49Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXf-ZJAH2gAyNTEyNzY4NTIwOjhjYWI2NjFlNTY4MWFmYjMxMTdhNzI4NjRhZTM3MzNiMjdhMWJjNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh2FaHgH2gAyNTEyNzY4NTIwOjA5ZGY2N2QxMWExNjMyNmVkYzE2MDUxOTIzMjgwNDY5NWMzYjQ4NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8cab661e5681afb3117a72864ae3733b27a1bc77", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8cab661e5681afb3117a72864ae3733b27a1bc77", "committedDate": "2020-10-30T05:32:42Z", "message": "Split SpanContext into interface / impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81", "committedDate": "2020-10-30T05:34:45Z", "message": "Remove javadoc from impl to reduce drift change."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDQ5MzU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-520449354", "createdAt": "2020-10-30T08:14:17Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoxNDoxN1rOHrE57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODoxNDoxN1rOHrE57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzMTE4Mg==", "bodyText": "Since the interface is also annotated @Immutable  and according to the spec any SpanContext must be Immutable, this is maybe not the best name to distinguish it from possible other implementations which would also be Immutable. Maybe DefaultSpanContext?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#discussion_r514931182", "createdAt": "2020-10-30T08:14:17Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/api/trace/ImmutableSpanContext.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class ImmutableSpanContext implements SpanContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODI3MTg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-520827184", "createdAt": "2020-10-30T16:19:07Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODQyNjYy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-520842662", "createdAt": "2020-10-30T16:38:02Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODU1OTgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-520855982", "createdAt": "2020-10-30T16:54:14Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NDoxNFrOHrXrlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NDoxNFrOHrXrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzODgwNQ==", "bodyText": "Does this still make sense on an interface?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#discussion_r515238805", "createdAt": "2020-10-30T16:54:14Z", "author": {"login": "tylerbenson"}, "path": "api/src/main/java/io/opentelemetry/api/trace/SpanContext.java", "diffHunk": "@@ -17,23 +15,15 @@\n  * traceState} and the {@link boolean remote} flag.\n  */\n @Immutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTQ3OTQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-521147941", "createdAt": "2020-10-31T15:35:26Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNTozNToyNlrOHroJ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNTozNToyNlrOHroJ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwODY5MA==", "bodyText": "Not sure why this class is needed, if you just move the \"@autovalue\" annotation on the SpanContext you achieve the same thing, and just call directly the ctor of the AutoValue, am I missing something?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#discussion_r515508690", "createdAt": "2020-10-31T15:35:26Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/trace/ImmutableSpanContext.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class ImmutableSpanContext implements SpanContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MDIyMjE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-535022214", "createdAt": "2020-11-20T02:09:09Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTMxNDM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-535131437", "createdAt": "2020-11-20T05:49:31Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjU1NjUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#pullrequestreview-538655650", "createdAt": "2020-11-25T16:14:15Z", "commit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoxNDoxNlrOH56msQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoxNTo0MlrOH56qwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5MTA1Nw==", "bodyText": "this will become more expensive after this change, we should calculate this only once since it is used couple of times per instance created.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#discussion_r530491057", "createdAt": "2020-11-25T16:14:16Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/trace/SpanContext.java", "diffHunk": "@@ -128,22 +104,21 @@ public void copyTraceFlagsHexTo(char[] dest, int destOffset) {\n    *\n    * @return the {@code TraceState} associated with this {@code SpanContext}.\n    */\n-  public abstract TraceState getTraceState();\n+  TraceState getTraceState();\n \n   /**\n    * Returns {@code true} if this {@code SpanContext} is valid.\n    *\n    * @return {@code true} if this {@code SpanContext} is valid.\n    */\n-  @Memoized\n-  public boolean isValid() {\n-    return TraceId.isValid(getTraceIdHex()) && SpanId.isValid(getSpanIdHex());\n+  default boolean isValid() {\n+    return TraceId.isValid(getTraceIdAsHexString()) && SpanId.isValid(getSpanIdAsHexString());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5MjA5Ng==", "bodyText": "Why removing the ability to memoized this call? It may get expensive. I would suggest to not default this and any method that was memoized before.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1935#discussion_r530492096", "createdAt": "2020-11-25T16:15:42Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/api/trace/SpanContext.java", "diffHunk": "@@ -66,60 +51,51 @@ private static SpanContext create(\n    * @param traceState the trace state for the span context.\n    * @return a new {@code SpanContext} with the given identifiers and options.\n    */\n-  public static SpanContext createFromRemoteParent(\n+  static SpanContext createFromRemoteParent(\n       String traceIdHex, String spanIdHex, byte traceFlags, TraceState traceState) {\n-    return create(traceIdHex, spanIdHex, traceFlags, traceState, /* remote=*/ true);\n+    return ImmutableSpanContext.create(\n+        traceIdHex, spanIdHex, traceFlags, traceState, /* remote=*/ true);\n   }\n \n-  abstract String getTraceIdHex();\n-\n-  abstract String getSpanIdHex();\n-\n   /**\n    * Returns the trace identifier associated with this {@code SpanContext}.\n    *\n    * @return the trace identifier associated with this {@code SpanContext}.\n    */\n-  public String getTraceIdAsHexString() {\n-    return getTraceIdHex();\n-  }\n+  String getTraceIdAsHexString();\n \n   /**\n    * Returns the byte[] representation of the trace identifier associated with this {@link\n    * SpanContext}.\n    */\n-  @Memoized\n-  public byte[] getTraceIdBytes() {\n-    return TraceId.bytesFromHex(getTraceIdHex(), 0);\n+  default byte[] getTraceIdBytes() {\n+    return TraceId.bytesFromHex(getTraceIdAsHexString(), 0);\n   }\n \n   /**\n    * Returns the span identifier associated with this {@code SpanContext}.\n    *\n    * @return the span identifier associated with this {@code SpanContext}.\n    */\n-  public String getSpanIdAsHexString() {\n-    return getSpanIdHex();\n-  }\n+  String getSpanIdAsHexString();\n \n   /**\n    * Returns the byte[] representation of the span identifier associated with this {@link\n    * SpanContext}.\n    */\n-  @Memoized\n-  public byte[] getSpanIdBytes() {\n-    return SpanId.bytesFromHex(getSpanIdHex(), 0);\n+  default byte[] getSpanIdBytes() {\n+    return SpanId.bytesFromHex(getSpanIdAsHexString(), 0);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2b64317feacd0d4c27d4f0c1701e5d5ba2fe81"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b884bd2f98813ed77660306958e89b3d13f418", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/40b884bd2f98813ed77660306958e89b3d13f418", "committedDate": "2020-12-01T08:55:35Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into spancontext-interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3109e68c99b9bf426d439806af0cc2dc3197ebea", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3109e68c99b9bf426d439806af0cc2dc3197ebea", "committedDate": "2020-12-01T08:56:48Z", "message": "Add warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09df67d11a16326edc160519232804695c3b4872", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09df67d11a16326edc160519232804695c3b4872", "committedDate": "2020-12-01T08:57:31Z", "message": "More"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4205, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}