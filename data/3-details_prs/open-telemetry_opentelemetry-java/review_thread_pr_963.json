{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODgxOTc1", "number": 963, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozOToyNVrODtoxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMjo1OFrOE8hZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgwNDQ2OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/grpc/override/AbstractSimpleContextStorageListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozOToyNVrOF_Lg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozOToyNVrOF_Lg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MzI3NA==", "bodyText": "javadoc, please", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401793274", "createdAt": "2020-04-01T17:39:25Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/grpc/override/AbstractSimpleContextStorageListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import io.grpc.Context;\n+\n+public abstract class AbstractSimpleContextStorageListener implements ContextStorageListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTgzMDA3OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjozOFrOF_LxWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjozOFrOF_LxWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzQ2NQ==", "bodyText": "javadoc, please", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401797465", "createdAt": "2020-04-01T17:46:38Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.grpc.Context;\n+import io.grpc.override.AbstractSimpleContextStorageListener;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListener implements ContextStorageListener.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0MjcyOnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1M1rOF_L5Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0OTo1M1rOF_L5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5OTQ5NA==", "bodyText": "would prefer not abbreviating here. Change to threadLocalEventStack", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401799494", "createdAt": "2020-04-01T17:49:53Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.grpc.Context;\n+import io.grpc.override.AbstractSimpleContextStorageListener;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListener implements ContextStorageListener.Provider {\n+\n+  private final ThreadLocal<Deque<ScopeEvent>> tlEventStack =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0Njk3OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListenerNew.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MTowN1rOF_L8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMjo1NVrOGWWXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDE5Nw==", "bodyText": "javadoc, and what's with this name? What makes it \"new\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401800197", "createdAt": "2020-04-01T17:51:07Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListenerNew.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.grpc.Context;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListenerNew implements ContextStorageListener.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODIxNA==", "bodyText": "Did some updates to Bogdan's code handling context to make implementation cleaner. Deleted the old one and only keeping the new one (and renamed)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426088214", "createdAt": "2020-05-15T23:32:55Z", "author": {"login": "sfriberg"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrContextStorageListenerNew.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.grpc.Context;\n+import io.grpc.override.ContextStorageListener;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.unsafe.ContextUtils;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+public class JfrContextStorageListenerNew implements ContextStorageListener.Provider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDE5Nw=="}, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg0NzU4OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrSpanProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MToxOVrOF_L8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MToxOVrOF_L8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDI5OQ==", "bodyText": "javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401800299", "createdAt": "2020-04-01T17:51:19Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class JfrSpanProcessor implements SpanProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTg1MjU1OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/ScopeEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo1MjozN1rOF_L_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMzo0NFrOGWWXsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMTEwMw==", "bodyText": "should this be public? With the JFR streaming APIs is this going to be handed directly to the stream listeners?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r401801103", "createdAt": "2020-04-01T17:52:37Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+@Name(\"io.opentelemetry.context.Scope\")\n+@Label(\"Scope\")\n+@Category(\"Open Telemetry Tracing\")\n+@Description(\n+    \"Open Telemetry trace event corresponding to the span currently \"\n+        + \"in scope/active on this thread.\")\n+class ScopeEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODM2OA==", "bodyText": "Haven't done much with the JFR stream, but doubt you will get the actual event class and rather get a generic event type that you can look up name and fields on?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426088368", "createdAt": "2020-05-15T23:33:44Z", "author": {"login": "sfriberg"}, "path": "contrib/jfr_events/src/main/java/io/opentelemetry/contrib/jfr/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.jfr;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+@Name(\"io.opentelemetry.context.Scope\")\n+@Label(\"Scope\")\n+@Category(\"Open Telemetry Tracing\")\n+@Description(\n+    \"Open Telemetry trace event corresponding to the span currently \"\n+        + \"in scope/active on this thread.\")\n+class ScopeEvent extends Event {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMTEwMw=="}, "originalCommit": {"oid": "7713df40715a577d0b6179799963c14f84ea1a44"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMzNDg4OnYy", "diffSide": "RIGHT", "path": "contrib/jfr_events/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODoyNlrOGWWbXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo1NDo1NlrOGXpt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTMwOQ==", "bodyText": "Since this required the SDK should it be an SDK contribution instead? @jkwatson", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426089309", "createdAt": "2020-05-15T23:38:26Z", "author": {"login": "sfriberg"}, "path": "contrib/jfr_events/build.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+plugins {\n+    id \"java\"\n+    //    id \"maven-publish\"\n+}\n+\n+description = 'OpenTelemetry Contrib JFR Events'\n+ext.moduleName = \"io.opentelemetry.contrib.jfr\"\n+\n+sourceCompatibility = 11\n+targetCompatibility = 11\n+\n+dependencies {\n+    implementation project(':opentelemetry-api')\n+    implementation project(':opentelemetry-sdk')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc470f01fb7b7290b4de4c660fd663022170716f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1MzkxOQ==", "bodyText": "I think yes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r427453919", "createdAt": "2020-05-19T16:54:56Z", "author": {"login": "jkwatson"}, "path": "contrib/jfr_events/build.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+plugins {\n+    id \"java\"\n+    //    id \"maven-publish\"\n+}\n+\n+description = 'OpenTelemetry Contrib JFR Events'\n+ext.moduleName = \"io.opentelemetry.contrib.jfr\"\n+\n+sourceCompatibility = 11\n+targetCompatibility = 11\n+\n+dependencies {\n+    implementation project(':opentelemetry-api')\n+    implementation project(':opentelemetry-sdk')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTMwOQ=="}, "originalCommit": {"oid": "dc470f01fb7b7290b4de4c660fd663022170716f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzc4MTc1OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMDo0NFrOGW-iAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMDo0NFrOGW-iAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NjM3MQ==", "bodyText": "For some reason this doesn't seem to work with CricleCI, I don't see the JFR project showing up. Running gradle locally with JDK 8 and JDK 11 it is ignore and added correctly", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426746371", "createdAt": "2020-05-18T16:20:44Z", "author": {"login": "sfriberg"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,10 @@ include \":opentelemetry-all\",\n         \":opentelemetry-sdk-contrib-jaeger-remote-sampler\",\n         \":opentelemetry-bom\"\n \n+if(JavaVersion.current().isJava11Compatible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4MDAzOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MzowN1rOGXFaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyNjoxM1rOGXGWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTA0MA==", "bodyText": "Have you considered testing against any Java 8 distributions that include JFR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426859040", "createdAt": "2020-05-18T19:53:07Z", "author": {"login": "devinsba"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,10 @@ include \":opentelemetry-all\",\n         \":opentelemetry-sdk-contrib-jaeger-remote-sampler\",\n         \":opentelemetry-bom\"\n \n+if(JavaVersion.current().isJava11Compatible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NDU2MQ==", "bodyText": "I have not, once that becomes readily available we can look at building for JDK 8 as well. First step I think is to focus on JDK 11 and make that work well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r426874561", "createdAt": "2020-05-18T20:26:13Z", "author": {"login": "sfriberg"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,10 @@ include \":opentelemetry-all\",\n         \":opentelemetry-sdk-contrib-jaeger-remote-sampler\",\n         \":opentelemetry-bom\"\n \n+if(JavaVersion.current().isJava11Compatible()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTA0MA=="}, "originalCommit": {"oid": "d8aae5880560d906c1523724522056b37c8c5e58"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzEzNDY4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/jfr_events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1OTo0NlrOHmvrXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo0Njo0OFrOHm1DPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4OTA4Nw==", "bodyText": "@jkwatson is this how I should do things to wrap the an existing ContextStorage?\nWhat would be the best way to have this provider detected and enabled as a wrapper when JAR is added on the classpath? Or should it be done through some configuration/code instead?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r510389087", "createdAt": "2020-10-22T18:59:46Z", "author": {"login": "sfriberg"}, "path": "sdk_extensions/jfr_events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.ContextStorageProvider;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+\n+public class JfrContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    ContextStorage parentStorage = ContextStorage.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNTU2OA==", "bodyText": "hmm. I don't know if this is right. I don't think you want to return a new storage for each call, but the same storage. Take a look at the GrpcContextStorageProvider and BraveContextStorageProvider for examples. @anuraaga is definitely the expert here, if you have questions after looking at them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r510405568", "createdAt": "2020-10-22T19:29:51Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/jfr_events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.ContextStorageProvider;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+\n+public class JfrContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    ContextStorage parentStorage = ContextStorage.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4OTA4Nw=="}, "originalCommit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3NzExOA==", "bodyText": "thanks, will check them. I just quickly looked at the example that was in ContextStorage which was basically done this way", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r510477118", "createdAt": "2020-10-22T21:46:48Z", "author": {"login": "sfriberg"}, "path": "sdk_extensions/jfr_events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.ContextStorageProvider;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+\n+public class JfrContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    ContextStorage parentStorage = ContextStorage.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4OTA4Nw=="}, "originalCommit": {"oid": "7b7b70bdff625e8e1a410cdbaa4be4e7dc44125d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODg5Mjg3OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMToyMVrOH4rh2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozMzoxNlrOH5Dmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTQ4Mg==", "bodyText": "Does this class need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529195482", "createdAt": "2020-11-24T04:31:21Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4OTk1MA==", "bodyText": "yes, since it needs to be possible to register for any user.\nContextStorage.addWrapper(JfrContextStorageWrapper::new);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529589950", "createdAt": "2020-11-24T14:33:16Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTQ4Mg=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODg5NTA3OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMjoxNlrOH4rjDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozNzoyMlrOH5Dyog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTc4OQ==", "bodyText": "What happens if the event is never committed? Is there a way to detect it in JFR? Then it looks like it could be a nice scope debugging mechanism.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529195789", "createdAt": "2020-11-24T04:32:16Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {\n+\n+  private final ContextStorage wrapped;\n+\n+  public JfrContextStorageWrapper(ContextStorage wrapped) {\n+    this.wrapped = wrapped;\n+  }\n+\n+  @Override\n+  public Scope attach(Context toAttach) {\n+    Scope scope = wrapped.attach(toAttach);\n+    ScopeEvent event = new ScopeEvent(Span.fromContext(toAttach).getSpanContext());\n+    event.begin();\n+    return () -> {\n+      event.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5Mjk5NA==", "bodyText": "No way to detect, it basically is just GC:ed never to be seen or heard from again :).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529592994", "createdAt": "2020-11-24T14:37:22Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrContextStorageWrapper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+\n+public class JfrContextStorageWrapper implements ContextStorage {\n+\n+  private final ContextStorage wrapped;\n+\n+  public JfrContextStorageWrapper(ContextStorage wrapped) {\n+    this.wrapped = wrapped;\n+  }\n+\n+  @Override\n+  public Scope attach(Context toAttach) {\n+    Scope scope = wrapped.attach(toAttach);\n+    ScopeEvent event = new ScopeEvent(Span.fromContext(toAttach).getSpanContext());\n+    event.begin();\n+    return () -> {\n+      event.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NTc4OQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODg5Njg5OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMzoxMFrOH4rkJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MzowOFrOH5Hqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NjA2OA==", "bodyText": "I'm not sure what this comment is referring to (span processors are always synchronous I guess). Maybe we don't need it? Otherwise if you can clarify what I'm missing would be great :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529196068", "createdAt": "2020-11-24T04:33:10Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMjIyMA==", "bodyText": "We have the https://github.com/open-telemetry/opentelemetry-java/tree/master/sdk-extensions/async-processor which could batch things etc. so that the timing for the of JFR event which is handled in the processor would diverge from the timing of the Span itself.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529632220", "createdAt": "2020-11-24T15:26:10Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NjA2OA=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NjUwMg==", "bodyText": "I see - I forgot about that and think many readers would get more confusion than clarity. If we keep a message, making it more generic might make sense - \"JfrSpanProcessor measures the timing of events, so it doesn't make sense to wrap it with any other SpanProcessor which may affect timings. When possible, register it first before any other processors to allow best measurements.\" Maybe something like that?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529656502", "createdAt": "2020-11-24T15:43:08Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NjA2OA=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODkwNDkyOnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozNzoxNlrOH4ro6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTowOTo1NFrOH5FWYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzI5MA==", "bodyText": "Should we use weak keys for this? It's bad for tracing if a bug means spans are never ended and leaked, but this would cause an actual memory leak I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529197290", "createdAt": "2020-11-24T04:37:16Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzQzNA==", "bodyText": "By the way I've been thinking of shading in https://github.com/raphw/weak-lock-free/blob/master/src/main/java/com/blogspot/mydailyjava/weaklockfree/WeakConcurrentMap.java for our use for a different Context-related use case, if that'll help I can prioritize it :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529197434", "createdAt": "2020-11-24T04:37:52Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzI5MA=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxODUzMA==", "bodyText": "Good catch. By using Guava there should be no need to shade another class", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529618530", "createdAt": "2020-11-24T15:09:54Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NzI5MA=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODk2MjQxOnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTowODowOVrOH4sK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxOToyNFrOH5F0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (nonNull(event) && event.shouldCommit()) {\n          \n          \n            \n                if (event != null && event.shouldCommit()) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206001", "createdAt": "2020-11-24T05:08:09Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxMDQ3Mw==", "bodyText": "nonNull is part of the standard JDK API any reason not to use it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529610473", "createdAt": "2020-11-24T14:59:39Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjAwMQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNjE3NA==", "bodyText": "Yeah there's a perfectly good literal in Java so we should stick to using it where possible (nonNull was added in 1.8, presumably to aid with streams but I don't consider it idiomatic for normal code).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529626174", "createdAt": "2020-11-24T15:19:24Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjAwMQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODk2NzY1OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMDo1NVrOH4sOCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1NzoyOFrOH5I6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjc5NQ==", "bodyText": "Hmm - not really for this PR but this doesn't seem like how shutdown is supposed to work. For example, we would probably stop accepting spans, and wait for spans to end naturally in an exporter when it is shutting down I think. But can't think of any improvement here so just writing for reference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206795", "createdAt": "2020-11-24T05:10:55Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {\n+      event.commit();\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEndRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public CompletableResultCode shutdown() {\n+    spanEvents.forEach((id, event) -> event.commit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxNzAyNg==", "bodyText": "Probably would be good to improve the JavaDoc, not sure what 'not yet processed means'.\n\n\nProcesses all span events that have not yet been processed and closes used resources.\n\n\nSimilar for forceFlush\n\n\nProcesses all span events that have not yet been processed.\n\n\nSound more like this would be for finished spans rather than span that hasn't been closed yet.\nForce flush would commit any ready events, as would shutdown but that would also clear up all resources, which I would take as drop all non-completed spans. Once something is shutdown I wouldn't expect things to continue to flow, unless the CompleteResultCode would wait for all spans, but that would potentially be indefinite.\nwill remove the event.commit part as that feels wrong here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529617026", "createdAt": "2020-11-24T15:08:06Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {\n+      event.commit();\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEndRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public CompletableResultCode shutdown() {\n+    spanEvents.forEach((id, event) -> event.commit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjc5NQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2MTYyNA==", "bodyText": "Agree we may need to improve docs, or otherwise expectations (maybe spec) for this (again not related to this PR). I would generally call this at the beginning of a graceful shutdown and expect pending requests, and exported spans, to complete before termination. /cc @jkwatson @Oberon00", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529661624", "createdAt": "2020-11-24T15:46:46Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {\n+      event.commit();\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEndRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public CompletableResultCode shutdown() {\n+    spanEvents.forEach((id, event) -> event.commit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjc5NQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3Njg4NQ==", "bodyText": "what does \"pending requests\" mean here? Un-ended spans? Or just spans that were in the process of being sent off to exporters?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529676885", "createdAt": "2020-11-24T15:57:28Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static java.util.Objects.nonNull;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.ReadWriteSpan;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Span processor to create new JFR events for the Span as they are started, and commit on end.\n+ *\n+ * <p>NOTE: JfrSpanProcessor must be running synchronously to ensure that duration is correctly\n+ * captured.\n+ */\n+public class JfrSpanProcessor implements SpanProcessor {\n+\n+  private final Map<SpanContext, SpanEvent> spanEvents = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void onStart(Context parentContext, ReadWriteSpan span) {\n+    if (span.getSpanContext().isValid()) {\n+      SpanEvent event = new SpanEvent(span.toSpanData());\n+      event.begin();\n+      spanEvents.put(span.getSpanContext(), event);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isStartRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public void onEnd(ReadableSpan rs) {\n+    SpanEvent event = spanEvents.remove(rs.getSpanContext());\n+    if (nonNull(event) && event.shouldCommit()) {\n+      event.commit();\n+    }\n+  }\n+\n+  @Override\n+  public boolean isEndRequired() {\n+    return true;\n+  }\n+\n+  @Override\n+  public CompletableResultCode shutdown() {\n+    spanEvents.forEach((id, event) -> event.commit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjc5NQ=="}, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODk2ODY1OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/ScopeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMToyM1rOH4sOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMToyM1rOH4sOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNjk0Mw==", "bodyText": "Does @Label work on methods? Very small nit, but tend to like putting annotations on public API where possible. Alternatively, if we annotate the fields maybe we don't need the getters.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529206943", "createdAt": "2020-11-24T05:11:23Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import io.opentelemetry.api.trace.SpanContext;\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+@Name(\"io.opentelemetry.context.Scope\")\n+@Label(\"Scope\")\n+@Category(\"Open Telemetry Tracing\")\n+@Description(\n+    \"Open Telemetry trace event corresponding to the span currently \"\n+        + \"in scope/active on this thread.\")\n+class ScopeEvent extends Event {\n+\n+  @Label(\"Trace Id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODk3MTAwOnYy", "diffSide": "RIGHT", "path": "sdk-extensions/jfr-events/src/test/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMjo1OFrOH4sQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNToxMjo1OFrOH4sQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNzMyNA==", "bodyText": "Since jupiter, let's remove public from class / methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/963#discussion_r529207324", "createdAt": "2020-11-24T05:12:58Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/test/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.jfr;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordingFile;\n+import org.junit.jupiter.api.Test;\n+\n+public class JfrSpanProcessorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94da981b7eb63c7eced9d2a62f41efab528dc84f"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 952, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}