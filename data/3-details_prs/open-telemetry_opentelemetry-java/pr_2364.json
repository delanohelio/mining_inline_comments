{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzc4MTY0", "number": 2364, "title": "Convert the examples to not use the GlobalOpenTelemetry instance.", "bodyText": "I think there is probably still work to be done on cleaning up the story in these examples, since SDK and API usage tends to be mixed together in unfortunate ways.", "createdAt": "2020-12-18T21:17:56Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364", "merged": true, "mergeCommit": {"oid": "2ac3ff6e830ea00026553255ce7d4c72a72e2152"}, "closed": true, "closedAt": "2020-12-19T00:21:52Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdncgEVgH2gAyNTQyNzc4MTY0OmJmMmE0N2M3M2JjODc2NDdiOTAxOWQ5NGM0ZGE0ODljODQ2ZTZiY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnhWTzgFqTU1NTg4OTc0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf2a47c73bc87647b9019d94c4da489c846e6bcf", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bf2a47c73bc87647b9019d94c4da489c846e6bcf", "committedDate": "2020-12-18T18:32:39Z", "message": "update the grpc example to remove global usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64674fa8d75bc49967df0250ead0ba75f97e40d6", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/64674fa8d75bc49967df0250ead0ba75f97e40d6", "committedDate": "2020-12-18T19:22:27Z", "message": "update the http example to remove global usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed3ca15e47997f25ad1994d432446c25ce52ab8", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ed3ca15e47997f25ad1994d432446c25ce52ab8", "committedDate": "2020-12-18T19:57:21Z", "message": "update the jaeger example to get rid of the global usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9576162ee43befe174211927182886de23d8202", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c9576162ee43befe174211927182886de23d8202", "committedDate": "2020-12-18T20:04:46Z", "message": "update the metrics example to get rid of the global OpenTelemetry usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eade69a84d8ca07d5de6775af77bfdafef27b98", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9eade69a84d8ca07d5de6775af77bfdafef27b98", "committedDate": "2020-12-18T20:15:15Z", "message": "update the otlp exporter example to get rid of the global OpenTelemetry usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46bc75651631d8fe4e9d04365d8096d41197d14f", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/46bc75651631d8fe4e9d04365d8096d41197d14f", "committedDate": "2020-12-18T21:03:30Z", "message": "update the sdk-usage example to get rid of the global OpenTelemetry usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89286022c01ca1e97314ac58e754c2d812bfcce7", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89286022c01ca1e97314ac58e754c2d812bfcce7", "committedDate": "2020-12-18T21:12:52Z", "message": "update the zipkin example to get rid of the global OpenTelemetry usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ffce39513a0f5924f8ccf199a6e0d677d49eaed0", "committedDate": "2020-12-18T21:21:38Z", "message": "run the formatter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODM0NTA0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#pullrequestreview-555834504", "createdAt": "2020-12-18T21:50:06Z", "commit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MDowNlrOIIzvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NTowOVrOIIz2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzI4NA==", "bodyText": "s/initTracing/initOpenTelemetry?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107284", "createdAt": "2020-12-18T21:50:06Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java", "diffHunk": "@@ -116,29 +116,25 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n-  private static void initTracing() {\n+  private static OpenTelemetry initTracing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng==", "bodyText": "Add a TODO to use the new builder option addTracerProvider", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107786", "createdAt": "2020-12-18T21:51:34Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "diffHunk": "@@ -163,6 +162,19 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+    // install the W3C Trace Context propagator\n+    // Get the tracer management instance\n+    SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzk2MQ==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107961", "createdAt": "2020-12-18T21:52:03Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java", "diffHunk": "@@ -166,25 +166,20 @@ public void onCompleted() {\n     }\n   }\n \n-  private static void initTracing() {\n-    // install the W3C Trace Context propagator\n-    // Get the tracer management instance\n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n     // Set to process the the spans by the LogExporter\n     sdkTracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODA5Mw==", "bodyText": "ditto (rename method name)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108093", "createdAt": "2020-12-18T21:52:30Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -30,28 +30,26 @@\n public class HttpClient {\n \n   // OTel API\n+  private static final LoggingSpanExporter loggingExporter = new LoggingSpanExporter();\n+  private static final OpenTelemetry openTelemetry = initTracing(loggingExporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODIwOA==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108208", "createdAt": "2020-12-18T21:52:47Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -20,22 +20,72 @@\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import io.opentelemetry.exporter.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.SdkTracerManagement;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.net.InetSocketAddress;\n import java.nio.charset.Charset;\n \n public class HttpServer {\n+  // OTel API\n+  private static final OpenTelemetry openTelemetry = initTracing(new LoggingSpanExporter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODc2Ng==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108766", "createdAt": "2020-12-18T21:54:16Z", "author": {"login": "bogdandrutu"}, "path": "examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java", "diffHunk": "@@ -2,29 +2,26 @@\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.api.trace.Tracer;\n import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SdkTracerManagement;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n \n public class JaegerExample {\n \n-  // Jaeger Endpoint URL and PORT\n-  private final String ip; // = \"jaeger\";\n-  private final int port; // = 14250;\n-\n   // OTel API\n-  private final Tracer tracer =\n-      OpenTelemetry.getGlobalTracer(\"io.opentelemetry.example.JaegerExample\");\n+  private final SdkTracerManagement sdkTracerManagement;\n+  private final Tracer tracer;\n \n   public JaegerExample(String ip, int port) {\n-    this.ip = ip;\n-    this.port = port;\n+    OpenTelemetrySdk sdk = setupTracing(ip, port);\n+    this.sdkTracerManagement = sdk.getTracerManagement();\n+    tracer = sdk.getTracer(\"io.opentelemetry.example.JaegerExample\");\n   }\n \n-  private void setupJaegerExporter() {\n+  private OpenTelemetrySdk setupTracing(String ip, int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwOTA5NA==", "bodyText": "s/31/13", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546109094", "createdAt": "2020-12-18T21:55:09Z", "author": {"login": "bogdandrutu"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -20,11 +21,11 @@\n  * extensions.\n  */\n public class DoubleCounterExample {\n-\n+  private static final OpenTelemetry openTelemetry = DefaultOpenTelemetry.builder().build();\n   private static final Tracer tracer =\n-      GlobalOpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      openTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.31.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02d4cba0c635702ad02488284d65eff89753612", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e02d4cba0c635702ad02488284d65eff89753612", "committedDate": "2020-12-18T22:34:06Z", "message": "update method names and details based on feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODg5NzQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#pullrequestreview-555889744", "createdAt": "2020-12-19T00:11:32Z", "commit": {"oid": "e02d4cba0c635702ad02488284d65eff89753612"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3472, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}