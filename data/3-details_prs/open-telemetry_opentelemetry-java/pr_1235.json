{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTAyNTY3", "number": 1235, "title": "Separating the B3 logic for Single and Multiple headers", "bodyText": "Fixes #999\nI have separated out the Single and Multiple headers logic for Injector and Extractor.\nThe structure would be something like this\n\n\nabstract B3PropagatorInjector\n\nfinal B3PropagatorInjectorSingleHeader\nfinal B3PropagatorInjectorMultipleHeaders\n\n\n\nabstract B3PropagatorExtractor\n\nfinal B3PropagatorExtractorSingleHeader\nfinal B3PropagatorExtractorMultipleHeaders", "createdAt": "2020-05-17T11:57:57Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235", "merged": true, "mergeCommit": {"oid": "2577fc71a01f75fb4900dc2f13e1922f8cf6409e"}, "closed": true, "closedAt": "2020-05-26T17:26:06Z", "author": {"login": "ksameersrk"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciJ4PcgH2gAyNDE5MTAyNTY3OjYzZWQzODc3MWVhMzUyYTBjZmE1OGQ3MGM5ZDBhY2RkYmFmNTZlZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclFMffgH2gAyNDE5MTAyNTY3OjA0NDc3Nzc1ODYzN2Y4YjIzZTc2NzQyOGExODFmMTExMjRjMmRmYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/63ed38771ea352a0cfa58d70c9d0acddbaf56ed6", "committedDate": "2020-05-17T11:50:05Z", "message": "Separating the B3 logic for Single and Multiple headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzAwNDU2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-413300456", "createdAt": "2020-05-18T06:25:56Z", "commit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjMyOTQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-413632949", "createdAt": "2020-05-18T14:11:43Z", "commit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzE5NTQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-413719546", "createdAt": "2020-05-18T15:46:16Z", "commit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo0NjoxNlrOGW9Gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo0NjoxNlrOGW9Gow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ==", "bodyText": "use a create factory method instead of a public ctor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426722979", "createdAt": "2020-05-18T15:46:16Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f59c3278a5002eaa29778286ddd8ef694a0e5352", "committedDate": "2020-05-20T16:30:42Z", "message": "Refactored to static variables for Single/Multi Headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjEyNjcy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-415612672", "createdAt": "2020-05-20T18:35:42Z", "commit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNTo0MlrOGYY3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNTo0MlrOGYY3cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNjQxNg==", "bodyText": "This field won't create a new instance. The javadoc should say that it will return an instance and describe it's functionality, rather than the internal implementation.  (same comment goes for the multi-header field)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428226416", "createdAt": "2020-05-20T18:35:42Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjE0MTcz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-415614173", "createdAt": "2020-05-20T18:37:37Z", "commit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNzozN1rOGYY9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNzozN1rOGYY9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyODA5Mg==", "bodyText": "since this constructor is private, and only called from the field declarations, you could just inline the boolean logic into the call sites (i.e. get rid of the boolean and just pass in the two implementations that you want in the right constructor calls)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428228092", "createdAt": "2020-05-20T18:37:37Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorSingleHeader} and {@link B3PropagatorExtractorSingleHeader}.\n+   */\n+  public static final B3Propagator SINGLE_HEADER = new B3Propagator(/* singleHeader= */ true);\n+\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorMultipleHeaders} and {@link B3PropagatorExtractorMultipleHeaders}.\n+   */\n+  public static final B3Propagator MULTI_HEADER = new B3Propagator(/* singleHeader= */ false);\n \n   /**\n    * Creates a new instance of {@link B3Propagator}.\n    *\n    * @param singleHeader whether to use single or multiple headers.\n    */\n-  public B3Propagator(boolean singleHeader) {\n-    b3PropagatorInjector = new B3PropagatorInjector(singleHeader);\n-    b3PropagatorExtractor = new B3PropagatorExtractor(singleHeader);\n+  private B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1cc7bb27d197e48cfa5df4446536b9b441eb3fa", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e1cc7bb27d197e48cfa5df4446536b9b441eb3fa", "committedDate": "2020-05-20T19:01:40Z", "message": "Fixes review comments - javadoc and ctor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "256e82fd7f64f03eb3057509e1841f40898c2580", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/256e82fd7f64f03eb3057509e1841f40898c2580", "committedDate": "2020-05-21T01:06:19Z", "message": "exposing B3Propagator via static getters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a01594f2f435445b3bc2387401fb40c126bde439", "committedDate": "2020-05-21T13:59:08Z", "message": "Dummy commit to test the build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzUwODMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-416350831", "createdAt": "2020-05-21T17:34:04Z", "commit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDowNFrOGY8LVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDowNFrOGY8LVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNDk1MQ==", "bodyText": "What do you think of making this an interface, rather than an abstract class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428804951", "createdAt": "2020-05-21T17:34:04Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -18,59 +18,9 @@\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n-import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.SpanContext;\n-import io.opentelemetry.trace.SpanId;\n-import io.opentelemetry.trace.TraceId;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorInjector {\n-  private static final int SAMPLED_FLAG_SIZE = 1;\n-  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n-  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n-  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n-  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n-  private static final int SAMPLED_FLAG_OFFSET =\n-      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n-  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n-\n-  private final boolean singleHeader;\n-\n-  B3PropagatorInjector(boolean singleHeader) {\n-    this.singleHeader = singleHeader;\n-  }\n-\n-  <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {\n-    Objects.requireNonNull(context, \"context\");\n-    Objects.requireNonNull(setter, \"setter\");\n-\n-    Span span = TracingContextUtils.getSpanWithoutDefault(context);\n-    if (span == null) {\n-      return;\n-    }\n-\n-    SpanContext spanContext = span.getContext();\n-    String sampled =\n-        spanContext.getTraceFlags().isSampled() ? B3Propagator.TRUE_INT : B3Propagator.FALSE_INT;\n-\n-    if (singleHeader) {\n-      char[] chars = new char[COMBINED_HEADER_SIZE];\n-      spanContext.getTraceId().copyLowerBase16To(chars, 0);\n-      chars[SPAN_ID_OFFSET - 1] = B3Propagator.COMBINED_HEADER_DELIMITER_CHAR;\n-      spanContext.getSpanId().copyLowerBase16To(chars, SPAN_ID_OFFSET);\n-      chars[SAMPLED_FLAG_OFFSET - 1] = B3Propagator.COMBINED_HEADER_DELIMITER_CHAR;\n-      chars[SAMPLED_FLAG_OFFSET] =\n-          spanContext.getTraceFlags().isSampled()\n-              ? B3Propagator.IS_SAMPLED\n-              : B3Propagator.NOT_SAMPLED;\n-      setter.set(carrier, B3Propagator.COMBINED_HEADER, new String(chars));\n-    } else {\n-      setter.set(carrier, B3Propagator.TRACE_ID_HEADER, spanContext.getTraceId().toLowerBase16());\n-      setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanId().toLowerBase16());\n-      setter.set(carrier, B3Propagator.SAMPLED_HEADER, sampled);\n-    }\n-  }\n+abstract class B3PropagatorInjector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzUxMTY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-416351169", "createdAt": "2020-05-21T17:34:30Z", "commit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDozMFrOGY8MQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDozMFrOGY8MQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA==", "bodyText": "What do think about making this an interface, rather than an abstract class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428805184", "createdAt": "2020-05-21T17:34:30Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb2414351f915ad020f3e2c61ad3f6e1bcaff02", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/deb2414351f915ad020f3e2c61ad3f6e1bcaff02", "committedDate": "2020-05-21T18:23:21Z", "message": "Converted the abstract class into interface for injector/extractor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mzg3NzIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#pullrequestreview-416387723", "createdAt": "2020-05-21T18:26:41Z", "commit": {"oid": "deb2414351f915ad020f3e2c61ad3f6e1bcaff02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044777758637f8b23e767428a181f11124c2dfaa", "author": {"user": {"login": "ksameersrk", "name": "Sameer Kulkarni"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/044777758637f8b23e767428a181f11124c2dfaa", "committedDate": "2020-05-26T14:04:27Z", "message": "Merge branch 'master' into separate_b3_logic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2734, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}