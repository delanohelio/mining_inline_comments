{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjQ2ODc5", "number": 1619, "title": "Add a generic type for the key on the ImmutableKeyValuePairs.", "bodyText": "This is step 1 toward implementing keyed-attributes (#1580). The plan is to use the existing storage for the new style of Attributes. Because the keys will now not be Strings, but be typed-key wrappers for Strings, we need to make the key in the ImmutableKeyValuePairs be generic as well, since I was not planning on changing the Labels implementation to be keyed by anything but plain Strings.\nI actually think the addition of the helper interfaces for LabelConsumer and AttributeConsumer is a good change, even if we don't end up implementing keyed-attributes.\nIn order to not cause a conflict with the AttributesMap as a HashMap extension, I made the AttributesMap wrap a map, rather than extend it.\nThis also introduced convenience sub-interfaces for consuming labels and attributes, so consumers don't have to worry about the types if they don't want to.", "createdAt": "2020-09-02T23:44:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619", "merged": true, "mergeCommit": {"oid": "d42d4cd9e2d79c8e5bdc3c43aac5e077f4147794"}, "closed": true, "closedAt": "2020-09-09T02:18:59Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFJjF-AFqTQ4MTQ5NDU0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHB0BfAFqTQ4NDU5MzgwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDk0NTQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#pullrequestreview-481494540", "createdAt": "2020-09-03T05:04:36Z", "commit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTowNDozN1rOHMWCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNToxMzo0MFrOHMWMRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjA4OQ==", "bodyText": "I think for these sort of interfaces, at least until we're on Java 8 someday, we can add a comment like. This is a FunctionalInterface and will not have methods added to it - it is safe to use as a lambda without chance of API breakage. The reason we don't add the annotation is we target Java 7.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482706089", "createdAt": "2020-09-03T05:04:37Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/** Convenience interface for consuming {@link ReadableAttributes}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjE5MA==", "bodyText": "Ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482706190", "createdAt": "2020-09-03T05:04:56Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/LabelConsumer.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import io.opentelemetry.common.ReadableKeyValuePairs.KeyValueConsumer;\n+\n+/** Convenience interface for consuming {@link Labels}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzE0OA==", "bodyText": "I don't quite follow the PR description about clashing with Map - we don't inherit from Map so there's no clash right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482707148", "createdAt": "2020-09-03T05:08:16Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -21,4 +21,6 @@\n  *\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n-public interface ReadableAttributes extends ReadableKeyValuePairs<AttributeValue> {}\n+public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n+  AttributeValue getValue(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwODU1MA==", "bodyText": "I can't find this type parameter used in #1598. Why do we need a type parameter for the key? Don't we always use String for the key? Accessors may use specialized types for type safety though\nAttributes {\n  void set(StringKey, String value)\n  void set(BooleanKey, boolean value)\n  void set(Key<T>, T value)\n\n  String getString(StringKey);\n  Boolean getBoolean(BooleanKey);\n}\n\nI don't see a generic parameter for the key needed here, am I missing anything?\nAlso, I realized the typed keys isn't great for getters \ud83d\ude05 It might be a reason why in grpc-context, the \"setters\" (e.g., Context.withValue) accept key as a parameter, and getting is something like MyKey.get(context). Since we don't have getters though not a big deal just noticed it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r482708550", "createdAt": "2020-09-03T05:13:40Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableKeyValuePairs.java", "diffHunk": "@@ -16,39 +16,28 @@\n \n package io.opentelemetry.common;\n \n-import javax.annotation.Nullable;\n-\n /**\n  * A read-only container for String-keyed attributes.\n  *\n  * @param <V> The type of the values contained in this.\n  */\n-public interface ReadableKeyValuePairs<V> {\n+public interface ReadableKeyValuePairs<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71365ee601fae64a09122d788b8b44d59080185f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/71365ee601fae64a09122d788b8b44d59080185f", "committedDate": "2020-09-02T23:38:16Z", "message": "Add a generic type for the key on the ImmutableKeyValuePairs.\nThis necessitated changing the `get` to `getValue` to avoid clashing with the java.util.Map interface.\nAlso introduced convenience sub-interfaces for consuming labels and attributes, so consumers don't have to worry about the types if they don't want to."}, "afterCommit": {"oid": "beab30448468182ef1a958b396f9cab55d101d32", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/beab30448468182ef1a958b396f9cab55d101d32", "committedDate": "2020-09-03T18:16:53Z", "message": "Add some javadoc to the new interfaces."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15651761e647403d5f34df45cca39352ed14e5e8", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15651761e647403d5f34df45cca39352ed14e5e8", "committedDate": "2020-09-08T16:45:06Z", "message": "Add a generic type for the key on the ImmutableKeyValuePairs.\nThis necessitated changing the `get` to `getValue` to avoid clashing with the java.util.Map interface.\nAlso introduced convenience sub-interfaces for consuming labels and attributes, so consumers don't have to worry about the types if they don't want to."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d1566c4de6ec2c985dfa323cb2bee383678f58", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84d1566c4de6ec2c985dfa323cb2bee383678f58", "committedDate": "2020-09-08T16:45:06Z", "message": "Add some javadoc to the new interfaces."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "committedDate": "2020-09-08T16:45:06Z", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4379f5c46b731a5269284e6de60c1ae31933edba", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4379f5c46b731a5269284e6de60c1ae31933edba", "committedDate": "2020-09-08T14:58:44Z", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes."}, "afterCommit": {"oid": "73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c2865d67c68fe37e0692fa4632c31a1b8aa5bd", "committedDate": "2020-09-08T16:45:06Z", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e75e01a282b21d9e03ba17c4671b3967abf3ef6a", "committedDate": "2020-09-08T17:23:25Z", "message": "make ImmutableKeyValuePairs also have a parameterized key type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTkzODAz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#pullrequestreview-484593803", "createdAt": "2020-09-09T01:20:09Z", "commit": {"oid": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMDoxMFrOHOzNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMToxMVrOHOzOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTA2MA==", "bodyText": "I think it's worth returning the existing item like Map since it's familiar and opens more use cases without extra work. It's not backwards-compatible to change return value of a method unfortunately.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485281060", "createdAt": "2020-09-09T01:20:10Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -17,84 +17,83 @@\n package io.opentelemetry.sdk.trace;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.common.ReadableAttributes;\n import java.util.HashMap;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n /**\n- * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ * A map with a fixed capacity that drops attributes when the map gets full.\n  *\n- * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n- * capacity.\n+ * <p>Note: this doesn't implement the Map interface, but behaves very similarly to one.\n  */\n-final class AttributesMap extends HashMap<String, AttributeValue> implements ReadableAttributes {\n+final class AttributesMap implements ReadableAttributes {\n+  private final Map<String, AttributeValue> data = new HashMap<>();\n \n   private final long capacity;\n   private int totalAddedValues = 0;\n-  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n-  // has no definition of serialVersionUID. This class shouldn't be serialized.\n-  private static final long serialVersionUID = 42L;\n \n   AttributesMap(long capacity) {\n     this.capacity = capacity;\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue put(String key, AttributeValue value) {\n+  public void put(String key, AttributeValue value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTMzOQ==", "bodyText": "Ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1619#discussion_r485281339", "createdAt": "2020-09-09T01:21:11Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -17,84 +17,83 @@\n package io.opentelemetry.sdk.trace;\n \n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n import io.opentelemetry.common.ReadableAttributes;\n import java.util.HashMap;\n import java.util.Map;\n import javax.annotation.Nullable;\n \n /**\n- * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ * A map with a fixed capacity that drops attributes when the map gets full.\n  *\n- * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n- * capacity.\n+ * <p>Note: this doesn't implement the Map interface, but behaves very similarly to one.\n  */\n-final class AttributesMap extends HashMap<String, AttributeValue> implements ReadableAttributes {\n+final class AttributesMap implements ReadableAttributes {\n+  private final Map<String, AttributeValue> data = new HashMap<>();\n \n   private final long capacity;\n   private int totalAddedValues = 0;\n-  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n-  // has no definition of serialVersionUID. This class shouldn't be serialized.\n-  private static final long serialVersionUID = 42L;\n \n   AttributesMap(long capacity) {\n     this.capacity = capacity;\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue put(String key, AttributeValue value) {\n+  public void put(String key, AttributeValue value) {\n     totalAddedValues++;\n-    if (size() >= capacity && !containsKey(key)) {\n-      return null;\n-    }\n-    return super.put(key, value);\n-  }\n-\n-  @Override\n-  public void putAll(Map<? extends String, ? extends AttributeValue> values) {\n-    for (Map.Entry<? extends String, ? extends AttributeValue> entry : values.entrySet()) {\n-      put(entry.getKey(), entry.getValue());\n+    if (data.size() >= capacity && !data.containsKey(key)) {\n+      return;\n     }\n+    data.put(key, value);\n   }\n \n-  @Nullable\n-  @Override\n-  public AttributeValue remove(Object key) {\n-    return super.remove(key);\n-  }\n-\n-  // Added as public to override the newly added methods in java8, so when we do the switch and\n-  // start using them we remember to fix them and count the number of attributes added.\n-\n-  @SuppressWarnings(\"MissingOverride\")\n-  public AttributeValue putIfAbsent(String key, AttributeValue value) {\n-    throw new UnsupportedOperationException(\"Do not call methods on the map\");\n+  void remove(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75e01a282b21d9e03ba17c4671b3967abf3ef6a"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2432, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}