{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODg2OTA2", "number": 1913, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNDowN1rOEzDyYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NjowOFrOEzEYqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc0ODgyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNDowN1rOHqDCwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTozNjo0OVrOHqD13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjA5OA==", "bodyText": "try/resources the scopes - guessing you had to add the root.makeCurrent to the other tests because of missing closing here but we should have tests not interfere with each other :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513852098", "createdAt": "2020-10-29T01:14:07Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.baggage;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.context.Context;\n+import org.junit.jupiter.api.Test;\n+\n+class BaggageTest {\n+  @Test\n+  void current_empty() {\n+    Context.root().makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjM1OQ==", "bodyText": "Though I don't think I'd make the root current here anyways, can leave this out to test \"the default\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513852359", "createdAt": "2020-10-29T01:14:39Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.baggage;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.context.Context;\n+import org.junit.jupiter.api.Test;\n+\n+class BaggageTest {\n+  @Test\n+  void current_empty() {\n+    Context.root().makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjA5OA=="}, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2NTE4Mw==", "bodyText": "Though I don't think I'd make the root current here anyways, can leave this out to test \"the default\".\n\nassuming everyone else has properly closed their scopes! unlike me, apparently.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513865183", "createdAt": "2020-10-29T01:36:49Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.baggage;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.context.Context;\n+import org.junit.jupiter.api.Test;\n+\n+class BaggageTest {\n+  @Test\n+  void current_empty() {\n+    Context.root().makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjA5OA=="}, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc1MTgxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNTowN1rOHqDEwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToyNjoyM1rOHqDbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjYwOA==", "bodyText": "Ditto, don't make the root current, it's the default.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513852608", "createdAt": "2020-10-29T01:15:07Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageUtilsTest.java", "diffHunk": "@@ -9,10 +9,16 @@\n \n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.Scope;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class BaggageUtilsTest {\n \n+  @BeforeEach\n+  void setUp() {\n+    Context.root().makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1ODQzMg==", "bodyText": "yeah, this was my tired brain doing something silly. Interestingly, it did fix up all the tests!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513858432", "createdAt": "2020-10-29T01:26:23Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/BaggageUtilsTest.java", "diffHunk": "@@ -9,10 +9,16 @@\n \n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.Scope;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n class BaggageUtilsTest {\n \n+  @BeforeEach\n+  void setUp() {\n+    Context.root().makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MjYwOA=="}, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc1MzAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/baggage/ScopedBaggageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNToyOVrOHqDFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNToyOVrOHqDFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1Mjc5Mw==", "bodyText": "Ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513852793", "createdAt": "2020-10-29T01:15:29Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/ScopedBaggageTest.java", "diffHunk": "@@ -29,6 +31,11 @@\n       EntryMetadata.create(\"unlimited\");\n   private static final EntryMetadata METADATA_NO_PROPAGATION = EntryMetadata.create(\"noprop\");\n \n+  @BeforeEach\n+  void setUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "097d4302ca01b330d7853bb6dcbd7fbbf7bacd3e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTg0NjgzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/baggage/ScopedBaggageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NjowOFrOHqEECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTo0NjowOFrOHqEECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg2ODgxMQ==", "bodyText": "Let's remove the scope - just to make sure to test what happens when makeCurrent hasn't ever been called", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1913#discussion_r513868811", "createdAt": "2020-10-29T01:46:08Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/baggage/ScopedBaggageTest.java", "diffHunk": "@@ -31,15 +30,12 @@\n       EntryMetadata.create(\"unlimited\");\n   private static final EntryMetadata METADATA_NO_PROPAGATION = EntryMetadata.create(\"noprop\");\n \n-  @BeforeEach\n-  void setUp() {\n-    Context.root().makeCurrent();\n-  }\n-\n   @Test\n   void emptyBaggage() {\n-    Baggage defaultBaggage = BaggageUtils.getCurrentBaggage();\n-    assertThat(defaultBaggage.getEntries()).isEmpty();\n+    try (Scope s = Context.root().makeCurrent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1d4f297dc977a44d39ffc7a5501864ffb26e1c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2037, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}