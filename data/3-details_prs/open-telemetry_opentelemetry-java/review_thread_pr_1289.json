{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0OTQwODQz", "number": 1289, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOToyMVrOEA-M4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxOTowMlrOEBZqeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU0NTYwOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOToyMVrOGclN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOToyMVrOGclN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzA4NA==", "bodyText": "since we're pre-1.0, I think we can just delete this if it's not the recommended way to do the work.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r432623084", "createdAt": "2020-05-29T17:09:21Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -16,16 +16,16 @@\n \n package io.opentelemetry.sdk.contrib.trace.aws;\n \n-import com.amazonaws.util.EC2MetadataUtils;\n-import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.contrib.trace.aws.resource.AwsResourcePopulator;\n import io.opentelemetry.sdk.resources.Resource;\n-import io.opentelemetry.sdk.resources.ResourceConstants;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.annotation.Nullable;\n \n-/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+/**\n+ * Provides for lookup and population of {@link Resource} labels when running on AWS EC2.\n+ *\n+ * @deprecated Use {@link AwsResourcePopulator}.\n+ */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDU1NDg1OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxMjoyNVrOGclT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo0ODo1MFrOGc8aWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDYwMQ==", "bodyText": "Rather than having a side-effect driven API for this, how about having the populator just return the map, and then do an putAll with the result each time?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r432624601", "createdAt": "2020-05-29T17:12:25Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResourcePopulator {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource createResource() {\n+    return createResource(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource createResource(AwsResourcePopulator... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();\n+\n+    for (AwsResourcePopulator populator : populators) {\n+      populator.populate(resourceAttributes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMzA5Ng==", "bodyText": "Yeah since this is just a server singleton makes sense, done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433003096", "createdAt": "2020-06-01T00:48:50Z", "author": {"login": "anuraaga"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResourcePopulator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResourcePopulator {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource createResource() {\n+    return createResource(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource createResource(AwsResourcePopulator... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();\n+\n+    for (AwsResourcePopulator populator : populators) {\n+      populator.populate(resourceAttributes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDYwMQ=="}, "originalCommit": {"oid": "5b895f0f00782536b43cbf1005ecdd5ccfeb6b45"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTA0NTA0OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxOTowMlrOGdOang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMzozMlrOGdVgfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA==", "bodyText": "Is it important that we use an ordered-key map implementation here? If so, please add some documentation as to why.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433298078", "createdAt": "2020-06-01T15:19:02Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResource {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource create() {\n+    return create(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource create(AwsResource... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b0d9e79a5c748a8a936acec7cd96b15a664587"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNTgwOQ==", "bodyText": "I tend to use LinkedHashMap when the allocation impact isn't large like these singleton-like objects so order mattering doesn't affect things, if not now then down the line. I suspect Resource.create does too for similar reasons. If it's helpful to add that as a comment let me know I'll add it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433335809", "createdAt": "2020-06-01T16:06:35Z", "author": {"login": "anuraaga"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResource {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource create() {\n+    return create(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource create(AwsResource... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA=="}, "originalCommit": {"oid": "f6b0d9e79a5c748a8a936acec7cd96b15a664587"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDI2OQ==", "bodyText": "I do see that Resource.create does wrap the map in a LinkedHashMap implementation, but there's no documentation as to why there, either. If an interface takes a Map, it should definitely assume it won't be ordered, unless there's a very good reason for it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1289#discussion_r433414269", "createdAt": "2020-06-01T18:33:32Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/resource/AwsResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/** Populates the attributes for creating a {@link Resource} that is running in AWS. */\n+public abstract class AwsResource {\n+\n+  /**\n+   * Returns a {@link Resource} which is filled with attributes describing the current AWS\n+   * environment, e.g., metadata for the instance if the app is running on EC2.\n+   */\n+  public static Resource create() {\n+    return create(new Ec2ResourcePopulator());\n+  }\n+\n+  @VisibleForTesting\n+  static Resource create(AwsResource... populators) {\n+    Map<String, AttributeValue> resourceAttributes = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5ODA3OA=="}, "originalCommit": {"oid": "f6b0d9e79a5c748a8a936acec7cd96b15a664587"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 754, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}