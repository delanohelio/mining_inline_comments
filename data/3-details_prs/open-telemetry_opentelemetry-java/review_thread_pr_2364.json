{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzc4MTY0", "number": 2364, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MDowNlrOFHW2JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NTowOVrOFHW6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU4NjYwOnYy", "diffSide": "RIGHT", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MDowNlrOIIzvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MDowNlrOIIzvlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzI4NA==", "bodyText": "s/initTracing/initOpenTelemetry?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107284", "createdAt": "2020-12-18T21:50:06Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClient.java", "diffHunk": "@@ -116,29 +116,25 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n-  private static void initTracing() {\n+  private static OpenTelemetry initTracing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU4OTcwOnYy", "diffSide": "RIGHT", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MTozNFrOIIzxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMjoxNjowM1rOII0T7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng==", "bodyText": "Add a TODO to use the new builder option addTracerProvider", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107786", "createdAt": "2020-12-18T21:51:34Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "diffHunk": "@@ -163,6 +162,19 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+    // install the W3C Trace Context propagator\n+    // Get the tracer management instance\n+    SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExNDkwNA==", "bodyText": "I assume you mean addSpanProcessor(). Yes, we'll need to do this after we publish the next release, but I didn't want to confuse users looking at our docs with TODOs from unreleased changes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546114904", "createdAt": "2020-12-18T22:11:18Z", "author": {"login": "jkwatson"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "diffHunk": "@@ -163,6 +162,19 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+    // install the W3C Trace Context propagator\n+    // Get the tracer management instance\n+    SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng=="}, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjExNjU4OA==", "bodyText": "K", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546116588", "createdAt": "2020-12-18T22:16:03Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldClientStream.java", "diffHunk": "@@ -163,6 +162,19 @@ public void start(Listener<RespT> responseListener, Metadata headers) {\n     }\n   }\n \n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n+    // install the W3C Trace Context propagator\n+    // Get the tracer management instance\n+    SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzc4Ng=="}, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU5MDcyOnYy", "diffSide": "RIGHT", "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MjowM1rOIIzyOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MjowM1rOIIzyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzk2MQ==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546107961", "createdAt": "2020-12-18T21:52:03Z", "author": {"login": "bogdandrutu"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/grpc/HelloWorldServer.java", "diffHunk": "@@ -166,25 +166,20 @@ public void onCompleted() {\n     }\n   }\n \n-  private static void initTracing() {\n-    // install the W3C Trace Context propagator\n-    // Get the tracer management instance\n+  private static OpenTelemetry initTracing(LoggingSpanExporter exporter) {\n     SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder().build();\n     // Set to process the the spans by the LogExporter\n     sdkTracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU5MTQ5OnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MjozMFrOIIzyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1MjozMFrOIIzyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODA5Mw==", "bodyText": "ditto (rename method name)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108093", "createdAt": "2020-12-18T21:52:30Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -30,28 +30,26 @@\n public class HttpClient {\n \n   // OTel API\n+  private static final LoggingSpanExporter loggingExporter = new LoggingSpanExporter();\n+  private static final OpenTelemetry openTelemetry = initTracing(loggingExporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU5MjMwOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Mjo0N1rOIIzzMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Mjo0N1rOIIzzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODIwOA==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108208", "createdAt": "2020-12-18T21:52:47Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -20,22 +20,72 @@\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import io.opentelemetry.exporter.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.trace.SdkTracerManagement;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.net.InetSocketAddress;\n import java.nio.charset.Charset;\n \n public class HttpServer {\n+  // OTel API\n+  private static final OpenTelemetry openTelemetry = initTracing(new LoggingSpanExporter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU5NTg1OnYy", "diffSide": "RIGHT", "path": "examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NDoxNlrOIIz1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NDoxNlrOIIz1Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwODc2Ng==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546108766", "createdAt": "2020-12-18T21:54:16Z", "author": {"login": "bogdandrutu"}, "path": "examples/jaeger/src/main/java/io/opentelemetry/example/jaeger/JaegerExample.java", "diffHunk": "@@ -2,29 +2,26 @@\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.api.trace.Tracer;\n import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SdkTracerManagement;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n \n public class JaegerExample {\n \n-  // Jaeger Endpoint URL and PORT\n-  private final String ip; // = \"jaeger\";\n-  private final int port; // = 14250;\n-\n   // OTel API\n-  private final Tracer tracer =\n-      OpenTelemetry.getGlobalTracer(\"io.opentelemetry.example.JaegerExample\");\n+  private final SdkTracerManagement sdkTracerManagement;\n+  private final Tracer tracer;\n \n   public JaegerExample(String ip, int port) {\n-    this.ip = ip;\n-    this.port = port;\n+    OpenTelemetrySdk sdk = setupTracing(ip, port);\n+    this.sdkTracerManagement = sdk.getTracerManagement();\n+    tracer = sdk.getTracer(\"io.opentelemetry.example.JaegerExample\");\n   }\n \n-  private void setupJaegerExporter() {\n+  private OpenTelemetrySdk setupTracing(String ip, int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjU5NzkyOnYy", "diffSide": "RIGHT", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NTowOVrOIIz2pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1NTowOVrOIIz2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwOTA5NA==", "bodyText": "s/31/13", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2364#discussion_r546109094", "createdAt": "2020-12-18T21:55:09Z", "author": {"login": "bogdandrutu"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -20,11 +21,11 @@\n  * extensions.\n  */\n public class DoubleCounterExample {\n-\n+  private static final OpenTelemetry openTelemetry = DefaultOpenTelemetry.builder().build();\n   private static final Tracer tracer =\n-      GlobalOpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      openTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.31.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffce39513a0f5924f8ccf199a6e0d677d49eaed0"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1582, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}