{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODQ5NjQy", "number": 1038, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoxNTo1N1rODqN5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMTo0NVrODqSVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk0Mzc1OnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoxNTo1N1rOF51Icg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1ODoyMVrOF8meNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng==", "bodyText": "Why do we need this change? Can you document if this is required why.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396183666", "createdAt": "2020-03-23T02:15:57Z", "author": {"login": "bogdandrutu"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzNjYxNA==", "bodyText": "Yeap, left link in commit, here it is\nhttps://www.testcontainers.org/supported_docker_environment/continuous_integration/circle_ci/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396236614", "createdAt": "2020-03-23T06:38:04Z", "author": {"login": "DotSpy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNzc1NQ==", "bodyText": "Can we add the link as a comment below this line? Better be safe than sorry (also would prevent future changes from removing it 'accidentally')", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396807755", "createdAt": "2020-03-23T22:59:37Z", "author": {"login": "carlosalberto"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTYwMQ==", "bodyText": "Yeap i'll add", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396975601", "createdAt": "2020-03-24T08:29:32Z", "author": {"login": "vladislav-kiva"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNTc2OA==", "bodyText": "Can you give a try to see if it does not work without this change?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r398915768", "createdAt": "2020-03-26T21:53:50Z", "author": {"login": "bogdandrutu"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTIwNA==", "bodyText": "i was doing it, it was not working until commit\n68caa90\nthere was some error like docker not running", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r399089204", "createdAt": "2020-03-27T07:58:21Z", "author": {"login": "vladislav-kiva"}, "path": ".circleci/config.yml", "diffHunk": "@@ -19,6 +19,7 @@ publish_release_task: &publish_release_task\n   name: Publish Release Artifacts\n   command: make publish-release-artifacts\n \n+executorType: machine", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MzY2Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk0ODM3OnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyMDowMlrOF51LWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxNDoxNVrOF55BWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA==", "bodyText": "Can we file an issue to remove the serviceName from the Jaeger config and use the Resource to define service?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396184408", "createdAt": "2020-03-23T02:20:02Z", "author": {"login": "bogdandrutu"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzNzQ1Mw==", "bodyText": "I would not rather removing, but adding a possibility to configure whole jaeger exporter with config file", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396237453", "createdAt": "2020-03-23T06:41:10Z", "author": {"login": "DotSpy"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NzM4NQ==", "bodyText": "@bogdandrutu it exists already: #978", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396247385", "createdAt": "2020-03-23T07:14:15Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjMzOTY4OnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzoxOFrOF544kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzowNzoxOFrOF544kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String JAEGER_IP = \"http://localhost\";\n          \n          \n            \n              private static final String JAEGER_URL = \"http://localhost\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396245137", "createdAt": "2020-03-23T07:07:18Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjM0NTQzOnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxMDowOFrOF548Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODozMzo0N1rOF57GHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjA0Ng==", "bodyText": "Maybe use getClass().getCanonicalName()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246046", "createdAt": "2020-03-23T07:10:08Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4MTM3NQ==", "bodyText": "Thanks for review @thisthat actually i would like it, but in whole code in project i saw we using string approach", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396281375", "createdAt": "2020-03-23T08:33:47Z", "author": {"login": "DotSpy"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjA0Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjM0OTM2OnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxMjoxMlrOF54-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxNjoxNVrOF55D8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ==", "bodyText": "I would move this method after the definition of the jaeger container", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246669", "createdAt": "2020-03-23T07:12:12Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODA0OQ==", "bodyText": "Also, WDYT about adding @before?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248049", "createdAt": "2020-03-23T07:16:15Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjM1OTI4OnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoxNjo0MFrOF55EhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo0MToyNFrOF7-j_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng==", "bodyText": "this can be add to a SetUp method - see my other comment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248196", "createdAt": "2020-03-23T07:16:40Z", "author": {"login": "thisthat"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4MzM2OQ==", "bodyText": "yeap good point", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396283369", "createdAt": "2020-03-23T08:37:45Z", "author": {"login": "DotSpy"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMjYzNg==", "bodyText": "You should remove the call to  setupJaegerExporter();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r398032636", "createdAt": "2020-03-25T17:20:40Z", "author": {"login": "bogdandrutu"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQzNTMyNw==", "bodyText": "yeap, forgot, done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r398435327", "createdAt": "2020-03-26T09:41:24Z", "author": {"login": "DotSpy"}, "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}, "originalCommit": {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY3MjMxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMTo0NVrOF58Eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyODo1OFrOF59BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NzMzOQ==", "bodyText": "Am I missing something. The code is not using testcontainers. This could be done without testcontainers. Just generate the collector service and keep the spans in a list.\nThis might help you to use testcontainers with Jaeger https://github.com/jaegertracing/jaeger-analytics-java/blob/master/proto/src/test/java/io/jaegertracing/api_v2/GrpcQueryTest.java#L20", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396297339", "createdAt": "2020-03-23T09:01:45Z", "author": {"login": "pavolloffay"}, "path": "build.gradle", "diffHunk": "@@ -125,6 +125,8 @@ subprojects {\n                 truth                : 'com.google.truth:truth:1.0',\n                 slf4jsimple          : 'org.slf4j:slf4j-simple:1.7.25', // Compatibility layer\n                 awaitility           : 'org.awaitility:awaitility:3.0.0', // Compatibility layer\n+                testcontainers       : 'org.testcontainers:testcontainers:1.13.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMjkwMw==", "bodyText": "Hello @pavolloffay, thanks for review. It is using test containers https://github.com/open-telemetry/opentelemetry-java/pull/1038/files#diff-1dea848d3951caf37e6d7ed61b3a7bb5R71\nIn initial issue #498 @jpkrohling suggested to use testcontainers", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396312903", "createdAt": "2020-03-23T09:28:58Z", "author": {"login": "DotSpy"}, "path": "build.gradle", "diffHunk": "@@ -125,6 +125,8 @@ subprojects {\n                 truth                : 'com.google.truth:truth:1.0',\n                 slf4jsimple          : 'org.slf4j:slf4j-simple:1.7.25', // Compatibility layer\n                 awaitility           : 'org.awaitility:awaitility:3.0.0', // Compatibility layer\n+                testcontainers       : 'org.testcontainers:testcontainers:1.13.0',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NzMzOQ=="}, "originalCommit": {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1005, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}