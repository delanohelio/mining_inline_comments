{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjUzMDYz", "number": 802, "title": "Refactor the tracer registry logic in a shared class", "bodyText": "The main idea is to use the ComponentRegistry for MeterSdk as well.", "createdAt": "2020-01-27T19:04:32Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/802", "merged": true, "mergeCommit": {"oid": "48af226a402f0c8656a6a5b0830e76053d81b6cb"}, "closed": true, "closedAt": "2020-01-28T18:23:22Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-hjajgH2gAyMzY3NjUzMDYzOmI1NTIxMWQ3NDlhNDIyNzg4YjI4NGZlMTJmYzAwYjY4MGZkNDBhOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-zhj7gFqTM0OTQ5NDAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b55211d749a422788b284fe12fc00b680fd40a96", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b55211d749a422788b284fe12fc00b680fd40a96", "committedDate": "2020-01-27T19:03:47Z", "message": "Refactor the tracer registry logic in a shared class\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDA5NTM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/802#pullrequestreview-349009535", "createdAt": "2020-01-27T22:07:02Z", "commit": {"oid": "b55211d749a422788b284fe12fc00b680fd40a96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowNzowM1rOFiTJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjowNzowM1rOFiTJtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwOTY4Nw==", "bodyText": "I think all of this code can be replaced with a call to registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo)) if you declare the registry as a ConcurrentMap and then the additional lock will be unnecessary.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/802#discussion_r371509687", "createdAt": "2020-01-27T22:07:03Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.internal;\n+\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Base class for all the registry classes (Tracer, Meter, etc.).\n+ *\n+ * @param <V> the type of the registered value.\n+ */\n+public abstract class ComponentRegistry<V> {\n+  private final Object lock = new Object();\n+  private final Map<InstrumentationLibraryInfo, V> registry = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Returns the registered value associated with this name and {@code null} version if any,\n+   * otherwise creates a new instance and associates it with the given name and {@code null}\n+   * version.\n+   *\n+   * @param instrumentationName the name of the instrumentation library.\n+   * @return the registered value associated with this name and {@code null} version.\n+   */\n+  public V get(String instrumentationName) {\n+    return get(instrumentationName, null);\n+  }\n+\n+  /**\n+   * Returns the registered value associated with this name and version if any, otherwise creates a\n+   * new instance and associates it with the given name and version.\n+   *\n+   * @param instrumentationName the name of the instrumentation library.\n+   * @param instrumentationVersion the version of the instrumentation library.\n+   * @return the registered value associated with this name and version.\n+   */\n+  public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n+    InstrumentationLibraryInfo instrumentationLibraryInfo =\n+        InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n+    V tracer = registry.get(instrumentationLibraryInfo);\n+    if (tracer == null) {\n+      synchronized (lock) {\n+        // Re-check if the value was added since the previous check, this can happen if multiple\n+        // threads try to access the same named tracer during the same time. This way we ensure that\n+        // we create only one TracerSdk per name.\n+        tracer = registry.get(instrumentationLibraryInfo);\n+        if (tracer != null) {\n+          // A different thread already added the named Tracer, just reuse.\n+          return tracer;\n+        }\n+        tracer = newComponent(instrumentationLibraryInfo);\n+        registry.put(instrumentationLibraryInfo, tracer);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b55211d749a422788b284fe12fc00b680fd40a96"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDk0MDI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/802#pullrequestreview-349494027", "createdAt": "2020-01-28T16:00:03Z", "commit": {"oid": "b55211d749a422788b284fe12fc00b680fd40a96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}