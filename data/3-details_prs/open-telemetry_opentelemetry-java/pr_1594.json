{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MTc3OTEz", "number": 1594, "title": "SpanContext hides the TraceId/SpanId implementations", "bodyText": "This removes the usage of wrapper classes for the ids.\nChanges the SpanContext creation methods to accept CharSequences and an offset for the ids.\nChanges the IdGenerator interface to generate String ids.\nRelevant issue: #1314\nExtensive discussion about this took place in this draft PR: #1374", "createdAt": "2020-08-26T21:33:26Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594", "merged": true, "mergeCommit": {"oid": "485cc52c6ff1bb3fa12cd950d6eb97d3ceae6e41"}, "closed": true, "closedAt": "2020-09-03T17:03:41Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCyzcwABqjM2OTY3MDc2NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFQ1KGAFqTQ4MTg1MjMwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0e2b210b8e5aa42c8d80a44bd11843fef5fc34f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c0e2b210b8e5aa42c8d80a44bd11843fef5fc34f", "committedDate": "2020-08-26T21:29:10Z", "message": "cleanup some CharSequence usages to String"}, "afterCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/90dc14a77da20ebf659b654ce059fe6c40593af4", "committedDate": "2020-08-26T21:36:13Z", "message": "cleanup some CharSequence usages to String"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MzQyMDM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-476342038", "createdAt": "2020-08-27T02:26:14Z", "commit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjoyNjoxNFrOHHzwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo1Mjo0N1rOHH2Baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk1MDE1Mw==", "bodyText": "It might affect other places as well, but while we're here, let's use a non-unicode check for isDigit", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477950153", "createdAt": "2020-08-27T02:26:14Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -165,5 +174,24 @@ private static void byteToBase16(byte value, char[] dest, int destOffset) {\n     dest[destOffset + 1] = ENCODING[b | 0x100];\n   }\n \n+  public static boolean isValidBase16String(CharSequence value) {\n+    for (int i = 0; i < value.length(); i++) {\n+      char b = value.charAt(i);\n+      // 48..57 && 97..102 are valid\n+      if (!Character.isDigit(b) && (b < 97 || b > 102)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk1MTE0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static byte[] bytesFromBase16(CharSequence value, int srcOffset, int charactersToRead) {\n          \n          \n            \n              static byte[] bytesFromBase16(CharSequence value, int offset, int length) {\n          \n      \n    \n    \n  \n\nI think this pattern is very prevelant in the JDK so good to follow the idiom", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477951141", "createdAt": "2020-08-27T02:26:55Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -138,6 +138,15 @@ static void byteToBase16String(byte value, char[] dest, int destOffset) {\n     byteToBase16(value, dest, destOffset);\n   }\n \n+  static byte[] bytesFromBase16(CharSequence value, int srcOffset, int charactersToRead) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk1MTkzOQ==", "bodyText": "Think the loop is still very easy even without the subsequence", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477951939", "createdAt": "2020-08-27T02:27:30Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -138,6 +138,15 @@ static void byteToBase16String(byte value, char[] dest, int destOffset) {\n     byteToBase16(value, dest, destOffset);\n   }\n \n+  static byte[] bytesFromBase16(CharSequence value, int srcOffset, int charactersToRead) {\n+    CharSequence part = value.subSequence(srcOffset, srcOffset + charactersToRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk1NDQ0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /* remote$=*/ remote);\n          \n          \n            \n                    /* remote=*/ remote);\n          \n      \n    \n    \n  \n\nIsn't it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477954445", "createdAt": "2020-08-27T02:29:23Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +76,88 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      CharSequence traceId, CharSequence spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, 0, spanId, 0, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  /**\n+   * Creates a new {@code SpanContext} with the given identifiers and options.\n+   *\n+   * @param traceId a CharSequence containing the trace identifier of the span context.\n+   * @param traceIdOffset the offset at which the traceId starts.\n+   * @param spanId the CharSequence containing the the span identifier of the span context.\n+   * @param spanIdOffset the offset at which the spanId starts.\n+   * @param traceFlags the trace options for the span context.\n+   * @param traceState the trace state for the span context.\n+   * @return a new {@code SpanContext} with the given identifiers and options.\n+   * @since 0.1.0\n+   */\n+  @SuppressWarnings({\n+    \"InconsistentOverloads\",\n+    \"UngroupedOverloads\",\n+    \"OverloadMethodsDeclarationOrder\"\n+  })\n+  public static SpanContext create(\n+      CharSequence traceId,\n+      int traceIdOffset,\n+      CharSequence spanId,\n+      int spanIdOffset,\n+      TraceFlags traceFlags,\n+      TraceState traceState,\n+      boolean remote) {\n+    return new AutoValue_SpanContext(\n+        traceId.subSequence(traceIdOffset, traceIdOffset + 32).toString(),\n+        spanId.subSequence(spanIdOffset, spanIdOffset + 16).toString(),\n+        traceFlags,\n+        traceState,\n+        /* remote$=*/ remote);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk2MjkxNA==", "bodyText": "We can replace some of the methods in this class for checking validity I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477962914", "createdAt": "2020-08-27T02:35:21Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/Common.java", "diffHunk": "@@ -52,8 +52,8 @@ static SpanContext buildSpanContext(String traceId, String spanId, String sample\n               : NOT_SAMPLED_FLAGS;\n \n       return SpanContext.createFromRemoteParent(\n-          TraceId.fromLowerBase16(StringUtils.padLeft(traceId, MAX_TRACE_ID_LENGTH), 0),\n-          SpanId.fromLowerBase16(spanId, 0),\n+          StringUtils.padLeft(traceId, MAX_TRACE_ID_LENGTH),\n+          spanId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk2NTgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public String getTraceIdAsBase16() {\n          \n          \n            \n              public String getTraceIdAsHexString() {\n          \n      \n    \n    \n  \n\nOur spec now uses hex too and I think it's more familiar to people than base 16\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#retrieving-the-traceid-and-spanid", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477965821", "createdAt": "2020-08-27T02:37:28Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +76,88 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      CharSequence traceId, CharSequence spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, 0, spanId, 0, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  /**\n+   * Creates a new {@code SpanContext} with the given identifiers and options.\n+   *\n+   * @param traceId a CharSequence containing the trace identifier of the span context.\n+   * @param traceIdOffset the offset at which the traceId starts.\n+   * @param spanId the CharSequence containing the the span identifier of the span context.\n+   * @param spanIdOffset the offset at which the spanId starts.\n+   * @param traceFlags the trace options for the span context.\n+   * @param traceState the trace state for the span context.\n+   * @return a new {@code SpanContext} with the given identifiers and options.\n+   * @since 0.1.0\n+   */\n+  @SuppressWarnings({\n+    \"InconsistentOverloads\",\n+    \"UngroupedOverloads\",\n+    \"OverloadMethodsDeclarationOrder\"\n+  })\n+  public static SpanContext create(\n+      CharSequence traceId,\n+      int traceIdOffset,\n+      CharSequence spanId,\n+      int spanIdOffset,\n+      TraceFlags traceFlags,\n+      TraceState traceState,\n+      boolean remote) {\n+    return new AutoValue_SpanContext(\n+        traceId.subSequence(traceIdOffset, traceIdOffset + 32).toString(),\n+        spanId.subSequence(spanIdOffset, spanIdOffset + 16).toString(),\n+        traceFlags,\n+        traceState,\n+        /* remote$=*/ remote);\n+  }\n+\n+  abstract String getTraceId();\n+\n+  abstract String getSpanId();\n+\n   /**\n    * Returns the trace identifier associated with this {@code SpanContext}.\n    *\n    * @return the trace identifier associated with this {@code SpanContext}.\n    * @since 0.1.0\n    */\n-  public abstract TraceId getTraceId();\n+  public String getTraceIdAsBase16() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk2NjUzNA==", "bodyText": "Since our accessors (e.g. getTraceId() use String, I don't think there's an advantage to using CharSequence in the factories. Can we use String everywhere?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477966534", "createdAt": "2020-08-27T02:38:01Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +76,88 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      CharSequence traceId, CharSequence spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, 0, spanId, 0, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  /**\n+   * Creates a new {@code SpanContext} with the given identifiers and options.\n+   *\n+   * @param traceId a CharSequence containing the trace identifier of the span context.\n+   * @param traceIdOffset the offset at which the traceId starts.\n+   * @param spanId the CharSequence containing the the span identifier of the span context.\n+   * @param spanIdOffset the offset at which the spanId starts.\n+   * @param traceFlags the trace options for the span context.\n+   * @param traceState the trace state for the span context.\n+   * @return a new {@code SpanContext} with the given identifiers and options.\n+   * @since 0.1.0\n+   */\n+  @SuppressWarnings({\n+    \"InconsistentOverloads\",\n+    \"UngroupedOverloads\",\n+    \"OverloadMethodsDeclarationOrder\"\n+  })\n+  public static SpanContext create(\n+      CharSequence traceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk2ODQ1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String INVALID = \"0000000000000000\";\n          \n          \n            \n              private static final String INVALID = \"0000000000000000\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477968457", "createdAt": "2020-08-27T02:39:17Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -16,43 +16,25 @@\n \n package io.opentelemetry.trace;\n \n-import io.opentelemetry.internal.Utils;\n-import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * A class that represents a span identifier. A valid span identifier is an 8-byte array with at\n- * least one non-zero byte.\n+ * Helper methods for dealing with a span identifier. A valid span identifier is an 8-byte array\n+ * with at least one non-zero byte. In base-16 representation, a 16 character hex String, where at\n+ * least one of the characters is not a '0'.\n  *\n  * @since 0.1.0\n  */\n @Immutable\n-public final class SpanId implements Comparable<SpanId> {\n+public final class SpanId {\n \n+  private static final ThreadLocal<char[]> charBuffer = new ThreadLocal<>();\n   private static final int SIZE = 8;\n   private static final int BASE16_SIZE = 2 * SIZE;\n-  private static final long INVALID_ID = 0;\n-  private static final SpanId INVALID = new SpanId(INVALID_ID);\n \n-  // The internal representation of the SpanId.\n-  private final long id;\n+  public static final String INVALID = \"0000000000000000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3MDUyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String INVALID = \"00000000000000000000000000000000\";\n          \n          \n            \n              private static final String INVALID = \"00000000000000000000000000000000\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477970524", "createdAt": "2020-08-27T02:40:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -17,55 +17,42 @@\n package io.opentelemetry.trace;\n \n import io.opentelemetry.internal.Utils;\n-import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * A class that represents a trace identifier. A valid trace identifier is a 16-byte array with at\n- * least one non-zero byte.\n+ * Helper methods for dealing with a trace identifier. A valid trace identifier is a 16-byte array\n+ * with at least one non-zero byte. In base-16 representation, a 32 character hex String, where at\n+ * least one of the characters is not a '0'.\n  *\n  * @since 0.1.0\n  */\n @Immutable\n-public final class TraceId implements Comparable<TraceId> {\n+public final class TraceId {\n+  private static final ThreadLocal<char[]> charBuffer = new ThreadLocal<>();\n \n-  private static final int SIZE = 16;\n+  private static final int SIZE_IN_BYTES = 16;\n   private static final int BASE16_SIZE = 2 * BigendianEncoding.LONG_BASE16;\n-  private static final long INVALID_ID = 0;\n-  private static final TraceId INVALID = new TraceId(INVALID_ID, INVALID_ID);\n+  public static final String INVALID = \"00000000000000000000000000000000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NjU3Mg==", "bodyText": "I don't know if the offset versions provide enough user benefit to have (not much harder to call subsequence than grok this long method signature). There doesn't seem to be a performance benefit since we always need to take the substring anyways.\nIf we only had two factories, than I think we could also provide two symmetric factories that accept byte[] and we don't need public APIs like TraceId.toLowerBase16(byte[])", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477976572", "createdAt": "2020-08-27T02:45:07Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +76,88 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      CharSequence traceId, CharSequence spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, 0, spanId, 0, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  /**\n+   * Creates a new {@code SpanContext} with the given identifiers and options.\n+   *\n+   * @param traceId a CharSequence containing the trace identifier of the span context.\n+   * @param traceIdOffset the offset at which the traceId starts.\n+   * @param spanId the CharSequence containing the the span identifier of the span context.\n+   * @param spanIdOffset the offset at which the spanId starts.\n+   * @param traceFlags the trace options for the span context.\n+   * @param traceState the trace state for the span context.\n+   * @return a new {@code SpanContext} with the given identifiers and options.\n+   * @since 0.1.0\n+   */\n+  @SuppressWarnings({\n+    \"InconsistentOverloads\",\n+    \"UngroupedOverloads\",\n+    \"OverloadMethodsDeclarationOrder\"\n+  })\n+  public static SpanContext create(\n+      CharSequence traceId,\n+      int traceIdOffset,\n+      CharSequence spanId,\n+      int spanIdOffset,\n+      TraceFlags traceFlags,\n+      TraceState traceState,\n+      boolean remote) {\n+    return new AutoValue_SpanContext(\n+        traceId.subSequence(traceIdOffset, traceIdOffset + 32).toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NzMwNA==", "bodyText": "Though realized a byte[] version of this factory would have benefit from an offset version :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477977304", "createdAt": "2020-08-27T02:45:39Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +76,88 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      CharSequence traceId, CharSequence spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, 0, spanId, 0, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  /**\n+   * Creates a new {@code SpanContext} with the given identifiers and options.\n+   *\n+   * @param traceId a CharSequence containing the trace identifier of the span context.\n+   * @param traceIdOffset the offset at which the traceId starts.\n+   * @param spanId the CharSequence containing the the span identifier of the span context.\n+   * @param spanIdOffset the offset at which the spanId starts.\n+   * @param traceFlags the trace options for the span context.\n+   * @param traceState the trace state for the span context.\n+   * @return a new {@code SpanContext} with the given identifiers and options.\n+   * @since 0.1.0\n+   */\n+  @SuppressWarnings({\n+    \"InconsistentOverloads\",\n+    \"UngroupedOverloads\",\n+    \"OverloadMethodsDeclarationOrder\"\n+  })\n+  public static SpanContext create(\n+      CharSequence traceId,\n+      int traceIdOffset,\n+      CharSequence spanId,\n+      int spanIdOffset,\n+      TraceFlags traceFlags,\n+      TraceState traceState,\n+      boolean remote) {\n+    return new AutoValue_SpanContext(\n+        traceId.subSequence(traceIdOffset, traceIdOffset + 32).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NjU3Mg=="}, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3OTQ4Mw==", "bodyText": "Any thoughts on moving these to reflect they're only used for ID generation, maybe IdGeneratorUtil, or we could make IdGenerator an abstract class with protected helper methods for generating IDs from longs?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477979483", "createdAt": "2020-08-27T02:47:17Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -65,46 +47,38 @@ public static int getSize() {\n   }\n \n   /**\n-   * Returns the invalid {@code SpanId}. All bytes are 0.\n+   * Returns the length of the base16 (hex) representation of the {@code SpanId}.\n    *\n-   * @return the invalid {@code SpanId}.\n-   * @since 0.1.0\n+   * @since 0.8.0\n    */\n-  public static SpanId getInvalid() {\n-    return INVALID;\n+  public static int getBase16Length() {\n+    return BASE16_SIZE;\n   }\n \n   /**\n-   * Returns a {@code SpanId} whose representation is copied from the {@code src} beginning at the\n-   * {@code srcOffset} offset.\n+   * Returns the invalid {@code SpanId}. All bytes are 0.\n    *\n-   * @param src the buffer where the representation of the {@code SpanId} is copied.\n-   * @param srcOffset the offset in the buffer where the representation of the {@code SpanId}\n-   *     begins.\n-   * @return a {@code SpanId} whose representation is copied from the buffer.\n-   * @throws NullPointerException if {@code src} is null.\n-   * @throws IndexOutOfBoundsException if {@code srcOffset+SpanId.getSize()} is greater than {@code\n-   *     src.length}.\n+   * @return the invalid {@code SpanId}.\n    * @since 0.1.0\n    */\n-  public static SpanId fromBytes(byte[] src, int srcOffset) {\n-    Utils.checkNotNull(src, \"src\");\n-    return new SpanId(BigendianEncoding.longFromByteArray(src, srcOffset));\n+  public static String getInvalid() {\n+    return INVALID;\n   }\n \n-  /**\n-   * Copies the byte array representations of the {@code SpanId} into the {@code dest} beginning at\n-   * the {@code destOffset} offset.\n-   *\n-   * @param dest the destination buffer.\n-   * @param destOffset the starting offset in the destination buffer.\n-   * @throws NullPointerException if {@code dest} is null.\n-   * @throws IndexOutOfBoundsException if {@code destOffset+SpanId.getSize()} is greater than {@code\n-   *     dest.length}.\n-   * @since 0.1.0\n-   */\n-  public void copyBytesTo(byte[] dest, int destOffset) {\n-    BigendianEncoding.longToByteArray(id, dest, destOffset);\n+  /** Generate a valid {@link SpanId} from the given long value. */\n+  public static String fromLong(long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4MTUyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static long getTraceIdRandomPart(CharSequence traceId) {\n          \n          \n            \n              public static long getRandomPart(CharSequence traceId) {\n          \n      \n    \n    \n  \n\nWe don't repeat the classname in the others, don't think we need to here either.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477981522", "createdAt": "2020-08-27T02:48:44Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -193,32 +163,7 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the rightmost 8 bytes of the trace-id as a long value.\n    */\n-  public long getTraceRandomPart() {\n-    return idLo;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // Copied from Arrays.hashCode(long[])\n-    int result = 1;\n-    result = 31 * result + ((int) (idHi ^ (idHi >>> 32)));\n-    result = 31 * result + ((int) (idLo ^ (idLo >>> 32)));\n-    return result;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"TraceId{traceId=\" + toLowerBase16() + \"}\";\n-  }\n-\n-  @Override\n-  public int compareTo(TraceId that) {\n-    if (idHi == that.idHi) {\n-      if (idLo == that.idLo) {\n-        return 0;\n-      }\n-      return idLo < that.idLo ? -1 : 1;\n-    }\n-    return idHi < that.idHi ? -1 : 1;\n+  public static long getTraceIdRandomPart(CharSequence traceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4MjE0Mg==", "bodyText": "Though this seems like it doesn't need to be public API, it even documents itself as being used in one specific sampler?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477982142", "createdAt": "2020-08-27T02:49:14Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -193,32 +163,7 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the rightmost 8 bytes of the trace-id as a long value.\n    */\n-  public long getTraceRandomPart() {\n-    return idLo;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // Copied from Arrays.hashCode(long[])\n-    int result = 1;\n-    result = 31 * result + ((int) (idHi ^ (idHi >>> 32)));\n-    result = 31 * result + ((int) (idLo ^ (idLo >>> 32)));\n-    return result;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"TraceId{traceId=\" + toLowerBase16() + \"}\";\n-  }\n-\n-  @Override\n-  public int compareTo(TraceId that) {\n-    if (idHi == that.idHi) {\n-      if (idLo == that.idLo) {\n-        return 0;\n-      }\n-      return idLo < that.idLo ? -1 : 1;\n-    }\n-    return idHi < that.idHi ? -1 : 1;\n+  public static long getTraceIdRandomPart(CharSequence traceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4MTUyMg=="}, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjA5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                System.arraycopy(traceId.toCharArray(), 0, chars, 0, TRACE_ID_HEX_SIZE);\n          \n          \n            \n                traceId.getChars(0, traceId.length(), chars, 0);\n          \n      \n    \n    \n  \n\nSimilar throughout", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477986097", "createdAt": "2020-08-27T02:52:02Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorInjectorSingleHeader.java", "diffHunk": "@@ -50,9 +50,13 @@\n     SpanContext spanContext = span.getContext();\n \n     char[] chars = new char[COMBINED_HEADER_SIZE];\n-    spanContext.getTraceId().copyLowerBase16To(chars, 0);\n+    String traceId = spanContext.getTraceIdAsBase16();\n+    System.arraycopy(traceId.toCharArray(), 0, chars, 0, TRACE_ID_HEX_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NzE3OQ==", "bodyText": "Looks like a lot can be updated to use String / getChars instead of CharSequence", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r477987179", "createdAt": "2020-08-27T02:52:47Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -94,9 +94,19 @@\n     chars[0] = VERSION.charAt(0);\n     chars[1] = VERSION.charAt(1);\n     chars[2] = TRACEPARENT_DELIMITER;\n-    spanContext.getTraceId().copyLowerBase16To(chars, TRACE_ID_OFFSET);\n+\n+    CharSequence traceId = spanContext.getTraceIdAsBase16();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90dc14a77da20ebf659b654ce059fe6c40593af4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTk1NTI4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-477195528", "createdAt": "2020-08-28T02:07:49Z", "commit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjowNzo0OVrOHInFdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo0MTowNFrOHIrb3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MTAyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static boolean isValidBase16String(CharSequence value) {\n          \n          \n            \n              static boolean isValidBase16String(CharSequence value) {\n          \n      \n    \n    \n  \n\nClass isn't public", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478791029", "createdAt": "2020-08-28T02:07:49Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -165,5 +173,24 @@ private static void byteToBase16(byte value, char[] dest, int destOffset) {\n     dest[destOffset + 1] = ENCODING[b | 0x100];\n   }\n \n+  public static boolean isValidBase16String(CharSequence value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MTA3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static String toLowerBase16(byte[] bytes) {\n          \n          \n            \n              static String toLowerBase16(byte[] bytes) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478791072", "createdAt": "2020-08-28T02:08:00Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -165,5 +173,24 @@ private static void byteToBase16(byte value, char[] dest, int destOffset) {\n     dest[destOffset + 1] = ENCODING[b | 0x100];\n   }\n \n+  public static boolean isValidBase16String(CharSequence value) {\n+    for (int i = 0; i < value.length(); i++) {\n+      char b = value.charAt(i);\n+      // 48..57 && 97..102 are valid\n+      if ((b < 48 || b > 57) && (b < 97 || b > 102)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n   private BigendianEncoding() {}\n+\n+  public static String toLowerBase16(byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MTQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    && !INVALID.contentEquals(spanId)\n          \n          \n            \n                    && !INVALID.equals(spanId)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478791440", "createdAt": "2020-08-28T02:09:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -145,50 +104,14 @@ public void copyLowerBase16To(char[] dest, int destOffset) {\n    * @return {@code true} if the span identifier is valid.\n    * @since 0.1.0\n    */\n-  public boolean isValid() {\n-    return id != INVALID_ID;\n-  }\n-\n-  /**\n-   * Returns the lowercase base16 encoding of this {@code SpanId}.\n-   *\n-   * @return the lowercase base16 encoding of this {@code SpanId}.\n-   * @since 0.1.0\n-   */\n-  public String toLowerBase16() {\n-    char[] chars = new char[BASE16_SIZE];\n-    copyLowerBase16To(chars, 0);\n-    return new String(chars);\n-  }\n-\n-  @Override\n-  public boolean equals(@Nullable Object obj) {\n-    if (obj == this) {\n-      return true;\n-    }\n-\n-    if (!(obj instanceof SpanId)) {\n-      return false;\n-    }\n-\n-    SpanId that = (SpanId) obj;\n-    return id == that.id;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    // Copied from Long.hashCode in java8.\n-    return (int) (id ^ (id >>> 32));\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"SpanId{spanId=\" + toLowerBase16() + \"}\";\n+  public static boolean isValid(String spanId) {\n+    return (spanId.length() == BASE16_SIZE)\n+        && !INVALID.contentEquals(spanId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1ODg1NA==", "bodyText": "I'm pretty sure they're the same, and maybe it's just me but I find writing the same code as the comment would be more readable\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if ((b < 48 || b > 57) && (b < 97 || b > 102)) {\n          \n          \n            \n                  if (!(b >= 48 && b <= 57) || !(b >= 97 && b <= 102)) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478858854", "createdAt": "2020-08-28T06:31:33Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java", "diffHunk": "@@ -165,5 +173,24 @@ private static void byteToBase16(byte value, char[] dest, int destOffset) {\n     dest[destOffset + 1] = ENCODING[b | 0x100];\n   }\n \n+  public static boolean isValidBase16String(CharSequence value) {\n+    for (int i = 0; i < value.length(); i++) {\n+      char b = value.charAt(i);\n+      // 48..57 && 97..102 are valid\n+      if ((b < 48 || b > 57) && (b < 97 || b > 102)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MDA4Mg==", "bodyText": "Think we can remove .toString() in this file", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478860082", "createdAt": "2020-08-28T06:35:02Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -75,56 +76,42 @@ void testGetRandomTracePart_NegativeLongRepresentation() {\n       0x0F,\n       0x00\n     };\n-    TraceId traceid = TraceId.fromBytes(id, 0);\n-    assertThat(traceid.getTraceRandomPart()).isEqualTo(0xFF0A0B0C0D0E0F00L);\n+    CharSequence traceid = TraceId.toLowerBase16(id);\n+    assertThat(TraceId.getTraceIdRandomPart(traceid)).isEqualTo(0xFF0A0B0C0D0E0F00L);\n   }\n \n   @Test\n   void fromLowerBase16() {\n-    assertThat(TraceId.fromLowerBase16(\"00000000000000000000000000000000\", 0))\n-        .isEqualTo(TraceId.getInvalid());\n-    assertThat(TraceId.fromLowerBase16(\"00000000000000000000000000000061\", 0)).isEqualTo(first);\n-    assertThat(TraceId.fromLowerBase16(\"ff000000000000000000000000000041\", 0)).isEqualTo(second);\n+    assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MDYzNg==", "bodyText": "A note for potentially following up with moving fromLongs to ID generation, there isn't a great reason for unit tests to use the long version vs string version, presumably assertion messages matching the input is an improvement.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478860636", "createdAt": "2020-08-28T06:36:36Z", "author": {"login": "anuraaga"}, "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingSpanExporterTest.java", "diffHunk": "@@ -60,8 +60,8 @@ void returnCode() {\n     SpanData spanData =\n         TestSpanData.newBuilder()\n             .setHasEnded(true)\n-            .setTraceId(new TraceId(1234L, 6789L))\n-            .setSpanId(new SpanId(9876L))\n+            .setTraceId(TraceId.fromLongs(1234L, 6789L))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MDc2Ng==", "bodyText": "Can remove toString", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478860766", "createdAt": "2020-08-28T06:36:55Z", "author": {"login": "anuraaga"}, "path": "exporters/zipkin/src/main/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporter.java", "diffHunk": "@@ -132,16 +133,16 @@ static Span generateSpan(SpanData spanData, Endpoint localEndpoint) {\n \n     final Span.Builder spanBuilder =\n         Span.newBuilder()\n-            .traceId(spanData.getTraceId().toLowerBase16())\n-            .id(spanData.getSpanId().toLowerBase16())\n+            .traceId(spanData.getTraceId().toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanIdAsHexString().toString());\n          \n          \n            \n                setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanIdAsHexString());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478861126", "createdAt": "2020-08-28T06:37:50Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -39,8 +39,8 @@\n     SpanContext spanContext = span.getContext();\n     String sampled = spanContext.getTraceFlags().isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n-    setter.set(carrier, B3Propagator.TRACE_ID_HEADER, spanContext.getTraceId().toLowerBase16());\n-    setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanId().toLowerBase16());\n+    setter.set(carrier, B3Propagator.TRACE_ID_HEADER, spanContext.getTraceIdAsHexString());\n+    setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanIdAsHexString().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTgzOA==", "bodyText": "For another PR, we might consider moving the validity checks into createFromRemoteParent so propagators don't have to worry about it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478861838", "createdAt": "2020-08-28T06:39:51Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -189,11 +198,13 @@ private static SpanContext buildSpanContext(String traceId, String spanId, Strin\n       int flagsInt = Integer.parseInt(flags);\n       TraceFlags traceFlags = ((flagsInt & 1) == 1) ? SAMPLED_FLAGS : NOT_SAMPLED_FLAGS;\n \n+      String otelTraceId = StringUtils.padLeft(traceId, MAX_TRACE_ID_LENGTH);\n+      String otelSpanId = StringUtils.padLeft(spanId, MAX_SPAN_ID_LENGTH);\n+      if (!TraceId.isValid(otelTraceId) || !SpanId.isValid(otelSpanId)) {\n+        return SpanContext.getInvalid();\n+      }\n       return SpanContext.createFromRemoteParent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTkyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceIdAsHexString().toString());\n          \n          \n            \n                setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceIdAsHexString());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478861927", "createdAt": "2020-08-28T06:40:07Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -71,8 +74,8 @@ public static OtTracerPropagator getInstance() {\n     if (!spanContext.isValid()) {\n       return;\n     }\n-    setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceId().toLowerBase16());\n-    setter.set(carrier, SPAN_ID_HEADER, spanContext.getSpanId().toLowerBase16());\n+    setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceIdAsHexString().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MTk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                setter.set(carrier, SPAN_ID_HEADER, spanContext.getSpanIdAsHexString().toString());\n          \n          \n            \n                setter.set(carrier, SPAN_ID_HEADER, spanContext.getSpanIdAsHexString());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478861970", "createdAt": "2020-08-28T06:40:14Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -71,8 +74,8 @@ public static OtTracerPropagator getInstance() {\n     if (!spanContext.isValid()) {\n       return;\n     }\n-    setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceId().toLowerBase16());\n-    setter.set(carrier, SPAN_ID_HEADER, spanContext.getSpanId().toLowerBase16());\n+    setter.set(carrier, TRACE_ID_HEADER, spanContext.getTraceIdAsHexString().toString());\n+    setter.set(carrier, SPAN_ID_HEADER, spanContext.getSpanIdAsHexString().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2MjMwMA==", "bodyText": "Don't need toString() (presumably it's a better assertion without it too). Next few files have it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r478862300", "createdAt": "2020-08-28T06:41:04Z", "author": {"login": "anuraaga"}, "path": "opentracing_shim/src/test/java/io/opentelemetry/opentracingshim/testbed/TestUtils.java", "diffHunk": "@@ -179,8 +179,12 @@ public static void assertSameTrace(List<SpanData> spans) {\n     for (int i = 0; i < spans.size() - 1; i++) {\n       // TODO - Include nanos in this comparison.\n       assertTrue(spans.get(spans.size() - 1).getEndEpochNanos() >= spans.get(i).getEndEpochNanos());\n-      assertEquals(spans.get(spans.size() - 1).getTraceId(), spans.get(i).getTraceId());\n-      assertEquals(spans.get(spans.size() - 1).getSpanId(), spans.get(i).getParentSpanId());\n+      assertEquals(\n+          spans.get(spans.size() - 1).getTraceId().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38fd490c3628c47c026e3380a360b92e5b7e3bd6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDg0NTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-478084544", "createdAt": "2020-08-29T01:02:09Z", "commit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTEzMzQz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-480113343", "createdAt": "2020-09-01T21:02:53Z", "commit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowMjo1M1rOHLIIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowMjo1M1rOHLIIaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyOTYwOA==", "bodyText": "return CharSequence instead?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r481429608", "createdAt": "2020-09-01T21:02:53Z", "author": {"login": "tylerbenson"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -75,25 +81,55 @@ public static SpanContext create(\n    * @since 0.1.0\n    */\n   public static SpanContext createFromRemoteParent(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n+      String traceId, String spanId, TraceFlags traceFlags, TraceState traceState) {\n+    return create(traceId, spanId, traceFlags, traceState, /* remote=*/ true);\n   }\n \n+  abstract String getTraceId();\n+\n+  abstract String getSpanId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTE3NTA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-480117508", "createdAt": "2020-09-01T21:09:40Z", "commit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowOTo0MFrOHLIVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxMzowNFrOHLIczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMzAzNg==", "bodyText": "Hex? If you used hex in SpanContext method names.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r481433036", "createdAt": "2020-09-01T21:09:40Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -65,46 +47,38 @@ public static int getSize() {\n   }\n \n   /**\n-   * Returns the invalid {@code SpanId}. All bytes are 0.\n+   * Returns the length of the base16 (hex) representation of the {@code SpanId}.\n    *\n-   * @return the invalid {@code SpanId}.\n-   * @since 0.1.0\n+   * @since 0.8.0\n    */\n-  public static SpanId getInvalid() {\n-    return INVALID;\n+  public static int getBase16Length() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDA0MA==", "bodyText": "s/getBuffer/getTemporaryBuffer?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r481434040", "createdAt": "2020-09-01T21:11:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -65,46 +47,38 @@ public static int getSize() {\n   }\n \n   /**\n-   * Returns the invalid {@code SpanId}. All bytes are 0.\n+   * Returns the length of the base16 (hex) representation of the {@code SpanId}.\n    *\n-   * @return the invalid {@code SpanId}.\n-   * @since 0.1.0\n+   * @since 0.8.0\n    */\n-  public static SpanId getInvalid() {\n-    return INVALID;\n+  public static int getBase16Length() {\n+    return BASE16_SIZE;\n   }\n \n   /**\n-   * Returns a {@code SpanId} whose representation is copied from the {@code src} beginning at the\n-   * {@code srcOffset} offset.\n+   * Returns the invalid {@code SpanId}. All bytes are 0.\n    *\n-   * @param src the buffer where the representation of the {@code SpanId} is copied.\n-   * @param srcOffset the offset in the buffer where the representation of the {@code SpanId}\n-   *     begins.\n-   * @return a {@code SpanId} whose representation is copied from the buffer.\n-   * @throws NullPointerException if {@code src} is null.\n-   * @throws IndexOutOfBoundsException if {@code srcOffset+SpanId.getSize()} is greater than {@code\n-   *     src.length}.\n+   * @return the invalid {@code SpanId}.\n    * @since 0.1.0\n    */\n-  public static SpanId fromBytes(byte[] src, int srcOffset) {\n-    Utils.checkNotNull(src, \"src\");\n-    return new SpanId(BigendianEncoding.longFromByteArray(src, srcOffset));\n+  public static String getInvalid() {\n+    return INVALID;\n   }\n \n-  /**\n-   * Copies the byte array representations of the {@code SpanId} into the {@code dest} beginning at\n-   * the {@code destOffset} offset.\n-   *\n-   * @param dest the destination buffer.\n-   * @param destOffset the starting offset in the destination buffer.\n-   * @throws NullPointerException if {@code dest} is null.\n-   * @throws IndexOutOfBoundsException if {@code destOffset+SpanId.getSize()} is greater than {@code\n-   *     dest.length}.\n-   * @since 0.1.0\n-   */\n-  public void copyBytesTo(byte[] dest, int destOffset) {\n-    BigendianEncoding.longToByteArray(id, dest, destOffset);\n+  /** Generate a valid {@link SpanId} from the given long value. */\n+  public static String fromLong(long id) {\n+    char[] result = getBuffer();\n+    BigendianEncoding.longToBase16String(id, result, 0);\n+    return new String(result);\n+  }\n+\n+  private static char[] getBuffer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDIzMg==", "bodyText": "Same, use Hex if you decided to use that in the SC", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r481434232", "createdAt": "2020-09-01T21:11:57Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanId.java", "diffHunk": "@@ -119,23 +93,8 @@ public void copyBytesTo(byte[] dest, int destOffset) {\n    *     srcOffset}.\n    * @since 0.1.0\n    */\n-  public static SpanId fromLowerBase16(CharSequence src, int srcOffset) {\n-    Utils.checkNotNull(src, \"src\");\n-    return new SpanId(BigendianEncoding.longFromBase16String(src, srcOffset));\n-  }\n-\n-  /**\n-   * Copies the lowercase base16 representations of the {@code SpanId} into the {@code dest}\n-   * beginning at the {@code destOffset} offset.\n-   *\n-   * @param dest the destination buffer.\n-   * @param destOffset the starting offset in the destination buffer.\n-   * @throws IndexOutOfBoundsException if {@code destOffset + 2 * SpanId.getSize()} is greater than\n-   *     {@code dest.length}.\n-   * @since 0.1.0\n-   */\n-  public void copyLowerBase16To(char[] dest, int destOffset) {\n-    BigendianEncoding.longToBase16String(id, dest, destOffset);\n+  public static byte[] bytesFromLowerBase16(String src, int srcOffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDgyOA==", "bodyText": "name the params traceIdHex, spanIdHex", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#discussion_r481434828", "createdAt": "2020-09-01T21:13:04Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -59,8 +60,13 @@ public static SpanContext getInvalid() {\n    * @since 0.1.0\n    */\n   public static SpanContext create(\n-      TraceId traceId, SpanId spanId, TraceFlags traceFlags, TraceState traceState) {\n-    return new AutoValue_SpanContext(traceId, spanId, traceFlags, traceState, /* remote=*/ false);\n+      String traceId, String spanId, TraceFlags traceFlags, TraceState traceState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a9760c631f64dfe1240df8519c940a1bae35d96", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8a9760c631f64dfe1240df8519c940a1bae35d96", "committedDate": "2020-09-01T21:23:11Z", "message": "\u0001 This is a combination of 2 commits.\n\u0001 This is the 1st commit message:\n\nWIP on converting to String-based SpanContext\n\ndon't hand out the byte arrays publicly, but require making copies\n\nmake sure to hand out fresh invalid byte arrays.\n\nUse strings for span and trace ids.\n\nSwitch over to CharSequence instead of String for the ids\n\nFix a couple of places that were casting to String\n\nAdd some simple wrappers for the generated longs to save converting until the last moment to the character-based representation.\n\nintroduce a reusable threadlocal char buffer for generating random ids.\n\nupdate for changes from upstream\n\nChange the SpanContext to store the ids as Strings internally\nChange the id access methods on SpanContext to be clearly labeled as the base16 representations\nAdd a new create method that allows specifying offsets for traceId and spanId CharSequences\n\nProvide an option for creating a SpanContext from longs or Strings, optionally.\n\nfix a typo\n\nupdate from upstream\n\n\u0001 The commit message #2 will be skipped:\n\n\u0001 don't hand out the byte arrays publicly, but require making copies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2053731753b9ed6816fb32c1e205b9ebc55f4d6f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2053731753b9ed6816fb32c1e205b9ebc55f4d6f", "committedDate": "2020-09-01T21:23:11Z", "message": "WIP on converting to String-based SpanContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45347b69d32335efe6f8cd70bf23ea720e376468", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45347b69d32335efe6f8cd70bf23ea720e376468", "committedDate": "2020-09-01T21:23:12Z", "message": "Update the SpanContext to only store Strings internally for Trace and Span ids."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b279ddfcf7dfb2bcbfdbfd8c672fb499672fece", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7b279ddfcf7dfb2bcbfdbfd8c672fb499672fece", "committedDate": "2020-09-01T21:23:12Z", "message": "remove dead files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad892498dc26e570e32919789e3f02c5881c0b02", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ad892498dc26e570e32919789e3f02c5881c0b02", "committedDate": "2020-09-01T21:23:12Z", "message": "cleanup some CharSequence usages to String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8135b1010361bc57c43473a634c5f735a1c5f153", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8135b1010361bc57c43473a634c5f735a1c5f153", "committedDate": "2020-09-01T21:23:12Z", "message": "Update api/src/main/java/io/opentelemetry/trace/BigendianEncoding.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1000faa9a16950b2149663ea4d6e58990aa1c75", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f1000faa9a16950b2149663ea4d6e58990aa1c75", "committedDate": "2020-09-01T21:23:12Z", "message": "Update extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorInjectorSingleHeader.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72783e296e7a6f0dcaeff6dd26bf4fcb728e838c", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/72783e296e7a6f0dcaeff6dd26bf4fcb728e838c", "committedDate": "2020-09-01T21:23:12Z", "message": "Update api/src/main/java/io/opentelemetry/trace/SpanId.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6522ed3410beec9b516f3d3c5ceb5d2b685fe9df", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6522ed3410beec9b516f3d3c5ceb5d2b685fe9df", "committedDate": "2020-09-01T21:23:12Z", "message": "Update api/src/main/java/io/opentelemetry/trace/TraceId.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f0b120ba099ce1b4d9d614dabcc21fe994999e", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d0f0b120ba099ce1b4d9d614dabcc21fe994999e", "committedDate": "2020-09-01T21:23:12Z", "message": "updates from PR suggestion fubars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410ce78d424665304a86fe27ec5986c4dc32e9b7", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/410ce78d424665304a86fe27ec5986c4dc32e9b7", "committedDate": "2020-09-01T21:23:12Z", "message": "some cleanup from PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362cba901d70ac1ab76481920d7baf30ca05fc33", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/362cba901d70ac1ab76481920d7baf30ca05fc33", "committedDate": "2020-09-01T21:23:12Z", "message": "Switch back to String from CharSequence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a9eec347172a342c5e2803c9137bbf3d54239b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/07a9eec347172a342c5e2803c9137bbf3d54239b", "committedDate": "2020-09-01T21:23:13Z", "message": "Get rid of the overload with the offsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf20569a322abb0989d1c109fcfd2f048e7c586", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bf20569a322abb0989d1c109fcfd2f048e7c586", "committedDate": "2020-09-01T21:23:13Z", "message": "Lots of bits of cleanup from PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85aafd2c6235e86e1d3f099cfdd025277920c3f8", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/85aafd2c6235e86e1d3f099cfdd025277920c3f8", "committedDate": "2020-09-01T21:42:44Z", "message": "more renaming of base16 to hex"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a51046e6700f8657dd5c18a2321d67310947061a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a51046e6700f8657dd5c18a2321d67310947061a", "committedDate": "2020-08-28T18:23:19Z", "message": "Lots of bits of cleanup from PR feedback."}, "afterCommit": {"oid": "85aafd2c6235e86e1d3f099cfdd025277920c3f8", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/85aafd2c6235e86e1d3f099cfdd025277920c3f8", "committedDate": "2020-09-01T21:42:44Z", "message": "more renaming of base16 to hex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODUyMzA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1594#pullrequestreview-481852305", "createdAt": "2020-09-03T13:43:24Z", "commit": {"oid": "85aafd2c6235e86e1d3f099cfdd025277920c3f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2408, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}