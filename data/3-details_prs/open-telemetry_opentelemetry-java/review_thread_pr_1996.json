{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTIzNDMw", "number": 1996, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozMjozOVrOE1EXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozMjozOVrOE1EXXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDgxNTAzOnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit4/OpenTelemetryRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozMjozOVrOHtIzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozNDoxMVrOHtI0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjA5OA==", "bodyText": "does this need to be volatile ? I'm never 100% clear on the threading model of junit.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1996#discussion_r517092098", "createdAt": "2020-11-04T04:32:39Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit4/OpenTelemetryRule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit4;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.propagation.HttpTraceContext;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporter.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import java.util.List;\n+import org.junit.rules.ExternalResource;\n+\n+/**\n+ * A JUnit4 rule which sets up the {@link OpenTelemetrySdk} for testing, resetting state between\n+ * tests. This rule cannot be used with {@link org.junit.ClassRule}.\n+ *\n+ * <pre>{@code\n+ * > public class CoolTest {\n+ * >   {@literal @}Rule\n+ * >   public OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private Tracer tracer;\n+ * >\n+ * >   {@literal @}Before\n+ * >   public void setUp() {\n+ * >       tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >   }\n+ * >\n+ * >   {@literal @}Test\n+ * >   public void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan().end();\n+ * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n+ * >   }\n+ * >  }\n+ * }</pre>\n+ */\n+public class OpenTelemetryRule extends ExternalResource {\n+\n+  /**\n+   * Returns a {@link OpenTelemetryRule} with a default SDK initialized with an in-memory span\n+   * exporter and W3C trace context propagation.\n+   */\n+  public static OpenTelemetryRule create() {\n+    InMemorySpanExporter spanExporter = InMemorySpanExporter.create();\n+\n+    TracerSdkProvider tracerProvider = TracerSdkProvider.builder().build();\n+    tracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(spanExporter).build());\n+\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setPropagators(\n+                DefaultContextPropagators.builder()\n+                    .addTextMapPropagator(HttpTraceContext.getInstance())\n+                    .build())\n+            .setTracerProvider(tracerProvider)\n+            .build();\n+\n+    return new OpenTelemetryRule(openTelemetry, spanExporter);\n+  }\n+\n+  private final OpenTelemetrySdk openTelemetry;\n+  private final InMemorySpanExporter spanExporter;\n+\n+  private OpenTelemetry previousGlobalOpenTelemetry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c1c4d8ac7a85a45a4915fd5f7cbf34cc9d41c2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjQyMg==", "bodyText": "Good point - I'm not sure either and it doesn't hurt so added", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1996#discussion_r517092422", "createdAt": "2020-11-04T04:34:11Z", "author": {"login": "anuraaga"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit4/OpenTelemetryRule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit4;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.propagation.HttpTraceContext;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporter.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import java.util.List;\n+import org.junit.rules.ExternalResource;\n+\n+/**\n+ * A JUnit4 rule which sets up the {@link OpenTelemetrySdk} for testing, resetting state between\n+ * tests. This rule cannot be used with {@link org.junit.ClassRule}.\n+ *\n+ * <pre>{@code\n+ * > public class CoolTest {\n+ * >   {@literal @}Rule\n+ * >   public OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private Tracer tracer;\n+ * >\n+ * >   {@literal @}Before\n+ * >   public void setUp() {\n+ * >       tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >   }\n+ * >\n+ * >   {@literal @}Test\n+ * >   public void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan().end();\n+ * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n+ * >   }\n+ * >  }\n+ * }</pre>\n+ */\n+public class OpenTelemetryRule extends ExternalResource {\n+\n+  /**\n+   * Returns a {@link OpenTelemetryRule} with a default SDK initialized with an in-memory span\n+   * exporter and W3C trace context propagation.\n+   */\n+  public static OpenTelemetryRule create() {\n+    InMemorySpanExporter spanExporter = InMemorySpanExporter.create();\n+\n+    TracerSdkProvider tracerProvider = TracerSdkProvider.builder().build();\n+    tracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(spanExporter).build());\n+\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setPropagators(\n+                DefaultContextPropagators.builder()\n+                    .addTextMapPropagator(HttpTraceContext.getInstance())\n+                    .build())\n+            .setTracerProvider(tracerProvider)\n+            .build();\n+\n+    return new OpenTelemetryRule(openTelemetry, spanExporter);\n+  }\n+\n+  private final OpenTelemetrySdk openTelemetry;\n+  private final InMemorySpanExporter spanExporter;\n+\n+  private OpenTelemetry previousGlobalOpenTelemetry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjA5OA=="}, "originalCommit": {"oid": "a9c1c4d8ac7a85a45a4915fd5f7cbf34cc9d41c2"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1884, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}