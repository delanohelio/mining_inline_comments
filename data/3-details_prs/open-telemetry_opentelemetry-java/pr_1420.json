{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzI4ODI1", "number": 1420, "title": "Fixed immutable list sorting bug in TraceZ zPage", "bodyText": "TracezDataAggregator modifed getOkSpans and getErrorSpans to return an immutable list, which caused a immutable list sorting bug in TracezZPageHandler.\nThis pull request fixes the bug.", "createdAt": "2020-07-15T20:51:12Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420", "merged": true, "mergeCommit": {"oid": "98cb75695db158b3e555993ce3b3f5e9fbf1029a"}, "closed": true, "closedAt": "2020-07-16T17:08:41Z", "author": {"login": "wtyanan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1Q7ZzAH2gAyNDQ5NzI4ODI1OjAwMjAxZGNkMWMzN2U3OWZhY2JiODg4MTU5OTRlNmYzZmI0YTUwNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1iZTsgFqTQ1MDA0NzEyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00201dcd1c37e79facbb88815994e6f3fb4a506b", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00201dcd1c37e79facbb88815994e6f3fb4a506b", "committedDate": "2020-07-15T20:47:26Z", "message": "Fixed immutable list sorting bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/293bb7aa55feb73b6fee380c1cd856842cc4cd86", "committedDate": "2020-07-15T21:17:32Z", "message": "Added more test covering SpanDetails section"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mzk1NjA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#pullrequestreview-449395609", "createdAt": "2020-07-15T22:49:42Z", "commit": {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0OTo0MlrOGyT9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0OTo0MlrOGyT9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTAyNg==", "bodyText": "you can pull this sort call up one level, right? Since it's the same in both the if and the else branches?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455409026", "createdAt": "2020-07-15T22:49:42Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -486,18 +486,19 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out)\n               // Display latency based span\n               LatencyBoundary latencyBoundary = LatencyBoundary.values()[subtype];\n               spans =\n-                  dataAggregator.getOkSpans(\n-                      spanName,\n-                      latencyBoundary.getLatencyLowerBound(),\n-                      latencyBoundary.getLatencyUpperBound());\n+                  new ArrayList<>(\n+                      dataAggregator.getOkSpans(\n+                          spanName,\n+                          latencyBoundary.getLatencyLowerBound(),\n+                          latencyBoundary.getLatencyUpperBound()));\n               Collections.sort(spans, new SpanDataComparator(/* incremental= */ false));\n             } else {\n               if (subtype < 0 || subtype >= CanonicalCode.values().length) {\n                 // N/A or out-of-bound cueck for error based subtype, valid values: [0, 15]\n                 return;\n               }\n               // Display error based span\n-              spans = dataAggregator.getErrorSpans(spanName);\n+              spans = new ArrayList<>(dataAggregator.getErrorSpans(spanName));\n               Collections.sort(spans, new SpanDataComparator(/* incremental= */ false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDE1ODQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#pullrequestreview-449415844", "createdAt": "2020-07-15T23:45:31Z", "commit": {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo0NTozMVrOGyVGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo0NTozMVrOGyVGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzY1NQ==", "bodyText": "We may as well stick with immutable ImmutableList.sortedCopyOf. I guess one problem was that we didn't go \"all-in\" on ImmutableList, if we did then issues like sorting a collection become more obviously a bug. Let's try to keep the standard in this code that all the containers are immutable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455427655", "createdAt": "2020-07-15T23:45:31Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -486,18 +486,19 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out)\n               // Display latency based span\n               LatencyBoundary latencyBoundary = LatencyBoundary.values()[subtype];\n               spans =\n-                  dataAggregator.getOkSpans(\n-                      spanName,\n-                      latencyBoundary.getLatencyLowerBound(),\n-                      latencyBoundary.getLatencyUpperBound());\n+                  new ArrayList<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a25e0e14a7fa55eec76f7332236e57b8258c956", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a25e0e14a7fa55eec76f7332236e57b8258c956", "committedDate": "2020-07-16T04:11:10Z", "message": "Used ImmutableList.sortedCopyOf instead of ArrayList, added a test for unknown ztype"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTMzMzA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#pullrequestreview-449533305", "createdAt": "2020-07-16T06:14:26Z", "commit": {"oid": "2a25e0e14a7fa55eec76f7332236e57b8258c956"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTM4NjEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#pullrequestreview-449538613", "createdAt": "2020-07-16T06:26:25Z", "commit": {"oid": "2a25e0e14a7fa55eec76f7332236e57b8258c956"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyNjoyNVrOGybyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyNjoyNVrOGybyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNzE3OA==", "bodyText": "Not a big deal but it's a bit less verbose to use ImmutableMap.of, it's very close in feeling to a map literal.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455537178", "createdAt": "2020-07-16T06:26:25Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandlerTest.java", "diffHunk": "@@ -274,18 +274,94 @@ public void summaryTable_linkForErrorSpans() {\n   }\n \n   @Test\n-  public void spanDetails_emitSpanNameCorrectly() {\n+  public void spanDetails_emitRunningSpanDetailsCorrectly() {\n+    OutputStream output = new ByteArrayOutputStream();\n+    Map<String, String> queryMap = new HashMap<String, String>();\n+    Span runningSpan = tracer.spanBuilder(RUNNING_SPAN).startSpan();\n+\n+    queryMap.put(\"zspanname\", RUNNING_SPAN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a25e0e14a7fa55eec76f7332236e57b8258c956"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15d5d18bd7cd332cfb31a3b4ee66e3c2a19774e8", "author": {"user": {"login": "wtyanan", "name": "Terry (Tianyu) Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15d5d18bd7cd332cfb31a3b4ee66e3c2a19774e8", "committedDate": "2020-07-16T14:02:39Z", "message": "Switched to immutableMap and immutableList"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDQ3MTIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#pullrequestreview-450047120", "createdAt": "2020-07-16T17:08:29Z", "commit": {"oid": "15d5d18bd7cd332cfb31a3b4ee66e3c2a19774e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}