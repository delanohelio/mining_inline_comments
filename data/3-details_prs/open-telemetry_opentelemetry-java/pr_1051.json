{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTQzMzM1", "number": 1051, "title": "Update QUICKSTART with the latest context prop changes.", "bodyText": "", "createdAt": "2020-03-28T19:35:09Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051", "merged": true, "mergeCommit": {"oid": "ea3e3b690d454cf49cbcc66682b553193d4d01ec"}, "closed": true, "closedAt": "2020-03-30T19:56:26Z", "author": {"login": "carlosalberto"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSKjhRAH2gAyMzk1MTQzMzM1OjMzODkxZjdmMzczYjcxZWUwZTUwMjk3MGU1ZmYzODkyNTBmOTRlYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSyplyAFqTM4NDExMjU3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33891f7f373b71ee0e502970e5ff389250f94ebd", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33891f7f373b71ee0e502970e5ff389250f94ebd", "committedDate": "2020-03-28T19:34:34Z", "message": "Update QUICKSTART with the latest context prop changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078c001a58c87d14edfe0a1aac695b604a90725b", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/078c001a58c87d14edfe0a1aac695b604a90725b", "committedDate": "2020-03-28T19:36:16Z", "message": "Oops, had forgotten to include the link."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQyODA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#pullrequestreview-383542808", "createdAt": "2020-03-30T05:41:11Z", "commit": {"oid": "078c001a58c87d14edfe0a1aac695b604a90725b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0MToxMlrOF9aSrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo0MToxMlrOF9aSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkzODIyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [W3C Trace Context](https://www.w3.org/TR/trace-context/) HTTP headers. For doing in-process\n          \n          \n            \n            propagation, [gRPC Context]() is used (contained in a single, small artifact non-dependent on\n          \n          \n            \n            [W3C Trace Context](https://www.w3.org/TR/trace-context/) HTTP headers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#discussion_r399938223", "createdAt": "2020-03-30T05:41:12Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -164,8 +164,15 @@ For more details how to read context from remote processes, see\n \n ### Context Propagation\n \n+In-process propagation leverages [gRPC Context](https://grpc.github.io/grpc-java/javadoc/io/grpc/Context.html),\n+a well established context propagation library, contained in a small artifact, which is non-dependent on the\n+entire gRPC engine.\n+\n OpenTelemetry provides a text-based approach to propagate context to remote services using the\n-[W3C Trace Context](https://www.w3.org/TR/trace-context/) HTTP headers. The following presents an\n+[W3C Trace Context](https://www.w3.org/TR/trace-context/) HTTP headers. For doing in-process\n+propagation, [gRPC Context]() is used (contained in a single, small artifact non-dependent on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078c001a58c87d14edfe0a1aac695b604a90725b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTI4NTI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#pullrequestreview-383928529", "createdAt": "2020-03-30T14:44:53Z", "commit": {"oid": "078c001a58c87d14edfe0a1aac695b604a90725b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0NDo1M1rOF9tRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0NDo1M1rOF9tRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0OTIyMw==", "bodyText": "This makes it look like if setting attributes was only allowed within the scope. You might want to move that out to make it clear this is not the case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#discussion_r400249223", "createdAt": "2020-03-30T14:44:53Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -181,13 +188,17 @@ HttpTextFormat.Setter<HttpURLConnection> setter =\n \n URL url = new URL(\"http://127.0.0.1:8080/resource\");\n Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n-// Semantic Convention\n-outGoing.setAttribute(\"http.method\", \"GET\");\n-outGoing.setAttribute(\"http.url\", url.toString());\n-HttpURLConnection transportLayer = (HttpURLConnection) url.openConnection();\n-// Inject the request with the context\n-tracer.getHttpTextFormat().inject(outGoing.getContext(), transportLayer, setter);\n-// Make outgoing call\n+try (Scope scope = tracer.withSpan(outGoing)) {\n+  // Semantic Convention\n+  outGoing.setAttribute(\"http.method\", \"GET\");\n+  outGoing.setAttribute(\"http.url\", url.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078c001a58c87d14edfe0a1aac695b604a90725b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92", "committedDate": "2020-03-30T15:42:55Z", "message": "Fix repeated line."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDE2ODc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#pullrequestreview-384016879", "createdAt": "2020-03-30T16:16:39Z", "commit": {"oid": "04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxNjozOVrOF9xj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxNjozOVrOF9xj9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxOTQ3Ng==", "bodyText": "he/ctx are too Go like for the Java world :) Probably we should use better variable names.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#discussion_r400319476", "createdAt": "2020-03-30T16:16:39Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -207,10 +216,11 @@ HttpTextFormat.Getter<HttpExchange> getter =\n };\n ...\n public void handle(HttpExchange he) {\n-    // Extract the context from the request\n-    SpanContext ctx = tracer.getHttpTextFormat().extract(he, getter);\n+  // Extract the SpanContext and other elements from the request.\n+  Context ctx = tracer.getHttpTextFormat().extract(Context.current(), he, getter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDM3MTM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#pullrequestreview-384037139", "createdAt": "2020-03-30T16:40:29Z", "commit": {"oid": "04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0MDozMFrOF9yj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0MDozMFrOF9yj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNTg1MA==", "bodyText": "Can we put a comment up above about where this HttpExchange class comes from?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#discussion_r400335850", "createdAt": "2020-03-30T16:40:30Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -207,10 +216,11 @@ HttpTextFormat.Getter<HttpExchange> getter =\n };\n ...\n public void handle(HttpExchange he) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04e0e9ae9e00c2a9d3b76ddbe4eddc807452eb92"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c31e0fe1fc01ba7a9d899fdb119653b90809757", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7c31e0fe1fc01ba7a9d899fdb119653b90809757", "committedDate": "2020-03-30T18:00:47Z", "message": "Misc improvements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTEyNTc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1051#pullrequestreview-384112579", "createdAt": "2020-03-30T18:17:24Z", "commit": {"oid": "7c31e0fe1fc01ba7a9d899fdb119653b90809757"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2881, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}