{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMDE0NTQy", "number": 1493, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoxOToyNVrOEUvojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyMjowMlrOEUvrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTg3NDA0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoxOToyNVrOG7HZXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzozNDoyNlrOG7L_1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDM0OA==", "bodyText": "isn't the order actually important here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464640348", "createdAt": "2020-08-03T20:19:25Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "diffHunk": "@@ -52,7 +52,7 @@ void getEntries() {\n     assertThat(secondTraceState.getEntries())\n         .containsExactly(TraceState.Entry.create(SECOND_KEY, SECOND_VALUE));\n     assertThat(multiValueTraceState.getEntries())\n-        .containsExactly(\n+        .containsExactlyInAnyOrder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjgxNw==", "bodyText": "Confirmed that the order seems to be changing here - filed #1499 will look into it in a follow up.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464702817", "createdAt": "2020-08-03T22:52:33Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "diffHunk": "@@ -52,7 +52,7 @@ void getEntries() {\n     assertThat(secondTraceState.getEntries())\n         .containsExactly(TraceState.Entry.create(SECOND_KEY, SECOND_VALUE));\n     assertThat(multiValueTraceState.getEntries())\n-        .containsExactly(\n+        .containsExactlyInAnyOrder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDM0OA=="}, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMjc1OA==", "bodyText": "I think the order is supposed to be the opposite of what you put in, if you look at the javadoc on the TraceState.Builder class. I think this test just wasn't asserting that fact.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464712758", "createdAt": "2020-08-03T23:24:33Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "diffHunk": "@@ -52,7 +52,7 @@ void getEntries() {\n     assertThat(secondTraceState.getEntries())\n         .containsExactly(TraceState.Entry.create(SECOND_KEY, SECOND_VALUE));\n     assertThat(multiValueTraceState.getEntries())\n-        .containsExactly(\n+        .containsExactlyInAnyOrder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDM0OA=="}, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMzUzNw==", "bodyText": "Ah you did the digging for me! Thanks I went ahead and updated the test here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464713537", "createdAt": "2020-08-03T23:27:02Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "diffHunk": "@@ -52,7 +52,7 @@ void getEntries() {\n     assertThat(secondTraceState.getEntries())\n         .containsExactly(TraceState.Entry.create(SECOND_KEY, SECOND_VALUE));\n     assertThat(multiValueTraceState.getEntries())\n-        .containsExactly(\n+        .containsExactlyInAnyOrder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDM0OA=="}, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNTczMg==", "bodyText": "I do like that assertJ makes it super clear when you aren't enforcing the order, though!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464715732", "createdAt": "2020-08-03T23:34:26Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceStateTest.java", "diffHunk": "@@ -52,7 +52,7 @@ void getEntries() {\n     assertThat(secondTraceState.getEntries())\n         .containsExactly(TraceState.Entry.create(SECOND_KEY, SECOND_VALUE));\n     assertThat(multiValueTraceState.getEntries())\n-        .containsExactly(\n+        .containsExactlyInAnyOrder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDM0OA=="}, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTg4MjE4OnYy", "diffSide": "RIGHT", "path": "sdk/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyMjowMlrOG7HeCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1Mjo1NlrOG7LN8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MTU0NQ==", "bodyText": "any idea why this was needed to be added? seems unrelated to the PR, on its face.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464641545", "createdAt": "2020-08-03T20:22:02Z", "author": {"login": "jkwatson"}, "path": "sdk/build.gradle", "diffHunk": "@@ -18,6 +18,7 @@ dependencies {\n     annotationProcessor libraries.auto_value\n \n     testAnnotationProcessor libraries.auto_value\n+    testCompileOnly libraries.auto_value_annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjk2Mg==", "bodyText": "I think Truth was leaking this in their POM so the test dependency on Truth got this transitively.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1493#discussion_r464702962", "createdAt": "2020-08-03T22:52:56Z", "author": {"login": "anuraaga"}, "path": "sdk/build.gradle", "diffHunk": "@@ -18,6 +18,7 @@ dependencies {\n     annotationProcessor libraries.auto_value\n \n     testAnnotationProcessor libraries.auto_value\n+    testCompileOnly libraries.auto_value_annotation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MTU0NQ=="}, "originalCommit": {"oid": "38ba76022367a833b10038fa5980795301cdbc04"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1296, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}