{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNjk2MzMw", "number": 2379, "title": "Add a notion of Accumulation as the value passed between Accumulator \u2026", "bodyText": "\u2026and Processor\nPartially implement the logic described in #2378. Still more cleanup required but at this point this is good enough to be the first step.\nSigned-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-12-21T20:04:56Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379", "merged": true, "mergeCommit": {"oid": "927fddc4e1ac334946857bc70902f71eef53068a"}, "closed": true, "closedAt": "2020-12-21T21:12:47Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdocCjOABqjQxMzc1MzY0MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdocYfhABqjQxMzc2MDUzOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "044a8334e115bd65a8743c849881bcac24efa19d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/044a8334e115bd65a8743c849881bcac24efa19d", "committedDate": "2020-12-21T19:34:22Z", "message": "Add a notion of Accumulation as the value passed between Accumulator and Processor\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f80bbc2d8008127b392263ca5a236a8f0a9d5930", "committedDate": "2020-12-21T20:07:04Z", "message": "Add a notion of Accumulation as the value passed between Accumulator and Processor\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjQ3NTc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#pullrequestreview-556647579", "createdAt": "2020-12-21T20:34:21Z", "commit": {"oid": "044a8334e115bd65a8743c849881bcac24efa19d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNToxMFrOIJlLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozNzozM1rOIJlPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNzI0MQ==", "bodyText": "Do we need a spec issue for this, or just a Java issue?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546917241", "createdAt": "2020-12-21T20:35:10Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/Aggregations.java", "diffHunk": "@@ -186,15 +215,21 @@ public AggregatorFactory getAggregatorFactory(InstrumentValueType instrumentValu\n           : DoubleLastValueAggregator.getFactory();\n     }\n \n+    @Override\n+    public Accumulation merge(Accumulation a1, Accumulation a2) {\n+      // TODO: Define the order between accumulation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODAwNg==", "bodyText": "urgh. this method name is getting ugly. we should think up a better name at some point.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546918006", "createdAt": "2020-12-21T20:36:53Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -13,24 +16,17 @@\n   private volatile boolean hasRecordings = false;\n \n   @Override\n-  public void mergeToAndReset(Aggregator other) {\n-    if (!this.getClass().isInstance(other)) {\n-      return;\n+  @Nullable\n+  public Accumulation toAccumulationThenReset() {\n+    if (!hasRecordings) {\n+      return null;\n     }\n-    doMergeAndReset(other);\n     hasRecordings = false;\n+    return doToAccumulationThenReset();\n   }\n \n-  /**\n-   * Merges the current value into the given {@code aggregator} and resets the current value in this\n-   * {@code Aggregator}.\n-   *\n-   * <p>If this method is called, you can assume that the passed in aggregator can be cast to your\n-   * self-type.\n-   *\n-   * @param aggregator The aggregator to merge with.\n-   */\n-  abstract void doMergeAndReset(Aggregator aggregator);\n+  /** Implementation of the {@code toAccumulationThenReset}. */\n+  abstract Accumulation doToAccumulationThenReset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODI2NA==", "bodyText": "maybe accumulateAndReset() ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2379#discussion_r546918264", "createdAt": "2020-12-21T20:37:33Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "diffHunk": "@@ -15,23 +14,11 @@\n public interface Aggregator {\n \n   /**\n-   * Merges the current value into the given {@code aggregator} and resets the current value in this\n+   * Returns the current value into as {@link Accumulation} and resets the current value in this\n    * {@code Aggregator}.\n-   *\n-   * @param aggregator value to merge into.\n-   */\n-  void mergeToAndReset(Aggregator aggregator);\n-\n-  /**\n-   * Returns the {@code Point} with the given properties and the value from this Aggregation.\n-   *\n-   * @param startEpochNanos the startEpochNanos for the {@code Point}.\n-   * @param epochNanos the epochNanos for the {@code Point}.\n-   * @param labels the labels for the {@code Point}.\n-   * @return the {@code Point} with the value from this Aggregation.\n    */\n   @Nullable\n-  Point toPoint(long startEpochNanos, long epochNanos, Labels labels);\n+  Accumulation toAccumulationThenReset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abcfc6bdb9d92cc8530c262d45bd3d7bfdc954d1", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/abcfc6bdb9d92cc8530c262d45bd3d7bfdc954d1", "committedDate": "2020-12-21T20:52:55Z", "message": "Add a notion of Accumulation as the value passed between Accumulator and Processor\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "707ec5eae68bed7a4cc89064078a8f207d1efaf7", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/707ec5eae68bed7a4cc89064078a8f207d1efaf7", "committedDate": "2020-12-21T20:58:04Z", "message": "Fix PR review comments\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f80bbc2d8008127b392263ca5a236a8f0a9d5930", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f80bbc2d8008127b392263ca5a236a8f0a9d5930", "committedDate": "2020-12-21T20:07:04Z", "message": "Add a notion of Accumulation as the value passed between Accumulator and Processor\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "707ec5eae68bed7a4cc89064078a8f207d1efaf7", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/707ec5eae68bed7a4cc89064078a8f207d1efaf7", "committedDate": "2020-12-21T20:58:04Z", "message": "Fix PR review comments\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}