{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTQ5NTI1", "number": 2134, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1MToyMFrOE9cqZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1MDo1NFrOE9d5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODY4MTk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1MToyMFrOH6JG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoyMDoxM1rOH855-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODY3MA==", "bodyText": "This class is public - can you move it to a top level package private class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r530728670", "createdAt": "2020-11-26T01:51:20Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -20,16 +23,25 @@\n  * <p>Null keys will be silently dropped.\n  *\n  * <p>Note: The behavior of null-valued attributes is undefined, and hence strongly discouraged.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>For this reason, it is strongly suggested that you use the implementation that is provided\n+ * here via the factory methods and the {@link AttributesBuilder}.\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-public abstract class Attributes extends ImmutableKeyValuePairs<AttributeKey, Object>\n-    implements ReadableAttributes {\n-  private static final Attributes EMPTY = Attributes.builder().build();\n+public interface Attributes extends ReadableAttributes {\n \n   @AutoValue\n   @Immutable\n-  abstract static class ArrayBackedAttributes extends Attributes {\n+  abstract class ArrayBackedAttributes extends ImmutableKeyValuePairs<AttributeKey, Object>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDExMQ==", "bodyText": "ooh. good point. yes, will do so.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r530734111", "createdAt": "2020-11-26T02:11:49Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -20,16 +23,25 @@\n  * <p>Null keys will be silently dropped.\n  *\n  * <p>Note: The behavior of null-valued attributes is undefined, and hence strongly discouraged.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>For this reason, it is strongly suggested that you use the implementation that is provided\n+ * here via the factory methods and the {@link AttributesBuilder}.\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-public abstract class Attributes extends ImmutableKeyValuePairs<AttributeKey, Object>\n-    implements ReadableAttributes {\n-  private static final Attributes EMPTY = Attributes.builder().build();\n+public interface Attributes extends ReadableAttributes {\n \n   @AutoValue\n   @Immutable\n-  abstract static class ArrayBackedAttributes extends Attributes {\n+  abstract class ArrayBackedAttributes extends ImmutableKeyValuePairs<AttributeKey, Object>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODY3MA=="}, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNTMzNg==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r533625336", "createdAt": "2020-12-01T18:20:13Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -20,16 +23,25 @@\n  * <p>Null keys will be silently dropped.\n  *\n  * <p>Note: The behavior of null-valued attributes is undefined, and hence strongly discouraged.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based\n+ * equals/hashCode implementations. If an implementation does not strictly conform to these\n+ * requirements, behavior of the OpenTelemetry APIs and default SDK cannot be guaranteed.\n+ *\n+ * <p>For this reason, it is strongly suggested that you use the implementation that is provided\n+ * here via the factory methods and the {@link AttributesBuilder}.\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-public abstract class Attributes extends ImmutableKeyValuePairs<AttributeKey, Object>\n-    implements ReadableAttributes {\n-  private static final Attributes EMPTY = Attributes.builder().build();\n+public interface Attributes extends ReadableAttributes {\n \n   @AutoValue\n   @Immutable\n-  abstract static class ArrayBackedAttributes extends Attributes {\n+  abstract class ArrayBackedAttributes extends ImmutableKeyValuePairs<AttributeKey, Object>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODY3MA=="}, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODczODE2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoyMjoxN1rOH6JnDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzowNTo0NlrOH6KSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNjkwOA==", "bodyText": "By the way - must they be immutable? Actually one of the, completely unsupported but wild, use cases that came up for me for this interface is mutable attributes in resource. Docker cgroups come to mind, but I wouldn't be surprised if there are some good use cases for process-related information that is updatable at runtime.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r530736908", "createdAt": "2020-11-26T02:22:17Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -20,16 +23,25 @@\n  * <p>Null keys will be silently dropped.\n  *\n  * <p>Note: The behavior of null-valued attributes is undefined, and hence strongly discouraged.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NzkxNg==", "bodyText": "I'd much rather start by strongly suggesting immutability, then maybe relax it if we find it's ok for them to be mutable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r530747916", "createdAt": "2020-11-26T03:05:46Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -20,16 +23,25 @@\n  * <p>Null keys will be silently dropped.\n  *\n  * <p>Note: The behavior of null-valued attributes is undefined, and hence strongly discouraged.\n+ *\n+ * <p>Implementations of this interface *must* be immutable and have well-defined value-based", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNjkwOA=="}, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg4NDE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1MDo1NFrOH6K7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1OToyMFrOH8JOJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1ODU0Nw==", "bodyText": "in order for the javaagent to provide a single implementation that satisfies both the shaded and unshaded interfaces, we need the return value here to be an interface, so that its implementation use a covariant return type that satisfies both, similar to the TraceState.getTraceState() example in #1946 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r530758547", "createdAt": "2020-11-26T03:50:54Z", "author": {"login": "trask"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -39,47 +51,65 @@\n     public AttributesBuilder toBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNzY4Ng==", "bodyText": "done. please take a look", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2134#discussion_r532827686", "createdAt": "2020-11-30T18:59:20Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -39,47 +51,65 @@\n     public AttributesBuilder toBuilder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1ODU0Nw=="}, "originalCommit": {"oid": "f3dfa203f76d4194d9e6ff80c1366163c14670f7"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1775, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}