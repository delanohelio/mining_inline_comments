{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODQzOTU4", "number": 1152, "title": "Prevent casting to TraceProviderSdk", "bodyText": "Problem statement:\nIf users take the static global providers that are returned from the API, and cast them to their SDK specific implementations, then those casts will fail under auto-instrumentation, because auto-instrumentation takes over the static global providers returned by the API and points them to it's embedded SDK.\nProposal:\nPrevent users from doing this to get SDK-specific implementation, so that auto-instrumentation does not cause them ClassCastException unexpectedly.\nThe preferably way to get the SDK-specific implementation is through OpenTelemetrySdk anyways.\nImplementation:\nWrap (obfuscate) the static global providers that are returned from the API to prevent users from casting them to their SDK specific implementation.\nUnfortunately, OpenTelemetrySdk needs to access the TracerSdkProvider somehow, and with this change it can no longer perform the cast either, so there's a semi-obscured unobfuscate() method that the SDK can use to get access to the underlying TracerSdkProvider. If anyone has other ideas for how to hide this from users, but allow it from the SDK let me know!\nTerminology choice:\nAn alternative naming scheme could be:\n\nObfuscatedTracerProvider --> WrappedTracerProvider\nObfuscated --> Wrapped\nunobfuscate() --> unwrap()\n\nBut I wanted to it be really clear to end users that this is not something they should do, and casting to something called Wrapped and calling unwrap() sounds much more likely for someone to do compared to casting to something called Obfuscated and calling unobfuscate().\nNote:\nThis PR only covers TracerProvider, but if/when there's agreement on this, we can extend to MeterProvider and CorrelationContextManager.", "createdAt": "2020-04-28T02:23:58Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152", "merged": true, "mergeCommit": {"oid": "79d664fc104ffde9df8cd0c4825df11e17ff5edb"}, "closed": true, "closedAt": "2020-05-01T19:12:13Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb5T61gH2gAyNDA5ODQzOTU4OjIyZmUzOTZjMWUzZWRkNjIxODc3ODI0NzhjNGJjMzU5ZWMzNmZmODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdDfbqAFqTQwNDIyNTgxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22fe396c1e3edd62187782478c4bc359ec36ff80", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22fe396c1e3edd62187782478c4bc359ec36ff80", "committedDate": "2020-04-28T01:08:23Z", "message": "Prevent casting to TraceProviderSdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/164a7b5d12c7a87daca9f86c31b2a684d4691a68", "committedDate": "2020-04-28T02:33:42Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTAzNzc4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#pullrequestreview-401903778", "createdAt": "2020-04-28T14:38:57Z", "commit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1OFrOGNXZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1OFrOGNXZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2ODAwNg==", "bodyText": "Not sure I understand the purpose of this interface. Can we remove it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416668006", "createdAt": "2020-04-28T14:38:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDY4ODg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#pullrequestreview-402068887", "createdAt": "2020-04-28T17:43:10Z", "commit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0MzoxMFrOGNfrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo0MzoxMFrOGNfrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMzYwMA==", "bodyText": "Rather than Object, can we have this interface be parameterized with a type?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416803600", "createdAt": "2020-04-28T17:43:10Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/Obfuscated.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.internal;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This interface allows the SDK to unobfuscate an obfuscated static global provider.\n+ *\n+ * <p>Static global providers are obfuscated when they are returned from the API to prevent users\n+ * from casting them to their SDK specific implementation.\n+ *\n+ * <p>This is important for auto-instrumentation, because if users take the static global providers\n+ * that are returned from the API, and cast them to their SDK specific implementations, then those\n+ * casts will fail under auto-instrumentation, because auto-instrumentation takes over the static\n+ * global providers returned by the API and points them to it's embedded SDK.\n+ *\n+ * @since 0.4.0\n+ */\n+@ThreadSafe\n+public interface Obfuscated {\n+\n+  /**\n+   * Returns the unobfuscated provider.\n+   *\n+   * @return the unobfuscated provider.\n+   * @since 0.4.0\n+   */\n+  Object unobfuscate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164a7b5d12c7a87daca9f86c31b2a684d4691a68"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e", "committedDate": "2020-04-28T17:55:06Z", "message": "Parameterize Obfuscated interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTE0Mjc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#pullrequestreview-402114275", "createdAt": "2020-04-28T18:44:17Z", "commit": {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NDoxOFrOGNh_7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NDoxOFrOGNh_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MTcxMQ==", "bodyText": "@bogdandrutu this is where the Obfuscated interface is used. OpenTelemetrySdk.getTracerProvider() needs some way to unwrap and retrieve the TracerSdkProvider. Did you have other idea how to unwrap?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#discussion_r416841711", "createdAt": "2020-04-28T18:44:18Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -40,7 +41,7 @@\n    * @since 0.1.0\n    */\n   public static TracerSdkProvider getTracerProvider() {\n-    return (TracerSdkProvider) OpenTelemetry.getTracerProvider();\n+    return (TracerSdkProvider) ((Obfuscated<?>) OpenTelemetry.getTracerProvider()).unobfuscate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjI1ODEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1152#pullrequestreview-404225811", "createdAt": "2020-05-01T15:33:56Z", "commit": {"oid": "5aea21d0ea1abdd3fae2397b2d186dddd5f8ef0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3014, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}