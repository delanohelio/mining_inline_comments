{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODE1MjEx", "number": 1625, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyNzo0MVrOEhTRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyNzo0MVrOEhTRdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzU0MjMxOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/tracing_incubator/src/main/java/io/opentelemetry/sdk/extensions/incubator/trace/data/SpanData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyNzo0MVrOHOioSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTozMTo1M1rOHSgu0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwOTQ4MQ==", "bodyText": "Can we name this something else, so we don't have the name collision, requiring using FQNs for hte interface?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1625#discussion_r485009481", "createdAt": "2020-09-08T15:27:41Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/tracing_incubator/src/main/java/io/opentelemetry/sdk/extensions/incubator/trace/data/SpanData.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.incubator.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A {@link io.opentelemetry.sdk.trace.data.SpanData} implementation with a builder that can be used\n+ * to modify parts of a {@link io.opentelemetry.sdk.trace.data.SpanData}.\n+ *\n+ * <pre>{@code\n+ * String clientType = ClientConfig.parseUserAgent(\n+ *   data.getAttributes().get(SemanticAttributes.HTTP_USER_AGENT).getStringValue());\n+ * Attributes newAttributes = Attributes.newBuilder(data.getAttributes())\n+ *   .setAttribute(\"client_type\", clientType)\n+ *   .build();\n+ * data = io.opentelemetry.sdk.extensions.incubator.trace.data.SpanData.newBuilder(data)\n+ *   .setAttributes(newAttributes)\n+ *   .build();\n+ * exporter.export(data);\n+ *\n+ * }</pre>\n+ */\n+// AutoValue generated hashCode is fine but we need to define equals to accept the base SpanData\n+// type.\n+@Immutable\n+@AutoValue\n+public abstract class SpanData implements io.opentelemetry.sdk.trace.data.SpanData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec1e12d838d9ab264f77b0369f419af51cec74a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NDg3Nw==", "bodyText": "Not sure why I missed this review, sorry! I could have sworn I added a comment in description about it but didn't - I agree, but couldn't come up with a better name :( Any ideas?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1625#discussion_r489164877", "createdAt": "2020-09-16T05:04:40Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/tracing_incubator/src/main/java/io/opentelemetry/sdk/extensions/incubator/trace/data/SpanData.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.incubator.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A {@link io.opentelemetry.sdk.trace.data.SpanData} implementation with a builder that can be used\n+ * to modify parts of a {@link io.opentelemetry.sdk.trace.data.SpanData}.\n+ *\n+ * <pre>{@code\n+ * String clientType = ClientConfig.parseUserAgent(\n+ *   data.getAttributes().get(SemanticAttributes.HTTP_USER_AGENT).getStringValue());\n+ * Attributes newAttributes = Attributes.newBuilder(data.getAttributes())\n+ *   .setAttribute(\"client_type\", clientType)\n+ *   .build();\n+ * data = io.opentelemetry.sdk.extensions.incubator.trace.data.SpanData.newBuilder(data)\n+ *   .setAttributes(newAttributes)\n+ *   .build();\n+ * exporter.export(data);\n+ *\n+ * }</pre>\n+ */\n+// AutoValue generated hashCode is fine but we need to define equals to accept the base SpanData\n+// type.\n+@Immutable\n+@AutoValue\n+public abstract class SpanData implements io.opentelemetry.sdk.trace.data.SpanData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwOTQ4MQ=="}, "originalCommit": {"oid": "7ec1e12d838d9ab264f77b0369f419af51cec74a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3MjY5MQ==", "bodyText": "BuildableSpanData? SpanDataExtender? BuiltSpanData?\nMaybe just SpanDataBuilder for now, since it's really a temporary move to see if this is the best approach?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1625#discussion_r489172691", "createdAt": "2020-09-16T05:31:53Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/tracing_incubator/src/main/java/io/opentelemetry/sdk/extensions/incubator/trace/data/SpanData.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.incubator.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.ReadableAttributes;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A {@link io.opentelemetry.sdk.trace.data.SpanData} implementation with a builder that can be used\n+ * to modify parts of a {@link io.opentelemetry.sdk.trace.data.SpanData}.\n+ *\n+ * <pre>{@code\n+ * String clientType = ClientConfig.parseUserAgent(\n+ *   data.getAttributes().get(SemanticAttributes.HTTP_USER_AGENT).getStringValue());\n+ * Attributes newAttributes = Attributes.newBuilder(data.getAttributes())\n+ *   .setAttribute(\"client_type\", clientType)\n+ *   .build();\n+ * data = io.opentelemetry.sdk.extensions.incubator.trace.data.SpanData.newBuilder(data)\n+ *   .setAttributes(newAttributes)\n+ *   .build();\n+ * exporter.export(data);\n+ *\n+ * }</pre>\n+ */\n+// AutoValue generated hashCode is fine but we need to define equals to accept the base SpanData\n+// type.\n+@Immutable\n+@AutoValue\n+public abstract class SpanData implements io.opentelemetry.sdk.trace.data.SpanData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwOTQ4MQ=="}, "originalCommit": {"oid": "7ec1e12d838d9ab264f77b0369f419af51cec74a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1406, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}