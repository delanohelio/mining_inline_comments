{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODA3MzEz", "number": 2384, "title": "Remove AbstractBoundInstrument, move mapping logic to Aggregator", "bodyText": "Remove one allocation when calling instruments without bounds.\nSigned-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-12-22T01:05:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384", "merged": true, "mergeCommit": {"oid": "1c937c4f4ed91fb5c72289fd1e5e3a251a4e7555"}, "closed": true, "closedAt": "2020-12-22T18:38:26Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdouNCogFqTU1NzI1MzQyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdou3WpABqjQxNDEzMDQ0NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjUzNDI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384#pullrequestreview-557253427", "createdAt": "2020-12-22T17:44:05Z", "commit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0NDowNVrOIKDaFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0NDowNVrOIKDaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMjUwMg==", "bodyText": "tiny nit: might rename this variable to boundAggregator", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384#discussion_r547412502", "createdAt": "2020-12-22T17:44:05Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/SynchronousInstrumentAccumulator.java", "diffHunk": "@@ -14,45 +14,41 @@\n import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.ReentrantLock;\n-import java.util.function.Function;\n \n-final class SynchronousInstrumentAccumulator<B extends AbstractBoundInstrument> {\n-  private final ConcurrentHashMap<Labels, B> boundLabels;\n+final class SynchronousInstrumentAccumulator {\n+  private final ConcurrentHashMap<Labels, Aggregator> aggregatorLabels;\n   private final ReentrantLock collectLock;\n   private final InstrumentProcessor instrumentProcessor;\n-  private final Function<Aggregator, B> boundFactory;\n \n-  SynchronousInstrumentAccumulator(\n-      InstrumentProcessor instrumentProcessor, Function<Aggregator, B> boundFactory) {\n-    this.boundFactory = boundFactory;\n-    boundLabels = new ConcurrentHashMap<>();\n+  SynchronousInstrumentAccumulator(InstrumentProcessor instrumentProcessor) {\n+    aggregatorLabels = new ConcurrentHashMap<>();\n     collectLock = new ReentrantLock();\n     this.instrumentProcessor = instrumentProcessor;\n   }\n \n-  public B bind(Labels labels) {\n+  Aggregator bind(Labels labels) {\n     Objects.requireNonNull(labels, \"labels\");\n-    B binding = boundLabels.get(labels);\n-    if (binding != null && binding.bind()) {\n+    Aggregator aggregator = aggregatorLabels.get(labels);\n+    if (aggregator != null && aggregator.acquire()) {\n       // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n-      return binding;\n+      return aggregator;\n     }\n \n     // Missing entry or no longer mapped, try to add a new entry.\n-    binding = boundFactory.apply(instrumentProcessor.getAggregator());\n+    aggregator = instrumentProcessor.getAggregator();\n     while (true) {\n-      B oldBound = boundLabels.putIfAbsent(labels, binding);\n+      Aggregator oldBound = aggregatorLabels.putIfAbsent(labels, aggregator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjU2NTA2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384#pullrequestreview-557256506", "createdAt": "2020-12-22T17:49:03Z", "commit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0OTowM1rOIKDj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0OTowM1rOIKDj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNTAzOQ==", "bodyText": "could we add a verification that there is nothing bound at this point? Not sure if that would require dipping into the internals, but it seems like a valuable assertion to be able to make.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384#discussion_r547415039", "createdAt": "2020-12-22T17:49:03Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/test/java/io/opentelemetry/sdk/metrics/SynchronousInstrumentAccumulatorTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.aggregation.Aggregations;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.common.InstrumentDescriptor;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n+import io.opentelemetry.sdk.resources.Resource;\n+import org.junit.jupiter.api.Test;\n+\n+public class SynchronousInstrumentAccumulatorTest {\n+  private static final InstrumentDescriptor DESCRIPTOR =\n+      InstrumentDescriptor.create(\n+          \"name\", \"description\", \"unit\", InstrumentType.COUNTER, InstrumentValueType.DOUBLE);\n+  private final MeterProviderSharedState providerSharedState =\n+      MeterProviderSharedState.create(TestClock.create(), Resource.getEmpty());\n+  private final MeterSharedState meterSharedState =\n+      MeterSharedState.create(InstrumentationLibraryInfo.create(\"test\", \"1.0\"));\n+\n+  @Test\n+  void sameAggregator_ForSameLabelSet() {\n+    SynchronousInstrumentAccumulator accumulator =\n+        new SynchronousInstrumentAccumulator(\n+            InstrumentProcessor.getCumulativeAllLabels(\n+                DESCRIPTOR, providerSharedState, meterSharedState, Aggregations.count()));\n+    Aggregator aggregator = accumulator.bind(Labels.of(\"K\", \"V\"));\n+    Aggregator duplicateAggregator = accumulator.bind(Labels.of(\"K\", \"V\"));\n+    try {\n+      assertThat(duplicateAggregator).isSameAs(aggregator);\n+      accumulator.collectAll();\n+      Aggregator anotherDuplicateAggregator = accumulator.bind(Labels.of(\"K\", \"V\"));\n+      try {\n+        assertThat(anotherDuplicateAggregator).isEqualTo(aggregator);\n+      } finally {\n+        anotherDuplicateAggregator.release();\n+      }\n+    } finally {\n+      aggregator.release();\n+      aggregator.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjU3MDg1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2384#pullrequestreview-557257085", "createdAt": "2020-12-22T17:50:00Z", "commit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7064ca345ad841ff7b8b41124ae7f0b0b2b46d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6d7064ca345ad841ff7b8b41124ae7f0b0b2b46d", "committedDate": "2020-12-22T18:19:39Z", "message": "Remove AbstractBoundInstrument, move mapping logic to Aggregator\n\nRemove one allocation when calling instruments without bounds.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d626d6837348cf905070b12b3afc61773904840", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3d626d6837348cf905070b12b3afc61773904840", "committedDate": "2020-12-22T18:30:05Z", "message": "Fix review comments\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6ace95bac3ec54cbd46a10d8a2ed70a47fdf77d4", "committedDate": "2020-12-22T01:04:46Z", "message": "Remove AbstractBoundInstrument, move mapping logic to Aggregator\n\nRemove one allocation when calling instruments without bounds.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "3d626d6837348cf905070b12b3afc61773904840", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3d626d6837348cf905070b12b3afc61773904840", "committedDate": "2020-12-22T18:30:05Z", "message": "Fix review comments\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3517, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}