{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODY3MjQ2", "number": 1627, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMDozOFrOEhI6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0ODoxNFrOEhSJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTg0NTYzOnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMDozOFrOHOScTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0MjoxMFrOHPQoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ==", "bodyText": "In that case, wouldn't the compiler tell you that span is not available anymore? So you could then switch to using a nested try/catch or a try/finally instead of try().", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484744271", "createdAt": "2020-09-08T08:30:38Z", "author": {"login": "Oberon00"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();\n+}\n+```\n+\n+It would not be possible to call `recordException` if `span` was also using try-with-resources.\n+Because this is a common usage for spans, we do not support try-with-resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NDI3Ng==", "bodyText": "My reading of the attached issue is this is the rationale for the decision (@arminru you originally provided the link to the OT issue so maybe you can confirm) and for this PR I want to capture it as directly as possible, attempts by me to backport additional rationale or change it would be like rewriting history ;) Also, main motivation for the PR itself is to have a location to continue to add even more rationale when things come up (or more concretely, to knock out a required-for-ga issue :)).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485354276", "createdAt": "2020-09-09T05:52:35Z", "author": {"login": "anuraaga"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();\n+}\n+```\n+\n+It would not be possible to call `recordException` if `span` was also using try-with-resources.\n+Because this is a common usage for spans, we do not support try-with-resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5Njg0NQ==", "bodyText": "I was not part in making that decision since this was merely taken over from OT (without taking over a rationale doc) and only dug up the explanation in the issue linked above when I was wondering myself.\nA nested try/catch would work but not having Span implement Closeable at all, makes it even harder to build a structure that makes recording errors impossible. Personally, I think this should be left to the user to decide how they want to use things (maybe they don't have any means of getting a reasonable exception or error status/message to set and with Span.Status being removed there's nothing left at all to do) but I don't have strong opinion here (one could always add a wrapper to make their span closeable).\nEither way, this seems to be the original rationale from back when the decision was made (@carlosalberto please confirm), so it would be the correct reason to state in this doc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485396845", "createdAt": "2020-09-09T07:29:42Z", "author": {"login": "arminru"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();\n+}\n+```\n+\n+It would not be possible to call `recordException` if `span` was also using try-with-resources.\n+Because this is a common usage for spans, we do not support try-with-resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MzE1OA==", "bodyText": "That's indeed the original rationale - that's also why this is not allowed (worth adding it?):\ntry (Scope scope = tracer.spanBuilder().startAsCurrentSpan()) {\n} catch (Exception e) {\n  // Cannot report the error AND there's no handle to `Span` at this point.\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485763158", "createdAt": "2020-09-09T16:42:10Z", "author": {"login": "carlosalberto"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();\n+}\n+```\n+\n+It would not be possible to call `recordException` if `span` was also using try-with-resources.\n+Because this is a common usage for spans, we do not support try-with-resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTg1NTQ0OnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMjo1NFrOHOSiTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMjo1NFrOHOSiTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTgwNA==", "bodyText": "I don't think we have a \"scopeManager\" method on tracer. Should this be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            try (Scope scope = tracer.scopeManager().activate(span)) {\n          \n          \n            \n            try (Scope scope = tracer.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484745804", "createdAt": "2020-09-08T08:32:54Z", "author": {"login": "Oberon00"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzM1Nzg1OnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0ODoxNFrOHOg0jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0ODoxNFrOHOg0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.finish();\n          \n          \n            \n                span.end();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484979853", "createdAt": "2020-09-08T14:48:14Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}