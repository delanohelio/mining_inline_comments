{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTMzOTg5", "number": 1133, "title": "Extracted Extractor and Injector code from B3Propagator", "bodyText": "Code polish", "createdAt": "2020-04-24T12:54:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133", "merged": true, "mergeCommit": {"oid": "8090640c1a8d34275c67f8fdbcbb685974bff89b"}, "closed": true, "closedAt": "2020-05-03T16:27:48Z", "author": {"login": "davebarda"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaxCffgBqjMyNjkyODU3MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdawoQABqjMyOTY2MzQwNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "527ccbd70a6397cf829089be798bf95b05ee58c4", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/527ccbd70a6397cf829089be798bf95b05ee58c4", "committedDate": "2020-04-24T12:52:38Z", "message": "Extracted B3Propagator to Extractor and Injector"}, "afterCommit": {"oid": "4a28c6655e5cee092ade9220f6bd9753e960cc53", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a28c6655e5cee092ade9220f6bd9753e960cc53", "committedDate": "2020-04-24T12:55:58Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a28c6655e5cee092ade9220f6bd9753e960cc53", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a28c6655e5cee092ade9220f6bd9753e960cc53", "committedDate": "2020-04-24T12:55:58Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}, "afterCommit": {"oid": "9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "committedDate": "2020-04-24T13:09:21Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "committedDate": "2020-04-24T13:09:21Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}, "afterCommit": {"oid": "fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "committedDate": "2020-04-24T13:15:19Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "committedDate": "2020-04-24T13:15:19Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}, "afterCommit": {"oid": "0e03553b554a64a07c47fe841c6fd1d30fc960c2", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e03553b554a64a07c47fe841c6fd1d30fc960c2", "committedDate": "2020-04-24T14:09:38Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e03553b554a64a07c47fe841c6fd1d30fc960c2", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e03553b554a64a07c47fe841c6fd1d30fc960c2", "committedDate": "2020-04-24T14:09:38Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}, "afterCommit": {"oid": "f1c78e5f63a695bec082885bb2e38e4e118989c8", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f1c78e5f63a695bec082885bb2e38e4e118989c8", "committedDate": "2020-04-24T14:19:21Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f0ed1d731b2317b6b4f4ea71ea569b09b3128f9", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f0ed1d731b2317b6b4f4ea71ea569b09b3128f9", "committedDate": "2020-04-24T20:36:55Z", "message": "Fix copyright header 2019 -> 2020"}, "afterCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "committedDate": "2020-04-24T20:37:27Z", "message": "Fix copyright header 2019 -> 2020"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjU5NDUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#pullrequestreview-400259453", "createdAt": "2020-04-24T20:45:39Z", "commit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjMzMjQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#pullrequestreview-401233246", "createdAt": "2020-04-27T18:50:49Z", "commit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1MDo0OVrOGMylyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1Mjo1OFrOGMysBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NDk2OQ==", "bodyText": "final?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416064969", "createdAt": "2020-04-27T18:50:49Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTA2Nw==", "bodyText": "remove public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065067", "createdAt": "2020-04-27T18:50:59Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  public B3PropagatorInjector(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTM0NQ==", "bodyText": "same, class is package protected, no need to be public.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065345", "createdAt": "2020-04-27T18:51:17Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  public B3PropagatorInjector(boolean singleHeader) {\n+    this.singleHeader = singleHeader;\n+  }\n+\n+  public <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTU1Ng==", "bodyText": "final?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065556", "createdAt": "2020-04-27T18:51:32Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTY4MA==", "bodyText": "No public, class is package protected.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065680", "createdAt": "2020-04-27T18:51:43Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {\n+  private static final Logger logger = Logger.getLogger(B3PropagatorExtractor.class.getName());\n+\n+  private final boolean isSingleHeader;\n+\n+  public B3PropagatorExtractor(boolean isSingleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTczNg==", "bodyText": "same.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065736", "createdAt": "2020-04-27T18:51:47Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {\n+  private static final Logger logger = Logger.getLogger(B3PropagatorExtractor.class.getName());\n+\n+  private final boolean isSingleHeader;\n+\n+  public B3PropagatorExtractor(boolean isSingleHeader) {\n+    this.isSingleHeader = isSingleHeader;\n+  }\n+\n+  public <C> Context extract(Context context, C carrier, HttpTextFormat.Getter<C> getter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NjU2NQ==", "bodyText": "Can be moved to extract and private static.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416066565", "createdAt": "2020-04-27T18:52:58Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -42,40 +32,27 @@\n  */\n @Immutable\n public class B3Propagator implements HttpTextFormat {\n-  private static final Logger logger = Logger.getLogger(B3Propagator.class.getName());\n-\n   static final String TRACE_ID_HEADER = \"X-B3-TraceId\";\n   static final String SPAN_ID_HEADER = \"X-B3-SpanId\";\n   static final String SAMPLED_HEADER = \"X-B3-Sampled\";\n   static final String TRUE_INT = \"1\";\n   static final String FALSE_INT = \"0\";\n   static final String COMBINED_HEADER = \"b3\";\n   static final String COMBINED_HEADER_DELIMITER = \"-\";\n+  static final int MAX_TRACE_ID_LENGTH = 2 * TraceId.getSize();\n+  static final int MAX_SPAN_ID_LENGTH = 2 * SpanId.getSize();\n+  static final TraceFlags SAMPLED_FLAGS = TraceFlags.builder().setIsSampled(true).build();\n+  static final TraceFlags NOT_SAMPLED_FLAGS = TraceFlags.builder().setIsSampled(false).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e606f9d4819bedfedff0ce4fe82a52edf2b54b4c", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e606f9d4819bedfedff0ce4fe82a52edf2b54b4c", "committedDate": "2020-04-28T12:10:30Z", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f964a952e47c3559b43b41f6c05cf268b9503f08", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f964a952e47c3559b43b41f6c05cf268b9503f08", "committedDate": "2020-04-28T12:10:30Z", "message": "Fix copyright header 2019 -> 2020"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c2e088c0324260f876a46823242bcb7e56458f", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/82c2e088c0324260f876a46823242bcb7e56458f", "committedDate": "2020-04-28T12:19:35Z", "message": "Changed some classes/methods modifiers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "committedDate": "2020-04-24T20:37:27Z", "message": "Fix copyright header 2019 -> 2020"}, "afterCommit": {"oid": "82c2e088c0324260f876a46823242bcb7e56458f", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/82c2e088c0324260f876a46823242bcb7e56458f", "committedDate": "2020-04-28T12:19:35Z", "message": "Changed some classes/methods modifiers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTEzNTYy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#pullrequestreview-401913562", "createdAt": "2020-04-28T14:48:21Z", "commit": {"oid": "82c2e088c0324260f876a46823242bcb7e56458f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo0ODoyMVrOGNX3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo0ODoyMVrOGNX3hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NTcxNg==", "bodyText": "Objects.requireNotNull() and everywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416675716", "createdAt": "2020-04-28T14:48:21Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  B3PropagatorInjector(boolean singleHeader) {\n+    this.singleHeader = singleHeader;\n+  }\n+\n+  <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {\n+    Utils.checkNotNull(context, \"context\");\n+    Utils.checkNotNull(setter, \"setter\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c2e088c0324260f876a46823242bcb7e56458f"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8339ad0f78a8af5722e23b1b65c6db2dbf9a0c58", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8339ad0f78a8af5722e23b1b65c6db2dbf9a0c58", "committedDate": "2020-04-29T12:43:15Z", "message": "Using Objects.requireNonNull instead of using Utils"}, "afterCommit": {"oid": "5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "committedDate": "2020-04-29T12:56:37Z", "message": "Using Objects.requireNonNull instead of using Utils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTQ1MDg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#pullrequestreview-404545084", "createdAt": "2020-05-02T17:19:33Z", "commit": {"oid": "5c230bcaf7478a85f3f2ce3145a2686106dc9cdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzoxOTozM1rOGPkwGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzoxOTozM1rOGPkwGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4Mzk2Mw==", "bodyText": "please remove this file, as @bogdandrutu said.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r418983963", "createdAt": "2020-05-02T17:19:33Z", "author": {"login": "jkwatson"}, "path": ".gradletasknamecache", "diffHunk": "@@ -0,0 +1,2574 @@\n+opentelemetry-all:assemble\n+opentelemetry-api:assemble\n+opentelemetry-context-prop:assemble\n+opentelemetry-contrib-auto-annotations:assemble\n+opentelemetry-contrib-runtime-metrics:assemble\n+opentelemetry-contrib-trace-propagators:assemble\n+opentelemetry-contrib-trace-utils:assemble\n+opentelemetry-exporters-inmemory:assemble\n+opentelemetry-exporters-jaeger:assemble\n+opentelemetry-exporters-logging:assemble\n+opentelemetry-exporters-otlp:assemble\n+opentelemetry-exporters-prometheus:assemble\n+opentelemetry-opentracing-shim:assemble\n+opentelemetry-proto:assemble\n+opentelemetry-sdk:assemble\n+opentelemetry-sdk-contrib-async-processor:assemble\n+opentelemetry-sdk-contrib-auto-config:assemble\n+opentelemetry-sdk-contrib-aws-v1-support:assemble\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:assemble\n+opentelemetry-sdk-contrib-otproto:assemble\n+opentelemetry-sdk-contrib-testbed:assemble\n+opentelemetry-all:build\n+opentelemetry-api:build\n+opentelemetry-context-prop:build\n+opentelemetry-contrib-auto-annotations:build\n+opentelemetry-contrib-runtime-metrics:build\n+opentelemetry-contrib-trace-propagators:build\n+opentelemetry-contrib-trace-utils:build\n+opentelemetry-exporters-inmemory:build\n+opentelemetry-exporters-jaeger:build\n+opentelemetry-exporters-logging:build\n+opentelemetry-exporters-otlp:build\n+opentelemetry-exporters-prometheus:build\n+opentelemetry-opentracing-shim:build\n+opentelemetry-proto:build\n+opentelemetry-sdk:build\n+opentelemetry-sdk-contrib-async-processor:build\n+opentelemetry-sdk-contrib-auto-config:build\n+opentelemetry-sdk-contrib-aws-v1-support:build\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:build\n+opentelemetry-sdk-contrib-otproto:build\n+opentelemetry-sdk-contrib-testbed:build\n+opentelemetry-all:buildDependents\n+opentelemetry-api:buildDependents\n+opentelemetry-context-prop:buildDependents\n+opentelemetry-contrib-auto-annotations:buildDependents\n+opentelemetry-contrib-runtime-metrics:buildDependents\n+opentelemetry-contrib-trace-propagators:buildDependents\n+opentelemetry-contrib-trace-utils:buildDependents\n+opentelemetry-exporters-inmemory:buildDependents\n+opentelemetry-exporters-jaeger:buildDependents\n+opentelemetry-exporters-logging:buildDependents\n+opentelemetry-exporters-otlp:buildDependents\n+opentelemetry-exporters-prometheus:buildDependents\n+opentelemetry-opentracing-shim:buildDependents\n+opentelemetry-proto:buildDependents\n+opentelemetry-sdk:buildDependents\n+opentelemetry-sdk-contrib-async-processor:buildDependents\n+opentelemetry-sdk-contrib-auto-config:buildDependents\n+opentelemetry-sdk-contrib-aws-v1-support:buildDependents\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:buildDependents\n+opentelemetry-sdk-contrib-otproto:buildDependents\n+opentelemetry-sdk-contrib-testbed:buildDependents\n+opentelemetry-all:buildNeeded\n+opentelemetry-api:buildNeeded\n+opentelemetry-context-prop:buildNeeded\n+opentelemetry-contrib-auto-annotations:buildNeeded\n+opentelemetry-contrib-runtime-metrics:buildNeeded\n+opentelemetry-contrib-trace-propagators:buildNeeded\n+opentelemetry-contrib-trace-utils:buildNeeded\n+opentelemetry-exporters-inmemory:buildNeeded\n+opentelemetry-exporters-jaeger:buildNeeded\n+opentelemetry-exporters-logging:buildNeeded\n+opentelemetry-exporters-otlp:buildNeeded\n+opentelemetry-exporters-prometheus:buildNeeded\n+opentelemetry-opentracing-shim:buildNeeded\n+opentelemetry-proto:buildNeeded\n+opentelemetry-sdk:buildNeeded\n+opentelemetry-sdk-contrib-async-processor:buildNeeded\n+opentelemetry-sdk-contrib-auto-config:buildNeeded\n+opentelemetry-sdk-contrib-aws-v1-support:buildNeeded\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:buildNeeded\n+opentelemetry-sdk-contrib-otproto:buildNeeded\n+opentelemetry-sdk-contrib-testbed:buildNeeded\n+opentelemetry-all:classes\n+opentelemetry-api:classes\n+opentelemetry-context-prop:classes\n+opentelemetry-contrib-auto-annotations:classes\n+opentelemetry-contrib-runtime-metrics:classes\n+opentelemetry-contrib-trace-propagators:classes\n+opentelemetry-contrib-trace-utils:classes\n+opentelemetry-exporters-inmemory:classes\n+opentelemetry-exporters-jaeger:classes\n+opentelemetry-exporters-logging:classes\n+opentelemetry-exporters-otlp:classes\n+opentelemetry-exporters-prometheus:classes\n+opentelemetry-opentracing-shim:classes\n+opentelemetry-proto:classes\n+opentelemetry-sdk:classes\n+opentelemetry-sdk-contrib-async-processor:classes\n+opentelemetry-sdk-contrib-auto-config:classes\n+opentelemetry-sdk-contrib-aws-v1-support:classes\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:classes\n+opentelemetry-sdk-contrib-otproto:classes\n+opentelemetry-sdk-contrib-testbed:classes\n+opentelemetry-all:clean\n+opentelemetry-api:clean\n+opentelemetry-context-prop:clean\n+opentelemetry-contrib-auto-annotations:clean\n+opentelemetry-contrib-runtime-metrics:clean\n+opentelemetry-contrib-trace-propagators:clean\n+opentelemetry-contrib-trace-utils:clean\n+opentelemetry-exporters-inmemory:clean\n+opentelemetry-exporters-jaeger:clean\n+opentelemetry-exporters-logging:clean\n+opentelemetry-exporters-otlp:clean\n+opentelemetry-exporters-prometheus:clean\n+opentelemetry-opentracing-shim:clean\n+opentelemetry-proto:clean\n+opentelemetry-sdk:clean\n+opentelemetry-sdk-contrib-async-processor:clean\n+opentelemetry-sdk-contrib-auto-config:clean\n+opentelemetry-sdk-contrib-aws-v1-support:clean\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:clean\n+opentelemetry-sdk-contrib-otproto:clean\n+opentelemetry-sdk-contrib-testbed:clean\n+opentelemetry-all:jar\n+opentelemetry-api:jar\n+opentelemetry-context-prop:jar\n+opentelemetry-contrib-auto-annotations:jar\n+opentelemetry-contrib-runtime-metrics:jar\n+opentelemetry-contrib-trace-propagators:jar\n+opentelemetry-contrib-trace-utils:jar\n+opentelemetry-exporters-inmemory:jar\n+opentelemetry-exporters-jaeger:jar\n+opentelemetry-exporters-logging:jar\n+opentelemetry-exporters-otlp:jar\n+opentelemetry-exporters-prometheus:jar\n+opentelemetry-opentracing-shim:jar\n+opentelemetry-proto:jar\n+opentelemetry-sdk:jar\n+opentelemetry-sdk-contrib-async-processor:jar\n+opentelemetry-sdk-contrib-auto-config:jar\n+opentelemetry-sdk-contrib-aws-v1-support:jar\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:jar\n+opentelemetry-sdk-contrib-otproto:jar\n+opentelemetry-sdk-contrib-testbed:jar\n+opentelemetry-api:jmhClasses\n+opentelemetry-contrib-trace-propagators:jmhClasses\n+opentelemetry-sdk:jmhClasses\n+opentelemetry-all:testClasses\n+opentelemetry-api:testClasses\n+opentelemetry-context-prop:testClasses\n+opentelemetry-contrib-auto-annotations:testClasses\n+opentelemetry-contrib-runtime-metrics:testClasses\n+opentelemetry-contrib-trace-propagators:testClasses\n+opentelemetry-contrib-trace-utils:testClasses\n+opentelemetry-exporters-inmemory:testClasses\n+opentelemetry-exporters-jaeger:testClasses\n+opentelemetry-exporters-logging:testClasses\n+opentelemetry-exporters-otlp:testClasses\n+opentelemetry-exporters-prometheus:testClasses\n+opentelemetry-opentracing-shim:testClasses\n+opentelemetry-proto:testClasses\n+opentelemetry-sdk:testClasses\n+opentelemetry-sdk-contrib-async-processor:testClasses\n+opentelemetry-sdk-contrib-auto-config:testClasses\n+opentelemetry-sdk-contrib-aws-v1-support:testClasses\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:testClasses\n+opentelemetry-sdk-contrib-otproto:testClasses\n+opentelemetry-sdk-contrib-testbed:testClasses\n+init\n+wrapper\n+opentelemetry-all:javadoc\n+opentelemetry-api:javadoc\n+opentelemetry-context-prop:javadoc\n+opentelemetry-contrib-auto-annotations:javadoc\n+opentelemetry-contrib-runtime-metrics:javadoc\n+opentelemetry-contrib-trace-propagators:javadoc\n+opentelemetry-contrib-trace-utils:javadoc\n+opentelemetry-exporters-inmemory:javadoc\n+opentelemetry-exporters-jaeger:javadoc\n+opentelemetry-exporters-logging:javadoc\n+opentelemetry-exporters-otlp:javadoc\n+opentelemetry-exporters-prometheus:javadoc\n+opentelemetry-opentracing-shim:javadoc\n+opentelemetry-proto:javadoc\n+opentelemetry-sdk:javadoc\n+opentelemetry-sdk-contrib-async-processor:javadoc\n+opentelemetry-sdk-contrib-auto-config:javadoc\n+opentelemetry-sdk-contrib-aws-v1-support:javadoc\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:javadoc\n+opentelemetry-sdk-contrib-otproto:javadoc\n+opentelemetry-sdk-contrib-testbed:javadoc\n+buildEnvironment\n+opentelemetry-all:buildEnvironment\n+opentelemetry-api:buildEnvironment\n+opentelemetry-context-prop:buildEnvironment\n+opentelemetry-contrib-auto-annotations:buildEnvironment\n+opentelemetry-contrib-runtime-metrics:buildEnvironment\n+opentelemetry-contrib-trace-propagators:buildEnvironment\n+opentelemetry-contrib-trace-utils:buildEnvironment\n+opentelemetry-exporters-inmemory:buildEnvironment\n+opentelemetry-exporters-jaeger:buildEnvironment\n+opentelemetry-exporters-logging:buildEnvironment\n+opentelemetry-exporters-otlp:buildEnvironment\n+opentelemetry-exporters-prometheus:buildEnvironment\n+opentelemetry-opentracing-shim:buildEnvironment\n+opentelemetry-proto:buildEnvironment\n+opentelemetry-sdk:buildEnvironment\n+opentelemetry-sdk-contrib-async-processor:buildEnvironment\n+opentelemetry-sdk-contrib-auto-config:buildEnvironment\n+opentelemetry-sdk-contrib-aws-v1-support:buildEnvironment\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:buildEnvironment\n+opentelemetry-sdk-contrib-otproto:buildEnvironment\n+opentelemetry-sdk-contrib-testbed:buildEnvironment\n+components\n+opentelemetry-all:components\n+opentelemetry-api:components\n+opentelemetry-context-prop:components\n+opentelemetry-contrib-auto-annotations:components\n+opentelemetry-contrib-runtime-metrics:components\n+opentelemetry-contrib-trace-propagators:components\n+opentelemetry-contrib-trace-utils:components\n+opentelemetry-exporters-inmemory:components\n+opentelemetry-exporters-jaeger:components\n+opentelemetry-exporters-logging:components\n+opentelemetry-exporters-otlp:components\n+opentelemetry-exporters-prometheus:components\n+opentelemetry-opentracing-shim:components\n+opentelemetry-proto:components\n+opentelemetry-sdk:components\n+opentelemetry-sdk-contrib-async-processor:components\n+opentelemetry-sdk-contrib-auto-config:components\n+opentelemetry-sdk-contrib-aws-v1-support:components\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:components\n+opentelemetry-sdk-contrib-otproto:components\n+opentelemetry-sdk-contrib-testbed:components\n+dependencies\n+opentelemetry-all:dependencies\n+opentelemetry-api:dependencies\n+opentelemetry-context-prop:dependencies\n+opentelemetry-contrib-auto-annotations:dependencies\n+opentelemetry-contrib-runtime-metrics:dependencies\n+opentelemetry-contrib-trace-propagators:dependencies\n+opentelemetry-contrib-trace-utils:dependencies\n+opentelemetry-exporters-inmemory:dependencies\n+opentelemetry-exporters-jaeger:dependencies\n+opentelemetry-exporters-logging:dependencies\n+opentelemetry-exporters-otlp:dependencies\n+opentelemetry-exporters-prometheus:dependencies\n+opentelemetry-opentracing-shim:dependencies\n+opentelemetry-proto:dependencies\n+opentelemetry-sdk:dependencies\n+opentelemetry-sdk-contrib-async-processor:dependencies\n+opentelemetry-sdk-contrib-auto-config:dependencies\n+opentelemetry-sdk-contrib-aws-v1-support:dependencies\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:dependencies\n+opentelemetry-sdk-contrib-otproto:dependencies\n+opentelemetry-sdk-contrib-testbed:dependencies\n+dependencyInsight\n+opentelemetry-all:dependencyInsight\n+opentelemetry-api:dependencyInsight\n+opentelemetry-context-prop:dependencyInsight\n+opentelemetry-contrib-auto-annotations:dependencyInsight\n+opentelemetry-contrib-runtime-metrics:dependencyInsight\n+opentelemetry-contrib-trace-propagators:dependencyInsight\n+opentelemetry-contrib-trace-utils:dependencyInsight\n+opentelemetry-exporters-inmemory:dependencyInsight\n+opentelemetry-exporters-jaeger:dependencyInsight\n+opentelemetry-exporters-logging:dependencyInsight\n+opentelemetry-exporters-otlp:dependencyInsight\n+opentelemetry-exporters-prometheus:dependencyInsight\n+opentelemetry-opentracing-shim:dependencyInsight\n+opentelemetry-proto:dependencyInsight\n+opentelemetry-sdk:dependencyInsight\n+opentelemetry-sdk-contrib-async-processor:dependencyInsight\n+opentelemetry-sdk-contrib-auto-config:dependencyInsight\n+opentelemetry-sdk-contrib-aws-v1-support:dependencyInsight\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:dependencyInsight\n+opentelemetry-sdk-contrib-otproto:dependencyInsight\n+opentelemetry-sdk-contrib-testbed:dependencyInsight\n+dependentComponents\n+opentelemetry-all:dependentComponents\n+opentelemetry-api:dependentComponents\n+opentelemetry-context-prop:dependentComponents\n+opentelemetry-contrib-auto-annotations:dependentComponents\n+opentelemetry-contrib-runtime-metrics:dependentComponents\n+opentelemetry-contrib-trace-propagators:dependentComponents\n+opentelemetry-contrib-trace-utils:dependentComponents\n+opentelemetry-exporters-inmemory:dependentComponents\n+opentelemetry-exporters-jaeger:dependentComponents\n+opentelemetry-exporters-logging:dependentComponents\n+opentelemetry-exporters-otlp:dependentComponents\n+opentelemetry-exporters-prometheus:dependentComponents\n+opentelemetry-opentracing-shim:dependentComponents\n+opentelemetry-proto:dependentComponents\n+opentelemetry-sdk:dependentComponents\n+opentelemetry-sdk-contrib-async-processor:dependentComponents\n+opentelemetry-sdk-contrib-auto-config:dependentComponents\n+opentelemetry-sdk-contrib-aws-v1-support:dependentComponents\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:dependentComponents\n+opentelemetry-sdk-contrib-otproto:dependentComponents\n+opentelemetry-sdk-contrib-testbed:dependentComponents\n+help\n+opentelemetry-all:help\n+opentelemetry-api:help\n+opentelemetry-context-prop:help\n+opentelemetry-contrib-auto-annotations:help\n+opentelemetry-contrib-runtime-metrics:help\n+opentelemetry-contrib-trace-propagators:help\n+opentelemetry-contrib-trace-utils:help\n+opentelemetry-exporters-inmemory:help\n+opentelemetry-exporters-jaeger:help\n+opentelemetry-exporters-logging:help\n+opentelemetry-exporters-otlp:help\n+opentelemetry-exporters-prometheus:help\n+opentelemetry-opentracing-shim:help\n+opentelemetry-proto:help\n+opentelemetry-sdk:help\n+opentelemetry-sdk-contrib-async-processor:help\n+opentelemetry-sdk-contrib-auto-config:help\n+opentelemetry-sdk-contrib-aws-v1-support:help\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:help\n+opentelemetry-sdk-contrib-otproto:help\n+opentelemetry-sdk-contrib-testbed:help\n+model\n+opentelemetry-all:model\n+opentelemetry-api:model\n+opentelemetry-context-prop:model\n+opentelemetry-contrib-auto-annotations:model\n+opentelemetry-contrib-runtime-metrics:model\n+opentelemetry-contrib-trace-propagators:model\n+opentelemetry-contrib-trace-utils:model\n+opentelemetry-exporters-inmemory:model\n+opentelemetry-exporters-jaeger:model\n+opentelemetry-exporters-logging:model\n+opentelemetry-exporters-otlp:model\n+opentelemetry-exporters-prometheus:model\n+opentelemetry-opentracing-shim:model\n+opentelemetry-proto:model\n+opentelemetry-sdk:model\n+opentelemetry-sdk-contrib-async-processor:model\n+opentelemetry-sdk-contrib-auto-config:model\n+opentelemetry-sdk-contrib-aws-v1-support:model\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:model\n+opentelemetry-sdk-contrib-otproto:model\n+opentelemetry-sdk-contrib-testbed:model\n+outgoingVariants\n+opentelemetry-all:outgoingVariants\n+opentelemetry-api:outgoingVariants\n+opentelemetry-context-prop:outgoingVariants\n+opentelemetry-contrib-auto-annotations:outgoingVariants\n+opentelemetry-contrib-runtime-metrics:outgoingVariants\n+opentelemetry-contrib-trace-propagators:outgoingVariants\n+opentelemetry-contrib-trace-utils:outgoingVariants\n+opentelemetry-exporters-inmemory:outgoingVariants\n+opentelemetry-exporters-jaeger:outgoingVariants\n+opentelemetry-exporters-logging:outgoingVariants\n+opentelemetry-exporters-otlp:outgoingVariants\n+opentelemetry-exporters-prometheus:outgoingVariants\n+opentelemetry-opentracing-shim:outgoingVariants\n+opentelemetry-proto:outgoingVariants\n+opentelemetry-sdk:outgoingVariants\n+opentelemetry-sdk-contrib-async-processor:outgoingVariants\n+opentelemetry-sdk-contrib-auto-config:outgoingVariants\n+opentelemetry-sdk-contrib-aws-v1-support:outgoingVariants\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:outgoingVariants\n+opentelemetry-sdk-contrib-otproto:outgoingVariants\n+opentelemetry-sdk-contrib-testbed:outgoingVariants\n+projects\n+opentelemetry-all:projects\n+opentelemetry-api:projects\n+opentelemetry-context-prop:projects\n+opentelemetry-contrib-auto-annotations:projects\n+opentelemetry-contrib-runtime-metrics:projects\n+opentelemetry-contrib-trace-propagators:projects\n+opentelemetry-contrib-trace-utils:projects\n+opentelemetry-exporters-inmemory:projects\n+opentelemetry-exporters-jaeger:projects\n+opentelemetry-exporters-logging:projects\n+opentelemetry-exporters-otlp:projects\n+opentelemetry-exporters-prometheus:projects\n+opentelemetry-opentracing-shim:projects\n+opentelemetry-proto:projects\n+opentelemetry-sdk:projects\n+opentelemetry-sdk-contrib-async-processor:projects\n+opentelemetry-sdk-contrib-auto-config:projects\n+opentelemetry-sdk-contrib-aws-v1-support:projects\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:projects\n+opentelemetry-sdk-contrib-otproto:projects\n+opentelemetry-sdk-contrib-testbed:projects\n+properties\n+opentelemetry-all:properties\n+opentelemetry-api:properties\n+opentelemetry-context-prop:properties\n+opentelemetry-contrib-auto-annotations:properties\n+opentelemetry-contrib-runtime-metrics:properties\n+opentelemetry-contrib-trace-propagators:properties\n+opentelemetry-contrib-trace-utils:properties\n+opentelemetry-exporters-inmemory:properties\n+opentelemetry-exporters-jaeger:properties\n+opentelemetry-exporters-logging:properties\n+opentelemetry-exporters-otlp:properties\n+opentelemetry-exporters-prometheus:properties\n+opentelemetry-opentracing-shim:properties\n+opentelemetry-proto:properties\n+opentelemetry-sdk:properties\n+opentelemetry-sdk-contrib-async-processor:properties\n+opentelemetry-sdk-contrib-auto-config:properties\n+opentelemetry-sdk-contrib-aws-v1-support:properties\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:properties\n+opentelemetry-sdk-contrib-otproto:properties\n+opentelemetry-sdk-contrib-testbed:properties\n+tasks\n+opentelemetry-all:tasks\n+opentelemetry-api:tasks\n+opentelemetry-context-prop:tasks\n+opentelemetry-contrib-auto-annotations:tasks\n+opentelemetry-contrib-runtime-metrics:tasks\n+opentelemetry-contrib-trace-propagators:tasks\n+opentelemetry-contrib-trace-utils:tasks\n+opentelemetry-exporters-inmemory:tasks\n+opentelemetry-exporters-jaeger:tasks\n+opentelemetry-exporters-logging:tasks\n+opentelemetry-exporters-otlp:tasks\n+opentelemetry-exporters-prometheus:tasks\n+opentelemetry-opentracing-shim:tasks\n+opentelemetry-proto:tasks\n+opentelemetry-sdk:tasks\n+opentelemetry-sdk-contrib-async-processor:tasks\n+opentelemetry-sdk-contrib-auto-config:tasks\n+opentelemetry-sdk-contrib-aws-v1-support:tasks\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:tasks\n+opentelemetry-sdk-contrib-otproto:tasks\n+opentelemetry-sdk-contrib-testbed:tasks\n+opentelemetry-all:cleanEclipse\n+opentelemetry-api:cleanEclipse\n+opentelemetry-context-prop:cleanEclipse\n+opentelemetry-contrib-auto-annotations:cleanEclipse\n+opentelemetry-contrib-runtime-metrics:cleanEclipse\n+opentelemetry-contrib-trace-propagators:cleanEclipse\n+opentelemetry-contrib-trace-utils:cleanEclipse\n+opentelemetry-exporters-inmemory:cleanEclipse\n+opentelemetry-exporters-jaeger:cleanEclipse\n+opentelemetry-exporters-logging:cleanEclipse\n+opentelemetry-exporters-otlp:cleanEclipse\n+opentelemetry-exporters-prometheus:cleanEclipse\n+opentelemetry-opentracing-shim:cleanEclipse\n+opentelemetry-proto:cleanEclipse\n+opentelemetry-sdk:cleanEclipse\n+opentelemetry-sdk-contrib-async-processor:cleanEclipse\n+opentelemetry-sdk-contrib-auto-config:cleanEclipse\n+opentelemetry-sdk-contrib-aws-v1-support:cleanEclipse\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanEclipse\n+opentelemetry-sdk-contrib-otproto:cleanEclipse\n+opentelemetry-sdk-contrib-testbed:cleanEclipse\n+opentelemetry-all:cleanIdea\n+opentelemetry-api:cleanIdea\n+opentelemetry-context-prop:cleanIdea\n+opentelemetry-contrib-auto-annotations:cleanIdea\n+opentelemetry-contrib-runtime-metrics:cleanIdea\n+opentelemetry-contrib-trace-propagators:cleanIdea\n+opentelemetry-contrib-trace-utils:cleanIdea\n+opentelemetry-exporters-inmemory:cleanIdea\n+opentelemetry-exporters-jaeger:cleanIdea\n+opentelemetry-exporters-logging:cleanIdea\n+opentelemetry-exporters-otlp:cleanIdea\n+opentelemetry-exporters-prometheus:cleanIdea\n+opentelemetry-opentracing-shim:cleanIdea\n+opentelemetry-proto:cleanIdea\n+opentelemetry-sdk:cleanIdea\n+opentelemetry-sdk-contrib-async-processor:cleanIdea\n+opentelemetry-sdk-contrib-auto-config:cleanIdea\n+opentelemetry-sdk-contrib-aws-v1-support:cleanIdea\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanIdea\n+opentelemetry-sdk-contrib-otproto:cleanIdea\n+opentelemetry-sdk-contrib-testbed:cleanIdea\n+opentelemetry-all:eclipse\n+opentelemetry-api:eclipse\n+opentelemetry-context-prop:eclipse\n+opentelemetry-contrib-auto-annotations:eclipse\n+opentelemetry-contrib-runtime-metrics:eclipse\n+opentelemetry-contrib-trace-propagators:eclipse\n+opentelemetry-contrib-trace-utils:eclipse\n+opentelemetry-exporters-inmemory:eclipse\n+opentelemetry-exporters-jaeger:eclipse\n+opentelemetry-exporters-logging:eclipse\n+opentelemetry-exporters-otlp:eclipse\n+opentelemetry-exporters-prometheus:eclipse\n+opentelemetry-opentracing-shim:eclipse\n+opentelemetry-proto:eclipse\n+opentelemetry-sdk:eclipse\n+opentelemetry-sdk-contrib-async-processor:eclipse\n+opentelemetry-sdk-contrib-auto-config:eclipse\n+opentelemetry-sdk-contrib-aws-v1-support:eclipse\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:eclipse\n+opentelemetry-sdk-contrib-otproto:eclipse\n+opentelemetry-sdk-contrib-testbed:eclipse\n+opentelemetry-all:idea\n+opentelemetry-api:idea\n+opentelemetry-context-prop:idea\n+opentelemetry-contrib-auto-annotations:idea\n+opentelemetry-contrib-runtime-metrics:idea\n+opentelemetry-contrib-trace-propagators:idea\n+opentelemetry-contrib-trace-utils:idea\n+opentelemetry-exporters-inmemory:idea\n+opentelemetry-exporters-jaeger:idea\n+opentelemetry-exporters-logging:idea\n+opentelemetry-exporters-otlp:idea\n+opentelemetry-exporters-prometheus:idea\n+opentelemetry-opentracing-shim:idea\n+opentelemetry-proto:idea\n+opentelemetry-sdk:idea\n+opentelemetry-sdk-contrib-async-processor:idea\n+opentelemetry-sdk-contrib-auto-config:idea\n+opentelemetry-sdk-contrib-aws-v1-support:idea\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:idea\n+opentelemetry-sdk-contrib-otproto:idea\n+opentelemetry-sdk-contrib-testbed:idea\n+opentelemetry-api:jmh\n+opentelemetry-contrib-trace-propagators:jmh\n+opentelemetry-sdk:jmh\n+opentelemetry-api:jmhCompileGeneratedClasses\n+opentelemetry-contrib-trace-propagators:jmhCompileGeneratedClasses\n+opentelemetry-sdk:jmhCompileGeneratedClasses\n+opentelemetry-api:jmhJar\n+opentelemetry-contrib-trace-propagators:jmhJar\n+opentelemetry-sdk:jmhJar\n+opentelemetry-api:jmhRunBytecodeGenerator\n+opentelemetry-contrib-trace-propagators:jmhRunBytecodeGenerator\n+opentelemetry-sdk:jmhRunBytecodeGenerator\n+artifactoryDeploy\n+artifactoryPublish\n+opentelemetry-api:artifactoryPublish\n+opentelemetry-context-prop:artifactoryPublish\n+opentelemetry-contrib-auto-annotations:artifactoryPublish\n+opentelemetry-contrib-runtime-metrics:artifactoryPublish\n+opentelemetry-contrib-trace-propagators:artifactoryPublish\n+opentelemetry-contrib-trace-utils:artifactoryPublish\n+opentelemetry-exporters-inmemory:artifactoryPublish\n+opentelemetry-exporters-jaeger:artifactoryPublish\n+opentelemetry-exporters-logging:artifactoryPublish\n+opentelemetry-exporters-otlp:artifactoryPublish\n+opentelemetry-exporters-prometheus:artifactoryPublish\n+opentelemetry-opentracing-shim:artifactoryPublish\n+opentelemetry-proto:artifactoryPublish\n+opentelemetry-sdk:artifactoryPublish\n+opentelemetry-sdk-contrib-async-processor:artifactoryPublish\n+opentelemetry-sdk-contrib-auto-config:artifactoryPublish\n+opentelemetry-sdk-contrib-aws-v1-support:artifactoryPublish\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:artifactoryPublish\n+opentelemetry-sdk-contrib-otproto:artifactoryPublish\n+bintrayPublish\n+bintrayUpload\n+opentelemetry-api:bintrayUpload\n+opentelemetry-context-prop:bintrayUpload\n+opentelemetry-contrib-auto-annotations:bintrayUpload\n+opentelemetry-contrib-runtime-metrics:bintrayUpload\n+opentelemetry-contrib-trace-propagators:bintrayUpload\n+opentelemetry-contrib-trace-utils:bintrayUpload\n+opentelemetry-exporters-inmemory:bintrayUpload\n+opentelemetry-exporters-jaeger:bintrayUpload\n+opentelemetry-exporters-logging:bintrayUpload\n+opentelemetry-exporters-otlp:bintrayUpload\n+opentelemetry-exporters-prometheus:bintrayUpload\n+opentelemetry-opentracing-shim:bintrayUpload\n+opentelemetry-proto:bintrayUpload\n+opentelemetry-sdk:bintrayUpload\n+opentelemetry-sdk-contrib-async-processor:bintrayUpload\n+opentelemetry-sdk-contrib-auto-config:bintrayUpload\n+opentelemetry-sdk-contrib-aws-v1-support:bintrayUpload\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:bintrayUpload\n+opentelemetry-sdk-contrib-otproto:bintrayUpload\n+opentelemetry-api:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-context-prop:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-contrib-auto-annotations:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-contrib-runtime-metrics:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-contrib-trace-propagators:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-contrib-trace-utils:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-exporters-inmemory:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-exporters-jaeger:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-exporters-logging:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-exporters-otlp:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-exporters-prometheus:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-opentracing-shim:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-proto:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-async-processor:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-auto-config:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-aws-v1-support:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-otproto:generateMetadataFileForMavenPublicationPublication\n+opentelemetry-api:generatePomFileForMavenPublicationPublication\n+opentelemetry-context-prop:generatePomFileForMavenPublicationPublication\n+opentelemetry-contrib-auto-annotations:generatePomFileForMavenPublicationPublication\n+opentelemetry-contrib-runtime-metrics:generatePomFileForMavenPublicationPublication\n+opentelemetry-contrib-trace-propagators:generatePomFileForMavenPublicationPublication\n+opentelemetry-contrib-trace-utils:generatePomFileForMavenPublicationPublication\n+opentelemetry-exporters-inmemory:generatePomFileForMavenPublicationPublication\n+opentelemetry-exporters-jaeger:generatePomFileForMavenPublicationPublication\n+opentelemetry-exporters-logging:generatePomFileForMavenPublicationPublication\n+opentelemetry-exporters-otlp:generatePomFileForMavenPublicationPublication\n+opentelemetry-exporters-prometheus:generatePomFileForMavenPublicationPublication\n+opentelemetry-opentracing-shim:generatePomFileForMavenPublicationPublication\n+opentelemetry-proto:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-async-processor:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-auto-config:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-aws-v1-support:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:generatePomFileForMavenPublicationPublication\n+opentelemetry-sdk-contrib-otproto:generatePomFileForMavenPublicationPublication\n+opentelemetry-api:publish\n+opentelemetry-context-prop:publish\n+opentelemetry-contrib-auto-annotations:publish\n+opentelemetry-contrib-runtime-metrics:publish\n+opentelemetry-contrib-trace-propagators:publish\n+opentelemetry-contrib-trace-utils:publish\n+opentelemetry-exporters-inmemory:publish\n+opentelemetry-exporters-jaeger:publish\n+opentelemetry-exporters-logging:publish\n+opentelemetry-exporters-otlp:publish\n+opentelemetry-exporters-prometheus:publish\n+opentelemetry-opentracing-shim:publish\n+opentelemetry-proto:publish\n+opentelemetry-sdk:publish\n+opentelemetry-sdk-contrib-async-processor:publish\n+opentelemetry-sdk-contrib-auto-config:publish\n+opentelemetry-sdk-contrib-aws-v1-support:publish\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:publish\n+opentelemetry-sdk-contrib-otproto:publish\n+opentelemetry-api:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-context-prop:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-contrib-auto-annotations:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-contrib-runtime-metrics:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-contrib-trace-propagators:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-contrib-trace-utils:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-exporters-inmemory:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-exporters-jaeger:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-exporters-logging:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-exporters-otlp:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-exporters-prometheus:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-opentracing-shim:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-proto:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk-contrib-async-processor:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk-contrib-auto-config:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk-contrib-aws-v1-support:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-sdk-contrib-otproto:publishMavenPublicationPublicationToMavenLocal\n+opentelemetry-api:publishToMavenLocal\n+opentelemetry-context-prop:publishToMavenLocal\n+opentelemetry-contrib-auto-annotations:publishToMavenLocal\n+opentelemetry-contrib-runtime-metrics:publishToMavenLocal\n+opentelemetry-contrib-trace-propagators:publishToMavenLocal\n+opentelemetry-contrib-trace-utils:publishToMavenLocal\n+opentelemetry-exporters-inmemory:publishToMavenLocal\n+opentelemetry-exporters-jaeger:publishToMavenLocal\n+opentelemetry-exporters-logging:publishToMavenLocal\n+opentelemetry-exporters-otlp:publishToMavenLocal\n+opentelemetry-exporters-prometheus:publishToMavenLocal\n+opentelemetry-opentracing-shim:publishToMavenLocal\n+opentelemetry-proto:publishToMavenLocal\n+opentelemetry-sdk:publishToMavenLocal\n+opentelemetry-sdk-contrib-async-processor:publishToMavenLocal\n+opentelemetry-sdk-contrib-auto-config:publishToMavenLocal\n+opentelemetry-sdk-contrib-aws-v1-support:publishToMavenLocal\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:publishToMavenLocal\n+opentelemetry-sdk-contrib-otproto:publishToMavenLocal\n+opentelemetry-all:check\n+opentelemetry-api:check\n+opentelemetry-context-prop:check\n+opentelemetry-contrib-auto-annotations:check\n+opentelemetry-contrib-runtime-metrics:check\n+opentelemetry-contrib-trace-propagators:check\n+opentelemetry-contrib-trace-utils:check\n+opentelemetry-exporters-inmemory:check\n+opentelemetry-exporters-jaeger:check\n+opentelemetry-exporters-logging:check\n+opentelemetry-exporters-otlp:check\n+opentelemetry-exporters-prometheus:check\n+opentelemetry-opentracing-shim:check\n+opentelemetry-proto:check\n+opentelemetry-sdk:check\n+opentelemetry-sdk-contrib-async-processor:check\n+opentelemetry-sdk-contrib-auto-config:check\n+opentelemetry-sdk-contrib-aws-v1-support:check\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:check\n+opentelemetry-sdk-contrib-otproto:check\n+opentelemetry-sdk-contrib-testbed:check\n+opentelemetry-all:jacocoTestCoverageVerification\n+opentelemetry-api:jacocoTestCoverageVerification\n+opentelemetry-context-prop:jacocoTestCoverageVerification\n+opentelemetry-contrib-auto-annotations:jacocoTestCoverageVerification\n+opentelemetry-contrib-runtime-metrics:jacocoTestCoverageVerification\n+opentelemetry-contrib-trace-propagators:jacocoTestCoverageVerification\n+opentelemetry-contrib-trace-utils:jacocoTestCoverageVerification\n+opentelemetry-exporters-inmemory:jacocoTestCoverageVerification\n+opentelemetry-exporters-jaeger:jacocoTestCoverageVerification\n+opentelemetry-exporters-logging:jacocoTestCoverageVerification\n+opentelemetry-exporters-otlp:jacocoTestCoverageVerification\n+opentelemetry-exporters-prometheus:jacocoTestCoverageVerification\n+opentelemetry-opentracing-shim:jacocoTestCoverageVerification\n+opentelemetry-proto:jacocoTestCoverageVerification\n+opentelemetry-sdk:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-async-processor:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-auto-config:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-aws-v1-support:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-otproto:jacocoTestCoverageVerification\n+opentelemetry-sdk-contrib-testbed:jacocoTestCoverageVerification\n+opentelemetry-all:jacocoTestReport\n+opentelemetry-api:jacocoTestReport\n+opentelemetry-context-prop:jacocoTestReport\n+opentelemetry-contrib-auto-annotations:jacocoTestReport\n+opentelemetry-contrib-runtime-metrics:jacocoTestReport\n+opentelemetry-contrib-trace-propagators:jacocoTestReport\n+opentelemetry-contrib-trace-utils:jacocoTestReport\n+opentelemetry-exporters-inmemory:jacocoTestReport\n+opentelemetry-exporters-jaeger:jacocoTestReport\n+opentelemetry-exporters-logging:jacocoTestReport\n+opentelemetry-exporters-otlp:jacocoTestReport\n+opentelemetry-exporters-prometheus:jacocoTestReport\n+opentelemetry-opentracing-shim:jacocoTestReport\n+opentelemetry-proto:jacocoTestReport\n+opentelemetry-sdk:jacocoTestReport\n+opentelemetry-sdk-contrib-async-processor:jacocoTestReport\n+opentelemetry-sdk-contrib-auto-config:jacocoTestReport\n+opentelemetry-sdk-contrib-aws-v1-support:jacocoTestReport\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:jacocoTestReport\n+opentelemetry-sdk-contrib-otproto:jacocoTestReport\n+opentelemetry-sdk-contrib-testbed:jacocoTestReport\n+opentelemetry-all:test\n+opentelemetry-api:test\n+opentelemetry-context-prop:test\n+opentelemetry-contrib-auto-annotations:test\n+opentelemetry-contrib-runtime-metrics:test\n+opentelemetry-contrib-trace-propagators:test\n+opentelemetry-contrib-trace-utils:test\n+opentelemetry-exporters-inmemory:test\n+opentelemetry-exporters-jaeger:test\n+opentelemetry-exporters-logging:test\n+opentelemetry-exporters-otlp:test\n+opentelemetry-exporters-prometheus:test\n+opentelemetry-opentracing-shim:test\n+opentelemetry-proto:test\n+opentelemetry-sdk:test\n+opentelemetry-sdk-contrib-async-processor:test\n+opentelemetry-sdk-contrib-auto-config:test\n+opentelemetry-sdk-contrib-aws-v1-support:test\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:test\n+opentelemetry-sdk-contrib-otproto:test\n+opentelemetry-sdk-contrib-testbed:test\n+opentelemetry-api:animalsnifferCacheJmh\n+opentelemetry-contrib-trace-propagators:animalsnifferCacheJmh\n+opentelemetry-sdk:animalsnifferCacheJmh\n+opentelemetry-api:animalsnifferCacheMain\n+opentelemetry-context-prop:animalsnifferCacheMain\n+opentelemetry-contrib-auto-annotations:animalsnifferCacheMain\n+opentelemetry-contrib-runtime-metrics:animalsnifferCacheMain\n+opentelemetry-contrib-trace-propagators:animalsnifferCacheMain\n+opentelemetry-contrib-trace-utils:animalsnifferCacheMain\n+opentelemetry-exporters-inmemory:animalsnifferCacheMain\n+opentelemetry-exporters-jaeger:animalsnifferCacheMain\n+opentelemetry-exporters-logging:animalsnifferCacheMain\n+opentelemetry-exporters-otlp:animalsnifferCacheMain\n+opentelemetry-exporters-prometheus:animalsnifferCacheMain\n+opentelemetry-proto:animalsnifferCacheMain\n+opentelemetry-sdk:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-async-processor:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-auto-config:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-aws-v1-support:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-otproto:animalsnifferCacheMain\n+opentelemetry-sdk-contrib-testbed:animalsnifferCacheMain\n+opentelemetry-api:animalsnifferCacheTest\n+opentelemetry-context-prop:animalsnifferCacheTest\n+opentelemetry-contrib-auto-annotations:animalsnifferCacheTest\n+opentelemetry-contrib-runtime-metrics:animalsnifferCacheTest\n+opentelemetry-contrib-trace-propagators:animalsnifferCacheTest\n+opentelemetry-contrib-trace-utils:animalsnifferCacheTest\n+opentelemetry-exporters-inmemory:animalsnifferCacheTest\n+opentelemetry-exporters-jaeger:animalsnifferCacheTest\n+opentelemetry-exporters-logging:animalsnifferCacheTest\n+opentelemetry-exporters-otlp:animalsnifferCacheTest\n+opentelemetry-exporters-prometheus:animalsnifferCacheTest\n+opentelemetry-proto:animalsnifferCacheTest\n+opentelemetry-sdk:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-async-processor:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-auto-config:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-aws-v1-support:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-otproto:animalsnifferCacheTest\n+opentelemetry-sdk-contrib-testbed:animalsnifferCacheTest\n+opentelemetry-api:animalsnifferJmh\n+opentelemetry-contrib-trace-propagators:animalsnifferJmh\n+opentelemetry-sdk:animalsnifferJmh\n+opentelemetry-api:animalsnifferMain\n+opentelemetry-context-prop:animalsnifferMain\n+opentelemetry-contrib-auto-annotations:animalsnifferMain\n+opentelemetry-contrib-runtime-metrics:animalsnifferMain\n+opentelemetry-contrib-trace-propagators:animalsnifferMain\n+opentelemetry-contrib-trace-utils:animalsnifferMain\n+opentelemetry-exporters-inmemory:animalsnifferMain\n+opentelemetry-exporters-jaeger:animalsnifferMain\n+opentelemetry-exporters-logging:animalsnifferMain\n+opentelemetry-exporters-otlp:animalsnifferMain\n+opentelemetry-exporters-prometheus:animalsnifferMain\n+opentelemetry-proto:animalsnifferMain\n+opentelemetry-sdk:animalsnifferMain\n+opentelemetry-sdk-contrib-async-processor:animalsnifferMain\n+opentelemetry-sdk-contrib-auto-config:animalsnifferMain\n+opentelemetry-sdk-contrib-aws-v1-support:animalsnifferMain\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:animalsnifferMain\n+opentelemetry-sdk-contrib-otproto:animalsnifferMain\n+opentelemetry-sdk-contrib-testbed:animalsnifferMain\n+opentelemetry-api:animalsnifferTest\n+opentelemetry-context-prop:animalsnifferTest\n+opentelemetry-contrib-auto-annotations:animalsnifferTest\n+opentelemetry-contrib-runtime-metrics:animalsnifferTest\n+opentelemetry-contrib-trace-propagators:animalsnifferTest\n+opentelemetry-contrib-trace-utils:animalsnifferTest\n+opentelemetry-exporters-inmemory:animalsnifferTest\n+opentelemetry-exporters-jaeger:animalsnifferTest\n+opentelemetry-exporters-logging:animalsnifferTest\n+opentelemetry-exporters-otlp:animalsnifferTest\n+opentelemetry-exporters-prometheus:animalsnifferTest\n+opentelemetry-proto:animalsnifferTest\n+opentelemetry-sdk:animalsnifferTest\n+opentelemetry-sdk-contrib-async-processor:animalsnifferTest\n+opentelemetry-sdk-contrib-auto-config:animalsnifferTest\n+opentelemetry-sdk-contrib-aws-v1-support:animalsnifferTest\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:animalsnifferTest\n+opentelemetry-sdk-contrib-otproto:animalsnifferTest\n+opentelemetry-sdk-contrib-testbed:animalsnifferTest\n+opentelemetry-api:checkstyleJmh\n+opentelemetry-contrib-trace-propagators:checkstyleJmh\n+opentelemetry-sdk:checkstyleJmh\n+opentelemetry-all:checkstyleMain\n+opentelemetry-api:checkstyleMain\n+opentelemetry-context-prop:checkstyleMain\n+opentelemetry-contrib-auto-annotations:checkstyleMain\n+opentelemetry-contrib-runtime-metrics:checkstyleMain\n+opentelemetry-contrib-trace-propagators:checkstyleMain\n+opentelemetry-contrib-trace-utils:checkstyleMain\n+opentelemetry-exporters-inmemory:checkstyleMain\n+opentelemetry-exporters-jaeger:checkstyleMain\n+opentelemetry-exporters-logging:checkstyleMain\n+opentelemetry-exporters-otlp:checkstyleMain\n+opentelemetry-exporters-prometheus:checkstyleMain\n+opentelemetry-opentracing-shim:checkstyleMain\n+opentelemetry-proto:checkstyleMain\n+opentelemetry-sdk:checkstyleMain\n+opentelemetry-sdk-contrib-async-processor:checkstyleMain\n+opentelemetry-sdk-contrib-auto-config:checkstyleMain\n+opentelemetry-sdk-contrib-aws-v1-support:checkstyleMain\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:checkstyleMain\n+opentelemetry-sdk-contrib-otproto:checkstyleMain\n+opentelemetry-sdk-contrib-testbed:checkstyleMain\n+opentelemetry-all:checkstyleTest\n+opentelemetry-api:checkstyleTest\n+opentelemetry-context-prop:checkstyleTest\n+opentelemetry-contrib-auto-annotations:checkstyleTest\n+opentelemetry-contrib-runtime-metrics:checkstyleTest\n+opentelemetry-contrib-trace-propagators:checkstyleTest\n+opentelemetry-contrib-trace-utils:checkstyleTest\n+opentelemetry-exporters-inmemory:checkstyleTest\n+opentelemetry-exporters-jaeger:checkstyleTest\n+opentelemetry-exporters-logging:checkstyleTest\n+opentelemetry-exporters-otlp:checkstyleTest\n+opentelemetry-exporters-prometheus:checkstyleTest\n+opentelemetry-opentracing-shim:checkstyleTest\n+opentelemetry-proto:checkstyleTest\n+opentelemetry-sdk:checkstyleTest\n+opentelemetry-sdk-contrib-async-processor:checkstyleTest\n+opentelemetry-sdk-contrib-auto-config:checkstyleTest\n+opentelemetry-sdk-contrib-aws-v1-support:checkstyleTest\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:checkstyleTest\n+opentelemetry-sdk-contrib-otproto:checkstyleTest\n+opentelemetry-sdk-contrib-testbed:checkstyleTest\n+opentelemetry-all:cleanEclipseClasspath\n+opentelemetry-api:cleanEclipseClasspath\n+opentelemetry-context-prop:cleanEclipseClasspath\n+opentelemetry-contrib-auto-annotations:cleanEclipseClasspath\n+opentelemetry-contrib-runtime-metrics:cleanEclipseClasspath\n+opentelemetry-contrib-trace-propagators:cleanEclipseClasspath\n+opentelemetry-contrib-trace-utils:cleanEclipseClasspath\n+opentelemetry-exporters-inmemory:cleanEclipseClasspath\n+opentelemetry-exporters-jaeger:cleanEclipseClasspath\n+opentelemetry-exporters-logging:cleanEclipseClasspath\n+opentelemetry-exporters-otlp:cleanEclipseClasspath\n+opentelemetry-exporters-prometheus:cleanEclipseClasspath\n+opentelemetry-opentracing-shim:cleanEclipseClasspath\n+opentelemetry-proto:cleanEclipseClasspath\n+opentelemetry-sdk:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-async-processor:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-auto-config:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-aws-v1-support:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-otproto:cleanEclipseClasspath\n+opentelemetry-sdk-contrib-testbed:cleanEclipseClasspath\n+opentelemetry-all:cleanEclipseJdt\n+opentelemetry-api:cleanEclipseJdt\n+opentelemetry-context-prop:cleanEclipseJdt\n+opentelemetry-contrib-auto-annotations:cleanEclipseJdt\n+opentelemetry-contrib-runtime-metrics:cleanEclipseJdt\n+opentelemetry-contrib-trace-propagators:cleanEclipseJdt\n+opentelemetry-contrib-trace-utils:cleanEclipseJdt\n+opentelemetry-exporters-inmemory:cleanEclipseJdt\n+opentelemetry-exporters-jaeger:cleanEclipseJdt\n+opentelemetry-exporters-logging:cleanEclipseJdt\n+opentelemetry-exporters-otlp:cleanEclipseJdt\n+opentelemetry-exporters-prometheus:cleanEclipseJdt\n+opentelemetry-opentracing-shim:cleanEclipseJdt\n+opentelemetry-proto:cleanEclipseJdt\n+opentelemetry-sdk:cleanEclipseJdt\n+opentelemetry-sdk-contrib-async-processor:cleanEclipseJdt\n+opentelemetry-sdk-contrib-auto-config:cleanEclipseJdt\n+opentelemetry-sdk-contrib-aws-v1-support:cleanEclipseJdt\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanEclipseJdt\n+opentelemetry-sdk-contrib-otproto:cleanEclipseJdt\n+opentelemetry-sdk-contrib-testbed:cleanEclipseJdt\n+opentelemetry-all:cleanEclipseProject\n+opentelemetry-api:cleanEclipseProject\n+opentelemetry-context-prop:cleanEclipseProject\n+opentelemetry-contrib-auto-annotations:cleanEclipseProject\n+opentelemetry-contrib-runtime-metrics:cleanEclipseProject\n+opentelemetry-contrib-trace-propagators:cleanEclipseProject\n+opentelemetry-contrib-trace-utils:cleanEclipseProject\n+opentelemetry-exporters-inmemory:cleanEclipseProject\n+opentelemetry-exporters-jaeger:cleanEclipseProject\n+opentelemetry-exporters-logging:cleanEclipseProject\n+opentelemetry-exporters-otlp:cleanEclipseProject\n+opentelemetry-exporters-prometheus:cleanEclipseProject\n+opentelemetry-opentracing-shim:cleanEclipseProject\n+opentelemetry-proto:cleanEclipseProject\n+opentelemetry-sdk:cleanEclipseProject\n+opentelemetry-sdk-contrib-async-processor:cleanEclipseProject\n+opentelemetry-sdk-contrib-auto-config:cleanEclipseProject\n+opentelemetry-sdk-contrib-aws-v1-support:cleanEclipseProject\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanEclipseProject\n+opentelemetry-sdk-contrib-otproto:cleanEclipseProject\n+opentelemetry-sdk-contrib-testbed:cleanEclipseProject\n+opentelemetry-all:cleanIdeaModule\n+opentelemetry-api:cleanIdeaModule\n+opentelemetry-context-prop:cleanIdeaModule\n+opentelemetry-contrib-auto-annotations:cleanIdeaModule\n+opentelemetry-contrib-runtime-metrics:cleanIdeaModule\n+opentelemetry-contrib-trace-propagators:cleanIdeaModule\n+opentelemetry-contrib-trace-utils:cleanIdeaModule\n+opentelemetry-exporters-inmemory:cleanIdeaModule\n+opentelemetry-exporters-jaeger:cleanIdeaModule\n+opentelemetry-exporters-logging:cleanIdeaModule\n+opentelemetry-exporters-otlp:cleanIdeaModule\n+opentelemetry-exporters-prometheus:cleanIdeaModule\n+opentelemetry-opentracing-shim:cleanIdeaModule\n+opentelemetry-proto:cleanIdeaModule\n+opentelemetry-sdk:cleanIdeaModule\n+opentelemetry-sdk-contrib-async-processor:cleanIdeaModule\n+opentelemetry-sdk-contrib-auto-config:cleanIdeaModule\n+opentelemetry-sdk-contrib-aws-v1-support:cleanIdeaModule\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:cleanIdeaModule\n+opentelemetry-sdk-contrib-otproto:cleanIdeaModule\n+opentelemetry-sdk-contrib-testbed:cleanIdeaModule\n+opentelemetry-all:compileJava\n+opentelemetry-api:compileJava\n+opentelemetry-context-prop:compileJava\n+opentelemetry-contrib-auto-annotations:compileJava\n+opentelemetry-contrib-runtime-metrics:compileJava\n+opentelemetry-contrib-trace-propagators:compileJava\n+opentelemetry-contrib-trace-utils:compileJava\n+opentelemetry-exporters-inmemory:compileJava\n+opentelemetry-exporters-jaeger:compileJava\n+opentelemetry-exporters-logging:compileJava\n+opentelemetry-exporters-otlp:compileJava\n+opentelemetry-exporters-prometheus:compileJava\n+opentelemetry-opentracing-shim:compileJava\n+opentelemetry-proto:compileJava\n+opentelemetry-sdk:compileJava\n+opentelemetry-sdk-contrib-async-processor:compileJava\n+opentelemetry-sdk-contrib-auto-config:compileJava\n+opentelemetry-sdk-contrib-aws-v1-support:compileJava\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:compileJava\n+opentelemetry-sdk-contrib-otproto:compileJava\n+opentelemetry-sdk-contrib-testbed:compileJava\n+opentelemetry-api:compileJmhJava\n+opentelemetry-contrib-trace-propagators:compileJmhJava\n+opentelemetry-sdk:compileJmhJava\n+opentelemetry-all:compileTestJava\n+opentelemetry-api:compileTestJava\n+opentelemetry-context-prop:compileTestJava\n+opentelemetry-contrib-auto-annotations:compileTestJava\n+opentelemetry-contrib-runtime-metrics:compileTestJava\n+opentelemetry-contrib-trace-propagators:compileTestJava\n+opentelemetry-contrib-trace-utils:compileTestJava\n+opentelemetry-exporters-inmemory:compileTestJava\n+opentelemetry-exporters-jaeger:compileTestJava\n+opentelemetry-exporters-logging:compileTestJava\n+opentelemetry-exporters-otlp:compileTestJava\n+opentelemetry-exporters-prometheus:compileTestJava\n+opentelemetry-opentracing-shim:compileTestJava\n+opentelemetry-proto:compileTestJava\n+opentelemetry-sdk:compileTestJava\n+opentelemetry-sdk-contrib-async-processor:compileTestJava\n+opentelemetry-sdk-contrib-auto-config:compileTestJava\n+opentelemetry-sdk-contrib-aws-v1-support:compileTestJava\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:compileTestJava\n+opentelemetry-sdk-contrib-otproto:compileTestJava\n+opentelemetry-sdk-contrib-testbed:compileTestJava\n+opentelemetry-all:eclipseClasspath\n+opentelemetry-api:eclipseClasspath\n+opentelemetry-context-prop:eclipseClasspath\n+opentelemetry-contrib-auto-annotations:eclipseClasspath\n+opentelemetry-contrib-runtime-metrics:eclipseClasspath\n+opentelemetry-contrib-trace-propagators:eclipseClasspath\n+opentelemetry-contrib-trace-utils:eclipseClasspath\n+opentelemetry-exporters-inmemory:eclipseClasspath\n+opentelemetry-exporters-jaeger:eclipseClasspath\n+opentelemetry-exporters-logging:eclipseClasspath\n+opentelemetry-exporters-otlp:eclipseClasspath\n+opentelemetry-exporters-prometheus:eclipseClasspath\n+opentelemetry-opentracing-shim:eclipseClasspath\n+opentelemetry-proto:eclipseClasspath\n+opentelemetry-sdk:eclipseClasspath\n+opentelemetry-sdk-contrib-async-processor:eclipseClasspath\n+opentelemetry-sdk-contrib-auto-config:eclipseClasspath\n+opentelemetry-sdk-contrib-aws-v1-support:eclipseClasspath\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:eclipseClasspath\n+opentelemetry-sdk-contrib-otproto:eclipseClasspath\n+opentelemetry-sdk-contrib-testbed:eclipseClasspath\n+opentelemetry-all:eclipseJdt\n+opentelemetry-api:eclipseJdt\n+opentelemetry-context-prop:eclipseJdt\n+opentelemetry-contrib-auto-annotations:eclipseJdt\n+opentelemetry-contrib-runtime-metrics:eclipseJdt\n+opentelemetry-contrib-trace-propagators:eclipseJdt\n+opentelemetry-contrib-trace-utils:eclipseJdt\n+opentelemetry-exporters-inmemory:eclipseJdt\n+opentelemetry-exporters-jaeger:eclipseJdt\n+opentelemetry-exporters-logging:eclipseJdt\n+opentelemetry-exporters-otlp:eclipseJdt\n+opentelemetry-exporters-prometheus:eclipseJdt\n+opentelemetry-opentracing-shim:eclipseJdt\n+opentelemetry-proto:eclipseJdt\n+opentelemetry-sdk:eclipseJdt\n+opentelemetry-sdk-contrib-async-processor:eclipseJdt\n+opentelemetry-sdk-contrib-auto-config:eclipseJdt\n+opentelemetry-sdk-contrib-aws-v1-support:eclipseJdt\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:eclipseJdt\n+opentelemetry-sdk-contrib-otproto:eclipseJdt\n+opentelemetry-sdk-contrib-testbed:eclipseJdt\n+opentelemetry-all:eclipseProject\n+opentelemetry-api:eclipseProject\n+opentelemetry-context-prop:eclipseProject\n+opentelemetry-contrib-auto-annotations:eclipseProject\n+opentelemetry-contrib-runtime-metrics:eclipseProject\n+opentelemetry-contrib-trace-propagators:eclipseProject\n+opentelemetry-contrib-trace-utils:eclipseProject\n+opentelemetry-exporters-inmemory:eclipseProject\n+opentelemetry-exporters-jaeger:eclipseProject\n+opentelemetry-exporters-logging:eclipseProject\n+opentelemetry-exporters-otlp:eclipseProject\n+opentelemetry-exporters-prometheus:eclipseProject\n+opentelemetry-opentracing-shim:eclipseProject\n+opentelemetry-proto:eclipseProject\n+opentelemetry-sdk:eclipseProject\n+opentelemetry-sdk-contrib-async-processor:eclipseProject\n+opentelemetry-sdk-contrib-auto-config:eclipseProject\n+opentelemetry-sdk-contrib-aws-v1-support:eclipseProject\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:eclipseProject\n+opentelemetry-sdk-contrib-otproto:eclipseProject\n+opentelemetry-sdk-contrib-testbed:eclipseProject\n+opentelemetry-exporters-jaeger:extractIncludeProto\n+opentelemetry-proto:extractIncludeProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:extractIncludeProto\n+opentelemetry-exporters-jaeger:extractIncludeTestProto\n+opentelemetry-proto:extractIncludeTestProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:extractIncludeTestProto\n+opentelemetry-exporters-jaeger:extractProto\n+opentelemetry-proto:extractProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:extractProto\n+opentelemetry-exporters-jaeger:extractTestProto\n+opentelemetry-proto:extractTestProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:extractTestProto\n+opentelemetry-exporters-jaeger:generateProto\n+opentelemetry-proto:generateProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:generateProto\n+opentelemetry-exporters-jaeger:generateTestProto\n+opentelemetry-proto:generateTestProto\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:generateTestProto\n+opentelemetry-all:googleJavaFormat\n+opentelemetry-api:googleJavaFormat\n+opentelemetry-context-prop:googleJavaFormat\n+opentelemetry-contrib-auto-annotations:googleJavaFormat\n+opentelemetry-contrib-runtime-metrics:googleJavaFormat\n+opentelemetry-contrib-trace-propagators:googleJavaFormat\n+opentelemetry-contrib-trace-utils:googleJavaFormat\n+opentelemetry-exporters-inmemory:googleJavaFormat\n+opentelemetry-exporters-jaeger:googleJavaFormat\n+opentelemetry-exporters-logging:googleJavaFormat\n+opentelemetry-exporters-otlp:googleJavaFormat\n+opentelemetry-exporters-prometheus:googleJavaFormat\n+opentelemetry-opentracing-shim:googleJavaFormat\n+opentelemetry-proto:googleJavaFormat\n+opentelemetry-sdk:googleJavaFormat\n+opentelemetry-sdk-contrib-async-processor:googleJavaFormat\n+opentelemetry-sdk-contrib-auto-config:googleJavaFormat\n+opentelemetry-sdk-contrib-aws-v1-support:googleJavaFormat\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:googleJavaFormat\n+opentelemetry-sdk-contrib-otproto:googleJavaFormat\n+opentelemetry-sdk-contrib-testbed:googleJavaFormat\n+opentelemetry-all:ideaModule\n+opentelemetry-api:ideaModule\n+opentelemetry-context-prop:ideaModule\n+opentelemetry-contrib-auto-annotations:ideaModule\n+opentelemetry-contrib-runtime-metrics:ideaModule\n+opentelemetry-contrib-trace-propagators:ideaModule\n+opentelemetry-contrib-trace-utils:ideaModule\n+opentelemetry-exporters-inmemory:ideaModule\n+opentelemetry-exporters-jaeger:ideaModule\n+opentelemetry-exporters-logging:ideaModule\n+opentelemetry-exporters-otlp:ideaModule\n+opentelemetry-exporters-prometheus:ideaModule\n+opentelemetry-opentracing-shim:ideaModule\n+opentelemetry-proto:ideaModule\n+opentelemetry-sdk:ideaModule\n+opentelemetry-sdk-contrib-async-processor:ideaModule\n+opentelemetry-sdk-contrib-auto-config:ideaModule\n+opentelemetry-sdk-contrib-aws-v1-support:ideaModule\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:ideaModule\n+opentelemetry-sdk-contrib-otproto:ideaModule\n+opentelemetry-sdk-contrib-testbed:ideaModule\n+opentelemetry-all:jacocoMerge\n+opentelemetry-all:javadocJar\n+opentelemetry-api:javadocJar\n+opentelemetry-context-prop:javadocJar\n+opentelemetry-contrib-auto-annotations:javadocJar\n+opentelemetry-contrib-runtime-metrics:javadocJar\n+opentelemetry-contrib-trace-propagators:javadocJar\n+opentelemetry-contrib-trace-utils:javadocJar\n+opentelemetry-exporters-inmemory:javadocJar\n+opentelemetry-exporters-jaeger:javadocJar\n+opentelemetry-exporters-logging:javadocJar\n+opentelemetry-exporters-otlp:javadocJar\n+opentelemetry-exporters-prometheus:javadocJar\n+opentelemetry-opentracing-shim:javadocJar\n+opentelemetry-proto:javadocJar\n+opentelemetry-sdk:javadocJar\n+opentelemetry-sdk-contrib-async-processor:javadocJar\n+opentelemetry-sdk-contrib-auto-config:javadocJar\n+opentelemetry-sdk-contrib-aws-v1-support:javadocJar\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:javadocJar\n+opentelemetry-sdk-contrib-otproto:javadocJar\n+opentelemetry-sdk-contrib-testbed:javadocJar\n+opentelemetry-api:jmhReport\n+opentelemetry-contrib-trace-propagators:jmhReport\n+opentelemetry-sdk:jmhReport\n+prepareKotlinBuildScriptModel\n+opentelemetry-all:prepareKotlinBuildScriptModel\n+opentelemetry-api:prepareKotlinBuildScriptModel\n+opentelemetry-context-prop:prepareKotlinBuildScriptModel\n+opentelemetry-contrib-auto-annotations:prepareKotlinBuildScriptModel\n+opentelemetry-contrib-runtime-metrics:prepareKotlinBuildScriptModel\n+opentelemetry-contrib-trace-propagators:prepareKotlinBuildScriptModel\n+opentelemetry-contrib-trace-utils:prepareKotlinBuildScriptModel\n+opentelemetry-exporters-inmemory:prepareKotlinBuildScriptModel\n+opentelemetry-exporters-jaeger:prepareKotlinBuildScriptModel\n+opentelemetry-exporters-logging:prepareKotlinBuildScriptModel\n+opentelemetry-exporters-otlp:prepareKotlinBuildScriptModel\n+opentelemetry-exporters-prometheus:prepareKotlinBuildScriptModel\n+opentelemetry-opentracing-shim:prepareKotlinBuildScriptModel\n+opentelemetry-proto:prepareKotlinBuildScriptModel\n+opentelemetry-sdk:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-async-processor:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-auto-config:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-aws-v1-support:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-otproto:prepareKotlinBuildScriptModel\n+opentelemetry-sdk-contrib-testbed:prepareKotlinBuildScriptModel\n+opentelemetry-api:processJmhResources\n+opentelemetry-contrib-trace-propagators:processJmhResources\n+opentelemetry-sdk:processJmhResources\n+opentelemetry-all:processResources\n+opentelemetry-api:processResources\n+opentelemetry-context-prop:processResources\n+opentelemetry-contrib-auto-annotations:processResources\n+opentelemetry-contrib-runtime-metrics:processResources\n+opentelemetry-contrib-trace-propagators:processResources\n+opentelemetry-contrib-trace-utils:processResources\n+opentelemetry-exporters-inmemory:processResources\n+opentelemetry-exporters-jaeger:processResources\n+opentelemetry-exporters-logging:processResources\n+opentelemetry-exporters-otlp:processResources\n+opentelemetry-exporters-prometheus:processResources\n+opentelemetry-opentracing-shim:processResources\n+opentelemetry-proto:processResources\n+opentelemetry-sdk:processResources\n+opentelemetry-sdk-contrib-async-processor:processResources\n+opentelemetry-sdk-contrib-auto-config:processResources\n+opentelemetry-sdk-contrib-aws-v1-support:processResources\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:processResources\n+opentelemetry-sdk-contrib-otproto:processResources\n+opentelemetry-sdk-contrib-testbed:processResources\n+opentelemetry-all:processTestResources\n+opentelemetry-api:processTestResources\n+opentelemetry-context-prop:processTestResources\n+opentelemetry-contrib-auto-annotations:processTestResources\n+opentelemetry-contrib-runtime-metrics:processTestResources\n+opentelemetry-contrib-trace-propagators:processTestResources\n+opentelemetry-contrib-trace-utils:processTestResources\n+opentelemetry-exporters-inmemory:processTestResources\n+opentelemetry-exporters-jaeger:processTestResources\n+opentelemetry-exporters-logging:processTestResources\n+opentelemetry-exporters-otlp:processTestResources\n+opentelemetry-exporters-prometheus:processTestResources\n+opentelemetry-opentracing-shim:processTestResources\n+opentelemetry-proto:processTestResources\n+opentelemetry-sdk:processTestResources\n+opentelemetry-sdk-contrib-async-processor:processTestResources\n+opentelemetry-sdk-contrib-auto-config:processTestResources\n+opentelemetry-sdk-contrib-aws-v1-support:processTestResources\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:processTestResources\n+opentelemetry-sdk-contrib-otproto:processTestResources\n+opentelemetry-sdk-contrib-testbed:processTestResources\n+opentelemetry-all:signArchives\n+opentelemetry-api:signArchives\n+opentelemetry-context-prop:signArchives\n+opentelemetry-contrib-auto-annotations:signArchives\n+opentelemetry-contrib-runtime-metrics:signArchives\n+opentelemetry-contrib-trace-propagators:signArchives\n+opentelemetry-contrib-trace-utils:signArchives\n+opentelemetry-exporters-inmemory:signArchives\n+opentelemetry-exporters-jaeger:signArchives\n+opentelemetry-exporters-logging:signArchives\n+opentelemetry-exporters-otlp:signArchives\n+opentelemetry-exporters-prometheus:signArchives\n+opentelemetry-opentracing-shim:signArchives\n+opentelemetry-proto:signArchives\n+opentelemetry-sdk:signArchives\n+opentelemetry-sdk-contrib-async-processor:signArchives\n+opentelemetry-sdk-contrib-auto-config:signArchives\n+opentelemetry-sdk-contrib-aws-v1-support:signArchives\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:signArchives\n+opentelemetry-sdk-contrib-otproto:signArchives\n+opentelemetry-sdk-contrib-testbed:signArchives\n+opentelemetry-all:sourcesJar\n+opentelemetry-api:sourcesJar\n+opentelemetry-context-prop:sourcesJar\n+opentelemetry-contrib-auto-annotations:sourcesJar\n+opentelemetry-contrib-runtime-metrics:sourcesJar\n+opentelemetry-contrib-trace-propagators:sourcesJar\n+opentelemetry-contrib-trace-utils:sourcesJar\n+opentelemetry-exporters-inmemory:sourcesJar\n+opentelemetry-exporters-jaeger:sourcesJar\n+opentelemetry-exporters-logging:sourcesJar\n+opentelemetry-exporters-otlp:sourcesJar\n+opentelemetry-exporters-prometheus:sourcesJar\n+opentelemetry-opentracing-shim:sourcesJar\n+opentelemetry-proto:sourcesJar\n+opentelemetry-sdk:sourcesJar\n+opentelemetry-sdk-contrib-async-processor:sourcesJar\n+opentelemetry-sdk-contrib-auto-config:sourcesJar\n+opentelemetry-sdk-contrib-aws-v1-support:sourcesJar\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:sourcesJar\n+opentelemetry-sdk-contrib-otproto:sourcesJar\n+opentelemetry-sdk-contrib-testbed:sourcesJar\n+opentelemetry-all:verifyGoogleJavaFormat\n+opentelemetry-api:verifyGoogleJavaFormat\n+opentelemetry-context-prop:verifyGoogleJavaFormat\n+opentelemetry-contrib-auto-annotations:verifyGoogleJavaFormat\n+opentelemetry-contrib-runtime-metrics:verifyGoogleJavaFormat\n+opentelemetry-contrib-trace-propagators:verifyGoogleJavaFormat\n+opentelemetry-contrib-trace-utils:verifyGoogleJavaFormat\n+opentelemetry-exporters-inmemory:verifyGoogleJavaFormat\n+opentelemetry-exporters-jaeger:verifyGoogleJavaFormat\n+opentelemetry-exporters-logging:verifyGoogleJavaFormat\n+opentelemetry-exporters-otlp:verifyGoogleJavaFormat\n+opentelemetry-exporters-prometheus:verifyGoogleJavaFormat\n+opentelemetry-opentracing-shim:verifyGoogleJavaFormat\n+opentelemetry-proto:verifyGoogleJavaFormat\n+opentelemetry-sdk:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-async-processor:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-auto-config:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-aws-v1-support:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-jaeger-remote-sampler:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-otproto:verifyGoogleJavaFormat\n+opentelemetry-sdk-contrib-testbed:verifyGoogleJavaFormat\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+assemble\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+build\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildDependents\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+buildNeeded\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+classes\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+clean\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jar\n+jmhClasses\n+jmhClasses\n+jmhClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+testClasses\n+init\n+wrapper\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+javadoc\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+buildEnvironment\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+components\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencies\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependencyInsight\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+dependentComponents\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+help\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+model\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+outgoingVariants\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+projects\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+properties\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+tasks\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanEclipse\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+cleanIdea\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+eclipse\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+idea\n+jmh\n+jmh\n+jmh\n+jmhCompileGeneratedClasses\n+jmhCompileGeneratedClasses\n+jmhCompileGeneratedClasses\n+jmhJar\n+jmhJar\n+jmhJar\n+jmhRunBytecodeGenerator\n+jmhRunBytecodeGenerator\n+jmhRunBytecodeGenerator\n+artifactoryDeploy\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+artifactoryPublish\n+bintrayPublish\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+bintrayUpload\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generateMetadataFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+generatePomFileForMavenPublicationPublication\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publish\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishMavenPublicationPublicationToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+publishToMavenLocal\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+check\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestCoverageVerification\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+jacocoTestReport\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+test\n+animalsnifferCacheJmh\n+animalsnifferCacheJmh\n+animalsnifferCacheJmh\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheMain\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferCacheTest\n+animalsnifferJmh\n+animalsnifferJmh\n+animalsnifferJmh\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferMain\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+animalsnifferTest\n+checkstyleJmh\n+checkstyleJmh\n+checkstyleJmh\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleMain\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+checkstyleTest\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseClasspath\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseJdt\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanEclipseProject\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+cleanIdeaModule\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJava\n+compileJmhJava\n+compileJmhJava\n+compileJmhJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+compileTestJava\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseClasspath\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseJdt\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+eclipseProject\n+extractIncludeProto\n+extractIncludeProto\n+extractIncludeProto\n+extractIncludeTestProto\n+extractIncludeTestProto\n+extractIncludeTestProto\n+extractProto\n+extractProto\n+extractProto\n+extractTestProto\n+extractTestProto\n+extractTestProto\n+generateProto\n+generateProto\n+generateProto\n+generateTestProto\n+generateTestProto\n+generateTestProto\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+googleJavaFormat\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+ideaModule\n+jacocoMerge\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+javadocJar\n+jmhReport\n+jmhReport\n+jmhReport\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+prepareKotlinBuildScriptModel\n+processJmhResources\n+processJmhResources\n+processJmhResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+processTestResources\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+signArchives\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+sourcesJar\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat\n+verifyGoogleJavaFormat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c230bcaf7478a85f3f2ce3145a2686106dc9cdd"}, "originalPosition": 2574}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "committedDate": "2020-05-02T18:40:23Z", "message": "Changed some classes/methods modifiers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "committedDate": "2020-04-29T12:56:37Z", "message": "Using Objects.requireNonNull instead of using Utils"}, "afterCommit": {"oid": "bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "author": {"user": {"login": "davebarda", "name": "David Barda"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "committedDate": "2020-05-02T18:40:23Z", "message": "Changed some classes/methods modifiers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2998, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}