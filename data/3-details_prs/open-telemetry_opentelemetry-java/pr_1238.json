{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MzU3NjU0", "number": 1238, "title": "Update javadoc", "bodyText": "This PR resolves #1181", "createdAt": "2020-05-18T09:00:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238", "merged": true, "mergeCommit": {"oid": "590be577345edbda0642bfe8927c1174e94573d4"}, "closed": true, "closedAt": "2020-05-20T14:14:12Z", "author": {"login": "thisthat"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcigkPLgFqTQxMzYzNzIyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjJvK7AFqTQxNTM4MDQ2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjM3MjI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413637227", "createdAt": "2020-05-18T14:16:03Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNjowM1rOGW5MWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDoxNjowM1rOGW5MWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODkwNQ==", "bodyText": "Options or configuration values perhaps?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426658905", "createdAt": "2020-05-18T14:16:03Z", "author": {"login": "carlosalberto"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Values for {@link OtlpGrpcMetricExporter} can be read from system properties, environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjM4NTg1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413638585", "createdAt": "2020-05-18T14:17:33Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY4MDM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413868039", "createdAt": "2020-05-18T19:11:40Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMTo0MVrOGXELUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMTo0MVrOGXELUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODg2NA==", "bodyText": "s/Values/Configuration options/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426838864", "createdAt": "2020-05-18T19:11:41Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcSpanExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Values for {@link OtlpGrpcSpanExporter} can be read from system properties, environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY5MjEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413869213", "createdAt": "2020-05-18T19:13:14Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMzoxNFrOGXEOnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMzoxNFrOGXEOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzOTcwOA==", "bodyText": "s/Values/Configuration options/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426839708", "createdAt": "2020-05-18T19:13:14Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -36,6 +36,22 @@\n  * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n  * export interval.\n  *\n+ * <p>Values for {@link IntervalMetricReader} can be read from system properties, environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY5NjM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413869639", "createdAt": "2020-05-18T19:13:49Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMzo0OVrOGXEPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMzo0OVrOGXEPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzOTk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link IntervalMetricReader} will look for the following names:\n          \n          \n            \n             * <p>For environment variables, {@link IntervalMetricReader} will look for the following names:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426839994", "createdAt": "2020-05-18T19:13:49Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -36,6 +36,22 @@\n  * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n  * export interval.\n  *\n+ * <p>Values for {@link IntervalMetricReader} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link IntervalMetricReader}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.imr.export.interval}: sets the export interval between pushes to the exporter.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link IntervalMetricReader} will look for the following names:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY5ODIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413869820", "createdAt": "2020-05-18T19:14:04Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDowNFrOGXEQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDowNFrOGXEQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link OtlpGrpcSpanExporter} will look for the following names:\n          \n          \n            \n             * <p>For environment variables, {@link OtlpGrpcSpanExporter} will look for the following names:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840109", "createdAt": "2020-05-18T19:14:04Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcSpanExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Values for {@link OtlpGrpcSpanExporter} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link OtlpGrpcSpanExporter}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.otlp.span.timeout}: to set the max waiting time for the collector to process\n+ *       each span batch.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link OtlpGrpcSpanExporter} will look for the following names:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY5OTcz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413869973", "createdAt": "2020-05-18T19:14:17Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDoxN1rOGXEQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDoxN1rOGXEQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDIwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link OtlpGrpcMetricExporter} will look for the following names:\n          \n          \n            \n             * <p>For environment variables, {@link OtlpGrpcMetricExporter} will look for the following names:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840204", "createdAt": "2020-05-18T19:14:17Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Values for {@link OtlpGrpcMetricExporter} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link OtlpGrpcMetricExporter}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to process\n+ *       each metric batch.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link OtlpGrpcMetricExporter} will look for the following names:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODcwNDY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413870467", "createdAt": "2020-05-18T19:14:59Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDo1OVrOGXER6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNDo1OVrOGXER6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDU1Mg==", "bodyText": "s/Values/Configuration options/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840552", "createdAt": "2020-05-18T19:14:59Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -56,6 +56,30 @@\n  *\n  * <p>This batch {@link SpanProcessor} can cause high contention in a very high traffic service.\n  * TODO: Add a link to the SpanProcessor that uses Disruptor as alternative with low contention.\n+ *\n+ * <p>Values for {@link BatchSpansProcessor} can be read from system properties, environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODcwNjA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413870605", "createdAt": "2020-05-18T19:15:14Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNToxNFrOGXESbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNToxNFrOGXESbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link BatchSpansProcessor} will look for the following names:\n          \n          \n            \n             * <p>For environment variables, {@link BatchSpansProcessor} will look for the following names:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840685", "createdAt": "2020-05-18T19:15:14Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -56,6 +56,30 @@\n  *\n  * <p>This batch {@link SpanProcessor} can cause high contention in a very high traffic service.\n  * TODO: Add a link to the SpanProcessor that uses Disruptor as alternative with low contention.\n+ *\n+ * <p>Values for {@link BatchSpansProcessor} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link BatchSpansProcessor}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.bsp.schedule.delay}: sets the delay interval between two consecutive exports.\n+ *   <li>{@code otel.bsp.max.queue}: sets the maximum queue size.\n+ *   <li>{@code otel.bsp.max.export.batch}: sets the maximum batch size.\n+ *   <li>{@code otel.bsp.export.timeout}: sets the maximum allowed time to export data.\n+ *   <li>{@code otel.bsp.export.sampled}: sets whether only sampled spans should be exported.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link BatchSpansProcessor} will look for the following names:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODcwODU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413870858", "createdAt": "2020-05-18T19:15:37Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNTozN1rOGXETHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNTozN1rOGXETHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDg2MA==", "bodyText": "s/Values/Configuration options/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840860", "createdAt": "2020-05-18T19:15:37Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -32,6 +32,22 @@\n /**\n  * An implementation of the {@link SpanProcessor} that converts the {@link ReadableSpan} to {@link\n  * SpanData} and passes it to the configured exporter.\n+ *\n+ * <p>Values for {@link SimpleSpansProcessor} can be read from system properties, environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODcxMDA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-413871009", "createdAt": "2020-05-18T19:15:49Z", "commit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNTo1MFrOGXETjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNTo1MFrOGXETjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MDk3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link SimpleSpansProcessor} will look for the following names:\n          \n          \n            \n             * <p>For environment variables, {@link SimpleSpansProcessor} will look for the following names:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r426840973", "createdAt": "2020-05-18T19:15:50Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -32,6 +32,22 @@\n /**\n  * An implementation of the {@link SpanProcessor} that converts the {@link ReadableSpan} to {@link\n  * SpanData} and passes it to the configured exporter.\n+ *\n+ * <p>Values for {@link SimpleSpansProcessor} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link SimpleSpansProcessor}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.ssp.export.sampled}: sets whether only sampled spans should be exported.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link SimpleSpansProcessor} will look for the following names:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3137898a3824f004bc7bb3b0fc5fdf1f3a0127bf", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3137898a3824f004bc7bb3b0fc5fdf1f3a0127bf", "committedDate": "2020-05-19T06:27:37Z", "message": "Update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "379d875295e100aaa98a52a8f75fd7443cf33439", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/379d875295e100aaa98a52a8f75fd7443cf33439", "committedDate": "2020-05-19T06:27:37Z", "message": "typos"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5731802ff5e7a20e0db60297d251e051affd298a", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5731802ff5e7a20e0db60297d251e051affd298a", "committedDate": "2020-05-18T08:54:32Z", "message": "Update javadoc"}, "afterCommit": {"oid": "379d875295e100aaa98a52a8f75fd7443cf33439", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/379d875295e100aaa98a52a8f75fd7443cf33439", "committedDate": "2020-05-19T06:27:37Z", "message": "typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b84b3184517941a85c170c03b1c8c463385119b", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b84b3184517941a85c170c03b1c8c463385119b", "committedDate": "2020-05-19T06:40:54Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2738baa19810c8edd9e7a92f2c6eb8ac5c116d42", "committedDate": "2020-05-19T06:53:50Z", "message": "Update links in javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTAyODc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-414502877", "createdAt": "2020-05-19T14:27:20Z", "commit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTI0ODY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-414524866", "createdAt": "2020-05-19T14:48:00Z", "commit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0ODowMFrOGXkJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0ODowMFrOGXkJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MjcxOQ==", "bodyText": "s/For System Properties/For system properties\nAnd everywhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r427362719", "createdAt": "2020-05-19T14:48:00Z", "author": {"login": "bogdandrutu"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Configuration options for {@link OtlpGrpcMetricExporter} can be read from system properties,\n+ * environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link OtlpGrpcMetricExporter}\n+ * will look for the following names:\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTI2NDM5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-414526439", "createdAt": "2020-05-19T14:49:28Z", "commit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0OToyOVrOGXkN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0OTo1NFrOGXkPWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MzgxOA==", "bodyText": "\"to set the max waiting time allowed to send each metric batch\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r427363818", "createdAt": "2020-05-19T14:49:29Z", "author": {"login": "bogdandrutu"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports metrics using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Configuration options for {@link OtlpGrpcMetricExporter} can be read from system properties,\n+ * environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link OtlpGrpcMetricExporter}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to process\n+ *       each metric batch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NDE4Nw==", "bodyText": "\"to set the max waiting time allowed to send each span batch\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#discussion_r427364187", "createdAt": "2020-05-19T14:49:54Z", "author": {"login": "bogdandrutu"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcSpanExporter.java", "diffHunk": "@@ -30,7 +30,27 @@\n import java.util.logging.Logger;\n import javax.annotation.concurrent.ThreadSafe;\n \n-/** Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model. */\n+/**\n+ * Exports spans using OTLP via gRPC, using OpenTelemetry's protobuf model.\n+ *\n+ * <p>Configuration options for {@link OtlpGrpcSpanExporter} can be read from system properties,\n+ * environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link OtlpGrpcSpanExporter}\n+ * will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.otlp.span.timeout}: to set the max waiting time for the collector to process", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2738baa19810c8edd9e7a92f2c6eb8ac5c116d42"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2af73816166a261933f952432606439a67f3b3a", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a2af73816166a261933f952432606439a67f3b3a", "committedDate": "2020-05-20T06:00:15Z", "message": "Polish documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzgwNDYz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1238#pullrequestreview-415380463", "createdAt": "2020-05-20T14:14:06Z", "commit": {"oid": "a2af73816166a261933f952432606439a67f3b3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2742, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}