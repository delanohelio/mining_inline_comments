{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTIwNDk1", "number": 1011, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0OToxOVrODoAY1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyNToxMlrODoDz8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjc1OTkwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0OToxOVrOF2VbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo0MDo1MlrOF2XUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ==", "bodyText": "We said that we need to wait for the in-progress task if any.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392518479", "createdAt": "2020-03-13T22:49:19Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTIyOA==", "bodyText": "I don't think we ever came to a conclusion on how we wanted to behave, but I'm happy to have this method block until everything is done, if that's what is desired.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549228", "createdAt": "2020-03-14T02:35:54Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}, "originalCommit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTMwMg==", "bodyText": "How long should we wait before bailing out, do you think?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549302", "createdAt": "2020-03-14T02:36:50Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}, "originalCommit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTU1OQ==", "bodyText": "I made it wait 5 seconds. Happy to tweak it if there's a better number.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392549559", "createdAt": "2020-03-14T02:40:52Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ=="}, "originalCommit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMyMDgwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyNToxMlrOF2aK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjoyNzo0MlrOF2ab4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjIxOQ==", "bodyText": "If we cannot stop the previous export we should not start a new one :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392596219", "createdAt": "2020-03-14T15:25:12Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    try {\n+      scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      // force a shutdown if the export hasn't finished.\n+      scheduler.shutdownNow();\n+      // reset the interrupted status\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      exporter.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMDU0Nw==", "bodyText": "yeah, good call. Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392600547", "createdAt": "2020-03-14T16:27:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    try {\n+      scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      // force a shutdown if the export hasn't finished.\n+      scheduler.shutdownNow();\n+      // reset the interrupted status\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      exporter.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjIxOQ=="}, "originalCommit": {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 981, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}