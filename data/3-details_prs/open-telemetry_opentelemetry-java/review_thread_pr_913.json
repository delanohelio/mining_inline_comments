{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTQ5MTUx", "number": 913, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTo1MToyMlrODiTK9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxOToyMlrODi1qFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjkyMjc5OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTo1MToyMlrOFteA1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0Mjo1M1rOFtrj1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMTk3NQ==", "bodyText": "@bogdandrutu is this correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383221975", "createdAt": "2020-02-24T11:51:22Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -190,11 +247,13 @@ public void onEvent(DisruptorEvent event, long sequence, boolean endOfBatch) {\n             spanProcessor.onEnd(readableSpan);\n             break;\n           case ON_SHUTDOWN:\n+            spanProcessor.forceFlush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzkyNQ==", "bodyText": "It depends where do you want to have the shutdown logic implemented. If we just enqueue a shutdown type event then this is correct, if we do call explicitly shutdown from the thread that does queuing then this is not needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383443925", "createdAt": "2020-02-24T18:42:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -190,11 +247,13 @@ public void onEvent(DisruptorEvent event, long sequence, boolean endOfBatch) {\n             spanProcessor.onEnd(readableSpan);\n             break;\n           case ON_SHUTDOWN:\n+            spanProcessor.forceFlush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyMTk3NQ=="}, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDIyNzE2OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowNDozOVrOFtqZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoyMDozOVrOFuT3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDk5NQ==", "bodyText": "I would change the order EventType, ReadableSpan, CDL", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383424995", "createdAt": "2020-02-24T18:04:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -51,6 +52,20 @@ public void translateTo(\n               event.setEntry(arg0, arg1);\n             }\n           };\n+  private static final EventTranslatorThreeArg<\n+          DisruptorEvent, ReadableSpan, EventType, CountDownLatch>\n+      TRANSLATOR_THREE_ARG =\n+          new EventTranslatorThreeArg<DisruptorEvent, ReadableSpan, EventType, CountDownLatch>() {\n+            @Override\n+            public void translateTo(\n+                DisruptorEvent event,\n+                long sequence,\n+                ReadableSpan arg0,\n+                EventType arg1,\n+                CountDownLatch arg2) {\n+              event.setEntry(arg0, arg1, arg2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4OTY0Mg==", "bodyText": "I kept the same order of the TWO_ARG event. Should we change also that one?\nI also prefer having EventType as first argument", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383789642", "createdAt": "2020-02-25T10:27:02Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -51,6 +52,20 @@ public void translateTo(\n               event.setEntry(arg0, arg1);\n             }\n           };\n+  private static final EventTranslatorThreeArg<\n+          DisruptorEvent, ReadableSpan, EventType, CountDownLatch>\n+      TRANSLATOR_THREE_ARG =\n+          new EventTranslatorThreeArg<DisruptorEvent, ReadableSpan, EventType, CountDownLatch>() {\n+            @Override\n+            public void translateTo(\n+                DisruptorEvent event,\n+                long sequence,\n+                ReadableSpan arg0,\n+                EventType arg1,\n+                CountDownLatch arg2) {\n+              event.setEntry(arg0, arg1, arg2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDk5NQ=="}, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNDM5OQ==", "bodyText": "So then let's change to have EventType as the first argument then. I would change all calls :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384104399", "createdAt": "2020-02-25T20:20:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -51,6 +52,20 @@ public void translateTo(\n               event.setEntry(arg0, arg1);\n             }\n           };\n+  private static final EventTranslatorThreeArg<\n+          DisruptorEvent, ReadableSpan, EventType, CountDownLatch>\n+      TRANSLATOR_THREE_ARG =\n+          new EventTranslatorThreeArg<DisruptorEvent, ReadableSpan, EventType, CountDownLatch>() {\n+            @Override\n+            public void translateTo(\n+                DisruptorEvent event,\n+                long sequence,\n+                ReadableSpan arg0,\n+                EventType arg1,\n+                CountDownLatch arg2) {\n+              event.setEntry(arg0, arg1, arg2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDk5NQ=="}, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDIzMjA1OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowNjoyM1rOFtqdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowNjoyM1rOFtqdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNTgzNg==", "bodyText": "1 - represents the number of consumer threads, maybe make it a constant?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383425836", "createdAt": "2020-02-24T18:06:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -138,19 +170,38 @@ void forceFlush() {\n       if (isShutdown) {\n         return;\n       }\n-      enqueue(null, EventType.ON_FORCE_FLUSH);\n+      CountDownLatch flushLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMzMDIzOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozNzozMFrOFtrZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowNDo1NVrOFuB7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTIwNQ==", "bodyText": "Can shutdown be implemented as?\n\nSet shutdown variable;\nFlush and wait;\nCall shutdown for the SpanProcessor next;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383441205", "createdAt": "2020-02-24T18:37:30Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -138,19 +170,38 @@ void forceFlush() {\n       if (isShutdown) {\n         return;\n       }\n-      enqueue(null, EventType.ON_FORCE_FLUSH);\n+      CountDownLatch flushLatch = new CountDownLatch(1);\n+      enqueue(null, EventType.ON_FORCE_FLUSH, flushLatch);\n+      try {\n+        flushLatch.await();\n+      } catch (InterruptedException e) {\n+        // Preserve the interruption.\n+        Thread.currentThread().interrupt();\n+        logger.warning(\"Thread interrupted, shutdown may not finished.\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMDQxOA==", "bodyText": "Since the SpanProcessor is only visible in the DisruptorEventHandler class, we need to:\n\nSet shutdown variable\nEnqueue a Shutdown event\nWait for Shutdown event to be processed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383810418", "createdAt": "2020-02-25T11:04:55Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -138,19 +170,38 @@ void forceFlush() {\n       if (isShutdown) {\n         return;\n       }\n-      enqueue(null, EventType.ON_FORCE_FLUSH);\n+      CountDownLatch flushLatch = new CountDownLatch(1);\n+      enqueue(null, EventType.ON_FORCE_FLUSH, flushLatch);\n+      try {\n+        flushLatch.await();\n+      } catch (InterruptedException e) {\n+        // Preserve the interruption.\n+        Thread.currentThread().interrupt();\n+        logger.warning(\"Thread interrupted, shutdown may not finished.\");\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MTIwNQ=="}, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMzOTE0OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MDoxN1rOFtretA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MDoxN1rOFtretA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MjYxMg==", "bodyText": "Why do we have duplicate enqueue method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r383442612", "createdAt": "2020-02-24T18:40:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -109,6 +124,23 @@ void enqueue(ReadableSpan readableSpan, EventType eventType) {\n     }\n   }\n \n+  // Enqueues an event on the {@link DisruptorEventQueue}.\n+  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }\n+      return;\n+    }\n+\n+    if (blocking) {\n+      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, readableSpan, eventType, flushLatch);\n+    } else {\n+      // TODO: Record metrics if element not added.\n+      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, readableSpan, eventType, flushLatch);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c3375296dcf00ccebf170e8d7997e8264a2783"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU3MDE3OnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxODoyNVrOFuTzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozNzozN1rOFufr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMzM2OA==", "bodyText": "Now that we pass a CDL for flush I think we should do the same for the shutdown one and not have a special case for that one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384103368", "createdAt": "2020-02-25T20:18:25Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -92,8 +99,12 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n   void enqueue(ReadableSpan readableSpan, EventType eventType) {\n+    enqueue(readableSpan, eventType, null);\n+  }\n+\n+  // Enqueues an event on the {@link DisruptorEventQueue}.\n+  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5Nzk2MA==", "bodyText": "Make sense!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384297960", "createdAt": "2020-02-26T06:37:37Z", "author": {"login": "thisthat"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -92,8 +99,12 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n   void enqueue(ReadableSpan readableSpan, EventType eventType) {\n+    enqueue(readableSpan, eventType, null);\n+  }\n+\n+  // Enqueues an event on the {@link DisruptorEventQueue}.\n+  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMzM2OA=="}, "originalCommit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU3MzAwOnYy", "diffSide": "RIGHT", "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxOToyMlrOFuT1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxOToyMlrOFuT1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMzgxNw==", "bodyText": "s/FLUSH_WAITER_COUNTER/NUM_CONSUMERS?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/913#discussion_r384103817", "createdAt": "2020-02-25T20:19:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -67,6 +72,8 @@ public DisruptorEvent newInstance() {\n   private volatile boolean isShutdown = false;\n   private final boolean blocking;\n \n+  private static final byte FLUSH_WAITER_COUNTER = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549760d411f56879b6b53fb09cf4ebeacbb7e0e2"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 921, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}