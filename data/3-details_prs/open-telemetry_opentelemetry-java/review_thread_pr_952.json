{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjY0MjUz", "number": 952, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowODoyMVrODj_3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTo0M1rODkKuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDczMTk5OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowODoyMVrOFwHTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOTozMzoyNFrOFwPv5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTUzOQ==", "bodyText": "Probably a minor issue, since this is only called once per collection cycle, but I'd prefer to see this be a concrete, rather than anonymous class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995539", "createdAt": "2020-02-29T03:08:21Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,31 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultLongObserver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMzk4OA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386133988", "createdAt": "2020-03-01T19:33:24Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,31 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultLongObserver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTUzOQ=="}, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDczMjUzOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowOTo0M1rOFwHTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOTozMzo1MFrOFwPwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTYyMA==", "bodyText": "same comment here about having this be a concrete, rather than an anonymous class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995620", "createdAt": "2020-02-29T03:09:43Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,32 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultDoubleObserver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNDAyMw==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386134023", "createdAt": "2020-03-01T19:33:50Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,32 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultDoubleObserver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTYyMA=="}, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjUwOTM3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTowMVrOFwV1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NjozMlrOFxkXfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ==", "bodyText": "Since you check for null values in collectAll(), I would drop this requirement. This way, we can remove a callback after it is set", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386233851", "createdAt": "2020-03-02T07:39:01Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,20 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultDoubleObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n   @Override\n   public void setCallback(Callback<DoubleObserver.ResultDoubleObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MjczMQ==", "bodyText": "Not sure if that is the behavior I am looking for, I would like to start more restrictive than open the requirements instead of the other way around (backwards incompatible change).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r387072731", "createdAt": "2020-03-03T14:53:10Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,20 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultDoubleObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n   @Override\n   public void setCallback(Callback<DoubleObserver.ResultDoubleObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ=="}, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDM4MQ==", "bodyText": "Thx for the explanation! I now agree with you \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r387520381", "createdAt": "2020-03-04T08:46:32Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,20 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultDoubleObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n   @Override\n   public void setCallback(Callback<DoubleObserver.ResultDoubleObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ=="}, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjUxMDc5OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTo0M1rOFwV2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTo0M1rOFwV2yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzNDA1OA==", "bodyText": "The same comment applies here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386234058", "createdAt": "2020-03-02T07:39:43Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,19 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultLongObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n+  @Override\n+  public void setCallback(Callback<ResultLongObserver> metricUpdater) {\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 943, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}