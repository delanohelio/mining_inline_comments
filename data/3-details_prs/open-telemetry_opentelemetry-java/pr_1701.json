{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzA4NDQz", "number": 1701, "title": "Update for the more restricted span status codes.", "bodyText": "resolves #1700\nNote: I made the numeric codes match the proposed protobuf status codes.", "createdAt": "2020-09-24T21:27:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701", "merged": true, "mergeCommit": {"oid": "287eae9e5c25ac331d17fe43d1fcf415d293d0cd"}, "closed": true, "closedAt": "2020-09-28T17:42:45Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMIAhMAH2gAyNDkyNzA4NDQzOjg1NjNlMGYzMjE0MmM2NDQyNjZlNWY0Nzc1NTE3M2EwYTMyMGNmODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNW2BTAFqTQ5NzczODcwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8563e0f32142c644266e5f47755173a0a320cf86", "committedDate": "2020-09-24T21:24:08Z", "message": "Update for the more restricted span status codes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDI2Nzg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#pullrequestreview-496026787", "createdAt": "2020-09-25T00:03:43Z", "commit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowMzo0M1rOHXwjUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDowMzo0M1rOHXwjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDc2OA==", "bodyText": "Do we need the numbers anymore?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r494674768", "createdAt": "2020-09-25T00:03:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/Status.java", "diffHunk": "@@ -44,163 +43,18 @@\n    * @since 0.1.0\n    */\n   public enum CanonicalCode {\n-    /**\n-     * The operation completed successfully.\n-     *\n-     * @since 0.1.0\n-     */\n-    OK(0),\n-\n-    /**\n-     * The operation was cancelled (typically by the caller).\n-     *\n-     * @since 0.1.0\n-     */\n-    CANCELLED(1),\n-\n-    /**\n-     * Unknown error. An example of where this error may be returned is if a Status value received\n-     * from another address space belongs to an error-space that is not known in this address space.\n-     * Also errors raised by APIs that do not return enough error information may be converted to\n-     * this error.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNKNOWN(2),\n-\n-    /**\n-     * Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.\n-     * INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the\n-     * system (e.g., a malformed file name).\n-     *\n-     * @since 0.1.0\n-     */\n-    INVALID_ARGUMENT(3),\n-\n-    /**\n-     * Deadline expired before operation could complete. For operations that change the state of the\n-     * system, this error may be returned even if the operation has completed successfully. For\n-     * example, a successful response from a server could have been delayed long enough for the\n-     * deadline to expire.\n-     *\n-     * @since 0.1.0\n-     */\n-    DEADLINE_EXCEEDED(4),\n-\n-    /**\n-     * Some requested entity (e.g., file or directory) was not found.\n-     *\n-     * @since 0.1.0\n-     */\n-    NOT_FOUND(5),\n-\n-    /**\n-     * Some entity that we attempted to create (e.g., file or directory) already exists.\n-     *\n-     * @since 0.1.0\n-     */\n-    ALREADY_EXISTS(6),\n-\n-    /**\n-     * The caller does not have permission to execute the specified operation. PERMISSION_DENIED\n-     * must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED\n-     * instead for those errors). PERMISSION_DENIED must not be used if the caller cannot be\n-     * identified (use UNAUTHENTICATED instead for those errors).\n-     *\n-     * @since 0.1.0\n-     */\n-    PERMISSION_DENIED(7),\n-\n-    /**\n-     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system\n-     * is out of space.\n-     *\n-     * @since 0.1.0\n-     */\n-    RESOURCE_EXHAUSTED(8),\n-\n-    /**\n-     * Operation was rejected because the system is not in a state required for the operation's\n-     * execution. For example, directory to be deleted may be non-empty, an rmdir operation is\n-     * applied to a non-directory, etc.\n-     *\n-     * <p>A litmus test that may help a service implementor in deciding between FAILED_PRECONDITION,\n-     * ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call.\n-     * (b) Use ABORTED if the client should retry at a higher-level (e.g., restarting a\n-     * read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until\n-     * the system state has been explicitly fixed. E.g., if an \"rmdir\" fails because the directory\n-     * is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless\n-     * they have first fixed up the directory by deleting files from it.\n-     *\n-     * @since 0.1.0\n-     */\n-    FAILED_PRECONDITION(9),\n-\n-    /**\n-     * The operation was aborted, typically due to a concurrency issue like sequencer check\n-     * failures, transaction aborts, etc.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    ABORTED(10),\n \n     /**\n-     * Operation was attempted past the valid range. E.g., seeking or reading past end of file.\n-     *\n-     * <p>Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system\n-     * state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to\n-     * read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if\n-     * asked to read from an offset past the current file size.\n-     *\n-     * <p>There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend\n-     * using OUT_OF_RANGE (the more specific error) when it applies so that callers who are\n-     * iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are\n-     * done.\n-     *\n-     * @since 0.1.0\n+     * The operation has been validated by an Application developers or Operator to have completed\n+     * successfully.\n      */\n-    OUT_OF_RANGE(11),\n-\n-    /**\n-     * Operation is not implemented or not supported/enabled in this service.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNIMPLEMENTED(12),\n-\n-    /**\n-     * Internal errors. Means some invariants expected by underlying system has been broken. If you\n-     * see one of these errors, something is very broken.\n-     *\n-     * @since 0.1.0\n-     */\n-    INTERNAL(13),\n-\n-    /**\n-     * The service is currently unavailable. This is a most likely a transient condition and may be\n-     * corrected by retrying with a backoff.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNAVAILABLE(14),\n+    OK(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTgwOTY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#pullrequestreview-496180969", "createdAt": "2020-09-25T07:40:10Z", "commit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo0MDoxMFrOHX4hDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo0MDoxMFrOHX4hDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNTI2MA==", "bodyText": "I realised that I still an open question about this use case: open-telemetry/opentelemetry-specification#1008", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r494805260", "createdAt": "2020-09-25T07:40:10Z", "author": {"login": "iNikem"}, "path": "extensions/trace_utils/src/main/java/io/opentelemetry/extensions/trace/CurrentSpanUtils.java", "diffHunk": "@@ -121,7 +121,7 @@ public V call() throws Exception {\n \n   private static void setErrorStatus(Span span, Throwable t) {\n     span.setStatus(\n-        Status.UNKNOWN.withDescription(\n+        Status.ERROR.withDescription(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTM0OTg1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#pullrequestreview-496934985", "createdAt": "2020-09-26T03:09:12Z", "commit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDEyMzU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#pullrequestreview-497012354", "createdAt": "2020-09-26T15:30:58Z", "commit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNTozMDo1OFrOHYg8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNTozMDo1OFrOHYg8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NzY0OQ==", "bodyText": "How did we come with this numbers? See https://github.com/open-telemetry/opentelemetry-proto/pull/224/files and maybe we should follow the same numbers so translation to otlp is just direct mapping.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#discussion_r495467649", "createdAt": "2020-09-26T15:30:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Status.java", "diffHunk": "@@ -44,163 +43,18 @@\n    * @since 0.1.0\n    */\n   public enum CanonicalCode {\n-    /**\n-     * The operation completed successfully.\n-     *\n-     * @since 0.1.0\n-     */\n-    OK(0),\n-\n-    /**\n-     * The operation was cancelled (typically by the caller).\n-     *\n-     * @since 0.1.0\n-     */\n-    CANCELLED(1),\n-\n-    /**\n-     * Unknown error. An example of where this error may be returned is if a Status value received\n-     * from another address space belongs to an error-space that is not known in this address space.\n-     * Also errors raised by APIs that do not return enough error information may be converted to\n-     * this error.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNKNOWN(2),\n-\n-    /**\n-     * Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.\n-     * INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the\n-     * system (e.g., a malformed file name).\n-     *\n-     * @since 0.1.0\n-     */\n-    INVALID_ARGUMENT(3),\n-\n-    /**\n-     * Deadline expired before operation could complete. For operations that change the state of the\n-     * system, this error may be returned even if the operation has completed successfully. For\n-     * example, a successful response from a server could have been delayed long enough for the\n-     * deadline to expire.\n-     *\n-     * @since 0.1.0\n-     */\n-    DEADLINE_EXCEEDED(4),\n-\n-    /**\n-     * Some requested entity (e.g., file or directory) was not found.\n-     *\n-     * @since 0.1.0\n-     */\n-    NOT_FOUND(5),\n-\n-    /**\n-     * Some entity that we attempted to create (e.g., file or directory) already exists.\n-     *\n-     * @since 0.1.0\n-     */\n-    ALREADY_EXISTS(6),\n-\n-    /**\n-     * The caller does not have permission to execute the specified operation. PERMISSION_DENIED\n-     * must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED\n-     * instead for those errors). PERMISSION_DENIED must not be used if the caller cannot be\n-     * identified (use UNAUTHENTICATED instead for those errors).\n-     *\n-     * @since 0.1.0\n-     */\n-    PERMISSION_DENIED(7),\n-\n-    /**\n-     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system\n-     * is out of space.\n-     *\n-     * @since 0.1.0\n-     */\n-    RESOURCE_EXHAUSTED(8),\n-\n-    /**\n-     * Operation was rejected because the system is not in a state required for the operation's\n-     * execution. For example, directory to be deleted may be non-empty, an rmdir operation is\n-     * applied to a non-directory, etc.\n-     *\n-     * <p>A litmus test that may help a service implementor in deciding between FAILED_PRECONDITION,\n-     * ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call.\n-     * (b) Use ABORTED if the client should retry at a higher-level (e.g., restarting a\n-     * read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until\n-     * the system state has been explicitly fixed. E.g., if an \"rmdir\" fails because the directory\n-     * is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless\n-     * they have first fixed up the directory by deleting files from it.\n-     *\n-     * @since 0.1.0\n-     */\n-    FAILED_PRECONDITION(9),\n-\n-    /**\n-     * The operation was aborted, typically due to a concurrency issue like sequencer check\n-     * failures, transaction aborts, etc.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    ABORTED(10),\n \n     /**\n-     * Operation was attempted past the valid range. E.g., seeking or reading past end of file.\n-     *\n-     * <p>Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system\n-     * state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to\n-     * read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if\n-     * asked to read from an offset past the current file size.\n-     *\n-     * <p>There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend\n-     * using OUT_OF_RANGE (the more specific error) when it applies so that callers who are\n-     * iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are\n-     * done.\n-     *\n-     * @since 0.1.0\n+     * The operation has been validated by an Application developers or Operator to have completed\n+     * successfully.\n      */\n-    OUT_OF_RANGE(11),\n-\n-    /**\n-     * Operation is not implemented or not supported/enabled in this service.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNIMPLEMENTED(12),\n-\n-    /**\n-     * Internal errors. Means some invariants expected by underlying system has been broken. If you\n-     * see one of these errors, something is very broken.\n-     *\n-     * @since 0.1.0\n-     */\n-    INTERNAL(13),\n-\n-    /**\n-     * The service is currently unavailable. This is a most likely a transient condition and may be\n-     * corrected by retrying with a backoff.\n-     *\n-     * <p>See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.\n-     *\n-     * @since 0.1.0\n-     */\n-    UNAVAILABLE(14),\n+    OK(0),\n \n-    /**\n-     * Unrecoverable data loss or corruption.\n-     *\n-     * @since 0.1.0\n-     */\n-    DATA_LOSS(15),\n+    /** The default status. */\n+    UNSET(17),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8563e0f32142c644266e5f47755173a0a320cf86"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73c0db39cd1025a9f963d753d309cb5f59ea1bdb", "committedDate": "2020-09-28T15:51:27Z", "message": "Update status codes to match the proposed proto codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzM4NzAz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1701#pullrequestreview-497738703", "createdAt": "2020-09-28T17:15:10Z", "commit": {"oid": "73c0db39cd1025a9f963d753d309cb5f59ea1bdb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3493, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}