{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODQ1NzU4", "number": 1446, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjo0NjozN1rOEQ3jCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjo0NjozN1rOEQ3jCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTIyNzYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjo0NjozN1rOG1Qtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjo0ODo0MFrOG1Qvgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwMTQ5MA==", "bodyText": "This is needed in the other PR :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1446#discussion_r458501490", "createdAt": "2020-07-22T02:46:37Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -209,5 +209,20 @@\n   public static final StringAttributeSetter MESSAGING_OPERATION =\n       StringAttributeSetter.create(\"messaging.operation\");\n \n+  /** The name of an {@link io.opentelemetry.trace.Event} describing an exception. */\n+  public static final String EXCEPTION_EVENT_NAME = \"exception\";\n+  /** The type of the exception, i.e., it's fully qualified name. */\n+  public static final StringAttributeSetter EXCEPTION_TYPE =\n+      StringAttributeSetter.create(\"exception.type\");\n+  /** The exception message. */\n+  public static final StringAttributeSetter EXCEPTION_MESSAGE =\n+      StringAttributeSetter.create(\"exception.message\");\n+  /**\n+   * A string representing the stacktrace of an exception, as produced by {@link\n+   * Throwable#printStackTrace()}.\n+   */\n+  public static final StringAttributeSetter EXCEPTION_STACKTRACE =\n+      StringAttributeSetter.create(\"exception.stacktrace\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347d08857c45f734e2aeef91ebc375284bdca140"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwMjAxOQ==", "bodyText": "Oops thanks", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1446#discussion_r458502019", "createdAt": "2020-07-22T02:48:40Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -209,5 +209,20 @@\n   public static final StringAttributeSetter MESSAGING_OPERATION =\n       StringAttributeSetter.create(\"messaging.operation\");\n \n+  /** The name of an {@link io.opentelemetry.trace.Event} describing an exception. */\n+  public static final String EXCEPTION_EVENT_NAME = \"exception\";\n+  /** The type of the exception, i.e., it's fully qualified name. */\n+  public static final StringAttributeSetter EXCEPTION_TYPE =\n+      StringAttributeSetter.create(\"exception.type\");\n+  /** The exception message. */\n+  public static final StringAttributeSetter EXCEPTION_MESSAGE =\n+      StringAttributeSetter.create(\"exception.message\");\n+  /**\n+   * A string representing the stacktrace of an exception, as produced by {@link\n+   * Throwable#printStackTrace()}.\n+   */\n+  public static final StringAttributeSetter EXCEPTION_STACKTRACE =\n+      StringAttributeSetter.create(\"exception.stacktrace\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwMTQ5MA=="}, "originalCommit": {"oid": "347d08857c45f734e2aeef91ebc375284bdca140"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1517, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}