{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDMwNjcx", "number": 1325, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzoxMzoyM1rOEEFjzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozMDowMFrOEEiZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzIwODQ1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzoxMzoyM1rOGhfgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo0MzoxOFrOGh7FIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA==", "bodyText": "why atomic? I think I know why because you need to change it in the lambda. You can have a size() on the builder maybe? Maybe create an issue because this smells a bit :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r437772464", "createdAt": "2020-06-09T23:13:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTc1MQ==", "bodyText": "yes, entirely because it needed to be updated in the inner class. size() on the builder isn't a bad idea at all, though.\nI will note that we're going to need a more sophisticated builder-like class to handle the attributes on the active span itself, so maybe we can roll the cleanup into that change?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r437781751", "createdAt": "2020-06-09T23:43:29Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NzEwMQ==", "bodyText": "Does this work to avoid the atomic?\nattributes.forEach(\n        new KeyValueConsumer<AttributeValue>() {\n          private int added = 0;\n        \n          @Override\n          public void consume(String key, AttributeValue value) {\n            if (added <= limit) {\n              temp.setAttribute(key, value);\n              added++;\n            }\n          }\n        });\nI don't know if I've seen many builders with a size method. Doesn't mean it's a bad idea, but I think here the actual problem isn't about knowing size but about the fact that inner classes / lambdas can't mutate an outside local variable. Adding builder.size might help this specific situation but I don't think it's a real solution.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r437857101", "createdAt": "2020-06-10T04:45:01Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzA4Ng==", "bodyText": "Also another possibility that is probably the fastest is to add a public Attributes truncate(size int) method that both lables and attributes can have. That is the fastest because it does not need to create builders, call lambdas etc.\n@anuraaga I think for the moment your proposal is very good, also I would declare the builder in that class and probably make it a static final class not anonymous.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438197086", "createdAt": "2020-06-10T15:07:42Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMzY1Mw==", "bodyText": "Just FYI, making a private static inner class also final doesn't do anything but add visual clutter, as it has no actual impact on anything.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438213653", "createdAt": "2020-06-10T15:28:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMjIwNQ==", "bodyText": "At least it show the clear intention that we don't want to extend, also it can be done extended from another static inner class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438222205", "createdAt": "2020-06-10T15:40:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNDE2Mw==", "bodyText": "ok, I did this. please take a look!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438224163", "createdAt": "2020-06-10T15:43:18Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA=="}, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyODM5OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNzoxNlrOGiOGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozNTozN1rOGii-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTcxMw==", "bodyText": "Would usually use something like result, not used to temp being as important as this one :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438535713", "createdAt": "2020-06-11T04:27:16Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +362,14 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    Attributes.Builder temp = Attributes.newBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NzkwOQ==", "bodyText": "agreed. will pick this up in the next round of changes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438877909", "createdAt": "2020-06-11T15:35:37Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +362,14 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    Attributes.Builder temp = Attributes.newBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTcxMw=="}, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkzMjI0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozMDowMFrOGiOIgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjoxMToyOFrOGi0zlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNjMyMA==", "bodyText": "This works because we don't expect any attributes to have more than Integer.MAX_VALUE size (where added will become negative and elements start being appended again), but even so it's probably clearer keep the logic precise instead of the increment shortcut. That said, this might go away soon anyways so no big deal just FYI.\nif (added < limit) {\n  buileder.set(...)\n  added++;\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438536320", "createdAt": "2020-06-11T04:30:00Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -534,4 +524,22 @@ int getTotalRecordedLinks() {\n         ? Collections.unmodifiableMap(attributes)\n         : Collections.unmodifiableMap(new HashMap<>(attributes));\n   }\n+\n+  private static class LimitingAttributeConsumer implements KeyValueConsumer<AttributeValue> {\n+    private final int limit;\n+    private final Attributes.Builder builder;\n+    private int added;\n+\n+    public LimitingAttributeConsumer(int limit, Attributes.Builder builder) {\n+      this.limit = limit;\n+      this.builder = builder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (added++ < limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MjAwNA==", "bodyText": "Are you suggesting the change for a functional reason, or just for clarity? what you suggest is identical functionally.\nI don't understand the Integer.MAX_VALUE comment here. Attributes limits should never come anywhere close to that, so I have zero concern around overflowing the int. Do you have a use-case that I'm not thinking of?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438872004", "createdAt": "2020-06-11T15:29:35Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -534,4 +524,22 @@ int getTotalRecordedLinks() {\n         ? Collections.unmodifiableMap(attributes)\n         : Collections.unmodifiableMap(new HashMap<>(attributes));\n   }\n+\n+  private static class LimitingAttributeConsumer implements KeyValueConsumer<AttributeValue> {\n+    private final int limit;\n+    private final Attributes.Builder builder;\n+    private int added;\n+\n+    public LimitingAttributeConsumer(int limit, Attributes.Builder builder) {\n+      this.limit = limit;\n+      this.builder = builder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (added++ < limit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNjMyMA=="}, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0NjA3Mg==", "bodyText": "Mostly just for clarity - the fact that attribute limits should never come close is true but also some hidden knowledge needed to know the code works. It's nice to reduce hidden knowledge if it's not a burden, I guess one extra line of code isn't so bad. Also allows the added variable to actually be true since the value stops being how many were added, but how many were consumed, after the limit.\nVery small nits, just added them for future reference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r439146072", "createdAt": "2020-06-12T00:32:34Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -534,4 +524,22 @@ int getTotalRecordedLinks() {\n         ? Collections.unmodifiableMap(attributes)\n         : Collections.unmodifiableMap(new HashMap<>(attributes));\n   }\n+\n+  private static class LimitingAttributeConsumer implements KeyValueConsumer<AttributeValue> {\n+    private final int limit;\n+    private final Attributes.Builder builder;\n+    private int added;\n+\n+    public LimitingAttributeConsumer(int limit, Attributes.Builder builder) {\n+      this.limit = limit;\n+      this.builder = builder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (added++ < limit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNjMyMA=="}, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2OTk0Mg==", "bodyText": "ah, yes, I do agree with all of this. I'll be sure to include the cleanup in a future PR", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r439169942", "createdAt": "2020-06-12T02:11:28Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -534,4 +524,22 @@ int getTotalRecordedLinks() {\n         ? Collections.unmodifiableMap(attributes)\n         : Collections.unmodifiableMap(new HashMap<>(attributes));\n   }\n+\n+  private static class LimitingAttributeConsumer implements KeyValueConsumer<AttributeValue> {\n+    private final int limit;\n+    private final Attributes.Builder builder;\n+    private int added;\n+\n+    public LimitingAttributeConsumer(int limit, Attributes.Builder builder) {\n+      this.limit = limit;\n+      this.builder = builder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (added++ < limit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNjMyMA=="}, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}