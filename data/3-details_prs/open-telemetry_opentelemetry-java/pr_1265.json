{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjAzNjE4", "number": 1265, "title": "Add API for ValueObserver", "bodyText": "", "createdAt": "2020-05-21T21:42:00Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265", "merged": true, "mergeCommit": {"oid": "84f5a3eab01c269e43c4962c5acc04bfc97de09b"}, "closed": true, "closedAt": "2020-05-22T13:32:07Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjkvKuAH2gAyNDIxNjAzNjE4OmM1MjA1YjIwNDA4ZjNkNWNlNjUwZTBmOGYwZDg5MmE0MjFlOWIyOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjn7OSgFqTQxNjU5MjAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "committedDate": "2020-05-21T21:41:32Z", "message": "Add API for ValueObserver\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE0ODU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416514855", "createdAt": "2020-05-21T21:44:03Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDowM1rOGZD_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDowM1rOGZD_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzA5Mg==", "bodyText": "0.5.0 , here and below", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933092", "createdAt": "2020-05-21T21:44:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -166,6 +166,32 @@\n    */\n   LongUpDownSumObserver.Builder longUpDownSumObserverBuilder(String name);\n \n+  /**\n+   * Returns a new builder for a {@link DoubleValueObserver}.\n+   *\n+   * @param name the name of the instrument. Should be a ASCII string with a length no greater than\n+   *     255 characters.\n+   * @return a new builder for a {@code DoubleValueObserver}.\n+   * @throws NullPointerException if {@code name} is null.\n+   * @throws IllegalArgumentException if different metric with the same name already registered.\n+   * @throws IllegalArgumentException if the {@code name} does not match the requirements.\n+   * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE1MDY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416515066", "createdAt": "2020-05-21T21:44:28Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDoyOFrOGZEAhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDoyOFrOGZEAhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzI1Mw==", "bodyText": "probably @since 0.5.0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933253", "createdAt": "2020-05-21T21:44:28Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongSumObserver cpuObserver =\n+ *       meter.\n+ *           .longSumObserverBuilder(\"cpu_fan_speed\")\n+ *           .setDescription(\"System CPU fan speed\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new LongSumObserver.Callback<ResultLongSumObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongSumObserver result) {\n+ *             // Get system cpu fan speed\n+ *             result.observe(cpuFanSpeed);\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE1ODY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416515867", "createdAt": "2020-05-21T21:46:03Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NjowM1rOGZEDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NjowM1rOGZEDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * capture values that are treated as individual with Observe(value).\n          \n          \n            \n             * capture values that are treated as individual with observe(value).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933941", "createdAt": "2020-05-21T21:46:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE3MDQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416517048", "createdAt": "2020-05-21T21:48:25Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODoyNVrOGZEGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODoyNVrOGZEGvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   private static final DoubleSumObserver cpuObserver =\n          \n          \n            \n             *   private static final DoubleValueObserver cpuObserver =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934847", "createdAt": "2020-05-21T21:48:25Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE3MTg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416517184", "createdAt": "2020-05-21T21:48:40Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODo0MFrOGZEHIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODo0MFrOGZEHIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_temperature\")\n          \n          \n            \n             *           .doubleValueObserverBuilder(\"cpu_temperature\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934947", "createdAt": "2020-05-21T21:48:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTE3NTA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416517505", "createdAt": "2020-05-21T21:49:17Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0OToxN1rOGZEH_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0OToxN1rOGZEH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTE2NA==", "bodyText": "needs to be updated for s/sum/value/i", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428935164", "createdAt": "2020-05-21T21:49:17Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")\n+ *           .setDescription(\"System CPU temperature\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new DoubleSumObserver.Callback<ResultDoubleSumObserver>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTIyNjgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416522681", "createdAt": "2020-05-21T21:59:24Z", "commit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1OToyNFrOGZEYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1OToyNFrOGZEYCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTI3Mw==", "bodyText": "all the same comments from the DoubleValueObserver apply in here, as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428939273", "createdAt": "2020-05-21T21:59:24Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5c2bfc0fa3faed94f71fcd6575ac7ab08ff10a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b5c2bfc0fa3faed94f71fcd6575ac7ab08ff10a", "committedDate": "2020-05-21T22:19:34Z", "message": "Address feedback\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTkyMDMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#pullrequestreview-416592031", "createdAt": "2020-05-22T01:24:25Z", "commit": {"oid": "0b5c2bfc0fa3faed94f71fcd6575ac7ab08ff10a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2774, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}