{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODAwNzc3", "number": 1243, "title": "Rename Measure to ValueRecorder, fix comments and javadoc", "bodyText": "TODO: In a separate PR #1244", "createdAt": "2020-05-18T23:58:51Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243", "merged": true, "mergeCommit": {"oid": "8a1a241efa16d795afbaee02444f3b98c66190ad"}, "closed": true, "closedAt": "2020-05-19T18:31:17Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcio5dKAH2gAyNDE5ODAwNzc3OjdlMDg3Y2NlNjYwYWU5MWY1ZTdhMzc2YmQyOTc0ZjZjMDFiNjZmM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci4vZvAFqTQxNDcxMzAzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7e087cce660ae91f5e7a376bd2974f6c01b66f3d", "committedDate": "2020-05-18T23:58:28Z", "message": "Rename Measure to ValueRecorder, fix comments and javadoc\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTU1MDg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414155087", "createdAt": "2020-05-19T07:03:52Z", "commit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzowMzo1MlrOGXShTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzoxMzoxOVrOGXSykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3MQ==", "bodyText": "nit: remove the *(s) at the end", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427073871", "createdAt": "2020-05-19T07:03:52Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3ODI5MA==", "bodyText": "maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              BatchRecorder put(DoubleValueRecorder measure, double value);\n          \n          \n            \n              BatchRecorder put(DoubleValueRecorder valueRecorder, double value);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427078290", "createdAt": "2020-05-19T07:13:19Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java", "diffHunk": "@@ -27,26 +27,26 @@\n @ThreadSafe\n public interface BatchRecorder {\n   /**\n-   * Associates the {@link LongMeasure} with the given value. Subsequent updates to the same {@link\n-   * LongMeasure} will overwrite the previous value.\n+   * Associates the {@link LongValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link LongValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link LongMeasure}.\n+   * @param measure the {@link LongValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(LongMeasure measure, long value);\n+  BatchRecorder put(LongValueRecorder measure, long value);\n \n   /**\n-   * Associates the {@link DoubleMeasure} with the given value. Subsequent updates to the same\n-   * {@link DoubleMeasure} will overwrite the previous value.\n+   * Associates the {@link DoubleValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link DoubleValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link DoubleMeasure}.\n+   * @param measure the {@link DoubleValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(DoubleMeasure measure, double value);\n+  BatchRecorder put(DoubleValueRecorder measure, double value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bc30c98b351d7ca008e20ebe31fca509109a24c", "committedDate": "2020-05-19T14:45:13Z", "message": "Fix more legacy javadoc\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjI3OTEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414627913", "createdAt": "2020-05-19T16:36:45Z", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozNjo0NVrOGXo_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozNjo0NVrOGXo_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ==", "bodyText": "interesting. this shouldn't have even been valid. Are we missing some validation on the label-pairs used for binding?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427442171", "createdAt": "2020-05-19T16:36:45Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjI5NTY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414629566", "createdAt": "2020-05-19T16:38:46Z", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozODo0N1rOGXpE2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozODo0N1rOGXpE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MzQxOQ==", "bodyText": "The use of \"non-additive\" here is confusing. This means non-pre-summed, correct? I think I might just leave out the \"non-additive\" term here, since I don't think people will understand what is meant.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427443419", "createdAt": "2020-05-19T16:38:47Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjMxMTU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414631158", "createdAt": "2020-05-19T16:40:36Z", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MDozNlrOGXpJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MDozNlrOGXpJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDU5Mw==", "bodyText": "Same comment related to the use of \"non-additive\" in these docs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427444593", "createdAt": "2020-05-19T16:40:36Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongMeasure.BoundLongMeasure;\n+import io.opentelemetry.metrics.LongValueRecorder.BoundLongValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a long value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjMyNzM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414632735", "createdAt": "2020-05-19T16:42:37Z", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MjozOFrOGXpOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MjozOFrOGXpOew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw==", "bodyText": "ah, I see \"non-additive\" is clarified here. I'm still not sure usage of this terminology adds a lot to the user's decision to use a ValueRecorder.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427445883", "createdAt": "2020-05-19T16:42:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjMzMTU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414633157", "createdAt": "2020-05-19T16:43:09Z", "commit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MzowOVrOGXpP6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MzowOVrOGXpP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjI0OA==", "bodyText": "s/metric/instrument/ in a bunch of places.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427446248", "createdAt": "2020-05-19T16:43:09Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -89,36 +89,36 @@\n   LongUpDownCounter.Builder longUpDownCounterBuilder(String name);\n \n   /**\n-   * Returns a new builder for a {@link DoubleMeasure}.\n+   * Returns a new builder for a {@link DoubleValueRecorder}.\n    *\n-   * @param name Name of measure, as a {@code String}. Should be a ASCII string with a length no\n-   *     greater than 255 characters.\n-   * @return a new builder for a {@code DoubleMeasure}.\n+   * @param name the name of the metric. Should be a ASCII string with a length no greater than 255", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357858031e0deab053b3076e4a37efbd1d5c9a09", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/357858031e0deab053b3076e4a37efbd1d5c9a09", "committedDate": "2020-05-19T17:57:37Z", "message": "Address feedback\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzEzMDM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#pullrequestreview-414713035", "createdAt": "2020-05-19T18:25:58Z", "commit": {"oid": "357858031e0deab053b3076e4a37efbd1d5c9a09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2747, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}