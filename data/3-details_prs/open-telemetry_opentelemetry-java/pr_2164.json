{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMDAzNTQ0", "number": 2164, "title": "Detect GC leaks of scopes in StrictContextStorage.", "bodyText": "Also switches Guava dependency in JFR extension to use vendored weak-lock-free.\nWhile debugging context issues in a production service using x-ray, it became apparent that not only in unit tests, but being able to detect leaks of Scope in a staging server can really help have peace of mind. As a followup to this PR I will move StrictContextStorage from testing to context - I think it's helpful for everyone in servers too, I'd recommend everyone to enable it on staging servers all the time.\nweak-lock-free is a good, high-performant map with weak keys and much smaller than using Guava for it. We use it in opentelemetry-java-instrumentation already. We should avoid adding dependencies (especially on pre-1.0) so it makes sense to vendor it in. I considered another approach where I shade in opentelemetry-context only and use the shaded class in other artifacts, but it would be impossible for IntelliJ to not treat that import as red until shadowJar is run at least once. But for some reason, even after running shadowJar, I couldn't get it to ever be non-red. So instead, this shades in all the users as well. Another, possibly simplest is best approach, would be to just copy the files into our repo. Let me know if you have any thoughts.", "createdAt": "2020-12-01T05:50:13Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164", "merged": true, "mergeCommit": {"oid": "8697de9afa489efe347aca393ea980ba26cf25cf"}, "closed": true, "closedAt": "2020-12-04T04:04:28Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhfnJSgH2gAyNTMwMDAzNTQ0OmJhMzNhYTgxNzAxYjUzODM0NzE0ZTEyOTBkNGZiNDZiOGRkOTE2ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdivh2HAH2gAyNTMwMDAzNTQ0OmNlMzdlZDIwYTU3MzFjNmY1MWFmMDllZDc1OTRkYzE3YjkwZGNkNjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba33aa81701b53834714e1290d4fb46b8dd91687", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ba33aa81701b53834714e1290d4fb46b8dd91687", "committedDate": "2020-11-30T06:46:33Z", "message": "Detect GC leaks of scopes in StrictContextStorage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64fe5f02bd80e3ee81debddb4f7a7f098c71693", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e64fe5f02bd80e3ee81debddb4f7a7f098c71693", "committedDate": "2020-12-01T04:50:47Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a6f6747b6c912d6afd2d9f186e609a2bf8dec3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/57a6f6747b6c912d6afd2d9f186e609a2bf8dec3", "committedDate": "2020-12-01T05:06:39Z", "message": "More"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a174eb7f85786783e9b9caca0d7201606b455fb", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a174eb7f85786783e9b9caca0d7201606b455fb", "committedDate": "2020-12-01T05:14:45Z", "message": "Finish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNTA2NTE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-541506518", "createdAt": "2020-12-01T05:50:38Z", "commit": {"oid": "4a174eb7f85786783e9b9caca0d7201606b455fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MDozOVrOH8ZHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTo1MDozOVrOH8ZHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4ODEwMQ==", "bodyText": "@trask Please review the shading I've set up in this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533088101", "createdAt": "2020-12-01T05:50:39Z", "author": {"login": "anuraaga"}, "path": "build.gradle", "diffHunk": "@@ -509,6 +515,33 @@ configure(opentelemetryProjects) {\n         // Always run jmhReport after jmh task.\n         tasks.jmh.finalizedBy tasks.jmhReport\n     }\n+\n+    // We vendor in a shaded version of weak-lock-free into opentelemetry-context, which is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a174eb7f85786783e9b9caca0d7201606b455fb"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e1a718223e3d932298b8b378a36b03498c21913", "committedDate": "2020-12-01T06:00:19Z", "message": "Force GC more aggressively"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzY3NTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-542367548", "createdAt": "2020-12-01T22:58:53Z", "commit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjo1ODo1NFrOH9DR6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjo1ODo1NFrOH9DR6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODkyMw==", "bodyText": "This will leave data in the map as we never touch it again. Since things are weak we won't hold to span structures but we will keep the weak refs around until JVM shutdown.\nThis was a one reason I went with the NoopMap to avoid the issue to figure out where to place the closed checked :)\nprobably best to just put it in the existing if statement as the first check.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533778923", "createdAt": "2020-12-01T22:58:54Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -45,6 +46,9 @@ public boolean isStartRequired() {\n \n   @Override\n   public void onEnd(ReadableSpan rs) {\n+    if (closed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzY5NDQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-542369446", "createdAt": "2020-12-01T23:02:25Z", "commit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowMjoyNlrOH9DYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowMjoyNlrOH9DYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MDU1MA==", "bodyText": "How do I ensure that we have this library around when loading JFR extension? Expect that opentelemetry is loaded and reachable and pulls in this dependency?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533780550", "createdAt": "2020-12-01T23:02:26Z", "author": {"login": "sfriberg"}, "path": "sdk-extensions/jfr-events/build.gradle", "diffHunk": "@@ -8,7 +10,9 @@ ext.moduleName = 'io.opentelemetry.sdk.extension.jfr'\n dependencies {\n     implementation project(':opentelemetry-api'),\n             project(':opentelemetry-sdk')\n-    implementation libraries.guava\n+\n+    compileOnly libraries.weak_lock_free", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28ca9dfb0231f83d4be32bc9a1d6466845f4fd0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b28ca9dfb0231f83d4be32bc9a1d6466845f4fd0", "committedDate": "2020-12-02T04:28:39Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDkwMTcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-542490170", "createdAt": "2020-12-02T04:27:52Z", "commit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDoyNzo1MlrOH9J_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDoyODo0M1rOH9KAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4ODg1Ng==", "bodyText": "Thanks! Realized weak-lock-free was ending up in opentelemetry-context POM, changed so that doesn't happen.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533888856", "createdAt": "2020-12-02T04:27:52Z", "author": {"login": "anuraaga"}, "path": "build.gradle", "diffHunk": "@@ -509,6 +515,33 @@ configure(opentelemetryProjects) {\n         // Always run jmhReport after jmh task.\n         tasks.jmh.finalizedBy tasks.jmhReport\n     }\n+\n+    // We vendor in a shaded version of weak-lock-free into opentelemetry-context, which is a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4ODEwMQ=="}, "originalCommit": {"oid": "4a174eb7f85786783e9b9caca0d7201606b455fb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4ODk3OQ==", "bodyText": "Yeah this has the pattern where we vendor into opentelemetry-context, which is always pulled in as a dependency.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533888979", "createdAt": "2020-12-02T04:28:18Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/build.gradle", "diffHunk": "@@ -8,7 +10,9 @@ ext.moduleName = 'io.opentelemetry.sdk.extension.jfr'\n dependencies {\n     implementation project(':opentelemetry-api'),\n             project(':opentelemetry-sdk')\n-    implementation libraries.guava\n+\n+    compileOnly libraries.weak_lock_free", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MDU1MA=="}, "originalCommit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4OTA4Ng==", "bodyText": "Thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r533889086", "createdAt": "2020-12-02T04:28:43Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -45,6 +46,9 @@ public boolean isStartRequired() {\n \n   @Override\n   public void onEnd(ReadableSpan rs) {\n+    if (closed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODkyMw=="}, "originalCommit": {"oid": "0e1a718223e3d932298b8b378a36b03498c21913"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372c7f5b52ae379e7a260b3fbda02110f18343f4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/372c7f5b52ae379e7a260b3fbda02110f18343f4", "committedDate": "2020-12-02T04:30:37Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f7fb69b2de3396250cfd72b219c6be928fb63c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b9f7fb69b2de3396250cfd72b219c6be928fb63c", "committedDate": "2020-12-02T08:52:06Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into strict-context-storage-detectleaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cde8640592208073540764f09e8e1a390fdd322", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2cde8640592208073540764f09e8e1a390fdd322", "committedDate": "2020-12-02T09:06:36Z", "message": "Vendor code directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6592841e31c23c4cd1526c02c7847d2a0a5bfbf7", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6592841e31c23c4cd1526c02c7847d2a0a5bfbf7", "committedDate": "2020-12-02T09:09:14Z", "message": "Copy test too"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjkwMTc0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543290174", "createdAt": "2020-12-02T22:27:57Z", "commit": {"oid": "6592841e31c23c4cd1526c02c7847d2a0a5bfbf7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab7ce665ba52d265faab735a3e174a1746782a5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ab7ce665ba52d265faab735a3e174a1746782a5", "committedDate": "2020-12-02T23:53:37Z", "message": "Try waiting more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716b9819082232b4043e7404b4604191c85e67fb", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/716b9819082232b4043e7404b4604191c85e67fb", "committedDate": "2020-12-03T00:14:31Z", "message": "ep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c5fb2e17fa43ba450b2a7915050eae825ae7c2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24c5fb2e17fa43ba450b2a7915050eae825ae7c2", "committedDate": "2020-12-03T00:18:37Z", "message": "oops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzUzNTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543353521", "createdAt": "2020-12-03T00:42:18Z", "commit": {"oid": "24c5fb2e17fa43ba450b2a7915050eae825ae7c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo0MjoxOFrOH90MXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDo0MjoxOFrOH90MXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4MDMxOQ==", "bodyText": "with the code vendor'd in, do we still need this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534580319", "createdAt": "2020-12-03T00:42:18Z", "author": {"login": "jkwatson"}, "path": "build.gradle", "diffHunk": "@@ -328,6 +333,7 @@ configure(opentelemetryProjects) {\n                 prometheus_client_common: \"io.prometheus:simpleclient_common:${prometheusVersion}\",\n                 protobuf                : \"com.google.protobuf:protobuf-java\",\n                 protobuf_util           : \"com.google.protobuf:protobuf-java-util\",\n+                weak_lock_free          : \"com.blogspot.mydailyjava:weak-lock-free:${weakLockFreeVersion}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c5fb2e17fa43ba450b2a7915050eae825ae7c2"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be81cfc6b526cc8eff0c390d895019ec67684f3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9be81cfc6b526cc8eff0c390d895019ec67684f3", "committedDate": "2020-12-03T00:49:09Z", "message": "Remove from build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5a2f4cc273509de1a164854e2da4c00bc2f2abe2", "committedDate": "2020-12-03T00:52:53Z", "message": "Drift"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDA3MDA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543407008", "createdAt": "2020-12-03T03:04:05Z", "commit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzowNDowNVrOH93Y1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzowNDowNVrOH93Y1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMjY2MA==", "bodyText": "I ask you... Is \"expunction\" a word? really?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534632660", "createdAt": "2020-12-03T03:04:05Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/jfr-events/src/main/java/io/opentelemetry/sdk/extension/jfr/JfrSpanProcessor.java", "diffHunk": "@@ -26,11 +22,16 @@\n  */\n public class JfrSpanProcessor implements SpanProcessor {\n \n-  private volatile Map<SpanContext, SpanEvent> spanEvents =\n-      new MapMaker().concurrencyLevel(16).initialCapacity(128).weakKeys().makeMap();\n+  private final WeakConcurrentMap<SpanContext, SpanEvent> spanEvents =\n+      new WeakConcurrentMap.WithInlinedExpunction<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDA5MDgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543409082", "createdAt": "2020-12-03T03:10:02Z", "commit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMDowM1rOH93gZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMDowM1rOH93gZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNDU5OA==", "bodyText": "why not have this done in the StrictScope constructor, so it controls the full lifecycle, rather having it put in here, but removed internal to the StrictScope.close()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534634598", "createdAt": "2020-12-03T03:10:03Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -111,8 +116,9 @@ public Scope attach(Context context) {\n \n     stackTrace = Arrays.copyOfRange(stackTrace, from, stackTrace.length);\n     caller.setStackTrace(stackTrace);\n+    pendingScopes.put(scope, caller);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDEwMDMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543410031", "createdAt": "2020-12-03T03:12:49Z", "commit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMjo1MFrOH93kNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMjo1MFrOH93kNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTU3Mw==", "bodyText": "so, we're only throwing the first that we run across, rather than alert about all the possibilities?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534635573", "createdAt": "2020-12-03T03:12:50Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +138,28 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n+    pendingScopes.expungeStaleEntries();\n+    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n       // Sometimes unit test runners truncate the cause of the exception.\n       // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      AssertionError toThrow =\n-          new AssertionError(\n-              \"Thread [\" + caller.threadName + \"] opened a scope of \" + caller.context + \" here:\");\n-      toThrow.setStackTrace(caller.getStackTrace());\n-      throw toThrow;\n+      throw callerError(caller);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDEwMzE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-543410318", "createdAt": "2020-12-03T03:13:42Z", "commit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMzo0M1rOH93lHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxMzo0M1rOH93lHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNTgwNQ==", "bodyText": "this comment is duplicated down in callerError", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r534635805", "createdAt": "2020-12-03T03:13:43Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +138,28 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n+    pendingScopes.expungeStaleEntries();\n+    for (CallerStackTrace caller : pendingScopes.drainPendingCallers()) {\n       // Sometimes unit test runners truncate the cause of the exception.\n       // This flattens the exception as the caller of close() isn't important vs the one that leaked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2f4cc273509de1a164854e2da4c00bc2f2abe2"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d940e96115de376b86e7081f71198b2552f609", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32d940e96115de376b86e7081f71198b2552f609", "committedDate": "2020-12-03T05:55:52Z", "message": "Log on multiple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce77dce5473e19f2608cba49e92515904b59702b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce77dce5473e19f2608cba49e92515904b59702b", "committedDate": "2020-12-03T06:15:37Z", "message": "Cleaner ourselves."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08", "committedDate": "2020-12-03T06:28:40Z", "message": "EP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjYzNjc5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-544263679", "createdAt": "2020-12-03T18:37:37Z", "commit": {"oid": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozNzozOFrOH-rdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODozNzozOFrOH-rdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTg1OQ==", "bodyText": "we could skip doing this if there's only one, so you don't get the same one twice? Not sure if that's good or bad, but just a thought.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#discussion_r535485859", "createdAt": "2020-12-03T18:37:38Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -132,35 +137,34 @@ public Context current() {\n    */\n   // AssertionError to ensure test runners render the stack trace\n   public void ensureAllClosed() {\n-    List<CallerStackTrace> leakedCallers = new ArrayList<>();\n-    currentCallers.drainTo(leakedCallers);\n-    for (CallerStackTrace caller : leakedCallers) {\n-      // Sometimes unit test runners truncate the cause of the exception.\n-      // This flattens the exception as the caller of close() isn't important vs the one that leaked\n-      AssertionError toThrow =\n-          new AssertionError(\n-              \"Thread [\" + caller.threadName + \"] opened a scope of \" + caller.context + \" here:\");\n-      toThrow.setStackTrace(caller.getStackTrace());\n-      throw toThrow;\n+    pendingScopes.expungeStaleEntries();\n+    List<CallerStackTrace> leaked = pendingScopes.drainPendingCallers();\n+    if (!leaked.isEmpty()) {\n+      if (leaked.size() > 1) {\n+        logger.log(Level.SEVERE, \"Multiple scopes leaked - first will be thrown as an error.\");\n+      }\n+      for (CallerStackTrace caller : leaked) {\n+        logger.log(Level.SEVERE, \"Scope leaked\", callerError(caller));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjY0Nzk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2164#pullrequestreview-544264794", "createdAt": "2020-12-03T18:39:07Z", "commit": {"oid": "4586a7c0caf5ffabcbab39b9f48c3b4e7c7f7f08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabc40362d1457f1eaf27f4ee3ebfa57390555a0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aabc40362d1457f1eaf27f4ee3ebfa57390555a0", "committedDate": "2020-12-04T03:50:03Z", "message": "Move into if"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce37ed20a5731c6f51af09ed7594dc17b90dcd67", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce37ed20a5731c6f51af09ed7594dc17b90dcd67", "committedDate": "2020-12-04T03:53:10Z", "message": "Revert accidental"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3826, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}