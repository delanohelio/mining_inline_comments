{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDM3MjA3", "number": 2142, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0MjozMVrOE-8rkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowMToxM1rOE_D-Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDQxMzYwOnYy", "diffSide": "RIGHT", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNDo0MjozMVrOH8X-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozNzo1NVrOH8hyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTM0OA==", "bodyText": "Can you rebase? I've removed the guava dependency from this module. You can use getOrDefault and just isEmpty instead I believe.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2142#discussion_r533069348", "createdAt": "2020-12-01T04:42:31Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.aws.resource;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701621e55240fb1ef767d2e1a82c227a182b68a9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzMDExNg==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2142#discussion_r533230116", "createdAt": "2020-12-01T09:37:55Z", "author": {"login": "mateuszrzeszutek"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.aws.resource;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTM0OA=="}, "originalCommit": {"oid": "701621e55240fb1ef767d2e1a82c227a182b68a9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTYwNzc1OnYy", "diffSide": "RIGHT", "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowMToxM1rOH8jlSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyMzozN1rOH8lMRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1OTU5NQ==", "bodyText": "Shouldn't we check empty for this too? It's not clear why we check for the others only but not this one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2142#discussion_r533259595", "createdAt": "2020-12-01T10:01:13Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.aws.resource;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.util.Map;\n+\n+/** A {@link ResourceProvider} which provides information about the AWS Lambda function. */\n+public final class LambdaResource extends ResourceProvider {\n+  private final Map<String, String> environmentVariables;\n+\n+  public LambdaResource() {\n+    this(System.getenv());\n+  }\n+\n+  // Visible for testing\n+  LambdaResource(Map<String, String> environmentVariables) {\n+    this.environmentVariables = environmentVariables;\n+  }\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    if (!isLambda()) {\n+      return Attributes.empty();\n+    }\n+    String region = environmentVariables.getOrDefault(\"AWS_REGION\", \"\");\n+    String functionName = environmentVariables.get(\"AWS_LAMBDA_FUNCTION_NAME\");\n+    String functionVersion = environmentVariables.getOrDefault(\"AWS_LAMBDA_FUNCTION_VERSION\", \"\");\n+\n+    AttributesBuilder builder =\n+        Attributes.builder()\n+            .put(SemanticAttributes.CLOUD_PROVIDER, SemanticAttributes.CloudProviderValues.AWS)\n+            .put(SemanticAttributes.FAAS_NAME, functionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f6362f27defbd821322c27cfdb6678a32562bd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3Nzc5Ng==", "bodyText": "This one cannot be empty, it's being checked in the isLambda() function.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2142#discussion_r533277796", "createdAt": "2020-12-01T10:16:48Z", "author": {"login": "mateuszrzeszutek"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.aws.resource;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.util.Map;\n+\n+/** A {@link ResourceProvider} which provides information about the AWS Lambda function. */\n+public final class LambdaResource extends ResourceProvider {\n+  private final Map<String, String> environmentVariables;\n+\n+  public LambdaResource() {\n+    this(System.getenv());\n+  }\n+\n+  // Visible for testing\n+  LambdaResource(Map<String, String> environmentVariables) {\n+    this.environmentVariables = environmentVariables;\n+  }\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    if (!isLambda()) {\n+      return Attributes.empty();\n+    }\n+    String region = environmentVariables.getOrDefault(\"AWS_REGION\", \"\");\n+    String functionName = environmentVariables.get(\"AWS_LAMBDA_FUNCTION_NAME\");\n+    String functionVersion = environmentVariables.getOrDefault(\"AWS_LAMBDA_FUNCTION_VERSION\", \"\");\n+\n+    AttributesBuilder builder =\n+        Attributes.builder()\n+            .put(SemanticAttributes.CLOUD_PROVIDER, SemanticAttributes.CloudProviderValues.AWS)\n+            .put(SemanticAttributes.FAAS_NAME, functionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1OTU5NQ=="}, "originalCommit": {"oid": "47f6362f27defbd821322c27cfdb6678a32562bd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NTk1OQ==", "bodyText": "I refactored it a bit so that all env vars are retrieved in exactly the same way.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2142#discussion_r533285959", "createdAt": "2020-12-01T10:23:37Z", "author": {"login": "mateuszrzeszutek"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/LambdaResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.extension.aws.resource;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.util.Map;\n+\n+/** A {@link ResourceProvider} which provides information about the AWS Lambda function. */\n+public final class LambdaResource extends ResourceProvider {\n+  private final Map<String, String> environmentVariables;\n+\n+  public LambdaResource() {\n+    this(System.getenv());\n+  }\n+\n+  // Visible for testing\n+  LambdaResource(Map<String, String> environmentVariables) {\n+    this.environmentVariables = environmentVariables;\n+  }\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    if (!isLambda()) {\n+      return Attributes.empty();\n+    }\n+    String region = environmentVariables.getOrDefault(\"AWS_REGION\", \"\");\n+    String functionName = environmentVariables.get(\"AWS_LAMBDA_FUNCTION_NAME\");\n+    String functionVersion = environmentVariables.getOrDefault(\"AWS_LAMBDA_FUNCTION_VERSION\", \"\");\n+\n+    AttributesBuilder builder =\n+        Attributes.builder()\n+            .put(SemanticAttributes.CLOUD_PROVIDER, SemanticAttributes.CloudProviderValues.AWS)\n+            .put(SemanticAttributes.FAAS_NAME, functionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1OTU5NQ=="}, "originalCommit": {"oid": "47f6362f27defbd821322c27cfdb6678a32562bd"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1782, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}