{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjU1MTI3", "number": 1449, "title": "Refactor decision to sampling result", "bodyText": "Fixes #962", "createdAt": "2020-07-22T17:27:12Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1449", "merged": true, "mergeCommit": {"oid": "810379f88be0c581d428d4d2a179dbe75a935a89"}, "closed": true, "closedAt": "2020-07-22T22:27:14Z", "author": {"login": "ptravers"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3eO5-gH2gAyNDU1MjU1MTI3OjAwOTQzN2UxOGM4YTUzZmQxMmJhZTY5MWUyMzQxZTQwOGUzNDI1N2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3fF2lAFqTQ1MzU3NDAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "009437e18c8a53fd12bae691e2341e408e34257b", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/009437e18c8a53fd12bae691e2341e408e34257b", "committedDate": "2020-07-22T17:25:21Z", "message": "Refactor decision to sampling result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26ada2825cedd40624e9214be3e6fadc22f753c5", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/26ada2825cedd40624e9214be3e6fadc22f753c5", "committedDate": "2020-07-22T17:30:05Z", "message": "Fix bad refactor samplingResult => decision"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4028b11d4977c6cc6a61b306fa5122d1c0ec6d1f", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4028b11d4977c6cc6a61b306fa5122d1c0ec6d1f", "committedDate": "2020-07-22T17:30:56Z", "message": "Fix decision not sampling result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4c4a313eaecd948fef1fbb1db1036870c74663", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0d4c4a313eaecd948fef1fbb1db1036870c74663", "committedDate": "2020-07-22T17:31:48Z", "message": "Fix comments with divergent explanations of same entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193e6bfacd68490a7ebdb1c1d5db4f384b4d1444", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/193e6bfacd68490a7ebdb1c1d5db4f384b4d1444", "committedDate": "2020-07-22T17:38:00Z", "message": "Fix make comments clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3382504e857d9cf367876fa20948e4f1ea486966", "author": {"user": {"login": "ptravers", "name": "Peter Travers"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3382504e857d9cf367876fa20948e4f1ea486966", "committedDate": "2020-07-22T17:45:33Z", "message": "Add links to SamplingResult"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTc0MDMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1449#pullrequestreview-453574031", "createdAt": "2020-07-22T18:23:44Z", "commit": {"oid": "3382504e857d9cf367876fa20948e4f1ea486966"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyMzo0NFrOG1uzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyNDoyMFrOG1u07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NDYwMA==", "bodyText": "Should we deprecate this? Maybe a followup PR, for the moment just create an issue to not forget about?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1449#discussion_r458994600", "createdAt": "2020-07-22T18:23:44Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -259,39 +279,44 @@ public final String getDescription() {\n \n   @Immutable\n   @AutoValue\n-  abstract static class DecisionImpl implements Decision {\n+  abstract static class SamplingResultImpl implements SamplingResult {\n     /**\n-     * Creates sampling decision with probability attribute.\n+     * Creates sampling result with probability attribute.\n      *\n-     * @param decision sampling decision\n-     * @param probability the probability that was used for the decision.\n+     * @param decision the decision on sampling and recording\n+     * @param probability the probability that was used for the samplingResult.\n      */\n-    static Decision createWithProbability(boolean decision, double probability) {\n-      return new AutoValue_Samplers_DecisionImpl(\n+    static SamplingResult createWithProbability(Decision decision, double probability) {\n+      return new AutoValue_Samplers_SamplingResultImpl(\n           decision, Attributes.of(SAMPLING_PROBABILITY.key(), doubleAttributeValue(probability)));\n     }\n \n     /**\n-     * Creates sampling decision without attributes.\n+     * Creates sampling result without attributes.\n      *\n-     * @param decision sampling decision\n+     * @param decision sampling samplingResult\n      */\n-    static Decision createWithoutAttributes(boolean decision) {\n-      return new AutoValue_Samplers_DecisionImpl(decision, Attributes.empty());\n+    static SamplingResult createWithoutAttributes(Decision decision) {\n+      return new AutoValue_Samplers_SamplingResultImpl(decision, Attributes.empty());\n     }\n \n     /**\n-     * Creates sampling decision with the given attributes.\n+     * Creates sampling result with the given attributes.\n      *\n-     * @param decision sampling decision\n+     * @param decision sampling decisionq\n      * @param attributes attributes. Will not be copied, so do not modify afterwards.\n      */\n-    static Decision create(boolean decision, Attributes attributes) {\n-      return new AutoValue_Samplers_DecisionImpl(decision, attributes);\n+    static SamplingResult create(Decision decision, Attributes attributes) {\n+      return new AutoValue_Samplers_SamplingResultImpl(decision, attributes);\n     }\n \n     @Override\n-    public abstract boolean isSampled();\n+    public abstract Decision getDecision();\n+\n+    @Override\n+    public boolean isSampled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3382504e857d9cf367876fa20948e4f1ea486966"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NDkyNg==", "bodyText": "Can we remove this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1449#discussion_r458994926", "createdAt": "2020-07-22T18:24:20Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "diffHunk": "@@ -68,27 +68,36 @@ Decision shouldSample(\n    */\n   String getDescription();\n \n+  /** A decision on whether a span should be recorded, recorded and sampled or not recorded. */\n+  enum Decision {\n+    NOT_RECORD,\n+    RECORD,\n+    RECORD_AND_SAMPLED,\n+  }\n+\n   /**\n-   * Sampling decision returned by {@link Sampler#shouldSample(SpanContext, TraceId, String, Kind,\n+   * Sampling result returned by {@link Sampler#shouldSample(SpanContext, TraceId, String, Kind,\n    * ReadableAttributes, List)}.\n    *\n    * @since 0.1.0\n    */\n-  interface Decision {\n+  interface SamplingResult {\n \n     /**\n-     * Return sampling decision whether span should be sampled or not.\n+     * Return decision on whether a span should be recorded, recorded and sampled or not recorded.\n      *\n-     * @return sampling decision.\n-     * @since 0.1.0\n+     * @return sampling result.\n+     * @since 0.7.0\n      */\n+    Decision getDecision();\n+\n     boolean isSampled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3382504e857d9cf367876fa20948e4f1ea486966"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}