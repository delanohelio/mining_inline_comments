{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTMwNjA2", "number": 1403, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMzo1N1rOENN-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMzo1N1rOENN-sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjk1OTg3OnYy", "diffSide": "RIGHT", "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemorySpanExporterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMzo1N1rOGvxqWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1ODowNVrOGwEBdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0OTkxNA==", "bodyText": "Is this style change (use an import instead of the full path for a class) imposed by this errorprone update?\nPersonally, when a class is used only once in a file (such as SpanId here), I see no problem using its full path ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1403#discussion_r452749914", "createdAt": "2020-07-10T10:03:57Z", "author": {"login": "carlosalberto"}, "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemorySpanExporterTest.java", "diffHunk": "@@ -103,12 +107,12 @@ public void export_ReturnCode() {\n   static SpanData makeBasicSpan() {\n     return TestSpanData.newBuilder()\n         .setHasEnded(true)\n-        .setTraceId(io.opentelemetry.trace.TraceId.getInvalid())\n-        .setSpanId(io.opentelemetry.trace.SpanId.getInvalid())\n+        .setTraceId(TraceId.getInvalid())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417835d72183696fbf9583829ad4c1a5ecdd35b0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5ODMwMA==", "bodyText": "yep..and this is one of the errorprone warnings that I actually agree with. I don't think the \"never import inner classes\" is all that great.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1403#discussion_r452898300", "createdAt": "2020-07-10T14:59:35Z", "author": {"login": "jkwatson"}, "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemorySpanExporterTest.java", "diffHunk": "@@ -103,12 +107,12 @@ public void export_ReturnCode() {\n   static SpanData makeBasicSpan() {\n     return TestSpanData.newBuilder()\n         .setHasEnded(true)\n-        .setTraceId(io.opentelemetry.trace.TraceId.getInvalid())\n-        .setSpanId(io.opentelemetry.trace.SpanId.getInvalid())\n+        .setTraceId(TraceId.getInvalid())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0OTkxNA=="}, "originalCommit": {"oid": "417835d72183696fbf9583829ad4c1a5ecdd35b0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc0Mw==", "bodyText": "also, sounds like you need to join the real IDE generation, @carlosalberto .  ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1403#discussion_r453050743", "createdAt": "2020-07-10T19:58:05Z", "author": {"login": "jkwatson"}, "path": "exporters/inmemory/src/test/java/io/opentelemetry/exporters/inmemory/InMemorySpanExporterTest.java", "diffHunk": "@@ -103,12 +107,12 @@ public void export_ReturnCode() {\n   static SpanData makeBasicSpan() {\n     return TestSpanData.newBuilder()\n         .setHasEnded(true)\n-        .setTraceId(io.opentelemetry.trace.TraceId.getInvalid())\n-        .setSpanId(io.opentelemetry.trace.SpanId.getInvalid())\n+        .setTraceId(TraceId.getInvalid())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0OTkxNA=="}, "originalCommit": {"oid": "417835d72183696fbf9583829ad4c1a5ecdd35b0"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1473, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}