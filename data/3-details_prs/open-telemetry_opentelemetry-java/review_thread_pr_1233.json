{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTk3MTE2", "number": 1233, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo1MToyM1rOD9dDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMDoyNFrOD-Rh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzY1NjkyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo1MToyM1rOGW9UQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0MTo0NlrOGYPPEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyNjQ2NQ==", "bodyText": "this javadoc needs to be corrected.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r426726465", "createdAt": "2020-05-18T15:51:23Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -68,7 +80,17 @@ public static Sampler alwaysOn() {\n    * @since 0.1.0\n    */\n   public static Sampler alwaysOff() {\n-    return ALWAYS_OFF;\n+    return AlwaysOffSampler.INSTANCE;\n+  }\n+\n+  /**\n+   * Returns a {@link Sampler} that always makes a \"no\" decision on {@link Span} sampling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2ODYyNw==", "bodyText": "Obsolete, decided to split into just the cleanup for the moment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428068627", "createdAt": "2020-05-20T14:41:46Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -68,7 +80,17 @@ public static Sampler alwaysOn() {\n    * @since 0.1.0\n    */\n   public static Sampler alwaysOff() {\n-    return ALWAYS_OFF;\n+    return AlwaysOffSampler.INSTANCE;\n+  }\n+\n+  /**\n+   * Returns a {@link Sampler} that always makes a \"no\" decision on {@link Span} sampling.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyNjQ2NQ=="}, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzY2OTA0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo1Mzo1NVrOGW9bVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0NjoxM1rOGYPc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyODI3Nw==", "bodyText": "Now that this is used for something other than the always-on sampler, I think we should rename this to just SIMPLE_ON_DECISION or maybe even just ON_DECISION", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r426728277", "createdAt": "2020-05-18T15:53:55Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -43,10 +43,22 @@\n @Immutable\n public final class Samplers {\n \n-  private static final Sampler ALWAYS_ON = new AlwaysOnSampler();\n-  private static final Sampler ALWAYS_OFF = new AlwaysOffSampler();\n-  private static final Decision ALWAYS_ON_DECISION = new SimpleDecision(/* decision= */ true);\n-  private static final Decision ALWAYS_OFF_DECISION = new SimpleDecision(/* decision= */ false);\n+  private static final Decision ALWAYS_ON_DECISION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3MTYyOA==", "bodyText": "Related: #1256. Maybe EMPTY_(NOT_)SAMPLED_DECISION?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r427871628", "createdAt": "2020-05-20T09:31:12Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -43,10 +43,22 @@\n @Immutable\n public final class Samplers {\n \n-  private static final Sampler ALWAYS_ON = new AlwaysOnSampler();\n-  private static final Sampler ALWAYS_OFF = new AlwaysOffSampler();\n-  private static final Decision ALWAYS_ON_DECISION = new SimpleDecision(/* decision= */ true);\n-  private static final Decision ALWAYS_OFF_DECISION = new SimpleDecision(/* decision= */ false);\n+  private static final Decision ALWAYS_ON_DECISION =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyODI3Nw=="}, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MjE1OQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428072159", "createdAt": "2020-05-20T14:46:13Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -43,10 +43,22 @@\n @Immutable\n public final class Samplers {\n \n-  private static final Sampler ALWAYS_ON = new AlwaysOnSampler();\n-  private static final Sampler ALWAYS_OFF = new AlwaysOffSampler();\n-  private static final Decision ALWAYS_ON_DECISION = new SimpleDecision(/* decision= */ true);\n-  private static final Decision ALWAYS_OFF_DECISION = new SimpleDecision(/* decision= */ false);\n+  private static final Decision ALWAYS_ON_DECISION =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyODI3Nw=="}, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzY3NTUxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo1NToyNlrOGW9fZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0MjoxOFrOGYPQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyOTMxOA==", "bodyText": "javadoc on this class isn't correct any more.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r426729318", "createdAt": "2020-05-18T15:55:26Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -223,57 +261,27 @@ public final String getDescription() {\n \n   /** Sampling decision without attributes. */\n   @Immutable\n-  private static final class SimpleDecision implements Decision {\n-\n-    private final boolean decision;\n-\n+  @AutoValue\n+  abstract static class DecisionImpl implements Decision {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2OTA2OA==", "bodyText": "Done. Not necessary to have a javadoc for this class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428069068", "createdAt": "2020-05-20T14:42:18Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -223,57 +261,27 @@ public final String getDescription() {\n \n   /** Sampling decision without attributes. */\n   @Immutable\n-  private static final class SimpleDecision implements Decision {\n-\n-    private final boolean decision;\n-\n+  @AutoValue\n+  abstract static class DecisionImpl implements Decision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyOTMxOA=="}, "originalCommit": {"oid": "c158f5d9a9aaca19d4ff0f9b26b17cbb80e4f817"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjI1NTIwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMDoyNFrOGYRitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1NTozN1rOGYVKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA==", "bodyText": "Why change these to enums? This is a non-idiomatic usage of an enum.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428106420", "createdAt": "2020-05-20T15:30:24Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDk2NQ==", "bodyText": "It is a better solution for singleton classes, read https://dzone.com/articles/java-singletons-using-enum", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428114965", "createdAt": "2020-05-20T15:41:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExOTE3MQ==", "bodyText": "I'm not sure one graduate student's opinion on DZone should sway us away from more idiomatic solutions. :)\nI don't about the Serialization issue... if anyone is using default Java serialization these days, they are asking for all sorts of troubles.  The reflection issue doesn't matter at all for this case. If someone wanted to create a million sampler instances, they would only be hurting themselves, not the correctness of the code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428119171", "createdAt": "2020-05-20T15:47:43Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTk4OA==", "bodyText": "Also, it's worth reading the comments on that article. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428121988", "createdAt": "2020-05-20T15:51:46Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjc4MA==", "bodyText": "That was just an example, there are a lot more articles about this problem and they propose this solution as being using enums.\nAs for being idiomatic I think it is (Joshua Bloch says this in Effective Java):\nhttps://www.informit.com/articles/article.aspx?p=1216151&seqNum=3\n\nThis approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, a single-element enum type is the best way to implement a singleton.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428136780", "createdAt": "2020-05-20T16:13:07Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MDU4OQ==", "bodyText": "I also vow to not use enums, at least for now. Honestly I don't think it's truly idiomatic, even if it's relatively common (which I'm not happy about, as honestly it feels like a hack around the singleton pattern - and this is probably the second time I've seen it in my life ;) ).\nLet's consider changing this in another PR (as this might apply to HttpTraceContext, B3Propagator, etc). If we agree, we go and apply this pattern everywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428140589", "createdAt": "2020-05-20T16:18:54Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MTk1Mw==", "bodyText": "@carlosalberto this is not a public class. So I don't see any problem. We also use this pattern already, and as I said I would trust Joshua Bloch more than almost any other java developer :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428141953", "createdAt": "2020-05-20T16:20:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MzQ5NQ==", "bodyText": "this is not a public class\n\nFair enough. As long as we do this only for private classes I'm cool with it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428143495", "createdAt": "2020-05-20T16:23:18Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1MjIyOA==", "bodyText": "@carlosalberto also publicly I would not expose a variable for a singleton, instead I would go with a static method to retrieve the singleton. That allows us to actually change to not be a singleton if we want, or do other expensive operations (if we want in the future) that should not be part of the static initialization. In other words it gives us more flexibility in the future.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428152228", "createdAt": "2020-05-20T16:35:54Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NDg5NQ==", "bodyText": "I had completely forgotten that Josh has recommended this approach (probably because I've never actually seen it used in projects I've worked on). Let's go with it, especially as it's a private usage.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428164895", "createdAt": "2020-05-20T16:54:25Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NTY0MA==", "bodyText": "@jkwatson please press the magic button to approve this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1233#discussion_r428165640", "createdAt": "2020-05-20T16:55:37Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -84,8 +96,8 @@ public static Sampler probability(double probability) {\n   }\n \n   @Immutable\n-  private static final class AlwaysOnSampler implements Sampler {\n-    AlwaysOnSampler() {}\n+  private enum AlwaysOnSampler implements Sampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNjQyMA=="}, "originalCommit": {"oid": "5322621835639f7c3e4e5badbdbc24eb2a6f6066"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 683, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}