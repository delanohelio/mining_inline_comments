{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzE0MDYx", "number": 1330, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNjowMFrOEEd_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNDoxMlrOEEtA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTIxMDUyOnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/TestUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNjowMFrOGiHJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzoyMDowOFrOGiJaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTc4MQ==", "bodyText": "What do y'all think about adding this method to Attributes itself? It's not ultra efficient, but that could be documented as such.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438421781", "createdAt": "2020-06-10T21:36:00Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/TestUtils.java", "diffHunk": "@@ -124,4 +125,32 @@ public static SpanData makeBasicSpan() {\n       tracerSdkFactory.updateActiveTraceConfig(originalConfig);\n     }\n   }\n+\n+  /** Find an AttributeValue by the key. */\n+  public static AttributeValue findByKey(Attributes attributes, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6bf1177c84fa5eec6a832c53601e018498b1df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNDQyOQ==", "bodyText": "I guess we can do it with a binary search, since the keys are currently sorted, and that should be pretty good.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438424429", "createdAt": "2020-06-10T21:41:44Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/TestUtils.java", "diffHunk": "@@ -124,4 +125,32 @@ public static SpanData makeBasicSpan() {\n       tracerSdkFactory.updateActiveTraceConfig(originalConfig);\n     }\n   }\n+\n+  /** Find an AttributeValue by the key. */\n+  public static AttributeValue findByKey(Attributes attributes, String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTc4MQ=="}, "originalCommit": {"oid": "3c6bf1177c84fa5eec6a832c53601e018498b1df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1ODg4Ng==", "bodyText": "I decided to add it, and keep it a simple linear search for now. We can revert if everyone hates it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438458886", "createdAt": "2020-06-10T23:20:08Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/TestUtils.java", "diffHunk": "@@ -124,4 +125,32 @@ public static SpanData makeBasicSpan() {\n       tracerSdkFactory.updateActiveTraceConfig(originalConfig);\n     }\n   }\n+\n+  /** Find an AttributeValue by the key. */\n+  public static AttributeValue findByKey(Attributes attributes, String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTc4MQ=="}, "originalCommit": {"oid": "3c6bf1177c84fa5eec6a832c53601e018498b1df"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1MDgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMTozMFrOGiKekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjozMDoyOFrOGiMcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjQzNQ==", "bodyText": "+1 to linear search, these should always be small enough where it's faster and opens up optimizations like deferring / not sorting.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438476435", "createdAt": "2020-06-11T00:21:30Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -56,6 +57,22 @@ public void forEach(KeyValueConsumer<V> consumer) {\n     }\n   }\n \n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently implemented via a linear search, so O(n) performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwODY2Mg==", "bodyText": "I actually implemented a binary search, then backed it out because it seemed like total overkill since we're not expecting many attributes. Good exercise to remind myself of some undergrad CS stuff, though (which I never took, since I don't have a CS degree!).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438508662", "createdAt": "2020-06-11T02:30:28Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -56,6 +57,22 @@ public void forEach(KeyValueConsumer<V> consumer) {\n     }\n   }\n \n+  /**\n+   * Returns the value of the given key, or null if the key does not exist.\n+   *\n+   * <p>Warning: currently implemented via a linear search, so O(n) performance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjQzNQ=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1Mjc3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjozMVrOGiKfrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMzo0ODowNFrOGjVhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg==", "bodyText": "For Attributes, having getString etc would make these sort of unit tests (thinking user code unit tests less worried about these speifically) nicer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438476716", "createdAt": "2020-06-11T00:22:31Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwNjYyNA==", "bodyText": "Not a bad idea. What behavior would you expect if you were asking for a non-string attribute value?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438506624", "createdAt": "2020-06-11T02:22:01Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwODA2Mg==", "bodyText": "I've seen similar APIs return null when it's a different type, it seems fine to me.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438508062", "createdAt": "2020-06-11T02:27:54Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMTgxNw==", "bodyText": "Right now, the corresponding methods on AttributeValue throw an UnsupportedOperationException. I honestly don't know what's the better approach.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438931817", "createdAt": "2020-06-11T16:54:27Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQyMDM5NQ==", "bodyText": "Observe this is not an API intended to be used by end users, but by 'us', so I'm not so sure the sugar is truly needed.\nIn any case, if this is something still required, I'd suggest filling an issue and discuss the change there, so we can go ahead and merge this PR soon ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439420395", "createdAt": "2020-06-12T13:32:40Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNTA4MQ==", "bodyText": "fair enough, @carlosalberto . I don't think it's needed right now, although it could make exporters easier to write, possibly.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439625081", "createdAt": "2020-06-12T20:20:56Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MTE3OQ==", "bodyText": "Yeah, we shouldn't do this now; and only add it if it is really needed. Resolving this conversation for now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439651179", "createdAt": "2020-06-12T21:33:31Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwNTg3NQ==", "bodyText": "Ok with addressing later. Don't quite understand this being not an end-user API since it would be used to create Resource too?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439705875", "createdAt": "2020-06-13T03:48:04Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/common/AttributesTest.java", "diffHunk": "@@ -149,4 +149,41 @@ public void builder_arrayTypes() {\n                 \"double\", arrayAttributeValue(33.44, -44.33),\n                 \"boolean\", arrayAttributeValue(false, true)));\n   }\n+\n+  @Test\n+  public void get_Null() {\n+    assertThat(Attributes.empty().get(\"foo\")).isNull();\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"foo\")).isNull();\n+  }\n+\n+  @Test\n+  public void get() {\n+    assertThat(Attributes.of(\"key\", stringAttributeValue(\"value\")).get(\"key\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcxNg=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzY3Mjk0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoxNDoxMlrOGifWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNDoxMlrOGjHxgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA==", "bodyText": "Looking at this I see a lot of allocations happening here. Do you have a plan to change AttributeMap to implement the Attributes so we don't reconstruct the entire map when converting to SpanData?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438818488", "createdAt": "2020-06-11T14:14:12Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1NzgwOQ==", "bodyText": "I would definitely like to tackle this next. So far, I'm a bit stumped on how to approach it, since the AttributeMap is extremely mutable, and Attributes are inherently immutable. Do you have any ideas of how to tackle this one?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438857809", "createdAt": "2020-06-11T15:10:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjE3Mw==", "bodyText": "AttributeMap becomes immutable after end event so we can reuse that object", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438972173", "createdAt": "2020-06-11T17:57:56Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MDQ5NA==", "bodyText": "ok, I've been noodling on this a bit.\nIf we made an exportable-attributes interface (no idea what the name of this could be), then both our existing Attributes abstract class and the AttributesMap class could both implement that interface. Then, SpanData would expose this interface, rather than the concrete Attributes API class. Is this the sort of thing you're also thinking?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r438990494", "createdAt": "2020-06-11T18:32:10Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMjAyOA==", "bodyText": "Naming wise, here is my suggestion:\n\nRename the current Attributes class to ImmutableAttributes, keeping the implementation and the static creation methods there.\nCreate a new interface called Attributes which will be used as the API interface and for export as well.\nMake the AttributesMap implement the Attributes interface\nDo as you suggest and pass in the AttributeMap directly to the SpanWrapper after the span has ended.\n\nDoes this sound right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439032028", "createdAt": "2020-06-11T19:53:46Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwNDk0NQ==", "bodyText": "Note, I tried this out in a branch, and for the API it ends up feeling parallel to the Map/ImmutableMap APIs :  Attributes/ImmutableAttributes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439104945", "createdAt": "2020-06-11T22:26:40Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQyMjIyMA==", "bodyText": "A small question: will ImmutableAttributes implement Attributes as well?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439422220", "createdAt": "2020-06-12T13:36:14Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MDcwNQ==", "bodyText": "yes, ImmutableAttributes and AttributesMap will both implement the Attributes interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1330#discussion_r439480705", "createdAt": "2020-06-12T15:14:12Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -516,13 +515,15 @@ int getTotalRecordedLinks() {\n   }\n \n   @GuardedBy(\"lock\")\n-  private Map<String, AttributeValue> getImmutableAttributes() {\n+  private Attributes getImmutableAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxODQ4OA=="}, "originalCommit": {"oid": "471cd7086f3ad5a38545cf68a20faa8a3dddb172"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 787, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}