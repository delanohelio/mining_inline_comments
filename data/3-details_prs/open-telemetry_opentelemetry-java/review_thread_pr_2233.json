{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Nzg2OTk4", "number": 2233, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1ODowN1rOFCrCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1ODowN1rOFCrCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ2NjUzOnYy", "diffSide": "RIGHT", "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1ODowN1rOIB9Q3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozMjozN1rOIFZHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMzIzMQ==", "bodyText": "This is a big improvement. I think we need to compare with removing the getGlobalTracer type methods in favor of OpenTelemetry.get().getTracer() or OpenTelemetry.getGlobal().getTracer() or getGlobalOpentelemetry().getTracer() (static import). I think they're all fine, latter might lead to more testable user code by reducing the number of static methods involved.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2233#discussion_r538923231", "createdAt": "2020-12-09T00:58:07Z", "author": {"login": "anuraaga"}, "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.metrics.Meter;\n+import io.opentelemetry.api.metrics.MeterProvider;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.api.trace.TracerProvider;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.spi.OpenTelemetryFactory;\n+import io.opentelemetry.spi.metrics.MeterProviderFactory;\n+import io.opentelemetry.spi.trace.TracerProviderFactory;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A global singleton for the entrypoint to telemetry functionality for tracing, metrics and\n+ * baggage.\n+ *\n+ * <p>The global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any\n+ * {@link OpenTelemetryFactory}, {@link TracerProviderFactory} or {@link MeterProviderFactory} found\n+ * on the classpath, or otherwise will be default, with no-op behavior.\n+ *\n+ * <p>If using the OpenTelemetry SDK, you may want to instantiate the {@link OpenTelemetry} to\n+ * provide configuration, for example of {@code Resource} or {@code Sampler}. See {@code\n+ * OpenTelemetrySdk} and {@code OpenTelemetrySdk.builder} for information on how to construct the\n+ * SDK {@link OpenTelemetry}.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProvider\n+ * @see ContextPropagators\n+ */\n+public final class GlobalOpenTelemetry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a878f7d200b396572a931a34c8428a23e2b9b6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNDY5OA==", "bodyText": "I would still not have the \"global\" functionality on the interface OpenTelemetry. Having this separation is a win in my opinion. Not sure I understand what comparison you are asking me to do.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2233#discussion_r538924698", "createdAt": "2020-12-09T01:01:57Z", "author": {"login": "bogdandrutu"}, "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.metrics.Meter;\n+import io.opentelemetry.api.metrics.MeterProvider;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.api.trace.TracerProvider;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.spi.OpenTelemetryFactory;\n+import io.opentelemetry.spi.metrics.MeterProviderFactory;\n+import io.opentelemetry.spi.trace.TracerProviderFactory;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A global singleton for the entrypoint to telemetry functionality for tracing, metrics and\n+ * baggage.\n+ *\n+ * <p>The global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any\n+ * {@link OpenTelemetryFactory}, {@link TracerProviderFactory} or {@link MeterProviderFactory} found\n+ * on the classpath, or otherwise will be default, with no-op behavior.\n+ *\n+ * <p>If using the OpenTelemetry SDK, you may want to instantiate the {@link OpenTelemetry} to\n+ * provide configuration, for example of {@code Resource} or {@code Sampler}. See {@code\n+ * OpenTelemetrySdk} and {@code OpenTelemetrySdk.builder} for information on how to construct the\n+ * SDK {@link OpenTelemetry}.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProvider\n+ * @see ContextPropagators\n+ */\n+public final class GlobalOpenTelemetry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMzIzMQ=="}, "originalCommit": {"oid": "52a878f7d200b396572a931a34c8428a23e2b9b6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNTMzNg==", "bodyText": "@anuraaga any further thoughts at this point? I'm inclined to this this PR the \ud83d\udc4d , but want to make sure your concerns are considered.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2233#discussion_r542525336", "createdAt": "2020-12-14T16:32:37Z", "author": {"login": "jkwatson"}, "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.opentelemetry.api.metrics.Meter;\n+import io.opentelemetry.api.metrics.MeterProvider;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.api.trace.TracerProvider;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.spi.OpenTelemetryFactory;\n+import io.opentelemetry.spi.metrics.MeterProviderFactory;\n+import io.opentelemetry.spi.trace.TracerProviderFactory;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A global singleton for the entrypoint to telemetry functionality for tracing, metrics and\n+ * baggage.\n+ *\n+ * <p>The global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any\n+ * {@link OpenTelemetryFactory}, {@link TracerProviderFactory} or {@link MeterProviderFactory} found\n+ * on the classpath, or otherwise will be default, with no-op behavior.\n+ *\n+ * <p>If using the OpenTelemetry SDK, you may want to instantiate the {@link OpenTelemetry} to\n+ * provide configuration, for example of {@code Resource} or {@code Sampler}. See {@code\n+ * OpenTelemetrySdk} and {@code OpenTelemetrySdk.builder} for information on how to construct the\n+ * SDK {@link OpenTelemetry}.\n+ *\n+ * @see TracerProvider\n+ * @see MeterProvider\n+ * @see ContextPropagators\n+ */\n+public final class GlobalOpenTelemetry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMzIzMQ=="}, "originalCommit": {"oid": "52a878f7d200b396572a931a34c8428a23e2b9b6"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1662, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}