{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjkwODI0", "number": 1227, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjozODoyNlrOD88Pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODowODo1M1rOD899jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjI4MTUwOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjozODoyNlrOGWMHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo1MToxOVrOGWMiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMDMwOQ==", "bodyText": "(This heh golang style param name distracts me, hah)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425920309", "createdAt": "2020-05-15T16:38:26Z", "author": {"login": "carlosalberto"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -55,25 +55,26 @@ public void handle(HttpExchange he) throws IOException {\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(he, span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9e432a4f3550082e2c7a5126bb8a615e21a48aa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNzE5NA==", "bodyText": "fixed!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425927194", "createdAt": "2020-05-15T16:51:19Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -55,25 +55,26 @@ public void handle(HttpExchange he) throws IOException {\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(he, span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMDMwOQ=="}, "originalCommit": {"oid": "d9e432a4f3550082e2c7a5126bb8a615e21a48aa"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjM0MDcwOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo1NjoyNVrOGWMsZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoyODo0NlrOGWNskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ==", "bodyText": "Confused a bit and I would rewrite:\n      // Extract the context from the HTTP request\n      Context context =\n          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n\n      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER).setParent(TraceContextUtils.getSpan(context));\n      Span span = spanBuilder.startSpan();\n\ntry (Scope scope = TraceContextUtils.withSpan(span)) {\n        // Set the Semantic Convention\n        span.setAttribute(\"component\", \"http\");\n        span.setAttribute(\"http.method\", \"GET\");\n        /*\n         One of the following is required:\n         - http.scheme, http.host, http.target\n         - http.scheme, http.server_name, net.host.port, http.target\n         - http.scheme, net.host.name, net.host.port, http.target\n         - http.url\n        */\n        span.setAttribute(\"http.scheme\", \"http\");\n        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n        span.setAttribute(\"http.target\", \"/\");\n        // Process the request\n        answer(exchange, span);\n      } finally {\n        // Close the span\n        span.end();\n      }", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425929831", "createdAt": "2020-05-15T16:56:25Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n       Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(exchange, span);\n+      } finally {\n+        // Close the span\n+        span.end();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694ae4c1e09c93cd6bebe01870170800a4ad5864"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MDkxMg==", "bodyText": "good point. I will update.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425940912", "createdAt": "2020-05-15T17:17:59Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n       Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(exchange, span);\n+      } finally {\n+        // Close the span\n+        span.end();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ=="}, "originalCommit": {"oid": "694ae4c1e09c93cd6bebe01870170800a4ad5864"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NjI1Nw==", "bodyText": "done!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425946257", "createdAt": "2020-05-15T17:28:46Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n       Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n         // Build a span automatically using the received context\n         span = spanBuilder.startSpan();\n-      }\n \n-      // Set the Semantic Convention\n-      span.setAttribute(\"component\", \"http\");\n-      span.setAttribute(\"http.method\", \"GET\");\n-      /*\n-      One of the following is required:\n-      - http.scheme, http.host, http.target\n-      - http.scheme, http.server_name, net.host.port, http.target\n-      - http.scheme, net.host.name, net.host.port, http.target\n-      - http.url\n-      */\n-      span.setAttribute(\"http.scheme\", \"http\");\n-      span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n-      span.setAttribute(\"http.target\", \"/\");\n-      // Process the request\n-      answer(he, span);\n-      // Close the span\n-      span.end();\n+        // Set the Semantic Convention\n+        span.setAttribute(\"component\", \"http\");\n+        span.setAttribute(\"http.method\", \"GET\");\n+        /*\n+         One of the following is required:\n+         - http.scheme, http.host, http.target\n+         - http.scheme, http.server_name, net.host.port, http.target\n+         - http.scheme, net.host.name, net.host.port, http.target\n+         - http.url\n+        */\n+        span.setAttribute(\"http.scheme\", \"http\");\n+        span.setAttribute(\"http.host\", \"localhost:\" + HttpServer.port);\n+        span.setAttribute(\"http.target\", \"/\");\n+        // Process the request\n+        answer(exchange, span);\n+      } finally {\n+        // Close the span\n+        span.end();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyOTgzMQ=="}, "originalCommit": {"oid": "694ae4c1e09c93cd6bebe01870170800a4ad5864"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQ4NTk2OnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0MzozNVrOGWOKEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxNDo0MFrOGWPG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA==", "bodyText": "This should be with the new Span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425953810", "createdAt": "2020-05-15T17:43:35Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n+\n+      Span span = spanBuilder.startSpan();\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NTc0NQ==", "bodyText": "you are correct. this example had some issues.  :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425965745", "createdAt": "2020-05-15T18:07:07Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n+\n+      Span span = spanBuilder.startSpan();\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA=="}, "originalCommit": {"oid": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2OTM3Nw==", "bodyText": "Probably that was me. I updated this example in a hurry among all the Context Prop changes and may have missed important bits here and there ;(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425969377", "createdAt": "2020-05-15T18:14:40Z", "author": {"login": "carlosalberto"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);\n+\n+      Span span = spanBuilder.startSpan();\n       try (Scope scope = ContextUtils.withScopedContext(ctx)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MzgxMA=="}, "originalCommit": {"oid": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQ4NzAxOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Mzo1NVrOGWOKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0Mzo1NVrOGWOKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1Mzk4MQ==", "bodyText": "Need to set as parent the Span from the returned context in the Builder.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425953981", "createdAt": "2020-05-15T17:43:55Z", "author": {"login": "bogdandrutu"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,41 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n       Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n       Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n+          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), exchange, getter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dd8193ae65d6d87d8c3cb833691f6e62ccdaf3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjU2MzMyOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODowODo1M1rOGWO8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxMzozMVrOGWPE3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NjU5Mg==", "bodyText": "is this the best way to get the parent?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425966592", "createdAt": "2020-05-15T18:08:53Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,46 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n-      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n-      Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n-      try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n-        // Build a span automatically using the received context\n-        span = spanBuilder.startSpan();\n+      Context context =\n+          OpenTelemetry.getPropagators()\n+              .getHttpTextFormat()\n+              .extract(Context.current(), exchange, getter);\n+\n+      Span span =\n+          tracer\n+              .spanBuilder(\"/\")\n+              .setParent(TracingContextUtils.getSpan(context))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12a7643efb93aadd5a06c3bcd0817162aba0446"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODg2Mw==", "bodyText": "(Makes me remember I've been longing to remove the dust from some code locally, to have a setContext(Context context) overload).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1227#discussion_r425968863", "createdAt": "2020-05-15T18:13:31Z", "author": {"login": "carlosalberto"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpServer.java", "diffHunk": "@@ -40,40 +40,46 @@\n \n public class HttpServer {\n \n-  private class HelloHandler implements HttpHandler {\n+  private static class HelloHandler implements HttpHandler {\n \n     @Override\n-    public void handle(HttpExchange he) throws IOException {\n+    public void handle(HttpExchange exchange) throws IOException {\n       // Name convention for the Span is not yet defined.\n       // See: https://github.com/open-telemetry/opentelemetry-specification/issues/270\n-      Span.Builder spanBuilder = tracer.spanBuilder(\"/\").setSpanKind(Span.Kind.SERVER);\n-      Span span = null;\n \n       // Extract the context from the HTTP request\n-      Context ctx =\n-          OpenTelemetry.getPropagators().getHttpTextFormat().extract(Context.current(), he, getter);\n-      try (Scope scope = ContextUtils.withScopedContext(ctx)) {\n-        // Build a span automatically using the received context\n-        span = spanBuilder.startSpan();\n+      Context context =\n+          OpenTelemetry.getPropagators()\n+              .getHttpTextFormat()\n+              .extract(Context.current(), exchange, getter);\n+\n+      Span span =\n+          tracer\n+              .spanBuilder(\"/\")\n+              .setParent(TracingContextUtils.getSpan(context))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NjU5Mg=="}, "originalCommit": {"oid": "d12a7643efb93aadd5a06c3bcd0817162aba0446"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}