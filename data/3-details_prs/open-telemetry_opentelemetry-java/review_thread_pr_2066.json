{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjI0Mzcx", "number": 2066, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODoyMVrOE4PgPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NVrOE4b3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDA5NzI2OnYy", "diffSide": "RIGHT", "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODoyMVrOHyDBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1MDo0OFrOHyWacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDM1Nw==", "bodyText": "I wonder if we should prefix this with Kotlin or Coroutine to make reading code usages super clear about which context we're referring to.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240357", "createdAt": "2020-11-12T16:28:21Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODA2Nw==", "bodyText": "Yup good call", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522558067", "createdAt": "2020-11-13T01:50:48Z", "author": {"login": "anuraaga"}, "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDM1Nw=="}, "originalCommit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDA5OTgyOnYy", "diffSide": "RIGHT", "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODo1MVrOHyDC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODo1MVrOHyDC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDc0NQ==", "bodyText": "similarly, I might call this field otelContext or openTelemetryContext for extra clarity.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240745", "createdAt": "2020-11-12T16:28:51Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjEyMzU2OnYy", "diffSide": "RIGHT", "path": "context/src/main/java/io/opentelemetry/context/ImplicitContextKeyed.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NVrOHyWgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NVrOHyWgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUxMA==", "bodyText": "I wonder if we should also mention that many async framework users won't want to use this either. Even if we don't have a drop-in solution for them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522559510", "createdAt": "2020-11-13T01:55:45Z", "author": {"login": "jkwatson"}, "path": "context/src/main/java/io/opentelemetry/context/ImplicitContextKeyed.java", "diffHunk": "@@ -21,6 +21,12 @@\n    * automatically.\n    *\n    * <p>This method is equivalent to {@code Context.current().with(value).makeCurrent()}.\n+   *\n+   * <p>The default implementation of this method will store the {@link ImplicitContextKeyed} in a\n+   * {@link ThreadLocal}. Kotlin coroutine users SHOULD NOT use this method as the {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}