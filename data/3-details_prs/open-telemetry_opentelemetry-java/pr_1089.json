{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNzQ0NjE5", "number": 1089, "title": "Add Jaeger remote sampler", "bodyText": "Resolves #796\nThis PR adds Jaeger remote sampler. The sampling configuration is retrieved via gRPC (as opposed to thrift in Jaeger clients).\nOthe notable changes:\n\nAdded proto for Jaeger sampling model with service\nThe proto is generated to the same package as Jaeger gRPC exporter (io.opentelemetry.exporters.jaeger.proto.api_v2), this differs from the package defined in Jaeger proto (io.jaegertracing.api_v2)\nAdded RateLimitingSampler implementation from Jaeger\nThere is e2e test with Testcontainers and mock proto service test\n\nSigned-off-by: Pavol Loffay ploffay@redhat.com", "createdAt": "2020-04-08T09:50:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089", "merged": true, "mergeCommit": {"oid": "610c92fa1c16933892730bdcdbe4a167837236f1"}, "closed": true, "closedAt": "2020-04-23T16:25:27Z", "author": {"login": "pavolloffay"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVk1CGAFqTM4OTgyMjg5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ5YniAFqTM5NzYzNTA0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODIyODk2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-389822896", "createdAt": "2020-04-08T09:52:59Z", "commit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1MzowMFrOGCnw3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1MzowMFrOGCnw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMTgyMA==", "bodyText": "The initial sampler is used before the configuration is obtained from the server.\nI am not sure whether we should use this default from Jaeger clients or use default sampling probability from OTEL.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405401820", "createdAt": "2020-04-08T09:53:00Z", "author": {"login": "pavolloffay"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTM5MDIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-390139020", "createdAt": "2020-04-08T16:30:23Z", "commit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozMDoyNFrOGC3R3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozMDoyNFrOGC3R3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjAzMA==", "bodyText": "s/2019/2020/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405656030", "createdAt": "2020-04-08T16:30:24Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTY5MDU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-390169055", "createdAt": "2020-04-08T17:09:15Z", "commit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzowOToxNVrOGC4zqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzowOToxNVrOGC4zqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MTA2NA==", "bodyText": "why isn't this private?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405681064", "createdAt": "2020-04-08T17:09:15Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);\n+\n+  private final String serviceName;\n+  private final SamplingManagerBlockingStub stub;\n+  Sampler sampler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTczODMz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-390173833", "createdAt": "2020-04-08T17:15:45Z", "commit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxNTo0NVrOGC5DDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxNTo0NVrOGC5DDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTAwNg==", "bodyText": "Is there a unit test suite to go along with this? If we're pulling this in, we need to make sure we have the test coverage on it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405685006", "createdAt": "2020-04-08T17:15:45Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/RateLimiter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.opentelemetry.sdk.common.Clock;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * This class was taken from Jaeger java client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTc0Mzcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-390174371", "createdAt": "2020-04-08T17:16:31Z", "commit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxNjozMlrOGC5ErQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxNjozMlrOGC5ErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTQyMQ==", "bodyText": "unit tests for this class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405685421", "createdAt": "2020-04-08T17:16:32Z", "author": {"login": "jkwatson"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/RateLimitingSampler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * {@link RateLimitingSampler} sampler uses a leaky bucket rate limiter to ensure that traces are\n+ * sampled with a certain constant rate.\n+ */\n+class RateLimitingSampler implements Sampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "266cd76f5559cf98f7842021c56a3a197657b6e0", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/266cd76f5559cf98f7842021c56a3a197657b6e0", "committedDate": "2020-04-08T09:45:03Z", "message": "Add Jaeger remote sampler\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}, "afterCommit": {"oid": "e1198129992ff7f3b8d20496ccec383d2d7406ad", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e1198129992ff7f3b8d20496ccec383d2d7406ad", "committedDate": "2020-04-20T14:45:46Z", "message": "Add tests\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Nzk2MzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-396796349", "createdAt": "2020-04-20T20:41:39Z", "commit": {"oid": "909f16db6cbc7fbaa60702583f9f0984c75e57a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo0MTozOVrOGImzrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo0MTozOVrOGImzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3NzYxNA==", "bodyText": "In general, we should prefer using the more robust ScheduledExecutorService, rather than a Timer, which can get impacted by changes to the system clock.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r411677614", "createdAt": "2020-04-20T20:41:39Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/jaeger_remote_sampler/src/main/java/io/opentelemetry/sdk/contrib/trace/jaeger/sampler/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.jaeger.sampler;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);\n+\n+  private final String serviceName;\n+  private final SamplingManagerBlockingStub stub;\n+  private Sampler sampler;\n+  private final Timer pollTimer;\n+\n+  private JaegerRemoteSampler(\n+      String serviceName, ManagedChannel channel, int pollingIntervalMs, Sampler initialSampler) {\n+    this.serviceName = serviceName;\n+    this.stub = SamplingManagerGrpc.newBlockingStub(channel);\n+    this.sampler = initialSampler;\n+\n+    pollTimer = new Timer(true); // true makes this a daemon thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909f16db6cbc7fbaa60702583f9f0984c75e57a6"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e51b9cad09497ce41c2f0e323724bb880a20400", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e51b9cad09497ce41c2f0e323724bb880a20400", "committedDate": "2020-04-21T08:06:50Z", "message": "Add Jaeger remote sampler\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ab19bfb48452a0678654a0d379248a500dbd7d", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78ab19bfb48452a0678654a0d379248a500dbd7d", "committedDate": "2020-04-21T08:06:50Z", "message": "Add tests\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be468cbad8aa5cb314e7b26b01e6ddc7ca9059b5", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be468cbad8aa5cb314e7b26b01e6ddc7ca9059b5", "committedDate": "2020-04-21T08:06:50Z", "message": "Add remote sampler to all BOM\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5becfa22a5fc846ee5a243e962dc24ecf25701a", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5becfa22a5fc846ee5a243e962dc24ecf25701a", "committedDate": "2020-04-21T08:06:50Z", "message": "Make docker test optional\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed7d62682f87ce81fc0ccf154496330f05792eed", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed7d62682f87ce81fc0ccf154496330f05792eed", "committedDate": "2020-04-21T08:06:50Z", "message": "Use scheduled thread pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad014b41efadd84753413b75b2fca7fe59c24f8", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ad014b41efadd84753413b75b2fca7fe59c24f8", "committedDate": "2020-04-21T08:10:07Z", "message": "Use daemon thread factory\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "909f16db6cbc7fbaa60702583f9f0984c75e57a6", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/909f16db6cbc7fbaa60702583f9f0984c75e57a6", "committedDate": "2020-04-20T14:59:01Z", "message": "Make docker test optional\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}, "afterCommit": {"oid": "0ad014b41efadd84753413b75b2fca7fe59c24f8", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ad014b41efadd84753413b75b2fca7fe59c24f8", "committedDate": "2020-04-21T08:10:07Z", "message": "Use daemon thread factory\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db628ee7469b5a0cb3cba84f1d1a5f58699cf505", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db628ee7469b5a0cb3cba84f1d1a5f58699cf505", "committedDate": "2020-04-21T08:14:21Z", "message": "Cosmetic changes\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755ce912570f663f607d5f3940f52b98438cf9f2", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/755ce912570f663f607d5f3940f52b98438cf9f2", "committedDate": "2020-04-21T09:54:01Z", "message": "Add readme\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDc0MzI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-397474325", "createdAt": "2020-04-21T16:32:33Z", "commit": {"oid": "755ce912570f663f607d5f3940f52b98438cf9f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTEyNTgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-397512581", "createdAt": "2020-04-21T17:18:33Z", "commit": {"oid": "755ce912570f663f607d5f3940f52b98438cf9f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjM1MDQ1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#pullrequestreview-397635045", "createdAt": "2020-04-21T20:05:40Z", "commit": {"oid": "755ce912570f663f607d5f3940f52b98438cf9f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2935, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}