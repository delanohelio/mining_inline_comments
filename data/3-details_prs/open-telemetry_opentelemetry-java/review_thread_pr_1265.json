{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjAzNjE4", "number": 1265, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDowM1rOD-wxPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1OToyNFrOD-xAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM3MzQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDowM1rOGZD_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxOTo1NFrOGZE1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzA5Mg==", "bodyText": "0.5.0 , here and below", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933092", "createdAt": "2020-05-21T21:44:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -166,6 +166,32 @@\n    */\n   LongUpDownSumObserver.Builder longUpDownSumObserverBuilder(String name);\n \n+  /**\n+   * Returns a new builder for a {@link DoubleValueObserver}.\n+   *\n+   * @param name the name of the instrument. Should be a ASCII string with a length no greater than\n+   *     255 characters.\n+   * @return a new builder for a {@code DoubleValueObserver}.\n+   * @throws NullPointerException if {@code name} is null.\n+   * @throws IllegalArgumentException if different metric with the same name already registered.\n+   * @throws IllegalArgumentException if the {@code name} does not match the requirements.\n+   * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjY5NA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946694", "createdAt": "2020-05-21T22:19:54Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -166,6 +166,32 @@\n    */\n   LongUpDownSumObserver.Builder longUpDownSumObserverBuilder(String name);\n \n+  /**\n+   * Returns a new builder for a {@link DoubleValueObserver}.\n+   *\n+   * @param name the name of the instrument. Should be a ASCII string with a length no greater than\n+   *     255 characters.\n+   * @return a new builder for a {@code DoubleValueObserver}.\n+   * @throws NullPointerException if {@code name} is null.\n+   * @throws IllegalArgumentException if different metric with the same name already registered.\n+   * @throws IllegalArgumentException if the {@code name} does not match the requirements.\n+   * @since 0.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzA5Mg=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM3NDQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NDoyOFrOGZEAhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxOTo1N1rOGZE1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzI1Mw==", "bodyText": "probably @since 0.5.0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933253", "createdAt": "2020-05-21T21:44:28Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongSumObserver cpuObserver =\n+ *       meter.\n+ *           .longSumObserverBuilder(\"cpu_fan_speed\")\n+ *           .setDescription(\"System CPU fan speed\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new LongSumObserver.Callback<ResultLongSumObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongSumObserver result) {\n+ *             // Get system cpu fan speed\n+ *             result.observe(cpuFanSpeed);\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjcwMg==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946702", "createdAt": "2020-05-21T22:19:57Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongSumObserver cpuObserver =\n+ *       meter.\n+ *           .longSumObserverBuilder(\"cpu_fan_speed\")\n+ *           .setDescription(\"System CPU fan speed\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new LongSumObserver.Callback<ResultLongSumObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongSumObserver result) {\n+ *             // Get system cpu fan speed\n+ *             result.observe(cpuFanSpeed);\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzI1Mw=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM3ODg0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0NjowM1rOGZEDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxODoxNlrOGZEzDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * capture values that are treated as individual with Observe(value).\n          \n          \n            \n             * capture values that are treated as individual with observe(value).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933941", "createdAt": "2020-05-21T21:46:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDQ2MA==", "bodyText": "maybe better:  \"capture values that are treated as individual observations, recorded with the observe(value) method\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934460", "createdAt": "2020-05-21T21:47:23Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjE4OQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946189", "createdAt": "2020-05-21T22:18:16Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM4NDQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODoyNVrOGZEGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxODo0OFrOGZEzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   private static final DoubleSumObserver cpuObserver =\n          \n          \n            \n             *   private static final DoubleValueObserver cpuObserver =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934847", "createdAt": "2020-05-21T21:48:25Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjM2MA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946360", "createdAt": "2020-05-21T22:18:48Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDg0Nw=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM4NTAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0ODo0MFrOGZEHIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxODo0NlrOGZEzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_temperature\")\n          \n          \n            \n             *           .doubleValueObserverBuilder(\"cpu_temperature\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934947", "createdAt": "2020-05-21T21:48:40Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjM1MA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946350", "createdAt": "2020-05-21T22:18:46Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDk0Nw=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM4NjI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0OToxN1rOGZEH_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxOTowMFrOGZEz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTE2NA==", "bodyText": "needs to be updated for s/sum/value/i", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428935164", "createdAt": "2020-05-21T21:49:17Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")\n+ *           .setDescription(\"System CPU temperature\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new DoubleSumObserver.Callback<ResultDoubleSumObserver>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjQzMA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946430", "createdAt": "2020-05-21T22:19:00Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")\n+ *           .setDescription(\"System CPU temperature\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new DoubleSumObserver.Callback<ResultDoubleSumObserver>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTE2NA=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTQxMjA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1OToyNFrOGZEYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxOToxMVrOGZE0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTI3Mw==", "bodyText": "all the same comments from the DoubleValueObserver apply in here, as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428939273", "createdAt": "2020-05-21T21:59:24Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjQ3OA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946478", "createdAt": "2020-05-21T22:19:11Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTI3Mw=="}, "originalCommit": {"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 718, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}