{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTY0NDQ0", "number": 2214, "title": "Span benchmark with OTLP exporter and collector", "bodyText": "Refactoring the span pipeline benchmark to align it to the throughput measurement in the spec.\nThe OTLP collector is spun up using testContainers and OTLP exporter is being used to send spans to the collector.\nrunning the benchmark with ./gradlew -PjmhIncludeSingleClass=SpanPipelineBenchmark :opentelemetry-sdk:jmh on an m5.xlarge EC2 instance gives the following result:\nBenchmark                                                                                                 Mode  Cnt       Score       Error   Units\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline                                    thrpt   15  527317.589 \u00b1 42314.216   ops/s\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.alloc.rate                     thrpt   15     983.419 \u00b1    81.052  MB/sec\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.alloc.rate.norm                thrpt   15    2938.474 \u00b1    93.300    B/op\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Eden_Space            thrpt   15     994.126 \u00b1   176.230  MB/sec\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Eden_Space.norm       thrpt   15    2969.188 \u00b1   428.534    B/op\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Old_Gen               thrpt   15       0.201 \u00b1     0.180  MB/sec\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Old_Gen.norm          thrpt   15       0.595 \u00b1     0.527    B/op\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Survivor_Space        thrpt   15       0.355 \u00b1     0.455  MB/sec\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Survivor_Space.norm   thrpt   15       1.033 \u00b1     1.314    B/op\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.count                          thrpt   15      32.000              counts\nSpanPipelineBenchmark.BatchSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.time                           thrpt   15     382.000                  ms\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline                                   thrpt   15   22402.867 \u00b1  6041.441   ops/s\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.alloc.rate                    thrpt   15     237.753 \u00b1    59.024  MB/sec\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.alloc.rate.norm               thrpt   15   16559.668 \u00b1   461.969    B/op\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Eden_Space           thrpt   15     235.371 \u00b1    79.240  MB/sec\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Eden_Space.norm      thrpt   15   16494.578 \u00b1  4326.637    B/op\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Old_Gen              thrpt   15       2.665 \u00b1    11.034  MB/sec\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Old_Gen.norm         thrpt   15     222.285 \u00b1   920.363    B/op\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Survivor_Space       thrpt   15       2.863 \u00b1     3.719  MB/sec\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.churn.G1_Survivor_Space.norm  thrpt   15     237.116 \u00b1   332.514    B/op\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.count                         thrpt   15      33.000              counts\nSpanPipelineBenchmark.SimpleSpanProcessorBenchmark.measureSpanPipeline:\u00b7gc.time                          thrpt   15    4541.000                  ms\nRef: This PR for span benchmarks without the exporter.\n@jkwatson I hope this covers the part which I missed in the last PR.", "createdAt": "2020-12-07T21:39:18Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214", "merged": true, "mergeCommit": {"oid": "4c886ddc207e7e92b08002a5ef88459a126c2c0b"}, "closed": true, "closedAt": "2020-12-09T21:03:21Z", "author": {"login": "srprash"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj8B7uAH2gAyNTMzOTY0NDQ0OmZjMTU3YzlmY2M1NDNiMGI3YzRiYTc4NDNlZjdjMjhjODk0YmRkMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkkQ9egH2gAyNTMzOTY0NDQ0OjMyZGQ5OTdlMDIzMmMyZGJlYzZiOWUwMjIzMWI5M2UyNDM0NjE1NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc157c9fcc543b0b7c4ba7843ef7c28c894bdd13", "author": {"user": {"login": "srprash", "name": "Prashant Srivastava"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc157c9fcc543b0b7c4ba7843ef7c28c894bdd13", "committedDate": "2020-12-07T21:01:00Z", "message": "Refactored benchmark to use OTLP exporter and collector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTYyNzIy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#pullrequestreview-546562722", "createdAt": "2020-12-07T21:45:36Z", "commit": {"oid": "fc157c9fcc543b0b7c4ba7843ef7c28c894bdd13"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo0NTozN1rOIA8HgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo0NTozN1rOIA8HgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1NTg3Mg==", "bodyText": "we don't need otlp in here, do we? What's \"backend:8080\" pointing at, anyway?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#discussion_r537855872", "createdAt": "2020-12-07T21:45:37Z", "author": {"login": "jkwatson"}, "path": "sdk/all/src/jmh/resources/otel.yaml", "diffHunk": "@@ -0,0 +1,27 @@\n+receivers:\n+  otlp:\n+    protocols:\n+      grpc:\n+        endpoint: 0.0.0.0:5678\n+\n+processors:\n+  batch:\n+  queued_retry:\n+\n+extensions:\n+  health_check:\n+\n+exporters:\n+  logging:\n+    loglevel: debug\n+  otlp:\n+    endpoint: backend:8080\n+    insecure: true\n+\n+service:\n+  extensions: [health_check]\n+  pipelines:\n+    traces:\n+      receivers: [otlp]\n+      processors: [batch, queued_retry]\n+      exporters: [logging, otlp]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc157c9fcc543b0b7c4ba7843ef7c28c894bdd13"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58aa94e7c63d7676e86cfa255e741f935598f0dc", "author": {"user": {"login": "srprash", "name": "Prashant Srivastava"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/58aa94e7c63d7676e86cfa255e741f935598f0dc", "committedDate": "2020-12-08T06:35:23Z", "message": "Refactoring to add  benchmarks with Simple and Batch span processors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8", "author": {"user": {"login": "srprash", "name": "Prashant Srivastava"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8", "committedDate": "2020-12-08T06:44:27Z", "message": "Removing otlp exporter from the collector config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Nzg5NjE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#pullrequestreview-546789614", "createdAt": "2020-12-08T06:49:50Z", "commit": {"oid": "be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0OTo1MFrOIBJmeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0OTo1MFrOIBJmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3Njc5NA==", "bodyText": "While ryuk cleans things up usually, let's go ahead and add collector.stop() in a teardown", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#discussion_r538076794", "createdAt": "2020-12-08T06:49:50Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/jmh/java/io/opentelemetry/sdk/trace/SpanPipelineBenchmark.java", "diffHunk": "@@ -5,96 +5,123 @@\n \n package io.opentelemetry.sdk.trace;\n \n-import static io.opentelemetry.api.common.AttributeKey.booleanKey;\n-import static io.opentelemetry.api.common.AttributeKey.doubleKey;\n-import static io.opentelemetry.api.common.AttributeKey.longKey;\n-import static io.opentelemetry.api.common.AttributeKey.stringKey;\n-\n-import io.opentelemetry.api.OpenTelemetry;\n-import io.opentelemetry.api.common.AttributeKey;\n-import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.api.trace.Span;\n-import io.opentelemetry.api.trace.Span.Kind;\n-import io.opentelemetry.api.trace.StatusCode;\n import io.opentelemetry.api.trace.Tracer;\n-import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.exporter.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n-import io.opentelemetry.sdk.trace.export.SpanExporter;\n-import java.util.Collection;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n import java.util.concurrent.TimeUnit;\n import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n import org.openjdk.jmh.annotations.Level;\n import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n import org.openjdk.jmh.annotations.OutputTimeUnit;\n import org.openjdk.jmh.annotations.Scope;\n import org.openjdk.jmh.annotations.Setup;\n import org.openjdk.jmh.annotations.State;\n import org.openjdk.jmh.annotations.Threads;\n import org.openjdk.jmh.annotations.Warmup;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n-@State(Scope.Benchmark)\n public class SpanPipelineBenchmark {\n+  private SpanPipelineBenchmark() {}\n \n-  private static final AttributeKey<String> OPERATION_KEY = stringKey(\"operation\");\n-  private static final AttributeKey<Long> LONG_ATTRIBUTE_KEY = longKey(\"longAttribute\");\n-  private static final AttributeKey<String> STRING_ATTRIBUTE_KEY = stringKey(\"stringAttribute\");\n-  private static final AttributeKey<Double> DOUBLE_ATTRIBUTE_KEY = doubleKey(\"doubleAttribute\");\n-  private static final AttributeKey<Boolean> BOOLEAN_ATTRIBUTE_KEY = booleanKey(\"booleanAttribute\");\n-  private final Tracer tracer = OpenTelemetry.getGlobalTracerProvider().get(\"benchmarkTracer\");\n-\n-  @Setup(Level.Trial)\n-  public final void setup() {\n-    SpanExporter exporter = new NoOpSpanExporter();\n-    OpenTelemetrySdk.getGlobalTracerManagement()\n-        .addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());\n-  }\n+  @State(Scope.Benchmark)\n+  public abstract static class AbstractProcessorBenchmark {\n+    private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n+        DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n+    private static final int EXPOSED_PORT = 5678;\n+    private static final int HEALTH_CHECK_PORT = 13133;\n+    private SpanBuilderSdk spanBuilderSdk;\n+    protected abstract SpanProcessor getSpanProcessor(String collectorAddress);\n+    protected abstract void runThePipeline();\n \n-  @Benchmark\n-  @Threads(value = 5)\n-  @Fork(1)\n-  @Warmup(iterations = 5, time = 1)\n-  @Measurement(iterations = 5, time = 1)\n-  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-  public void runThePipeline_05Threads() {\n-    doWork();\n-  }\n+    protected void doWork() {\n+      Span span = spanBuilderSdk.startSpan();\n+      for (int i = 0; i < 10; i++) {\n+        span.setAttribute(\"benchmarkAttribute_\" + i, \"benchmarkAttrValue_\" + i);\n+      }\n+      span.end();\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+      // Configuring the collector test-container\n+      GenericContainer<?> collector =\n+          new GenericContainer<>(OTLP_COLLECTOR_IMAGE)\n+              .withExposedPorts(EXPOSED_PORT, HEALTH_CHECK_PORT)\n+              .waitingFor(Wait.forHttp(\"/\").forPort(HEALTH_CHECK_PORT))\n+              .withCopyFileToContainer(\n+                  MountableFile.forClasspathResource(\"/otel.yaml\"), \"/etc/otel.yaml\")\n+              .withCommand(\"--config /etc/otel.yaml\");\n+\n+      collector.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzkyMDU3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#pullrequestreview-546792057", "createdAt": "2020-12-08T06:51:40Z", "commit": {"oid": "be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo1MTo0MFrOIBJpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo1MTo0MFrOIBJpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NzUwMQ==", "bodyText": "In #2223 I'm trying to add this to the builder to be able to configure the tracer provider in one go.\nIn the meantime, builder already has setTraceConfig so how about using that instead of the update?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#discussion_r538077501", "createdAt": "2020-12-08T06:51:40Z", "author": {"login": "anuraaga"}, "path": "sdk/all/src/jmh/java/io/opentelemetry/sdk/trace/SpanPipelineBenchmark.java", "diffHunk": "@@ -5,96 +5,123 @@\n \n package io.opentelemetry.sdk.trace;\n \n-import static io.opentelemetry.api.common.AttributeKey.booleanKey;\n-import static io.opentelemetry.api.common.AttributeKey.doubleKey;\n-import static io.opentelemetry.api.common.AttributeKey.longKey;\n-import static io.opentelemetry.api.common.AttributeKey.stringKey;\n-\n-import io.opentelemetry.api.OpenTelemetry;\n-import io.opentelemetry.api.common.AttributeKey;\n-import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.api.trace.Span;\n-import io.opentelemetry.api.trace.Span.Kind;\n-import io.opentelemetry.api.trace.StatusCode;\n import io.opentelemetry.api.trace.Tracer;\n-import io.opentelemetry.sdk.OpenTelemetrySdk;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.exporter.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n-import io.opentelemetry.sdk.trace.export.SpanExporter;\n-import java.util.Collection;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n import java.util.concurrent.TimeUnit;\n import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n import org.openjdk.jmh.annotations.Level;\n import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n import org.openjdk.jmh.annotations.OutputTimeUnit;\n import org.openjdk.jmh.annotations.Scope;\n import org.openjdk.jmh.annotations.Setup;\n import org.openjdk.jmh.annotations.State;\n import org.openjdk.jmh.annotations.Threads;\n import org.openjdk.jmh.annotations.Warmup;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n-@State(Scope.Benchmark)\n public class SpanPipelineBenchmark {\n+  private SpanPipelineBenchmark() {}\n \n-  private static final AttributeKey<String> OPERATION_KEY = stringKey(\"operation\");\n-  private static final AttributeKey<Long> LONG_ATTRIBUTE_KEY = longKey(\"longAttribute\");\n-  private static final AttributeKey<String> STRING_ATTRIBUTE_KEY = stringKey(\"stringAttribute\");\n-  private static final AttributeKey<Double> DOUBLE_ATTRIBUTE_KEY = doubleKey(\"doubleAttribute\");\n-  private static final AttributeKey<Boolean> BOOLEAN_ATTRIBUTE_KEY = booleanKey(\"booleanAttribute\");\n-  private final Tracer tracer = OpenTelemetry.getGlobalTracerProvider().get(\"benchmarkTracer\");\n-\n-  @Setup(Level.Trial)\n-  public final void setup() {\n-    SpanExporter exporter = new NoOpSpanExporter();\n-    OpenTelemetrySdk.getGlobalTracerManagement()\n-        .addSpanProcessor(SimpleSpanProcessor.builder(exporter).build());\n-  }\n+  @State(Scope.Benchmark)\n+  public abstract static class AbstractProcessorBenchmark {\n+    private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n+        DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n+    private static final int EXPOSED_PORT = 5678;\n+    private static final int HEALTH_CHECK_PORT = 13133;\n+    private SpanBuilderSdk spanBuilderSdk;\n+    protected abstract SpanProcessor getSpanProcessor(String collectorAddress);\n+    protected abstract void runThePipeline();\n \n-  @Benchmark\n-  @Threads(value = 5)\n-  @Fork(1)\n-  @Warmup(iterations = 5, time = 1)\n-  @Measurement(iterations = 5, time = 1)\n-  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n-  public void runThePipeline_05Threads() {\n-    doWork();\n-  }\n+    protected void doWork() {\n+      Span span = spanBuilderSdk.startSpan();\n+      for (int i = 0; i < 10; i++) {\n+        span.setAttribute(\"benchmarkAttribute_\" + i, \"benchmarkAttrValue_\" + i);\n+      }\n+      span.end();\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+      // Configuring the collector test-container\n+      GenericContainer<?> collector =\n+          new GenericContainer<>(OTLP_COLLECTOR_IMAGE)\n+              .withExposedPorts(EXPOSED_PORT, HEALTH_CHECK_PORT)\n+              .waitingFor(Wait.forHttp(\"/\").forPort(HEALTH_CHECK_PORT))\n+              .withCopyFileToContainer(\n+                  MountableFile.forClasspathResource(\"/otel.yaml\"), \"/etc/otel.yaml\")\n+              .withCommand(\"--config /etc/otel.yaml\");\n+\n+      collector.start();\n+\n+      String address = collector.getHost() + \":\" + collector.getMappedPort(EXPOSED_PORT);\n+\n+      TracerSdkProvider tracerProvider = TracerSdkProvider.builder().build();\n+\n+      tracerProvider.addSpanProcessor(getSpanProcessor(address));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9cc1bb1b2d2db3eb4ac7e2705c9251add792a8"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0fb080dbe78696c8c9fbe3a291060ead2b7f6b4", "author": {"user": {"login": "srprash", "name": "Prashant Srivastava"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d0fb080dbe78696c8c9fbe3a291060ead2b7f6b4", "committedDate": "2020-12-09T04:49:49Z", "message": "Using setTraceConfig to set the initial config rather than update it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NTQyOTA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2214#pullrequestreview-548542909", "createdAt": "2020-12-09T19:38:01Z", "commit": {"oid": "d0fb080dbe78696c8c9fbe3a291060ead2b7f6b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32dd997e0232c2dbec6b9e02231b93e243461576", "author": {"user": {"login": "srprash", "name": "Prashant Srivastava"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32dd997e0232c2dbec6b9e02231b93e243461576", "committedDate": "2020-12-09T19:53:37Z", "message": "Spotlessapply"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3872, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}