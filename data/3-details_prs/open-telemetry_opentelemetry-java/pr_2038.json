{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTgwNjc2", "number": 2038, "title": "1911 b3 propagator debug flag", "bodyText": "resolves #1911", "createdAt": "2020-11-06T21:09:41Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038", "merged": true, "mergeCommit": {"oid": "d4583db62fc6d540f175327f658202854e088589"}, "closed": true, "closedAt": "2020-11-12T16:16:00Z", "author": {"login": "jarebudev"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZqJbPgH2gAyNTE2OTgwNjc2OmIzNmJhN2E2NGNhNzQ4MmEwMjlkMmNiNmI0OGJhMzdhNmJiMzI4YWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb09iQAFqTUyOTI1MTU5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b36ba7a64ca7482a029d2cb6b48ba37a6bb328af", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b36ba7a64ca7482a029d2cb6b48ba37a6bb328af", "committedDate": "2020-11-05T22:31:39Z", "message": "b3 propagator supports inject/extract of debug flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfea35ec117694e2ed4f158a69907ba99576850", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bcfea35ec117694e2ed4f158a69907ba99576850", "committedDate": "2020-11-05T22:54:54Z", "message": "rebase with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/52ba177d2fa869baa501ec2025d842512cf27e2a", "committedDate": "2020-11-06T20:58:13Z", "message": "rename context key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Nzg1MDM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-525785035", "createdAt": "2020-11-08T08:20:23Z", "commit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwODoyMDoyM1rOHvO2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwODoyNjo0NVrOHvPAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4ODQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String DEBUG_CONTEXT_KEY = \"b3-debug\";\n          \n          \n            \n              static final ContextKey<String> DEBUG_CONTEXT = ContextKey.named(B3Propagator.DEBUG_CONTEXT_KEY);\n          \n          \n            \n              static final ContextKey<String> DEBUG_CONTEXT_KEY = ContextKey.named(\"b3-debug);\n          \n      \n    \n    \n  \n\nThe string form isn't really used, and it's the ContextKey that is actually the context key :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519288493", "createdAt": "2020-11-08T08:20:23Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3Propagator.java", "diffHunk": "@@ -49,12 +50,16 @@\n   static final String TRACE_ID_HEADER = \"X-B3-TraceId\";\n   static final String SPAN_ID_HEADER = \"X-B3-SpanId\";\n   static final String SAMPLED_HEADER = \"X-B3-Sampled\";\n+  static final String DEBUG_HEADER = \"X-B3-Flags\";\n   static final String COMBINED_HEADER = \"b3\";\n   static final String COMBINED_HEADER_DELIMITER = \"-\";\n+  static final String DEBUG_CONTEXT_KEY = \"b3-debug\";\n+  static final ContextKey<String> DEBUG_CONTEXT = ContextKey.named(B3Propagator.DEBUG_CONTEXT_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4ODgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n          \n          \n            \n                if (Common.TRUE_INT.equals(debug)) {\n          \n      \n    \n    \n  \n\nthroughout PR. Empty check is redundant, and it's always String, not CharSequence so can use equals.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519288801", "createdAt": "2020-11-08T08:21:19Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,38 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    String debug = getter.get(carrier, DEBUG_HEADER);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4OTk4Nw==", "bodyText": "In some cases we pass debug, others Common.TRUE_INT - I'd pass Common.TRUE_INT everywhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519289987", "createdAt": "2020-11-08T08:24:15Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,38 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    String debug = getter.get(carrier, DEBUG_HEADER);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n+      return Optional.of(\n+          context\n+              .with(B3Propagator.DEBUG_CONTEXT, debug)\n+              .with(Span.wrap(Common.buildSpanContext(traceId, spanId, debug))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI5MDk5Mg==", "bodyText": "I believe we're missing two test cases for when both sampled and debug are set. Especially sampled = false and debug = true is important.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519290992", "createdAt": "2020-11-08T08:26:45Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/test/java/io/opentelemetry/extension/trace/propagation/B3PropagatorTest.java", "diffHunk": "@@ -599,4 +600,62 @@ void extract_emptyCarrier() {\n     assertThat(getSpanContext(b3Propagator.extract(Context.current(), emptyHeaders, getter)))\n         .isEqualTo(SpanContext.getInvalid());\n   }\n+\n+  @Test\n+  void extract_DebugContext_SingleHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(B3Propagator.COMBINED_HEADER, TRACE_ID + \"-\" + SPAN_ID + \"-\" + \"d\");\n+\n+    Context context = b3Propagator.extract(Context.current(), carrier, getter);\n+    assertThat(getSpanContext(context))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(context.get(DEBUG_CONTEXT)).isEqualTo(Common.TRUE_INT);\n+  }\n+\n+  @Test\n+  void extract_DebugContext_MultipleHeaders() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(B3Propagator.TRACE_ID_HEADER, TRACE_ID);\n+    carrier.put(B3Propagator.SPAN_ID_HEADER, SPAN_ID);\n+    carrier.put(B3Propagator.DEBUG_HEADER, Common.TRUE_INT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a522cee8bdfd51439373f37cea1910e64d52a6", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/37a522cee8bdfd51439373f37cea1910e64d52a6", "committedDate": "2020-11-08T20:22:28Z", "message": "Update extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3Propagator.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a730fdb34829175f2248078ffbefb49e74ddb352", "committedDate": "2020-11-08T21:06:41Z", "message": "changes as per code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTgyODEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-526582813", "createdAt": "2020-11-09T19:25:22Z", "commit": {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNToyMlrOHv-N1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNToyMlrOHv-N1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NDQ2OA==", "bodyText": "We should use the constant defined in the B3Propagator class here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520064468", "createdAt": "2020-11-09T19:25:22Z", "author": {"login": "jkwatson"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorSingleHeader.java", "diffHunk": "@@ -50,25 +44,34 @@\n     if (parts.length < 2 || parts.length > 4) {\n       logger.fine(\n           \"Invalid combined header '\" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String traceId = parts[0];\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = parts[1];\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\n           \"Invalid SpanId in B3 header: \" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String sampled = parts.length >= 3 ? parts[2] : null;\n \n-    return Common.buildSpanContext(traceId, spanId, sampled);\n+    // if sampled is marked as 'd'ebug, then set sampled flag, and also store the B3 debug flag in\n+    // the context for onward use by the B3 injector\n+    if (sampled != null && sampled.equals(\"d\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTg1Mzk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-526585394", "createdAt": "2020-11-09T19:28:48Z", "commit": {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyODo0OFrOHv-Vlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyODo0OFrOHv-Vlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NjQ1NA==", "bodyText": "Shouldn't this be comparing to B3Propagator.DEBUG_SAMPLED, since we're extracting it from the incoming request?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520066454", "createdAt": "2020-11-09T19:28:48Z", "author": {"login": "jkwatson"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,37 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    if (Common.TRUE_INT.equals(getter.get(carrier, DEBUG_HEADER))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ce0aec45d16016329b392b724263aa709db2ed", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e7ce0aec45d16016329b392b724263aa709db2ed", "committedDate": "2020-11-09T22:52:06Z", "message": "added constants for b3propagator debug propagation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzY2OTM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-526766936", "createdAt": "2020-11-10T00:43:38Z", "commit": {"oid": "e7ce0aec45d16016329b392b724263aa709db2ed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDo0MzozOFrOHwHQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDo0NDowNlrOHwHQ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxMjU4NQ==", "bodyText": "Should we use the new constant here, MULTI_HEADER_DEBUG?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520212585", "createdAt": "2020-11-10T00:43:38Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,12 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    String debug = context.get(B3Propagator.DEBUG_CONTEXT_KEY);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n+      setter.set(carrier, B3Propagator.DEBUG_HEADER, Common.TRUE_INT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ce0aec45d16016329b392b724263aa709db2ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxMjcxMQ==", "bodyText": "Common.TRUE_INT.equals(debug) for this and next file I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520212711", "createdAt": "2020-11-10T00:44:06Z", "author": {"login": "anuraaga"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,12 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    String debug = context.get(B3Propagator.DEBUG_CONTEXT_KEY);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ce0aec45d16016329b392b724263aa709db2ed"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "205102c41d7eac38794c0d72e2852f21c7950ad4", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/205102c41d7eac38794c0d72e2852f21c7950ad4", "committedDate": "2020-11-10T20:48:11Z", "message": "tidy up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjI5MTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-527629144", "createdAt": "2020-11-10T21:40:01Z", "commit": {"oid": "205102c41d7eac38794c0d72e2852f21c7950ad4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0MDowMVrOHwwqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0MDowMVrOHwwqTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MDk1OQ==", "bodyText": "Hm. In this case, aren't we putting Common.TRUE_INT into the context, not B3Propagator.MULTI_HEADER_DEBUG? They might happen to have the same value at the moment, but I don't think we should confuse the constant from the wire protocol with the constant that we're using internally for propagation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520890959", "createdAt": "2020-11-10T21:40:01Z", "author": {"login": "jkwatson"}, "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,11 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    if (B3Propagator.MULTI_HEADER_DEBUG.equals(context.get(B3Propagator.DEBUG_CONTEXT_KEY))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205102c41d7eac38794c0d72e2852f21c7950ad4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5", "committedDate": "2020-11-11T21:56:06Z", "message": "changed b3 propagator to store a boolean in context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODA4MDYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-528808060", "createdAt": "2020-11-12T07:28:23Z", "commit": {"oid": "520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjUxNTk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#pullrequestreview-529251594", "createdAt": "2020-11-12T16:15:28Z", "commit": {"oid": "520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3988, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}