{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTI3Mjk0", "number": 899, "title": "Make the HttpTraceContext be more forgiving in the face of invalid data.", "bodyText": "resolves #895\nNote: This does not fully address #876 . That will wait until open-telemetry/opentelemetry-specification#478 is resolved.", "createdAt": "2020-02-20T19:14:33Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899", "merged": true, "mergeCommit": {"oid": "f37f5dc8ac7114c92c35e220708051d4b57792cd"}, "closed": true, "closedAt": "2020-02-24T17:38:47Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGP3M_AH2gAyMzc3OTI3Mjk0OmYwMDA4Mjg5MGM5ZGI1NTFmNmNmOTZiZjJlNjdkZjU3N2Y5ZGY2NWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHeRc9AFqTM2MzQyMTAwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f00082890c9db551f6cf96bf2e67df577f9df65d", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f00082890c9db551f6cf96bf2e67df577f9df65d", "committedDate": "2020-02-20T18:58:30Z", "message": "Make the HttpTraceContext be more forgiving in the face of invalid data."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc1cf943d5d6682cb6bf67ed85e8ca39bdea675", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9cc1cf943d5d6682cb6bf67ed85e8ca39bdea675", "committedDate": "2020-02-20T19:19:09Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjA2ODkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-362206891", "createdAt": "2020-02-20T20:22:14Z", "commit": {"oid": "9cc1cf943d5d6682cb6bf67ed85e8ca39bdea675"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjE4NTU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-362218555", "createdAt": "2020-02-20T20:42:30Z", "commit": {"oid": "9cc1cf943d5d6682cb6bf67ed85e8ca39bdea675"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0MjozMFrOFsidLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0MjozMFrOFsidLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NjE5MA==", "bodyText": "If we always return Invalid why do we create exceptions, maybe just simply return Invalid from here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#discussion_r382246190", "createdAt": "2020-02-20T20:42:30Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -111,53 +114,66 @@\n   public <C /*>>> extends @NonNull Object*/> SpanContext extract(C carrier, Getter<C> getter) {\n     checkNotNull(carrier, \"carrier\");\n     checkNotNull(getter, \"getter\");\n-    TraceId traceId;\n-    SpanId spanId;\n-    TraceFlags traceFlags;\n     String traceparent = getter.get(carrier, TRACE_PARENT);\n     if (traceparent == null) {\n       return INVALID_SPAN_CONTEXT;\n     }\n+    SpanContext contextFromParentHeader;\n     try {\n-      // TODO(bdrutu): Do we need to verify that version is hex and that for the version\n-      // the length is the expected one?\n-      checkArgument(\n-          traceparent.charAt(TRACE_OPTION_OFFSET - 1) == TRACEPARENT_DELIMITER\n-              && (traceparent.length() == TRACEPARENT_HEADER_SIZE\n-                  || (traceparent.length() > TRACEPARENT_HEADER_SIZE\n-                      && traceparent.charAt(TRACEPARENT_HEADER_SIZE) == TRACEPARENT_DELIMITER))\n-              && traceparent.charAt(SPAN_ID_OFFSET - 1) == TRACEPARENT_DELIMITER\n-              && traceparent.charAt(TRACE_OPTION_OFFSET - 1) == TRACEPARENT_DELIMITER,\n-          \"Missing or malformed TRACEPARENT.\");\n-\n-      traceId = TraceId.fromLowerBase16(traceparent, TRACE_ID_OFFSET);\n-      spanId = SpanId.fromLowerBase16(traceparent, SPAN_ID_OFFSET);\n-      traceFlags = TraceFlags.fromLowerBase16(traceparent, TRACE_OPTION_OFFSET);\n+      contextFromParentHeader = extractContextFromTraceParent(traceparent);\n     } catch (IllegalArgumentException e) {\n-      throw new IllegalArgumentException(\"Invalid traceparent: \" + traceparent, e);\n+      logger.info(\"Unparseable traceparent header. Returning INVALID span context.\");\n+      return INVALID_SPAN_CONTEXT;\n     }\n \n-    String traceState = getter.get(carrier, TRACE_STATE);\n+    String traceStateHeader = getter.get(carrier, TRACE_STATE);\n     try {\n-      if (traceState == null || traceState.isEmpty()) {\n-        return SpanContext.createFromRemoteParent(traceId, spanId, traceFlags, TRACE_STATE_DEFAULT);\n-      }\n-      TraceState.Builder traceStateBuilder = TraceState.builder();\n-      String[] listMembers = TRACESTATE_ENTRY_DELIMITER_SPLIT_PATTERN.split(traceState);\n-      checkArgument(\n-          listMembers.length <= TRACESTATE_MAX_MEMBERS, \"TraceState has too many elements.\");\n-      // Iterate in reverse order because when call builder set the elements is added in the\n-      // front of the list.\n-      for (int i = listMembers.length - 1; i >= 0; i--) {\n-        String listMember = listMembers[i];\n-        int index = listMember.indexOf(TRACESTATE_KEY_VALUE_DELIMITER);\n-        checkArgument(index != -1, \"Invalid TraceState list-member format.\");\n-        traceStateBuilder.set(listMember.substring(0, index), listMember.substring(index + 1));\n+      if (traceStateHeader == null || traceStateHeader.isEmpty()) {\n+        return contextFromParentHeader;\n       }\n+      TraceState state = extractTraceState(traceStateHeader);\n       return SpanContext.createFromRemoteParent(\n-          traceId, spanId, traceFlags, traceStateBuilder.build());\n+          contextFromParentHeader.getTraceId(),\n+          contextFromParentHeader.getSpanId(),\n+          contextFromParentHeader.getTraceFlags(),\n+          state);\n     } catch (IllegalArgumentException e) {\n-      throw new IllegalArgumentException(\"Invalid tracestate: \" + traceState, e);\n+      logger.info(\"Unparseable tracestate header. Returning span context without state.\");\n+      return contextFromParentHeader;\n+    }\n+  }\n+\n+  private static SpanContext extractContextFromTraceParent(String traceparent) {\n+    // TODO(bdrutu): Do we need to verify that version is hex and that\n+    // for the version the length is the expected one?\n+    checkArgument(\n+        traceparent.charAt(TRACE_OPTION_OFFSET - 1) == TRACEPARENT_DELIMITER\n+            && (traceparent.length() == TRACEPARENT_HEADER_SIZE\n+                || (traceparent.length() > TRACEPARENT_HEADER_SIZE\n+                    && traceparent.charAt(TRACEPARENT_HEADER_SIZE) == TRACEPARENT_DELIMITER))\n+            && traceparent.charAt(SPAN_ID_OFFSET - 1) == TRACEPARENT_DELIMITER\n+            && traceparent.charAt(TRACE_OPTION_OFFSET - 1) == TRACEPARENT_DELIMITER,\n+        \"Missing or malformed TRACEPARENT.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc1cf943d5d6682cb6bf67ed85e8ca39bdea675"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4486f14b9a6c8d39506527a2d978889765be7d62", "committedDate": "2020-02-20T20:58:10Z", "message": "don't use exceptions where not necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjM0MzQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-362234341", "createdAt": "2020-02-20T21:07:09Z", "commit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDM2MTUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-362436152", "createdAt": "2020-02-21T07:17:22Z", "commit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDk3NTY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-362497567", "createdAt": "2020-02-21T09:27:55Z", "commit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToyNzo1NlrOFswmxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToyNzo1NlrOFswmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3ODAyMA==", "bodyText": "What about these? Especially a null carrier might make sense if I use a lambda or anonymous inner class as getter that already holds references to the actual carrier.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#discussion_r382478020", "createdAt": "2020-02-21T09:27:56Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -111,53 +114,73 @@\n   public <C /*>>> extends @NonNull Object*/> SpanContext extract(C carrier, Getter<C> getter) {\n     checkNotNull(carrier, \"carrier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDIxMDA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/899#pullrequestreview-363421008", "createdAt": "2020-02-24T14:19:46Z", "commit": {"oid": "4486f14b9a6c8d39506527a2d978889765be7d62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}