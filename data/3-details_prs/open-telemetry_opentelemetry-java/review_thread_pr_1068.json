{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTM2MDg5", "number": 1068, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToxNTozM1rODuAFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToxNTozM1rODuAFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTYyNDQ5OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToxNTozM1rOF_wOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1NTo1NVrOF_2-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg==", "bodyText": "Do we need this on the SDK? Probably yes, but would like to understand the motivation you had.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402394626", "createdAt": "2020-04-02T15:15:33Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNDY4NQ==", "bodyText": "See #1068 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402424685", "createdAt": "2020-04-02T15:56:13Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyOTI5Ng==", "bodyText": "This is also in the Specification ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402429296", "createdAt": "2020-04-02T16:02:41Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTQ3OA==", "bodyText": "Ah, makes sense!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402431478", "createdAt": "2020-04-02T16:05:48Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMzMzMg==", "bodyText": "@carlosalberto Actually it's not, only shutdown is: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/sdk-tracing.md#shutdown-1. Also forceFlush is not on the exporter. I'll try creating a PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402433332", "createdAt": "2020-04-02T16:08:26Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNTA4MA==", "bodyText": "Reading more carefully, it seems that the spec does not even specify shutdown on the TracerProvider either, only the getTracer method in the API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402435080", "createdAt": "2020-04-02T16:10:57Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNTQxMw==", "bodyText": "It's only in the spec for a SpanProcessor, not for the SDK Tracer implementation, unless I missed that somewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402435413", "createdAt": "2020-04-02T16:11:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MDgwNQ==", "bodyText": "Oh, right. I misread that one. In any case, I think it makes sense to have in the Tracer SDK section. I don't imagine keeping the processor object around for this specific task.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402450805", "createdAt": "2020-04-02T16:34:40Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNTQwNQ==", "bodyText": "@bogdandrutu any more clarification needed on this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1068#discussion_r402505405", "createdAt": "2020-04-02T17:55:55Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -119,6 +119,15 @@ public void shutdown() {\n     sharedState.stop();\n   }\n \n+  /**\n+   * Requests the active span processor to process all span events that have not yet been processed.\n+   *\n+   * @see SpanProcessor#forceFlush()\n+   */\n+  public void forceFlush() {\n+    sharedState.getActiveSpanProcessor().forceFlush();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDYyNg=="}, "originalCommit": {"oid": "5e0f8a9251f9651c95d564ddb15df377e0d2fc64"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 819, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}