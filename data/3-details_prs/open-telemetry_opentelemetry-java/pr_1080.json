{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NDI3NjIz", "number": 1080, "title": "Configuration class for BatchSpanProcessor", "bodyText": "This addresses #996 creating a configuration class for the BatchSpanProcessor.\nThe ConfigBuilder class contains the common code that will be shared with other configuration classes.", "createdAt": "2020-04-06T07:08:03Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080", "merged": true, "mergeCommit": {"oid": "cfba55f7131869cbb8ebdc39a9d6ccfe6675ed65"}, "closed": true, "closedAt": "2020-04-22T14:23:38Z", "author": {"login": "thisthat"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU6uVKAFqTM4ODA0ODkzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaC98dgBqjMyNTkxNzc1Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDQ4OTM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-388048937", "createdAt": "2020-04-06T08:49:39Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo0OTo0MFrOGBNv5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo0OTo0MFrOGBNv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNzAxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class ConfigBuilder {\n          \n          \n            \n            public abstract class ConfigurableBuilder {\n          \n      \n    \n    \n  \n\nLooking at the usages, this is not a builder for configuration, but the interface for a configurable builder. Consequently, I think the getProperty methods must be removed from here (they can be moved to a static helper class) and then this can become an interface instead of an abstract class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403927015", "createdAt": "2020-04-06T08:49:40Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDU2NTU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-388056555", "createdAt": "2020-04-06T08:59:21Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1OToyMlrOGBOIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1OToyMlrOGBOIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzIwMA==", "bodyText": "Since this is expected to call fromConfigMap(System.getenv()), I'd move it out of the interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403933200", "createdAt": "2020-04-06T08:59:22Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n+\n+  public abstract ConfigBuilder fromEnv();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDU3MzEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-388057313", "createdAt": "2020-04-06T09:00:22Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTowMDoyM1rOGBOKmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTowMDoyM1rOGBOKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzg1MQ==", "bodyText": "What naming conventions do we expect in configMap? ENV_VAR_CONVENTIONS? Or systemProperty.conventions? It seems the former.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r403933851", "createdAt": "2020-04-06T09:00:23Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzU5ODYx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-388359861", "createdAt": "2020-04-06T15:23:27Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNToyMzoyN1rOGBdFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0MDoxM1rOGBd3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3ODM3Ng==", "bodyText": "common.export?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404178376", "createdAt": "2020-04-06T15:23:27Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3OTQ0OA==", "bodyText": "Use autovalue to avoid writing unnecessary code?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404179448", "createdAt": "2020-04-06T15:24:45Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MDU5MA==", "bodyText": "It is hard to understand these names, I would propose to prefix all of them with \"DEFAULT_\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404180590", "createdAt": "2020-04-06T15:26:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4MTA4OQ==", "bodyText": "final?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404181089", "createdAt": "2020-04-06T15:27:03Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MTA5Nw==", "bodyText": "I would not hardcode that we always look in System properties then env then default. I would allow the following workflow:\n\nStart from default;\nApply changes from env;\nApply changes from System properties;\n\nBatchSpanProcessor.getBuilder().overwriteFromEnv().overwriteFromSystemProperties().build()\n\nThe default should be the proposed solution but would like if the users can also change this order if needed.\nThoughts on this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r404191097", "createdAt": "2020-04-06T15:40:13Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/common/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.common;\n+\n+import java.util.Map;\n+\n+public abstract class ConfigBuilder {\n+\n+  protected ConfigBuilder() {}\n+\n+  public abstract ConfigBuilder fromConfigMap(Map<String, String> configMap);\n+\n+  public abstract ConfigBuilder fromEnv();\n+\n+  protected boolean getProperty(String name, Map<String, String> map, boolean defaultValue) {\n+    try {\n+      return Boolean.parseBoolean(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }\n+\n+  protected int getProperty(String name, Map<String, String> map, int defaultValue) {\n+    try {\n+      return Integer.parseInt(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }\n+\n+  protected long getProperty(String name, Map<String, String> map, long defaultValue) {\n+    try {\n+      return Long.parseLong(System.getProperty(name, map.get(name)));\n+    } catch (NumberFormatException ex) {\n+      return defaultValue;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDc3NDc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-389477475", "createdAt": "2020-04-07T20:46:38Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0NjozOFrOGCVdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0NjozOFrOGCVdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjAxNA==", "bodyText": "Add a comment about the keys are expected for the map.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102014", "createdAt": "2020-04-07T20:46:38Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDc3OTY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-389477969", "createdAt": "2020-04-07T20:47:22Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0NzoyMlrOGCVfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0NzoyMlrOGCVfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjQzOQ==", "bodyText": "Add a link to the relevant env vars?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102439", "createdAt": "2020-04-07T20:47:22Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromConfigMap(Map<String, String> configMap) {\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n+        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 278}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDc4MzY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-389478366", "createdAt": "2020-04-07T20:47:58Z", "commit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0Nzo1OFrOGCVg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0Nzo1OFrOGCVg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjgxMw==", "bodyText": "javadoc needed here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r405102813", "createdAt": "2020-04-07T20:47:58Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +321,184 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  public static final class Config {\n+    private final long scheduleDelayMillis;\n+    private final int maxQueueSize;\n+    private final int maxExportBatchSize;\n+    private final int exporterTimeoutMillis;\n+    private final boolean sampled;\n+\n+    private Config(\n+        boolean sampled,\n+        long scheduleDelayMillis,\n+        int maxQueueSize,\n+        int maxExportBatchSize,\n+        int exporterTimeoutMillis) {\n+      this.sampled = sampled;\n+      this.scheduleDelayMillis = scheduleDelayMillis;\n+      this.maxQueueSize = maxQueueSize;\n+      this.maxExportBatchSize = maxExportBatchSize;\n+      this.exporterTimeoutMillis = exporterTimeoutMillis;\n+    }\n+\n+    public long getScheduleDelayMillis() {\n+      return scheduleDelayMillis;\n+    }\n+\n+    public int getMaxQueueSize() {\n+      return maxQueueSize;\n+    }\n+\n+    public int getMaxExportBatchSize() {\n+      return maxExportBatchSize;\n+    }\n+\n+    public int getExporterTimeoutMillis() {\n+      return exporterTimeoutMillis;\n+    }\n+\n+    public boolean isReportOnlySampled() {\n+      return sampled;\n+    }\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static class Builder extends ConfigBuilder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"OTEL_BSP_SCHEDULE_DELAY\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"OTEL_BSP_MAX_QUEUE\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"OTEL_BSP_MAX_EXPORT_BATCH\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"OTEL_BSP_EXPORT_TIMEOUT\";\n+      private static final String KEY_SAMPLED = \"OTEL_BSP_REPORT_SAMPLED\";\n+\n+      private static final long SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int MAX_QUEUE_SIZE = 2048;\n+      private static final int MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = REPORT_ONLY_SAMPLED;\n+\n+      /**\n+       * Sets the configuration values from the given configuration map.\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromConfigMap(Map<String, String> configMap) {\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, SCHEDULE_DELAY_MILLIS));\n+        this.setMaxQueueSize(getProperty(KEY_MAX_QUEUE_SIZE, configMap, MAX_QUEUE_SIZE));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, MAX_EXPORT_BATCH_SIZE));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, EXPORT_TIMEOUT_MILLIS));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, REPORT_ONLY_SAMPLED));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables.\n+       *\n+       * @return this.\n+       */\n+      @Override\n+      public Builder fromEnv() {\n+        return fromConfigMap(System.getenv());\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      public Config build() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877de57c2e89d72cf7a6c35f17abc1a80d220969"}, "originalPosition": 362}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjAxNjU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-393201654", "createdAt": "2020-04-14T18:47:21Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0NzoyMVrOGFcNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0NzoyMVrOGFcNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1ODMzMQ==", "bodyText": "So I feel like this could be re-used by other configuration logic. But of course, lets do that in a follow-up PR ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r408358331", "createdAt": "2020-04-14T18:47:21Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 248}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjA1MTE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-393205118", "createdAt": "2020-04-14T18:52:10Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzEyMDIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-394712020", "createdAt": "2020-04-16T14:49:51Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0OTo1MVrOGGpIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTowNDowN1rOGGp11Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxODYzNA==", "bodyText": "I feel that for env we want all uppercase?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409618634", "createdAt": "2020-04-16T14:49:51Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMTQyNw==", "bodyText": "For the moment this can be moved to ENV and make it abstract here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409621427", "createdAt": "2020-04-16T14:53:14Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMjExOA==", "bodyText": "If you do what I suggested this can be removed and becomes internal detail for every enum type.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409622118", "createdAt": "2020-04-16T14:53:59Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNjExNg==", "bodyText": "Can you specify that it sets only the values that are present, otherwise leaves the value untouched?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409626116", "createdAt": "2020-04-16T14:58:56Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODY1MA==", "bodyText": "Iterate over entries not keyset if you need access to the values as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409628650", "createdAt": "2020-04-16T15:02:11Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyODgwMA==", "bodyText": "Do we need to have this public?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409628800", "createdAt": "2020-04-16T15:02:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzMDE2NQ==", "bodyText": "We can use auto-value for this as well to remove a lot of variables end ensure no bugs coming from copy-paste.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409630165", "createdAt": "2020-04-16T15:04:07Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTgzMDYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-394983060", "createdAt": "2020-04-16T20:41:16Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo0MToxN1rOGG2XpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo0MToxN1rOGG2XpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNTQyOQ==", "bodyText": "This document should specify both the env vars, the system properties, and the defaults, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409835429", "createdAt": "2020-04-16T20:41:17Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/package-info.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Utilities that allows different tracing services to export recorded data for sampled spans in\n+ * their own format.\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.SpanExporter}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.SimpleSpansProcessor}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor}\n+ *   <li>{@link io.opentelemetry.sdk.trace.export.MultiSpanExporter}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.export.BatchSpansProcessor}</h2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTkyMDA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-394992009", "createdAt": "2020-04-16T20:55:11Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1NToxMlrOGG2zdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1NToxMlrOGG2zdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjU1MA==", "bodyText": "this class is now over 600 lines long. I think it might be time to break out the Config and the Builder into their own files.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409842550", "createdAt": "2020-04-16T20:55:12Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      private static boolean getProperty(\n+          String name, Map<String, String> map, boolean defaultValue) {\n+        if (map.containsKey(name)) {\n+          return Boolean.parseBoolean(map.get(name));\n+        }\n+        return defaultValue;\n+      }\n+\n+      private static int getProperty(String name, Map<String, String> map, int defaultValue) {\n+        try {\n+          return Integer.parseInt(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      private static long getProperty(String name, Map<String, String> map, long defaultValue) {\n+        try {\n+          return Long.parseLong(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      /**\n+       * Builds the {@link Config} object.\n+       *\n+       * @return the {@link Config} object.\n+       */\n+      public Config build() {\n+        return new AutoValue_BatchSpansProcessor_Config(\n+            sampled, scheduleDelayMillis, maxQueueSize, maxExportBatchSize, exporterTimeoutMillis);\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 466}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTkyNDQz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-394992443", "createdAt": "2020-04-16T20:55:53Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1NTo1M1rOGG203g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1NTo1M1rOGG203g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MjkxMA==", "bodyText": "I'd prefer these methods were named getLongProperty, getIntProperty, etc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409842910", "createdAt": "2020-04-16T20:55:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms\n+       *\n+       * @param exporterTimeoutMillis the timeout for exports in milliseconds.\n+       * @return this\n+       */\n+      public Builder setExporterTimeoutMillis(int exporterTimeoutMillis) {\n+        Utils.checkArgument(\n+            exporterTimeoutMillis >= 0, \"exporterTimeoutMillis must greater than or equal 0.\");\n+        this.exporterTimeoutMillis = exporterTimeoutMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum number of Spans that are kept in the queue before start dropping.\n+       *\n+       * <p>See the BatchSampledSpansProcessor class description for a high-level design description\n+       * of this class.\n+       *\n+       * <p>Default value is {@code 2048}.\n+       *\n+       * @param maxQueueSize the maximum number of Spans that are kept in the queue before start\n+       *     dropping.\n+       * @return this.\n+       */\n+      public Builder setMaxQueueSize(int maxQueueSize) {\n+        Utils.checkArgument(maxQueueSize > 0, \"maxQueueSize must be positive.\");\n+        this.maxQueueSize = maxQueueSize;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum batch size for every export. This must be smaller or equal to {@code\n+       * maxQueuedSpans}.\n+       *\n+       * <p>Default value is {@code 512}.\n+       *\n+       * @param maxExportBatchSize the maximum batch size for every export.\n+       * @return this.\n+       */\n+      public Builder setMaxExportBatchSize(int maxExportBatchSize) {\n+        Utils.checkArgument(maxExportBatchSize > 0, \"maxExportBatchSize must be positive.\");\n+        this.maxExportBatchSize = maxExportBatchSize;\n+        return this;\n+      }\n+\n+      private static boolean getProperty(\n+          String name, Map<String, String> map, boolean defaultValue) {\n+        if (map.containsKey(name)) {\n+          return Boolean.parseBoolean(map.get(name));\n+        }\n+        return defaultValue;\n+      }\n+\n+      private static int getProperty(String name, Map<String, String> map, int defaultValue) {\n+        try {\n+          return Integer.parseInt(map.get(name));\n+        } catch (NumberFormatException ex) {\n+          return defaultValue;\n+        }\n+      }\n+\n+      private static long getProperty(String name, Map<String, String> map, long defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 448}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDI4MDc4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395028078", "createdAt": "2020-04-16T21:57:28Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTo1NzoyOFrOGG4neQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTo1NzoyOFrOGG4neQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg3MjI0OQ==", "bodyText": "can we add a @see that links to the constant, just in case things get out of synch? Also for the other properties.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409872249", "createdAt": "2020-04-16T21:57:28Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties. This method looks for the following\n+       * keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);\n+      }\n+\n+      /**\n+       * Set whether only sampled spans should be reported.\n+       *\n+       * @param sampled report only sampled spans.\n+       * @return this.\n+       */\n+      public Builder reportOnlySampled(boolean sampled) {\n+        this.sampled = sampled;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the delay interval between two consecutive exports. The actual interval may be shorter\n+       * if the batch size is getting larger than {@code maxQueuedSpans / 2}.\n+       *\n+       * <p>Default value is {@code 5000}ms.\n+       *\n+       * @param scheduleDelayMillis the delay interval between two consecutive exports.\n+       * @return this.\n+       */\n+      public Builder setScheduleDelayMillis(long scheduleDelayMillis) {\n+        Utils.checkArgument(\n+            scheduleDelayMillis >= 0, \"scheduleDelayMillis must greater than or equal 0.\");\n+        this.scheduleDelayMillis = scheduleDelayMillis;\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the maximum time an exporter will be allowed to run before being cancelled.\n+       *\n+       * <p>Default value is {@code 30000}ms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 387}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDM4MjI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395038226", "createdAt": "2020-04-16T22:18:20Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoxODoyMFrOGG5KFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoxODoyMFrOGG5KFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MTExMQ==", "bodyText": "Is there any way we can get actually pulling the config from env vars/system properties? I know that's generally a pain, but I don't know if someone had some prior art on making that kind of test to verify that this works for real.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409881111", "createdAt": "2020-04-16T22:18:20Z", "author": {"login": "jkwatson"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessorTest.java", "diffHunk": "@@ -73,6 +75,116 @@ private ReadableSpan createSampledEndedSpan(String spanName) {\n     return (ReadableSpan) span;\n   }\n \n+  @Test\n+  public void testConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDM5MzA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395039308", "createdAt": "2020-04-16T22:20:44Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMDo0NFrOGG5N6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMDo0NFrOGG5N6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjA5MQ==", "bodyText": "Can we add a wee bit of clarification that the system property will override the environment values?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882091", "createdAt": "2020-04-16T22:20:44Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDM5NTgw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395039580", "createdAt": "2020-04-16T22:21:19Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMToxOVrOGG5O0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMToxOVrOGG5O0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjMyMg==", "bodyText": "extra normalize here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882322", "createdAt": "2020-04-16T22:21:19Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 308}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDM5OTkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395039991", "createdAt": "2020-04-16T22:22:08Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMjowOFrOGG5QJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyMjowOFrOGG5QJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MjY2MA==", "bodyText": "how about renaming to readFromEnvironment or readEnvironment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409882660", "createdAt": "2020-04-16T22:22:08Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {\n+      return new Builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values first from the environment\n+     * and then from system properties. If a configuration value is missing, it uses the default\n+     * value.\n+     *\n+     * @return The {@link Config} object.\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return new Builder().readEnv().readSystemProperties().build();\n+    }\n+\n+    public static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    public static final class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.report.sampled\";\n+\n+      private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+      private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+      private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+      private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+      private static final boolean DEFAULT_REPORT_ONLY_SAMPLED = true;\n+\n+      private long scheduleDelayMillis = DEFAULT_SCHEDULE_DELAY_MILLIS;\n+      private int maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n+      private int maxExportBatchSize = DEFAULT_MAX_EXPORT_BATCH_SIZE;\n+      private int exporterTimeoutMillis = DEFAULT_EXPORT_TIMEOUT_MILLIS;\n+      private boolean sampled = DEFAULT_REPORT_ONLY_SAMPLED;\n+\n+      enum NamingConvention {\n+        DOT {\n+          @Override\n+          protected char getSeparator() {\n+            return '.';\n+          }\n+\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Override\n+          protected char getSeparator() {\n+            return '_';\n+          }\n+        };\n+\n+        @Nonnull\n+        public String normalize(@Nonnull String key) {\n+          return key.toLowerCase().replace(getSeparator(), DOT.getSeparator());\n+        }\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (String key : map.keySet()) {\n+            properties.put(normalize(key), map.get(key));\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+\n+        protected abstract char getSeparator();\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.report.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder fromConfigMap(\n+          Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        this.setScheduleDelayMillis(\n+            getProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap, this.scheduleDelayMillis));\n+        this.setMaxQueueSize(\n+            getProperty(\n+                namingConvention.normalize(KEY_MAX_QUEUE_SIZE), configMap, this.maxQueueSize));\n+        this.setMaxExportBatchSize(\n+            getProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap, this.maxExportBatchSize));\n+        this.setExporterTimeoutMillis(\n+            getProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap, this.exporterTimeoutMillis));\n+        this.reportOnlySampled(getProperty(KEY_SAMPLED, configMap, this.sampled));\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables. This method looks for the\n+       * following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_REPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnv() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 333}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDQxMzM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395041338", "createdAt": "2020-04-16T22:25:05Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyNTowNVrOGG5Uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyNTowNVrOGG5Uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4MzgzNA==", "bodyText": "javadoc needed here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409883834", "createdAt": "2020-04-16T22:25:05Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    public static Config getDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 209}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDQxNjk1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-395041695", "createdAt": "2020-04-16T22:25:50Z", "commit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyNTo1MVrOGG5V1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyNTo1MVrOGG5V1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDExOA==", "bodyText": "how about exportOnlySampled() as the name for this? report isn't a term that shows up anywhere else that I know of.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r409884118", "createdAt": "2020-04-16T22:25:51Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +324,277 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    public abstract boolean isReportOnlySampled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3677cea9c4e1663924f2bc74f68d1d5cbb8eb22b"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTYwNzQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-396560746", "createdAt": "2020-04-20T15:25:28Z", "commit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyNToyOVrOGIaHfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTozODoxNlrOGIavNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2OTY5Mg==", "bodyText": "I think we use the convention newBuilder for this case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411469692", "createdAt": "2020-04-20T15:25:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTA2OQ==", "bodyText": "We don't use the @Nonnull convention. Please avoid adding this new convention yet.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411471069", "createdAt": "2020-04-20T15:27:15Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NzYxNw==", "bodyText": "Why do you not call fromConfigMap? Seems a lot of duplicated code. Do I miss anything? If yes maybe a comment would help others to also understand.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411477617", "createdAt": "2020-04-20T15:35:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull\n+        public abstract String normalize(@Nonnull String key);\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder readProperties(Properties properties) {\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, properties);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, properties);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, properties);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODE4Ng==", "bodyText": "return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411478186", "createdAt": "2020-04-20T15:36:06Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull\n+        public abstract String normalize(@Nonnull String key);\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder readProperties(Properties properties) {\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, properties);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, properties);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, properties);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3NzYxNw=="}, "originalCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTg2MA==", "bodyText": "Would call return readProperties(System.getProperties())", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#discussion_r411479860", "createdAt": "2020-04-20T15:38:16Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java", "diffHunk": "@@ -411,4 +327,372 @@ public void run() {\n       }\n     }\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Config {\n+\n+    private static final long DEFAULT_SCHEDULE_DELAY_MILLIS = 5000;\n+    private static final int DEFAULT_MAX_QUEUE_SIZE = 2048;\n+    private static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;\n+    private static final int DEFAULT_EXPORT_TIMEOUT_MILLIS = 30_000;\n+    private static final boolean DEFAULT_EXPORT_ONLY_SAMPLED = true;\n+\n+    public abstract boolean isExportOnlySampled();\n+\n+    public abstract long getScheduleDelayMillis();\n+\n+    public abstract int getMaxQueueSize();\n+\n+    public abstract int getMaxExportBatchSize();\n+\n+    public abstract int getExporterTimeoutMillis();\n+\n+    /**\n+     * Creates a {@link Config} object using the default configuration.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config getDefault() {\n+      return builder().build();\n+    }\n+\n+    /**\n+     * Creates a {@link Config} object reading the configuration values from the environment and\n+     * from system properties. System properties override values defined in the environment. If a\n+     * configuration value is missing, it uses the default value.\n+     *\n+     * @return The {@link Config} object.\n+     * @since 0.4.0\n+     */\n+    public static Config loadFromDefaultSources() {\n+      return builder().readEnvironment().readSystemProperties().build();\n+    }\n+\n+    /**\n+     * Returns a new {@link Builder} with default options.\n+     *\n+     * @return a new {@code Builder} with default options.\n+     * @since 0.4.0\n+     */\n+    public static Builder builder() {\n+      return new AutoValue_BatchSpansProcessor_Config.Builder()\n+          .setScheduleDelayMillis(DEFAULT_SCHEDULE_DELAY_MILLIS)\n+          .setMaxQueueSize(DEFAULT_MAX_QUEUE_SIZE)\n+          .setMaxExportBatchSize(DEFAULT_MAX_EXPORT_BATCH_SIZE)\n+          .setExporterTimeoutMillis(DEFAULT_EXPORT_TIMEOUT_MILLIS)\n+          .setExportOnlySampled(DEFAULT_EXPORT_ONLY_SAMPLED);\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+\n+      private static final String KEY_SCHEDULE_DELAY_MILLIS = \"otel.bsp.schedule.delay\";\n+      private static final String KEY_MAX_QUEUE_SIZE = \"otel.bsp.max.queue\";\n+      private static final String KEY_MAX_EXPORT_BATCH_SIZE = \"otel.bsp.max.export.batch\";\n+      private static final String KEY_EXPORT_TIMEOUT_MILLIS = \"otel.bsp.export.timeout\";\n+      private static final String KEY_SAMPLED = \"otel.bsp.export.sampled\";\n+\n+      @VisibleForTesting\n+      protected enum NamingConvention {\n+        DOT {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase();\n+          }\n+        },\n+        ENV_VAR {\n+          @Nonnull\n+          @Override\n+          public String normalize(@Nonnull String key) {\n+            return key.toLowerCase().replace(\"_\", \".\");\n+          }\n+        };\n+\n+        @Nonnull\n+        public abstract String normalize(@Nonnull String key);\n+\n+        public Map<String, String> normalize(@Nonnull Map<String, String> map) {\n+          Map<String, String> properties = new HashMap<>();\n+          for (Map.Entry<String, String> entry : map.entrySet()) {\n+            properties.put(normalize(entry.getKey()), entry.getValue());\n+          }\n+          return Collections.unmodifiableMap(properties);\n+        }\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given configuration map for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param configMap {@link Map} holding the configuration values.\n+       * @return this.\n+       */\n+      @VisibleForTesting\n+      Builder fromConfigMap(Map<String, String> configMap, NamingConvention namingConvention) {\n+        configMap = namingConvention.normalize(configMap);\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, configMap);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, configMap);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, configMap);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, configMap);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from the given properties object for only the available keys.\n+       * This method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @param properties {@link Properties} holding the configuration values.\n+       * @return this.\n+       */\n+      public Builder readProperties(Properties properties) {\n+        Long longValue = getLongProperty(KEY_SCHEDULE_DELAY_MILLIS, properties);\n+        if (longValue != null) {\n+          this.setScheduleDelayMillis(longValue);\n+        }\n+        Integer intValue = getIntProperty(KEY_MAX_QUEUE_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxQueueSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_MAX_EXPORT_BATCH_SIZE, properties);\n+        if (intValue != null) {\n+          this.setMaxExportBatchSize(intValue);\n+        }\n+        intValue = getIntProperty(KEY_EXPORT_TIMEOUT_MILLIS, properties);\n+        if (intValue != null) {\n+          this.setExporterTimeoutMillis(intValue);\n+        }\n+        Boolean boolValue = getBooleanProperty(KEY_SAMPLED, properties);\n+        if (boolValue != null) {\n+          this.setExportOnlySampled(boolValue);\n+        }\n+        return this;\n+      }\n+\n+      /**\n+       * Sets the configuration values from environment variables for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code OTEL_BSP_SCHEDULE_DELAY}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code OTEL_BSP_MAX_QUEUE}: to set the maximum queue size.\n+       *   <li>{@code OTEL_BSP_MAX_EXPORT_BATCH}: to set the maximum batch size.\n+       *   <li>{@code OTEL_BSP_EXPORT_TIMEOUT}: to set the maximum allowed time to export data.\n+       *   <li>{@code OTEL_BSP_EXPORT_SAMPLED}: to set whether only sampled spans should be\n+       *       exported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readEnvironment() {\n+        return fromConfigMap(System.getenv(), NamingConvention.ENV_VAR);\n+      }\n+\n+      /**\n+       * Sets the configuration values from system properties for only the available keys. This\n+       * method looks for the following keys:\n+       *\n+       * <ul>\n+       *   <li>{@code otel.bsp.schedule.delay}: to set the delay interval between two consecutive\n+       *       exports.\n+       *   <li>{@code otel.bsp.max.queue}: to set the maximum queue size.\n+       *   <li>{@code otel.bsp.max.export.batch}: to set the maximum batch size.\n+       *   <li>{@code otel.bsp.export.timeout}: to set the maximum allowed time to export data.\n+       *   <li>{@code otel.bsp.export.sampled}: to set whether only sampled spans should be\n+       *       reported.\n+       * </ul>\n+       *\n+       * @return this.\n+       */\n+      public Builder readSystemProperties() {\n+        return fromConfigMap(Maps.fromProperties(System.getProperties()), NamingConvention.DOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "originalPosition": 414}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDY5NTM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-397469535", "createdAt": "2020-04-21T16:26:40Z", "commit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTA4NjMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1080#pullrequestreview-397508630", "createdAt": "2020-04-21T17:13:42Z", "commit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a0a5b0b6e16176445c91d26e1fcc9e326c5ff05", "committedDate": "2020-04-18T09:31:05Z", "message": "Better handling of properties"}, "afterCommit": {"oid": "fc02ade502a55a23264b30456fe4d08b557b69ea", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc02ade502a55a23264b30456fe4d08b557b69ea", "committedDate": "2020-04-22T06:42:51Z", "message": "Implement Configuration for BatchSpanProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5671f56450ed0ef71548c0b57f6a1bf43f6ee191", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5671f56450ed0ef71548c0b57f6a1bf43f6ee191", "committedDate": "2020-04-22T07:11:48Z", "message": "Add config class for BatchSpanProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9982c8f9cc71bf12ace644e57238569ea84c4014", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9982c8f9cc71bf12ace644e57238569ea84c4014", "committedDate": "2020-04-22T07:13:18Z", "message": "Implement Configuration for BatchSpanProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a4741b419a5e57a027f7c5997c506b95c0f0fa", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67a4741b419a5e57a027f7c5997c506b95c0f0fa", "committedDate": "2020-04-22T07:15:27Z", "message": "goJF after rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc02ade502a55a23264b30456fe4d08b557b69ea", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc02ade502a55a23264b30456fe4d08b557b69ea", "committedDate": "2020-04-22T06:42:51Z", "message": "Implement Configuration for BatchSpanProcessor"}, "afterCommit": {"oid": "67a4741b419a5e57a027f7c5997c506b95c0f0fa", "author": {"user": {"login": "thisthat", "name": "Giovanni Liva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/67a4741b419a5e57a027f7c5997c506b95c0f0fa", "committedDate": "2020-04-22T07:15:27Z", "message": "goJF after rebase"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2923, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}