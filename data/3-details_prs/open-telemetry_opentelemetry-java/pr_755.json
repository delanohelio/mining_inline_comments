{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjk5MzQw", "number": 755, "title": "The basics for a double counter", "bodyText": "I debated introducing more class hierarchy around the monotonic field and decided to not do that for now. It could be easily retrofitted if we think saving one boolean is worth the additional complication of another layer in the hierarchy.", "createdAt": "2020-01-14T15:35:39Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755", "merged": true, "mergeCommit": {"oid": "eeb9406e2dc79c5042055d49da7d6f3531a9e30a"}, "closed": true, "closedAt": "2020-01-14T18:58:47Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6SuXIAH2gAyMzYyNjk5MzQwOmJlMGQ5ODYwNWY2NjNlMDNkZWM2NWQ2NzUyY2FlZTE4ZDk1MDU5MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6VsDwAFqTM0Mjc2NDUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "be0d98605f663e03dec65d6752caee18d9505909", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be0d98605f663e03dec65d6752caee18d9505909", "committedDate": "2020-01-14T15:31:28Z", "message": "WIP on a double counter shell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eacea3726d34e18115fa34059b459ac6f269998", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9eacea3726d34e18115fa34059b459ac6f269998", "committedDate": "2020-01-14T15:31:28Z", "message": "tests for the double counter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ccaa9e3656466236c65dea850b3a87a763a128b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ccaa9e3656466236c65dea850b3a87a763a128b", "committedDate": "2020-01-14T15:42:20Z", "message": "actually add the double counter code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjQzMzU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#pullrequestreview-342643358", "createdAt": "2020-01-14T15:58:54Z", "commit": {"oid": "8ccaa9e3656466236c65dea850b3a87a763a128b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTo1ODo1NFrOFdcqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTo1ODo1NFrOFdcqZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMjYzMA==", "bodyText": "just Builder? We will use this as SdkDoubleCounter.Builder", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#discussion_r366422630", "createdAt": "2020-01-14T15:58:54Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/SdkDoubleCounter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+class SdkDoubleCounter extends BaseInstrument<BoundDoubleCounter> implements DoubleCounter {\n+\n+  private final boolean monotonic;\n+\n+  private SdkDoubleCounter(\n+      String name,\n+      String description,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      boolean monotonic) {\n+    super(name, description, constantLabels, labelKeys);\n+    this.monotonic = monotonic;\n+  }\n+\n+  @Override\n+  public void add(double delta, LabelSet labelSet) {\n+    createBoundInstrument(labelSet).add(delta);\n+  }\n+\n+  @Override\n+  BoundDoubleCounter createBoundInstrument(LabelSet labelSet) {\n+    return new SdkBoundDoubleCounter(labelSet, monotonic);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SdkDoubleCounter)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    SdkDoubleCounter that = (SdkDoubleCounter) o;\n+\n+    return monotonic == that.monotonic;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = super.hashCode();\n+    result = 31 * result + (monotonic ? 1 : 0);\n+    return result;\n+  }\n+\n+  private static class SdkBoundDoubleCounter extends BaseBoundInstrument\n+      implements BoundDoubleCounter {\n+\n+    private final boolean monotonic;\n+\n+    SdkBoundDoubleCounter(LabelSet labels, boolean monotonic) {\n+      super(labels);\n+      this.monotonic = monotonic;\n+    }\n+\n+    @Override\n+    public void add(double delta) {\n+      if (monotonic && delta < 0) {\n+        throw new IllegalArgumentException(\"monotonic counters can only increase\");\n+      }\n+      // todo: pass through to an aggregator/accumulator\n+    }\n+  }\n+\n+  static class SdkDoubleCounterBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccaa9e3656466236c65dea850b3a87a763a128b"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "358cf727e7cc331f553dacd5ddcb79c25b990761", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/358cf727e7cc331f553dacd5ddcb79c25b990761", "committedDate": "2020-01-14T18:42:46Z", "message": "rename to just `Builder` for the two counter builders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzY0NTI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#pullrequestreview-342764525", "createdAt": "2020-01-14T18:58:40Z", "commit": {"oid": "358cf727e7cc331f553dacd5ddcb79c25b990761"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3445, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}