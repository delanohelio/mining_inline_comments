{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjM2NjA4", "number": 951, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxOToyM1rODj-nvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNzo1MjoyNVrODkCN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDUyNzM1OnYy", "diffSide": "RIGHT", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxOToyM1rOFwFeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo1NTo0N1rOFwnQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ==", "bodyText": "I think we should plugin this with the interval reader so that it prints periodically to the logs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385965609", "createdAt": "2020-02-28T23:19:23Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Njk0Mw==", "bodyText": "I think so too. Wasn't sure if it should be part of this PR, or a follow-on.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385966943", "createdAt": "2020-02-28T23:24:29Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Njk5Mw==", "bodyText": "also, that hasn't been merged yet. ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385966993", "createdAt": "2020-02-28T23:24:45Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1OTY5OA==", "bodyText": "Hey, what do you think about using the {} placeholder? just to avoid the toString in case of warn log level", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386059698", "createdAt": "2020-02-29T22:22:17Z", "author": {"login": "davebarda"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTE1NQ==", "bodyText": "Probably not a big deal with this particular use-case, since these exporters aren't really meant to be used outside of experimental/demo cases, and not in production. I can put a PR in to change them, though, as it is better to demonstrate the proper usage.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386519155", "createdAt": "2020-03-02T16:55:47Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDYxMjk0OnYy", "diffSide": "RIGHT", "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoyMDowMFrOFwGQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMjo1Mzo1MlrOFwHQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODU5Nw==", "bodyText": "Please add the comment for the test class :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385978597", "createdAt": "2020-02-29T00:20:00Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.metrics.data.MetricData.SummaryPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.ValueAtPercentile;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.AttributeValue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class LoggingMetricExporterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDc5Nw==", "bodyText": "Can do. But, is there a reason why we're doing this? I've literally never seen this done before.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385994797", "createdAt": "2020-02-29T02:53:52Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.metrics.data.MetricData.SummaryPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.ValueAtPercentile;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.AttributeValue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class LoggingMetricExporterTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODU5Nw=="}, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTExNjQxOnYy", "diffSide": "RIGHT", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNzo1MjoyNVrOFwKQxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo1NDo0NVrOFwnNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw==", "bodyText": "not sure if we follow the standard of uppercase for static final?\nchange to LOGGER?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386044103", "createdAt": "2020-02-29T17:52:25Z", "author": {"login": "sfriberg"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0OTIxNw==", "bodyText": "The standard says to use upper case for immutable classes, and not sure if Logger is", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386049217", "createdAt": "2020-02-29T19:16:48Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NDIwMA==", "bodyText": "??? citation needed.\nWhat standard is this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386054200", "createdAt": "2020-02-29T20:38:34Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODYyMw==", "bodyText": "https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names\nDidn't know it also took the object immutability into account.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386058623", "createdAt": "2020-02-29T22:01:16Z", "author": {"login": "sfriberg"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyNTIxNg==", "bodyText": "@jkwatson here is the prof that we use that standard :) https://github.com/open-telemetry/opentelemetry-java/blob/master/CONTRIBUTING.md#style-guideline", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386125216", "createdAt": "2020-03-01T17:26:06Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxODQ2OA==", "bodyText": "Interesting. Yes, loggers are definitely not side-effect free, so not \"immutable\" by this definition, I guess? Thanks for the links!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386518468", "createdAt": "2020-03-02T16:54:45Z", "author": {"login": "jkwatson"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 941, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}