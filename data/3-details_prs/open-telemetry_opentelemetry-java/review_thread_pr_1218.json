{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDkwNTY4", "number": 1218, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMTo0NlrOD8i7Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyNDo1NFrOD8q3Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODEzMzg3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMTo0NlrOGVjToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxMToxM1rOGVjs0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MTc0NA==", "bodyText": "This is not the right annotation", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425251744", "createdAt": "2020-05-14T16:01:46Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -16,63 +16,54 @@\n \n package io.opentelemetry.sdk.trace.data;\n \n-import com.google.auto.value.AutoValue;\n import io.opentelemetry.common.AttributeValue;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.resources.Resource;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n-import io.opentelemetry.trace.Event;\n import io.opentelemetry.trace.Span.Kind;\n-import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.annotation.concurrent.Immutable;\n+import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1ODE5NA==", "bodyText": "yep. fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425258194", "createdAt": "2020-05-14T16:11:13Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -16,63 +16,54 @@\n \n package io.opentelemetry.sdk.trace.data;\n \n-import com.google.auto.value.AutoValue;\n import io.opentelemetry.common.AttributeValue;\n import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n import io.opentelemetry.sdk.resources.Resource;\n import io.opentelemetry.sdk.trace.config.TraceConfig;\n-import io.opentelemetry.trace.Event;\n import io.opentelemetry.trace.Span.Kind;\n-import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.Status;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.annotation.concurrent.Immutable;\n+import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MTc0NA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODE0MzE5OnYy", "diffSide": "RIGHT", "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowNDoxM1rOGVjZvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMToyOVrOGVkIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA==", "bodyText": "Use singletonList here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425253308", "createdAt": "2020-05-14T16:04:13Z", "author": {"login": "bogdandrutu"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1NzEwNg==", "bodyText": "better than a single-item set? Since it takes Collection, either should work, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425257106", "createdAt": "2020-05-14T16:09:42Z", "author": {"login": "jkwatson"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MTE2NQ==", "bodyText": "Correct just that list seems lightweight compared to set :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425261165", "createdAt": "2020-05-14T16:15:32Z", "author": {"login": "bogdandrutu"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MTgzNQ==", "bodyText": "if you look at the implementation of singleton, I think it's about as lightweight as it's possible to be. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425261835", "createdAt": "2020-05-14T16:16:23Z", "author": {"login": "jkwatson"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Mjc2Mw==", "bodyText": "implementation-wise, they're really just a wrapper for a single data item. I like using singleton as it's 4 less characters than singletonList. But, honestly, I don't care all that much, either way.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425262763", "createdAt": "2020-05-14T16:17:36Z", "author": {"login": "jkwatson"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTM1MA==", "bodyText": "Leave it as it is, for me was just reading the code and found this inconsistencies, so was more like this is not what I was expecting.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425265350", "createdAt": "2020-05-14T16:21:29Z", "author": {"login": "bogdandrutu"}, "path": "exporters/zipkin/src/test/java/io/opentelemetry/exporters/zipkin/ZipkinSpanExporterTest.java", "diffHunk": "@@ -236,7 +238,7 @@ public void testExport_failed() throws IOException {\n     when(mockZipkinCall.execute()).thenThrow(new IOException());\n \n     ResultCode resultCode =\n-        zipkinSpanExporter.export(Collections.singleton(buildStandardSpan().build()));\n+        zipkinSpanExporter.export(Collections.<SpanData>singleton(buildStandardSpan().build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzMwOA=="}, "originalCommit": {"oid": "8614675804e6c0c91d5338a5c4caf53455a64de9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODkwNzY2OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanDataImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOToyOTowOFrOGVrHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0Nzo0OVrOGVrtXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3OTYzMA==", "bodyText": "What about moving this into a testing package and maybe rename to SpanData or TestingSpanData?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425379630", "createdAt": "2020-05-14T19:29:08Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanDataImpl.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Immutable representation of all data collected by the {@link io.opentelemetry.trace.Span} class.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class SpanDataImpl implements SpanData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTQwNg==", "bodyText": "I agree; I'd like to do that when we stop using it as the representation that's used by the RERS. Until then, it is the only implementation we have.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425389406", "createdAt": "2020-05-14T19:47:49Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/SpanDataImpl.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Immutable representation of all data collected by the {@link io.opentelemetry.trace.Span} class.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class SpanDataImpl implements SpanData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3OTYzMA=="}, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODkxMTUyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/LinkData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTozMDoyOFrOGVrJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0ODoyMlrOGVruiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDI3OA==", "bodyText": "This is inconsistent, SpanData represents the interface to access recorded properties to the Span, but LinkData represents a concrete implementation of the Link interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425380278", "createdAt": "2020-05-14T19:30:28Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/LinkData.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable implementation of {@link Link}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class LinkData implements Link {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTcwNQ==", "bodyText": "Totally agree. Do you have ideas on better naming? I didn't like \"Link\" which is what it was before. And, we already have another class called \"TimedEvent\" for the other case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425389705", "createdAt": "2020-05-14T19:48:22Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/data/LinkData.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace.data;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An immutable implementation of {@link Link}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+@AutoValue\n+public abstract class LinkData implements Link {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDI3OA=="}, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTQzMzgzOnYy", "diffSide": "LEFT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyNDo1NFrOGVwTzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjo1NzoxNVrOGVw9uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NDc4MA==", "bodyText": "Eh, wondering how we ended up with this one here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425464780", "createdAt": "2020-05-14T22:24:54Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -29,7 +29,7 @@\n import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ3NTUxMw==", "bodyText": "it's easy to have IDEA import the wrong one. I did it early in this PR, myself. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1218#discussion_r425475513", "createdAt": "2020-05-14T22:57:15Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpansProcessor.java", "diffHunk": "@@ -29,7 +29,7 @@\n import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import jdk.nashorn.internal.ir.annotations.Immutable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NDc4MA=="}, "originalCommit": {"oid": "5c6cf8b201f43e813c8b2a859230805a0d1aae5a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 668, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}