{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzQzMDQx", "number": 864, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODoyNDoxM1rODgK8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODoyNDoxM1rODgK8Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDYwMzEwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODoyNDoxM1rOFqQDHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQyMTowODoxN1rOFqQlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NzQ1Mw==", "bodyText": "this is missing the instrumentValueType in the hashcode. intentional?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/864#discussion_r379847453", "createdAt": "2020-02-15T18:24:13Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AbstractCounter<B extends AbstractBoundInstrument> extends AbstractInstrument {\n+  private final boolean monotonic;\n+  private final InstrumentValueType instrumentValueType;\n+\n+  AbstractCounter(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      InstrumentValueType instrumentValueType,\n+      MeterSharedState meterSharedState,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      boolean monotonic) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    this.monotonic = monotonic;\n+    this.instrumentValueType = instrumentValueType;\n+  }\n+\n+  final boolean isMonotonic() {\n+    return monotonic;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AbstractCounter)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    AbstractCounter<?> that = (AbstractCounter<?>) o;\n+\n+    return monotonic == that.monotonic && instrumentValueType == that.instrumentValueType;\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ce268492be993bd526be956fd35d9f1657fadd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjE4OQ==", "bodyText": "Nice catch, as a punishment added tests for equals and hashcode :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/864#discussion_r379856189", "createdAt": "2020-02-15T21:08:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AbstractCounter<B extends AbstractBoundInstrument> extends AbstractInstrument {\n+  private final boolean monotonic;\n+  private final InstrumentValueType instrumentValueType;\n+\n+  AbstractCounter(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      InstrumentValueType instrumentValueType,\n+      MeterSharedState meterSharedState,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      boolean monotonic) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    this.monotonic = monotonic;\n+    this.instrumentValueType = instrumentValueType;\n+  }\n+\n+  final boolean isMonotonic() {\n+    return monotonic;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AbstractCounter)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    AbstractCounter<?> that = (AbstractCounter<?>) o;\n+\n+    return monotonic == that.monotonic && instrumentValueType == that.instrumentValueType;\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NzQ1Mw=="}, "originalCommit": {"oid": "a8ce268492be993bd526be956fd35d9f1657fadd"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1102, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}