{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODA1MzUz", "number": 1880, "title": "Add a JUnit5 extension for setting up OpenTelemetry in a test.", "bodyText": "It's good if we can provide some test helpers for OpenTelemetry adopters. Started with a junit5 extension, would add a junit4 rule and move TestSpanData in in followups if this makes sense.\nI just replaced one test for now though I'd probably remove InMemoryTracing from the exporter package in favor of these testing utilities instead.", "createdAt": "2020-10-26T06:47:02Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880", "merged": true, "mergeCommit": {"oid": "a506b3a695a36f581373821df857c59731e9fd13"}, "closed": true, "closedAt": "2020-10-28T00:01:21Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWOn7RgH2gAyNTA5ODA1MzUzOjI3NTdkNjZjZjc2Njk4Njg0Zjk0ZmQzM2M2NDZlMzdjYmIyYWRmNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWx0u9gH2gAyNTA5ODA1MzUzOmIwMWYwYjg1OWZmZDhmZjRkMDcwOTYwNTJhYWQ0NzMwZWQ1ZWM0Y2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2757d66cf76698684f94fd33c646e37cbb2adf69", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2757d66cf76698684f94fd33c646e37cbb2adf69", "committedDate": "2020-10-26T06:45:51Z", "message": "Add a JUnit5 extension for setting up OpenTelemetry in a test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd6cffcfe8d8db6a43aa63534b68d49b2186aa31", "committedDate": "2020-10-26T06:50:07Z", "message": "git add"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTE4Mzgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#pullrequestreview-516518382", "createdAt": "2020-10-26T07:31:05Z", "commit": {"oid": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODk2NzI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#pullrequestreview-516896726", "createdAt": "2020-10-26T15:27:55Z", "commit": {"oid": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyNzo1NlrOHoVEBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyNzo1NlrOHoVEBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDE4Mw==", "bodyText": "Should we return OpenTelemetry, rather than SDK, so people don't create tracers using the SDK directly and expect that to be the normal way to operate? We could have a separate method that returns the TracerManagement interface, perhaps?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512050183", "createdAt": "2020-10-26T15:27:56Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n+ * between tests.\n+ *\n+ * <pre>{@code\n+ * > class CoolTest {\n+ * >   {@literal @}RegisterExtension\n+ * >   static final OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private final Tracer tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >\n+ * >   {@literal @}Test\n+ * >   void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan();\n+ * >     assertThat(otelTesting.getSpans()).containsExactly(expected);\n+ * >   }\n+ * >  }\n+ * }</pre>\n+ */\n+public class OpenTelemetryExtension\n+    implements BeforeEachCallback, BeforeAllCallback, AfterAllCallback {\n+\n+  /**\n+   * Returns a {@link OpenTelemetryExtension} with a default SDK initialized with an in-memory span\n+   * exporter and W3C trace context propagation.\n+   */\n+  public static OpenTelemetryExtension create() {\n+    InMemorySpanExporter spanExporter = InMemorySpanExporter.create();\n+\n+    TracerSdkProvider tracerProvider = TracerSdkProvider.builder().build();\n+    tracerProvider.addSpanProcessor(SimpleSpanProcessor.builder(spanExporter).build());\n+\n+    OpenTelemetrySdk openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setPropagators(\n+                DefaultContextPropagators.builder()\n+                    .addTextMapPropagator(HttpTraceContext.getInstance())\n+                    .build())\n+            .setTracerProvider(tracerProvider)\n+            .build();\n+\n+    return new OpenTelemetryExtension(openTelemetry, spanExporter);\n+  }\n+\n+  private final OpenTelemetrySdk openTelemetry;\n+  private final InMemorySpanExporter spanExporter;\n+\n+  private OpenTelemetry previousGlobalOpenTelemetry;\n+\n+  private OpenTelemetryExtension(\n+      OpenTelemetrySdk openTelemetry, InMemorySpanExporter spanExporter) {\n+    this.openTelemetry = openTelemetry;\n+    this.spanExporter = spanExporter;\n+  }\n+\n+  /** Returns the {@link OpenTelemetrySdk} created by this extension. */\n+  public OpenTelemetrySdk getOpenTelemetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6cffcfe8d8db6a43aa63534b68d49b2186aa31"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2", "committedDate": "2020-10-27T07:32:19Z", "message": "Split API and management accessors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTc1NTc2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#pullrequestreview-517575576", "createdAt": "2020-10-27T10:56:12Z", "commit": {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo1NjoxMlrOHo2Kmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo1OTozOFrOHo2VVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MjUzOQ==", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n          \n          \n            \n             * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, and resetting state", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512592539", "createdAt": "2020-10-27T10:56:12Z", "author": {"login": "thisthat"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5NTI4NQ==", "bodyText": "Maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * >     tracer.spanBuilder(\"name\").startSpan();\n          \n          \n            \n             * >     tracer.spanBuilder(\"name\").startSpan().end();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#discussion_r512595285", "createdAt": "2020-10-27T10:59:38Z", "author": {"login": "thisthat"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.testing.junit5;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.exporters.inmemory.InMemorySpanExporter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.TracerSdkProvider;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * A JUnit5 extension which sets up the {@link OpenTelemetrySdk} for testing, resetting state\n+ * between tests.\n+ *\n+ * <pre>{@code\n+ * > class CoolTest {\n+ * >   {@literal @}RegisterExtension\n+ * >   static final OpenTelemetryExtension otelTesting = OpenTelemetryExtension.create();\n+ * >\n+ * >   private final Tracer tracer = otelTesting.getOpenTelemetry().getTracer(\"test\");\n+ * >\n+ * >   {@literal @}Test\n+ * >   void test() {\n+ * >     tracer.spanBuilder(\"name\").startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODY1NzEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1880#pullrequestreview-517865710", "createdAt": "2020-10-27T15:52:58Z", "commit": {"oid": "7f2dcfdab86d96eb1c755e81ebbc1b9e42c387d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7194847c8c3ff286964086c1f95f640b3ff5ffe", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7194847c8c3ff286964086c1f95f640b3ff5ffe", "committedDate": "2020-10-27T23:40:32Z", "message": "Update sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198f6d871dcc86f483a72acfb1e131748e573776", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/198f6d871dcc86f483a72acfb1e131748e573776", "committedDate": "2020-10-27T23:42:31Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into junit5-extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01f0b859ffd8ff4d07096052aad4730ed5ec4cb", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b01f0b859ffd8ff4d07096052aad4730ed5ec4cb", "committedDate": "2020-10-27T23:46:31Z", "message": "Merge branch 'junit5-extension' of github.com:anuraaga/opentelemetry-java into junit5-extension"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4144, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}