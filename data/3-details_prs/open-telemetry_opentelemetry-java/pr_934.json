{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDE3NDM5", "number": 934, "title": "Small cleanups in async processor", "bodyText": "", "createdAt": "2020-02-26T17:41:17Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934", "merged": true, "mergeCommit": {"oid": "c80d7f7a763f0261ad100034f8eae39fdcb0360f"}, "closed": true, "closedAt": "2020-02-27T23:42:02Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIKfMeAFqTM2NTExMjE4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIMxoigBqjMwNzUzMTU5NDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTEyMTg5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#pullrequestreview-365112189", "createdAt": "2020-02-26T17:50:36Z", "commit": {"oid": "a14489025ead6072043d16ecff0155edca74114f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo1MDozNlrOFu1zEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo1MDozNlrOFu1zEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MDI0MA==", "bodyText": "this is duplicated code. can it be moved to a method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384660240", "createdAt": "2020-02-26T17:50:36Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -102,73 +102,82 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueue(ReadableSpan readableSpan, EventType eventType) {\n-    enqueue(readableSpan, eventType, null);\n-  }\n-\n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n-  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+  void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n       }\n       return;\n     }\n+    enqueue(EventType.ON_START, span, null);\n+  }\n \n-    if (blocking) {\n-      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n-    } else {\n-      // TODO: Record metrics if element not added.\n-      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n+  void enqueueEndEvent(ReadableSpan span) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a14489025ead6072043d16ecff0155edca74114f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTE1ODk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#pullrequestreview-365115897", "createdAt": "2020-02-26T17:55:51Z", "commit": {"oid": "a14489025ead6072043d16ecff0155edca74114f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo1NTo1MVrOFu1-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo1NTo1MVrOFu1-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2MzA5NQ==", "bodyText": "synchronizing on this is potentially dangerous, as you don't have control over who else might try to grab your monitor and keep this from ever executing.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#discussion_r384663095", "createdAt": "2020-02-26T17:55:51Z", "author": {"login": "jkwatson"}, "path": "sdk_contrib/async_processor/src/main/java/io/opentelemetry/sdk/contrib/trace/export/DisruptorEventQueue.java", "diffHunk": "@@ -102,73 +102,82 @@ public DisruptorEvent newInstance() {\n     this.blocking = blocking;\n   }\n \n-  void enqueue(ReadableSpan readableSpan, EventType eventType) {\n-    enqueue(readableSpan, eventType, null);\n-  }\n-\n-  // Enqueues an event on the {@link DisruptorEventQueue}.\n-  void enqueue(ReadableSpan readableSpan, EventType eventType, CountDownLatch flushLatch) {\n+  void enqueueStartEvent(ReadableSpan span) {\n     if (isShutdown) {\n       if (!loggedShutdownMessage.getAndSet(true)) {\n         logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n       }\n       return;\n     }\n+    enqueue(EventType.ON_START, span, null);\n+  }\n \n-    if (blocking) {\n-      ringBuffer.publishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n-    } else {\n-      // TODO: Record metrics if element not added.\n-      ringBuffer.tryPublishEvent(TRANSLATOR_THREE_ARG, eventType, readableSpan, flushLatch);\n+  void enqueueEndEvent(ReadableSpan span) {\n+    if (isShutdown) {\n+      if (!loggedShutdownMessage.getAndSet(true)) {\n+        logger.info(\"Attempted to enqueue entry after Disruptor shutdown.\");\n+      }\n+      return;\n     }\n+    enqueue(EventType.ON_END, span, null);\n   }\n \n-  // Shuts down the underlying disruptor.\n+  // Shuts down the underlying disruptor. Ensures that when this method returns the disruptor is\n+  // shutdown.\n   void shutdown() {\n-    enqueueAndLock(EventType.ON_SHUTDOWN);\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a14489025ead6072043d16ecff0155edca74114f"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTE5NTM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/934#pullrequestreview-365119535", "createdAt": "2020-02-26T18:01:13Z", "commit": {"oid": "a14489025ead6072043d16ecff0155edca74114f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab26a485e68f6c5ce37bfd2fe662b4e5f26715ba", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab26a485e68f6c5ce37bfd2fe662b4e5f26715ba", "committedDate": "2020-02-26T20:28:00Z", "message": "Small cleanups in async processor\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "committedDate": "2020-02-26T20:30:22Z", "message": "Customize the log messages for different actions happening after shutdown\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a14489025ead6072043d16ecff0155edca74114f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a14489025ead6072043d16ecff0155edca74114f", "committedDate": "2020-02-26T17:40:57Z", "message": "Small cleanups in async processor\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c83ec2064ea28b8130d562b4b8f6a0298744d2f0", "committedDate": "2020-02-26T20:30:22Z", "message": "Customize the log messages for different actions happening after shutdown\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3102, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}