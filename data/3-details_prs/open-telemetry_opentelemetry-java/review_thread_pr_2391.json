{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0Mjc1ODIy", "number": 2391, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMToxN1rOFIROSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMToxN1rOFIROSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjE1MTEzOnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/CountAggregation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMToxN1rOIKGDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxNzozOFrOIKGOhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTg5MA==", "bodyText": "I wonder if we could hide the AggregatorFactory on the Aggregation and just have a method like getAggregator() on it directly, so simplify the call chain. I might be missing something, though.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2391#discussion_r547455890", "createdAt": "2020-12-22T19:11:17Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/CountAggregation.java", "diffHunk": "@@ -10,19 +10,20 @@\n import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n import io.opentelemetry.sdk.metrics.aggregator.CountAggregator;\n import io.opentelemetry.sdk.metrics.common.InstrumentDescriptor;\n-import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.resources.Resource;\n import java.util.List;\n import java.util.Map;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-enum CountAggregation implements Aggregation {\n-  INSTANCE;\n+final class CountAggregation implements Aggregation {\n+  static final CountAggregation INSTANCE = new CountAggregation();\n+\n+  private CountAggregation() {}\n \n   @Override\n-  public AggregatorFactory getAggregatorFactory(InstrumentValueType instrumentValueType) {\n+  public AggregatorFactory getAggregatorFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a59ba4b3125f6721c32a08733af41192b3d872d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1ODY5NQ==", "bodyText": "Will look later, I think I need the factory, but you will see that probably needs a different name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2391#discussion_r547458695", "createdAt": "2020-12-22T19:17:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/CountAggregation.java", "diffHunk": "@@ -10,19 +10,20 @@\n import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n import io.opentelemetry.sdk.metrics.aggregator.CountAggregator;\n import io.opentelemetry.sdk.metrics.common.InstrumentDescriptor;\n-import io.opentelemetry.sdk.metrics.common.InstrumentValueType;\n import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.resources.Resource;\n import java.util.List;\n import java.util.Map;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-enum CountAggregation implements Aggregation {\n-  INSTANCE;\n+final class CountAggregation implements Aggregation {\n+  static final CountAggregation INSTANCE = new CountAggregation();\n+\n+  private CountAggregation() {}\n \n   @Override\n-  public AggregatorFactory getAggregatorFactory(InstrumentValueType instrumentValueType) {\n+  public AggregatorFactory getAggregatorFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTg5MA=="}, "originalCommit": {"oid": "3a59ba4b3125f6721c32a08733af41192b3d872d"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1620, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}