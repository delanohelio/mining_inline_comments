{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDQ3OTY2", "number": 1292, "title": "added testcontainers integration test to verify jaeger example app works in Java 7", "bodyText": "Here's an initial attempt at this. The test is based on the existing JaegerIntegrationTest.\nI think there's some improvements that can be made to how the examples/integration tests fit into the project, I'll put some ideas into a new issue\nresolves #1249", "createdAt": "2020-05-30T10:39:38Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292", "merged": true, "mergeCommit": {"oid": "6f68d90a7abfa7eb9341ecaceea67ca4188252c9"}, "closed": true, "closedAt": "2020-06-16T03:08:42Z", "author": {"login": "jarebudev"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmT7brgH2gAyNDI1NDQ3OTY2OjA2NTE5NTM0NGQ4OGViZGI0OTM4ODAwYjI3MTdhYjVhMDZhOGMzYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcq_K6BAH2gAyNDI1NDQ3OTY2Ojc0NTcxZGFkZWY5MTI4N2FlY2VhYThmNGVkYWE2MGY2NjcyNjZiNTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "065195344d88ebdb4938800b2717ab5a06a8c3bb", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/065195344d88ebdb4938800b2717ab5a06a8c3bb", "committedDate": "2020-05-30T09:48:19Z", "message": "added testcontainers test that runs jaeger example app in jre7 docker image and verifies trace is received in jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99963e1b2afbce3775162f1084d9d0899559eb9f", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99963e1b2afbce3775162f1084d9d0899559eb9f", "committedDate": "2020-05-30T09:49:33Z", "message": "Merge branch 'master' into java_7_integration_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fcd1142b360a82400b92a2c3ae740620eb3f4557", "committedDate": "2020-05-30T10:22:17Z", "message": "added comments, updated readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDM2NDI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-421436427", "createdAt": "2020-05-30T19:10:44Z", "commit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMDo0NFrOGc04AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMDo0NFrOGc04AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTYxNg==", "bodyText": "Consider using withCopyFileToContainer and withCmd on GenericContainer instead.\nThere is no ned to build an image here and it will only add an overhead to the startup :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879616", "createdAt": "2020-05-30T19:10:44Z", "author": {"login": "bsideup"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDM2NTY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-421436564", "createdAt": "2020-05-30T19:12:50Z", "commit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMjo1MFrOGc04hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOToxMjo1MFrOGc04hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3OTc0OA==", "bodyText": "any reason you did not annotate jaegerExampleAppContainer with @Rule or @ClassRule?\nThe container will get removed, eventually (thanks to Testcontainers' two phase cleanup: JVM shutdown hook and Ryuk - a sidecar container), but here you only start it from this test and then never call stop, so it will last until JVM's termination", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r432879748", "createdAt": "2020-05-30T19:12:50Z", "author": {"login": "bsideup"}, "path": "examples/jaeger/src/test/java/io/opentelemetry/example/JaegerExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.opentelemetry.example;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+/**\n+ * Testcontainers integration test to verify that the trace generated by the Jaeger example app is\n+ * stored in an instance of Jaeger.\n+ *\n+ * <p>A Jaeger-all-in-one container is started and a Docker image is created on-the-fly which\n+ * contains the executable JAR of the example app (but not started). The test starts the example app\n+ * container before verifying that the trace is received by Jaeger.\n+ */\n+@RunWith(JUnit4.class)\n+public class JaegerExampleIntegrationTest {\n+\n+  private static final String ARCHIVE_NAME = System.getProperty(\"archive.name\");\n+  private static final String APP_NAME = \"jaeger-example-app.jar\";\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"example\";\n+  private static final String JAEGER_HOSTNAME = \"jaeger\";\n+  private static final String JAEGER_URL = \"http://localhost\";\n+\n+  private static final Network network = Network.newNetwork();\n+\n+  @ClassRule\n+  public static GenericContainer jaegerContainer =\n+      new GenericContainer<>(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withNetwork(network)\n+          .withNetworkAliases(JAEGER_HOSTNAME)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  private static GenericContainer jaegerExampleAppContainer =\n+      new GenericContainer(buildJaegerExampleAppImage())\n+          .withNetwork(network)\n+          .waitingFor(Wait.forLogMessage(\".*Bye.*\", 1));\n+\n+  private static ImageFromDockerfile buildJaegerExampleAppImage() {\n+    return new ImageFromDockerfile()\n+        .withFileFromFile(ARCHIVE_NAME, Paths.get(ARCHIVE_NAME).toFile())\n+        .withDockerfileFromBuilder(\n+            builder ->\n+                builder\n+                    .from(\"openjdk:7u111-jre-alpine\")\n+                    .copy(ARCHIVE_NAME, \"/app/\" + APP_NAME)\n+                    .entryPoint(\n+                        \"java\",\n+                        \"-cp\",\n+                        \"/app/\" + APP_NAME,\n+                        \"io.opentelemetry.example.JaegerExample\",\n+                        JAEGER_HOSTNAME,\n+                        Integer.toString(COLLECTOR_PORT))\n+                    .build());\n+  }\n+\n+  @Test\n+  public void testJaegerExampleAppIntegration() {\n+    jaegerExampleAppContainer.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd1142b360a82400b92a2c3ae740620eb3f4557"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6fe38cc8f3b9196af2359f5156028651c5ac71d9", "committedDate": "2020-05-31T09:22:02Z", "message": "changed to add file to base image rather than building intermediate image and container now managed as a test rule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTc2MTk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-421976197", "createdAt": "2020-06-01T16:03:11Z", "commit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowMzoxMVrOGdQm-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowMzoxMVrOGdQm-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNDAwOQ==", "bodyText": "My understanding of \"platform\" and boms is weak. This doesn't make the jaeger exporter depend on testcontainers, does it? Should this be testImplementation ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r433334009", "createdAt": "2020-06-01T16:03:11Z", "author": {"login": "jkwatson"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    implementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe38cc8f3b9196af2359f5156028651c5ac71d9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c95fec61b708183de4af438eda4399dae46ace6", "committedDate": "2020-06-01T20:53:15Z", "message": "changed startup order of containers to use dependsOn rather than rule, and correct bom import scope"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjEzMDc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-422213077", "createdAt": "2020-06-01T22:02:40Z", "commit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzg5MjAw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-422389200", "createdAt": "2020-06-02T06:54:11Z", "commit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzI3ODA3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#pullrequestreview-423727807", "createdAt": "2020-06-03T16:26:02Z", "commit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoyNjowMlrOGej1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjoyNjowMlrOGej1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NzcyMQ==", "bodyText": "new line?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1292#discussion_r434697721", "createdAt": "2020-06-03T16:26:02Z", "author": {"login": "bogdandrutu"}, "path": "examples/jaeger/build.gradle", "diffHunk": "@@ -3,12 +3,33 @@ plugins {\n }\n \n description = 'OpenTelemetry Examples for Jaeger Exporter'\n-ext.moduleName = \"io.opentelemetry.examples.jaeger\"\n+ext {\n+    moduleName = \"io.opentelemetry.examples.jaeger\"\n+    testcontainersVersion = \"1.14.2\"\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+compileTestJava {\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n+}\n \n dependencies {\n     compile(\"io.opentelemetry:opentelemetry-api:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}\")\n     compile(\"io.opentelemetry:opentelemetry-exporters-jaeger:${opentelemetryVersion}\")\n     compile(\"io.grpc:grpc-protobuf:1.28.0\")\n     compile(\"io.grpc:grpc-netty-shaded:1.28.0\")\n+\n+    testImplementation platform(\"org.testcontainers:testcontainers-bom:${testcontainersVersion}\")\n+    testCompile(\"org.testcontainers:testcontainers\")\n+    testCompile(\"org.awaitility:awaitility:3.0.0\")\n+    testCompile(\"io.rest-assured:rest-assured:4.2.0\")\n }\n+\n+tasks.withType(Test) {\n+    dependsOn fatJar\n+    systemProperty 'archive.name', fatJar.outputs.files[0].path\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c95fec61b708183de4af438eda4399dae46ace6"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fada60415fe760aec4643ecafb15e3cc8fe26d0c", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fada60415fe760aec4643ecafb15e3cc8fe26d0c", "committedDate": "2020-06-12T22:33:45Z", "message": "added integration_tests module, reverted prev changes to examples and moved to new modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf5024443de8d5e87296516c6caffaa38294087b", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf5024443de8d5e87296516c6caffaa38294087b", "committedDate": "2020-06-12T22:35:26Z", "message": "Merge branch 'master' into java_7_integration_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1689dce523de04e5ab1bb10d65bc4c3a1bb62d5d", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1689dce523de04e5ab1bb10d65bc4c3a1bb62d5d", "committedDate": "2020-06-12T22:47:13Z", "message": "correct formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74571dadef91287aeceaa8f4edaa60f667266b59", "author": {"user": {"login": "jarebudev", "name": null}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74571dadef91287aeceaa8f4edaa60f667266b59", "committedDate": "2020-06-13T22:26:50Z", "message": "fix dependencies removed compile scope"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2822, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}