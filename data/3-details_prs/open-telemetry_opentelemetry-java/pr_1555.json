{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDUyNzcw", "number": 1555, "title": "Implement OS and some process resource attributes.", "bodyText": "Hinted at this in #1548 and wanted to kick it off so people can have a place to put non-vendor-specific resource attributes.", "createdAt": "2020-08-19T09:54:24Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555", "merged": true, "mergeCommit": {"oid": "cb5097810656d7f8b9a2a9f95e4a62bfb3f46206"}, "closed": true, "closedAt": "2020-08-20T16:42:31Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAYjdIgH2gAyNDcwMDUyNzcwOmI5ODYwMThkOWE0Y2MzZDRjMWJlODkyZTc4YzUyYWMxOTljMWFiMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAqCNuAFqTQ3MTI3NDI1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b986018d9a4cc3d4c1be892e78c52ac199c1ab0a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b986018d9a4cc3d4c1be892e78c52ac199c1ab0a", "committedDate": "2020-08-19T09:53:41Z", "message": "Implement OS and some process resource attributes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzIzMDM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470323036", "createdAt": "2020-08-19T10:22:56Z", "commit": {"oid": "b986018d9a4cc3d4c1be892e78c52ac199c1ab0a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1N1rOHDA_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1N1rOHDA_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzk2OQ==", "bodyText": "Are these attributes defined by semantic convention? If yes, I think a link to it will be useful here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472923969", "createdAt": "2020-08-19T10:22:57Z", "author": {"login": "iNikem"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourceConstants.java", "diffHunk": "@@ -25,6 +25,36 @@\n  */\n public class ResourceConstants {\n \n+  /** The operating system type, such as {@code \"WINDOWS\"}, {@code \"DARWIN\"}, {@code \"LINUX\"}. */\n+  public static final String OS_NAME = \"os.name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b986018d9a4cc3d4c1be892e78c52ac199c1ab0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2893a16997708b16e420832405b6069aa059d9f7", "committedDate": "2020-08-19T10:34:03Z", "message": "Update link in javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzU0OTU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470354954", "createdAt": "2020-08-19T11:11:50Z", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToxMTo1MFrOHDCjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToxMzoyOVrOHDCmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0OTU2OA==", "bodyText": "Would contains make the code more robust? I am not familiar with all the cases so I might be wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472949568", "createdAt": "2020-08-19T11:11:50Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/OsResource.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import javax.annotation.Nullable;\n+\n+/** {@link ResourceProvider} which provides information about the current operating system. */\n+public class OsResource extends ResourceProvider {\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    final String os;\n+    try {\n+      os = System.getProperty(\"os.name\");\n+    } catch (SecurityException t) {\n+      // Security manager enabled, can't provide much os information.\n+      return Attributes.empty();\n+    }\n+\n+    if (os == null) {\n+      return Attributes.empty();\n+    }\n+\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    String osName = getOs(os);\n+    if (osName != null) {\n+      attributes.setAttribute(ResourceConstants.OS_NAME, osName);\n+    }\n+\n+    String version = null;\n+    try {\n+      version = System.getProperty(\"os.version\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    String osDescription = version != null ? os + ' ' + version : os;\n+    attributes.setAttribute(ResourceConstants.OS_DESCRIPTION, osDescription);\n+\n+    return attributes.build();\n+  }\n+\n+  @Nullable\n+  private static String getOs(String os) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDM1MA==", "bodyText": "I would avoid reporting the attribute if no process id was available.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472950350", "createdAt": "2020-08-19T11:13:29Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjQ2NTUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470646551", "createdAt": "2020-08-19T16:40:23Z", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0MDoyM1rOHDQGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0MDoyM1rOHDQGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3MTU2MA==", "bodyText": "We should create an issue for this, so the TODO doesn't lie dead in the code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473171560", "createdAt": "2020-08-19T16:40:23Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjUwMjcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470650271", "createdAt": "2020-08-19T16:45:22Z", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NToyMlrOHDQRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NToyMlrOHDQRpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NDQzOQ==", "bodyText": "could you add a little comment about what the structure of this name looks like, so the code doesn't just look like magic. Thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473174439", "createdAt": "2020-08-19T16:45:22Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjcyOTY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470672964", "createdAt": "2020-08-19T17:07:02Z", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNzowMlrOHDRUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNzowMlrOHDRUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ==", "bodyText": "interesting assumption. This is definitely the most common location for a java executable, but is it universal enough to be encoded here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473191465", "createdAt": "2020-08-19T17:07:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjc2NTYy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-470676562", "createdAt": "2020-08-19T17:11:55Z", "commit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxMTo1NVrOHDRe7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxMTo1NVrOHDRe7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDIyMQ==", "bodyText": "I'm nervous about blindly adding all the command lines arguments from a java process.This could end up being gigantic, and also leaking senstivie information that is being passed in via system properties. Are we sure this is a good idea?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473194221", "createdAt": "2020-08-19T17:11:55Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")\n+          .append(File.pathSeparatorChar)\n+          .append(\"java\");\n+      if (osName != null && osName.toLowerCase().startsWith(\"windows\")) {\n+        executablePath.append(\".exe\");\n+      }\n+\n+      attributes.setAttribute(ResourceConstants.PROCESS_EXECUTABLE_PATH, executablePath.toString());\n+\n+      StringBuilder commandLine = new StringBuilder(executablePath);\n+      for (String arg : runtime.getInputArguments()) {\n+        commandLine.append(' ').append(arg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bbdfe86a092e559d85eaa2adc928d1690dfe265", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7bbdfe86a092e559d85eaa2adc928d1690dfe265", "committedDate": "2020-08-20T02:04:38Z", "message": "pid, docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4951534dba3c89668c88b38392fe627fea8b456", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b4951534dba3c89668c88b38392fe627fea8b456", "committedDate": "2020-08-20T03:02:35Z", "message": "Merge branch 'resource-os-process' of github.com:anuraaga/opentelemetry-java into resource-os-process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDk2NDIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-471096423", "createdAt": "2020-08-20T03:08:17Z", "commit": {"oid": "b4951534dba3c89668c88b38392fe627fea8b456"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb82b3ea59531410f2e5847eb798c122d2949952", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb82b3ea59531410f2e5847eb798c122d2949952", "committedDate": "2020-08-20T04:05:06Z", "message": "Don't support Android"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjc0MjUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#pullrequestreview-471274252", "createdAt": "2020-08-20T06:15:40Z", "commit": {"oid": "bb82b3ea59531410f2e5847eb798c122d2949952"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2361, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}