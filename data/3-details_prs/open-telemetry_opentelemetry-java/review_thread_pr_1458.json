{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDExMjMy", "number": 1458, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0NToxOVrOERr_ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxNzowMlrOESLATQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTgxOTg4OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0NToxOVrOG2iVyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1ODo0OFrOG3ve4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODkyMA==", "bodyText": "Please write a javadoc for the class", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r459838920", "createdAt": "2020-07-24T03:45:19Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MjE1Mg==", "bodyText": "I included a javadoc, but I don't have a link to the spec so I referenced the lightstep implementation. Maybe @carlosalberto has a link to the spec?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460262152", "createdAt": "2020-07-24T20:02:27Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODkyMA=="}, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NjI4Nw==", "bodyText": "We don't have a Spec IIRC Having a simple Javadoc explaining the very basics should be enough.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460556287", "createdAt": "2020-07-26T18:04:05Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODkyMA=="}, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMjgxOA==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r461102818", "createdAt": "2020-07-27T18:58:48Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODkyMA=="}, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAzOTQyOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxNToxNFrOG2kNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowMjo0N1rOG28Liw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTUzMw==", "bodyText": "I think generally we shouldn't reference implementation of other propagators here. Should we promote to a top-level class, maybe HexIdUtils?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r459869533", "createdAt": "2020-07-24T06:15:14Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4ODgzNA==", "bodyText": "Sure, I'll refactor out the utils class then. It makes the B3 interface pretty sparse as a result.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r459888834", "createdAt": "2020-07-24T07:17:57Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTUzMw=="}, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MjI4Mw==", "bodyText": "Refactored", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460262283", "createdAt": "2020-07-24T20:02:47Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.extensions.trace.propagation.B3PropagatorExtractor.Util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2OTUzMw=="}, "originalCommit": {"oid": "c3fefefcd0fa1a1de0f3abc68b54b06d7f338526"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE2ODMyOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MDoxMFrOG3Bg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MDoxMFrOG3Bg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PropagatorUtils {\n          \n          \n            \n            final class PropagatorUtils {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349651", "createdAt": "2020-07-25T01:50:10Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+public class PropagatorUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE2ODgxOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MDo0NVrOG3BhEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MDo0NVrOG3BhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(carrier).hasSize(0);\n          \n          \n            \n                assertThat(carrier).isEmpty();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349715", "createdAt": "2020-07-25T01:50:45Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class OtTracerPropagatorTest {\n+\n+  private static final TraceState TRACE_STATE_DEFAULT = TraceState.builder().build();\n+  private static final String TRACE_ID_BASE16 = \"ff000000000000000000000000000041\";\n+  private static final TraceId TRACE_ID = TraceId.fromLowerBase16(TRACE_ID_BASE16, 0);\n+  private static final String SHORT_TRACE_ID_BASE16 = \"ff00000000000000\";\n+  private static final TraceId SHORT_TRACE_ID =\n+      TraceId.fromLowerBase16(StringUtils.padLeft(SHORT_TRACE_ID_BASE16, 32), 0);\n+  private static final String SPAN_ID_BASE16 = \"ff00000000000041\";\n+  private static final SpanId SPAN_ID = SpanId.fromLowerBase16(SPAN_ID_BASE16, 0);\n+  private static final byte SAMPLED_TRACE_OPTIONS_BYTES = 1;\n+  private static final TraceFlags SAMPLED_TRACE_OPTIONS =\n+      TraceFlags.fromByte(SAMPLED_TRACE_OPTIONS_BYTES);\n+  private static final Setter<Map<String, String>> setter = Map::put;\n+  private static final Getter<Map<String, String>> getter =\n+      new Getter<Map<String, String>>() {\n+        @Nullable\n+        @Override\n+        public String get(Map<String, String> carrier, String key) {\n+          return carrier.get(key);\n+        }\n+      };\n+  private final OtTracerPropagator propagator = OtTracerPropagator.getInstance();\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  private static SpanContext getSpanContext(Context context) {\n+    return TracingContextUtils.getSpan(context).getContext();\n+  }\n+\n+  private static Context withSpanContext(SpanContext spanContext, Context context) {\n+    return TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context);\n+  }\n+\n+  @Test\n+  public void inject_invalidContext() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    propagator.inject(\n+        withSpanContext(\n+            SpanContext.create(\n+                TraceId.getInvalid(),\n+                SpanId.getInvalid(),\n+                SAMPLED_TRACE_OPTIONS,\n+                TraceState.builder().set(\"foo\", \"bar\").build()),\n+            Context.current()),\n+        carrier,\n+        setter);\n+    assertThat(carrier).hasSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE2OTY4OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjowM1rOG3Bhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjowM1rOG3Bhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTgyNw==", "bodyText": "I would just inline for better readability, this separation doesn't really improve maintenance", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349827", "createdAt": "2020-07-25T01:52:03Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of the Lightstep propagation protocol. See <a\n+ * href=https://github.com/lightstep/lightstep-tracer-java-common/blob/master/common/src/main/java/com/lightstep/tracer/shared/TextMapPropagator.java>Lightstep\n+ * TextMapPropagator</a>.\n+ */\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {\n+\n+  private static final String OT_TRACER = \"ot-tracer-\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE2OTgxOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjoxNFrOG3BhlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjoxNFrOG3BhlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String TRACE_ID_HEADER = OT_TRACER + \"traceid\";\n          \n          \n            \n              static final String TRACE_ID_HEADER = \"ot-tracer-traceid\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349844", "createdAt": "2020-07-25T01:52:14Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of the Lightstep propagation protocol. See <a\n+ * href=https://github.com/lightstep/lightstep-tracer-java-common/blob/master/common/src/main/java/com/lightstep/tracer/shared/TextMapPropagator.java>Lightstep\n+ * TextMapPropagator</a>.\n+ */\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {\n+\n+  private static final String OT_TRACER = \"ot-tracer-\";\n+  static final String TRACE_ID_HEADER = OT_TRACER + \"traceid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3MDA4OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjozMlrOG3Bhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MjozMlrOG3Bhsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTg3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String SPAN_ID_HEADER = OT_TRACER + \"spanid\";\n          \n          \n            \n              static final String SPAN_ID_HEADER = \"ot-tracer-spanid\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349875", "createdAt": "2020-07-25T01:52:32Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of the Lightstep propagation protocol. See <a\n+ * href=https://github.com/lightstep/lightstep-tracer-java-common/blob/master/common/src/main/java/com/lightstep/tracer/shared/TextMapPropagator.java>Lightstep\n+ * TextMapPropagator</a>.\n+ */\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {\n+\n+  private static final String OT_TRACER = \"ot-tracer-\";\n+  static final String TRACE_ID_HEADER = OT_TRACER + \"traceid\";\n+  static final String SPAN_ID_HEADER = OT_TRACER + \"spanid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3MDI1OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1Mjo0M1rOG3Bhxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1Mjo0M1rOG3Bhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTg5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String SAMPLED_HEADER = OT_TRACER + \"sampled\";\n          \n          \n            \n              static final String SAMPLED_HEADER = \"ot-tracer-sampled\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349895", "createdAt": "2020-07-25T01:52:43Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of the Lightstep propagation protocol. See <a\n+ * href=https://github.com/lightstep/lightstep-tracer-java-common/blob/master/common/src/main/java/com/lightstep/tracer/shared/TextMapPropagator.java>Lightstep\n+ * TextMapPropagator</a>.\n+ */\n+@Immutable\n+public class OtTracerPropagator implements HttpTextFormat {\n+\n+  private static final String OT_TRACER = \"ot-tracer-\";\n+  static final String TRACE_ID_HEADER = OT_TRACER + \"traceid\";\n+  static final String SPAN_ID_HEADER = OT_TRACER + \"spanid\";\n+  static final String SAMPLED_HEADER = OT_TRACER + \"sampled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3MDcwOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MzoyN1rOG3BiAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1MzoyN1rOG3BiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTk1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Test\n          \n          \n            \n              public void fieldsList() {\n          \n          \n            \n                assertThat(propagator.fields())\n          \n          \n            \n                    .containsExactly(\n          \n          \n            \n                        OtTracerPropagator.TRACE_ID_HEADER,\n          \n          \n            \n                        OtTracerPropagator.SPAN_ID_HEADER,\n          \n          \n            \n                        OtTracerPropagator.SAMPLED_HEADER);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Test\n          \n          \n            \n              public void headerNames() {\n          \n          \n            \n                assertThat(OtTracerPropagator.TRACE_ID_HEADER).isEqualTo(\"ot-tracer-traceid\");\n          \n          \n            \n                assertThat(OtTracerPropagator.SPAN_ID_HEADER).isEqualTo(\"ot-tracer-spanid\");\n          \n          \n            \n                assertThat(OtTracerPropagator.SAMPLED_HEADER).isEqualTo(\"ot-tracer-sampled\");\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nThese tests are basically equivalent to the code, just checking constants, don't think they provide value.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349954", "createdAt": "2020-07-25T01:53:27Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class OtTracerPropagatorTest {\n+\n+  private static final TraceState TRACE_STATE_DEFAULT = TraceState.builder().build();\n+  private static final String TRACE_ID_BASE16 = \"ff000000000000000000000000000041\";\n+  private static final TraceId TRACE_ID = TraceId.fromLowerBase16(TRACE_ID_BASE16, 0);\n+  private static final String SHORT_TRACE_ID_BASE16 = \"ff00000000000000\";\n+  private static final TraceId SHORT_TRACE_ID =\n+      TraceId.fromLowerBase16(StringUtils.padLeft(SHORT_TRACE_ID_BASE16, 32), 0);\n+  private static final String SPAN_ID_BASE16 = \"ff00000000000041\";\n+  private static final SpanId SPAN_ID = SpanId.fromLowerBase16(SPAN_ID_BASE16, 0);\n+  private static final byte SAMPLED_TRACE_OPTIONS_BYTES = 1;\n+  private static final TraceFlags SAMPLED_TRACE_OPTIONS =\n+      TraceFlags.fromByte(SAMPLED_TRACE_OPTIONS_BYTES);\n+  private static final Setter<Map<String, String>> setter = Map::put;\n+  private static final Getter<Map<String, String>> getter =\n+      new Getter<Map<String, String>>() {\n+        @Nullable\n+        @Override\n+        public String get(Map<String, String> carrier, String key) {\n+          return carrier.get(key);\n+        }\n+      };\n+  private final OtTracerPropagator propagator = OtTracerPropagator.getInstance();\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  private static SpanContext getSpanContext(Context context) {\n+    return TracingContextUtils.getSpan(context).getContext();\n+  }\n+\n+  private static Context withSpanContext(SpanContext spanContext, Context context) {\n+    return TracingContextUtils.withSpan(DefaultSpan.create(spanContext), context);\n+  }\n+\n+  @Test\n+  public void inject_invalidContext() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    propagator.inject(\n+        withSpanContext(\n+            SpanContext.create(\n+                TraceId.getInvalid(),\n+                SpanId.getInvalid(),\n+                SAMPLED_TRACE_OPTIONS,\n+                TraceState.builder().set(\"foo\", \"bar\").build()),\n+            Context.current()),\n+        carrier,\n+        setter);\n+    assertThat(carrier).hasSize(0);\n+  }\n+\n+  @Test\n+  public void inject_SampledContext() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    propagator.inject(\n+        withSpanContext(\n+            SpanContext.create(TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT),\n+            Context.current()),\n+        carrier,\n+        setter);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SAMPLED_HEADER, \"true\");\n+  }\n+\n+  @Test\n+  public void inject_SampledContext_nullCarrierUsage() {\n+    final Map<String, String> carrier = new LinkedHashMap<>();\n+    propagator.inject(\n+        withSpanContext(\n+            SpanContext.create(TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT),\n+            Context.current()),\n+        null,\n+        (Setter<Map<String, String>>) (ignored, key, value) -> carrier.put(key, value));\n+    assertThat(carrier).containsEntry(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SAMPLED_HEADER, \"true\");\n+  }\n+\n+  @Test\n+  public void inject_NotSampledContext() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    propagator.inject(\n+        withSpanContext(\n+            SpanContext.create(TRACE_ID, SPAN_ID, TraceFlags.getDefault(), TRACE_STATE_DEFAULT),\n+            Context.current()),\n+        carrier,\n+        setter);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    assertThat(carrier).containsEntry(OtTracerPropagator.SAMPLED_HEADER, \"false\");\n+  }\n+\n+  @Test\n+  public void extract_Nothing() {\n+    // Context remains untouched.\n+    assertThat(\n+            propagator.extract(Context.current(), Collections.<String, String>emptyMap(), Map::get))\n+        .isSameInstanceAs(Context.current());\n+  }\n+\n+  @Test\n+  public void extract_SampledContext_Int() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_SampledContext_Bool() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, \"true\");\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_NotSampledContext() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.FALSE_INT);\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, TraceFlags.getDefault(), TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_SampledContext_Int_Short_TraceId() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, SHORT_TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                SHORT_TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_SampledContext_Bool_Short_TraceId() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, SHORT_TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, \"true\");\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                SHORT_TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_NotSampledContext_Short_TraceId() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(OtTracerPropagator.TRACE_ID_HEADER, SHORT_TRACE_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    carrier.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.FALSE_INT);\n+\n+    assertThat(getSpanContext(propagator.extract(Context.current(), carrier, getter)))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                SHORT_TRACE_ID, SPAN_ID, TraceFlags.getDefault(), TRACE_STATE_DEFAULT));\n+  }\n+\n+  @Test\n+  public void extract_InvalidTraceId() {\n+    Map<String, String> invalidHeaders = new LinkedHashMap<>();\n+    invalidHeaders.put(OtTracerPropagator.TRACE_ID_HEADER, \"abcdefghijklmnopabcdefghijklmnop\");\n+    invalidHeaders.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    invalidHeaders.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+    assertThat(getSpanContext(propagator.extract(Context.current(), invalidHeaders, getter)))\n+        .isSameInstanceAs(SpanContext.getInvalid());\n+  }\n+\n+  @Test\n+  public void extract_InvalidTraceId_Size() {\n+    Map<String, String> invalidHeaders = new LinkedHashMap<>();\n+    invalidHeaders.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16 + \"00\");\n+    invalidHeaders.put(OtTracerPropagator.SPAN_ID_HEADER, SPAN_ID_BASE16);\n+    invalidHeaders.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+    assertThat(getSpanContext(propagator.extract(Context.current(), invalidHeaders, getter)))\n+        .isSameInstanceAs(SpanContext.getInvalid());\n+  }\n+\n+  @Test\n+  public void extract_InvalidSpanId() {\n+    Map<String, String> invalidHeaders = new LinkedHashMap<>();\n+    invalidHeaders.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    invalidHeaders.put(OtTracerPropagator.SPAN_ID_HEADER, \"abcdefghijklmnop\");\n+    invalidHeaders.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+    assertThat(getSpanContext(propagator.extract(Context.current(), invalidHeaders, getter)))\n+        .isSameInstanceAs(SpanContext.getInvalid());\n+  }\n+\n+  @Test\n+  public void extract_InvalidSpanId_Size() {\n+    Map<String, String> invalidHeaders = new LinkedHashMap<>();\n+    invalidHeaders.put(OtTracerPropagator.TRACE_ID_HEADER, TRACE_ID_BASE16);\n+    invalidHeaders.put(OtTracerPropagator.SPAN_ID_HEADER, \"abcdefghijklmnop\" + \"00\");\n+    invalidHeaders.put(OtTracerPropagator.SAMPLED_HEADER, PropagatorUtils.TRUE_INT);\n+    assertThat(getSpanContext(propagator.extract(Context.current(), invalidHeaders, getter)))\n+        .isSameInstanceAs(SpanContext.getInvalid());\n+  }\n+\n+  @Test\n+  public void fieldsList() {\n+    assertThat(propagator.fields())\n+        .containsExactly(\n+            OtTracerPropagator.TRACE_ID_HEADER,\n+            OtTracerPropagator.SPAN_ID_HEADER,\n+            OtTracerPropagator.SAMPLED_HEADER);\n+  }\n+\n+  @Test\n+  public void headerNames() {\n+    assertThat(OtTracerPropagator.TRACE_ID_HEADER).isEqualTo(\"ot-tracer-traceid\");\n+    assertThat(OtTracerPropagator.SPAN_ID_HEADER).isEqualTo(\"ot-tracer-spanid\");\n+    assertThat(OtTracerPropagator.SAMPLED_HEADER).isEqualTo(\"ot-tracer-sampled\");\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3MTAxOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1NDowN1rOG3BiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjo0NDo1NlrOG3B0Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTk5Mg==", "bodyText": "Does Map::get not work?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460349992", "createdAt": "2020-07-25T01:54:07Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class OtTracerPropagatorTest {\n+\n+  private static final TraceState TRACE_STATE_DEFAULT = TraceState.builder().build();\n+  private static final String TRACE_ID_BASE16 = \"ff000000000000000000000000000041\";\n+  private static final TraceId TRACE_ID = TraceId.fromLowerBase16(TRACE_ID_BASE16, 0);\n+  private static final String SHORT_TRACE_ID_BASE16 = \"ff00000000000000\";\n+  private static final TraceId SHORT_TRACE_ID =\n+      TraceId.fromLowerBase16(StringUtils.padLeft(SHORT_TRACE_ID_BASE16, 32), 0);\n+  private static final String SPAN_ID_BASE16 = \"ff00000000000041\";\n+  private static final SpanId SPAN_ID = SpanId.fromLowerBase16(SPAN_ID_BASE16, 0);\n+  private static final byte SAMPLED_TRACE_OPTIONS_BYTES = 1;\n+  private static final TraceFlags SAMPLED_TRACE_OPTIONS =\n+      TraceFlags.fromByte(SAMPLED_TRACE_OPTIONS_BYTES);\n+  private static final Setter<Map<String, String>> setter = Map::put;\n+  private static final Getter<Map<String, String>> getter =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NDU5NA==", "bodyText": "It probably does, I copied the b3 tests so it needs to be fixed there too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460354594", "createdAt": "2020-07-25T02:44:56Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/OtTracerPropagatorTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class OtTracerPropagatorTest {\n+\n+  private static final TraceState TRACE_STATE_DEFAULT = TraceState.builder().build();\n+  private static final String TRACE_ID_BASE16 = \"ff000000000000000000000000000041\";\n+  private static final TraceId TRACE_ID = TraceId.fromLowerBase16(TRACE_ID_BASE16, 0);\n+  private static final String SHORT_TRACE_ID_BASE16 = \"ff00000000000000\";\n+  private static final TraceId SHORT_TRACE_ID =\n+      TraceId.fromLowerBase16(StringUtils.padLeft(SHORT_TRACE_ID_BASE16, 32), 0);\n+  private static final String SPAN_ID_BASE16 = \"ff00000000000041\";\n+  private static final SpanId SPAN_ID = SpanId.fromLowerBase16(SPAN_ID_BASE16, 0);\n+  private static final byte SAMPLED_TRACE_OPTIONS_BYTES = 1;\n+  private static final TraceFlags SAMPLED_TRACE_OPTIONS =\n+      TraceFlags.fromByte(SAMPLED_TRACE_OPTIONS_BYTES);\n+  private static final Setter<Map<String, String>> setter = Map::put;\n+  private static final Getter<Map<String, String>> getter =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTk5Mg=="}, "originalCommit": {"oid": "e0f3342a793f7943afd6c0b44d0e97e83e03d8b3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDkwMTI1OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxNzowMlrOG3OMww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1ODozNVrOG3veWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzUwNw==", "bodyText": "I'd rename this to PropagatorsCommon or even Common,  as it has utility methods but it also has actual fields used by the implementations.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460557507", "createdAt": "2020-07-26T18:17:02Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class PropagatorUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0291997ccf21f6f7a7917a0cef1cf8a1de6c65cb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4Nw==", "bodyText": "Also, I'd add a comment saying this class is used by both the B3/OT propagators only.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r460557587", "createdAt": "2020-07-26T18:18:05Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class PropagatorUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzUwNw=="}, "originalCommit": {"oid": "0291997ccf21f6f7a7917a0cef1cf8a1de6c65cb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMjY4MA==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1458#discussion_r461102680", "createdAt": "2020-07-27T18:58:35Z", "author": {"login": "FrankSpitulski"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/PropagatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class PropagatorUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzUwNw=="}, "originalCommit": {"oid": "0291997ccf21f6f7a7917a0cef1cf8a1de6c65cb"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1534, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}