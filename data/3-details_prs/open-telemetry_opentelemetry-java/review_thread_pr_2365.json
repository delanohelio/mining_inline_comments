{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzg5MDM1", "number": 2365, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzowMVrOFHpdyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzoyN1rOFHpeAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYzNzIxOnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/TracerSharedState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzowMVrOIJK04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzowMVrOIJK04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTQ3Mw==", "bodyText": "Was missing this line", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2365#discussion_r546485473", "createdAt": "2020-12-21T02:57:01Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/TracerSharedState.java", "diffHunk": "@@ -39,7 +39,8 @@\n     this.idGenerator = idGenerator;\n     this.resource = resource;\n     this.activeTraceConfig = traceConfig;\n-    spanProcessors.forEach(this::addSpanProcessor);\n+    this.registeredSpanProcessors = new ArrayList<>(spanProcessors);\n+    activeSpanProcessor = SpanProcessor.composite(registeredSpanProcessors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac52bf524d4bbb500a2cfb019bb1e329ceefe06"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTYzNzc2OnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/test/java/io/opentelemetry/sdk/trace/SdkSpanBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzoyN1rOIJK1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1NzoyN1rOIJK1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NTU1OQ==", "bodyText": "Need to initialize fields that use mocks in BeforeEach so they run after mockito. It's a reason why I almost never initialize fields inline in test classes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2365#discussion_r546485559", "createdAt": "2020-12-21T02:57:27Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/test/java/io/opentelemetry/sdk/trace/SdkSpanBuilderTest.java", "diffHunk": "@@ -58,14 +58,16 @@\n           TraceState.getDefault());\n   private final SpanProcessor mockedSpanProcessor = Mockito.mock(SpanProcessor.class);\n \n-  private final SdkTracerProvider tracerSdkFactory = SdkTracerProvider.builder().build();\n-  private final SdkTracer sdkTracer = (SdkTracer) tracerSdkFactory.get(\"SpanBuilderSdkTest\");\n+  private SdkTracerProvider tracerSdkFactory;\n+  private SdkTracer sdkTracer;\n \n   @BeforeEach\n   public void setUp() {\n+    tracerSdkFactory = SdkTracerProvider.builder().addSpanProcessor(mockedSpanProcessor).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac52bf524d4bbb500a2cfb019bb1e329ceefe06"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1583, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}