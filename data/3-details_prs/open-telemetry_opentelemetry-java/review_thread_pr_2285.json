{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MTI2NjYw", "number": 2285, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODoxODo0NFrOFE2wvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo1Mzo0MVrOFIPtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjM1ODM2OnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODoxODo0NFrOIFEl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMToxM1rOIHuJ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4OTAzNw==", "bodyText": "This seems a bit questionable. If we have a shutdown timeout, should it be hardcoded or configurable? If it is hardcoded, maybe use a constant?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r542189037", "createdAt": "2020-12-14T08:18:44Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown().join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4OTMxOA==", "bodyText": "Also, maybe it would be better to throw a timeout exception if the shutdown does not complete.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r542189318", "createdAt": "2020-12-14T08:19:13Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown().join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4OTAzNw=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MjUyNQ==", "bodyText": "I think we expect this to finish relatively quickly, just finish things up. So maybe 10 seconds was too large, let me try 1 second. I'd prefer hard-coded just to keep things simpler, if extracting a constant are you thinking internal package?\n\nAlso, maybe it would be better to throw a timeout exception if the shutdown does not complete.\n\nI don't know if I've ever been able to handle an exception during shutdown so am ambivalent, but can add it. How useful does it seem?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r543842525", "createdAt": "2020-12-16T02:31:26Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown().join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4OTAzNw=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2NzE2Mg==", "bodyText": "I think we expect this to finish relatively quickly\n\nHmm, since shutdown includes flush, it will often make network requests.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r544967162", "createdAt": "2020-12-17T10:11:13Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown().join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4OTAzNw=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODUzMTMxOnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMjozOFrOIFYKMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMTo1MlrOIIDKWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ==", "bodyText": "Do we need a shutdown and a close?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r542509619", "createdAt": "2020-12-14T16:12:38Z", "author": {"login": "bogdandrutu"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MDQ1MA==", "bodyText": "I don't think so if the spec is ok with changing names.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r543840450", "createdAt": "2020-12-16T02:28:42Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyNzIxMA==", "bodyText": "What was the outcome of the discussion of having the shutdown method be optional? Were people ok with using a language-appropriate idiom if one was available?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r545227210", "createdAt": "2020-12-17T16:31:15Z", "author": {"login": "jkwatson"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1NjY2Mw==", "bodyText": "I think using the name close instead of shutdown would still qualify as providing shutdown. But that aspect was not discussed as it was concluded that generally a shutdown functionality is not optional (see open-telemetry/opentelemetry-specification#1288).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r545256663", "createdAt": "2020-12-17T17:11:16Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2Mjg5OA==", "bodyText": "hm. Is it worth adding a clarification to the spec, or do we think this is within our control as language experts?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r545262898", "createdAt": "2020-12-17T17:20:17Z", "author": {"login": "jkwatson"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTMyMQ==", "bodyText": "I think no one will complain about some SDK method name. But a general clarification in the spec (library-guidelines.md maybe) would be good like\n\nMethod/constant/... names defined in this specification SHOULD be adjusted to language naming conventions (snake_case, PascalCase, ...) but otherwise used as-is. As an exception, if a well-established name/naming pattern exists in a language for a particular functionality, it SHOULD be used instead. In general, the names should be choosen to adhere to the spec as closely as possible without being awkward or unnatural in the target language.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r545311321", "createdAt": "2020-12-17T18:31:52Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -99,4 +101,13 @@ default CompletableResultCode shutdown() {\n   default CompletableResultCode forceFlush() {\n     return CompletableResultCode.ofSuccess();\n   }\n+\n+  /**\n+   * Closes this {@link SpanProcessor} after processing any remaining spans, releasing any\n+   * resources.\n+   */\n+  @Override\n+  default void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwOTYxOQ=="}, "originalCommit": {"oid": "dde44a9a3b6ec2e35a83119aad777b939d5059b9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTkwMjI5OnYy", "diffSide": "RIGHT", "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerManagement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo1Mzo0MVrOIKDsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxMzo0MlrOIN7yTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNzE2MQ==", "bodyText": "can you create an issue to make the shutdown() return CompletableResultCode for consistency? Thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r547417161", "createdAt": "2020-12-22T17:53:41Z", "author": {"login": "jkwatson"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerManagement.java", "diffHunk": "@@ -70,4 +71,22 @@\n    * @see SpanProcessor#forceFlush()\n    */\n   CompletableResultCode forceFlush();\n+\n+  /**\n+   * Attempts to stop all the activity for this {@link Tracer}. Calls {@link\n+   * SpanProcessor#shutdown()} for all registered {@link SpanProcessor}s.\n+   *\n+   * <p>This operation may block until all the Spans are processed. Must be called before turning\n+   * off the main application to ensure all data are processed and exported.\n+   *\n+   * <p>After this is called, newly created {@code Span}s will be no-ops.\n+   *\n+   * <p>After this is called, further attempts at re-using or reconfiguring this instance will\n+   * result in undefined behavior. It should be considered a terminal operation for the SDK\n+   * implementation.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1312ee7fe21ec6b049f3d37a0ba3d054ad9b6d0b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MTkzNQ==", "bodyText": "Note: #2422 implements this, so I don't know that we need an issue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2285#discussion_r551481935", "createdAt": "2021-01-04T18:13:42Z", "author": {"login": "jkwatson"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/SdkTracerManagement.java", "diffHunk": "@@ -70,4 +71,22 @@\n    * @see SpanProcessor#forceFlush()\n    */\n   CompletableResultCode forceFlush();\n+\n+  /**\n+   * Attempts to stop all the activity for this {@link Tracer}. Calls {@link\n+   * SpanProcessor#shutdown()} for all registered {@link SpanProcessor}s.\n+   *\n+   * <p>This operation may block until all the Spans are processed. Must be called before turning\n+   * off the main application to ensure all data are processed and exported.\n+   *\n+   * <p>After this is called, newly created {@code Span}s will be no-ops.\n+   *\n+   * <p>After this is called, further attempts at re-using or reconfiguring this instance will\n+   * result in undefined behavior. It should be considered a terminal operation for the SDK\n+   * implementation.\n+   */\n+  @Override\n+  default void close() {\n+    shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNzE2MQ=="}, "originalCommit": {"oid": "1312ee7fe21ec6b049f3d37a0ba3d054ad9b6d0b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1701, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}