{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTAyNTY3", "number": 1235, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo0NjoxNlrOD9c6sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDozMFrOD-r76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzYzNTA1OnYy", "diffSide": "RIGHT", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo0NjoxNlrOGW9Gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTowNzozOVrOGYi7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ==", "bodyText": "use a create factory method instead of a public ctor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426722979", "createdAt": "2020-05-18T15:46:16Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0OTc4MA==", "bodyText": "Talking of, since the Propagators do not keep state, I'm wondering on why we don't expose them as static instances, i.e. getSingleHeaderPropagator() and getMultipleHeaderPropagator().", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426749780", "createdAt": "2020-05-18T16:26:06Z", "author": {"login": "carlosalberto"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NjcxMw==", "bodyText": "@bogdandrutu  I can make this change. But not sure why we would need a factor when we just have one argument.\n@carlosalberto  Now I think about this, making static methods make sense. But, again I don't know what the implication will be. I think this will cause a breaking change for the clients while upgrading to the next version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426756713", "createdAt": "2020-05-18T16:37:53Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0NDQ0NQ==", "bodyText": "Breaking changes are ok at the moment, since we haven't hit version 1.0 yet.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426844445", "createdAt": "2020-05-18T19:23:02Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTAwMA==", "bodyText": "Yeah, it seems like a B3Propagators.SINGLE_HEADER and B3Propagators.MULTI_HEADER would be a great way to get access to them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r426849000", "createdAt": "2020-05-18T19:32:17Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODc1NQ==", "bodyText": "Factory methods are better than constructors because they can be change to return different instances for example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r427648755", "createdAt": "2020-05-19T23:04:20Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODg4NQ==", "bodyText": "Happy with @jkwatson solution fyi", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r427648885", "createdAt": "2020-05-19T23:04:43Z", "author": {"login": "bogdandrutu"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1OTE5Ng==", "bodyText": "I have made changes based on the feedback.\nI have made the current constructor as private. I have exposed a public static variable for B3Propagators.SINGLE_HEADER and B3Propagators.MULTIPLE_HEADER.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428159196", "createdAt": "2020-05-20T16:45:21Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2MjcxOA==", "bodyText": "One last thing: do we want to expose these singletons directly, or should we instead expose them through a static methods? We have historically chosen the second option, which I think it's the slightly better approach ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428262718", "createdAt": "2020-05-20T19:38:57Z", "author": {"login": "carlosalberto"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2MzkxNA==", "bodyText": "no strong opinion from me. For consistency, it's probably better to hide the instances behind static accessors.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428263914", "createdAt": "2020-05-20T19:41:20Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5MTQyMA==", "bodyText": "Made change to expose the singletons via static getters.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428391420", "createdAt": "2020-05-21T01:07:39Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -62,8 +62,13 @@ public B3Propagator() {\n    * @param singleHeader whether to use single or multiple headers.\n    */\n   public B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjk3OQ=="}, "originalCommit": {"oid": "63ed38771ea352a0cfa58d70c9d0acddbaf56ed6"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk4NDEzOnYy", "diffSide": "RIGHT", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNTo0MlrOGYY3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTowMzo0N1rOGYZ7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNjQxNg==", "bodyText": "This field won't create a new instance. The javadoc should say that it will return an instance and describe it's functionality, rather than the internal implementation.  (same comment goes for the multi-header field)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428226416", "createdAt": "2020-05-20T18:35:42Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0Mzg2OQ==", "bodyText": "Fixed the incorrect JavaDoc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428243869", "createdAt": "2020-05-20T19:03:47Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNjQxNg=="}, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk5NTUzOnYy", "diffSide": "RIGHT", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNzozN1rOGYY9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTowNDowNFrOGYZ8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyODA5Mg==", "bodyText": "since this constructor is private, and only called from the field declarations, you could just inline the boolean logic into the call sites (i.e. get rid of the boolean and just pass in the two implementations that you want in the right constructor calls)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428228092", "createdAt": "2020-05-20T18:37:37Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorSingleHeader} and {@link B3PropagatorExtractorSingleHeader}.\n+   */\n+  public static final B3Propagator SINGLE_HEADER = new B3Propagator(/* singleHeader= */ true);\n+\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorMultipleHeaders} and {@link B3PropagatorExtractorMultipleHeaders}.\n+   */\n+  public static final B3Propagator MULTI_HEADER = new B3Propagator(/* singleHeader= */ false);\n \n   /**\n    * Creates a new instance of {@link B3Propagator}.\n    *\n    * @param singleHeader whether to use single or multiple headers.\n    */\n-  public B3Propagator(boolean singleHeader) {\n-    b3PropagatorInjector = new B3PropagatorInjector(singleHeader);\n-    b3PropagatorExtractor = new B3PropagatorExtractor(singleHeader);\n+  private B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NDAzMQ==", "bodyText": "Took care of it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428244031", "createdAt": "2020-05-20T19:04:04Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -51,19 +51,31 @@\n   private final B3PropagatorInjector b3PropagatorInjector;\n   private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  /** Creates a new instance of {@link B3Propagator}. Defaults to use multiple headers. */\n-  public B3Propagator() {\n-    this(false);\n-  }\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorSingleHeader} and {@link B3PropagatorExtractorSingleHeader}.\n+   */\n+  public static final B3Propagator SINGLE_HEADER = new B3Propagator(/* singleHeader= */ true);\n+\n+  /**\n+   * Creates a new instance of {@link B3Propagator}. This instance contains the reference to {@link\n+   * B3PropagatorInjectorMultipleHeaders} and {@link B3PropagatorExtractorMultipleHeaders}.\n+   */\n+  public static final B3Propagator MULTI_HEADER = new B3Propagator(/* singleHeader= */ false);\n \n   /**\n    * Creates a new instance of {@link B3Propagator}.\n    *\n    * @param singleHeader whether to use single or multiple headers.\n    */\n-  public B3Propagator(boolean singleHeader) {\n-    b3PropagatorInjector = new B3PropagatorInjector(singleHeader);\n-    b3PropagatorExtractor = new B3PropagatorExtractor(singleHeader);\n+  private B3Propagator(boolean singleHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyODA5Mg=="}, "originalCommit": {"oid": "f59c3278a5002eaa29778286ddd8ef694a0e5352"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDU4MDEwOnYy", "diffSide": "RIGHT", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDowNFrOGY8LVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDowNFrOGY8LVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNDk1MQ==", "bodyText": "What do you think of making this an interface, rather than an abstract class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428804951", "createdAt": "2020-05-21T17:34:04Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -18,59 +18,9 @@\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n-import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.SpanContext;\n-import io.opentelemetry.trace.SpanId;\n-import io.opentelemetry.trace.TraceId;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorInjector {\n-  private static final int SAMPLED_FLAG_SIZE = 1;\n-  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n-  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n-  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n-  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n-  private static final int SAMPLED_FLAG_OFFSET =\n-      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n-  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n-\n-  private final boolean singleHeader;\n-\n-  B3PropagatorInjector(boolean singleHeader) {\n-    this.singleHeader = singleHeader;\n-  }\n-\n-  <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {\n-    Objects.requireNonNull(context, \"context\");\n-    Objects.requireNonNull(setter, \"setter\");\n-\n-    Span span = TracingContextUtils.getSpanWithoutDefault(context);\n-    if (span == null) {\n-      return;\n-    }\n-\n-    SpanContext spanContext = span.getContext();\n-    String sampled =\n-        spanContext.getTraceFlags().isSampled() ? B3Propagator.TRUE_INT : B3Propagator.FALSE_INT;\n-\n-    if (singleHeader) {\n-      char[] chars = new char[COMBINED_HEADER_SIZE];\n-      spanContext.getTraceId().copyLowerBase16To(chars, 0);\n-      chars[SPAN_ID_OFFSET - 1] = B3Propagator.COMBINED_HEADER_DELIMITER_CHAR;\n-      spanContext.getSpanId().copyLowerBase16To(chars, SPAN_ID_OFFSET);\n-      chars[SAMPLED_FLAG_OFFSET - 1] = B3Propagator.COMBINED_HEADER_DELIMITER_CHAR;\n-      chars[SAMPLED_FLAG_OFFSET] =\n-          spanContext.getTraceFlags().isSampled()\n-              ? B3Propagator.IS_SAMPLED\n-              : B3Propagator.NOT_SAMPLED;\n-      setter.set(carrier, B3Propagator.COMBINED_HEADER, new String(chars));\n-    } else {\n-      setter.set(carrier, B3Propagator.TRACE_ID_HEADER, spanContext.getTraceId().toLowerBase16());\n-      setter.set(carrier, B3Propagator.SPAN_ID_HEADER, spanContext.getSpanId().toLowerBase16());\n-      setter.set(carrier, B3Propagator.SAMPLED_HEADER, sampled);\n-    }\n-  }\n+abstract class B3PropagatorInjector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDU4MTU1OnYy", "diffSide": "RIGHT", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozNDozMFrOGY8MQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODowNjoyMFrOGY9ROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA==", "bodyText": "What do think about making this an interface, rather than an abstract class?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428805184", "createdAt": "2020-05-21T17:34:30Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxMjc2Ng==", "bodyText": "Okay. If we make them interface then, will we be moving buildSpanContext, isTraceIdValid and isSpanIdValid  to Util class I guess. Not sure if we want to make them default method of the interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428812766", "createdAt": "2020-05-21T17:48:13Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA=="}, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxMzQyNA==", "bodyText": "You can still have static methods on your interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428813424", "createdAt": "2020-05-21T17:49:26Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA=="}, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxODMyOA==", "bodyText": "I believe it is Java 8 and above right? I don't think we have static and default in Java 7.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428818328", "createdAt": "2020-05-21T17:58:05Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA=="}, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyMDM0OQ==", "bodyText": "oh shoot, you're right. Since they are only used in one place, you can have an inner util class in the interface, like we do in the SpanData right now, rather than pulling it out of the interface entirely.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428820349", "createdAt": "2020-05-21T18:01:38Z", "author": {"login": "jkwatson"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA=="}, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyMjg0MA==", "bodyText": "sounds good", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1235#discussion_r428822840", "createdAt": "2020-05-21T18:06:20Z", "author": {"login": "ksameersrk"}, "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -16,122 +16,32 @@\n \n package io.opentelemetry.contrib.trace.propagation;\n \n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n-import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n import io.opentelemetry.internal.StringUtils;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.SpanContext;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceFlags;\n import io.opentelemetry.trace.TraceId;\n import io.opentelemetry.trace.TraceState;\n-import io.opentelemetry.trace.TracingContextUtils;\n-import java.util.Objects;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n-final class B3PropagatorExtractor {\n+abstract class B3PropagatorExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNTE4NA=="}, "originalCommit": {"oid": "a01594f2f435445b3bc2387401fb40c126bde439"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 687, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}