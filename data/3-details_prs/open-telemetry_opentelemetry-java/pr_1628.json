{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTI0NDE5", "number": 1628, "title": "Move the TraceFlags isSampled boolean into the SpanContext", "bodyText": "Resolves #1603", "createdAt": "2020-09-08T15:23:49Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628", "merged": true, "mergeCommit": {"oid": "ddb38970fabadd82e7fa875789d74b9bd29fd257"}, "closed": true, "closedAt": "2020-09-14T16:28:09Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG5HkNAH2gAyNDgyMTI0NDE5OmIyMTNlZDU4YThkMmVjZjU3YWZiMDY5ZTIyMjFiMDQ3YTkyZDk1Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI1QHYAFqTQ4NzkxMzc1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b213ed58a8d2ecf57afb069e2221b047a92d95f8", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b213ed58a8d2ecf57afb069e2221b047a92d95f8", "committedDate": "2020-09-08T15:13:38Z", "message": "move TraceFlags into the SpanContext, and expose the relevant flags."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1cac9df2febe7a30c1841eeb28724886509b30b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c1cac9df2febe7a30c1841eeb28724886509b30b", "committedDate": "2020-09-08T15:22:27Z", "message": "Cleanup from rebase from main branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTcxMDcz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-484571073", "createdAt": "2020-09-09T00:02:38Z", "commit": {"oid": "c1cac9df2febe7a30c1841eeb28724886509b30b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDowMjozOFrOHOx7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDowNzo0OFrOHOyA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MDA2Mg==", "bodyText": "Think we're using getHexLength\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/trace/TraceId.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r485260062", "createdAt": "2020-09-09T00:02:38Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceFlags.java", "diffHunk": "@@ -16,45 +16,32 @@\n \n package io.opentelemetry.trace;\n \n-import io.opentelemetry.internal.Utils;\n-import java.util.Arrays;\n-import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * A class that represents global trace options. These options are propagated to all child {@link\n- * Span spans}. These determine features such as whether a {@code Span} should be traced. It is\n- * implemented as a bitmask.\n+ * Helper methods for dealing with trace flags options. These options are propagated to all child\n+ * {@link Span spans}. These determine features such as whether a {@code Span} should be traced. It\n+ * is implemented as a bitmask.\n  *\n  * @since 0.1.0\n  */\n @Immutable\n public final class TraceFlags {\n-  // Default options. Nothing set.\n-  private static final byte DEFAULT_OPTIONS = 0;\n+  private TraceFlags() {}\n+\n   // Bit to represent whether trace is sampled or not.\n   private static final byte IS_SAMPLED = 0x1;\n \n   private static final int SIZE = 1;\n   private static final int BASE16_SIZE = 2 * SIZE;\n-  private static final TraceFlags DEFAULT = fromByte(DEFAULT_OPTIONS);\n-\n-  // The set of enabled features is determined by all the enabled bits.\n-  private final byte options;\n-\n-  // Creates a new {@code TraceFlags} with the given options.\n-  private TraceFlags(byte options) {\n-    this.options = options;\n-  }\n \n   /**\n-   * Returns the size in bytes of the {@code TraceFlags}.\n+   * Returns the size in Hex of trace flags.\n    *\n-   * @return the size in bytes of the {@code TraceFlags}.\n-   * @since 0.1.0\n+   * @since 0.9.0\n    */\n-  public static int getSize() {\n-    return SIZE;\n+  public static int getBase16Size() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cac9df2febe7a30c1841eeb28724886509b30b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MTE5Nw==", "bodyText": "Do you think we can just keep this in the w3c propagator? We previously had a data object that corresponded with the w3c concept of traceflags, but now if we don't, it seems we don't need this here in the first place. I guess this comment applies to the entire TraceFlags class itself too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r485261197", "createdAt": "2020-09-09T00:06:32Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -136,13 +136,13 @@ public String getSpanIdAsHexString() {\n     return SpanId.bytesFromHex(getSpanIdHex(), 0);\n   }\n \n-  /**\n-   * Returns the {@code TraceFlags} associated with this {@code SpanContext}.\n-   *\n-   * @return the {@code TraceFlags} associated with this {@code SpanContext}.\n-   * @since 0.1.0\n-   */\n-  public abstract TraceFlags getTraceFlags();\n+  /** Whether the span in this context is sampled. */\n+  public abstract boolean isSampled();\n+\n+  public void copyTraceFlagsHexTo(char[] dest, int destOffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cac9df2febe7a30c1841eeb28724886509b30b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2MTUyNw==", "bodyText": "Nit but we should rename these variables to sampled throughout", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r485261527", "createdAt": "2020-09-09T00:07:48Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -206,7 +204,7 @@ public static JaegerPropagator getInstance() {\n   private static SpanContext buildSpanContext(String traceId, String spanId, String flags) {\n     try {\n       int flagsInt = Integer.parseInt(flags);\n-      TraceFlags traceFlags = ((flagsInt & 1) == 1) ? SAMPLED_FLAGS : NOT_SAMPLED_FLAGS;\n+      boolean traceFlags = ((flagsInt & 1) == 1) ? SAMPLED_FLAGS : NOT_SAMPLED_FLAGS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cac9df2febe7a30c1841eeb28724886509b30b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6df33d55ee6f2b7591df1928ce7af4092a8829d", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e6df33d55ee6f2b7591df1928ce7af4092a8829d", "committedDate": "2020-09-09T21:18:09Z", "message": "Address comments from PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDU4Mjcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-485458270", "createdAt": "2020-09-09T22:59:39Z", "commit": {"oid": "e6df33d55ee6f2b7591df1928ce7af4092a8829d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1OTozOVrOHPdFcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNDowMFrOHPdLDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzIxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean isSampled = TraceFlags.getDefault();\n          \n          \n            \n                boolean isSampled = TraceFlags.getDefault();", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r485967216", "createdAt": "2020-09-09T22:59:39Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java", "diffHunk": "@@ -150,7 +150,7 @@ public static AwsXRayPropagator getInstance() {\n \n     String traceId = TraceId.getInvalid();\n     String spanId = SpanId.getInvalid();\n-    TraceFlags traceFlags = TraceFlags.getDefault();\n+    Boolean isSampled = TraceFlags.getDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6df33d55ee6f2b7591df1928ce7af4092a8829d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2ODY1NQ==", "bodyText": "Just for context, this is a big reason for removing / moving TraceFlags to w3c - it's pretty weird for the default TraceFlags to just be a boolean instead of 00 :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r485968655", "createdAt": "2020-09-09T23:04:00Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceFlags.java", "diffHunk": "@@ -63,191 +50,14 @@ public static int getSize() {\n    * @return the default {@code TraceFlags}.\n    * @since 0.1.0\n    */\n-  public static TraceFlags getDefault() {\n-    return DEFAULT;\n-  }\n-\n-  /**\n-   * Returns a {@code TraceFlags} whose representation is {@code src}.\n-   *\n-   * @param src the byte representation of the {@code TraceFlags}.\n-   * @return a {@code TraceFlags} whose representation is {@code src}.\n-   * @since 0.1.0\n-   */\n-  public static TraceFlags fromByte(byte src) {\n-    return new TraceFlags(src);\n-  }\n-\n-  /**\n-   * Returns a {@code TraceOption} built from a lowercase base16 representation.\n-   *\n-   * @param src the lowercase base16 representation.\n-   * @param srcOffset the offset in the buffer where the representation of the {@code TraceFlags}\n-   *     begins.\n-   * @return a {@code TraceOption} built from a lowercase base16 representation.\n-   * @throws NullPointerException if {@code src} is null.\n-   * @throws IllegalArgumentException if {@code src.length} is not {@code 2 * TraceOption.SIZE} OR\n-   *     if the {@code str} has invalid characters.\n-   * @since 0.1.0\n-   */\n-  public static TraceFlags fromLowerBase16(CharSequence src, int srcOffset) {\n-    return new TraceFlags(BigendianEncoding.byteFromBase16String(src, srcOffset));\n-  }\n-\n-  /**\n-   * Returns the one byte representation of the {@code TraceFlags}.\n-   *\n-   * @return the one byte representation of the {@code TraceFlags}.\n-   * @since 0.1.0\n-   */\n-  public byte getByte() {\n-    return options;\n-  }\n-\n-  /**\n-   * Copies the byte representations of the {@code TraceFlags} into the {@code dest} beginning at\n-   * the {@code destOffset} offset.\n-   *\n-   * <p>Equivalent with (but faster because it avoids any new allocations):\n-   *\n-   * <pre>{@code\n-   * System.arraycopy(getBytes(), 0, dest, destOffset, TraceFlags.getSize());\n-   * }</pre>\n-   *\n-   * @param dest the destination buffer.\n-   * @param destOffset the starting offset in the destination buffer.\n-   * @throws NullPointerException if {@code dest} is null.\n-   * @throws IndexOutOfBoundsException if {@code destOffset+TraceFlags.getSize()} is greater than\n-   *     {@code dest.length}.\n-   * @since 0.1.0\n-   */\n-  public void copyBytesTo(byte[] dest, int destOffset) {\n-    Utils.checkIndex(destOffset, dest.length);\n-    dest[destOffset] = options;\n-  }\n-\n-  /**\n-   * Copies the lowercase base16 representations of the {@code TraceId} into the {@code dest}\n-   * beginning at the {@code destOffset} offset.\n-   *\n-   * @param dest the destination buffer.\n-   * @param destOffset the starting offset in the destination buffer.\n-   * @throws IndexOutOfBoundsException if {@code destOffset + 2} is greater than {@code\n-   *     dest.length}.\n-   * @since 0.1.0\n-   */\n-  public void copyLowerBase16To(char[] dest, int destOffset) {\n-    BigendianEncoding.byteToBase16String(options, dest, destOffset);\n-  }\n-\n-  /**\n-   * Returns the lowercase base16 encoding of this {@code TraceFlags}.\n-   *\n-   * @return the lowercase base16 encoding of this {@code TraceFlags}.\n-   * @since 0.1.0\n-   */\n-  public String toLowerBase16() {\n-    char[] chars = new char[BASE16_SIZE];\n-    copyLowerBase16To(chars, 0);\n-    return new String(chars);\n-  }\n-\n-  /**\n-   * Returns a new {@link Builder} with default options.\n-   *\n-   * @return a new {@code Builder} with default options.\n-   * @since 0.1.0\n-   */\n-  public static Builder builder() {\n-    return new Builder(DEFAULT_OPTIONS);\n-  }\n-\n-  /**\n-   * Returns a new {@link Builder} with all given options set.\n-   *\n-   * @param traceFlags the given options set.\n-   * @return a new {@code Builder} with all given options set.\n-   * @since 0.1.0\n-   */\n-  public static Builder builder(TraceFlags traceFlags) {\n-    return new Builder(traceFlags.options);\n-  }\n-\n-  /**\n-   * Returns a boolean indicating whether this {@code Span} is part of a sampled trace and data\n-   * should be exported to a persistent store.\n-   *\n-   * @return a boolean indicating whether the trace is sampled.\n-   * @since 0.1.0\n-   */\n-  public boolean isSampled() {\n-    return hasOption(IS_SAMPLED);\n-  }\n-\n-  @Override\n-  public boolean equals(@Nullable Object obj) {\n-    if (obj == this) {\n-      return true;\n-    }\n-\n-    if (!(obj instanceof TraceFlags)) {\n-      return false;\n-    }\n-\n-    TraceFlags that = (TraceFlags) obj;\n-    return options == that.options;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Arrays.hashCode(new byte[] {options});\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"TraceFlags{sampled=\" + isSampled() + \"}\";\n-  }\n-\n-  /**\n-   * Builder class for {@link TraceFlags}.\n-   *\n-   * @since 0.1.0\n-   */\n-  public static final class Builder {\n-    private byte options;\n-\n-    private Builder(byte options) {\n-      this.options = options;\n-    }\n-\n-    /**\n-     * Sets the sampling bit in the options.\n-     *\n-     * @param isSampled the sampling bit.\n-     * @return this.\n-     * @since 0.1.0\n-     */\n-    public Builder setIsSampled(boolean isSampled) {\n-      if (isSampled) {\n-        options = (byte) (options | IS_SAMPLED);\n-      } else {\n-        options = (byte) (options & ~IS_SAMPLED);\n-      }\n-      return this;\n-    }\n-\n-    /**\n-     * Builds and returns a {@code TraceFlags} with the desired options.\n-     *\n-     * @return a {@code TraceFlags} with the desired options.\n-     * @since 0.1.0\n-     */\n-    public TraceFlags build() {\n-      return fromByte(options);\n-    }\n+  public static boolean getDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6df33d55ee6f2b7591df1928ce7af4092a8829d"}, "originalPosition": 241}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0abc21bc25b24cadeaac2a6f87b2d3dbd25c0a61", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0abc21bc25b24cadeaac2a6f87b2d3dbd25c0a61", "committedDate": "2020-09-09T23:06:17Z", "message": "Update extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/AwsXRayPropagator.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a61910c0331785d8d9666838ec23d2699533db6", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a61910c0331785d8d9666838ec23d2699533db6", "committedDate": "2020-09-09T23:15:17Z", "message": "Undo @anuraaga's bad suggestion. ;)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTAzNTEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-486103510", "createdAt": "2020-09-10T16:19:13Z", "commit": {"oid": "4a61910c0331785d8d9666838ec23d2699533db6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxOToxM1rOHP719g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxOToxM1rOHP719g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3MTE1OA==", "bodyText": "We should keep this as byte because more bits can be used in the future and we don't want to have to deal with adding more overloads to this method (and all public methods). What do you think?\nFor the getters we can have a getTraceFlags as well as isSampled (helper method to access properties in the flags).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#discussion_r486471158", "createdAt": "2020-09-10T16:19:13Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -54,24 +54,24 @@ public static SpanContext getInvalid() {\n    *\n    * @param traceIdHex the trace identifier of the span context.\n    * @param spanIdHex the span identifier of the span context.\n-   * @param traceFlags the trace options for the span context.\n+   * @param isSampled if the underlying span should be sampled.\n    * @param traceState the trace state for the span context.\n    * @return a new {@code SpanContext} with the given identifiers and options.\n    * @since 0.1.0\n    */\n   public static SpanContext create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a61910c0331785d8d9666838ec23d2699533db6"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTIwNzk2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-486120796", "createdAt": "2020-09-10T16:40:59Z", "commit": {"oid": "4a61910c0331785d8d9666838ec23d2699533db6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b8309623a97180d351309151b943df44e8c1215", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6b8309623a97180d351309151b943df44e8c1215", "committedDate": "2020-09-10T19:55:21Z", "message": "change the traceFlags input to the TraceContext be a byte, rather than a boolean."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3Nzg0OTIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-487784921", "createdAt": "2020-09-14T13:46:22Z", "commit": {"oid": "6b8309623a97180d351309151b943df44e8c1215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTEzNzU2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1628#pullrequestreview-487913756", "createdAt": "2020-09-14T15:51:12Z", "commit": {"oid": "6b8309623a97180d351309151b943df44e8c1215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2452, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}