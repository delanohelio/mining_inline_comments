{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NTE2NTIx", "number": 1203, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozMjowMlrOD7rfKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NToyMVrOD7sMYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTA1MDY0OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozMjowMlrOGUJnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozMzo1MlrOGUJtRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MjI2Nw==", "bodyText": "Do you really need to add 5 attributes for this test? You could have a single item and assert that only that item remains afterwards, and make the test simpler/smaller.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423782267", "createdAt": "2020-05-12T14:32:02Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -172,6 +172,44 @@ public void setAttribute() {\n     }\n   }\n \n+  @Test\n+  public void setAttribute_afterEnd() {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4Mzc0OA==", "bodyText": "Oh, never mind. You are exercising all the attribute types.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423783748", "createdAt": "2020-05-12T14:33:52Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -172,6 +172,44 @@ public void setAttribute() {\n     }\n   }\n \n+  @Test\n+  public void setAttribute_afterEnd() {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MjI2Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTA5NDE2OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0MTowNlrOGUKCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0OToxMFrOGUKb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4OTIyOA==", "bodyText": "This will not be added anyway. Maybe we can keep only the values that will be really added? This makes the test more concise.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423789228", "createdAt": "2020-05-12T14:41:06Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -230,6 +268,37 @@ public void setAttribute_nullAttributeValue() throws Exception {\n     assertThat(span.toSpanData().getAttributes()).isEmpty();\n   }\n \n+  @Test\n+  public void setAttribute_nullAttributeValue_afterEnd() throws Exception {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);\n+    spanBuilder.setAttribute(\"emptyString\", \"\");\n+    spanBuilder.setAttribute(\"nullString\", (AttributeValue) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5NTY4MA==", "bodyText": "You're right! This is pointless since it is covered by another test!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423795680", "createdAt": "2020-05-12T14:49:10Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/SpanBuilderSdkTest.java", "diffHunk": "@@ -230,6 +268,37 @@ public void setAttribute_nullAttributeValue() throws Exception {\n     assertThat(span.toSpanData().getAttributes()).isEmpty();\n   }\n \n+  @Test\n+  public void setAttribute_nullAttributeValue_afterEnd() throws Exception {\n+    Span.Builder spanBuilder = tracerSdk.spanBuilder(SPAN_NAME);\n+    spanBuilder.setAttribute(\"emptyString\", \"\");\n+    spanBuilder.setAttribute(\"nullString\", (AttributeValue) null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4OTIyOA=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTE2NjQyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NToyMVrOGUKvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo0MDo1NVrOGUPfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw==", "bodyText": "why don't we just do this check once up front, rather than repeating the code here and below?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423800597", "createdAt": "2020-05-12T14:55:21Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNTExMw==", "bodyText": "I didn't want to introduce another synchronized block. But I guess you're right, it is better to do only once upfront!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423805113", "createdAt": "2020-05-12T15:00:50Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMzUyOA==", "bodyText": "I'd rather have one slightly larger synchronized block, rather than force jumping in and out of the synchronization twice in rapid succession. As long as you're doing very cheap operations, just putting all the logic in one synchronization context is going to be better.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423813528", "createdAt": "2020-05-12T15:11:22Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzODEzOQ==", "bodyText": "But this one does not jump between synchronized.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423838139", "createdAt": "2020-05-12T15:43:53Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzOTQxMw==", "bodyText": "I agree. I was just thinking forward to moving the ended check up-front, rather then duplicating that check.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423839413", "createdAt": "2020-05-12T15:45:34Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzMyMg==", "bodyText": "Splitting the lock is incorrect. You need to make the check in the same lock sync to ensure that the condition does not change between the two synchronized sections", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423853322", "createdAt": "2020-05-12T16:04:11Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NDM1OQ==", "bodyText": "To clarify @jkwatson your proposal is correct but your concern should not be a preference should be a requirement because otherwise the code is incorrect :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423854359", "createdAt": "2020-05-12T16:05:39Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NjMyMw==", "bodyText": "You are right @bogdandrutu, I was thinking only to the case where the span already ended.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423856323", "createdAt": "2020-05-12T16:08:37Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NzU2NA==", "bodyText": "@bogdandrutu also true! I hadn't actually fully thought through the implementation, but you are absolutely correct.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423857564", "createdAt": "2020-05-12T16:10:18Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MTc1OQ==", "bodyText": "Personally I am happy with the current code, but not opposed to change it based on @jkwatson suggestion. Up to you @thisthat :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423871759", "createdAt": "2020-05-12T16:30:29Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3ODYwMQ==", "bodyText": "I think having everything in a single synchronized block makes it easier to fully understand the method. 7cab1ee addresses this \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1203#discussion_r423878601", "createdAt": "2020-05-12T16:40:55Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -334,6 +334,10 @@ public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     if (value == null || (value.getType().equals(STRING) && value.getStringValue() == null)) {\n       synchronized (lock) {\n+        if (hasEnded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMDU5Nw=="}, "originalCommit": {"oid": "4fa7723f5387c48f4a77a34bac451c6e8e2706e8"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 656, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}