{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTM1NTMz", "number": 1631, "title": "Implement the keyed-attributes proposal", "bodyText": "This implements the proposal in #1580 .\nMany apologies for the size of this PR. The only thing I can say in my defense is that it removes a net of over 1100 lines of code.\nMost of the changes are to test code, where attributes are created extensively. The actual change to the API surface is remarkably small.\nResolves #1580", "createdAt": "2020-09-09T21:03:41Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631", "merged": true, "mergeCommit": {"oid": "bf52c0af730cf6a473fa21eab42fd289185aadaa"}, "closed": true, "closedAt": "2020-09-21T15:52:41Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHjeC6AFqTQ4NjExMjU3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLFLRDAH2gAyNDgzMTM1NTMzOjQwZjU0YWU5NDMxMzIwYTYxZmEyNTZiMWZiZjZjYmY0YjUwNzNkMWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTEyNTcw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-486112570", "createdAt": "2020-09-10T16:30:28Z", "commit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozMDoyOFrOHP8SUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozMDoyOFrOHP8SUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw==", "bodyText": "Should this change to LongKey, long value?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486478417", "createdAt": "2020-09-10T16:30:28Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTU0NTIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-486554520", "createdAt": "2020-09-11T07:53:58Z", "commit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1Mzo1OFrOHQSUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODowNjo1MFrOHQSudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTM4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n          \n          \n            \n             * This interface provides a handle for setting the values of {@link Attributes}. The type of a value", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486839388", "createdAt": "2020-09-11T07:53:58Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzOTc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              String get();\n          \n          \n            \n              String getName();\n          \n      \n    \n    \n  \n\nNot strong suggestion but I feel lack of symmetry between this get and getType", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486839794", "createdAt": "2020-09-11T07:54:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKey.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+/**\n+ * This interface provides a handle for setting the values of {@link Attributes}. The type of value\n+ * that can be set with an implementation of this key is denoted by the type parameter.\n+ *\n+ * @param <T> The type of value that can be set with the key.\n+ */\n+@SuppressWarnings(\"rawtypes\")\n+public interface AttributeKey<T> extends Comparable<AttributeKey> {\n+  /** Returns the underlying String representation of the key. */\n+  String get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDIwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n          \n          \n            \n            abstract class AttributeKeyImpl<T> implements AttributeKey<T> {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840200", "createdAt": "2020-09-11T07:55:24Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n          \n          \n            \n                return key;\n          \n      \n    \n    \n  \n\nI think just the key is a better toString for keys", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840469", "createdAt": "2020-09-11T07:55:50Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDkyMw==", "bodyText": "key should never be null I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486840923", "createdAt": "2020-09-11T07:56:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ==", "bodyText": "I guess the class may be public for these guys but I think AttributeKeys is a better home than the impl class", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486841425", "createdAt": "2020-09-11T07:57:37Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTg0NA==", "bodyText": "Also I think we can return AttributeKey<String> etc to be more generic and keep these types private as well", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486841844", "createdAt": "2020-09-11T07:58:25Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+  private final String key;\n+\n+  AttributeKeyImpl(String key) {\n+    this.key = key;\n+  }\n+\n+  @Override\n+  public String get() {\n+    return key;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return key != null ? key.equals(that.key) : that.key == null;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key != null ? key.hashCode() : 0;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"AttributeKeyImpl{\" + \"key='\" + key + '\\'' + '}';\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return get().compareTo(o.get());\n+  }\n+\n+  public static StringKey stringKey(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MTQyNQ=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NDcyOQ==", "bodyText": "Yeah I don't think we need to change these methods to use the keys. We could consider removing these methods - I'm on the fence on how useful these are for users. Keys will always have a significant performance benefit compared to creating a wrapper key every time this is invoked, so removing them reduces the chances of a user not realizing that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486844729", "createdAt": "2020-09-11T08:04:12Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -201,83 +224,75 @@ public Builder setAttribute(String key, AttributeValue value) {\n     }\n \n     /**\n-     * Sets a String {@link AttributeValue} into this.\n+     * Sets a String attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, String value) {\n-      AttributeValue v = stringAttributeValue(value);\n-      return setAttribute(key, v);\n+      return setAttribute(stringKey(key), value);\n     }\n \n     /**\n-     * Sets a long {@link AttributeValue} into this.\n+     * Sets a long attribute into this.\n      *\n      * @return this Builder\n      */\n     public Builder setAttribute(String key, long value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODQxNw=="}, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjA3MA==", "bodyText": "IIRC, the suggestion for a consumer interface with method per type was to avoid the somewhat lost type-safety of this pattern :) But I don't think it's that bad anyways", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r486846070", "createdAt": "2020-09-11T08:06:50Z", "author": {"login": "anuraaga"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -177,80 +179,55 @@ private Adapter() {}\n    *\n    * @param attributes the span attributes\n    * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n-   */\n-  @VisibleForTesting\n-  static Collection<Model.KeyValue> toKeyValues(Map<String, AttributeValue> attributes) {\n-    List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      tags.add(toKeyValue(entry.getKey(), entry.getValue()));\n-    }\n-    return tags;\n-  }\n-\n-  /**\n-   * Converts a map of attributes into a collection of Jaeger's {@link Model.KeyValue}.\n-   *\n-   * @param attributes the span attributes\n-   * @return a collection of Jaeger key values\n-   * @see #toKeyValue(String, AttributeValue)\n+   * @see #toKeyValue\n    */\n   @VisibleForTesting\n   static Collection<Model.KeyValue> toKeyValues(ReadableAttributes attributes) {\n     final List<Model.KeyValue> tags = new ArrayList<>(attributes.size());\n     attributes.forEach(\n         new AttributeConsumer() {\n           @Override\n-          public void consume(String key, AttributeValue value) {\n+          public <T> void consume(AttributeKey<T> key, T value) {\n             tags.add(toKeyValue(key, value));\n           }\n         });\n     return tags;\n   }\n \n   /**\n-   * Converts the given key and {@link AttributeValue} into Jaeger's {@link Model.KeyValue}.\n+   * Converts the given {@link AttributeKey} and value into Jaeger's {@link Model.KeyValue}.\n    *\n    * @param key the entry key as string\n    * @param value the entry value\n    * @return a Jaeger key value\n    */\n   @VisibleForTesting\n-  static Model.KeyValue toKeyValue(String key, AttributeValue value) {\n+  static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key);\n+    builder.setKey(key.get());\n \n-    switch (value.getType()) {\n+    switch (key.getType()) {\n       case STRING:\n-        builder.setVStr(value.getStringValue());\n+        builder.setVStr((String) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78de78f21e62543820b939e4a4dbf5cfd45f9059", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78de78f21e62543820b939e4a4dbf5cfd45f9059", "committedDate": "2020-09-09T22:29:41Z", "message": "a bit of cleanup; fix a todo"}, "afterCommit": {"oid": "3dfeff1b2e7d8909bf542162a6ce606059701d5d", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3dfeff1b2e7d8909bf542162a6ce606059701d5d", "committedDate": "2020-09-11T19:25:39Z", "message": "update for changes from the main branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTk3MzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-487197349", "createdAt": "2020-09-12T02:55:45Z", "commit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1NTo0NVrOHQyAAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMzowMDo1NVrOHQyB1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODQ2NQ==", "bodyText": "Also need to check key.getKey is null?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487358465", "createdAt": "2020-09-12T02:55:45Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -169,20 +197,16 @@ public Attributes build() {\n       return sortAndFilterToAttributes(data.toArray());\n     }\n \n-    /**\n-     * Sets a bare {@link AttributeValue} into this.\n-     *\n-     * @return this Builder\n-     */\n-    public Builder setAttribute(String key, AttributeValue value) {\n-      if (key == null || key.length() == 0) {\n+    /** Sets a {@link AttributeKey} with associated value into this. */\n+    public <T> Builder setAttribute(AttributeKey<T> key, T value) {\n+      if (key == null || key.getKey().length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODkzMg==", "bodyText": "Just had an idea which I think could have been possible with separate key impls but don't think so with AutoValue version. If the array keys implemented a marker interface like AttributeArrayKey<T> then we could also provide setAttribute(AttributeArrayKey<T>, T...). Array keys aren't so common though and we could rework later too so no big deal now though.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487358932", "createdAt": "2020-09-12T03:00:55Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/common/AttributesKeys.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import java.util.List;\n+\n+/**\n+ * Creation methods for {@link AttributeKey} implementations.\n+ *\n+ * @see Attributes\n+ */\n+public class AttributesKeys {\n+  private AttributesKeys() {}\n+\n+  /** Create a new AttributeKey for String valued attributes. */\n+  public static AttributeKey<String> stringKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING);\n+  }\n+\n+  /** Create a new AttributeKey for Boolean valued attributes. */\n+  public static AttributeKey<Boolean> booleanKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.BOOLEAN);\n+  }\n+\n+  /** Create a new AttributeKey for Long valued attributes. */\n+  public static AttributeKey<Long> longKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.LONG);\n+  }\n+\n+  /** Create a new AttributeKey for Double valued attributes. */\n+  public static AttributeKey<Double> doubleKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.DOUBLE);\n+  }\n+\n+  /** Create a new AttributeKey for List&lt;String&gt; valued attributes. */\n+  public static AttributeKey<List<String>> stringArrayKey(String key) {\n+    return AttributeKeyImpl.create(key, AttributeType.STRING_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDk2NTA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-487496508", "createdAt": "2020-09-14T07:44:24Z", "commit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0NDoyNVrOHRHrXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozOToyNVrOHRN63A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzYzMA==", "bodyText": "I would still keep the @since", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487713630", "createdAt": "2020-09-14T07:44:25Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeConsumer.java", "diffHunk": "@@ -16,10 +16,7 @@\n \n package io.opentelemetry.common;\n \n-/**\n- * Convenience interface for consuming {@link ReadableAttributes}.\n- *\n- * @since 0.9.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNTkwMA==", "bodyText": "I would prefer to sanitize here rather than in the caller methods. This way this class is future proof.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487815900", "createdAt": "2020-09-14T10:39:25Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/common/ImmutableKeyValuePairs.java", "diffHunk": "@@ -98,14 +92,24 @@ private static void quickSort(Object[] data, int leftIndex, int rightIndex) {\n     quickSort(data, counter, rightIndex);\n   }\n \n+  private static <K extends Comparable<K>> int compareToNullSafe(K key, K pivotKey) {\n+    if (key == null) {\n+      return pivotKey == null ? 0 : -1;\n+    }\n+    if (pivotKey == null) {\n+      return 1;\n+    }\n+    return key.compareTo(pivotKey);\n+  }\n+\n   private static List<Object> dedupe(Object[] data) {\n     List<Object> result = new ArrayList<>(data.length);\n     Object previousKey = null;\n \n     for (int i = 0; i < data.length; i += 2) {\n       Object key = data[i];\n       Object value = data[i + 1];\n-      if (key == null || \"\".equals(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzA5MTc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-487309177", "createdAt": "2020-09-13T13:52:36Z", "commit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMzo1MjozNlrOHQ8nLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo0NjozMlrOHRP-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjMzNA==", "bodyText": "Why? Can there be attributes with the same key but different types?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487532334", "createdAt": "2020-09-13T13:52:36Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMjY1OA==", "bodyText": "what if key==null?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487532658", "createdAt": "2020-09-13T13:55:09Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/Attributes.java", "diffHunk": "@@ -125,6 +146,13 @@ public static Attributes of(\n   }\n \n   private static Attributes sortAndFilterToAttributes(Object... data) {\n+    // null out any empty keys\n+    for (int i = 0; i < data.length; i += 2) {\n+      AttributeKey<?> key = (AttributeKey<?>) data[i];\n+      if (key != null && (key.getKey() == null || \"\".equals(key.getKey()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0OTU4Mg==", "bodyText": "I don't quite follow, why so much extends clauses were eliminated?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r487849582", "createdAt": "2020-09-14T11:46:32Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/common/ReadableAttributes.java", "diffHunk": "@@ -21,6 +21,15 @@\n  *\n  * <p>See {@link Attributes} for the public API implementation.\n  */\n-public interface ReadableAttributes extends ReadableKeyValuePairs<String, AttributeValue> {\n-  AttributeValue get(String key);\n+public interface ReadableAttributes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7303e011448442e61349e5832341324123035f61"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35c1b9bc672e52af62eedc689cae970193d0c63a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/35c1b9bc672e52af62eedc689cae970193d0c63a", "committedDate": "2020-09-14T16:23:05Z", "message": "Add javadoc notes to encourage using the lower-overhead attribute options."}, "afterCommit": {"oid": "997776298f4eb2c090cd4575a7fb47b0a3ee248e", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/997776298f4eb2c090cd4575a7fb47b0a3ee248e", "committedDate": "2020-09-14T16:29:19Z", "message": "Add javadoc notes to encourage using the lower-overhead attribute options."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjEzNTMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-488213530", "createdAt": "2020-09-14T23:04:04Z", "commit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzQwNDEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-488340413", "createdAt": "2020-09-15T05:43:05Z", "commit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTk2MTgw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-488596180", "createdAt": "2020-09-15T11:43:45Z", "commit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0Mzo0NlrOHR9xlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0Mzo0NlrOHR9xlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5OTk1Nw==", "bodyText": "Use https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n          \n          \n            \n                return Objects.equals(getKey(), that.getKey());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488599957", "createdAt": "2020-09-15T11:43:46Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTk3MDE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-488597014", "createdAt": "2020-09-15T11:44:55Z", "commit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0NDo1NVrOHR90NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0NDo1NVrOHR90NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMDYyOQ==", "bodyText": "Why no null check here? Use Objects.compare?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#discussion_r488600629", "createdAt": "2020-09-15T11:44:55Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.common;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@SuppressWarnings(\"rawtypes\")\n+@AutoValue\n+abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n+\n+  static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n+    return new AutoValue_AttributeKeyImpl<>(key, type);\n+  }\n+\n+  //////////////////////////////////\n+  // IMPORTANT: the equals/hashcode/compareTo *only* include the key, and not the type,\n+  // so that de-duping of attributes is based on the key, and not also based on the type.\n+  //////////////////////////////////\n+\n+  @Override\n+  public final boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof AttributeKeyImpl)) {\n+      return false;\n+    }\n+\n+    AttributeKeyImpl<?> that = (AttributeKeyImpl<?>) o;\n+\n+    return getKey() != null ? getKey().equals(that.getKey()) : that.getKey() == null;\n+  }\n+\n+  @Override\n+  public final int hashCode() {\n+    return getKey() != null ? getKey().hashCode() : 0;\n+  }\n+\n+  @Override\n+  public int compareTo(AttributeKey o) {\n+    return getKey().compareTo(o.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7d1e8224736d262d7f150ea117c62b206376e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53d396e86a3af14713e9ecfb05426c6696b71d7e", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/53d396e86a3af14713e9ecfb05426c6696b71d7e", "committedDate": "2020-09-17T15:00:56Z", "message": "Add a generic type for the key on the ImmutableKeyValuePairs.\nThis necessitated changing the `get` to `getValue` to avoid clashing with the java.util.Map interface.\nAlso introduced convenience sub-interfaces for consuming labels and attributes, so consumers don't have to worry about the types if they don't want to."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03db6d1f81c986dd7f63db5fc5a37cdce641e862", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/03db6d1f81c986dd7f63db5fc5a37cdce641e862", "committedDate": "2020-09-17T15:00:56Z", "message": "Make AttributesMap not extend map, and restore the get method name for Attributes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6ba9662b6ffdb327a1e1f1b333b7971008e33a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ef6ba9662b6ffdb327a1e1f1b333b7971008e33a", "committedDate": "2020-09-17T15:00:56Z", "message": "key class and implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72fdb05cbb14104b6b8c2ad0d0836a0573f0ab9", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e72fdb05cbb14104b6b8c2ad0d0836a0573f0ab9", "committedDate": "2020-09-17T15:00:56Z", "message": "key class and implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b6a07235eab40e9f15de3427277974e00865491", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2b6a07235eab40e9f15de3427277974e00865491", "committedDate": "2020-09-17T15:00:57Z", "message": "The code compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5723812a2cd63cedc85551a4d20578f8fd9e16f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5723812a2cd63cedc85551a4d20578f8fd9e16f", "committedDate": "2020-09-17T15:00:57Z", "message": "little tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230de0af164dce5e10f16f3aaed3f67a6c17329a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/230de0af164dce5e10f16f3aaed3f67a6c17329a", "committedDate": "2020-09-17T15:00:57Z", "message": "some cleanup, tests are passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1154447a8e96f94dfa40b07243b0c6575318f1", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc1154447a8e96f94dfa40b07243b0c6575318f1", "committedDate": "2020-09-17T15:00:58Z", "message": "remove AttributeValue and clean up misc. references to it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c89f1378693435cc8576a1ff668871e4a209bd", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/01c89f1378693435cc8576a1ff668871e4a209bd", "committedDate": "2020-09-17T15:00:58Z", "message": "clean up some unused bits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7dbe164cd0eb6e0b711d0a95f5bed752adb2ea7", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a7dbe164cd0eb6e0b711d0a95f5bed752adb2ea7", "committedDate": "2020-09-17T15:00:58Z", "message": "add a TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e22bf092621bcacc4fac65006bada9e86185ff", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55e22bf092621bcacc4fac65006bada9e86185ff", "committedDate": "2020-09-17T15:00:58Z", "message": "a bit of cleanup; fix a todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "269e259e7b913a54408206624e8ec9ed55b7ae4d", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/269e259e7b913a54408206624e8ec9ed55b7ae4d", "committedDate": "2020-09-17T15:00:59Z", "message": "update for changes from the main branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1155c27505571494b01b5d3ec92c31b846f6c46c", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1155c27505571494b01b5d3ec92c31b846f6c46c", "committedDate": "2020-09-17T15:00:59Z", "message": "Change method to get the underlying key.\nMove the key creators to a AttributesKeys class.\nHide the implementation classes and replace with interface use."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ab103d1b4ef4d5e5ad9ac595a73ca68eccb2bb", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e1ab103d1b4ef4d5e5ad9ac595a73ca68eccb2bb", "committedDate": "2020-09-17T15:00:59Z", "message": "use autovalue for the key implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac0ae57ee960f47bda26029339db0e49acd1516", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cac0ae57ee960f47bda26029339db0e49acd1516", "committedDate": "2020-09-17T15:00:59Z", "message": "fix javadoc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98eb2a08678c667b5465bf01ae57b4d803996a4", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d98eb2a08678c667b5465bf01ae57b4d803996a4", "committedDate": "2020-09-17T15:00:59Z", "message": "update benchmark keys, and a few tweaks from PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f0fb5698d16d1f0e05f0fba0261b45e423b51e", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77f0fb5698d16d1f0e05f0fba0261b45e423b51e", "committedDate": "2020-09-17T15:01:00Z", "message": "Add javadoc notes to encourage using the lower-overhead attribute options."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1f871588e911f7d2bae7de0594c2d162b6d4e9", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8f1f871588e911f7d2bae7de0594c2d162b6d4e9", "committedDate": "2020-09-17T15:01:00Z", "message": "Add javadoc clarifying subclass responsibilities around empty keys."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc86d829b11e2441d6d2668e004b1588edca8949", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dc86d829b11e2441d6d2668e004b1588edca8949", "committedDate": "2020-09-17T15:01:00Z", "message": "make the compareTo on AttributeKeyImpl null-safe, for extra safety"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9aceb853a2320928f463a357b08f7801cad28ad2", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9aceb853a2320928f463a357b08f7801cad28ad2", "committedDate": "2020-09-15T15:09:02Z", "message": "make the compareTo on AttributeKeyImpl null-safe, for extra safety"}, "afterCommit": {"oid": "dc86d829b11e2441d6d2668e004b1588edca8949", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dc86d829b11e2441d6d2668e004b1588edca8949", "committedDate": "2020-09-17T15:01:00Z", "message": "make the compareTo on AttributeKeyImpl null-safe, for extra safety"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTYzMTk4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1631#pullrequestreview-491563198", "createdAt": "2020-09-18T15:21:10Z", "commit": {"oid": "dc86d829b11e2441d6d2668e004b1588edca8949"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529c15f0b84b38ac9ab318b424495944e633ad16", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/529c15f0b84b38ac9ab318b424495944e633ad16", "committedDate": "2020-09-21T14:48:05Z", "message": "Merge branch 'master' into keyed_attribute_step_2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f54ae9431320a61fa256b1fbf6cbf4b5073d1a", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/40f54ae9431320a61fa256b1fbf6cbf4b5073d1a", "committedDate": "2020-09-21T15:32:14Z", "message": "fix formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}