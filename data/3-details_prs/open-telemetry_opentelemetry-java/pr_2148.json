{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDYzNTg1", "number": 2148, "title": "Remove Guava dependencies from SDK", "bodyText": "For #1944\nRemaining are gRPC-based artifacts (always use guava), opencensus shim (it's going away in new implementation type), and jfr (will probably use weak-lock-free for it after raphw/weak-lock-free#12)", "createdAt": "2020-11-27T08:18:28Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148", "merged": true, "mergeCommit": {"oid": "18355e9683e6ed70dcb56a5fa27838a8c889685f"}, "closed": true, "closedAt": "2020-12-01T19:10:39Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgj5OwAFqTUzOTc5NTYxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh-2mIgFqTU0MjIxMzMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Nzk1NjE1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#pullrequestreview-539795615", "createdAt": "2020-11-27T08:43:56Z", "commit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Mzo1NlrOH61fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTowOTozOFrOH62UHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyMg==", "bodyText": "I think we should add such an annotation to the API package or some util package. It is useful documentation and a bit nicer than a comment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531455922", "createdAt": "2020-11-27T08:43:56Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java", "diffHunk": "@@ -25,7 +24,7 @@\n     this(DEFAULT_CGROUP_PATH);\n   }\n \n-  @VisibleForTesting\n+  // Visible for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcyMQ==", "bodyText": "Byte-wise reading looks quite inefficient.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531456721", "createdAt": "2020-11-27T08:45:27Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java", "diffHunk": "@@ -206,4 +206,15 @@ private String fetchIdentity(String token) {\n   private String fetchHostname(String token) {\n     return fetchString(\"GET\", hostnameUrl, token, /* includeTtl= */ false);\n   }\n+\n+  private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n+      throws IOException {\n+    if (is == null) {\n+      return;\n+    }\n+    int b;\n+    while ((b = is.read()) != -1) {\n+      os.write(b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzMyOQ==", "bodyText": "With the getOrDefault, can't you keep it as a single expression? Also, I think we have some isNullOrEmpty helper already in the propagator-utils.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531457329", "createdAt": "2020-11-27T08:46:39Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java", "diffHunk": "@@ -61,15 +59,22 @@ public Attributes getAttributes() {\n     }\n \n     String containerId = dockerHelper.getContainerId();\n-    if (!Strings.isNullOrEmpty(containerId)) {\n+    if (containerId != null && !containerId.isEmpty()) {\n       attrBuilders.put(ResourceAttributes.CONTAINER_ID, containerId);\n     }\n \n     return attrBuilders.build();\n   }\n \n   private boolean isOnEcs() {\n-    return (!Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V3))\n-        || !Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V4)));\n+    String metadata = sysEnv.getOrDefault(ECS_METADATA_KEY_V3, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1Nzk0NQ==", "bodyText": "Shouldn't one abort also if read == 0? AFAIK this is documented to only happen at EOF.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531457945", "createdAt": "2020-11-27T08:47:49Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {\n+    File file = new File(path);\n+    int size = (int) file.length();\n+    byte[] result = new byte[size];\n+    int bytesRead = 0;\n+    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {\n+      while (true) {\n+        int read = is.read(result);\n+        if (read < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1OTUyMg==", "bodyText": "Even in Java 7, there is a stdlib API that does that: https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllBytes(java.nio.file.Path)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531459522", "createdAt": "2020-11-27T08:50:45Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MDEzNw==", "bodyText": "Shouldn't we shortcut and return empty here if size == 0? Or if we want to support files that report their size wrongly, we would need a different approach from the pre-allocated array.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531460137", "createdAt": "2020-11-27T08:51:55Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EksResource.java", "diffHunk": "@@ -115,12 +114,31 @@ private String getClusterName() {\n \n   private static String getK8sCredHeader() {\n     try {\n-      File file = new File(K8S_TOKEN_PATH);\n-      String content = Files.asCharSource(file, Charsets.UTF_8).read();\n+      String content = new String(readAllBytes(K8S_TOKEN_PATH), StandardCharsets.UTF_8);\n       return \"Bearer \" + content;\n     } catch (IOException e) {\n       logger.log(Level.WARNING, \"Unable to load K8s client token.\", e);\n     }\n     return \"\";\n   }\n+\n+  private static byte[] readAllBytes(String path) throws IOException {\n+    File file = new File(path);\n+    int size = (int) file.length();\n+    byte[] result = new byte[size];\n+    int bytesRead = 0;\n+    try (BufferedInputStream is = new BufferedInputStream(new FileInputStream(file))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MTA4OA==", "bodyText": "Since zPages are an optional, experimental extension which you probably wouldn't use if resources are tight, I wouldn't mind keeping the Guava dependency for it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531461088", "createdAt": "2020-11-27T08:53:53Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java", "diffHunk": "@@ -540,41 +546,55 @@ private static String latencyBoundaryToString(LatencyBoundary latencyBoundary) {\n     throw new IllegalArgumentException(\"No value string available for: \" + latencyBoundary);\n   }\n \n-  private static ImmutableMap<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n+  private static Map<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n     Map<LatencyBoundary, String> latencyBoundaryMap = new HashMap<>();\n     for (LatencyBoundary latencyBoundary : LatencyBoundary.values()) {\n       latencyBoundaryMap.put(latencyBoundary, latencyBoundaryToString(latencyBoundary));\n     }\n-    return ImmutableMap.copyOf(latencyBoundaryMap);\n+    return latencyBoundaryMap;\n   }\n \n-  private static final class EventComparator implements Comparator<Event>, Serializable {\n-    private static final long serialVersionUID = 0;\n-\n-    @Override\n-    public int compare(Event e1, Event e2) {\n-      return Long.compare(e1.getEpochNanos(), e2.getEpochNanos());\n+  private static String escapeHtml(String html) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg==", "bodyText": "Are you sure trimming is OK here? In an URL we shouldn't have any spaces encoded as such anyway.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531462242", "createdAt": "2020-11-27T08:55:50Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2Mjg1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              Arrays.stream(param.split(\"=\"))\n          \n          \n            \n                              Arrays.stream(param.split(\"=\", 2))", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531462851", "createdAt": "2020-11-27T08:56:59Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MzIyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  .filter(s -> !s.isEmpty())\n          \n          \n            \n                                  .map(String::trim)\n          \n      \n    \n    \n  \n\nShould not be needed. Also spaces may be relevant here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531463225", "createdAt": "2020-11-27T08:57:41Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))\n+                      .filter(s -> !s.isEmpty())\n+                      .map(String::trim)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MzUxNQ==", "bodyText": "Also, you trim again below, so this is definitely redundant.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531463515", "createdAt": "2020-11-27T08:58:17Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NzQzMw==", "bodyText": "Why only decode selectively here? Shouldn't all keys and values be decoded?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531467433", "createdAt": "2020-11-27T09:06:03Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))\n+                      .filter(s -> !s.isEmpty())\n+                      .map(String::trim)\n+                      .collect(Collectors.toList());\n+              if (keyValuePair.size() > 1) {\n+                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+                  try {\n+                    queryMap.put(\n+                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA==", "bodyText": "I think a normal foreach loop would be more readable.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531468108", "createdAt": "2020-11-27T09:07:13Z", "author": {"login": "Oberon00"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -65,7 +63,9 @@ protected abstract T fromConfigMap(\n \n   /** Sets the configuration values from the given {@link Properties} object. */\n   public T readProperties(Properties properties) {\n-    return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n+    Map<String, String> map = new HashMap<>(properties.size());\n+    properties.forEach((key, value) -> map.put((String) key, (String) value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTA2MA==", "bodyText": "I think you might need to swap the order of trim/isEmpty to match Guava. AFAIK omitEmptyStrings only sets a boolean. But I may be wrong here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531469060", "createdAt": "2020-11-27T09:09:06Z", "author": {"login": "Oberon00"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -103,8 +105,11 @@ protected Builder fromConfigMap(\n       String stringValue = getStringProperty(OTEL_JAVA_DISABLED_RESOURCES_PROVIDERS, configMap);\n       if (stringValue != null) {\n         this.setDisabledResourceProviders(\n-            ImmutableSet.copyOf(\n-                Splitter.on(',').omitEmptyStrings().trimResults().split(stringValue)));\n+            Collections.unmodifiableSet(\n+                Arrays.stream(stringValue.split(\",\"))\n+                    .filter(s -> !s.isEmpty())\n+                    .map(String::trim)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MQ==", "bodyText": "Didn't we have some Utils.checkArgument function?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531469341", "createdAt": "2020-11-27T09:09:38Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -352,16 +350,26 @@ public Builder setTraceIdRatioBased(double samplerRatio) {\n      */\n     public TraceConfig build() {\n       TraceConfig traceConfig = autoBuild();\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributes() > 0, \"maxNumberOfAttributes\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfEvents() > 0, \"maxNumberOfEvents\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfLinks() > 0, \"maxNumberOfLinks\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerEvent() > 0, \"maxNumberOfAttributesPerEvent\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerLink() > 0, \"maxNumberOfAttributesPerLink\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxLengthOfAttributeValues() >= -1, \"maxLengthOfAttributeValues\");\n+      if (traceConfig.getMaxNumberOfAttributes() <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODQxMzkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#pullrequestreview-539841391", "createdAt": "2020-11-27T09:49:43Z", "commit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0OTo0M1rOH63riA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMDozM1rOH64EVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MTcyMA==", "bodyText": "The annotation has been around for a looong time and I've never seen any tooling use it. Is it much better than a comment? Then we wouldn't need to maintain the annotation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531491720", "createdAt": "2020-11-27T09:49:43Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/DockerHelper.java", "diffHunk": "@@ -25,7 +24,7 @@\n     this(DEFAULT_CGROUP_PATH);\n   }\n \n-  @VisibleForTesting\n+  // Visible for testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyMg=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MjY0Mw==", "bodyText": "Yeah don't think we can use propagator classes here. We could move it to API to the internal package, but so far we don't leak internal classes across artifacts in this repo. I think it's ok though so if others thing so too I could do that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531492643", "createdAt": "2020-11-27T09:51:16Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/EcsResource.java", "diffHunk": "@@ -61,15 +59,22 @@ public Attributes getAttributes() {\n     }\n \n     String containerId = dockerHelper.getContainerId();\n-    if (!Strings.isNullOrEmpty(containerId)) {\n+    if (containerId != null && !containerId.isEmpty()) {\n       attrBuilders.put(ResourceAttributes.CONTAINER_ID, containerId);\n     }\n \n     return attrBuilders.build();\n   }\n \n   private boolean isOnEcs() {\n-    return (!Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V3))\n-        || !Strings.isNullOrEmpty(sysEnv.get(ECS_METADATA_KEY_V4)));\n+    String metadata = sysEnv.getOrDefault(ECS_METADATA_KEY_V3, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzMyOQ=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MzYxMw==", "bodyText": "Oops for some reason thought this was in-memory", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531493613", "createdAt": "2020-11-27T09:53:01Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java", "diffHunk": "@@ -206,4 +206,15 @@ private String fetchIdentity(String token) {\n   private String fetchHostname(String token) {\n     return fetchString(\"GET\", hostnameUrl, token, /* includeTtl= */ false);\n   }\n+\n+  private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n+      throws IOException {\n+    if (is == null) {\n+      return;\n+    }\n+    int b;\n+    while ((b = is.read()) != -1) {\n+      os.write(b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcyMQ=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjMxMg==", "bodyText": "Hmm - not sure just reproing the current code for now", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531496312", "createdAt": "2020-11-27T09:57:35Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjI0Mg=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NjY0MA==", "bodyText": "Think I agree - would probably fix that separately from guava refactoring.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531496640", "createdAt": "2020-11-27T09:58:09Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -42,24 +37,36 @@\n    * @param queryString the query string for buiding the query map.\n    * @return the query map built based on the query string.\n    */\n-  @VisibleForTesting\n-  static ImmutableMap<String, String> parseQueryString(String queryString)\n-      throws UnsupportedEncodingException {\n+  // Visible for testing\n+  static Map<String, String> parseQueryString(String queryString) {\n     if (queryString == null) {\n-      return ImmutableMap.of();\n+      return Collections.emptyMap();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryString)) {\n-      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n-      if (keyValuePair.size() > 1) {\n-        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n-          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n-        } else {\n-          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n-        }\n-      }\n-    }\n-    return ImmutableMap.copyOf(queryMap);\n+    Arrays.stream(queryString.split(\"&\"))\n+        .filter(s -> !s.isEmpty())\n+        .map(String::trim)\n+        .forEach(\n+            param -> {\n+              List<String> keyValuePair =\n+                  Arrays.stream(param.split(\"=\"))\n+                      .filter(s -> !s.isEmpty())\n+                      .map(String::trim)\n+                      .collect(Collectors.toList());\n+              if (keyValuePair.size() > 1) {\n+                if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+                  try {\n+                    queryMap.put(\n+                        keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NzQzMw=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzAxMQ==", "bodyText": "Hmm - I've always appreciated Java 8's Map.forEach since Entry can be a bit gross :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531497011", "createdAt": "2020-11-27T09:58:48Z", "author": {"login": "anuraaga"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -65,7 +63,9 @@ protected abstract T fromConfigMap(\n \n   /** Sets the configuration values from the given {@link Properties} object. */\n   public T readProperties(Properties properties) {\n-    return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n+    Map<String, String> map = new HashMap<>(properties.size());\n+    properties.forEach((key, value) -> map.put((String) key, (String) value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NzQ0OA==", "bodyText": "Yeah we have it in API - if we're ok with cross-referencing from other artifacts (guess it's ok) I'll use it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531497448", "createdAt": "2020-11-27T09:59:32Z", "author": {"login": "anuraaga"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -352,16 +350,26 @@ public Builder setTraceIdRatioBased(double samplerRatio) {\n      */\n     public TraceConfig build() {\n       TraceConfig traceConfig = autoBuild();\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributes() > 0, \"maxNumberOfAttributes\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfEvents() > 0, \"maxNumberOfEvents\");\n-      Preconditions.checkArgument(traceConfig.getMaxNumberOfLinks() > 0, \"maxNumberOfLinks\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerEvent() > 0, \"maxNumberOfAttributesPerEvent\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxNumberOfAttributesPerLink() > 0, \"maxNumberOfAttributesPerLink\");\n-      Preconditions.checkArgument(\n-          traceConfig.getMaxLengthOfAttributeValues() >= -1, \"maxLengthOfAttributeValues\");\n+      if (traceConfig.getMaxNumberOfAttributes() <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTM0MQ=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5ODA2OA==", "bodyText": "Yeah this is the one line that gets most benefit from Guava. I'm mixed, 2MB dependency just for this function, mostly :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531498068", "createdAt": "2020-11-27T10:00:33Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/zpages/src/main/java/io/opentelemetry/sdk/extension/zpages/TracezZPageHandler.java", "diffHunk": "@@ -540,41 +546,55 @@ private static String latencyBoundaryToString(LatencyBoundary latencyBoundary) {\n     throw new IllegalArgumentException(\"No value string available for: \" + latencyBoundary);\n   }\n \n-  private static ImmutableMap<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n+  private static Map<LatencyBoundary, String> buildLatencyBoundaryStringMap() {\n     Map<LatencyBoundary, String> latencyBoundaryMap = new HashMap<>();\n     for (LatencyBoundary latencyBoundary : LatencyBoundary.values()) {\n       latencyBoundaryMap.put(latencyBoundary, latencyBoundaryToString(latencyBoundary));\n     }\n-    return ImmutableMap.copyOf(latencyBoundaryMap);\n+    return latencyBoundaryMap;\n   }\n \n-  private static final class EventComparator implements Comparator<Event>, Serializable {\n-    private static final long serialVersionUID = 0;\n-\n-    @Override\n-    public int compare(Event e1, Event e2) {\n-      return Long.compare(e1.getEpochNanos(), e2.getEpochNanos());\n+  private static String escapeHtml(String html) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MTA4OA=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODQ5ODMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#pullrequestreview-539849832", "createdAt": "2020-11-27T10:01:15Z", "commit": {"oid": "2106b5613386d8f431db80e628479fc8b5e2cfe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMToxNVrOH64F2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDowMToxNVrOH64F2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5ODQ1Nw==", "bodyText": "You can't write the full buffer here. You need to check how many bytes you actually read into the buffer, which may be less.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531498457", "createdAt": "2020-11-27T10:01:15Z", "author": {"login": "Oberon00"}, "path": "sdk-extensions/aws/src/main/java/io/opentelemetry/sdk/extension/aws/resource/Ec2Resource.java", "diffHunk": "@@ -212,9 +212,9 @@ private static void readTo(@Nullable InputStream is, ByteArrayOutputStream os)\n     if (is == null) {\n       return;\n     }\n-    int b;\n-    while ((b = is.read()) != -1) {\n-      os.write(b);\n+    byte[] buf = new byte[8192];\n+    while (is.read(buf) != -1) {\n+      os.write(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2106b5613386d8f431db80e628479fc8b5e2cfe7"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "committedDate": "2020-11-27T10:02:40Z", "message": "Remove Guava from SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2106b5613386d8f431db80e628479fc8b5e2cfe7", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2106b5613386d8f431db80e628479fc8b5e2cfe7", "committedDate": "2020-11-27T09:59:54Z", "message": "Cleanups"}, "afterCommit": {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d962c1ce898c0370b8d23e9f4f332e7fcaa2e979", "committedDate": "2020-11-27T10:02:40Z", "message": "Remove Guava from SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODYxMzYx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#pullrequestreview-539861361", "createdAt": "2020-11-27T10:17:04Z", "commit": {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxNzowNFrOH64oFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyMDowMlrOH64uUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNzIyMg==", "bodyText": "Add a comment?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531507222", "createdAt": "2020-11-27T10:17:04Z", "author": {"login": "Oberon00"}, "path": "sdk/all/src/main/java/io/opentelemetry/sdk/OpenTelemetrySdk.java", "diffHunk": "@@ -253,7 +252,6 @@ private MeterProvider buildMeterProvider() {\n    * @see Obfuscated\n    */\n   @ThreadSafe\n-  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d962c1ce898c0370b8d23e9f4f332e7fcaa2e979"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwODgxOQ==", "bodyText": "Alternatively, how about some casting? https://stackoverflow.com/a/17209434/2128694\nMap<String, String> map = (Map<String, String>)(Map)properties;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#discussion_r531508819", "createdAt": "2020-11-27T10:20:02Z", "author": {"login": "Oberon00"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -65,7 +63,9 @@ protected abstract T fromConfigMap(\n \n   /** Sets the configuration values from the given {@link Properties} object. */\n   public T readProperties(Properties properties) {\n-    return fromConfigMap(Maps.fromProperties(properties), NamingConvention.DOT);\n+    Map<String, String> map = new HashMap<>(properties.size());\n+    properties.forEach((key, value) -> map.put((String) key, (String) value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODEwOA=="}, "originalCommit": {"oid": "19ca917a1dfdce4f6e62429747841314130ba401"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8476a2c751661bbd9899c9c8863fbc8bb088457", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d8476a2c751661bbd9899c9c8863fbc8bb088457", "committedDate": "2020-11-28T05:39:44Z", "message": "Clean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjEzMzI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2148#pullrequestreview-542213326", "createdAt": "2020-12-01T19:10:29Z", "commit": {"oid": "d8476a2c751661bbd9899c9c8863fbc8bb088457"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3802, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}