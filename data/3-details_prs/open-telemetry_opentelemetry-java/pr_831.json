{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjA1MDky", "number": 831, "title": "Add AllLabels Batcher and install default Barcher for Counters", "bodyText": "", "createdAt": "2020-02-07T02:32:18Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831", "merged": true, "mergeCommit": {"oid": "9aa6d1ebb1a4b59a41324de7e6d6fa5d5e6537ac"}, "closed": true, "closedAt": "2020-02-20T00:23:42Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB8uspgFqTM1NTAwOTM0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF_GPEABqjMwNTM4MDIxMzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDA5MzQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355009346", "createdAt": "2020-02-07T08:57:33Z", "commit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1Nzo1MVrOFm2Meg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDoyNDowN1rOFm4nDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3ODEzOA==", "bodyText": "Nit: 2020", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376278138", "createdAt": "2020-02-07T08:57:51Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwOTc5Mg==", "bodyText": "From your other PR #833, methods recordLong(long) and recordDouble(double) are introduced with the same Javadoc. Correct me if I am wrong: these two methods are for \"Measures\" metrics while the methods in the other PR are for \"Counters\". If so, I would update the doc to make this explicit", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376309792", "createdAt": "2020-02-07T10:06:50Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -30,31 +30,22 @@\n   void merge(T aggregator);\n \n   /**\n-   * LongAggregator represents the base class for all the available aggregations that work with long\n-   * values.\n+   * Checkpoints this aggregator by saving the previous value and resetting it. The old value is\n+   * available to \"merge\".\n    */\n-  @ThreadSafe\n-  interface LongAggregator<T extends LongAggregator<?>> extends Aggregator<T> {\n+  void checkpoint();\n \n-    /**\n-     * Updates the current aggregator with a newly recorded value.\n-     *\n-     * @param value the new {@code long} value to be added.\n-     */\n-    void update(long value);\n-  }\n+  /**\n+   * Updates the current aggregator with a newly recorded long value.\n+   *\n+   * @param value the new {@code long} value to be added.\n+   */\n+  void updateLong(long value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxNzcwOQ==", "bodyText": "I am not a huge fan of while(true) loops. I would use a defensive programming design, capping the max exec time of the while. Something like:\ndo {\n...\n} while(timer > 0)\nI am not sold on this, though. What is your opinion?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376317709", "createdAt": "2020-02-07T10:24:07Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        bounds.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM2ODkw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355236890", "createdAt": "2020-02-07T15:30:20Z", "commit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDoyMFrOFnA1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDoyMFrOFnA1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjQ5OQ==", "bodyText": "2?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376452499", "createdAt": "2020-02-07T15:30:20Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+abstract class AbstractBoundInstrument {\n+  private final LabelSet labels;\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;\n+  private final Aggregator<?> aggregator;\n+\n+  AbstractBoundInstrument(LabelSet labels, Aggregator<?> aggregator) {\n+    this.labels = labels;\n+    this.aggregator = aggregator;\n+    refCountMapped = new AtomicLong(0);\n+  }\n+\n+  /**\n+   * Returns {@code true} if the entry is still mapped and increases the reference usages, if\n+   * unmapped returns {@code false}.\n+   *\n+   * @return {@code true} if successful.\n+   */\n+  boolean ref() {\n+    return (refCountMapped.addAndGet(2L) & 1L) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM3MTY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355237165", "createdAt": "2020-02-07T15:30:42Z", "commit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDo0MlrOFnA2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDo0MlrOFnA2aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjcxMw==", "bodyText": "I would guess that an AtomicInteger would be plenty for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376452713", "createdAt": "2020-02-07T15:30:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+abstract class AbstractBoundInstrument {\n+  private final LabelSet labels;\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM4OTMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355238930", "createdAt": "2020-02-07T15:33:07Z", "commit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMzowN1rOFnA7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMzowN1rOFnA7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDA5NA==", "bodyText": "rather than using ref counting, can we instead use a map with weak references for values? This ref counting seems like an overly baroque way to deal with this issue, and adds a significant amount of complexity to this code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376454094", "createdAt": "2020-02-07T15:33:07Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM5ODU5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355239859", "createdAt": "2020-02-07T15:34:18Z", "commit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozNDoxOFrOFnA-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozNDoxOFrOFnA-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NDgzNA==", "bodyText": "I really think we need to find a lockless way of handling this, as this will be a major source of contention in high-throughput situations.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376454834", "createdAt": "2020-02-07T15:34:18Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;\n+  private final ReentrantLock collectLock;\n+\n+  BoundRegistry() {\n+    bounds = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  B acquire(LabelSet labelSet) {\n+    B bound = bounds.get(labelSet);\n+    if (bound != null && bound.ref()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound(labelSet);\n+    while (true) {\n+      B oldBound = bounds.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.ref()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        bounds.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;\n+    }\n+  }\n+\n+  void release(B bound) {\n+    bound.unref();\n+  }\n+\n+  /**\n+   * Collects records from all the entries (labelSet, Bound) that changed since the last collect()\n+   * call.\n+   *\n+   * <p>It is possible that some entries\n+   */\n+  void collect(RecordProcessor recordProcessor) {\n+    collectLock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac039e05188056919bcd5de466d6159c3f9253ba", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ac039e05188056919bcd5de466d6159c3f9253ba", "committedDate": "2020-02-07T02:30:19Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "f912b335031bf2eb4e767a5f49f3d29601175664", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f912b335031bf2eb4e767a5f49f3d29601175664", "committedDate": "2020-02-07T18:14:02Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f912b335031bf2eb4e767a5f49f3d29601175664", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f912b335031bf2eb4e767a5f49f3d29601175664", "committedDate": "2020-02-07T18:14:02Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68c76f6dcb0e314064f86f7f31be308495e72b50", "committedDate": "2020-02-07T18:32:46Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzU3NTMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355357532", "createdAt": "2020-02-07T18:41:23Z", "commit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0MToyM1rOFnGgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0MToyM1rOFnGgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NTM1NA==", "bodyText": "Call this \"boundLabels\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376545354", "createdAt": "2020-02-07T18:41:23Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BoundRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class BoundRegistry<B extends AbstractBoundInstrument> {\n+  private final ConcurrentHashMap<LabelSet, B> bounds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzU4OTQy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-355358942", "createdAt": "2020-02-07T18:43:48Z", "commit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0Mzo0OFrOFnGkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0Mzo0OFrOFnGkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0NjQ1Ng==", "bodyText": "how about \"bind\" and \"release\" as names, rather than ref/unref? Cryptically short method names make me sad.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r376546456", "createdAt": "2020-02-07T18:43:48Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -16,32 +16,57 @@\n \n package io.opentelemetry.sdk.metrics;\n \n-import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n-class AbstractBoundInstrument {\n-  private final LabelSet labels;\n+abstract class AbstractBoundInstrument {\n+  // Atomically counts the number of references (usages) while also keeping a state of\n+  // mapped/unmapped into a registry map.\n+  private final AtomicLong refCountMapped;\n+  private final Aggregator<?> aggregator;\n \n-  AbstractBoundInstrument(LabelSet labels) {\n-    this.labels = labels;\n-    // todo: associate with an aggregator/accumulator\n+  AbstractBoundInstrument(Aggregator<?> aggregator) {\n+    this.aggregator = aggregator;\n+    this.refCountMapped = new AtomicLong(0);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) {\n-      return true;\n-    }\n-    if (!(o instanceof AbstractBoundInstrument)) {\n+  /**\n+   * Returns {@code true} if the entry is still mapped and increases the reference usages, if\n+   * unmapped returns {@code false}.\n+   *\n+   * @return {@code true} if successful.\n+   */\n+  boolean ref() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68c76f6dcb0e314064f86f7f31be308495e72b50", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68c76f6dcb0e314064f86f7f31be308495e72b50", "committedDate": "2020-02-07T18:32:46Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "a11d3707bc571c4917765bc7aabf983cee062e9a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a11d3707bc571c4917765bc7aabf983cee062e9a", "committedDate": "2020-02-07T22:10:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a11d3707bc571c4917765bc7aabf983cee062e9a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a11d3707bc571c4917765bc7aabf983cee062e9a", "committedDate": "2020-02-07T22:10:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "committedDate": "2020-02-07T22:15:00Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc4fcf1c8d904ff25c12fd96c2283b026b390f7c", "committedDate": "2020-02-07T22:15:00Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "committedDate": "2020-02-07T23:24:01Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c54f8012b7b5f0d2d7f4d0cba1e84d44f75a30f4", "committedDate": "2020-02-07T23:24:01Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "8728040bacad30fd0e6392f573bb157eddb42129", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8728040bacad30fd0e6392f573bb157eddb42129", "committedDate": "2020-02-07T23:34:45Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8728040bacad30fd0e6392f573bb157eddb42129", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8728040bacad30fd0e6392f573bb157eddb42129", "committedDate": "2020-02-07T23:34:45Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "committedDate": "2020-02-10T17:14:51Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a756728f9a467f8ba88ac8ead26ae62e31f2d1a6", "committedDate": "2020-02-10T17:14:51Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "15984ec87589de3aff93d22186c33cbfd4a0adb4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15984ec87589de3aff93d22186c33cbfd4a0adb4", "committedDate": "2020-02-10T17:59:35Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15984ec87589de3aff93d22186c33cbfd4a0adb4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15984ec87589de3aff93d22186c33cbfd4a0adb4", "committedDate": "2020-02-10T17:59:35Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/da8de26bcee520ea080acbf9ba53b55c28ed979a", "committedDate": "2020-02-10T18:10:16Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjMyNzE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-356232719", "createdAt": "2020-02-10T20:17:00Z", "commit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoxNzowMFrOFn0IhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoxNzowMFrOFn0IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MjkzMw==", "bodyText": "rename variable to binding", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377292933", "createdAt": "2020-02-10T20:17:00Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class AbstractInstrumentWithBinding<B extends AbstractBoundInstrument>\n+    extends AbstractInstrument {\n+  private final ConcurrentHashMap<LabelSet, B> boundLabels;\n+  private final ReentrantLock collectLock;\n+\n+  AbstractInstrumentWithBinding(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    boundLabels = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  // Cannot make this \"bind\" because of a Java problem if we make this class also implement the\n+  // InstrumentWithBinding then the subclass will fail to compile because of different \"bind\"\n+  // signature. This is a good trade-off.\n+  final B bindInternal(LabelSet labelSet) {\n+    B bound = boundLabels.get(labelSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjMyOTY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-356232965", "createdAt": "2020-02-10T20:17:25Z", "commit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoxNzoyNVrOFn0JTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoxNzoyNVrOFn0JTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5MzEzNA==", "bodyText": "rename to newBinding()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r377293134", "createdAt": "2020-02-10T20:17:25Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrumentWithBinding.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+abstract class AbstractInstrumentWithBinding<B extends AbstractBoundInstrument>\n+    extends AbstractInstrument {\n+  private final ConcurrentHashMap<LabelSet, B> boundLabels;\n+  private final ReentrantLock collectLock;\n+\n+  AbstractInstrumentWithBinding(\n+      String name,\n+      String description,\n+      String unit,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys) {\n+    super(name, description, unit, constantLabels, labelKeys);\n+    boundLabels = new ConcurrentHashMap<>();\n+    collectLock = new ReentrantLock();\n+  }\n+\n+  // Cannot make this \"bind\" because of a Java problem if we make this class also implement the\n+  // InstrumentWithBinding then the subclass will fail to compile because of different \"bind\"\n+  // signature. This is a good trade-off.\n+  final B bindInternal(LabelSet labelSet) {\n+    B bound = boundLabels.get(labelSet);\n+    if (bound != null && bound.bind()) {\n+      // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+      return bound;\n+    }\n+\n+    // Missing entry or no longer mapped, try to add a new entry.\n+    bound = newBound();\n+    while (true) {\n+      B oldBound = boundLabels.putIfAbsent(labelSet, bound);\n+      if (oldBound != null) {\n+        if (oldBound.bind()) {\n+          // At this moment it is guaranteed that the Bound is in the map and will not be removed.\n+          return oldBound;\n+        }\n+        // Try to remove the oldBound. This will race with the collect method, but only one will\n+        // succeed.\n+        boundLabels.remove(labelSet, oldBound);\n+        continue;\n+      }\n+      return bound;\n+    }\n+  }\n+\n+  /**\n+   * Collects records from all the entries (labelSet, Bound) that changed since the last collect()\n+   * call.\n+   */\n+  @Override\n+  final void collect(RecordProcessor recordProcessor) {\n+    collectLock.lock();\n+    try {\n+      for (Map.Entry<LabelSet, B> entry : boundLabels.entrySet()) {\n+        if (entry.getValue().tryUnmap()) {\n+          // If able to unmap then remove the record from the current Map. This can race with the\n+          // acquire but because we requested a specific value only one will succeed.\n+          boundLabels.remove(entry.getKey(), entry.getValue());\n+        }\n+\n+        entry.getValue().checkpoint();\n+      }\n+    } finally {\n+      collectLock.unlock();\n+    }\n+  }\n+\n+  abstract B newBound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da8de26bcee520ea080acbf9ba53b55c28ed979a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/da8de26bcee520ea080acbf9ba53b55c28ed979a", "committedDate": "2020-02-10T18:10:16Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "committedDate": "2020-02-11T02:26:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b719a6d0ad308a58f7ee94388f32bcb67eb5ec3d", "committedDate": "2020-02-11T02:26:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "e7a73571a89a291b05c106ea8425458ea0001040", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e7a73571a89a291b05c106ea8425458ea0001040", "committedDate": "2020-02-12T16:44:50Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7a73571a89a291b05c106ea8425458ea0001040", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e7a73571a89a291b05c106ea8425458ea0001040", "committedDate": "2020-02-12T16:44:50Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "ee375f6d0da2b805cb42dcf7b8156738120650e5", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ee375f6d0da2b805cb42dcf7b8156738120650e5", "committedDate": "2020-02-12T17:42:16Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee375f6d0da2b805cb42dcf7b8156738120650e5", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ee375f6d0da2b805cb42dcf7b8156738120650e5", "committedDate": "2020-02-12T17:42:16Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "3a1f076217e421e7e59a76644e71313730f2d115", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a1f076217e421e7e59a76644e71313730f2d115", "committedDate": "2020-02-12T17:57:55Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a1f076217e421e7e59a76644e71313730f2d115", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a1f076217e421e7e59a76644e71313730f2d115", "committedDate": "2020-02-12T17:57:55Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "committedDate": "2020-02-12T18:25:36Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dbd5b96c6f5428ee1985db6cd6d2838eb268f393", "committedDate": "2020-02-12T18:25:36Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "1abf3d319c332502225f49e7caaea8a79bc90832", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1abf3d319c332502225f49e7caaea8a79bc90832", "committedDate": "2020-02-12T23:16:21Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1abf3d319c332502225f49e7caaea8a79bc90832", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1abf3d319c332502225f49e7caaea8a79bc90832", "committedDate": "2020-02-12T23:16:21Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "17584c82016588247d74dbd00581eceb51b6aaf9", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/17584c82016588247d74dbd00581eceb51b6aaf9", "committedDate": "2020-02-12T23:24:47Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17584c82016588247d74dbd00581eceb51b6aaf9", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/17584c82016588247d74dbd00581eceb51b6aaf9", "committedDate": "2020-02-12T23:24:47Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "committedDate": "2020-02-13T01:12:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f03c8cb8145b48a5dbd35b413aec620d1d2dc285", "committedDate": "2020-02-13T01:12:42Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/424ac24fdc1df91fd9f939282899e98ba2095aea", "committedDate": "2020-02-13T01:53:33Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDM2NzEz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-358036713", "createdAt": "2020-02-13T08:43:18Z", "commit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo0NDowMVrOFpLJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTowNTozNlrOFpLziA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxODcxOQ==", "bodyText": "I think this should be stopCollection()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378718719", "createdAt": "2020-02-13T08:44:01Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/ActiveViewAggregator.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.aggregator.NoopAggregator;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+// The current implementation allows only to change the active ViewAggregator only before any record\n+// or binding happens. This is good for the moment to support default aggregation for all the\n+// instruments but needs to support adding/removing views at any moment, as well as support for\n+// multiple views in the same time.\n+final class ActiveViewAggregator {\n+  private AggregatorMap aggregatorMap;\n+  private volatile ViewAggregator currentViewAggregator;\n+\n+  ActiveViewAggregator() {\n+    currentViewAggregator = new NoopViewAggregator(null, NoopAggregator.getFactory());\n+  }\n+\n+  void addViewAggregator(Descriptor descriptor, AggregatorFactory aggregatorFactory) {\n+    // TODO: Add support to reduce labels.\n+    this.currentViewAggregator = new AllLabelsViewAggregator(descriptor, aggregatorFactory);\n+  }\n+\n+  // Caller needs to call these methods in the following order (while holding a lock):\n+  //  * startCollection();\n+  //  * collect();  // May be called multiple times.\n+  //  * startCollection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzY2OA==", "bodyText": "I know it is a WIP, but should the constructor initialize an Aggregation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378727668", "createdAt": "2020-02-13T09:02:12Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdk.java", "diffHunk": "@@ -46,7 +48,12 @@ public void record(double value, LabelSet labelSet) {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyOTM1Mg==", "bodyText": "With #744 I guess this TODO can be removed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r378729352", "createdAt": "2020-02-13T09:05:36Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/LongSumAggregator.java", "diffHunk": "@@ -16,14 +16,25 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n public final class LongSumAggregator implements Aggregator {\n+  private static final AggregatorFactory AGGREGATOR_FACTORY =\n+      new AggregatorFactory() {\n+        @Override\n+        public Aggregator getAggregator() {\n+          return new LongSumAggregator();\n+        }\n+      };\n+\n   // TODO: Change to use LongAdder when changed to java8.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "424ac24fdc1df91fd9f939282899e98ba2095aea", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/424ac24fdc1df91fd9f939282899e98ba2095aea", "committedDate": "2020-02-13T01:53:33Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "0b3402963565924a6c24798202965ed15e9e9f62", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b3402963565924a6c24798202965ed15e9e9f62", "committedDate": "2020-02-13T16:52:26Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b3402963565924a6c24798202965ed15e9e9f62", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b3402963565924a6c24798202965ed15e9e9f62", "committedDate": "2020-02-13T16:52:26Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "f8da8d8148b9fd08d915f3085576ee25c6b6abda", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8da8d8148b9fd08d915f3085576ee25c6b6abda", "committedDate": "2020-02-13T17:05:09Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8da8d8148b9fd08d915f3085576ee25c6b6abda", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f8da8d8148b9fd08d915f3085576ee25c6b6abda", "committedDate": "2020-02-13T17:05:09Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "1f88db9602b3493e3d80bbedd20a82f34127349b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1f88db9602b3493e3d80bbedd20a82f34127349b", "committedDate": "2020-02-13T20:16:28Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f88db9602b3493e3d80bbedd20a82f34127349b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1f88db9602b3493e3d80bbedd20a82f34127349b", "committedDate": "2020-02-13T20:16:28Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "659adb878571e82ef1f57e91740bb4debef9ef58", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/659adb878571e82ef1f57e91740bb4debef9ef58", "committedDate": "2020-02-13T21:06:59Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "659adb878571e82ef1f57e91740bb4debef9ef58", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/659adb878571e82ef1f57e91740bb4debef9ef58", "committedDate": "2020-02-13T21:06:59Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "33e845d2e8ff84b38898f9233574a17cb5227611", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33e845d2e8ff84b38898f9233574a17cb5227611", "committedDate": "2020-02-13T23:05:37Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33e845d2e8ff84b38898f9233574a17cb5227611", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33e845d2e8ff84b38898f9233574a17cb5227611", "committedDate": "2020-02-13T23:05:37Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d93ffa390dbdc6d82e04a191493f0d70867644a6", "committedDate": "2020-02-14T01:36:18Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDY1NjMz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-359065633", "createdAt": "2020-02-14T16:30:53Z", "commit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozMDo1M1rOFp8dJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozMDo1M1rOFp8dJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyNjQzOA==", "bodyText": "This class name is confusing. Why Map ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379526438", "createdAt": "2020-02-14T16:30:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AggregatorMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDY4NzI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-359068725", "createdAt": "2020-02-14T16:35:29Z", "commit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozMFrOFp8l6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozMFrOFp8l6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyODY4Mg==", "bodyText": "I think we can use LabelSetSdk as the key to this map, since it has a well-defined equals/hashcode via autovalue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r379528682", "createdAt": "2020-02-14T16:35:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AggregatorMap.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.AggregatorFactory;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+abstract class AggregatorMap {\n+  static AggregatorMap getNoop() {\n+    return Noop.INSTANCE;\n+  }\n+\n+  static AggregatorMap getAllLabels(\n+      Descriptor descriptor,\n+      Resource resource,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      AggregatorFactory aggregatorFactory,\n+      long startEpochNanos) {\n+    return new AllLabels(\n+        descriptor, resource, instrumentationLibraryInfo, aggregatorFactory, startEpochNanos);\n+  }\n+\n+  abstract void collect(LabelSet labelSet, Aggregator aggregator);\n+\n+  abstract List<MetricData> stopCollection(long epochNanos);\n+\n+  private static final class Noop extends AggregatorMap {\n+    private static final AggregatorMap INSTANCE = new Noop();\n+\n+    @Override\n+    void collect(LabelSet labelSet, Aggregator aggregator) {\n+      // Noop.\n+    }\n+\n+    @Override\n+    List<MetricData> stopCollection(long epochNanos) {\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  private static final class AllLabels extends AggregatorMap {\n+    private final Descriptor descriptor;\n+    private final Resource resource;\n+    private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n+    private final AggregatorFactory aggregatorFactory;\n+    private final Map<Map<String, String>, Aggregator> aggregatorMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d93ffa390dbdc6d82e04a191493f0d70867644a6", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d93ffa390dbdc6d82e04a191493f0d70867644a6", "committedDate": "2020-02-14T01:36:18Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "committedDate": "2020-02-14T21:51:47Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1b03c3c45cd02cf7fca9dc0122f9ae0683ce130b", "committedDate": "2020-02-14T21:51:47Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "committedDate": "2020-02-14T21:58:23Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e21d1237bb3b7d37a14b2c04adc8dc13be68739", "committedDate": "2020-02-14T21:58:23Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "3268909a85cce42756be3eb004348b73552b945d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3268909a85cce42756be3eb004348b73552b945d", "committedDate": "2020-02-15T00:02:01Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3268909a85cce42756be3eb004348b73552b945d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3268909a85cce42756be3eb004348b73552b945d", "committedDate": "2020-02-15T00:02:01Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "committedDate": "2020-02-15T17:50:21Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28cac08305d649ea61fa0f5ff4a200dbbbf0b08d", "committedDate": "2020-02-15T17:50:21Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "7f4d12da6e2ecae92c284110f23f075c0ca7d363", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f4d12da6e2ecae92c284110f23f075c0ca7d363", "committedDate": "2020-02-15T17:57:30Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f4d12da6e2ecae92c284110f23f075c0ca7d363", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f4d12da6e2ecae92c284110f23f075c0ca7d363", "committedDate": "2020-02-15T17:57:30Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "09312f54c330e30b77413b9aac4fd366e0b8f8ab", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09312f54c330e30b77413b9aac4fd366e0b8f8ab", "committedDate": "2020-02-16T22:30:51Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09312f54c330e30b77413b9aac4fd366e0b8f8ab", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09312f54c330e30b77413b9aac4fd366e0b8f8ab", "committedDate": "2020-02-16T22:30:51Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "b0044845647798352175124fa126c2159550d883", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0044845647798352175124fa126c2159550d883", "committedDate": "2020-02-18T18:54:22Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0044845647798352175124fa126c2159550d883", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b0044845647798352175124fa126c2159550d883", "committedDate": "2020-02-18T18:54:22Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "1361d42655abd3886fa6d79d628bc7ab877d6551", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1361d42655abd3886fa6d79d628bc7ab877d6551", "committedDate": "2020-02-18T19:23:46Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1361d42655abd3886fa6d79d628bc7ab877d6551", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1361d42655abd3886fa6d79d628bc7ab877d6551", "committedDate": "2020-02-18T19:23:46Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "c31878c2a5b92006017df9568cc800479ab0f125", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c31878c2a5b92006017df9568cc800479ab0f125", "committedDate": "2020-02-19T21:36:27Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c31878c2a5b92006017df9568cc800479ab0f125", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c31878c2a5b92006017df9568cc800479ab0f125", "committedDate": "2020-02-19T21:36:27Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "committedDate": "2020-02-19T22:23:05Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a8bce6e041040caa0d0a7c4f6c6125a0decc614", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5a8bce6e041040caa0d0a7c4f6c6125a0decc614", "committedDate": "2020-02-19T22:35:16Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTA1NTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-361505548", "createdAt": "2020-02-19T23:07:31Z", "commit": {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzowNzozMVrOFr7AAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzowNzozMVrOFr7AAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5OTc0NA==", "bodyText": "I think there's a risk of a ConcurrentModificationException happening during this iteration, since the map can be mutated during this method call.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#discussion_r381599744", "createdAt": "2020-02-19T23:07:31Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java", "diffHunk": "@@ -47,5 +86,69 @@ public void batch(LabelSet labelSet, Aggregator aggregator, boolean mappedAggreg\n     }\n   }\n \n+  private static final class AllLabels implements Batcher {\n+    private final Descriptor descriptor;\n+    private final Resource resource;\n+    private final InstrumentationLibraryInfo instrumentationLibraryInfo;\n+    private final Clock clock;\n+    private final AggregatorFactory aggregatorFactory;\n+    private Map<Map<String, String>, Aggregator> aggregatorMap;\n+    private long startEpochNanos;\n+    private final boolean delta;\n+\n+    private AllLabels(\n+        Descriptor descriptor,\n+        Resource resource,\n+        InstrumentationLibraryInfo instrumentationLibraryInfo,\n+        AggregatorFactory aggregatorFactory,\n+        Clock clock,\n+        boolean delta) {\n+      this.descriptor = descriptor;\n+      this.resource = resource;\n+      this.instrumentationLibraryInfo = instrumentationLibraryInfo;\n+      this.clock = clock;\n+      this.aggregatorFactory = aggregatorFactory;\n+      this.delta = delta;\n+      this.aggregatorMap = new HashMap<>();\n+      startEpochNanos = clock.now();\n+    }\n+\n+    @Override\n+    public final Aggregator getAggregator() {\n+      return aggregatorFactory.getAggregator();\n+    }\n+\n+    @Override\n+    public final void batch(LabelSet labelSet, Aggregator aggregator, boolean unmappedAggregator) {\n+      Map<String, String> labels = ((LabelSetSdk) labelSet).getLabels();\n+      Aggregator currentAggregator = aggregatorMap.get(labels);\n+      if (currentAggregator == null) {\n+        // This aggregator is not mapped, we can use this instance.\n+        if (unmappedAggregator) {\n+          aggregatorMap.put(labels, aggregator);\n+          return;\n+        }\n+        currentAggregator = aggregatorFactory.getAggregator();\n+        aggregatorMap.put(labels, currentAggregator);\n+      }\n+      aggregator.mergeToAndReset(currentAggregator);\n+    }\n+\n+    @Override\n+    public final List<MetricData> completeCollectionCycle() {\n+      List<Point> points = new ArrayList<>(aggregatorMap.size());\n+      long epochNanos = clock.now();\n+      for (Map.Entry<Map<String, String>, Aggregator> entry : aggregatorMap.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTA4NjEy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/831#pullrequestreview-361508612", "createdAt": "2020-02-19T23:14:38Z", "commit": {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22bd1e715673618a829b893aa070e9721f7c19e4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22bd1e715673618a829b893aa070e9721f7c19e4", "committedDate": "2020-02-19T23:26:23Z", "message": "Add comment about protecting a collection cycle by a lock\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3871f6a71641228fb3c49b651b7c0c22bf5f97d3", "committedDate": "2020-02-19T22:23:05Z", "message": "Bound registry work in progress\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "22bd1e715673618a829b893aa070e9721f7c19e4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22bd1e715673618a829b893aa070e9721f7c19e4", "committedDate": "2020-02-19T23:26:23Z", "message": "Add comment about protecting a collection cycle by a lock\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}