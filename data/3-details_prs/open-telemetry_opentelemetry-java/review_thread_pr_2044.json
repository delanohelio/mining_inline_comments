{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjA5NDky", "number": 2044, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxMDo1OFrOE21pvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxMDo1OFrOE21pvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTM3NTk5OnYy", "diffSide": "RIGHT", "path": "context/src/main/java/io/opentelemetry/context/ContextStorageWrappers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxMDo1OFrOHv2GLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyODowNlrOHwMShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTQzNw==", "bodyText": "It probably doesn't matter too much, since this class isn't public, but exposing synchronized methods is generally a bad practice, as it could allow accidental deadlocking if someone synchronizes on this class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2044#discussion_r519931437", "createdAt": "2020-11-09T16:10:58Z", "author": {"login": "jkwatson"}, "path": "context/src/main/java/io/opentelemetry/context/ContextStorageWrappers.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Holder of functions to wrap the used {@link ContextStorage}. Separate class from {@link\n+ * LazyStorage} to allow registering wrappers before initializing storage.\n+ */\n+final class ContextStorageWrappers {\n+\n+  private static final Logger log = Logger.getLogger(ContextStorageWrappers.class.getName());\n+\n+  private static boolean storageInitialized;\n+\n+  private static final List<Function<? super ContextStorage, ? extends ContextStorage>> wrappers =\n+      new ArrayList<>();\n+\n+  static synchronized void addWrapper(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba0d15c08d1557e64955320c084e0377179e63c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTA0Ng==", "bodyText": "Yeah figured it's ok due to the privateness but went with consistency.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2044#discussion_r520295046", "createdAt": "2020-11-10T05:28:06Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/ContextStorageWrappers.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Holder of functions to wrap the used {@link ContextStorage}. Separate class from {@link\n+ * LazyStorage} to allow registering wrappers before initializing storage.\n+ */\n+final class ContextStorageWrappers {\n+\n+  private static final Logger log = Logger.getLogger(ContextStorageWrappers.class.getName());\n+\n+  private static boolean storageInitialized;\n+\n+  private static final List<Function<? super ContextStorage, ? extends ContextStorage>> wrappers =\n+      new ArrayList<>();\n+\n+  static synchronized void addWrapper(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTQzNw=="}, "originalCommit": {"oid": "7ba0d15c08d1557e64955320c084e0377179e63c"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1920, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}