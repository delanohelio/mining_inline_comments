{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1OTQ4NzQx", "number": 2016, "title": "Implement baggage using array of key/value pairs instead of Map.", "bodyText": "This just reuses ImmutableKeyValuePairs for most heavy-lifting.\nI did this now mainly since I realized equals is buggy (doesn't handle parenting correctly) and this fixes it.\nChangelog:\n\nBaggage implementation changed from a HashMap with parenting for data reuse to array.", "createdAt": "2020-11-05T10:14:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016", "merged": true, "mergeCommit": {"oid": "9063c385d9c41c4a03b4c23ce634b75f9c34a129"}, "closed": true, "closedAt": "2020-11-09T16:54:23Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZfjdmAH2gAyNTE1OTQ4NzQxOmFhMmIwZGZiMTNlZTRiODNiYWY1NmRhNWYyODVhYTUxMzdmZmQ1ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda3t15gFqTUyNjQ1NzMxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "committedDate": "2020-11-05T10:11:08Z", "message": "Implement baggage using array of key/value pairs instead of Map."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDE2ODE3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#pullrequestreview-525416817", "createdAt": "2020-11-06T19:01:54Z", "commit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMTo1NFrOHu5_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowMTo1NFrOHu5_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NjU2Nw==", "bodyText": "I believe the original implementation intentionally was built not to make copies of all the data, but rely on traversing up the stack. I've been told by @bogdandrutu that this was a very large CPU/memory savings at google. Something to consider before we remove that implementation detail.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518946567", "createdAt": "2020-11-06T19:01:54Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/baggage/ImmutableBaggage.java", "diffHunk": "@@ -160,38 +97,48 @@ public String toString() {\n \n     @Override\n     public Baggage.Builder put(String key, String value, EntryMetadata entryMetadata) {\n-      entries.put(\n-          Objects.requireNonNull(key, \"key\"),\n-          Entry.create(\n-              key,\n-              Objects.requireNonNull(value, \"value\"),\n-              Objects.requireNonNull(entryMetadata, \"entryMetadata\")));\n+      requireNonNull(key, \"key\");\n+      requireNonNull(value, \"value\");\n+      requireNonNull(entryMetadata, \"entryMetadata\");\n+\n+      data.add(key);\n+      data.add(Entry.create(key, value, entryMetadata));\n       return this;\n     }\n \n     @Override\n     public Baggage.Builder put(String key, String value) {\n-      entries.put(\n-          Objects.requireNonNull(key, \"key\"),\n-          Entry.create(key, Objects.requireNonNull(value, \"value\"), EntryMetadata.EMPTY));\n-      return this;\n+      requireNonNull(key, \"key\");\n+      requireNonNull(value, \"value\");\n+      return put(key, value, EntryMetadata.EMPTY);\n     }\n \n     @Override\n     public Baggage.Builder remove(String key) {\n-      entries.remove(Objects.requireNonNull(key, \"key\"));\n-      if (parent != null && parent.getEntryValue(key) != null) {\n-        entries.put(key, null);\n-      }\n+      requireNonNull(key, \"key\");\n+      data.add(key);\n+      data.add(null);\n       return this;\n     }\n \n     @Override\n-    public ImmutableBaggage build() {\n+    public Baggage build() {\n       if (parent == null && !noImplicitParent) {\n         parent = Baggage.current();\n       }\n-      return new ImmutableBaggage(entries, parent);\n+\n+      List<Object> data = this.data;\n+      if (parent != null && !parent.isEmpty()) {\n+        List<Object> merged = new ArrayList<>(parent.size() * 2 + data.size());\n+        parent.forEach(\n+            (key, value, metadata) -> {\n+              merged.add(key);\n+              merged.add(Entry.create(key, value, metadata));\n+            });\n+        merged.addAll(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "originalPosition": 242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDE4NzI1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#pullrequestreview-525418725", "createdAt": "2020-11-06T19:04:59Z", "commit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowNDo1OVrOHu6EoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToxNToyN1rOHu6YFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ==", "bodyText": "this does bum me out quite a bit. By making this public, we've now exposed implementation details on all of Attributes, Labels and Baggage that could easily be abused. Can we make this protected, so the subclasses get access, but the public does not?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518948001", "createdAt": "2020-11-06T19:04:59Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/internal/ImmutableKeyValuePairs.java", "diffHunk": "@@ -3,34 +3,36 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package io.opentelemetry.api.common;\n+package io.opentelemetry.api.internal;\n \n import static io.opentelemetry.api.internal.Utils.checkArgument;\n \n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable set of key-value pairs. Keys are only {@link String} typed.\n+ * An immutable set of key-value pairs.\n  *\n  * <p>Key-value pairs are dropped for {@code null} or empty keys.\n  *\n  * <p>Note: for subclasses of this, null keys will be removed, but if your key has another concept\n- * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[])},\n- * assuming you don't want the \"empty\" keys to be kept in your collection.\n+ * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[],\n+ * boolean)}, assuming you don't want the \"empty\" keys to be kept in your collection.\n  *\n  * @param <V> The type of the values contained in this.\n  * @see Labels\n  * @see Attributes\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-abstract class ImmutableKeyValuePairs<K, V> {\n+public abstract class ImmutableKeyValuePairs<K, V> {\n \n-  List<Object> data() {\n+  public List<Object> data() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODk5NA==", "bodyText": "Just tried it locally, and yes, we can make this protected. I'll feel much better about things then.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518948994", "createdAt": "2020-11-06T19:06:56Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/internal/ImmutableKeyValuePairs.java", "diffHunk": "@@ -3,34 +3,36 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package io.opentelemetry.api.common;\n+package io.opentelemetry.api.internal;\n \n import static io.opentelemetry.api.internal.Utils.checkArgument;\n \n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable set of key-value pairs. Keys are only {@link String} typed.\n+ * An immutable set of key-value pairs.\n  *\n  * <p>Key-value pairs are dropped for {@code null} or empty keys.\n  *\n  * <p>Note: for subclasses of this, null keys will be removed, but if your key has another concept\n- * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[])},\n- * assuming you don't want the \"empty\" keys to be kept in your collection.\n+ * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[],\n+ * boolean)}, assuming you don't want the \"empty\" keys to be kept in your collection.\n  *\n  * @param <V> The type of the values contained in this.\n  * @see Labels\n  * @see Attributes\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-abstract class ImmutableKeyValuePairs<K, V> {\n+public abstract class ImmutableKeyValuePairs<K, V> {\n \n-  List<Object> data() {\n+  public List<Object> data() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ=="}, "originalCommit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1Mjk4MA==", "bodyText": "could we send in true here, and get rid of lines 175-177?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518952980", "createdAt": "2020-11-06T19:15:27Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -175,7 +176,8 @@ private static Attributes sortAndFilterToAttributes(Object... data) {\n         data[i] = null;\n       }\n     }\n-    return new AutoValue_Attributes_ArrayBackedAttributes(sortAndFilter(data));\n+    return new AutoValue_Attributes_ArrayBackedAttributes(\n+        sortAndFilter(data, /* filterNullValues= */ false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8249a69026b7a78999090a7e9cae36906f2f1d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca8249a69026b7a78999090a7e9cae36906f2f1d", "committedDate": "2020-11-07T08:02:42Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDU3MzEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#pullrequestreview-526457311", "createdAt": "2020-11-09T16:54:07Z", "commit": {"oid": "ca8249a69026b7a78999090a7e9cae36906f2f1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3953, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}