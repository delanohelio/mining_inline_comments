{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTk3OTUy", "number": 869, "reviewThreads": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMTozNlrODgdTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1NDo0N1rODhYzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxMTkzOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMTozNlrOFqrLpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMTozNlrOFqrLpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MjAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more details, check out the [Overview].\n          \n          \n            \n            For more details, check out the [Specification Overview].", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380292005", "createdAt": "2020-02-17T17:01:36Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxMjEyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMTo0MlrOFqrLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMTo0MlrOFqrLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MjA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n          \n          \n            \n            [Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380292041", "createdAt": "2020-02-17T17:01:42Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxNDc1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMjoxNlrOFqrNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMjoxNlrOFqrNLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MjM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n          \n          \n            \n            and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380292396", "createdAt": "2020-02-17T17:02:16Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxNzUyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzowNFrOFqrOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzowNFrOFqrOwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MjgwMQ==", "bodyText": "This kind of recites the previous paragraph.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380292801", "createdAt": "2020-02-17T17:03:04Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxOTIxOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzoyNlrOFqrPnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzoyNlrOFqrPnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MzAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n          \n          \n            \n            For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380293021", "createdAt": "2020-02-17T17:03:26Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYxOTc3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzozN1rOFqrP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowMzozN1rOFqrP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MzEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to strike a balance between observability and expenses, traces are sampled. \n          \n          \n            \n            In order to strike a balance between observability and expenses, traces can be sampled.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380293103", "createdAt": "2020-02-17T17:03:37Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYyMzYzOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNToxMlrOFqrSYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNToxMlrOFqrSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MzcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             - Sampling based on probability \n          \n          \n            \n             - Sampling based on probability", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380293728", "createdAt": "2020-02-17T17:05:12Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYyNDE2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNToyNFrOFqrSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNToyNFrOFqrSqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MzgwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n          \n          \n            \n            Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380293800", "createdAt": "2020-02-17T17:05:24Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYyNjE1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNTo1OFrOFqrTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowNTo1OFrOFqrTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NDA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n          \n          \n            \n            TraceConfig AlwaysOn = TraceConfig.getDefault().toBuilder().setSampler(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380294091", "createdAt": "2020-02-17T17:05:58Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzMjExOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODowM1rOFqrXNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODowM1rOFqrXNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NDk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n          \n          \n            \n            [`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380294967", "createdAt": "2020-02-17T17:08:03Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzMzMyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODozMVrOFqrX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODozMVrOFqrX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTE1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n          \n          \n            \n            The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380295153", "createdAt": "2020-02-17T17:08:31Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzNDEwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODo0NlrOFqrYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODo0NlrOFqrYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n          \n          \n            \n            Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380295260", "createdAt": "2020-02-17T17:08:46Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzNzI2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxMDoxMlrOFqraUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxMDoxMlrOFqraUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - In Memory Exporter: keeps the data in memory, useful for debug.\n          \n          \n            \n            - In-Memory Exporter: keeps the data in memory, useful for debugging.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380295762", "createdAt": "2020-02-17T17:10:12Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY1ODY3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxODoxMVrOFqrm_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxODoxMVrOFqrm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5OTAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n          \n          \n            \n            First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380299006", "createdAt": "2020-02-17T17:18:11Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2MTM2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxOTowOVrOFqrooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxOTowOVrOFqrooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5OTQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n          \n          \n            \n            A tracer is acquired using the OpenTelemetry API by specifying the name and version of the library instrumenting the library or application to be monitored.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380299424", "createdAt": "2020-02-17T17:19:09Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2MjgwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxOTo0NFrOFqrpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxOTo0NFrOFqrpgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5OTY1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            More information are available in [Obtaining a Tracer].\n          \n          \n            \n            More information is available in the specification chapter [Obtaining a Tracer].", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380299650", "createdAt": "2020-02-17T17:19:44Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2MzM0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMDowMVrOFqrp1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMDowMVrOFqrp1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5OTczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To create a basic span, you only need to specify the name of the span. \n          \n          \n            \n            To create a basic span, you only need to specify the name of the span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380299735", "createdAt": "2020-02-17T17:20:01Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2NDYwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMDozNFrOFqrqnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMDozNFrOFqrqnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5OTkzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n          \n          \n            \n            The start and end time of the span is automatically set by the OpenTelemetry SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380299932", "createdAt": "2020-02-17T17:20:34Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2NTc5OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMTowM1rOFqrrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMTowM1rOFqrrUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMDExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Most of the time, we want to correlate spans for nested operations. \n          \n          \n            \n            Most of the time, we want to correlate spans for nested operations.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380300114", "createdAt": "2020-02-17T17:21:03Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY2OTI3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMjoyNlrOFqrtdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyMjoyNlrOFqrtdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMDY2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            OpenTelemetry supports distributed tracing within process and remote processes.\n          \n          \n            \n            OpenTelemetry supports distributed tracing within processes and across remote processes.\n          \n      \n    \n    \n  \n\nnit: I don't know the exact definition but I don't think intra-process tracing qualifies as Distributed Tracing, that's only about inter-process calls.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380300660", "createdAt": "2020-02-17T17:22:26Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY3MzU1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyNDoxM1rOFqrwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyNDoxM1rOFqrwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMTMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```java\n          \n          \n            \n            For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n          \n          \n            \n            \n          \n          \n            \n            ```java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380301336", "createdAt": "2020-02-17T17:24:13Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY3ODgwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyNjoyMVrOFqrzJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyNjoyMVrOFqrzJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMjExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n          \n          \n            \n            void a() {\n          \n          \n            \n              parentSpan = tracer.spanBuilder(\"a\").startSpan();\n          \n          \n            \n              b();\n          \n          \n            \n              parentSpan.end();\n          \n          \n            \n            }\n          \n          \n            \n            void b() {\n          \n          \n            \n              Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n          \n          \n            \n              // do stuff\n          \n          \n            \n              childSpan.end();\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nAnd here it should be mentioned that one would usually \"activate\" the span using Scope scope = tracer.withSpan(parentSpan) to automatically propagate the parentSpan. Otherwise the parent would have to be kept somewhere accessible by or manually passed to B.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380302117", "createdAt": "2020-02-17T17:26:21Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY4NTQ4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyOTowN1rOFqr3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyOTowN1rOFqr3IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n          \n          \n            \n            Attributes provide additional context on a span to the specific operation it tracks, such as results or operation properties.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380303136", "createdAt": "2020-02-17T17:29:07Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY4NzM2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMDowM1rOFqr4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMDowM1rOFqr4Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n          \n          \n            \n            For these, OpenTelemetry requires specific attributes to be set. These are defined in the [Semantic Conventions] in the cross-language specification.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380303439", "createdAt": "2020-02-17T17:30:03Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY4NzY3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMDoxMFrOFqr4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMDoxMFrOFqr4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzQ4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n          \n          \n            \n            [Semantic Conventions]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380303485", "createdAt": "2020-02-17T17:30:10Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY4OTk0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMTowOVrOFqr53g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMTowOVrOFqr53g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Span with links\n          \n          \n            \n            ## Create Spans with links", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380303838", "createdAt": "2020-02-17T17:31:09Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY5MDM1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMToyMFrOFqr6IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMToyMFrOFqr6IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Span may be linked to zero or more other Spans that are causally related. \n          \n          \n            \n            A Span may be linked to zero or more other Spans that are causally related.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380303905", "createdAt": "2020-02-17T17:31:20Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY5MzEwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMjozNlrOFqr7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozMjozNlrOFqr7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNDMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n          \n          \n            \n            OpenTelemetry provides a text-based approach to propagate context to remote services using the [W3C Trace Context](https://www.w3.org/TR/trace-context/) HTTP headers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380304334", "createdAt": "2020-02-17T17:32:36Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY5NjcyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNDowOVrOFqr94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNDowOVrOFqr94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNDg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //Insert the context as Header\n          \n          \n            \n                    // Insert the context as Header", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380304865", "createdAt": "2020-02-17T17:34:09Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY5NzQ3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNDozMlrOFqr-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNDozMlrOFqr-XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNDk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Semantic Convention\n          \n          \n            \n            // Add the attributes defined in the Semantic Conventions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380304988", "createdAt": "2020-02-17T17:34:32Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header\n+        carrier.setRequestProperty(key, value);\n+    }\n+};\n+\n+URL url = new URL(\"http://127.0.0.1:8080/resource\");\n+Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+// Semantic Convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY5ODM1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNTowMVrOFqr-7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNTowMVrOFqr-7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNTEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Similarly, the text based approach can be used to read the W3C trace-context from incoming requests.\n          \n          \n            \n            Similarly, the text-based approach can be used to read the W3C Trace Context from incoming requests.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380305132", "createdAt": "2020-02-17T17:35:01Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header\n+        carrier.setRequestProperty(key, value);\n+    }\n+};\n+\n+URL url = new URL(\"http://127.0.0.1:8080/resource\");\n+Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+// Semantic Convention\n+outGoing.setAttribute(\"http.method\", \"GET\");\n+outGoing.setAttribute(\"http.url\", url.toString());\n+HttpURLConnection transportLayer = (HttpURLConnection) url.openConnection();\n+// Inject the request with the context\n+tracer.getHttpTextFormat().inject(outGoing.getContext(), transportLayer, setter);\n+// Make outgoing call\n+...\n+```\n+\n+Similarly, the text based approach can be used to read the W3C trace-context from incoming requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzcwMTQ0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjoxNlrOFqsAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjoxNlrOFqsAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNTU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return \"\";\n          \n          \n            \n                  return null;\n          \n      \n    \n    \n  \n\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java#L120", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380305595", "createdAt": "2020-02-17T17:36:16Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header\n+        carrier.setRequestProperty(key, value);\n+    }\n+};\n+\n+URL url = new URL(\"http://127.0.0.1:8080/resource\");\n+Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+// Semantic Convention\n+outGoing.setAttribute(\"http.method\", \"GET\");\n+outGoing.setAttribute(\"http.url\", url.toString());\n+HttpURLConnection transportLayer = (HttpURLConnection) url.openConnection();\n+// Inject the request with the context\n+tracer.getHttpTextFormat().inject(outGoing.getContext(), transportLayer, setter);\n+// Make outgoing call\n+...\n+```\n+\n+Similarly, the text based approach can be used to read the W3C trace-context from incoming requests.\n+The following presents an example of processing an incoming HTTP request using `HttpExchange`.\n+```java\n+HttpTextFormat.Getter<HttpExchange> getter =\n+  new HttpTextFormat.Getter<HttpExchange>() {\n+    @Override\n+    public String get(HttpExchange carrier, String key) {\n+      if (carrier.getRequestHeaders().containsKey(key)) {\n+        return carrier.getRequestHeaders().get(key).get(0);\n+      }\n+      return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzcwMjA2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjoyN1rOFqsBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjoyN1rOFqsBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNTY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Metric\n          \n          \n            \n            # Metrics", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380305679", "createdAt": "2020-02-17T17:36:27Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header\n+        carrier.setRequestProperty(key, value);\n+    }\n+};\n+\n+URL url = new URL(\"http://127.0.0.1:8080/resource\");\n+Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+// Semantic Convention\n+outGoing.setAttribute(\"http.method\", \"GET\");\n+outGoing.setAttribute(\"http.url\", url.toString());\n+HttpURLConnection transportLayer = (HttpURLConnection) url.openConnection();\n+// Inject the request with the context\n+tracer.getHttpTextFormat().inject(outGoing.getContext(), transportLayer, setter);\n+// Make outgoing call\n+...\n+```\n+\n+Similarly, the text based approach can be used to read the W3C trace-context from incoming requests.\n+The following presents an example of processing an incoming HTTP request using `HttpExchange`.\n+```java\n+HttpTextFormat.Getter<HttpExchange> getter =\n+  new HttpTextFormat.Getter<HttpExchange>() {\n+    @Override\n+    public String get(HttpExchange carrier, String key) {\n+      if (carrier.getRequestHeaders().containsKey(key)) {\n+        return carrier.getRequestHeaders().get(key).get(0);\n+      }\n+      return \"\";\n+    }\n+};\n+...\n+public void handle(HttpExchange he) {\n+    // Extract the context from the request\n+    SpanContext ctx = tracer.getHttpTextFormat().extract(he, getter);\n+    Span serverSpan = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.SERVER)\n+        .setParent(ctx)\n+        .startSpan();\n+    // Semantic Convention\n+    serverSpan.setAttribute(\"http.method\", \"GET\");\n+    serverSpan.setAttribute(\"http.scheme\", \"http\");\n+    serverSpan.setAttribute(\"http.host\", \"localhost:8080\");\n+    serverSpan.setAttribute(\"http.target\", \"/resource\");\n+    // Serve the request\n+    ...\n+    serverSpan.end();\n+}\n+```\n+\n+# Metric", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzcwMjc1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjo0NFrOFqsBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzozNjo0NFrOFqsBdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwNTc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Semantic Convention\n          \n          \n            \n                // Add the attributes defined in the Semantic Conventions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380305783", "createdAt": "2020-02-17T17:36:44Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,273 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Span with links](#span-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metric](#metric)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+Configuration is performed only by user applications which should configure the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.  \n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces are sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability \n+\n+Additional sampler can be provided implementing the [io.opentelemetry.sdk.trace.Sampler] interface.\n+\n+```java\n+TraceConfig AlwaysON = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[io.opentelemetry.sdk.trace.Sampler]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and send them in bulk. \n+Multiple Span processors can be configured to be active at the same time using `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In Memory Exporter: keeps the data in memory, useful for debug.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, the code must acquire a `tracer` which is responsible of create spans and interact with the in-process W3C trace-context.\n+A tracer is acquired using the OpenTelemetry API specifying name and version parameters. \n+More information are available in [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span. \n+Starting/Ending time and tracing-context are provided automatically by the OpenTelemetry API.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations. \n+OpenTelemetry supports distributed tracing within process and remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+```java\n+Span childLocalParent = tracer.spanBuilder(\"Child\").setParent(parentSpan).startSpan();\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on span to the specific operation it tracks, such as results or operation properties.\n+```java\n+Span span = tracer.spanBuilder(\"/resource/path\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+span.setAttribute(\"http.method\", \"GET\");\n+span.setAttribute(\"http.url\", url.toString());\n+```\n+\n+Some of these operations represent calls that use well-known protocols like HTTP or database calls. \n+For these, OpenTelemetry requires specific attributes to be set. To see more, please refer to the [Semantic Convention].\n+\n+[Semantic Convention]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\n+\n+## Create Spans with events\n+\n+Spans can be annotated with named events that can carry zero or more [Span Attributes](#span-attributes),\n+each of which is itself a key:value map paired automatically with a timestamp.\n+\n+```java\n+span.addEvent(\"Init\");\n+...\n+span.addEvent(\"End\");\n+```\n+```java\n+Map<String, AttributeValue> eventAttributes = new HashMap<>();\n+eventAttributes.put(\"key\", AttributeValue.stringAttributeValue(\"value\"));\n+eventAttributes.put(\"result\", AttributeValue.longAttributeValue(0L));\n+\n+span.addEvent(\"End Computation\", eventAttributes);\n+```\n+\n+## Span with links\n+A Span may be linked to zero or more other Spans that are causally related. \n+Links can be used to represent batched operations where a Span was initiated by multiple initiating Spans, each representing a single incoming item being processed in the batch.\n+\n+```java\n+Link link1 = SpanData.Link.create(parentSpan1.getContext());\n+Link link2 = SpanData.Link.create(parentSpan2.getContext());\n+Span child = tracer.spanBuilder(\"childWithLink\")\n+        .addLink(link1)\n+        .addLink(link2)\n+        .addLink(parentSpan3.getContext())\n+        .addLink(remoteContext)\n+    .startSpan();\n+```\n+\n+For more details how to read context from remote processes, see [Context Propagation](#context-propagation).\n+\n+## Context Propagation\n+\n+OpenTelemetry provides a text based approach to propagate the W3C trace-context with remote processes by instrumenting the transport-layer operation.\n+The following presents an example of an outgoing HTTP request using `HttpURLConnection`.\n+ \n+```java\n+// Tell OpenTelemetry to inject the context in the HTTP headers\n+HttpTextFormat.Setter<HttpURLConnection> setter =\n+  new HttpTextFormat.Setter<HttpURLConnection>() {\n+    @Override\n+    public void put(HttpURLConnection carrier, String key, String value) {\n+        //Insert the context as Header\n+        carrier.setRequestProperty(key, value);\n+    }\n+};\n+\n+URL url = new URL(\"http://127.0.0.1:8080/resource\");\n+Span outGoing = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.CLIENT).startSpan();\n+// Semantic Convention\n+outGoing.setAttribute(\"http.method\", \"GET\");\n+outGoing.setAttribute(\"http.url\", url.toString());\n+HttpURLConnection transportLayer = (HttpURLConnection) url.openConnection();\n+// Inject the request with the context\n+tracer.getHttpTextFormat().inject(outGoing.getContext(), transportLayer, setter);\n+// Make outgoing call\n+...\n+```\n+\n+Similarly, the text based approach can be used to read the W3C trace-context from incoming requests.\n+The following presents an example of processing an incoming HTTP request using `HttpExchange`.\n+```java\n+HttpTextFormat.Getter<HttpExchange> getter =\n+  new HttpTextFormat.Getter<HttpExchange>() {\n+    @Override\n+    public String get(HttpExchange carrier, String key) {\n+      if (carrier.getRequestHeaders().containsKey(key)) {\n+        return carrier.getRequestHeaders().get(key).get(0);\n+      }\n+      return \"\";\n+    }\n+};\n+...\n+public void handle(HttpExchange he) {\n+    // Extract the context from the request\n+    SpanContext ctx = tracer.getHttpTextFormat().extract(he, getter);\n+    Span serverSpan = tracer.spanBuilder(\"/resource\").setSpanKind(Span.Kind.SERVER)\n+        .setParent(ctx)\n+        .startSpan();\n+    // Semantic Convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab73f33e1c57b90d23903197fa51106507642d2"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg5MjU1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0NTozNlrOFrKC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1MTo1OVrOFrKSaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NzY1OQ==", "bodyText": "link needed?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380797659", "createdAt": "2020-02-18T16:45:36Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMTY0MA==", "bodyText": "nm. I didn't know you could do this with markdown.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380801640", "createdAt": "2020-02-18T16:51:59Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NzY1OQ=="}, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg5NDA4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0NjowMlrOFrKD1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToxODo1MlrOFrgZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NzkwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n          \n          \n            \n            **Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380797909", "createdAt": "2020-02-18T16:46:02Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2Mzg4Mg==", "bodyText": "I think the intent was to make clear its discouraged (or even prohibited by the spec) to access the SDK as an instrumenting library as only the application should set that up.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381163882", "createdAt": "2020-02-19T09:18:52Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NzkwOQ=="}, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg5NzEwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0Njo0NVrOFrKFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0Njo0NVrOFrKFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5ODM3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n          \n          \n            \n            implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380798378", "createdAt": "2020-02-18T16:46:45Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyMjE4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1MzoxMVrOFrKVJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1MzoxMVrOFrKVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The configuration should set up the exporter and may tune the OpenTelemetry behavior.\n          \n          \n            \n            The configuration should install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380802341", "createdAt": "2020-02-18T16:53:11Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration should set up the exporter and may tune the OpenTelemetry behavior.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyNDI5OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mzo0M1rOFrKWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mzo0M1rOFrKWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TraceConfig AlwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n          \n          \n            \n            TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380802677", "createdAt": "2020-02-18T16:53:43Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration should set up the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig AlwaysOn = TraceConfig.getDefault().toBuilder().setSampler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyNTU4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mzo1NVrOFrKXKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mzo1NVrOFrKXKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjg1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n          \n          \n            \n            TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r380802857", "createdAt": "2020-02-18T16:53:55Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry must only take dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is instrumented. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration should set up the exporter and may tune the OpenTelemetry behavior.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig AlwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig AlwaysOff = TraceConfig.getDefault().toBuilder().setSampler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a94c7599aaf8bd51bfb0c77cb3a89a1de8fe16"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzMDE3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMToxNFrOFrgefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjo0MToyNVrOFrmmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE4MA==", "bodyText": "The trick is that this actually happens implicitly. setParent is only used to override the default behavior of taking the current (\"active\") span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381165180", "createdAt": "2020-02-19T09:21:14Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span parentSpan = tracer.getCurrentSpan();\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5acb5d4cd93dfaf2aff6db9d620702ecccd8bf79"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2NTYwMw==", "bodyText": "The more you know \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381265603", "createdAt": "2020-02-19T12:41:25Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span parentSpan = tracer.getCurrentSpan();\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE4MA=="}, "originalCommit": {"oid": "5acb5d4cd93dfaf2aff6db9d620702ecccd8bf79"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzNTMwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMjo0OFrOFrghuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMjo0OFrOFrghuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer to the [contribution guide](https://github.com/open-telemetry/opentelemetry-java/blob/master/CONTRIBUTING.md)\n          \n          \n            \n            Please refer to the [contribution guide](CONTRIBUTING.md)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381166008", "createdAt": "2020-02-19T09:22:48Z", "author": {"login": "arminru"}, "path": "README.md", "diffHunk": "@@ -27,6 +27,10 @@ We would love to hear from the larger community: please provide feedback proacti\n Please refer to the [contribution guide](https://github.com/open-telemetry/opentelemetry-java/blob/master/CONTRIBUTING.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5acb5d4cd93dfaf2aff6db9d620702ecccd8bf79"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzNTk5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMjo1OFrOFrgiGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMjo1OFrOFrgiGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer to the [quick start guide](https://github.com/open-telemetry/opentelemetry-java/blob/master/QUICKSTART.md) on how use the OpenTelemetry API.\n          \n          \n            \n            Please refer to the [quick start guide](QUICKSTART.md) on how use the OpenTelemetry API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381166104", "createdAt": "2020-02-19T09:22:58Z", "author": {"login": "arminru"}, "path": "README.md", "diffHunk": "@@ -27,6 +27,10 @@ We would love to hear from the larger community: please provide feedback proacti\n Please refer to the [contribution guide](https://github.com/open-telemetry/opentelemetry-java/blob/master/CONTRIBUTING.md)\n on how to setup and contribute!\n \n+## Quick Start\n+Please refer to the [quick start guide](https://github.com/open-telemetry/opentelemetry-java/blob/master/QUICKSTART.md) on how use the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5acb5d4cd93dfaf2aff6db9d620702ecccd8bf79"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTI1OTc3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyOTozNFrOFrgw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyOTozNFrOFrgw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The configuration install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n          \n          \n            \n            The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381169891", "createdAt": "2020-02-19T09:29:34Z", "author": {"login": "arminru"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The configuration install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5acb5d4cd93dfaf2aff6db9d620702ecccd8bf79"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDgwNTY3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzowMjoyMVrOFrvk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozNjo0MFrOFsMSNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMjYwNw==", "bodyText": "Let's also add a link over to the OpenTelemetry registry to find other java exporters.\nhttps://opentelemetry.io/registry/?s=exporter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381412607", "createdAt": "2020-02-19T17:02:21Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MjkzMg==", "bodyText": "Nice idea!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381882932", "createdAt": "2020-02-20T09:36:40Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMjYwNw=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU2NTU2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0ODowNlrOFr3Dpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0ODowNlrOFr3Dpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNTE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n          \n          \n            \n            Span processors are initialized with an exporter which is responsible for sending telemetry data to a particular backend.\n          \n      \n    \n    \n  \n\n\nLowercased \"processors\" since other terms of art like \"span\" are mostly lowercase\n\"particular\" instead of \"your choice\" to make it clear there's one exporter per backend", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381535142", "createdAt": "2020-02-19T20:48:06Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU2NzQ0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0ODo0NVrOFr3E0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0ODo0NVrOFr3E0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNTQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n          \n          \n            \n            - Jaeger Exporter: prepares and sends the collected telemetry data to a Jaeger backend via gRPC.\n          \n      \n    \n    \n  \n\nTo match the tense of the others", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381535442", "createdAt": "2020-02-19T20:48:45Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU3NTI3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MToxMlrOFr3JhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MToxMlrOFr3JhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNjY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ...\n          \n          \n            \n              // do stuff\n          \n      \n    \n    \n  \n\nOr change it to \"...\" above, just to make it clear that it's the same bit of code in both snippets.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381536645", "createdAt": "2020-02-19T20:51:12Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span childSpan = tracer.spanBuilder(\"b\")\n+     // NOTE: setParent(parentSpan) is not required anymore, \n+     // `tracer.getCurrentSpan()` is automatically added as parent\n+    .startSpan();\n+  ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU3ODczOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MjoyNVrOFr3LmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MjoyNVrOFr3LmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzE3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n          \n          \n            \n            For a method `a` calling a method `b`, the spans could be manually linked in the following way:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381537177", "createdAt": "2020-02-19T20:52:25Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU5NTQ2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1NzoyNFrOFr3VsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTo1Njo0M1rOFsM-aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzOTc2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n          \n          \n            \n            In OpenTelemetry spans can be created freely and it's up to the implementor to annotate them with attributes specific to the represented operation. \n          \n      \n    \n    \n  \n\nSmart quote copied from a word doc?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381539760", "createdAt": "2020-02-19T20:57:24Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span childSpan = tracer.spanBuilder(\"b\")\n+     // NOTE: setParent(parentSpan) is not required anymore, \n+     // `tracer.getCurrentSpan()` is automatically added as parent\n+    .startSpan();\n+  ...\n+  childSpan.end();\n+}\n+``` \n+\n+To link spans from remote processes, it is sufficient to set the [Remote Context](#context-propagation) as parent. \n+```java\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NDI0OA==", "bodyText": "Left-hand quote \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381894248", "createdAt": "2020-02-20T09:56:43Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span childSpan = tracer.spanBuilder(\"b\")\n+     // NOTE: setParent(parentSpan) is not required anymore, \n+     // `tracer.getCurrentSpan()` is automatically added as parent\n+    .startSpan();\n+  ...\n+  childSpan.end();\n+}\n+``` \n+\n+To link spans from remote processes, it is sufficient to set the [Remote Context](#context-propagation) as parent. \n+```java\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzOTc2MA=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU5Nzc1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1ODowNlrOFr3XBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1ODowNlrOFr3XBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MDEwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Attributes provide additional context on a span to the specific operation it tracks, such as results or operation properties.\n          \n          \n            \n            Attributes provide additional context on a span about the specific operation it tracks, such as results or operation properties.\n          \n      \n    \n    \n  \n\nOr \"specific to the operation it tracks\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381540100", "createdAt": "2020-02-19T20:58:06Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API\n+offers an automated way to propagate the `parentSpan`:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  try(Scope scope = tracer.withSpan(parentSpan)){\n+    b();\n+  } finally {\n+    parentSpan.end();\n+  }\n+}\n+void b() {\n+  Span childSpan = tracer.spanBuilder(\"b\")\n+     // NOTE: setParent(parentSpan) is not required anymore, \n+     // `tracer.getCurrentSpan()` is automatically added as parent\n+    .startSpan();\n+  ...\n+  childSpan.end();\n+}\n+``` \n+\n+To link spans from remote processes, it is sufficient to set the [Remote Context](#context-propagation) as parent. \n+```java\n+Span childRemoteParent = tracer.spanBuilder(\"Child\").setParent(remoteContext).startSpan();\n+```\n+\n+## Span Attributes\n+In OpenTelemetry spans can be created freely and it\u2019s up to the implementor to annotate them with attributes specific to the represented operation. \n+Attributes provide additional context on a span to the specific operation it tracks, such as results or operation properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYwOTk5OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowMTo1MVrOFr3elw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1MDo0NlrOFsGAnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MjAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Get the tracer\n          \n          \n            \n            // Initialize the tracer registry\n          \n      \n    \n    \n  \n\nSince it's the registry that gets configured, not the tracer.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381542039", "createdAt": "2020-02-19T21:01:51Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MDEyNA==", "bodyText": "I like Get the Tracer more ;) (the tracer provider/registry may have been already initialized)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381780124", "createdAt": "2020-02-20T05:50:46Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MjAzOQ=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYyNzEwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowNzoyMlrOFr3o6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1MzoxOVrOFsGFpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDY4Mw==", "bodyText": "It might be helpful to link to https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/sdk-tracing.md#sampling here, but even that doc doesn't make it clear what happens to non-sampled traces (don't get exported, don't accept events, etc.).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381544683", "createdAt": "2020-02-19T21:07:22Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MTQxMw==", "bodyText": "I very personally feel actual documentation (once we have an actual OTel website) could be better than the actual Specification, as it might be too dense for end users, as commented before.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381781413", "createdAt": "2020-02-20T05:53:19Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDY4Mw=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYyNzYyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowNzozNVrOFr3pSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowNzozNVrOFr3pSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n          \n          \n            \n            Additional samplers can be provided by implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381544776", "createdAt": "2020-02-19T21:07:35Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzNjYyOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMDozMFrOFr3u9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMDozMFrOFr3u9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjIyOQ==", "bodyText": "May want to note that this configuration info only applies to the SDK provided by opentelemetry-sdk since you mention \"any other implementation\" above. E.g. there's no updateActiveTraceConfig in the API package, and other SDKs are free to offer different configuration options.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381546229", "createdAt": "2020-02-19T21:10:30Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY0MzczOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMjo1NVrOFr3zjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1NToxMFrOFsGJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzQwNA==", "bodyText": "This line makes it sound like the example above is standard practice, instead of just here to demonstrate the mechanics of implicit context propagation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381547404", "createdAt": "2020-02-19T21:12:55Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjQ0Ng==", "bodyText": "Agreed on this!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381782446", "createdAt": "2020-02-20T05:55:10Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();\n+  // do stuff\n+  childSpan.end();\n+}\n+```\n+Since it is not always possible to change a method signature or rely on global variables, the OpenTelemetry API", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzQwNA=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY0Nzg2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxNDoxOVrOFr32Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNTo0MToyN1rOFsYcBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0ODA5OQ==", "bodyText": "Maybe leave metrics for another PR (unless you're planning to fill out the TODO at the bottom in this one).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381548099", "createdAt": "2020-02-19T21:14:19Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODI3MA==", "bodyText": "+1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381778270", "createdAt": "2020-02-20T05:47:02Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0ODA5OQ=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzNTcwNg==", "bodyText": "@bogdandrutu is working on finishing the implementation of the Metric part. I will provide a follow up PR that addresses the metric part soon \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381935706", "createdAt": "2020-02-20T11:15:31Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0ODA5OQ=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4MjA1NQ==", "bodyText": "@thisthat thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r382082055", "createdAt": "2020-02-20T15:41:27Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0ODA5OQ=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY3MzY3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyMzoyMFrOFr4Grg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyMzoyMFrOFr4Grg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjMwMg==", "bodyText": "There are a few places it would be helpful to link to e.g. javadocs, where the behavior isn't obvious from the name alone. This one looks like it could benefit from some links to me, e.g.:\n\nAlwaysOnSampler, which samples every trace regardless of upstream sampling decisions.\nAlwaysOffSampler, which doesn't sample any trace, regardless of upstream sampling decisions.\nProbability which samples a configurable percentage of traces, and additionally samples any trace that was sampled upstream.\n\nI linked to the source here since AFAICT there aren't hosted docs I can link to.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381552302", "createdAt": "2020-02-19T21:23:20Z", "author": {"login": "c24t"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzMyNjgwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo0NjoyN1rOFsF4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo0NjoyN1rOFsF4Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3Nzk4Nw==", "bodyText": "\"for collecting telemetry data\" maybe?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381777987", "createdAt": "2020-02-20T05:46:27Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzMzMjg2OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo0ODowMVrOFsF7aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNTo0MTo0M1rOFsYc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODc5Mg==", "bodyText": "Not sure we want end users to refer to the actual Specification - maybe put it at the end, in a \"Resources\" list?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381778792", "createdAt": "2020-02-20T05:48:01Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwODc0OQ==", "bodyText": "I agree that specification should not be part of this document, but this is the overview of the overall project. Maybe linking the openteletry website?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381908749", "createdAt": "2020-02-20T10:22:51Z", "author": {"login": "thisthat"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODc5Mg=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4MjI4MA==", "bodyText": "I'd be fine with that, yes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r382082280", "createdAt": "2020-02-20T15:41:43Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3ODc5Mg=="}, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzMzNTQwOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo0ODozOVrOFsF8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo0ODozOVrOFsF8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc3OTA5OA==", "bodyText": "\"telemetry data\" is probably better here, as opentelemetry-api includes also metrics and correlation context (even if this section focuses on traces).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381779098", "createdAt": "2020-02-20T05:48:39Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzM0ODU4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1MTo1N1rOFsGDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1MTo1N1rOFsGDIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MDc2OA==", "bodyText": "I'd prefer to have this split among different lines, instead of a single long one (better readability).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381780768", "createdAt": "2020-02-20T05:51:57Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzM2MDQ3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1NDo0N1rOFsGI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNTo1NDo0N1rOFsGI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4MjI0OQ==", "bodyText": "It would also be nice to split this line here (and other relatively long lines).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/869#discussion_r381782249", "createdAt": "2020-02-20T05:54:47Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -0,0 +1,308 @@\n+# OpenTelemetry QuickStart\n+\n+<!-- Re-generate TOC with `markdown-toc --no-first-h1 -i` -->\n+\n+<!-- toc -->\n+\n+- [Configuration](#configuration)\n+    + [Sampler](#sampler)\n+    + [Span Processor](#span-processor)\n+    + [Exporter](#exporter)\n+- [Tracing](#tracing)\n+  * [Create basic Span](#create-basic-span)\n+  * [Create nested Spans](#create-nested-spans)\n+  * [Span Attributes](#span-attributes)\n+  * [Create Spans with events](#create-spans-with-events)\n+  * [Create Spans with links](#create-spans-with-links)\n+  * [Context Propagation](#context-propagation)\n+- [Metrics](#metrics)\n+\n+<!-- tocstop -->\n+\n+OpenTelemetry can be used to instrument code for collecting distributed traces and recording metrics.\n+For more details, check out the [Specification Overview].\n+\n+In the following examples, we demonstrate how to configure the OpenTelemetry SDK, create spans and record metrics through the OpenTelemetry API.\n+\n+[Specification Overview]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\n+\n+# Configuration\n+\n+**Libraries** that want to export distributed tracing using OpenTelemetry only need a dependency on the `opentelemetry-api` package\n+and should never configure OpenTelemetry themselves. The configuration must be provided by **Applications** which should also depend on the \n+`opentelemetry-sdk` package, or any other implementation of the OpenTelemetry API. This way, libraries will obtain a real tracer\n+implementation only if the user application is configured for it. For more details, check out the [Library Guidelines].\n+\n+[Library Guidelines]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/library-guidelines.md\n+\n+The application has to install a span processor with an exporter and may customize the behavior of the OpenTelemetry SDK.\n+\n+For example, a basic configuration instantiates the SDK tracer registry and sets to export the traces to a logging stream.\n+\n+```java\n+// Get the tracer\n+TracerSdkRegistry tracerRegistry = OpenTelemetrySdk.getTracerRegistry();\n+\n+// Set to export the traces to a logging stream\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(new LoggingExporter()).build());\n+```\n+\n+### Sampler\n+\n+It is not always feasible to trace and export every user request in an application.\n+In order to strike a balance between observability and expenses, traces can be sampled. \n+\n+The OpenTelemetry SDK offers three samplers out of the box:\n+ - Always sample\n+ - Never sample\n+ - Sampling based on probability\n+\n+Additional samplers can be provided implementing the [`io.opentelemetry.sdk.trace.Sampler`] interface.\n+\n+```java\n+TraceConfig alwaysOn = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOn()\n+).build();\n+TraceConfig alwaysOff = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.alwaysOff()\n+).build();\n+TraceConfig half = TraceConfig.getDefault().toBuilder().setSampler(\n+        Samplers.probability(0.5)\n+).build();\n+// Configure the sampler to use\n+tracerRegistry.updateActiveTraceConfig(\n+    half\n+);\n+```\n+\n+[`io.opentelemetry.sdk.trace.Sampler`]: https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/Sampler.java\n+\n+### Span Processor\n+\n+Different Span processors are offered by OpenTelemetry. \n+The `SimpleSpanProcessor` immediately forwards ended spans to the exporter, while the `BatchSpansProcessor` batches them and sends them in bulk.\n+Multiple Span processors can be configured to be active at the same time using the `MultiSpanProcessor`.\n+\n+```java\n+tracerRegistry.addSpanProcessor(\n+    SimpleSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(\n+    BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+);\n+tracerRegistry.addSpanProcessor(MultiSpanProcessor.create(Arrays.asList(\n+            SimpleSpansProcessor.newBuilder(new LoggingExporter()).build(),\n+            BatchSpansProcessor.newBuilder(new LoggingExporter()).build()\n+)));\n+```\n+\n+### Exporter\n+\n+Span Processor are initialized with an exporter which is responsible to send the telemetry data to your backend of choice.\n+OpenTelemetry offers four exporters out of the box:\n+- In-Memory Exporter: keeps the data in memory, useful for debugging.\n+- Jaeger Exporter: prepare and send the collected telemetry data to a Jaeger backend via gRPC.\n+- Logging Exporter: saves the telemetry data into log streams.\n+- OpenTelemetry Exporter: sends the data to the [OpenTelemetry Collector] (not yet implemented).\n+\n+[OpenTelemetry Collector]: https://github.com/open-telemetry/opentelemetry-collector\n+\n+```java\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    InMemorySpanExporter.create()\n+).build());\n+tracerRegistry.addSpanProcessor(SimpleSpansProcessor.newBuilder(\n+    new LoggingExporter()\n+).build());\n+\n+ManagedChannel jaegerChannel = ManagedChannelBuilder.forAddress([ip:String], [port:int]).usePlaintext().build();\n+JaegerGrpcSpanExporter jaegerExporter = JaegerGrpcSpanExporter.newBuilder()\n+    .setServiceName(\"example\").setChannel(jaegerChannel).setDeadline(30000)\n+    .build();\n+tracerRegistry.addSpanProcessor(BatchSpansProcessor.newBuilder(\n+    jaegerExporter\n+).build());\n+```\n+\n+# Tracing\n+\n+In the following, we present how to trace code using the OpenTelemetry API.\n+**Note:** Methods of the OpenTelemetry SDK should never be called.\n+ \n+First, a `Tracer` must be acquired, which is responsible for creating spans and interacting with the [Context](#context-propagation).\n+A tracer is acquired by using the OpenTelemetry API specifying the name and version of the library \n+instrumenting the instrumented library or application to be monitored. \n+More information is available in the specification chapter [Obtaining a Tracer].\n+\n+```java\n+Tracer tracer = OpenTelemetry.getTracerRegistry().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+```\n+\n+[Obtaining a Tracer]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/api-tracing.md#obtaining-a-tracer\n+\n+## Create basic Span\n+To create a basic span, you only need to specify the name of the span.\n+The start and end time of the span is automatically set by the OpenTelemetry SDK.\n+```java\n+Span span = tracer.spanBuilder(\"SpanName\").startSpan();\n+// your use case\n+...\n+span.end();\n+```\n+\n+## Create nested Spans\n+\n+Most of the time, we want to correlate spans for nested operations.\n+OpenTelemetry supports tracing within processes and across remote processes.\n+For more details how to share context between remote processes, see [Context Propagation](#context-propagation).\n+\n+For a method `A` calling a method `B`, the spans could be manually linked in the following way:\n+```java\n+void a() {\n+  Span parentSpan = tracer.spanBuilder(\"a\").startSpan();\n+  b(parentSpan);\n+  parentSpan.end();\n+}\n+void b(Span parentSpan) {\n+  Span childSpan = tracer.spanBuilder(\"b\").setParent(parentSpan).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b6b74a8620ee06b3456973cb85ef1d5788c6eb"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1119, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}