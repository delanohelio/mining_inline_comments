{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjA3NjU4", "number": 1384, "title": "support container id in AWS ECS plugin", "bodyText": "Description: Add container id in AWS ECS Plugin\nContainer.id semantic conversions open-telemetry/opentelemetry-specification#673\nTesting: Verified in https://github.com/aws-samples/aws-xray-sdk-with-opentelemetry-sample/tree/both-otel-and-xray\nCan get AWS service resources in Span.\nDocumentation: https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-configuration.html#xray-sdk-java-configuration-plugins", "createdAt": "2020-06-30T18:04:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384", "merged": true, "mergeCommit": {"oid": "241017bd4e333cd25144b10f2531f1b3dece2f18"}, "closed": true, "closedAt": "2020-07-01T17:26:53Z", "author": {"login": "wangzlei"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwZiQ9AH2gAyNDQyMjA3NjU4OjZmY2E1NWJlYmExMTM5MmViMjY0NTYzZGRlYjUxYTA3NGRhYThkZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwr5fzAFqTQ0MDk3MjQ2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fca55beba11392eb264563ddeb51a074daa8dd6", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6fca55beba11392eb264563ddeb51a074daa8dd6", "committedDate": "2020-06-30T17:59:30Z", "message": "support container id in AWS ECS plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzM0NjMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#pullrequestreview-440334630", "createdAt": "2020-06-30T19:48:53Z", "commit": {"oid": "6fca55beba11392eb264563ddeb51a074daa8dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo0ODo1M1rOGrMAMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo0ODo1M1rOGrMAMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzODYxMA==", "bodyText": "Please add a comment about the fact that it returns an empty string when the docker id can't be found.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#discussion_r447938610", "createdAt": "2020-06-30T19:48:53Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/aws_v1_support/src/main/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelper.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+class DockerHelper {\n+\n+  private static final Logger logger = Logger.getLogger(DockerHelper.class.getName());\n+  private static final int CONTAINER_ID_LENGTH = 64;\n+  private static final String DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n+\n+  private final String cgroupPath;\n+\n+  DockerHelper() {\n+    this(DEFAULT_CGROUP_PATH);\n+  }\n+\n+  @VisibleForTesting\n+  DockerHelper(String cgroupPath) {\n+    this.cgroupPath = cgroupPath;\n+  }\n+\n+  /**\n+   * Get docker container id from local cgroup file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fca55beba11392eb264563ddeb51a074daa8dd6"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDU0NDIz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#pullrequestreview-440454423", "createdAt": "2020-06-30T23:34:31Z", "commit": {"oid": "6fca55beba11392eb264563ddeb51a074daa8dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNDozMVrOGrR8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozNDozMVrOGrR8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTkyNQ==", "bodyText": "Use Guava Files instead of FileUtils", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#discussion_r448035925", "createdAt": "2020-06-30T23:34:31Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelperTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class DockerHelperTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCgroupFileMissing() {\n+    DockerHelper dockerHelper = new DockerHelper(\"a_file_never_existing\");\n+    assertThat(dockerHelper.getContainerId()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testContainerIdMissing() throws IOException {\n+    File file = tempFolder.newFile(\"no_container_id\");\n+    FileUtils.writeStringToFile(file, \"13:pids:/\\n\" + \"12:hugetlb:/\\n\" + \"11:net_prio:/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fca55beba11392eb264563ddeb51a074daa8dd6"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7276c62947548f812a369683745f7173d21bfd71", "author": {"user": {"login": "wangzlei", "name": "Lei Wang"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7276c62947548f812a369683745f7173d21bfd71", "committedDate": "2020-07-01T01:25:30Z", "message": "fix comments; change apache common to guava"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDkwOTky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#pullrequestreview-440490992", "createdAt": "2020-07-01T01:35:36Z", "commit": {"oid": "7276c62947548f812a369683745f7173d21bfd71"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTozNTozNlrOGrT5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTozNTozNlrOGrT5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NzkwMw==", "bodyText": "Nit, a bit simpler as Files.write(content, file, Charsets.UTF_8)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#discussion_r448067903", "createdAt": "2020-07-01T01:35:36Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/aws_v1_support/src/test/java/io/opentelemetry/sdk/extensions/trace/aws/resource/DockerHelperTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.trace.aws.resource;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+import java.io.File;\n+import java.io.IOException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class DockerHelperTest {\n+\n+  @Rule public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCgroupFileMissing() {\n+    DockerHelper dockerHelper = new DockerHelper(\"a_file_never_existing\");\n+    assertThat(dockerHelper.getContainerId()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testContainerIdMissing() throws IOException {\n+    File file = tempFolder.newFile(\"no_container_id\");\n+    String content = \"13:pids:/\\n\" + \"12:hugetlb:/\\n\" + \"11:net_prio:/\";\n+    Files.write(content.getBytes(Charsets.UTF_8), file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7276c62947548f812a369683745f7173d21bfd71"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTU3MTE2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#pullrequestreview-440557116", "createdAt": "2020-07-01T05:33:53Z", "commit": {"oid": "7276c62947548f812a369683745f7173d21bfd71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTcyNDY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1384#pullrequestreview-440972465", "createdAt": "2020-07-01T15:23:10Z", "commit": {"oid": "7276c62947548f812a369683745f7173d21bfd71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2519, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}