{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTIwNDk1", "number": 1011, "title": "Add a helper class that reads metrics every X seconds.", "bodyText": "This is a final bit of clean up from @bogdandrutu's work in #944", "createdAt": "2020-03-13T18:33:09Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011", "merged": true, "mergeCommit": {"oid": "93f89990fd073e912f40277f24c449e6efcacca6"}, "closed": true, "closedAt": "2020-03-14T16:48:57Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNUe-fAH2gAyMzg3OTIwNDk1OmFjNjZmZDU2ZTdhZWUwNGQyYzVhYjg5MWYwNGY2ZjBlMmUyODAyZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNnyohAFqTM3NDczOTA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac66fd56e7aee04d2c5ab891f04f6f0e2e2802e8", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ac66fd56e7aee04d2c5ab891f04f6f0e2e2802e8", "committedDate": "2020-03-13T18:19:02Z", "message": "Add a helper class that reads metrics every X seconds.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1d1fa2bdfbf1ddd9f6a866cdb317cf7642939f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e1d1fa2bdfbf1ddd9f6a866cdb317cf7642939f", "committedDate": "2020-03-13T18:19:02Z", "message": "Adress review feedback\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/54a09c1ba52619ee367e79390b570bd5450449a5", "committedDate": "2020-03-13T18:25:21Z", "message": "a few final cleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjU3ODgw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#pullrequestreview-374657880", "createdAt": "2020-03-13T22:49:18Z", "commit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0OToxOVrOF2VbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo0OToxOVrOF2VbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxODQ3OQ==", "bodyText": "We said that we need to wait for the in-progress task if any.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392518479", "createdAt": "2020-03-13T22:49:19Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    exporter.run();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a09c1ba52619ee367e79390b570bd5450449a5"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d5d9acf3800366630917f613b1e8b78930edad9b", "committedDate": "2020-03-14T02:40:28Z", "message": "Make the shutdown block until all the tasks are complete (or 5 seconds, whichever is shorter)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzMzODM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#pullrequestreview-374733837", "createdAt": "2020-03-14T15:25:12Z", "commit": {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyNToxMlrOF2aK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyNToxMlrOF2aK-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjIxOQ==", "bodyText": "If we cannot stop the previous export we should not start a new one :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#discussion_r392596219", "createdAt": "2020-03-14T15:25:12Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/IntervalMetricReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.export;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import jdk.nashorn.internal.ir.annotations.Immutable;\n+\n+/**\n+ * Wraps a list of {@link MetricProducer}s and automatically reads and exports the metrics every\n+ * export interval.\n+ *\n+ * @since 0.3.0\n+ */\n+public final class IntervalMetricReader {\n+  private final Exporter exporter;\n+  private final ScheduledExecutorService scheduler;\n+\n+  /**\n+   * Stops the scheduled task and calls export one more time.\n+   *\n+   * @since 0.3.0\n+   */\n+  public void shutdown() {\n+    scheduler.shutdown();\n+    try {\n+      scheduler.awaitTermination(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      // force a shutdown if the export hasn't finished.\n+      scheduler.shutdownNow();\n+      // reset the interrupted status\n+      Thread.currentThread().interrupt();\n+    } finally {\n+      exporter.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d9acf3800366630917f613b1e8b78930edad9b"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a11c745fff41623264ebb6ae4576a27181f91693", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a11c745fff41623264ebb6ae4576a27181f91693", "committedDate": "2020-03-14T16:27:34Z", "message": "only run the final export if we can shut down the executor properly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzM5MDc2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1011#pullrequestreview-374739076", "createdAt": "2020-03-14T16:48:42Z", "commit": {"oid": "a11c745fff41623264ebb6ae4576a27181f91693"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3208, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}