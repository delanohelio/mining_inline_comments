{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDI4NjY4", "number": 1459, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxNzozOVrOERtWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOTo1NlrOERtfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA0MzE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxNzozOVrOG2kPjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxNzozOVrOG2kPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n          \n          \n            \n              An identifier for the database management system (DBMS) product being used.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870092", "createdAt": "2020-07-24T06:17:39Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA0NzkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyMDoxMVrOG2kSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozMTo0MlrOG25rzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg==", "bodyText": "db.url was removed from the semantic conventions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870742", "createdAt": "2020-07-24T06:20:11Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2ODE0NQ==", "bodyText": "Good point, but this is required when making a connection.  Maybe it was missing from the database.md?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460168145", "createdAt": "2020-07-24T16:44:12Z", "author": {"login": "heyams"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTYwMw==", "bodyText": "I just realized i added db_connection_string, i can remove db_url.  Please confirm if that's what you meant.  @thisthat", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460181603", "createdAt": "2020-07-24T17:10:13Z", "author": {"login": "heyams"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMTM5MQ==", "bodyText": "Deleted.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460221391", "createdAt": "2020-07-24T18:31:42Z", "author": {"login": "heyams"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA1MTU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyMjowNlrOG2kUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyMjowNlrOG2kUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTI3Mw==", "bodyText": "I think this comment is out of date, the list of identifiers has e.g., mysql, postgresql now. How about linking to the list?\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md#notes-and-well-known-identifiers-for-dbsystem", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871273", "createdAt": "2020-07-24T06:22:06Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA1NTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNDoxNVrOG2kWUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNDoxNVrOG2kWUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance.\n          \n          \n            \n               */\n          \n          \n            \n               * For db.system == mssql, the instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance. When set, {@link #NET_PEER_PORT} is not required\n          \n          \n            \n               * but recommended when connecting to a non-standard port.\n          \n          \n            \n               */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871826", "createdAt": "2020-07-24T06:24:15Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA1NjE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNDo0NFrOG2kWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNDo0NFrOG2kWxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTk0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n          \n          \n            \n              public static final StringAttributeSetter MSSQL_INSTANCE_NAME =\n          \n      \n    \n    \n  \n\nIf this was a setter of all the attributes for MSSQL, this name would make sense but it's referring to a specific key.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871940", "createdAt": "2020-07-24T06:24:44Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA1NzQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNToyMlrOG2kXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNToyMlrOG2kXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n          \n          \n            \n               * For JDBC clients, the fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872127", "createdAt": "2020-07-24T06:25:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA1Nzc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNTozNVrOG2kXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNTozNVrOG2kXsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter JDBC_CLIENTS =\n          \n          \n            \n              public static final StringAttributeSetter JDBC_DRIVER_CLASSNAME =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872178", "createdAt": "2020-07-24T06:25:35Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2MDAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNjo0MlrOG2kY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNjo0MlrOG2kY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjQ4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.\n          \n          \n            \n               * For db.system == cassandra, the name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872482", "createdAt": "2020-07-24T06:26:42Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2MDM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNjo1NFrOG2kZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNjo1NFrOG2kZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjUyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter CASSANDRA =\n          \n          \n            \n              public static final StringAttributeSetter CASSANDRA_NAMESPACE =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872524", "createdAt": "2020-07-24T06:26:54Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2MTA1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNzoxOFrOG2kZdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNzoxOFrOG2kZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n          \n          \n            \n               * For db.system == hbase, the HBase namespace being accessed. To be used", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872631", "createdAt": "2020-07-24T06:27:18Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2MTM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNzoyN1rOG2kZoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyNzoyN1rOG2kZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter HBASE =\n          \n          \n            \n              public static final StringAttributeSetter HBASE_NAMESPACE =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872673", "createdAt": "2020-07-24T06:27:27Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2MzM1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyODozNFrOG2kayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyODozNFrOG2kayA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3Mjk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The index of the database being accessed as\n          \n          \n            \n               * For db.system == redis, the index of the database being accessed as", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872968", "createdAt": "2020-07-24T06:28:34Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2NDAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyODo1NFrOG2kbHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyODo1NFrOG2kbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter REDIS =\n          \n          \n            \n              public static final StringAttributeSetter REDIS_DATABASE_INDEX =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873054", "createdAt": "2020-07-24T06:28:54Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2NDk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOToyN1rOG2kbrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOToyN1rOG2kbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzE5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The collection being accessed within the\n          \n          \n            \n               * For db.system == monbodb, the collection being accessed within the", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873199", "createdAt": "2020-07-24T06:29:27Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA2NjA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOTo1NlrOG2kcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoyOTo1NlrOG2kcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MONGODB =\n          \n          \n            \n              public static final StringAttributeSetter MONGODB_COLLECTION =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873360", "createdAt": "2020-07-24T06:29:56Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the\n+   * database stated in db.name\n+   */\n+  public static final StringAttributeSetter MONGODB =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1540, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}