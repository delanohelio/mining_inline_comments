{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjcwNDQy", "number": 1863, "title": "Add OpenCensus shim", "bodyText": "The OpenTelemetry merger announcement promised straightforward backwards compatibility with OpenCensus.\nThis PR adds an OpenCensus shim, which allows applications and libraries that are instrumented with OpenTelemetry, but depend on other libraries instrumented with OpenCensus,to export trace spans from both OpenTelemetry and OpenCensus\nwith the correct parent-child relationship.\nThe shim maps all OpenCensus spans to OpenTelemetry spans, which are then exported by any configured OpenTelemetry exporter.\nFor OpenCensus spans to be exported with the correct parent-child relationship with OpenTelemetry spans, this shim needs to be added as a dependency. No code change is necessary, as the OpenCensus behaviour is overridden automatically via reflection.\ncc @nilebox @james-bebbington", "createdAt": "2020-10-22T12:56:05Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863", "merged": true, "mergeCommit": {"oid": "ea9888b8b91912d58c5454d60d3a2c1deb38c7c4"}, "closed": true, "closedAt": "2020-11-05T01:17:44Z", "author": {"login": "zoercai"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVBS_1AH2gAyNTA4MjcwNDQyOmU0NjY4ZWYwNDA1OTc5YzcyNGQxODg1ZjMzNzM0NDk0YzlkYjI1ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZHqMjAFqTUyMzA2NDU2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4668ef0405979c724d1885f33734494c9db2581", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e4668ef0405979c724d1885f33734494c9db2581", "committedDate": "2020-10-22T12:40:18Z", "message": "Add OpenCensus shim"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/48698c19e373d62c2b7949875157e44b015aa414", "committedDate": "2020-10-22T12:55:40Z", "message": "Fix dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0OTc5OTYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-514979960", "createdAt": "2020-10-22T17:52:35Z", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1MjozNVrOHmtVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1MjozNVrOHmtVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MDY4Ng==", "bodyText": "What about using TimeUnit.SECONDS.toNanos() here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510350686", "createdAt": "2020-10-22T17:52:35Z", "author": {"login": "jkwatson"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.AttributeKey;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  static final long NANOS_PER_SECOND = (long) 1e9;\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                spanData.getStartTimestamp().getSeconds() * NANOS_PER_SECOND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0OTk1NDE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-514995419", "createdAt": "2020-10-22T18:12:35Z", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoxMjozNVrOHmuCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoxMjozNVrOHmuCbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MjIyMA==", "bodyText": "I'm somewhat nervous about holding on to a Scope reference like this. Can we guarantee that attach and detach are always called on the same thread, and no other detach calls will be made on that thread in between the attach/detach pairs? I don't know enough (or anything) about Census to answer this question, but it makes me nervous.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510362220", "createdAt": "2020-10-22T18:12:35Z", "author": {"login": "jkwatson"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTc3ODEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-515177811", "createdAt": "2020-10-22T23:04:26Z", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNDoyNlrOHm2y8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNDoyNlrOHm2y8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTcxNA==", "bodyText": "From https://grpc.github.io/grpc-java/javadoc/io/grpc/Context.html#attach--\n\nThe previously current context is returned.\n\nWe may need to create a \"child\" context here somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510505714", "createdAt": "2020-10-22T23:04:26Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTc4OTU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-515178958", "createdAt": "2020-10-22T23:07:49Z", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNzo0OVrOHm22ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowNzo0OVrOHm22ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjY4Mg==", "bodyText": "Note that we are closing the scope of a context passed as an argument here, not the scope of this.scope.\nWhich seems to imply that we should implement a \"nesting\" mechanism (using a Stack data structure probably), e.g.\ncreate context\n-- attach - creates root scope 1\n   -- attach - creates child scope 2\n       -- attach creates a sub-child scope 3\n       -- detach closes scope 3 and restores scope 2 as current\n   -- detach closes scope 2 and restores scope 1 as current\n-- detach closes scope 1 and there is no current scope anymore", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r510506682", "createdAt": "2020-10-22T23:07:49Z", "author": {"login": "nilebox"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;\n+  }\n+\n+  @Override\n+  public void detach(ContextHandle ctx) {\n+    OpenTelemetryCtx impl = (OpenTelemetryCtx) ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTU2NDg5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-516156489", "createdAt": "2020-10-24T03:52:36Z", "commit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1MjozNlrOHnnR9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo1Nzo0MVrOHnnYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMDA4NQ==", "bodyText": "Instead of using opencensus TracerImpl, can you use a shim implementation that delegates to a opentelemetry tracer? This will remove the need for the SpanCache which looks like it can affect performance a lot, the custom OC Tracer would return OC Spans that just wrap the OTel spans. FWIU, the opentracing shim takes such an approach so might be a good reference.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511300085", "createdAt": "2020-10-24T03:52:36Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTMxNw==", "bodyText": "Have you considered the opposite approach, having OTel context use the OpenCensus context? Scope is more flexible than returning previousCtx, so the bridge can be a bit cleaner than the other way around. I suspect this code could be adapted to opencensus context trivially.\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context/src/otelAsGrpcTest/java/io/opentelemetry/context/GrpcContextStorageProvider.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511301317", "createdAt": "2020-10-24T03:56:19Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMwMTc4MA==", "bodyText": "Null check for impl.scope - if the user did incorrectly use scope and introduce a threading problem, it could be null here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r511301780", "createdAt": "2020-10-24T03:57:41Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;\n+\n+  public OpenTelemetryCtx(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @Override\n+  public ContextHandle attach() {\n+    scope = context.makeCurrent();\n+    return this;\n+  }\n+\n+  @Override\n+  public void detach(ContextHandle ctx) {\n+    OpenTelemetryCtx impl = (OpenTelemetryCtx) ctx;\n+    impl.scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48698c19e373d62c2b7949875157e44b015aa414"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39649c7893ac47e426d50ae1e5c95725d827264b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/39649c7893ac47e426d50ae1e5c95725d827264b", "committedDate": "2020-10-26T22:21:41Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2fd4f24a71e808f901f442ad377e03455176a7", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a2fd4f24a71e808f901f442ad377e03455176a7", "committedDate": "2020-10-27T03:04:00Z", "message": "Add interoperability test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a27ff3295f687b2540dbc1379f98d0e07036b4", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5a27ff3295f687b2540dbc1379f98d0e07036b4", "committedDate": "2020-10-27T03:08:04Z", "message": "Add interoperability test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzI0MjUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-517324250", "createdAt": "2020-10-27T03:32:37Z", "commit": {"oid": "e5a27ff3295f687b2540dbc1379f98d0e07036b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozMjozN1rOHoqMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozMjozN1rOHoqMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjI5Ng==", "bodyText": "Do you mind writing a similar test as this one?\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/context/src/otelAsGrpcTest/java/io/opentelemetry/context/OtelAsGrpcTest.java\nWant to make sure both sides of the propagation are working.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r512396296", "createdAt": "2020-10-27T03:32:37Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opencensus.trace.Tracing;\n+import io.opencensus.trace.samplers.Samplers;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collection;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+\n+public class InteroperabilityTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a27ff3295f687b2540dbc1379f98d0e07036b4"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22fa46a1182eccead6a7471a8f25f8d0a88eb37b", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22fa46a1182eccead6a7471a8f25f8d0a88eb37b", "committedDate": "2020-10-27T07:39:21Z", "message": "Add interoperability test: all opencensus spans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d00fa47fcad9a1f11b69c47d2767f2c70c6fd1", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7d00fa47fcad9a1f11b69c47d2767f2c70c6fd1", "committedDate": "2020-10-28T06:34:26Z", "message": "Fix license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cce0645f38d7e46b5baedd9c62e44b855a12524", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6cce0645f38d7e46b5baedd9c62e44b855a12524", "committedDate": "2020-10-28T07:09:46Z", "message": "fix build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10b5697aa36b24afce0b34334177fbc7112f1b47", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/10b5697aa36b24afce0b34334177fbc7112f1b47", "committedDate": "2020-10-28T07:10:42Z", "message": "fix build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10d6270ac0b528c61b0bcb21d906d1608000e2a", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c10d6270ac0b528c61b0bcb21d906d1608000e2a", "committedDate": "2020-10-28T07:12:57Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "999e580d3af5e102891dafe740af699a2f266e67", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/999e580d3af5e102891dafe740af699a2f266e67", "committedDate": "2020-10-28T08:57:48Z", "message": "Pull upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c4c8bc25b4a35e7d6224aecbcfeb175779ef318d", "committedDate": "2020-10-29T01:25:06Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzM2OTA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-519336905", "createdAt": "2020-10-29T05:11:32Z", "commit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "state": "COMMENTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNToxMTozMlrOHqKocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjoxMDoyMFrOHqMbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjQzNQ==", "bodyText": "context.with(span)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976435", "createdAt": "2020-10-29T05:11:32Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -23,7 +23,7 @@\n    * @param context the parent {@code Context}.\n    * @return a new context with the given value set.\n    */\n-  static Context withSpan(Span span, Context context) {\n+  public static Context withSpan(Span span, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjUzMg==", "bodyText": "These APIs were replaced so go ahead and revert the changes in this file", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976532", "createdAt": "2020-10-29T05:11:43Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -23,7 +23,7 @@\n    * @param context the parent {@code Context}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjU5Mw==", "bodyText": "Span.current()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976593", "createdAt": "2020-10-29T05:11:49Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -33,7 +33,7 @@ static Context withSpan(Span span, Context context) {\n    *\n    * @return the {@link Span} from the current {@code Context}.\n    */\n-  static Span getCurrentSpan() {\n+  public static Span getCurrentSpan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjY2OA==", "bodyText": "Span.fromContext(context)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976668", "createdAt": "2020-10-29T05:11:57Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -44,7 +44,7 @@ static Span getCurrentSpan() {\n    * @param context the specified {@code Context}.\n    * @return the {@link Span} from the specified {@code Context}.\n    */\n-  static Span getSpan(Context context) {\n+  public static Span getSpan(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3NjczMw==", "bodyText": "Span.fromContextOrNull(context)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513976733", "createdAt": "2020-10-29T05:12:07Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/api/trace/TracingContextUtils.java", "diffHunk": "@@ -57,7 +57,7 @@ static Span getSpan(Context context) {\n    * @return the {@link Span} from the specified {@code Context}.\n    */\n   @Nullable\n-  static Span getSpanWithoutDefault(Context context) {\n+  public static Span getSpanWithoutDefault(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3Nzc5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Scope scope;\n          \n          \n            \n              @Nullable\n          \n          \n            \n              private Scope scope;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513977793", "createdAt": "2020-10-29T05:14:22Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {\n+\n+  private final Context context;\n+  private Scope scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3ODkyMA==", "bodyText": "Is there a corner case where a user implemented their own ContextHandle and used it? It's extremely unexpected but it wouldn't hurt either to add an instanceof with a log telling them not to do that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513978920", "createdAt": "2020-10-29T05:16:46Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.api.trace.TracingContextUtils;\n+import io.opentelemetry.context.Context;\n+\n+public class OpenTelemetryContextManager implements ContextManager {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryContextManager() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public ContextHandle currentContext() {\n+    return wrapContext(Context.current());\n+  }\n+\n+  @Override\n+  public ContextHandle withValue(ContextHandle ctx, Span span) {\n+    OpenTelemetryCtx openTelemetryCtx = (OpenTelemetryCtx) ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3OTgyNg==", "bodyText": "Would name it addToCache", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513979826", "createdAt": "2020-10-29T05:18:48Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk3OTkxMA==", "bodyText": "Would have removeFromCache return Span instead of two calls to the cache, guessing removing from cache doesn't affect the call to toSpanData", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513979910", "createdAt": "2020-10-29T05:19:03Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);\n+  }\n+\n+  @Override\n+  public void onEnd(RecordEventsSpanImpl ocSpan) {\n+    Span span = spanCache.toOtelSpan(ocSpan);\n+    SpanData spanData = ocSpan.toSpanData();\n+    spanCache.removeFromCache(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MDQ2Ng==", "bodyText": "Good to name the variable otelSpan", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513980466", "createdAt": "2020-10-29T05:20:12Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {\n+\n+  private final SpanCache spanCache;\n+\n+  public OpenTelemetryStartEndHandler() {\n+    this.spanCache = SpanCache.getInstance();\n+  }\n+\n+  @Override\n+  public void onStart(RecordEventsSpanImpl ocSpan) {\n+    spanCache.toOtelSpan(ocSpan);\n+  }\n+\n+  @Override\n+  public void onEnd(RecordEventsSpanImpl ocSpan) {\n+    Span span = spanCache.toOtelSpan(ocSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MTQ5Ng==", "bodyText": "Don't think I see anything specific to Java 8 here, can you describe more what this is referring to? I see it's setting the StartEndHandler which seems to be key, maybe we can just mention that instead of Java 8?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513981496", "createdAt": "2020-10-29T05:22:21Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MjgxOA==", "bodyText": "Can you add some javadoc, especially describing the naming scheme resulting in it being used with a link to where this is recognized in opencensus?\nhttps://github.com/census-instrumentation/opencensus-java/blob/f8ea9bb4107eddb34324d9baf74737da470f4294/api/src/main/java/io/opencensus/trace/unsafe/ContextHandleUtils.java#L40", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513982818", "createdAt": "2020-10-29T05:25:02Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryContextManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opencensus.trace.ContextManager;\n+import io.opencensus.trace.Span;\n+import io.opentelemetry.api.trace.TracingContextUtils;\n+import io.opentelemetry.context.Context;\n+\n+public class OpenTelemetryContextManager implements ContextManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzIzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryCtx implements ContextHandle {\n          \n          \n            \n            class OpenTelemetryCtx implements ContextHandle {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983233", "createdAt": "2020-10-29T05:25:57Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryCtx.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.trace.ContextHandle;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+\n+public class OpenTelemetryCtx implements ContextHandle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzQwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OpenTelemetryStartEndHandler implements StartEndHandler {\n          \n          \n            \n            class OpenTelemetryStartEndHandler implements StartEndHandler {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983401", "createdAt": "2020-10-29T05:26:22Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryStartEndHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.trace.export.SpanData;\n+import io.opentelemetry.api.trace.Span;\n+\n+public class OpenTelemetryStartEndHandler implements StartEndHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MzY5Nw==", "bodyText": "Also let's add the reference to the loading mechanism https://github.com/census-instrumentation/opencensus-java/blob/f8ea9bb4107eddb34324d9baf74737da470f4294/api/src/main/java/io/opencensus/trace/Tracing.java#L97", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983697", "createdAt": "2020-10-29T05:26:55Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4MTQ5Ng=="}, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4Mzc1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpanCache {\n          \n          \n            \n            class SpanCache {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513983758", "createdAt": "2020-10-29T05:27:04Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NDMxMg==", "bodyText": "MINUTES can just be inlined, it's already a constant no need to alias it", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513984312", "createdAt": "2020-10-29T05:28:15Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {\n+\n+  private static final SpanCache SPAN_CACHE = new SpanCache();\n+\n+  private static final int MAXIMUM_CACHE_SIZE = 10000;\n+  private static final int CACHE_EXPIRE_TIME_MINUTES = 10;\n+  private static final TimeUnit CACHE_EXPIRE_UNIT = TimeUnit.MINUTES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk4NTMxMQ==", "bodyText": "Any thoughts on system properties? Or maybe just go with 100000 - I think more than 10K concurrent requests is, while not common, fairly reasonable too. More than 100K is getting to pretty awesome scale though and much more rare.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513985311", "createdAt": "2020-10-29T05:29:59Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanCache.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Span;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanCache {\n+\n+  private static final SpanCache SPAN_CACHE = new SpanCache();\n+\n+  private static final int MAXIMUM_CACHE_SIZE = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjU5MA==", "bodyText": "I'm back here :) Looked through the abstract classes, and I noticed a pattern similar to what we do in the java agent could work well here (not delegating OC Span calls to OTel span).\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/trace/ApplicationSpan.java\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/trace/ApplicationTracer.java\nDelegating to the OC implementations but wrapping the returned OC span with OCSpanWrapper which delegates to the created OC span and also stores a correspond OTel span. OpenTelemetryContextManager.withValue stores both OTel span as currently and a reference to the OCSpanWrapper. OpenTelemetryContextManager.getValue just returns the OCSpanWrapper.\nCould have the startEndHandler just listen on end events to finish things up, or maybe even remove it and override Span.end which looks safe.\nThis looks like it could get rid of the cache so users migrating don't have to worry about its limits. What do you think?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513996590", "createdAt": "2020-10-29T05:52:29Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/OpenTelemetryTraceComponentImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Clock;\n+import io.opencensus.implcore.common.MillisClock;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl.StartEndHandler;\n+import io.opencensus.implcore.trace.TracerImpl;\n+import io.opencensus.implcore.trace.config.TraceConfigImpl;\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import io.opencensus.implcore.trace.propagation.PropagationComponentImpl;\n+import io.opencensus.trace.TraceComponent;\n+import io.opencensus.trace.Tracer;\n+import io.opencensus.trace.config.TraceConfig;\n+import io.opencensus.trace.export.ExportComponent;\n+import io.opencensus.trace.propagation.PropagationComponent;\n+\n+/** Java 8 implementation of the {@link TraceComponent} for OpenTelemetry migration. */\n+public final class OpenTelemetryTraceComponentImpl extends TraceComponent {\n+  private final PropagationComponent propagationComponent = new PropagationComponentImpl();\n+  private final ExportComponent noopExportComponent = ExportComponent.newNoopExportComponent();\n+  private final Clock clock;\n+  private final TraceConfig traceConfig = new TraceConfigImpl();\n+  private final Tracer tracer;\n+\n+  /** Public constructor to be used with reflection loading. */\n+  public OpenTelemetryTraceComponentImpl() {\n+    clock = MillisClock.getInstance();\n+    RandomHandler randomHandler = new ThreadLocalRandomHandler();\n+    StartEndHandler startEndHandler = new OpenTelemetryStartEndHandler();\n+    tracer = new TracerImpl(randomHandler, startEndHandler, clock, traceConfig);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NjcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpanConverter {\n          \n          \n            \n            class SpanConverter {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513996711", "createdAt": "2020-10-29T05:52:45Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NzI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static class FakeSpan extends Span {\n          \n          \n            \n              static class FakeSpan extends Span {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513997269", "createdAt": "2020-10-29T05:53:51Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5Nzk3NA==", "bodyText": "Don't believe span can be null. But if it can or to be extra defensive, we should return Span.invalid(), null span is almost never used in code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513997974", "createdAt": "2020-10-29T05:55:01Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5ODg5MQ==", "bodyText": "SpanData methods won't return null", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513998891", "createdAt": "2020-10-29T05:56:53Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5OTE3MA==", "bodyText": "I know this won't ever happen since opencensus is deprecated, but it'd still be nice to return a real value like INTERNAL here, or at least add a comment like my first sentence here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r513999170", "createdAt": "2020-10-29T05:57:28Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {\n+      builder.setSpanKind(mapKind(spanData.getKind()));\n+    }\n+    if (spanData.getAttributes() != null) {\n+      for (Map.Entry<String, AttributeValue> attribute :\n+          spanData.getAttributes().getAttributeMap().entrySet()) {\n+        attribute\n+            .getValue()\n+            .match(\n+                setStringAttribute(builder, attribute),\n+                setBooleanAttribute(builder, attribute),\n+                setLongAttribute(builder, attribute),\n+                setDoubleAttribute(builder, attribute),\n+                arg -> null);\n+      }\n+    }\n+    if (spanData.getLinks() != null) {\n+      for (Link link : spanData.getLinks().getLinks()) {\n+        Attributes.Builder attributesBuilder = Attributes.builder();\n+        link.getAttributes()\n+            .forEach(\n+                (s, attributeValue) ->\n+                    attributeValue.match(\n+                        setStringAttribute(attributesBuilder, s),\n+                        setBooleanAttribute(attributesBuilder, s),\n+                        setLongAttribute(attributesBuilder, s),\n+                        setDoubleAttribute(attributesBuilder, s),\n+                        arg -> null));\n+        builder.addLink(\n+            io.opentelemetry.api.trace.SpanContext.create(\n+                TraceId.bytesToHex(link.getTraceId().getBytes()),\n+                SpanId.bytesToHex(link.getSpanId().getBytes()),\n+                TraceFlags.getDefault(),\n+                TraceState.getDefault()),\n+            attributesBuilder.build());\n+      }\n+    }\n+    return builder.startSpan();\n+  }\n+\n+  private static Kind mapKind(Span.Kind kind) {\n+    switch (kind) {\n+      case CLIENT:\n+        return Kind.CLIENT;\n+      case SERVER:\n+        return Kind.SERVER;\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMjg1NA==", "bodyText": "Let's document what this fake span does, it's job seems to be to record events and only that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514002854", "createdAt": "2020-10-29T06:04:39Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMzQyNA==", "bodyText": "Store the attribute keys as private static final", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514003424", "createdAt": "2020-10-29T06:05:51Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SpanConverter {\n+\n+  public static class FakeSpan extends Span {\n+\n+    private static final EnumSet<Options> RECORD_EVENTS_SPAN_OPTIONS =\n+        EnumSet.of(Options.RECORD_EVENTS);\n+\n+    protected FakeSpan(SpanContext context) {\n+      super(context, RECORD_EVENTS_SPAN_OPTIONS);\n+    }\n+\n+    @Override\n+    public void addAnnotation(String description, Map<String, AttributeValue> attributes) {}\n+\n+    @Override\n+    public void addAnnotation(Annotation annotation) {}\n+\n+    @Override\n+    public void addLink(Link link) {}\n+\n+    @Override\n+    public void end(EndSpanOptions options) {}\n+  }\n+\n+  private static final Tracer TRACER =\n+      OpenTelemetry.getGlobalTracer(\"io.opencensus.opentelemetry.migration\");\n+\n+  private SpanConverter() {}\n+\n+  static io.opentelemetry.api.trace.Span toOtelSpan(Span span) {\n+    if (span == null) {\n+      return null;\n+    }\n+    SpanData spanData = ((RecordEventsSpanImpl) span).toSpanData();\n+    io.opentelemetry.api.trace.Span.Builder builder =\n+        TRACER\n+            .spanBuilder(spanData.getName())\n+            .setStartTimestamp(\n+                TimeUnit.SECONDS.toNanos(spanData.getStartTimestamp().getSeconds())\n+                    + spanData.getStartTimestamp().getNanos());\n+    if (spanData.getKind() != null) {\n+      builder.setSpanKind(mapKind(spanData.getKind()));\n+    }\n+    if (spanData.getAttributes() != null) {\n+      for (Map.Entry<String, AttributeValue> attribute :\n+          spanData.getAttributes().getAttributeMap().entrySet()) {\n+        attribute\n+            .getValue()\n+            .match(\n+                setStringAttribute(builder, attribute),\n+                setBooleanAttribute(builder, attribute),\n+                setLongAttribute(builder, attribute),\n+                setDoubleAttribute(builder, attribute),\n+                arg -> null);\n+      }\n+    }\n+    if (spanData.getLinks() != null) {\n+      for (Link link : spanData.getLinks().getLinks()) {\n+        Attributes.Builder attributesBuilder = Attributes.builder();\n+        link.getAttributes()\n+            .forEach(\n+                (s, attributeValue) ->\n+                    attributeValue.match(\n+                        setStringAttribute(attributesBuilder, s),\n+                        setBooleanAttribute(attributesBuilder, s),\n+                        setLongAttribute(attributesBuilder, s),\n+                        setDoubleAttribute(attributesBuilder, s),\n+                        arg -> null));\n+        builder.addLink(\n+            io.opentelemetry.api.trace.SpanContext.create(\n+                TraceId.bytesToHex(link.getTraceId().getBytes()),\n+                SpanId.bytesToHex(link.getSpanId().getBytes()),\n+                TraceFlags.getDefault(),\n+                TraceState.getDefault()),\n+            attributesBuilder.build());\n+      }\n+    }\n+    return builder.startSpan();\n+  }\n+\n+  private static Kind mapKind(Span.Kind kind) {\n+    switch (kind) {\n+      case CLIENT:\n+        return Kind.CLIENT;\n+      case SERVER:\n+        return Kind.SERVER;\n+    }\n+    return null;\n+  }\n+\n+  static Span fromOtelSpan(io.opentelemetry.api.trace.Span otSpan) {\n+    if (otSpan == null) {\n+      return null;\n+    }\n+    SpanContext spanContext =\n+        SpanContext.create(\n+            io.opencensus.trace.TraceId.fromLowerBase16(\n+                otSpan.getSpanContext().getTraceIdAsHexString()),\n+            io.opencensus.trace.SpanId.fromLowerBase16(\n+                otSpan.getSpanContext().getSpanIdAsHexString()),\n+            TraceOptions.builder().setIsSampled(otSpan.getSpanContext().isSampled()).build(),\n+            mapTracestate(otSpan.getSpanContext().getTraceState()));\n+    return new FakeSpan(spanContext);\n+  }\n+\n+  private static Tracestate mapTracestate(TraceState traceState) {\n+    Tracestate.Builder tracestateBuilder = Tracestate.builder();\n+    traceState\n+        .getEntries()\n+        .forEach(entry -> tracestateBuilder.set(entry.getKey(), entry.getValue()));\n+    return tracestateBuilder.build();\n+  }\n+\n+  static void mapAndAddTimedEvents(\n+      io.opentelemetry.api.trace.Span span, List<TimedEvent<MessageEvent>> events) {\n+    for (TimedEvent<MessageEvent> event : events) {\n+      span.addEvent(\n+          String.valueOf(event.getEvent().getMessageId()),\n+          Attributes.of(\n+              AttributeKey.stringKey(\"message.event.type\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNDU2Mg==", "bodyText": "Let's add a comment that the OpenCensus one is in the implementation which we don't want to use here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514004562", "createdAt": "2020-10-29T06:07:50Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/main/java/io/opentelemetry/opencensusshim/ThreadLocalRandomHandler.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.implcore.trace.internal.RandomHandler;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** Implementation of the {@link RandomHandler} using {@link ThreadLocalRandom}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNDk5Ng==", "bodyText": "Since this is a new test can you use junit5 / mockitoextension? e.g. \n  \n    \n      opentelemetry-java/extensions/trace_utils/src/test/java/io/opentelemetry/extensions/trace/CurrentSpanUtilsTest.java\n    \n    \n         Line 20\n      in\n      7ebbe79\n    \n    \n    \n    \n\n        \n          \n           @ExtendWith(MockitoExtension.class)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514004996", "createdAt": "2020-10-29T06:08:38Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/InteroperabilityTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opencensus.trace.Tracing;\n+import io.opencensus.trace.samplers.Samplers;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.util.Collection;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+\n+public class InteroperabilityTest {\n+\n+  private static final String NULL_SPAN_ID = \"0000000000000000\";\n+\n+  @Captor private ArgumentCaptor<Collection<SpanData>> spanDataCaptor;\n+\n+  @Spy private SpanExporter spanExporter;\n+\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwNTkzMg==", "bodyText": "Prefer assertj assertions", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r514005932", "createdAt": "2020-10-29T06:10:20Z", "author": {"login": "anuraaga"}, "path": "opencensus_shim/src/test/java/io/opentelemetry/opencensusshim/SpanConverterTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import static io.opencensus.trace.Link.Type.PARENT_LINKED_SPAN;\n+import static io.opencensus.trace.Span.Kind.CLIENT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opencensus.implcore.internal.TimestampConverter;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.internal.ZeroTimeClock;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.SpanId;\n+import io.opencensus.trace.TraceId;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.config.TraceParams;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+class SpanConverterTest {\n+  private static final IdsGenerator RANDOM_IDS_GENERATOR = IdsGenerator.random();\n+\n+  @Test\n+  void testToOtelSpan() {\n+    RecordEventsSpanImpl span = createOpenCensusSpan();\n+\n+    Span otelSpan = SpanConverter.toOtelSpan(span);\n+\n+    assertEquals(0x1, otelSpan.getSpanContext().getTraceFlags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c8bc25b4a35e7d6224aecbcfeb175779ef318d"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0fdee0b4d7ca883aa0d0381cfd6c434a9a3fb9d", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f0fdee0b4d7ca883aa0d0381cfd6c434a9a3fb9d", "committedDate": "2020-10-30T01:05:15Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f08ae2ec12ef533ea3d43ae74fc32787fac226", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99f08ae2ec12ef533ea3d43ae74fc32787fac226", "committedDate": "2020-11-02T12:22:25Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e198ae5957e0e745087da71a4cdba1e87b8423", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1e198ae5957e0e745087da71a4cdba1e87b8423", "committedDate": "2020-11-02T12:22:56Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef130f38f9684883d295070c837da12854378930", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ef130f38f9684883d295070c837da12854378930", "committedDate": "2020-11-02T12:31:52Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b2fb17f8e44fad97c16035645076a8134fa8635", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b2fb17f8e44fad97c16035645076a8134fa8635", "committedDate": "2020-11-04T04:22:40Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2", "author": {"user": {"login": "zoercai", "name": "Zoe"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e64a65f97d296e37c9a0e684aeb8e35d3d8814b2", "committedDate": "2020-11-04T05:46:46Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into opencensus-migration\n\n# Conflicts:\n#\tall/build.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDY0NTY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#pullrequestreview-523064569", "createdAt": "2020-11-04T06:07:21Z", "commit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjowNzoyMVrOHtKMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjowNzoyMVrOHtKMiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzExNTAxNw==", "bodyText": "Doesn't it record events because we pass the RECORD_EVENTS option?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1863#discussion_r517115017", "createdAt": "2020-11-04T06:07:21Z", "author": {"login": "anuraaga"}, "path": "opencensus-shim/src/main/java/io/opentelemetry/opencensusshim/SpanConverter.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.opencensusshim;\n+\n+import io.opencensus.common.Function;\n+import io.opencensus.implcore.trace.RecordEventsSpanImpl;\n+import io.opencensus.trace.Annotation;\n+import io.opencensus.trace.AttributeValue;\n+import io.opencensus.trace.EndSpanOptions;\n+import io.opencensus.trace.Link;\n+import io.opencensus.trace.MessageEvent;\n+import io.opencensus.trace.Span;\n+import io.opencensus.trace.SpanContext;\n+import io.opencensus.trace.TraceOptions;\n+import io.opencensus.trace.Tracestate;\n+import io.opencensus.trace.export.SpanData;\n+import io.opencensus.trace.export.SpanData.TimedEvent;\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.api.trace.Tracer;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class SpanConverter {\n+\n+  /**\n+   * FakeSpan is used to represent OpenTelemetry spans in the OpenCensus context. Only the trace ID,\n+   * span ID, trace options, and trace state are mapped, so that the correct context information can\n+   * be picked up by the child spans. FakeSpan does not record events or links.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64a65f97d296e37c9a0e684aeb8e35d3d8814b2"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4124, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}