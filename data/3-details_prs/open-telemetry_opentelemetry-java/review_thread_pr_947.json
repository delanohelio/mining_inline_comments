{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTQzNDY2", "number": 947, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo0MDo0OVrODjqQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyNDoxMFrODj7OKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzE5MTAxOnYy", "diffSide": "RIGHT", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMDo0MDo0OVrOFvmEhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1OTo1M1rOFv8AxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MTE0MA==", "bodyText": "@jkwatson I need your brain to help me name this class :) Idea is that probably I will have an equivalent for Metrics as well, also every exporter should offer this helper to configure the span exporter class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/947#discussion_r385451140", "createdAt": "2020-02-28T00:40:49Z", "author": {"login": "bogdandrutu"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -43,71 +45,59 @@\n  *\n  * @since 0.1.0\n  */\n-public final class InMemoryTracing {\n-  private final TracerSdkProvider tracerSdkProvider;\n-  private final InMemorySpanExporter exporter;\n-\n+@AutoValue\n+@Immutable\n+public abstract class InMemoryTracing {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c680dea09734c6e3b5a6da2eeb74c4b16049b334"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2ODM5Mg==", "bodyText": "Personally I think the name is fine, but if you manage to find a better name, I'm in ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/947#discussion_r385768392", "createdAt": "2020-02-28T15:44:04Z", "author": {"login": "carlosalberto"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -43,71 +45,59 @@\n  *\n  * @since 0.1.0\n  */\n-public final class InMemoryTracing {\n-  private final TracerSdkProvider tracerSdkProvider;\n-  private final InMemorySpanExporter exporter;\n-\n+@AutoValue\n+@Immutable\n+public abstract class InMemoryTracing {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MTE0MA=="}, "originalCommit": {"oid": "c680dea09734c6e3b5a6da2eeb74c4b16049b334"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDYyOQ==", "bodyText": "I think this name works fine.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/947#discussion_r385810629", "createdAt": "2020-02-28T16:59:53Z", "author": {"login": "jkwatson"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -43,71 +45,59 @@\n  *\n  * @since 0.1.0\n  */\n-public final class InMemoryTracing {\n-  private final TracerSdkProvider tracerSdkProvider;\n-  private final InMemorySpanExporter exporter;\n-\n+@AutoValue\n+@Immutable\n+public abstract class InMemoryTracing {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MTE0MA=="}, "originalCommit": {"oid": "c680dea09734c6e3b5a6da2eeb74c4b16049b334"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTk3MDM0OnYy", "diffSide": "RIGHT", "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyNDoxMFrOFwAKLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDo0NDozN1rOFwCTEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3ODU3Mg==", "bodyText": "Autovalue seems like a little bit of overkill for this, since we don't really care about equals/hashcode/tostring, but I'm not opposed to it if people like standardizing on it for simple immutable classes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/947#discussion_r385878572", "createdAt": "2020-02-28T19:24:10Z", "author": {"login": "jkwatson"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -43,71 +45,59 @@\n  *\n  * @since 0.1.0\n  */\n-public final class InMemoryTracing {\n-  private final TracerSdkProvider tracerSdkProvider;\n-  private final InMemorySpanExporter exporter;\n-\n+@AutoValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c680dea09734c6e3b5a6da2eeb74c4b16049b334"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMzYxNw==", "bodyText": "I don't like writing all getters/setters variables, etc. Lazy :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/947#discussion_r385913617", "createdAt": "2020-02-28T20:44:37Z", "author": {"login": "bogdandrutu"}, "path": "exporters/inmemory/src/main/java/io/opentelemetry/exporters/inmemory/InMemoryTracing.java", "diffHunk": "@@ -43,71 +45,59 @@\n  *\n  * @since 0.1.0\n  */\n-public final class InMemoryTracing {\n-  private final TracerSdkProvider tracerSdkProvider;\n-  private final InMemorySpanExporter exporter;\n-\n+@AutoValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3ODU3Mg=="}, "originalCommit": {"oid": "c680dea09734c6e3b5a6da2eeb74c4b16049b334"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 938, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}