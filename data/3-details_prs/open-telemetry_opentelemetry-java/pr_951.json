{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjM2NjA4", "number": 951, "title": "A very simple logging metric exporter", "bodyText": "", "createdAt": "2020-02-28T23:01:56Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951", "merged": true, "mergeCommit": {"oid": "cd4d4ca1f493bbcb76f07f98e99cc4c2852bd868"}, "closed": true, "closedAt": "2020-03-01T19:27:59Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI4II5gH2gAyMzgxNjM2NjA4OmQxNzNlNjlkMGMyMmVhZjMxMzNiZGRhNzcyN2NhZDRjZGU5Y2M5MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJIT85AFqTM2NjgxMDYxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "committedDate": "2020-02-28T23:01:03Z", "message": "A very simple logging exporter for metrics."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzM5ODY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#pullrequestreview-366739864", "createdAt": "2020-02-28T23:19:23Z", "commit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxOToyM1rOFwFeKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxOToyM1rOFwFeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ==", "bodyText": "I think we should plugin this with the interval reader so that it prints periodically to the logs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385965609", "createdAt": "2020-02-28T23:19:23Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzU0NDk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#pullrequestreview-366754494", "createdAt": "2020-02-29T00:19:33Z", "commit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzU0NTgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#pullrequestreview-366754582", "createdAt": "2020-02-29T00:20:00Z", "commit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoyMDowMFrOFwGQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoyMDowMFrOFwGQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODU5Nw==", "bodyText": "Please add the comment for the test class :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385978597", "createdAt": "2020-02-29T00:20:00Z", "author": {"login": "bogdandrutu"}, "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.metrics.data.MetricData.SummaryPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.ValueAtPercentile;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.AttributeValue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class LoggingMetricExporterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1729fcd21973ebf1370d7809f281a84b1aae231b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1729fcd21973ebf1370d7809f281a84b1aae231b", "committedDate": "2020-02-29T02:55:36Z", "message": "add comments about what we're testing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2338f709807cc367163b5bf6a0b97c758fd8f522", "committedDate": "2020-02-29T02:59:25Z", "message": "follow the rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODEwNjE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#pullrequestreview-366810618", "createdAt": "2020-02-29T17:52:25Z", "commit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNzo1MjoyNVrOFwKQxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNzo1MjoyNVrOFwKQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw==", "bodyText": "not sure if we follow the standard of uppercase for static final?\nchange to LOGGER?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386044103", "createdAt": "2020-02-29T17:52:25Z", "author": {"login": "sfriberg"}, "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3131, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}