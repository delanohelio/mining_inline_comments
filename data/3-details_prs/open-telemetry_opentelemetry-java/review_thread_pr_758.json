{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTQ3MjM0", "number": 758, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo0MTo1NFrODYUjtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NzozNlrODsXMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI5MjM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo0MTo1NFrOFeHWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowMzoxOFrOFpvpGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjAzNA==", "bodyText": "Do we commit on these values to be 18-24 months backwards compatible? Maybe we should have a contrib package for this.\n@tedsuo @yurishkuro what is your experience with this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r367122034", "createdAt": "2020-01-15T21:41:54Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE0Nw==", "bodyText": "Ping @tedsuo and @yurishkuro", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r378455147", "createdAt": "2020-02-12T19:10:11Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjAzNA=="}, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNjUwNw==", "bodyText": "I think we should start treating semantic conventions more like an API definition (a contract between instrumentation writers and the back-end), so I'd love if we could guarantee at least 18-24 months compatibility.\nStill, like typed spans (#778), a contrib package seems fine (I'd rather have typed spans in the API than the string constants).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r379316507", "createdAt": "2020-02-14T09:03:18Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjAzNA=="}, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDA1MTcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNjo0NVrOFe-WuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjo0MDo0NVrOFtL5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzIyNA==", "bodyText": "Since these all apply to attributes, could we rename the class to SemanticAttributes?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r368023224", "createdAt": "2020-01-17T16:26:45Z", "author": {"login": "tylerbenson"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTA0Ng==", "bodyText": "I think it is a good suggestion.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r378455046", "createdAt": "2020-02-12T19:10:01Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzIyNA=="}, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTYzNA==", "bodyText": "I like SemanticAttributes more as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r378469634", "createdAt": "2020-02-12T19:37:28Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzIyNA=="}, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTEwOA==", "bodyText": "Changed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r382925108", "createdAt": "2020-02-22T16:40:45Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzIyNA=="}, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDc5ODgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/SemanticAttributes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNzo1NDo1MFrOFtMLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxOToyMjowNlrOFtMfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyOTcyMA==", "bodyText": "Please use full descriptions from the spec.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r382929720", "createdAt": "2020-02-22T17:54:50Z", "author": {"login": "yurishkuro"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticAttributes.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticAttributes {\n+\n+  /** Transport protocol used. */\n+  public static final String NET_TRANSPORT = \"net.transport\";\n+  /** Remote address of the peer (dotted decimal for IPv4 or RFC5952 for IPv6). */\n+  public static final String NET_PEER_IP = \"net.peer.ip\";\n+  /** Remote port number as an integer. E.g., 80. */\n+  public static final String NET_PEER_PORT = \"net.peer.port\";\n+  /** Remote hostname or similar. */\n+  public static final String NET_PEER_NAME = \"net.peer.name\";\n+  /** Like net.peer.ip but for the host IP. Useful in case of a multi-IP host. */\n+  public static final String NET_HOST_IP = \"net.host.ip\";\n+  /** Like net.peer.port but for the host port. */\n+  public static final String NET_HOST_PORT = \"net.host.port\";\n+  /** Local hostname or similar. */\n+  public static final String NET_HOST_NAME = \"net.host.name\";\n+  /** Username or client_id extracted from the access token or Authorization header. */\n+  public static final String ENDUSER_ID = \"enduser.id\";\n+  /** Actual/assumed role the client is making the request under. */\n+  public static final String ENDUSER_ROLE = \"enduser.role\";\n+  /** Scopes or granted authorities the client currently possesses. */\n+  public static final String ENDUSER_SCOPE = \"enduser.scope\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e97fd34f635d9816cab001a1fd6635c0098347"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNDk1MQ==", "bodyText": "Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r382934951", "createdAt": "2020-02-22T19:22:06Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticAttributes.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticAttributes {\n+\n+  /** Transport protocol used. */\n+  public static final String NET_TRANSPORT = \"net.transport\";\n+  /** Remote address of the peer (dotted decimal for IPv4 or RFC5952 for IPv6). */\n+  public static final String NET_PEER_IP = \"net.peer.ip\";\n+  /** Remote port number as an integer. E.g., 80. */\n+  public static final String NET_PEER_PORT = \"net.peer.port\";\n+  /** Remote hostname or similar. */\n+  public static final String NET_PEER_NAME = \"net.peer.name\";\n+  /** Like net.peer.ip but for the host IP. Useful in case of a multi-IP host. */\n+  public static final String NET_HOST_IP = \"net.host.ip\";\n+  /** Like net.peer.port but for the host port. */\n+  public static final String NET_HOST_PORT = \"net.host.port\";\n+  /** Local hostname or similar. */\n+  public static final String NET_HOST_NAME = \"net.host.name\";\n+  /** Username or client_id extracted from the access token or Authorization header. */\n+  public static final String ENDUSER_ID = \"enduser.id\";\n+  /** Actual/assumed role the client is making the request under. */\n+  public static final String ENDUSER_ROLE = \"enduser.role\";\n+  /** Scopes or granted authorities the client currently possesses. */\n+  public static final String ENDUSER_SCOPE = \"enduser.scope\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyOTcyMA=="}, "originalCommit": {"oid": "78e97fd34f635d9816cab001a1fd6635c0098347"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwNjE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/AbstractAttribute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MzoyM1rOFwkw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMDoyMjoxNVrOFzRkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODMzNQ==", "bodyText": "I suggest naming these *AttributeSetter instead of just *Attribute to avoid confusion with already existing classes like io.opentelemetry.trace.AttributeValue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386478335", "createdAt": "2020-03-02T15:53:23Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/AbstractAttribute.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Abstract base class for {@link Attribute} implementations.\n+ *\n+ * @param <T> the attribute value type\n+ */\n+@Immutable\n+public abstract class AbstractAttribute<T> implements Attribute<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwOTQ4NA==", "bodyText": "Changed to AttributeSetter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389309484", "createdAt": "2020-03-07T20:22:15Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/AbstractAttribute.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Abstract base class for {@link Attribute} implementations.\n+ *\n+ * @param <T> the attribute value type\n+ */\n+@Immutable\n+public abstract class AbstractAttribute<T> implements Attribute<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODMzNQ=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDExNzIyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttribute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NTo0NlrOFwk31A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozOToxNlrOF5qX4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MDA4NA==", "bodyText": "This case looks really awkward. Why would we convert a boolean to a string? Isn't setting a null string equivalent to not calling setAttribute as opposed to clearing the attribute anyway?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386480084", "createdAt": "2020-03-02T15:55:46Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttribute.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttribute extends AbstractAttribute<Boolean> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Boolean value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value);\n+    } else {\n+      span.setAttribute(key(), (String) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzM5NQ==", "bodyText": "Changed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r396007395", "createdAt": "2020-03-21T16:39:16Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttribute.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttribute extends AbstractAttribute<Boolean> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Boolean value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value);\n+    } else {\n+      span.setAttribute(key(), (String) null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MDA4NA=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEyMzg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NzowN1rOFwk73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozOToyNlrOF5qX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTExOQ==", "bodyText": "I don't like this class. Also, from the name I would have expected it not to parse the string but leave it as-is. EDIT: Maybe if the class handles parsing errors (e.g. by setting the value as-is), I would like it better \ud83d\ude03", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386481119", "createdAt": "2020-03-02T15:57:07Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwOTU5NQ==", "bodyText": "This was copied from OpenTracing based on the assumption that it was added there because of need", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389309595", "createdAt": "2020-03-07T20:23:43Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTExOQ=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNjUxNA==", "bodyText": "I challenge that assumption ;) Or rather, I have an alternative idea, see #758 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389516514", "createdAt": "2020-03-09T08:29:07Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTExOQ=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzQwNQ==", "bodyText": "Changed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r396007405", "createdAt": "2020-03-21T16:39:26Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTExOQ=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEyNzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1ODowNVrOFwk-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMDoyNDoxMlrOFzRkwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTc0MQ==", "bodyText": "This may throw an exception for invalid input which violates the specification's error handling guidelines. Also, since this input will most likely come directly from the monitored code, it is even more dangerous.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386481741", "createdAt": "2020-03-02T15:58:05Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public IntOrStringAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Integer value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value.longValue());\n+    } else {\n+      span.setAttribute(key(), (String) null);\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the string value which can be parsed into an integer\n+   */\n+  public void set(Span span, @Nullable String value) {\n+    if (value != null) {\n+      span.setAttribute(key(), Long.valueOf(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwOTYzMg==", "bodyText": "Good catch. I have added try catch block", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389309632", "createdAt": "2020-03-07T20:24:12Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public IntOrStringAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Integer value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value.longValue());\n+    } else {\n+      span.setAttribute(key(), (String) null);\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the string value which can be parsed into an integer\n+   */\n+  public void set(Span span, @Nullable String value) {\n+    if (value != null) {\n+      span.setAttribute(key(), Long.valueOf(value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTc0MQ=="}, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzc0NjI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttributeSetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyMTowMFrOFzeA3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyMTowMFrOFzeA3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMzQzOQ==", "bodyText": "What about this: We remove this class but instead give LongAttributeSetter two methods:\n\ntrySetParsed(String) which tries to parse the argument and does nothing on failure.\nsetParsedOrRaw(String) which tries to parse the argument and sets the string as-is on failure\n(remove set(String) to avoid accidentally passing a string)\n\nI would think that this is much cleaner than having this IntOrStringAttributeSetter  where it is not clear what set does on failure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389513439", "createdAt": "2020-03-09T08:21:00Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttributeSetter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttributeSetter extends AbstractAttributeSetter<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzc2MzUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/AttributeSetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyNzo1OVrOFzeLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyNzo1OVrOFzeLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNjA1Mg==", "bodyText": "I think there is no benefit in having this in the interface. In fact there is a drawback, because it forces as to use (nullable) Long instead of just primitive long. In fact, I'd vote for removing this interface entirely (actually, we could even remove the abstract base class since the achieved code sharing is extremely minimal: We'd write private final String key instead of extends AbstractAttributeSetter<Foo> and this.key = key instead of super(key) and that's about it.)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389516052", "createdAt": "2020-03-09T08:27:59Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/AttributeSetter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+\n+/** Defines the behavior for one attribute definition. */\n+public interface AttributeSetter<T> {\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  String key();\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute or <code>null</code> to remove attribute from span\n+   */\n+  void set(Span span, @Nullable T value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjYzMTQ0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1MToxMFrOF57rOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1MToxMFrOF57rOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5MDg3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    keys.add(((LongAttributeSetter) attribute).key());\n          \n          \n            \n                    ((LongAttributeSetter) attribute).set(span, 42L);\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, \"42\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, \"BAD\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, null);\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"42\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"BAD\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, null);\n          \n          \n            \n                    final LongAttributeSetter longAttribute = (LongAttributeSetter) attribute:\n          \n          \n            \n                    keys.add(longAttribute .key());\n          \n          \n            \n                    longAttribute.set(span, 42L);\n          \n          \n            \n                    longAttribute.trySetParsed(span, \"42\");\n          \n          \n            \n                    longAttribute.trySetParsed(span, \"BAD\");\n          \n          \n            \n                    longAttribute.trySetParsed(span, null);\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, \"42\");\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, \"BAD\");\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, null);\n          \n      \n    \n    \n  \n\nand so on", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r396290872", "createdAt": "2020-03-23T08:51:10Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Field;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link SemanticAttributes}. */\n+@RunWith(JUnit4.class)\n+public class SemanticAttributesTest {\n+\n+  private Span span;\n+\n+  @Before\n+  public void setUp() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"io.telemetry.api\");\n+    span = tracer.spanBuilder(\"junit\").startSpan();\n+  }\n+\n+  @Test\n+  public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n+    Set<String> keys = new HashSet<>();\n+    Field[] fields = SemanticAttributes.class.getFields();\n+    for (int i = 0; i < fields.length; i++) {\n+      Object attribute = fields[i].get(null);\n+      if (attribute instanceof StringAttributeSetter) {\n+        keys.add(((StringAttributeSetter) attribute).key());\n+        ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(span, null);\n+      } else if (attribute instanceof LongAttributeSetter) {\n+        keys.add(((LongAttributeSetter) attribute).key());\n+        ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).trySetParsed(span, \"42\");\n+        ((LongAttributeSetter) attribute).trySetParsed(span, \"BAD\");\n+        ((LongAttributeSetter) attribute).trySetParsed(span, null);\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"42\");\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"BAD\");\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM0OTQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1Mjo1NVrOF60DuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1MzowMFrOF6513g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA==", "bodyText": "Do we really need these methods now? I would suggest to stay only with set for the moment until we need these. Same comment applies to all.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397214648", "createdAt": "2020-03-24T14:52:55Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MjY0OQ==", "bodyText": "No we don't need them but it's a nice convenience feature. And since OpenTracing had similar features, it may ease porting of instrumentations from there to OpenTelemetry. I have no strong opinion, but I think it's fine to keep them in this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397252649", "createdAt": "2020-03-24T15:41:03Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NzU1Mg==", "bodyText": "Trying to limit the API for the moment. Any unnecessary method that we add now will cost us a lot to maintain/keep.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397267552", "createdAt": "2020-03-24T15:59:23Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MTczMA==", "bodyText": "Ah I see, it's in the core API package. Which is IMHO good, since I think the semantic conventions should be seen as a core API. Maybe we should mark these methods final to limit the possibility of headaches in the future?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397271730", "createdAt": "2020-03-24T16:04:37Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwOTQwNg==", "bodyText": "I think the whole class should be final :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397309406", "createdAt": "2020-03-24T16:53:00Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM1MDU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MzoxMFrOF60Eeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo0MDo1MVrOF9-39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg==", "bodyText": "why calling this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397214842", "createdAt": "2020-03-24T14:53:10Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzM3Ng==", "bodyText": "Ping on this one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399723376", "createdAt": "2020-03-28T23:45:45Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzODE4MA==", "bodyText": "@kbrockhoff would be nice to fix this (though personally I wouldn't hold up the PR further just because of this superfluous line).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400238180", "createdAt": "2020-03-30T14:30:45Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODMxNA==", "bodyText": "This is fixed. I am not sure why it is showing as outdated.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400488314", "createdAt": "2020-03-30T20:55:52Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzNzU4OA==", "bodyText": "Am I looking to a wrong class https://github.com/open-telemetry/opentelemetry-java/pull/758/files#diff-55ba0be6445e26747fa46c33ffaffdaeR39?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400537588", "createdAt": "2020-03-30T22:40:51Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM1MTgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1MzoyNFrOF60FRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1MzowMFrOF62-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTA0NA==", "bodyText": "Consider to use autovalue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397215044", "createdAt": "2020-03-24T14:53:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MzUyOQ==", "bodyText": "Why?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397253529", "createdAt": "2020-03-24T15:42:07Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTA0NA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MjA5NA==", "bodyText": "To avoid checking for null the key and have autogenerated hash/equal if we need them :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397262094", "createdAt": "2020-03-24T15:52:39Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTA0NA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MjM2NA==", "bodyText": "Not a strong opinion, as I said is a consideration.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397262364", "createdAt": "2020-03-24T15:53:00Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTA0NA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM1NTg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1NDowOFrOF60HxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxOToyNToxMlrOF9LuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTY4NA==", "bodyText": "Consider to use a static factory method create. It is more flexible than the ctor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397215684", "createdAt": "2020-03-24T14:54:08Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5OTUzMw==", "bodyText": "Changed to factory method", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399699533", "createdAt": "2020-03-28T19:25:12Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTY4NA=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjM3NTczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1ODowOVrOF60UmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxOToyNTozMFrOF9Lubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ==", "bodyText": "Another maybe useful helper would be setToCurrent(boolean) allows users to avoid getting the current Span :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397218969", "createdAt": "2020-03-24T14:58:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2ODAyNA==", "bodyText": "Hmm, that would kinda explode the interface if we also wanted things like setParsedOrRawToCurrent. In Python, there is a special sentinel value for CURRENT_SPAN that is of type Span. That could work for Java too.\nWe could solve this via a global helper method curentSpan that you would import static, then you can write myAttr.set(currentSpan(), myBool) which is not much longer than myAttr.setToCurrent(myBool). Maybe such a method even exists already.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397268024", "createdAt": "2020-03-24T15:59:59Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2ODIxMw==", "bodyText": "Another maybe useful helper is to add attributes to a Span.Builder", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397268213", "createdAt": "2020-03-24T16:00:10Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMDE5MA==", "bodyText": "We do have getCurrentSpan() :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397310190", "createdAt": "2020-03-24T16:53:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMDk5NQ==", "bodyText": "So I am fine to not have the setToCurrent(). But I do want the setParsedOrRaw to be removed for the moment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397310995", "createdAt": "2020-03-24T16:55:08Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyOTIwOQ==", "bodyText": "What about trySetParsed?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397329209", "createdAt": "2020-03-24T17:20:59Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3MDQxMQ==", "bodyText": "Both, I think they can be built easily on top of just Set for the moment. Adding new methods is easier than removing in terms of backwards compatibility.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397370411", "createdAt": "2020-03-24T18:24:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Mzc4MA==", "bodyText": "It's not possible to implement setParsedOrRaw with set, since you can only set integer values but not string values with that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397383780", "createdAt": "2020-03-24T18:46:44Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNzA5NQ==", "bodyText": "Now that I see the behavior is even more confusing to set a string value using a int attribute setter.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397437095", "createdAt": "2020-03-24T20:23:23Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5OTU2Nw==", "bodyText": "Removed requested methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399699567", "createdAt": "2020-03-28T19:25:30Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODQzOTgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NzozNlrOF9NL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNjoyN1rOF9mhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzQ4Ng==", "bodyText": "Make classes final to avoid unexpected inheritance behavior.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399723486", "createdAt": "2020-03-28T23:47:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODY1OQ==", "bodyText": "Fixed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400138659", "createdAt": "2020-03-30T12:06:27Z", "author": {"login": "kbrockhoff"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzQ4Ng=="}, "originalCommit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1168, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}