{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDQ5MTI4", "number": 1342, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyOToyOFrOEGfOGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozNDoxNFrOEGgd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM4NDI1OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyOToyOFrOGlUU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyOToyOFrOGlUU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MzU0NA==", "bodyText": "Use truth for this", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441783544", "createdAt": "2020-06-17T19:29:28Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM4NTcwOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyOTo1NVrOGlUV3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo1Njo0MVrOGl12Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA==", "bodyText": "Use assertThat", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441783774", "createdAt": "2020-06-17T19:29:55Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc2Mg==", "bodyText": "This was just ignored and marked as resolved, please don't do this in the future, if you disagree say it and don't resolve the comment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442327762", "createdAt": "2020-06-18T15:49:23Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjc2Nw==", "bodyText": "Oh sorry, I fixed that in another test case below, that's why I marked as resolved. I have totally missed this one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442332767", "createdAt": "2020-06-18T15:56:41Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU4ODUyOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozNDoxNFrOGlWXCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo0MTo0MlrOGlyofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA==", "bodyText": "we should use the junit ExpectedException for this, rather than try/fail", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441816840", "createdAt": "2020-06-17T20:34:14Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0OTAwNg==", "bodyText": "or simple:\n  @Rule public ExpectedException thrown = ExpectedException.none();\n\n    thrown.expect(NullPointerException.class);\n    thrown.expectMessage(\"name\");\n    StringUtils.padLeft(null, 10);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441849006", "createdAt": "2020-06-17T21:38:16Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0OTQ2MA==", "bodyText": "@jkwatson there is also an errorprone check for this which we can enable now with tests being java8 about this exact pattern.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441849460", "createdAt": "2020-06-17T21:39:22Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2OTU0OQ==", "bodyText": "yeah, @iNikem disabled it in this PR. that's why it caught my eye.  :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441869549", "createdAt": "2020-06-17T22:31:30Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDU3NQ==", "bodyText": "Should we prefer ExpectedException or, as we have java8 in tests now, assertThrows?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441974575", "createdAt": "2020-06-18T05:22:22Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4MDA2MA==", "bodyText": "I think ExpectedException does a better job for this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442280060", "createdAt": "2020-06-18T14:41:42Z", "author": {"login": "bogdandrutu"}, "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, "originalCommit": {"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1438, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}