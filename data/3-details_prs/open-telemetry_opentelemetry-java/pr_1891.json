{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTc0NTE2", "number": 1891, "title": "Add JMH benchmark for context.", "bodyText": "I'm interested in how much performance we get from the trie implementation for context. For now, this just adds some benchmarks, and open to any suggestions.\nResults with current implementation https://gist.github.com/anuraaga/b67d32c6a08ad9d2a38d39fd357efb00\nResults with a CoW array implementation https://gist.github.com/anuraaga/2f2187cf1886197b5d65c2018001750d\nIt's pretty interesting. I think for the array, the worst case for read is readLast. Even for that, performance of the array implementation seems better up to 10 items in context. 20 / 40 there is a sharp drop as we'd expect. Because we have the caveat that \"Context should not be treated like a general purpose map with a large number of keys and values\" perhaps this is an acceptable level? For our expected usage, I think we generally have 5 in our code - span, local root, client root, baggage, miscellaneous. Arguably local root, client root, miscellaneous should just be grouped into one struct anyways.\nFor write, the first and second write are a lot faster for the trie, but third and up become a lot faster for the array. For a use case of 5 elements, it seems like a wash. For 10, I think array is faster. Writes should be less common than reads though so it might not matter either way.\nLet me know if this benchmark and numbers make sense and if they seem motivating enough for a shift to a simple array implementation.", "createdAt": "2020-10-27T08:38:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891", "merged": true, "mergeCommit": {"oid": "3b95f1f9919e1e207e0317087d59ed7d081c176d"}, "closed": true, "closedAt": "2020-10-28T01:31:47Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWkumVgH2gAyNTEwNTc0NTE2OmM3ZmJmMjFhOTViNTM5MDY4MzBjMTVmMzM3YzNhNWI1ZTdlZmQ3NGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWyHPiAH2gAyNTEwNTc0NTE2OjgwNThhM2IyYjgyOTRmZGQ2M2Y4YTMyMTRlZjE0MDBhZGUxYWRlMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c7fbf21a95b53906830c15f337c3a5b5e7efd74e", "committedDate": "2020-10-27T08:31:03Z", "message": "Add JMH benchmark for context."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTczNDY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#pullrequestreview-517573467", "createdAt": "2020-10-27T10:53:29Z", "commit": {"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo1MzozMFrOHo2C6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo1MzozMFrOHo2C6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDU3MQ==", "bodyText": "Would it a get to the middle element make sense?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#discussion_r512590571", "createdAt": "2020-10-27T10:53:30Z", "author": {"login": "thisthat"}, "path": "context/src/jmh/java/io/opentelemetry/context/ContextBenchmark.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark for Context. */\n+@Threads(value = 1)\n+@Fork(3)\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class ContextBenchmark {\n+\n+  @Param({\"2\", \"3\", \"4\", \"5\", \"10\", \"20\", \"40\"})\n+  private int size;\n+\n+  private List<ContextKey<String>> keys;\n+  private Context context = Context.root();\n+\n+  @Setup\n+  public void setup() {\n+    keys = new ArrayList<>();\n+    for (int i = 0; i < size; i++) {\n+      ContextKey<String> key = ContextKey.named(Integer.toString(i));\n+      context = context.with(key, \"value\");\n+      keys.add(key);\n+    }\n+  }\n+\n+  /** Read value for first key. */\n+  @Benchmark\n+  public String readFirst() {\n+    return context.get(keys.get(0));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDE0MjQz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#pullrequestreview-518014243", "createdAt": "2020-10-27T18:22:25Z", "commit": {"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDg2MzY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#pullrequestreview-518086369", "createdAt": "2020-10-27T19:48:56Z", "commit": {"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5b1b32666fe938bb165c9b4acbf2fe56c09eeb6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f5b1b32666fe938bb165c9b4acbf2fe56c09eeb6", "committedDate": "2020-10-28T00:03:50Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into context-benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8058a3b2b8294fdd63f8a3214ef1400ade1ade0a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8058a3b2b8294fdd63f8a3214ef1400ade1ade0a", "committedDate": "2020-10-28T00:06:44Z", "message": "readMiddle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4155, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}