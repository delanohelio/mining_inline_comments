{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjQ5OTQ5", "number": 2197, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyNzozOFrOFBp7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyODo0NlrOFBp81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjc5NzQ3OnYy", "diffSide": "RIGHT", "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyNzozOFrOIAbEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzowNTowOVrOIAw7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNDQ4OQ==", "bodyText": "Nit we use singular BaggageBenchmark for all our others I think", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537314489", "createdAt": "2020-12-07T08:27:38Z", "author": {"login": "anuraaga"}, "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MjUxNA==", "bodyText": "I'll rename it as a part of the rebase process where i need to relocate it anyway.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537672514", "createdAt": "2020-12-07T17:05:09Z", "author": {"login": "jkwatson"}, "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNDQ4OQ=="}, "originalCommit": {"oid": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjgwMjE0OnYy", "diffSide": "RIGHT", "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyODo0NlrOIAbHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODozNzo1MFrOIA03Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA==", "bodyText": "Can you preallocate the key / value strings in a Setup? No idea how significant the string allocation here is without trying that, it may not be though. Though it would definitely skew the GC numbers", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537315154", "createdAt": "2020-12-07T08:28:46Z", "author": {"login": "anuraaga"}, "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {\n+\n+  @Param({\"0\", \"1\", \"10\", \"100\"})\n+  public int itemsToAdd;\n+\n+  @Benchmark\n+  @BenchmarkMode({Mode.AverageTime})\n+  @Fork(1)\n+  @Measurement(iterations = 15, time = 1)\n+  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+  @Warmup(iterations = 5, time = 1)\n+  public Baggage baggageItemBenchmark() {\n+    BaggageBuilder builder = Baggage.builder();\n+    for (int i = 0; i < itemsToAdd; i++) {\n+      builder.put(\"key\" + i, \"value\" + i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MjE5Nw==", "bodyText": "sure thing. will do so!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537672197", "createdAt": "2020-12-07T17:04:42Z", "author": {"login": "jkwatson"}, "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {\n+\n+  @Param({\"0\", \"1\", \"10\", \"100\"})\n+  public int itemsToAdd;\n+\n+  @Benchmark\n+  @BenchmarkMode({Mode.AverageTime})\n+  @Fork(1)\n+  @Measurement(iterations = 15, time = 1)\n+  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+  @Warmup(iterations = 5, time = 1)\n+  public Baggage baggageItemBenchmark() {\n+    BaggageBuilder builder = Baggage.builder();\n+    for (int i = 0; i < itemsToAdd; i++) {\n+      builder.put(\"key\" + i, \"value\" + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA=="}, "originalCommit": {"oid": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczNzAxOA==", "bodyText": "updated...it didn't materially change the benchmarks much.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537737018", "createdAt": "2020-12-07T18:37:50Z", "author": {"login": "jkwatson"}, "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {\n+\n+  @Param({\"0\", \"1\", \"10\", \"100\"})\n+  public int itemsToAdd;\n+\n+  @Benchmark\n+  @BenchmarkMode({Mode.AverageTime})\n+  @Fork(1)\n+  @Measurement(iterations = 15, time = 1)\n+  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+  @Warmup(iterations = 5, time = 1)\n+  public Baggage baggageItemBenchmark() {\n+    BaggageBuilder builder = Baggage.builder();\n+    for (int i = 0; i < itemsToAdd; i++) {\n+      builder.put(\"key\" + i, \"value\" + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA=="}, "originalCommit": {"oid": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1834, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}