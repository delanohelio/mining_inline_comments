{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjY0Nzg1", "number": 2009, "title": "Update CHANGELOG 0.10.0 formatting and edit entries", "bodyText": "update formatting for unreleased CHANGELOG entries\nfinal edit of unreleased CHANGELOG entries\nadded PR-2002 to extensions breaking changes", "createdAt": "2020-11-04T22:04:03Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009", "merged": true, "mergeCommit": {"oid": "ed71c41a4164d7a0a3746a1605a10530f4f75187"}, "closed": true, "closedAt": "2020-11-05T02:19:28Z", "author": {"login": "brianashby"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZVCcWgH2gAyNTE1NjY0Nzg1OmU2OTRhMzMwNmMxYzczY2Q2ZDFiMTczM2YzZTZlY2VjOTcxMmRmN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZYlXygFqTUyMzg2NTE3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e694a3306c1c73cd6d1b1733f3e6ecec9712df7a", "author": {"user": {"login": "brianashby", "name": "Brian Ashby"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e694a3306c1c73cd6d1b1733f3e6ecec9712df7a", "committedDate": "2020-11-04T21:56:01Z", "message": "update unreleased changelog formatting and edit entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzc1NDI4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#pullrequestreview-523775428", "createdAt": "2020-11-04T22:15:52Z", "commit": {"oid": "e694a3306c1c73cd6d1b1733f3e6ecec9712df7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxNTo1M1rOHtrpKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxNTo1M1rOHtrpKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MzAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - The 's' was removed from the word \"extensions\" for every SDK extension. For example, `io.opentelemetry.sdk.extensions.otproto.TraceProtoUtils` was renamed to `io.opentelemetry.sdk.extension.otproto.TraceProtoUtils`.\n          \n          \n            \n            - The 's' was removed from the word \"extensions\" for the package for every SDK extension. For example, `io.opentelemetry.sdk.extensions.otproto.TraceProtoUtils` was renamed to `io.opentelemetry.sdk.extension.otproto.TraceProtoUtils`.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#discussion_r517663018", "createdAt": "2020-11-04T22:15:53Z", "author": {"login": "jkwatson"}, "path": "CHANGELOG.md", "diffHunk": "@@ -2,57 +2,76 @@\n \n ## Unreleased\n \n-- API:\n-    - BUGFIX: The `package-info` file was removed from the `io.otel.context` package because it made the project incompatible with JPMS.\n-    - BREAKING CHANGE: The API no longer uses the `grpc-context` as the context implementation. It now uses `io.opentelemetry.context.Context`. This is published in the `opentelemetry-context` artifact. Interactions with the context have mostly been moved to static methods in the Span and Baggage interfaces.\n-    - BREAKING CHANGE: The Baggage API has been reworked to more closely match the specification. This includes the removal of the `BaggageManager`. Baggage is fully functional within the API, without needing to install an SDK.\n-    - BREAKING CHANGE: All parameters are now marked as non-nullable by default.\n-    - BREAKING CHANGE: There have been many updates to the semantic conventions constants. The constants are now auto-generated from the yaml specification files, so the names will now be consistent across languages. For more information, see the YAML Model for Semantic Conventions.\n-    - BREAKING CHANGE: All builder-creation methods have been renamed to `.builder()`.\n-    - BREAKING CHANGE: `DefaultSpan` has been removed from the public API. Instead, use `Span.wrap(spanContext)` if you need a non-functional span that propagates the trace context.\n-    - BREAKING CHANGE: Some functionality from the `Tracer` interface is now available either on the `Span` interface or `Context` interface.\n-    - BREAKING CHANGE: `StatusCanonicalCode` has been renamed to `StatusCode`.\n-    - BREAKING CHANGE: `TextMapPropagators` could receive a null carrier passed to the extract method.\n-    - BREAKING CHANGE: The `OpenTelemetry` class is now an interface, with implementations. Methods on this interface have changed their names to reflect this change. \n-    - BREAKING CHANGE: `Span.getContext()` has been renamed to `Span.getSpanContext()`.\n-    - BREAKING CHANGE: `AttributesBuilder` now uses `put` instead of `add` as the method name for adding attributes.\n-    - BREAKING CHANGE: All API classes have been moved into the `io.opentelemetry.api.` prefix to support JPMS users.\n-    - BREAKING CHANGE: `DefaultMeter`, `DefaultMeterProvider`, `DefaultTracer` and `DefaultTracerProvider` are no longer public. You can access the same functionality with `getDefault()` methods on the `Meter`, `MeterProvider, `Tracer`, and `TracerProvider` classes, respectively.\n-    - BREAKING CHANGE: `TracingContextUtils` and `BaggageUtils` are no longer public classes in the API. Instead, use the appropriate static methods on the `Span` and `Baggage` classes, or use methods on the `Context` itself.\n-    - BREAKING CHANGE: The context propagation APIs have moved into the new context module.\n-    - BREAKING CHANGE: TraceState entries can now be iterated via a `forEach` method, rather than having the entries exposed directly.\n-    - BREAKING CHANGE: EndSpanOptions have been removed from the Span API. Now, you just set the end timestamp directly, if you need it.\n-    - Enhancement: The W3C Baggage Propagator has been added.\n-    - Enhancement: The B3 Propagator now handles both single and multi-header formats.\n-    - Enhancement: Mutating a method on `Span` now returns the `Span` to enable call-chaining.\n-\n-- SDK:\n-    - BREAKING CHANGE: The `SpanData.*` implementation classes were made non-public, but the interfaces are still available.\n-    - BREAKING CHANGE: `SpanProcessor.onStart` now takes a `Context` as its first parameter.\n-    - BREAKING CHANGE: The `Sampler` interface now takes a parent `Context`, rather than a `SpanContext`.\n-    - BREAKING CHANGE: `ValueObserver` instruments now use the `LastValue` aggregation.\n-    - BREAKING CHANGE: The OTLP metric exporter now emits `gauge` metrics where appropriate.\n-    - BREAKING CHANGE: `ValueObserver` instruments now generate gauge metrics, rather than non-monotonic counter-style metrics.\n-    - BREAKING CHANGE: `TraceConfig` configuration option names (environment variables and system properties) have been updated to match the OpenTelemetery Specification.\n-    - BREAKING CHANGE: The Jaeger gRPC exporter has been updated to match the OpenTelemetry Specification. The `message` log entry attribute has been renamed to `event` and a new `dropped attributes count` attribute has been added.\n-    - BREAKING CHANGE: The `IdsGenerator` interface has been renamed to `IdGenerator`, and all implementations and relevant factory methods have been renamed accordingly.\n-    - BREAKING CHANGE: The `RandomIdGenerator` is now accessible via a factory method on the `IdGenerator` class, rather than being exposed itself. Use `IdsGenerator.random()` to acquire an instance.\n-    - BREAKING CHANGE: Each `Sampler` has been reorganized into their own classes and moved into the `io.opentelemetry.sdk.trace.samplers` package. Factory methods that used to be on the `Samplers` class have now been moved to the `Sampler` interface.\n-    - BREAKING CHANGE: The `SpanData.getHasRemoteParent()` and `SpanData.getHasEnded()` methods have been renamed to `hasRemoteParent()` and `hasEnded()` respectively.\n-    - Enhancement: A new `opentelemetry-sdk-testing` module has been created with a JUnit 5 extension to assist with testing. \n-    - Enhancement: The `Sampler` interface now allows a `Sampler` implementation to update the `TraceState` that is applied to the `SpanContext` for the resulting span.\n-    - A new `MetricData` gauge metric type is available. \n-    - The Prometheus metric exporter now consumes `gauge` metrics. \n-    - The Jaeger gRPC exporter now maps `Resource` entries to process tags.\n-    - The OTLP protobuf definitions have been updated to the latest released version: 0.6.0. Both the Span and Metric exporters have been updated to match.\n-\n-- Extensions:\n-    - BREAKING CHANGE: The OpenTracing shim factory class has been renamed from `TraceShim` to `OpenTracingShim`. The factory methods have changed, due to the removal of the `BaggageManager` and the introduction of the availability of non-global `OpenTelemetry` instances.\n-    - BREAKING CHANGE: The in-memory exporter(s) have been moved to the `opentelemetry-sdk-testing` artifact.\n-    - A new JUnit5 extension has been added for writing tests that use the SDK. See `io.opentelemetry.sdk.testing.junit5.OpenTelemetryExtension` in the new `opentelemetry-sdk-testing` module. \n-    - This release adds a Jaeger SpanExporter which exports via the thrift-over-http protocol.\n-    - All of the exporter artifacts have had the 's' removed from the word \"exporters\". So, for example, `opentelemetry-exporters-logging` has been renamed to `opentelemetry-exporter-logging`. \n-\n+### API\n+\n+#### Enhancements\n+\n+- The W3C Baggage Propagator is now available.\n+- The B3 Propagator now handles both single and multi-header formats.\n+- Mutating a method on `Span` now returns the `Span` to enable call-chaining.\n+\n+#### Bug fixes\n+\n+- The `package-info` file was removed from the `io.otel.context` package because it made the project incompatible with JPMS.\n+\n+#### Breaking changes\n+\n+- There have been many updates to the semantic conventions constants. The constants are now auto-generated from the YAML specification files, so the names will now be consistent across languages. For more information, see the [YAML Model for Semantic Conventions](https://github.com/open-telemetry/opentelemetry-specification/tree/master/semantic_conventions).\n+- All API classes have been moved into the `io.opentelemetry.api.` prefix to support JPMS users.\n+- The API no longer uses the `grpc-context` as the context implementation. It now uses `io.opentelemetry.context.Context`. This is published in the `opentelemetry-context` artifact. Interactions with the context were mostly moved to static methods in the `Span` and `Baggage` interfaces.\n+- The Baggage API has been reworked to more closely match the specification. This includes the removal of the `BaggageManager`. Baggage is fully functional within the API, without needing to install an SDK.\n+- `TracingContextUtils` and `BaggageUtils` were removed from the public API. Instead, use the appropriate static methods on the `Span` and `Baggage` classes, or use methods on the `Context` itself.\n+- The context propagation APIs have moved into the new `opentelemetry-context` context module.\n+- `DefaultSpan` was removed from the public API. Instead, use `Span.wrap(spanContext)` if you need a non-functional span that propagates the trace context.\n+- `DefaultMeter`, `DefaultMeterProvider`, `DefaultTracer` and `DefaultTracerProvider` were removed from the public API. You can access the same functionality with `getDefault()` methods on the `Meter`, `MeterProvider, `Tracer`, and `TracerProvider` classes, respectively.\n+- Some functionality from the `Tracer` interface is now available either on the `Span` interface or `Context` interface.\n+- The `OpenTelemetry` class is now an interface, with implementations. Methods on this interface have changed their names to reflect this change. For more information, see [OpenTelemetry.java](/api/src/main/java/io/opentelemetry/api/OpenTelemetry.java).\n+- All builder-creation methods have been renamed to `.builder()`.\n+- `StatusCanonicalCode` has been renamed to `StatusCode`.\n+- `Span.getContext()` has been renamed to `Span.getSpanContext()`.\n+- `AttributesBuilder` now uses `put` instead of `add` as the method name for adding attributes.\n+- All parameters are now marked as non-nullable by default.\n+- `TextMapPropagators` could receive a null carrier passed to the extract method.\n+\n+### SDK\n+\n+#### Enhancements\n+\n+- A new `MetricData` gauge metric type is now available. \n+- A new `opentelemetry-sdk-testing` module with a JUnit 5 extension to assist with testing is now available.\n+- The Prometheus metric exporter now consumes `gauge` metrics.\n+- The Jaeger gRPC exporter now maps `Resource` entries to process tags.\n+- The OTLP protobuf definitions were updated to the latest released version: 0.6.0. Both the `Span` and `Metric` exporters were updated to match.\n+- The `Sampler` interface now allows a `Sampler` implementation to update the `TraceState` that is applied to the `SpanContext` for the resulting span.\n+\n+#### Breaking changes\n+\n+- `TraceConfig` configuration option names (environment variables and system properties) were renamed to match the OpenTelemetery Specification. For more information, see [TraceConfig](./QUICKSTART.md#TraceConfig).\n+- The Jaeger gRPC exporter was updated to match the OpenTelemetry Specification. The `message` log entry attribute has been renamed to `event` and a new `dropped attributes count` attribute was added. For more information, see the [Overview](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md).\n+- The `SpanData.getHasRemoteParent()` and `SpanData.getHasEnded()` methods were renamed to `hasRemoteParent()` and `hasEnded()`, respectively.\n+- The `IdsGenerator` interface has been renamed to `IdGenerator`, and all implementations and relevant factory methods were similarly renamed.\n+- The `RandomIdGenerator` is now accessible via a factory method on the `IdGenerator` class, rather than being exposed itself. Use `IdGenerator.random()` to acquire an instance.\n+- The OTLP metric exporter now emits `gauge` metrics where appropriate.\n+- `ValueObserver` instruments now generate gauge metrics, rather than non-monotonic counter-style metrics.\n+- `ValueObserver` instruments now use the `LastValue` aggregation instead of `MinMaxSumCount`.\n+- The `SpanData.*` implementation classes were removed from the public SDK, but the interfaces are still available.\n+- `SpanProcessor.onStart` now takes a `Context` as its first parameter.\n+- The `Sampler` interface now takes a parent `Context` rather than a `SpanContext`.\n+- Each `Sampler` has been reorganized into their own classes and moved into the `io.opentelemetry.sdk.trace.samplers` package. Factory methods that used to be on the `Samplers` class were moved to the `Sampler` interface.\n+\n+### Extensions\n+\n+#### Enhancements\n+\n+- A new JUnit5 extension was added for writing tests. For more information, see [OpenTelemetryExtension.java](sdk/testing/src/main/java/io/opentelemetry/sdk/testing/junit5/OpenTelemetryExtension.java). \n+- A Jaeger `SpanExporter` which exports via the `thrift-over-http protocol` is now available.\n+\n+#### Breaking changes\n+\n+- The in-memory exporter(s) have been moved to the `opentelemetry-sdk-testing` artifact.\n+- The OpenTracing shim factory class has been renamed from `TraceShim` to `OpenTracingShim`. The factory methods have changed because `BaggageManager` was removed and non-global `OpenTelemetry` instances are now available.\n+- The 's' was removed from the word \"exporters\" for every exporter artifact. For example, `opentelemetry-exporters-logging` was renamed to `opentelemetry-exporter-logging`. \n+- The 's' was removed from the word \"extensions\" for every SDK extension. For example, `io.opentelemetry.sdk.extensions.otproto.TraceProtoUtils` was renamed to `io.opentelemetry.sdk.extension.otproto.TraceProtoUtils`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e694a3306c1c73cd6d1b1733f3e6ecec9712df7a"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzc4ODQ0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#pullrequestreview-523778844", "createdAt": "2020-11-04T22:22:06Z", "commit": {"oid": "e694a3306c1c73cd6d1b1733f3e6ecec9712df7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzk5ODU5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#pullrequestreview-523799859", "createdAt": "2020-11-04T23:03:33Z", "commit": {"oid": "e694a3306c1c73cd6d1b1733f3e6ecec9712df7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cd33a2890ff79f0d928e6603fe80233b6dea1c", "author": {"user": {"login": "brianashby", "name": "Brian Ashby"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/59cd33a2890ff79f0d928e6603fe80233b6dea1c", "committedDate": "2020-11-05T00:37:37Z", "message": "Update CHANGELOG.md\n\nCo-authored-by: John Watson <jkwatson@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODQ3ODEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#pullrequestreview-523847811", "createdAt": "2020-11-05T01:11:54Z", "commit": {"oid": "59cd33a2890ff79f0d928e6603fe80233b6dea1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODY1MTc0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2009#pullrequestreview-523865174", "createdAt": "2020-11-05T02:03:53Z", "commit": {"oid": "59cd33a2890ff79f0d928e6603fe80233b6dea1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}