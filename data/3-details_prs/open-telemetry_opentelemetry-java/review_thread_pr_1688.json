{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODM2MDMy", "number": 1688, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMzoxMVrOEmpXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMDoxNlrOEnEtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTU5MTIxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMzoxMVrOHWzDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo1NDoyMFrOHXkA5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TraceVersion {\n          \n          \n            \n            final class TraceVersion {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493667249", "createdAt": "2020-09-23T15:03:11Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3MjExNg==", "bodyText": "it cannot be package private because accessed outside of package", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493672116", "createdAt": "2020-09-23T15:09:34Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NDMyMA==", "bodyText": "You can move it to the right package though. Or just make it a member function of HttpTraceContext", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493674320", "createdAt": "2020-09-23T15:12:18Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4OTk1Ng==", "bodyText": "no, problem that I want to call BigendianEncoding.isValidBase16String(...) method, but class BigendianEncoding is package private in io.opentelemetry.trace.\nbut HttpTraceContext class in package io.opentelemetry.trace.propagation.\nSo I need to make TraceVersion public class in package io.opentelemetry.trace.\nOr move class  HttpTraceContext to package io.opentelemetry.trace.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493689956", "createdAt": "2020-09-23T15:32:54Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0Mjc2Mw==", "bodyText": "I think I'd prefer a 3rd option, which is to create a public utility class (called maybe something like \"WireFormatUtils\"?) that will provide these needed methods for any propagator that needs them. This could then delegate to the BigEndianEncoding implementation, as appropriate, or maybe we move methods in there, as appropriate.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493742763", "createdAt": "2020-09-23T16:50:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3MTIxMA==", "bodyText": "renamed TraceVersion to WireFormatUtils with method", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494271210", "createdAt": "2020-09-24T12:24:37Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2OTM0OA==", "bodyText": "removed", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494469348", "createdAt": "2020-09-24T16:54:20Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NzI0OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTU5NDExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTowMzo1MVrOHWzFrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyMTo0MFrOHWz7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2Nzc1OQ==", "bodyText": "Shouldn't we check whether there is a trailing - too? What does W3C say?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493667759", "createdAt": "2020-09-23T15:03:51Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -198,6 +199,11 @@ private static SpanContext extractContextFromTraceParent(String traceparent) {\n     }\n \n     try {\n+      String version = traceparent.substring(0, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MTU0OA==", "bodyText": "it's already checked above:\ntraceparent.charAt(TRACE_ID_OFFSET - 1) == TRACEPARENT_DELIMITER", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493681548", "createdAt": "2020-09-23T15:21:40Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -198,6 +199,11 @@ private static SpanContext extractContextFromTraceParent(String traceparent) {\n     }\n \n     try {\n+      String version = traceparent.substring(0, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2Nzc1OQ=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTYzOTQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToxMzoxNFrOHWziBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo1NDozOVrOHXkBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NTAxMw==", "bodyText": "I'm not sure we need a whole class just for one method. Could this just be a method on the HttpTraceContext itself?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493675013", "createdAt": "2020-09-23T15:13:14Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MjM5Mg==", "bodyText": "because BigendianEncoding class is package private and I cannot call it.\nHttpTraceContext class cannot access BigendianEncoding class methods.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r493682392", "createdAt": "2020-09-23T15:22:51Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NTAxMw=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2NDA2Mw==", "bodyText": "It's just two bytes - I think I would just generate a Set of all possible versions as a private in HttpTraceContext (255 elements only) and use that for validation, seems like it could be faster anyways and don't need to worry about this visibility issue for now", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494064063", "createdAt": "2020-09-24T06:20:26Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NTAxMw=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2OTUzOA==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494469538", "createdAt": "2020-09-24T16:54:39Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceVersion.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class TraceVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3NTAxMw=="}, "originalCommit": {"oid": "118e87e8b3d9f3ff34342dbb13857b0c87be69c1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA3MDUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMDoxNlrOHXdxSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoxNTozOFrOHXm6tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA==", "bodyText": "This is a sort of strange public API - not clear what wire format or version this is referring to, and pretty narrow use case. I think this was added because of the visibility of BigEndianEncoding but how about my suggestion of just precomputing the possible valid values and comparing to avoid needing this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494367048", "createdAt": "2020-09-24T14:30:16Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MTc4NQ==", "bodyText": "set of 255 strings is not tiny. how I can compute all 255 values to insert into set? I suppose I will need to call BigEndianEncoding.byteToBase16String(...) method which is in BigEndianEncoding class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494371785", "createdAt": "2020-09-24T14:36:21Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTE3MA==", "bodyText": "Well since this is on the slow path (static initializer), we don't quite need the performance of BigEndianEncoding and could just use Long.toHexString.\nSet<String> VALID_VERSIONS = new HashSet<>();\nfor (int i = 0; i < 255; i++) {\n  String version = Long.toHexString(i);\n  if (version.length() < 2)\n    version = '0' + version;\n  VALID_VERSIONS.add(version);\n}\n\nIt's not so bad I guess. We need to be careful with public API, for this I would probably copy rather than expose if we need to in worst case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494401170", "createdAt": "2020-09-24T15:14:40Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTM2Mw==", "bodyText": "I think the suggestion is to write some quick code to generate all the possibilities, and then just put that into a static Set field. Is that what you were thinking, @anuraaga ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494401363", "createdAt": "2020-09-24T15:14:53Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMDY4Mg==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494430682", "createdAt": "2020-09-24T15:54:45Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNDUyMg==", "bodyText": "I added initialization to static block, can move to method if it's better", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494434522", "createdAt": "2020-09-24T16:00:12Z", "author": {"login": "malafeev"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxNjkxNw==", "bodyText": "The other option would be to pre-generate the set and hard-code it into the code itself, but I think this is fine; a few extra microseconds at startup shouldn't be an issue, and we can change it to a hard-coded set later if we want.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1688#discussion_r494516917", "createdAt": "2020-09-24T18:15:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/WireFormatUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+public class WireFormatUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzA0OA=="}, "originalCommit": {"oid": "0a839709e562f80f767f25195a7664b96c71c8c9"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1208, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}