{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzQ1NjE2", "number": 1284, "title": "feat: examples for metrics", "bodyText": "Please provide feedback what u want to see in samples and i will try to add it", "createdAt": "2020-05-28T21:28:20Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284", "merged": true, "mergeCommit": {"oid": "9191175f324186578d4248d43c177e4f7872f52a"}, "closed": true, "closedAt": "2020-06-11T15:17:50Z", "author": {"login": "DotSpy"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl0uowgH2gAyNDI0NzQ1NjE2OjE1N2JhMzM3ODc4MDU2ZDI5NDFjOWRmMTI2MzkxM2NkYjk2YmQ4Y2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoD7tNgFqTQyNDc5NjQ1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/157ba337878056d2941c9df1263913cdb96bd8cb", "committedDate": "2020-05-28T21:27:17Z", "message": "feat: examples for metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM4MDY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-420538067", "createdAt": "2020-05-28T22:32:53Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMjo1M1rOGcI_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMjo1M1rOGcI_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw==", "bodyText": "this is probably a bad example of how to use a counter. Counters are intended to be used as a part of a \"synchronous\" measurement, associated with a span context. Measuring jvm memory usage is a better use-case for an Observer instrument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160543", "createdAt": "2020-05-28T22:32:53Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM4MzEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-420538310", "createdAt": "2020-05-28T22:33:33Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMzozM1rOGcJAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMzozM1rOGcJAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDc3MQ==", "bodyText": "Please add Javadoc explaining the purpose of the example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160771", "createdAt": "2020-05-28T22:33:33Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTQ4NDMx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-420548431", "createdAt": "2020-05-28T22:59:40Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTo0MFrOGcJhuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1OTo0MFrOGcJhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTQwMA==", "bodyText": "I think it would be helpful to have the meter name reflect reommended meter naming standards, which would mean this should probably be something like \"io.opentelemetry.example.metrics\" with a version of 0.5, maybe", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432169400", "createdAt": "2020-05-28T22:59:40Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjU3NzU4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-420657758", "createdAt": "2020-05-29T05:17:30Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToxNzozMFrOGcPDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToxNzozMFrOGcPDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MDA0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432260046", "createdAt": "2020-05-29T05:17:30Z", "author": {"login": "thisthat"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjU5MTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-420659148", "createdAt": "2020-05-29T05:22:04Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTI4NzY1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-421128765", "createdAt": "2020-05-29T17:00:28Z", "commit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowMDoyOFrOGck5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowMDoyOFrOGck5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzc1OA==", "bodyText": "Same comment about using a synchronous instrument for doing what should be an asynchronous measurement. We should make sure our examples are using the APIs idiomatically. In general, synchronous instruments should be used to instrument code executing within a span context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432617758", "createdAt": "2020-05-29T17:00:28Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class LongMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongCounter jvmUsageCounter = sampleMeter.longCounterBuilder(\"jvm_memory_usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "157ba337878056d2941c9df1263913cdb96bd8cb"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc4559967d170f9b7072412ced817e5ccf4c95a", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3dc4559967d170f9b7072412ced817e5ccf4c95a", "committedDate": "2020-05-29T17:20:24Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8e3754e990cfe750a10b9df3b7102d9f9399746a", "committedDate": "2020-05-29T22:36:37Z", "message": "feat: metrics examples adding bound() and applying review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzY4NDY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-421368464", "createdAt": "2020-05-30T01:59:59Z", "commit": {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1OTo1OVrOGcwBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1OTo1OVrOGcwBVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA4NA==", "bodyText": "This should be renamed to LongCounterExample, and it still needs to have a span context surrounding the usage of the counter, to be idiomatically correct.\nThe javadoc should definitely be more descriptive, and probably include a reference to the relevant section of the metric specifications. It should explain under what circumstances it is appropriate to use a LongCounter, and explain what \"bound\" means. My expectation is that a newbie who is looking at this code will see an idiomatic example of how to use the instrument being demonstrated and understand why and when they would use such an instrument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432800084", "createdAt": "2020-05-30T01:59:59Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import java.util.Random;\n+\n+/**\n+ * Long meter example with bound counter\n+ */\n+public class LongMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aaf02afe6680851e54ceb9ab49337e8295bb09e5", "committedDate": "2020-05-31T08:43:42Z", "message": "feat: example for directory search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTI1NzA2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-421925706", "createdAt": "2020-06-01T15:12:08Z", "commit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjowOFrOGdOJ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjowOFrOGdOJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ==", "bodyText": "I think you missed my point here. The javadoc should explain what the example is trying to teach. We aren't trying to teach people how to traverse directory structures. We're trying to teach people how to use a Counter, a LongCounter in particular.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433293791", "createdAt": "2020-06-01T15:12:08Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTI2NDA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-421926405", "createdAt": "2020-06-01T15:12:36Z", "commit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjozNlrOGdOLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMjozNlrOGdOLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA==", "bodyText": "this is a strange label. Why would this be a useful label for this process?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294100", "createdAt": "2020-06-01T15:12:36Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTI3NDg3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-421927487", "createdAt": "2020-06-01T15:13:19Z", "commit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMzoxOVrOGdOMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMzoxOVrOGdOMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDUyOA==", "bodyText": "As above, the javadoc should explain what we're trying to teach people with the example.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294528", "createdAt": "2020-06-01T15:13:19Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * In this example we are setting callback to get asynchronously jvm memory usage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6c0f327f6549ff3c1274bacd526a90010cc75403", "committedDate": "2020-06-01T20:43:30Z", "message": "feat: apply review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NzQ4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-422214748", "createdAt": "2020-06-01T22:06:14Z", "commit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjoxNFrOGdbsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjoxNFrOGdbsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTU4Ng==", "bodyText": "rename to DoubleCounterExample", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515586", "createdAt": "2020-06-01T22:06:14Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0OTYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-422214960", "createdAt": "2020-06-01T22:06:40Z", "commit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjo0MFrOGdbs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjo0MFrOGdbs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTczNg==", "bodyText": "this usage should also be in a Span scope, like in the LongCounterExample.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515736", "createdAt": "2020-06-01T22:06:40Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    Long timeStart = System.currentTimeMillis();\n+    superLongMethod();\n+    Long timeEnd = System.currentTimeMillis();\n+    Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+    timeCounter.add(seconds, \"someWork\", \"execution time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e931fcca20006fadcbb07c4346feb0643616e3", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5e931fcca20006fadcbb07c4346feb0643616e3", "committedDate": "2020-06-02T16:14:02Z", "message": "feat: apply review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTIzNTUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-422923551", "createdAt": "2020-06-02T17:55:22Z", "commit": {"oid": "e5e931fcca20006fadcbb07c4346feb0643616e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NToyMlrOGd9PIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NToyMlrOGd9PIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTE4Ng==", "bodyText": "Move the creation of the counter up out of the try block. We only need to use the counter inside a span context, not create it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434065186", "createdAt": "2020-06-02T17:55:22Z", "author": {"login": "jkwatson"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+          .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+          .setDescription(\"should measure some method execution time\")\n+          .setUnit(\"second\")\n+          .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e931fcca20006fadcbb07c4346feb0643616e3"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "committedDate": "2020-06-02T19:52:03Z", "message": "feat: move creation of counter out of try block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDEwMDM0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-423010034", "createdAt": "2020-06-02T19:53:41Z", "commit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjIzNTc4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-423223578", "createdAt": "2020-06-03T05:15:20Z", "commit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzA4MjQy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-423708242", "createdAt": "2020-06-03T16:03:10Z", "commit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowODowOVrOGejHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowODozOVrOGejITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng==", "bodyText": "Is a counter really the right instrument type to use here?\nI thought this was only used for things that you actually count, like, the number of requests, errors or total bytes written or something like this. In particular, things where one would be interested in the total sum only and not distinct values or their min/max. Of course one could argue that measuring time entails counting seconds but I thought the ValueRecorder would be the correct instrument to record such distinct measurements.\nThe spec even mentions:\n\nExample uses for ValueRecorder that are non-additive:\n\ncapture any kind of timing information\n\n\nAlso the example in the Javadoc even demonstrates how it's used to report timings:\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434685696", "createdAt": "2020-06-03T16:08:09Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjAzMQ==", "bodyText": "Leftover, this example is not about finding any files.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434686031", "createdAt": "2020-06-03T16:08:39Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Long timeStart = System.currentTimeMillis();\n+      superLongMethod();\n+      Long timeEnd = System.currentTimeMillis();\n+      Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+      //we can add values to counter without addition label key-values pairs\n+      timeCounter.add(seconds);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a55b245ae220a66de7eb5c080d44ef7413836770", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a55b245ae220a66de7eb5c080d44ef7413836770", "committedDate": "2020-06-03T20:05:05Z", "message": "feat: use double counter to count MB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1de2543209cc766904f4a3ea6b4bb844d7895173", "committedDate": "2020-06-03T20:07:10Z", "message": "fix: javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTY2OTMw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-424166930", "createdAt": "2020-06-04T07:22:14Z", "commit": {"oid": "a55b245ae220a66de7eb5c080d44ef7413836770"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyNzo0MFrOGe5KGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODowNDowM1rOGe6X2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NjkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n          \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extension.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435046936", "createdAt": "2020-06-04T07:27:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng==", "bodyText": "Actually you don't use the BoundDoubleCounter or labels here at all, or am I missing something? \ud83d\ude05\nThe file extension would actually make a great metric dimension/label in your example.\ndisk_space_used[file_extension=dll]:   5 MB\ndisk_space_used[file_extension=pdf]:   1 MB\ndisk_space_used[file_extension=png]: 710 MB\n\nand so on.\nWhat do you think? \ud83d\ude42", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435065596", "createdAt": "2020-06-04T08:01:45Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NjUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count space used by file extension\")\n          \n          \n            \n                  .setDescription(\"Counts disk space used by file extension.\")\n          \n      \n    \n    \n  \n\nIt actually does so no need for the subjunctive \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066503", "createdAt": "2020-06-04T08:03:23Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Njg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      methodCallCounter.add((double) file.length() / 1024);\n          \n          \n            \n                      methodCallCounter.add((double) file.length() / 1_000_000);\n          \n      \n    \n    \n  \n\nFile.length() returns the size in Bytes but you specified .setUnit(\"MB\") above.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066840", "createdAt": "2020-06-04T08:04:03Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      example.calculateSpaceUsedByFilesWithExtension(\"dll\", directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(String extension, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.getName().endsWith(\".\" + extension)) {\n+          //we can add values to counter without addition label key-values pairs\n+          methodCallCounter.add((double) file.length() / 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75eee2aa744e9f7733a2783669e7dbde5142c61", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b75eee2aa744e9f7733a2783669e7dbde5142c61", "committedDate": "2020-06-04T10:04:28Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e65cee6950caf2dcdec3bffddea34a33cf1ea13", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e65cee6950caf2dcdec3bffddea34a33cf1ea13", "committedDate": "2020-06-04T10:04:48Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f2ea70b3a016c16ab195ad2c8f4c7ac4578a23", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/58f2ea70b3a016c16ab195ad2c8f4c7ac4578a23", "committedDate": "2020-06-04T10:06:10Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "committedDate": "2020-06-04T15:01:21Z", "message": "feat: apply review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTU5NDc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-424559477", "createdAt": "2020-06-04T15:19:24Z", "commit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxOToyNFrOGfLGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNDozN1rOGfLzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MDk2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final DoubleCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final DoubleCounter diskSpaceCounter = sampleMeter\n          \n      \n    \n    \n  \n\nyou're no longer counting method calls ;-)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435340966", "createdAt": "2020-06-04T15:19:24Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTE1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);\n          \n          \n            \n                        diskSpaceCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341153", "createdAt": "2020-06-04T15:19:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs\n+            methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n          \n      \n    \n    \n  \n\nYou would usually supply the same library version as for the meter below.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341860", "createdAt": "2020-06-04T15:20:37Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //we can add values to counter without addition label key-values pairs\n          \n          \n            \n                        // we can add values to the counter for specific labels\n          \n          \n            \n                        // the label key is \"file_extension\", its value is the name of the extension", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343201", "createdAt": "2020-06-04T15:22:27Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzQxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343415", "createdAt": "2020-06-04T15:22:45Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Mzc1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n          \n          \n            \n             * Example of using {@link DoubleCounter} to count disk space used by files with specific extensions.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343750", "createdAt": "2020-06-04T15:23:10Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDg5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final LongCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final LongCounter directoryCounter = sampleMeter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435344898", "createdAt": "2020-06-04T15:24:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NTE3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final BoundLongCounter directoryCounter = methodCallCounter\n          \n          \n            \n              private static final BoundLongCounter homeDirectoryCounter = directoryCounter", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435345175", "createdAt": "2020-06-04T15:25:05Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjAzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      directoryCounter.add(1);\n          \n          \n            \n                      // we don't have to specify the value for the \"root directory\" label again\n          \n          \n            \n                      // since this is a BoundLongCounter with pre-set labels\n          \n          \n            \n                      homeDirectoryCounter.add(1);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346037", "createdAt": "2020-06-04T15:26:10Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory\n+      example.findFile(\"file_to_find.txt\", homeDirectory);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void findFile(String name, File directory) {\n+    File[] files = directory.listFiles();\n+    System.out.println(\"Currently looking at \" + directory.getAbsolutePath());\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.isDirectory()) {\n+          directoryCounter.add(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  directoryCounter.add(1);// count root directory\n          \n          \n            \n                  homeDirectoryCounter.add(1); // count root directory", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346433", "createdAt": "2020-06-04T15:26:40Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NzIzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count directories searched\")\n          \n          \n            \n                  .setDescription(\"Counts directories accessed while searching for files.\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435347235", "createdAt": "2020-06-04T15:27:44Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTI4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setDescription(\"should meter jvm memory usage\")\n          \n          \n            \n                    .setDescription(\"Reports JVM memory usage.\")", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435349289", "createdAt": "2020-06-04T15:30:43Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"kind\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().freeMemory(), \"kind\", \"free\");\n          \n      \n    \n    \n  \n\nTo demonstrate the advantage of using labels. Otherwise it doesn't really show why you would use them at all here.\nOne might prefer to report these as two separate metrics rather than metric dimensions, however.\n@bogdandrutu, you're more experienced with metrics. WDYT?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435352371", "createdAt": "2020-06-04T15:34:37Z", "author": {"login": "arminru"}, "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a66f2d8f78af709c53bfb97480797f96b50912d", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a66f2d8f78af709c53bfb97480797f96b50912d", "committedDate": "2020-06-04T15:44:07Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a69eb975225ba84f05abccf830c8b772cc803534", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a69eb975225ba84f05abccf830c8b772cc803534", "committedDate": "2020-06-04T15:44:22Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f2a113c964fc9b00210577fda713f28f1d77c1a", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f2a113c964fc9b00210577fda713f28f1d77c1a", "committedDate": "2020-06-04T15:44:43Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428d62b75cd1a37bbcece7b39bcb64e2b3598c88", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/428d62b75cd1a37bbcece7b39bcb64e2b3598c88", "committedDate": "2020-06-04T15:45:04Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa063682c1ef0c9f4f1cbd037cc2159f93e960d", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8fa063682c1ef0c9f4f1cbd037cc2159f93e960d", "committedDate": "2020-06-04T15:45:22Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b96ba309b568f97f3f9132c09aef9c24abded97b", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b96ba309b568f97f3f9132c09aef9c24abded97b", "committedDate": "2020-06-04T15:45:33Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820f488d8e47a6d3fd2c6c0125137d57781c160e", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/820f488d8e47a6d3fd2c6c0125137d57781c160e", "committedDate": "2020-06-04T15:45:41Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621e7ae32283ebe4eb1ce0f5b68c4ae659ef2d8c", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/621e7ae32283ebe4eb1ce0f5b68c4ae659ef2d8c", "committedDate": "2020-06-04T15:45:56Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0218e5f3d0ca41f25d58704ddaaeb2adc73ea5", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1a0218e5f3d0ca41f25d58704ddaaeb2adc73ea5", "committedDate": "2020-06-04T15:47:53Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ba3815b20e179f570687d7aab6c6774831a1720", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ba3815b20e179f570687d7aab6c6774831a1720", "committedDate": "2020-06-04T16:21:04Z", "message": "feat: apply review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a954091661b1d3fbe3c92ff4cddb054d917c8a82", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a954091661b1d3fbe3c92ff4cddb054d917c8a82", "committedDate": "2020-06-04T19:53:11Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835ba967b625ab178acaab0a5331627ecd19a4a5", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/835ba967b625ab178acaab0a5331627ecd19a4a5", "committedDate": "2020-06-04T19:54:16Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e783bb372cc5f0735191f02341e9b501a4cd56f", "author": {"user": {"login": "DotSpy", "name": "Uladzislau Kiva"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3e783bb372cc5f0735191f02341e9b501a4cd56f", "committedDate": "2020-06-04T19:55:06Z", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Nzk2NDUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#pullrequestreview-424796451", "createdAt": "2020-06-04T20:18:00Z", "commit": {"oid": "3e783bb372cc5f0735191f02341e9b501a4cd56f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}