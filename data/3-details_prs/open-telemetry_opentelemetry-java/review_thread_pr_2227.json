{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzI5OTQ1", "number": 2227, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1Njo0NVrOFCghyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0MzoxM1rOFFFAYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTc0NDA5OnYy", "diffSide": "RIGHT", "path": "api/context/src/main/java/io/opentelemetry/context/StrictContextStorage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1Njo0NVrOIBtgAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNjowMjo0MVrOIEbOxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2NDk2MQ==", "bodyText": "urgh. Any thoughts on how to keep this up-to-date if kotlin renames or changes their continuation implementation? Do we know what versions of kotlin this will work for, at this point?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2227#discussion_r538664961", "createdAt": "2020-12-08T17:56:45Z", "author": {"login": "jkwatson"}, "path": "api/context/src/main/java/io/opentelemetry/context/StrictContextStorage.java", "diffHunk": "@@ -92,6 +92,17 @@ public Scope attach(Context context) {\n     CallerStackTrace caller = new CallerStackTrace(context);\n     StackTraceElement[] stackTrace = caller.getStackTrace();\n \n+    // Detect invalid use from kotlin.\n+    for (StackTraceElement element : stackTrace) {\n+      if (element.getClassName().equals(\"kotlin.coroutines.jvm.internal.BaseContinuationImpl\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e971b6322ffdf569e1d5f1047c17bc7451ef6f2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDY4NQ==", "bodyText": "as you say...best effort is better than nothing! Just wondering if we can provide some documentation about what is supported by this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2227#discussion_r538670685", "createdAt": "2020-12-08T18:02:04Z", "author": {"login": "jkwatson"}, "path": "api/context/src/main/java/io/opentelemetry/context/StrictContextStorage.java", "diffHunk": "@@ -92,6 +92,17 @@ public Scope attach(Context context) {\n     CallerStackTrace caller = new CallerStackTrace(context);\n     StackTraceElement[] stackTrace = caller.getStackTrace();\n \n+    // Detect invalid use from kotlin.\n+    for (StackTraceElement element : stackTrace) {\n+      if (element.getClassName().equals(\"kotlin.coroutines.jvm.internal.BaseContinuationImpl\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2NDk2MQ=="}, "originalCommit": {"oid": "e971b6322ffdf569e1d5f1047c17bc7451ef6f2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxMTM2NQ==", "bodyText": "I added some doc to Context about the use of internal details, not sure how better to phrase it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2227#discussion_r541511365", "createdAt": "2020-12-12T06:02:41Z", "author": {"login": "anuraaga"}, "path": "api/context/src/main/java/io/opentelemetry/context/StrictContextStorage.java", "diffHunk": "@@ -92,6 +92,17 @@ public Scope attach(Context context) {\n     CallerStackTrace caller = new CallerStackTrace(context);\n     StackTraceElement[] stackTrace = caller.getStackTrace();\n \n+    // Detect invalid use from kotlin.\n+    for (StackTraceElement element : stackTrace) {\n+      if (element.getClassName().equals(\"kotlin.coroutines.jvm.internal.BaseContinuationImpl\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2NDk2MQ=="}, "originalCommit": {"oid": "e971b6322ffdf569e1d5f1047c17bc7451ef6f2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODY5MTIzOnYy", "diffSide": "RIGHT", "path": "extensions/kotlin/src/test/kotlin/io/opentelemetry/extension/kotlin/StrictContextWithCoroutinesTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0Mjo1OFrOIFZnww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0Mjo1OFrOIFZnww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzU3MQ==", "bodyText": "is this comment explaining why we're not re-asserting? If so, can you just add that bit to the comment? Otherwise, explain what it is for. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2227#discussion_r542533571", "createdAt": "2020-12-14T16:42:58Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/test/kotlin/io/opentelemetry/extension/kotlin/StrictContextWithCoroutinesTest.kt", "diffHunk": "@@ -141,20 +141,23 @@ class StrictContextWithCoroutinesTest {\n         Context.current().with(ANIMAL, animal).makeCurrent().use {\n             assertThat(Context.current().get(ANIMAL)).isEqualTo(animal)\n             delay(10)\n+            // May be on a different thread, in which case ANIMAL != animal!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e8def5ed63757cf068daa8f9c292dd4b5e9b08"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODY5MjE2OnYy", "diffSide": "RIGHT", "path": "extensions/kotlin/src/test/kotlin/io/opentelemetry/extension/kotlin/StrictContextWithCoroutinesTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0MzoxM1rOIFZoaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0MzoxM1rOIFZoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzczOQ==", "bodyText": "ditto on more explanatory comment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2227#discussion_r542533739", "createdAt": "2020-12-14T16:43:13Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/test/kotlin/io/opentelemetry/extension/kotlin/StrictContextWithCoroutinesTest.kt", "diffHunk": "@@ -141,20 +141,23 @@ class StrictContextWithCoroutinesTest {\n         Context.current().with(ANIMAL, animal).makeCurrent().use {\n             assertThat(Context.current().get(ANIMAL)).isEqualTo(animal)\n             delay(10)\n+            // May be on a different thread, in which case ANIMAL != animal!\n         }\n     }\n \n     suspend fun suspendingFunctionMakeCurrentWithManualClose(animal: String) {\n         val scope = Context.current().with(ANIMAL, animal).makeCurrent()\n         assertThat(Context.current().get(ANIMAL)).isEqualTo(animal)\n         delay(10)\n+        // May be on a different thread, in which case ANIMAL != animal!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e8def5ed63757cf068daa8f9c292dd4b5e9b08"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1655, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}