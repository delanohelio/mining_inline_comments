{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTY1NjY5", "number": 1691, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0MTo0OFrOEmuxLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozNToyMlrOEm5M7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDQ3NTk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0MTo0OFrOHW7v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0ODo1MVrOHW8Jdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwOTYxOQ==", "bodyText": "worth updating this to 0.9.0?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r493809619", "createdAt": "2020-09-23T18:41:48Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Object for creating new {@link Baggage}s and {@code Baggage}s based on the current context.\n+ *\n+ * <p>This class returns {@link Baggage.Builder builders} that can be used to create the\n+ * implementation-dependent {@link Baggage}s.\n+ *\n+ * <p>Implementations may have different constraints and are free to convert entry contexts to their\n+ * own subtypes. This means callers cannot assume the {@link #getCurrentBaggage() current context}\n+ * is the same instance as the one {@link #withContext(Baggage) placed into scope}.\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af4c7230063a4e130a3608529245ded44bb12749"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxMTQ4NA==", "bodyText": "that does not work with sed :))) what are you doing to me :))", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r493811484", "createdAt": "2020-09-23T18:43:55Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Object for creating new {@link Baggage}s and {@code Baggage}s based on the current context.\n+ *\n+ * <p>This class returns {@link Baggage.Builder builders} that can be used to create the\n+ * implementation-dependent {@link Baggage}s.\n+ *\n+ * <p>Implementations may have different constraints and are free to convert entry contexts to their\n+ * own subtypes. This means callers cannot assume the {@link #getCurrentBaggage() current context}\n+ * is the same instance as the one {@link #withContext(Baggage) placed into scope}.\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwOTYxOQ=="}, "originalCommit": {"oid": "af4c7230063a4e130a3608529245ded44bb12749"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxMTgzNA==", "bodyText": "Will do, probably is a good thing", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r493811834", "createdAt": "2020-09-23T18:44:15Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Object for creating new {@link Baggage}s and {@code Baggage}s based on the current context.\n+ *\n+ * <p>This class returns {@link Baggage.Builder builders} that can be used to create the\n+ * implementation-dependent {@link Baggage}s.\n+ *\n+ * <p>Implementations may have different constraints and are free to convert entry contexts to their\n+ * own subtypes. This means callers cannot assume the {@link #getCurrentBaggage() current context}\n+ * is the same instance as the one {@link #withContext(Baggage) placed into scope}.\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwOTYxOQ=="}, "originalCommit": {"oid": "af4c7230063a4e130a3608529245ded44bb12749"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNjE4Mw==", "bodyText": "made it work with sed \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r493816183", "createdAt": "2020-09-23T18:48:51Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Object for creating new {@link Baggage}s and {@code Baggage}s based on the current context.\n+ *\n+ * <p>This class returns {@link Baggage.Builder builders} that can be used to create the\n+ * implementation-dependent {@link Baggage}s.\n+ *\n+ * <p>Implementations may have different constraints and are free to convert entry contexts to their\n+ * own subtypes. This means callers cannot assume the {@link #getCurrentBaggage() current context}\n+ * is the same instance as the one {@link #withContext(Baggage) placed into scope}.\n+ *\n+ * @since 0.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwOTYxOQ=="}, "originalCommit": {"oid": "af4c7230063a4e130a3608529245ded44bb12749"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjEyMjgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoxMDo1MFrOHXLEDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNToxNzoyNlrOHYg3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDU1Ng==", "bodyText": "Nit: 2020", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r494060556", "createdAt": "2020-09-24T06:10:50Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2OTIxNA==", "bodyText": "I'm ok with merging too since we should address this globally by removing year number", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r494069214", "createdAt": "2020-09-24T06:33:26Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDU1Ng=="}, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NjMzOA==", "bodyText": "This is not a new file, it is moving the old file but github shows it as a new file for whatever reason.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r495466338", "createdAt": "2020-09-26T15:17:26Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MDU1Ng=="}, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE1MzY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoyMzozNFrOHXLWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjoyMzozNFrOHXLWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2NTIyOQ==", "bodyText": "Hmm - looks like we only removed these in SDK in #344 but we should remove them everywhere", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r494065229", "createdAt": "2020-09-24T06:23:34Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -147,15 +147,14 @@ public static Meter getMeter(String instrumentationName, String instrumentationV\n   }\n \n   /**\n-   * Returns a singleton {@link CorrelationContextManager}.\n+   * Returns a singleton {@link BaggageManager}.\n    *\n-   * @return registered manager or default via {@link\n-   *     DefaultCorrelationContextManager#getInstance()}.\n+   * @return registered manager or default via {@link DefaultBaggageManager#getInstance()}.\n    * @throws IllegalStateException if a specified manager (via system properties) could not be\n    *     found.\n    * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE4MTM1OnYy", "diffSide": "RIGHT", "path": "sdk/baggage/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozMzo1NFrOHXLmqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNToyMDo0OVrOHYg4pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2OTQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            description = 'OpenTelemetry SDK Correlation Context'\n          \n          \n            \n            description = 'OpenTelemetry SDK Baggage'", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r494069419", "createdAt": "2020-09-24T06:33:54Z", "author": {"login": "anuraaga"}, "path": "sdk/baggage/build.gradle", "diffHunk": "@@ -6,8 +6,8 @@ plugins {\n }\n \n description = 'OpenTelemetry SDK Correlation Context'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NjY2MQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r495466661", "createdAt": "2020-09-26T15:20:49Z", "author": {"login": "bogdandrutu"}, "path": "sdk/baggage/build.gradle", "diffHunk": "@@ -6,8 +6,8 @@ plugins {\n }\n \n description = 'OpenTelemetry SDK Correlation Context'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2OTQxOQ=="}, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE4NTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/baggage/BaggageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozNToyMlrOHXLo_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNToyMTo0MFrOHYg46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the {@link Baggage} from the current {@code Context}, falling back to an empty {@link\n          \n          \n            \n               * Returns the {@link Baggage} from the {@linkplain Context#current current context}, falling back to an empty {@link\n          \n      \n    \n    \n  \n\nNot required but it's the best option for writing current context in javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r494070012", "createdAt": "2020-09-24T06:35:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link Baggage} contained in the {@link io.grpc.Context}.\n+ *\n+ * @since 0.9.0\n+ */\n+@Immutable\n+public final class BaggageUtils {\n+  private static final Context.Key<Baggage> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param baggage the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.9.0\n+   */\n+  public static Context withBaggage(Baggage baggage, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, baggage);\n+  }\n+\n+  /**\n+   * Returns the {@link Baggage} from the current {@code Context}, falling back to an empty {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NjczMQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1691#discussion_r495466731", "createdAt": "2020-09-26T15:21:40Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/baggage/BaggageUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.baggage;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link Baggage} contained in the {@link io.grpc.Context}.\n+ *\n+ * @since 0.9.0\n+ */\n+@Immutable\n+public final class BaggageUtils {\n+  private static final Context.Key<Baggage> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param baggage the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.9.0\n+   */\n+  public static Context withBaggage(Baggage baggage, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, baggage);\n+  }\n+\n+  /**\n+   * Returns the {@link Baggage} from the current {@code Context}, falling back to an empty {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDAxMg=="}, "originalCommit": {"oid": "1db1072885e63eec26a748fddd311657e11e5222"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1210, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}