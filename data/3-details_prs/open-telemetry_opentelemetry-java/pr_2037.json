{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODcyNDc1", "number": 2037, "title": "Very basic Aggregation-configuration API in the SDK.", "bodyText": "Note: related OTEP: open-telemetry/oteps#126\nThis first-cut supports the following:\nselect instruments to customize by instrument type and name.\nspecify the aggregation and the temporality of the aggregation to be used.\nAn example of how you could use it:\n// get a handle to the MeterSdkProvider\n MeterSdkProvider meterProvider = OpenTelemetrySdk.getMeterProvider();\n\n // create a selector to select which instruments to customize:\n InstrumentSelector instrumentSelector = InstrumentSelector.newBuilder()\n  .instrumentType(InstrumentType.COUNTER)\n  .build();\n\n // create a specification of how you want the metrics aggregated:\n ViewSpecification viewSpecification = \n      ViewSpecification.create(Aggregations.minMaxSumCount(), Temporality.DELTA);\n\n //register the view with the MeterSdkProvider\n meterProvider.registerView(instrumentSelector, viewSpecification);", "createdAt": "2020-11-06T17:06:03Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037", "merged": true, "mergeCommit": {"oid": "c4791e9fbb65451ebeb14776a3384c45dc8f0d38"}, "closed": true, "closedAt": "2020-11-18T21:05:38Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ6OXyAFqTUyNTM0NDYzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb9j46AH2gAyNTE2ODcyNDc1OjJmNTg2MmNhNDk2ZDE4NzcwOWFiZGIzNzFjYmFiNTVkNDFjYWI0M2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzQ0NjM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-525344636", "createdAt": "2020-11-06T17:15:32Z", "commit": {"oid": "74f2bcfbda56abb25669c024efbb35f4d03d55a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODUyNTk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-527852597", "createdAt": "2020-11-11T04:24:46Z", "commit": {"oid": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoyNDo0NlrOHw9qbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoyNDo0NlrOHw9qbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzk4Mg==", "bodyText": "Mostly makes sense but I'm wondering why is this a best match? Shouldn't the aggregation configuration be more precise?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521103982", "createdAt": "2020-11-11T04:24:46Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java", "diffHunk": "@@ -36,39 +54,70 @@ Batcher createBatcher(\n       MeterSharedState meterSharedState,\n       InstrumentDescriptor descriptor) {\n \n-    Aggregation aggregation = getRegisteredAggregation(descriptor);\n+    AggregationConfiguration specification = findBestMatch(descriptor);\n \n-    // todo: don't just use the defaults!\n-    switch (descriptor.getType()) {\n-      case COUNTER:\n-      case UP_DOWN_COUNTER:\n-      case SUM_OBSERVER:\n-      case UP_DOWN_SUM_OBSERVER:\n-        return Batchers.getCumulativeAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n-      case VALUE_RECORDER:\n-        // TODO: Revisit the batcher used here for value observers,\n-        // currently this does not remove duplicate records in the same cycle.\n-      case VALUE_OBSERVER:\n-        return Batchers.getDeltaAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    Aggregation aggregation = specification.aggregation();\n+\n+    if (Temporality.CUMULATIVE == specification.temporality()) {\n+      return Batchers.getCumulativeAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    } else if (Temporality.DELTA == specification.temporality()) {\n+      return Batchers.getDeltaAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n     }\n-    throw new IllegalArgumentException(\"Unknown descriptor type: \" + descriptor.getType());\n+    throw new IllegalStateException(\"unsupported Temporality: \" + specification.temporality());\n   }\n \n-  private static Aggregation getRegisteredAggregation(InstrumentDescriptor descriptor) {\n-    // todo look up based on fields of the descriptor.\n+  // todo: consider moving this method to its own class, for more targeted testing.\n+  private AggregationConfiguration findBestMatch(InstrumentDescriptor descriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODc1NDM1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-527875435", "createdAt": "2020-11-11T05:39:30Z", "commit": {"oid": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTozOTozMVrOHw-54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTozOTozMVrOHw-54g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNDMyMg==", "bodyText": "I'd just name the method getAggregation and the loop can have a comment // See if user defined a specific configuration for this descriptor, the definition itself seems precise, not best-effort.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521124322", "createdAt": "2020-11-11T05:39:31Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java", "diffHunk": "@@ -36,39 +54,70 @@ Batcher createBatcher(\n       MeterSharedState meterSharedState,\n       InstrumentDescriptor descriptor) {\n \n-    Aggregation aggregation = getRegisteredAggregation(descriptor);\n+    AggregationConfiguration specification = findBestMatch(descriptor);\n \n-    // todo: don't just use the defaults!\n-    switch (descriptor.getType()) {\n-      case COUNTER:\n-      case UP_DOWN_COUNTER:\n-      case SUM_OBSERVER:\n-      case UP_DOWN_SUM_OBSERVER:\n-        return Batchers.getCumulativeAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n-      case VALUE_RECORDER:\n-        // TODO: Revisit the batcher used here for value observers,\n-        // currently this does not remove duplicate records in the same cycle.\n-      case VALUE_OBSERVER:\n-        return Batchers.getDeltaAllLabels(\n-            descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    Aggregation aggregation = specification.aggregation();\n+\n+    if (Temporality.CUMULATIVE == specification.temporality()) {\n+      return Batchers.getCumulativeAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n+    } else if (Temporality.DELTA == specification.temporality()) {\n+      return Batchers.getDeltaAllLabels(\n+          descriptor, meterProviderSharedState, meterSharedState, aggregation);\n     }\n-    throw new IllegalArgumentException(\"Unknown descriptor type: \" + descriptor.getType());\n+    throw new IllegalStateException(\"unsupported Temporality: \" + specification.temporality());\n   }\n \n-  private static Aggregation getRegisteredAggregation(InstrumentDescriptor descriptor) {\n-    // todo look up based on fields of the descriptor.\n+  // todo: consider moving this method to its own class, for more targeted testing.\n+  private AggregationConfiguration findBestMatch(InstrumentDescriptor descriptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzk4Mg=="}, "originalCommit": {"oid": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89937a904c1fca5ce76ba43e4e46cd7812ed0a0c", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89937a904c1fca5ce76ba43e4e46cd7812ed0a0c", "committedDate": "2020-11-06T17:40:30Z", "message": "Adjust defaults based on the latest behavior"}, "afterCommit": {"oid": "9b59559678d4d7f5e4fe6fed2a413765baf852dc", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b59559678d4d7f5e4fe6fed2a413765baf852dc", "committedDate": "2020-11-11T18:26:07Z", "message": "Adjust defaults based on the latest behavior"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NzY2NjAw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-528766600", "createdAt": "2020-11-12T05:49:11Z", "commit": {"oid": "9ff19d1829b8763dac266f54127a79867d0a7074"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTo0OToxMlrOHxreKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTo0OToxMlrOHxreKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NDUwNA==", "bodyText": "Needs some javadoc for a few of the classes", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r521854504", "createdAt": "2020-11-12T05:49:12Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff19d1829b8763dac266f54127a79867d0a7074"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631d00f9d92ecf3578190e2ded610f2977ea44eb", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/631d00f9d92ecf3578190e2ded610f2977ea44eb", "committedDate": "2020-11-12T18:06:59Z", "message": "Create a very basic view API in the SDK."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bbbe44633d10e1fc000add4fc20aa188cbd02ed", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9bbbe44633d10e1fc000add4fc20aa188cbd02ed", "committedDate": "2020-11-12T18:06:59Z", "message": "fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6063ff45f5ccacab7dc12ecb28a7e86a840d8f94", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6063ff45f5ccacab7dc12ecb28a7e86a840d8f94", "committedDate": "2020-11-12T18:06:59Z", "message": "move the ViewRegistry up one package, and clean up the visibility of other classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8432091a84adf183c475b558bef598a506e002da", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8432091a84adf183c475b558bef598a506e002da", "committedDate": "2020-11-12T18:06:59Z", "message": "Support matching by instrument name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe903d8d64fed385357e7131c771fec13bddb1b", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cbe903d8d64fed385357e7131c771fec13bddb1b", "committedDate": "2020-11-12T18:06:59Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/ViewRegistry.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d42a9deecca46999f24391726250a976b1663988", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d42a9deecca46999f24391726250a976b1663988", "committedDate": "2020-11-12T18:06:59Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7742cf93c28b935742ff7910f74ccc47a89b1cad", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7742cf93c28b935742ff7910f74ccc47a89b1cad", "committedDate": "2020-11-12T18:06:59Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2884372789210825c89ec316d529f31ffa650d", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed2884372789210825c89ec316d529f31ffa650d", "committedDate": "2020-11-12T18:06:59Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab50fc9296271e18a1044ab041456e9a5cda4179", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab50fc9296271e18a1044ab041456e9a5cda4179", "committedDate": "2020-11-12T18:06:59Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/ViewSpecification.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856ca821601430bd12addfd9dcab15a1f220ce57", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/856ca821601430bd12addfd9dcab15a1f220ce57", "committedDate": "2020-11-12T18:06:59Z", "message": "fix formatting issues from GH"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa2b3d5e93ae22618976ffae04c0ebeb45c681f", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/eaa2b3d5e93ae22618976ffae04c0ebeb45c681f", "committedDate": "2020-11-12T18:06:59Z", "message": "small renaming to a big name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d07c945dfda9d651a6a4e00e0c632fbde0a521b", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d07c945dfda9d651a6a4e00e0c632fbde0a521b", "committedDate": "2020-11-12T18:06:59Z", "message": "small renaming to a big name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230627d2dc00310edaf1b4e2283aa3bc15ee4f1e", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/230627d2dc00310edaf1b4e2283aa3bc15ee4f1e", "committedDate": "2020-11-12T18:06:59Z", "message": "re-order matching check and fix a merge issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36d6887c729f0fa745fdfc11532d96223a365968", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36d6887c729f0fa745fdfc11532d96223a365968", "committedDate": "2020-11-12T18:06:59Z", "message": "Update from upstream changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bbf16f8d7407e1a4c08c4f21013cb8fbfd3a2d", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b1bbf16f8d7407e1a4c08c4f21013cb8fbfd3a2d", "committedDate": "2020-11-12T18:06:59Z", "message": "Update from upstream changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f2967926fffa12a13ffceadcd8eccade37ea20", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7f2967926fffa12a13ffceadcd8eccade37ea20", "committedDate": "2020-11-12T18:06:59Z", "message": "Adjust defaults based on the latest behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3c72f1206e6090dda691145d76f6d49992d284", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a3c72f1206e6090dda691145d76f6d49992d284", "committedDate": "2020-11-12T18:06:59Z", "message": "refactor before writing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96785319061fca577e46a026025eecb9e145bcec", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/96785319061fca577e46a026025eecb9e145bcec", "committedDate": "2020-11-12T18:06:59Z", "message": "tests for the AggregationChooser and a bugfix they uncovered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "committedDate": "2020-11-12T18:44:14Z", "message": "tests for the ViewRegistry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ff19d1829b8763dac266f54127a79867d0a7074", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ff19d1829b8763dac266f54127a79867d0a7074", "committedDate": "2020-11-12T00:09:56Z", "message": "tests for the AggregationChooser and a bugfix they uncovered"}, "afterCommit": {"oid": "77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77f5c7fb42b8e2802a3e2c0382aefda452a3d083", "committedDate": "2020-11-12T18:44:14Z", "message": "tests for the ViewRegistry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85e464ad48c9f85ce608c0fcc7f12de7e857586", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c85e464ad48c9f85ce608c0fcc7f12de7e857586", "committedDate": "2020-11-12T18:51:05Z", "message": "Javadoc for the AggregationConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9", "committedDate": "2020-11-12T19:08:01Z", "message": "Add more javadoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjA1MjIy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-529605222", "createdAt": "2020-11-13T00:12:45Z", "commit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMjo0NVrOHyUKXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxNjowNVrOHyUOpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Does this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */\n          \n          \n            \n              /** Returns whether this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521182", "createdAt": "2020-11-13T00:12:45Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java", "diffHunk": "@@ -51,4 +51,7 @@\n    * @return the list of metrics batched in this Batcher.\n    */\n   List<MetricData> completeCollectionCycle();\n+\n+  /** Does this batcher generate \"delta\" style metrics. The alternative is \"cumulative\". */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTM2NQ==", "bodyText": "Think you can use Objects.hashCode instead of your own null checks", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521365", "createdAt": "2020-11-13T00:13:27Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batchers.java", "diffHunk": "@@ -155,6 +160,75 @@ public final void batch(Labels labelSet, Aggregator aggregator, boolean unmapped\n               aggregation.getDescriptorType(descriptor.getType(), descriptor.getValueType()),\n               points));\n     }\n+\n+    @Override\n+    public boolean generatesDeltas() {\n+      return delta;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+\n+      AllLabels allLabels = (AllLabels) o;\n+\n+      if (startEpochNanos != allLabels.startEpochNanos) {\n+        return false;\n+      }\n+      if (delta != allLabels.delta) {\n+        return false;\n+      }\n+      if (descriptor != null\n+          ? !descriptor.equals(allLabels.descriptor)\n+          : allLabels.descriptor != null) {\n+        return false;\n+      }\n+      if (aggregation != null\n+          ? !aggregation.equals(allLabels.aggregation)\n+          : allLabels.aggregation != null) {\n+        return false;\n+      }\n+      if (resource != null ? !resource.equals(allLabels.resource) : allLabels.resource != null) {\n+        return false;\n+      }\n+      if (instrumentationLibraryInfo != null\n+          ? !instrumentationLibraryInfo.equals(allLabels.instrumentationLibraryInfo)\n+          : allLabels.instrumentationLibraryInfo != null) {\n+        return false;\n+      }\n+      if (clock != null ? !clock.equals(allLabels.clock) : allLabels.clock != null) {\n+        return false;\n+      }\n+      if (aggregatorFactory != null\n+          ? !aggregatorFactory.equals(allLabels.aggregatorFactory)\n+          : allLabels.aggregatorFactory != null) {\n+        return false;\n+      }\n+      return aggregatorMap != null\n+          ? aggregatorMap.equals(allLabels.aggregatorMap)\n+          : allLabels.aggregatorMap == null;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int result = descriptor != null ? descriptor.hashCode() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTQzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Create a new configuration with the provided options. */\n          \n          \n            \n              /** Returns a new configuration with the provided options. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521435", "createdAt": "2020-11-13T00:13:42Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Which {@link Aggregation} should be used for this View. */\n          \n          \n            \n              /** Returns the {@link Aggregation} that should be used for this View. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521488", "createdAt": "2020-11-13T00:13:51Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTUzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** What {@link Temporality} should be used for this View (delta vs. cumulative). */\n          \n          \n            \n              /** Returns the {@link Temporality} that should be used for this View (delta vs. cumulative). */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521533", "createdAt": "2020-11-13T00:14:00Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.api.metrics.Instrument;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * An AggregationConfiguration describes how an aggregation should be performed. It includes both an\n+ * {@link Aggregation} which implements what shape of aggregation is created (i.e. histogram, sum,\n+ * minMaxSumCount, etc), and a {@link AggregationConfiguration.Temporality} which describes whether\n+ * aggregations should be reset with every collection interval, or continue to accumulate across\n+ * collection intervals.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  /** Create a new configuration with the provided options. */\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */\n+  public abstract Aggregation aggregation();\n+\n+  /** What {@link Temporality} should be used for this View (delta vs. cumulative). */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTYyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n          \n          \n            \n               * Returns {@link InstrumentType} that should be selected. If null, then this specifier will not be used.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521620", "createdAt": "2020-11-13T00:14:17Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * What instrument names should be selected. This is a regex. If null, then this specifier will\n          \n          \n            \n               * Returns which instrument names should be selected. This is a regex. If null, then this specifier will", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521767", "createdAt": "2020-11-13T00:14:39Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n          \n          \n            \n               * Returns the {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521843", "createdAt": "2020-11-13T00:14:47Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Whether the InstrumentType been specified. */\n          \n          \n            \n              /** Returns whether the InstrumentType been specified. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521874", "createdAt": "2020-11-13T00:14:54Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Whether the instrument name regex been specified. */\n          \n          \n            \n              /** Returns whether the instrument name regex been specified. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521925", "createdAt": "2020-11-13T00:15:00Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Provide a specifier for {@link InstrumentType}. */\n          \n          \n            \n                /** Sets a specifier for {@link InstrumentType}. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522521994", "createdAt": "2020-11-13T00:15:13Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjA0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Provide a specifier for selecting Instruments by name. */\n          \n          \n            \n                /** Sets a specifier for selecting Instruments by name. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522040", "createdAt": "2020-11-13T00:15:20Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */\n+    Builder instrumentType(InstrumentType instrumentType);\n+\n+    /** Provide a specifier for selecting Instruments by name. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjEwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Create an InstrumentSelector instance. */\n          \n          \n            \n                /** Returns an InstrumentSelector instance with the content of this builder. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522106", "createdAt": "2020-11-13T00:15:30Z", "author": {"login": "anuraaga"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.\n+ *\n+ * <p>There are two options for selecting instruments: by instrument name and by instrument type.\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {\n+  public static Builder newBuilder() {\n+    return new AutoValue_InstrumentSelector.Builder();\n+  }\n+\n+  /**\n+   * What {@link InstrumentType} should be selected. If null, then this specifier will not be used.\n+   */\n+  @Nullable\n+  public abstract InstrumentType instrumentType();\n+\n+  /**\n+   * What instrument names should be selected. This is a regex. If null, then this specifier will\n+   * not be used.\n+   */\n+  @Nullable\n+  public abstract String instrumentNameRegex();\n+\n+  /**\n+   * The {@link Pattern} generated by the provided {@link #instrumentNameRegex()}, or null if none\n+   * was specified.\n+   */\n+  @Nullable\n+  @Memoized\n+  public Pattern instrumentNamePattern() {\n+    return instrumentNameRegex() == null ? null : Pattern.compile(instrumentNameRegex());\n+  }\n+\n+  /** Whether the InstrumentType been specified. */\n+  public boolean hasInstrumentType() {\n+    return instrumentType() != null;\n+  }\n+\n+  /** Whether the instrument name regex been specified. */\n+  public boolean hasInstrumentNameRegex() {\n+    return instrumentNameRegex() != null;\n+  }\n+\n+  /** Builder for {@link InstrumentSelector} instances. */\n+  @AutoValue.Builder\n+  public interface Builder {\n+    /** Provide a specifier for {@link InstrumentType}. */\n+    Builder instrumentType(InstrumentType instrumentType);\n+\n+    /** Provide a specifier for selecting Instruments by name. */\n+    Builder instrumentNameRegex(String regex);\n+\n+    /** Create an InstrumentSelector instance. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE1OQ==", "bodyText": "javadoc?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522159", "createdAt": "2020-11-13T00:15:41Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Which {@link Aggregation} should be used for this View. */\n          \n          \n            \n              /** Returns the {@link Aggregation} that should be used for this View. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522243", "createdAt": "2020-11-13T00:15:58Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.metrics.Instrument;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjI3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** What {@link Temporality} should be used for this View (delta vs. cumulative). */\n          \n          \n            \n              /** Returns the {@link Temporality} that should be used for this View (delta vs. cumulative). */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522522279", "createdAt": "2020-11-13T00:16:05Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.metrics.Instrument;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class AggregationConfiguration {\n+\n+  public static AggregationConfiguration create(Aggregation aggregation, Temporality temporality) {\n+    return new AutoValue_AggregationConfiguration(aggregation, temporality);\n+  }\n+\n+  /** Which {@link Aggregation} should be used for this View. */\n+  @Nullable\n+  public abstract Aggregation aggregation();\n+\n+  /** What {@link Temporality} should be used for this View (delta vs. cumulative). */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567c16e1c3cdc7f32a814e7b1f5d9e1482245cd6", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/567c16e1c3cdc7f32a814e7b1f5d9e1482245cd6", "committedDate": "2020-11-13T00:41:06Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/Batcher.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a29fda734a8321d2a294d8214223f10a13d4fc", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/79a29fda734a8321d2a294d8214223f10a13d4fc", "committedDate": "2020-11-13T00:41:15Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d546478f4f1edd7c8b673d68cd524f98b489e0", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/25d546478f4f1edd7c8b673d68cd524f98b489e0", "committedDate": "2020-11-13T00:41:26Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55537f01beb9e627d7dc48b2e5e4cfd7a41844f3", "committedDate": "2020-11-13T00:41:35Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a83241f2ad995d702b7c4dffe78646b87a6fbf", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/02a83241f2ad995d702b7c4dffe78646b87a6fbf", "committedDate": "2020-11-13T00:41:47Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7e4b59be6730eebbc068902436d494fb84d1b1b", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c7e4b59be6730eebbc068902436d494fb84d1b1b", "committedDate": "2020-11-13T00:41:58Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd42ee340fc971fda17b8bd2e7fcd78a05cc49ff", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd42ee340fc971fda17b8bd2e7fcd78a05cc49ff", "committedDate": "2020-11-13T00:42:10Z", "message": "Update sdk/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b763619ef4321bc47328ef9bba3bbe2414f8d8", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28b763619ef4321bc47328ef9bba3bbe2414f8d8", "committedDate": "2020-11-13T00:42:27Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/AggregationConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444c3b9ddf35920ee98c1a656486fe54a8f150a0", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/444c3b9ddf35920ee98c1a656486fe54a8f150a0", "committedDate": "2020-11-13T00:42:43Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e94bc6b0a45c3b2c1d198b5fa4feb7778df2c80", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5e94bc6b0a45c3b2c1d198b5fa4feb7778df2c80", "committedDate": "2020-11-13T00:42:57Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41180b2d040688e1be9756f8d1a6e9e7d51f7fd0", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/41180b2d040688e1be9756f8d1a6e9e7d51f7fd0", "committedDate": "2020-11-13T00:43:12Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd60c114277c2a4068e9aea2aa82a4bda1f70de6", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bd60c114277c2a4068e9aea2aa82a4bda1f70de6", "committedDate": "2020-11-13T00:43:47Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d99012d9a6aaa41484ba7d5cda320d1572eaabc6", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d99012d9a6aaa41484ba7d5cda320d1572eaabc6", "committedDate": "2020-11-13T00:44:06Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d783b324286cd972a8229b25b0cd6b017e9de2c", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5d783b324286cd972a8229b25b0cd6b017e9de2c", "committedDate": "2020-11-13T00:44:43Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816c35cfa9217f02ede1e2630f1c30358dffcd2f", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/816c35cfa9217f02ede1e2630f1c30358dffcd2f", "committedDate": "2020-11-13T00:53:39Z", "message": "fix formatting issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQ4ODMz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-529648833", "createdAt": "2020-11-13T02:03:27Z", "commit": {"oid": "816c35cfa9217f02ede1e2630f1c30358dffcd2f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowMzoyN1rOHyWoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowMzoyN1rOHyWoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MTYyOA==", "bodyText": "Checked the PR locally and indeed - weirdest thing I've seen.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522561628", "createdAt": "2020-11-13T02:03:27Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+@AutoValue\n+@Immutable\n+public abstract class InstrumentSelector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE1OQ=="}, "originalCommit": {"oid": "778a8a318a0d2aaf2f80e5c2301a6948f6abf4e9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjU1MzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#pullrequestreview-529655349", "createdAt": "2020-11-13T02:16:29Z", "commit": {"oid": "816c35cfa9217f02ede1e2630f1c30358dffcd2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjoxNjozMFrOHyXCzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjoxNjozMFrOHyXCzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODM5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * for configuring a aggregations for the specified instruments.\n          \n          \n            \n             * for configuring aggregations for the specified instruments.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2037#discussion_r522568398", "createdAt": "2020-11-13T02:16:30Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.view;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.auto.value.extension.memoized.Memoized;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Provides means for selecting one ore more {@link io.opentelemetry.api.metrics.Instrument}s. Used\n+ * for configuring a aggregations for the specified instruments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "816c35cfa9217f02ede1e2630f1c30358dffcd2f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f5862ca496d187709abdb371cbab55d41cab43a", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2f5862ca496d187709abdb371cbab55d41cab43a", "committedDate": "2020-11-13T02:16:36Z", "message": "Update sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/view/InstrumentSelector.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3983, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}