{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTAxOTY1", "number": 904, "title": "Initial relocation of ContextUtils classes.", "bodyText": "Now they will live within their own child propagation package (instead of unsafe), with a prefix based on their cross-cutting concern, to be referenced easily.\nNOTE: Context.Key instances now don't have a default value, and we provide an actual default when they return null. The reason for this is that, upon Injection, we want to detect whether there's an actual value in Context:\n// Inject\nSpan span = CONTEXT_SPAN_KEY.get(Context.current());\nif (span == null) {\n  // Nothing to inject.\n  return;\n}\nAn alternative would be to check against DefaultSpan.getInvalid() if we offer such default value along the key.\nBecause of this, we offer getSpan() and getSpanWithDefault() variants (SpanBuilderSdk uses the former to easily check that Span is not a no-op instance, for example).\nI'm open to discuss this detail though.\nThis has been split from #720", "createdAt": "2020-02-21T04:49:50Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904", "merged": true, "mergeCommit": {"oid": "1d913cb6391568e5df04b6b642f97cae45191d64"}, "closed": true, "closedAt": "2020-03-08T17:34:47Z", "author": {"login": "carlosalberto"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGYSpZgH2gAyMzc4MTAxOTY1OmM3Y2UzZmY3ZWEwNWY1MmQ4ZTI4MzkyNGU4NTA2MDgzOTU5NjE4Y2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLsVjkgH2gAyMzc4MTAxOTY1OjU4YTY2YjY0NDk1YzcyZjIyMWRjMjI0OGI0MzM4MWFlMWMxMmFkM2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c7ce3ff7ea05f52d8e283924e8506083959618cf", "committedDate": "2020-02-21T04:47:43Z", "message": "Initial relocation of ContextUtils classes.\n\nNow they will live within the child `propagation` package,\nwith a prefix based on their cross-cutting concern, to be\nreferenced easily."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDc1OTEy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-362475912", "createdAt": "2020-02-21T08:50:33Z", "commit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MDozM1rOFsvjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxOToyMlrOFswW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MDg3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Context.current().withValue(DIST_CONTEXT_KEY, distContext);\n          \n          \n            \n                return withCorrelationContext(distContext, Context.current());", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382460875", "createdAt": "2020-02-21T08:50:33Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -44,7 +45,7 @@\n    * @return a new context with the given value set.\n    * @since 0.1.0\n    */\n-  public static Context withValue(CorrelationContext distContext) {\n+  public static Context withCorrelationContext(CorrelationContext distContext) {\n     return Context.current().withValue(DIST_CONTEXT_KEY, distContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NTQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Context.key(\"opentelemetry-dist-context-key\");\n          \n          \n            \n                  Context.key(\"opentelemetry-correlation-context-key\");", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382465416", "createdAt": "2020-02-21T09:00:42Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -32,10 +33,10 @@\n  * @since 0.1.0\n  */\n @Immutable\n-public final class ContextUtils {\n+public final class CorrelationsContextUtils {\n   private static final Context.Key<CorrelationContext> DIST_CONTEXT_KEY =\n-      Context.keyWithDefault(\n-          \"opentelemetry-dist-context-key\", EmptyCorrelationContext.getInstance());\n+      Context.key(\"opentelemetry-dist-context-key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NjA1MQ==", "bodyText": "0.3.0?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382466051", "createdAt": "2020-02-21T09:01:54Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtils.java", "diffHunk": "@@ -77,10 +78,23 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n+  public static CorrelationContext getCorrelationContext(Context context) {\n     return DIST_CONTEXT_KEY.get(context);\n   }\n \n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MDYwNQ==", "bodyText": "Since the method name changed, I would s/value/span in this and in the next methods' Javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382470605", "createdAt": "2020-02-21T09:12:19Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MzY4OQ==", "bodyText": "Why DistributedContext in the name?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382473689", "createdAt": "2020-02-21T09:18:48Z", "author": {"login": "thisthat"}, "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "diffHunk": "@@ -24,40 +24,37 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link ContextUtils}. */\n+/** Unit tests for {@link CorrelationsContextUtils}. */\n @RunWith(JUnit4.class)\n-public final class ContextUtilsTest {\n+public final class CorrelationsContextUtilsTest {\n   @Test\n-  public void testGetCurrentCorrelationContex_DefaultContext() {\n-    CorrelationContext distContext = ContextUtils.getValue(Context.current());\n-    assertThat(distContext).isNotNull();\n-    assertThat(distContext.getEntries()).isEmpty();\n+  public void testGetCurrentDistributedContext_DefaultContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3Mzk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CorrelationContext distContext =\n          \n          \n            \n                CorrelationContext corrContext =", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382473948", "createdAt": "2020-02-21T09:19:22Z", "author": {"login": "thisthat"}, "path": "api/src/test/java/io/opentelemetry/correlationcontext/propagation/CorrelationsContextUtilsTest.java", "diffHunk": "@@ -24,40 +24,37 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n-/** Unit tests for {@link ContextUtils}. */\n+/** Unit tests for {@link CorrelationsContextUtils}. */\n @RunWith(JUnit4.class)\n-public final class ContextUtilsTest {\n+public final class CorrelationsContextUtilsTest {\n   @Test\n-  public void testGetCurrentCorrelationContex_DefaultContext() {\n-    CorrelationContext distContext = ContextUtils.getValue(Context.current());\n-    assertThat(distContext).isNotNull();\n-    assertThat(distContext.getEntries()).isEmpty();\n+  public void testGetCurrentDistributedContext_DefaultContext() {\n+    CorrelationContext distContext =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODE2MjQ1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-362816245", "createdAt": "2020-02-21T18:07:21Z", "commit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowNzoyMVrOFs_0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowOToyMlrOFs_34w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzI5OQ==", "bodyText": "I would keep them just in \"trace\".", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382727299", "createdAt": "2020-02-21T18:07:21Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ==", "bodyText": "Not sure why we need 2 elements in the Context", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382727665", "createdAt": "2020-02-21T18:08:13Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODE2Mw==", "bodyText": "Are we suggesting to add always both of them? It is hard to keep them in sync probably.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r382728163", "createdAt": "2020-02-21T18:09:22Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.ContextUtils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");\n+  private static final Span DEFAULT_SPAN = DefaultSpan.getInvalid();\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param span the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span, Context context) {\n+    return context.withValue(CONTEXT_SPAN_KEY, span);\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@code SpanContext} set.\n+   *\n+   * @param spanContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.3.0\n+   */\n+  public static Context withSpanContext(SpanContext spanContext) {\n+    return withSpanContext(spanContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzY2NQ=="}, "originalCommit": {"oid": "c7ce3ff7ea05f52d8e283924e8506083959618cf"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a13962c7453d60fc8da9dff194f233fe1e238c", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f9a13962c7453d60fc8da9dff194f233fe1e238c", "committedDate": "2020-02-25T04:36:57Z", "message": "Style/typos/fixes for names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/93c9698c976a96ec0333f0bfa2d902d9b3596868", "committedDate": "2020-02-25T05:10:06Z", "message": "Puyt the *ContextUtils at their top-level directories."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12b924aab7d2cf90fd8531bcbcb86ed58e263a9b", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/12b924aab7d2cf90fd8531bcbcb86ed58e263a9b", "committedDate": "2020-02-25T04:58:52Z", "message": "Puyt the *ContextUtils at their top-level directories."}, "afterCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/93c9698c976a96ec0333f0bfa2d902d9b3596868", "committedDate": "2020-02-25T05:10:06Z", "message": "Puyt the *ContextUtils at their top-level directories."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjMxNjA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-365231608", "createdAt": "2020-02-26T20:50:36Z", "commit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo1MDozNlrOFu7ttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo1MDozNlrOFu7ttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1NzE3NA==", "bodyText": "Why not having getCorrelationContext never return null as it was before?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r384757174", "createdAt": "2020-02-26T20:50:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -77,21 +76,35 @@ public static CorrelationContext getValue() {\n    * @return the value from the specified {@code Context}.\n    * @since 0.1.0\n    */\n-  public static CorrelationContext getValue(Context context) {\n-    return DIST_CONTEXT_KEY.get(context);\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns the value from the specified {@code Context}, falling back to a default, no-op {@link\n+   * CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the value from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContextWithDefault(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? DEFAULT_VALUE : corrContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93c9698c976a96ec0333f0bfa2d902d9b3596868"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3d1b72c00877ac4666929e64ea08f5e6f301dc3", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d3d1b72c00877ac4666929e64ea08f5e6f301dc3", "committedDate": "2020-03-05T01:01:55Z", "message": "Have the default versions of *ContextUtils return no-op values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71193e5e9c3eed21ae07d8d8692025fb87462770", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/71193e5e9c3eed21ae07d8d8692025fb87462770", "committedDate": "2020-03-05T01:09:14Z", "message": "Remove for now the SpanContext bits from TracingContextUtils."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/acef22237e73a36efca4d49c9fef5230dd682758", "committedDate": "2020-03-05T01:26:35Z", "message": "Merge branch 'master' into contextutils_relocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjkxMjM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-369691237", "createdAt": "2020-03-05T15:56:06Z", "commit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NjowNlrOFyZRAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOToyNlrOFyZ3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NzA3Mg==", "bodyText": "I think you better say:\nempty {@link CorrelationContext}.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388387072", "createdAt": "2020-03-05T15:56:06Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4ODg3Mg==", "bodyText": "Not sure I understand this comment. I think I am ok with people using these methods directly.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388388872", "createdAt": "2020-03-05T15:58:40Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MDgzMQ==", "bodyText": "Let's remove this for the moment, people can use the other version.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388390831", "createdAt": "2020-03-05T16:00:42Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MTE1NA==", "bodyText": "getCurrentCorrelationContext?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388391154", "createdAt": "2020-03-05T16:01:02Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTM2Ng==", "bodyText": "This needs to signal that it interacts with the \"Current\" Context. Maybe rename:\ncurrentContextWith(CorrelationContext corrContext)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388395366", "createdAt": "2020-03-05T16:07:14Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/CorrelationsContextUtils.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.correlationcontext;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Utility methods for accessing the {@link CorrelationContext} contained in the {@link\n+ * io.grpc.Context}.\n+ *\n+ * <p>Most code should interact with the current context via the public APIs in {@link\n+ * CorrelationContext} and avoid accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class CorrelationsContextUtils {\n+  private static final Context.Key<CorrelationContext> CORR_CONTEXT_KEY =\n+      Context.key(\"opentelemetry-corr-context-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext) {\n+    return withCorrelationContext(corrContext, Context.current());\n+  }\n+\n+  /**\n+   * Creates a new {@code Context} with the given value set.\n+   *\n+   * @param corrContext the value to be set.\n+   * @param context the parent {@code Context}.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withCorrelationContext(CorrelationContext corrContext, Context context) {\n+    return context.withValue(CORR_CONTEXT_KEY, corrContext);\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the current {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @return the {@link CorrelationContext} from the current {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext() {\n+    return getCorrelationContext(Context.current());\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}, falling back to a\n+   * default, no-op {@link CorrelationContext}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.3.0\n+   */\n+  public static CorrelationContext getCorrelationContext(Context context) {\n+    CorrelationContext corrContext = CORR_CONTEXT_KEY.get(context);\n+    return corrContext == null ? EmptyCorrelationContext.getInstance() : corrContext;\n+  }\n+\n+  /**\n+   * Returns the {@link CorrelationContext} from the specified {@code Context}. If none is found,\n+   * this method returns {code null}.\n+   *\n+   * @param context the specified {@code Context}.\n+   * @return the {@link CorrelationContext} from the specified {@code Context}.\n+   * @since 0.1.0\n+   */\n+  @Nullable\n+  public static CorrelationContext getCorrelationContextWithoutDefault(Context context) {\n+    return CORR_CONTEXT_KEY.get(context);\n+  }\n+\n+  /**\n+   * Returns a new {@link Scope} encapsulating the provided {@link CorrelationContext} added to the\n+   * current {@code Context}.\n+   *\n+   * @param corrContext the {@link CorrelationContext} to be added to the current {@code Context}.\n+   * @return the {@link Scope} for the updated {@code Context}.\n+   * @since 0.1.0\n+   */\n+  public static Scope withScopedCorrelationContext(CorrelationContext corrContext) {\n+    Context context = withCorrelationContext(corrContext);\n+    return ContextUtils.withScopedContext(context);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ5Mg==", "bodyText": "Can we file an issue to remove these? Also I would suggest removing them because adding them later is backwards  compatible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388396492", "createdAt": "2020-03-05T16:08:50Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjkwOQ==", "bodyText": "Remove this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388396909", "createdAt": "2020-03-05T16:09:26Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+  private static final Context.Key<SpanContext> CONTEXT_SPANCONTEXT_KEY =\n+      Context.<SpanContext>key(\"opentelemetry-trace-spancontext-key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzA0NjQ3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-369704647", "createdAt": "2020-03-05T16:09:51Z", "commit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOTo1MVrOFyZ4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowOTo1MVrOFyZ4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NzE3Ng==", "bodyText": "Same comments apply here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r388397176", "createdAt": "2020-03-05T16:09:51Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * <p>Users must interact with the current Context via the public APIs in {@link Tracer} and avoid\n+ * accessing this class directly.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acef22237e73a36efca4d49c9fef5230dd682758"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4249cd1f1029a6effe9634cfc25437dc2730b04", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b4249cd1f1029a6effe9634cfc25437dc2730b04", "committedDate": "2020-03-05T19:48:29Z", "message": "Remove more SpanContext related bits."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb909129ebd720641eca4c3e997df618f5aed0ab", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fb909129ebd720641eca4c3e997df618f5aed0ab", "committedDate": "2020-03-05T19:56:25Z", "message": "Rename the parameterless get*() methods to getCurrent*()."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3e881bd64de1021fd239a6380183e6bb994d276b", "committedDate": "2020-03-05T19:59:49Z", "message": "State we use an empty CorrelationContext if there's no an active one."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTMzOTc2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-370533976", "createdAt": "2020-03-06T18:27:18Z", "commit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzoxOFrOFzC2ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyNzo1OFrOFzC3-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODQ4Mw==", "bodyText": "Remove this as we did in the CorrelationContext.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068483", "createdAt": "2020-03-06T18:27:18Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TracingContextUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n+import io.opentelemetry.context.Scope;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Util methods/functionality to interact with the {@link io.grpc.Context}.\n+ *\n+ * @since 0.1.0\n+ */\n+@Immutable\n+public final class TracingContextUtils {\n+  private static final Context.Key<Span> CONTEXT_SPAN_KEY =\n+      Context.<Span>key(\"opentelemetry-trace-span-key\");\n+\n+  /**\n+   * Creates a new {@code Context} with the given {@link Span} set.\n+   *\n+   * @param span the value to be set.\n+   * @return a new context with the given value set.\n+   * @since 0.1.0\n+   */\n+  public static Context withSpan(Span span) {\n+    return withSpan(span, Context.current());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODY4NA==", "bodyText": "getCurrentCorrelationContext?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068684", "createdAt": "2020-03-06T18:27:42Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/correlationcontext/DefaultCorrelationContextManager.java", "diffHunk": "@@ -50,7 +50,7 @@ public static CorrelationContextManager getInstance() {\n \n   @Override\n   public CorrelationContext getCurrentContext() {\n-    return ContextUtils.getValue();\n+    return CorrelationsContextUtils.getCorrelationContext(Context.current());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2ODc5NQ==", "bodyText": "getCurrentSpan()?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#discussion_r389068795", "createdAt": "2020-03-06T18:27:58Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -46,12 +46,12 @@ public static Tracer getInstance() {\n \n   @Override\n   public Span getCurrentSpan() {\n-    return ContextUtils.getValue();\n+    return TracingContextUtils.getSpan(Context.current());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e881bd64de1021fd239a6380183e6bb994d276b"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad93c45c211041936b7d0f7720091b471b5e83d", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6ad93c45c211041936b7d0f7720091b471b5e83d", "committedDate": "2020-03-06T19:00:00Z", "message": "Use the getCurrent*() overloads whenever possible."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzUwNTEy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/904#pullrequestreview-370750512", "createdAt": "2020-03-07T15:47:01Z", "commit": {"oid": "6ad93c45c211041936b7d0f7720091b471b5e83d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da1a7e9124151609aabc8203ed623dc7fe555c3d", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/da1a7e9124151609aabc8203ed623dc7fe555c3d", "committedDate": "2020-03-08T16:32:08Z", "message": "Remove the with*() overloads without Context as a parameter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49a43207cdbdaa8764707b05ff7b66bbe2c2e8e", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b49a43207cdbdaa8764707b05ff7b66bbe2c2e8e", "committedDate": "2020-03-08T16:46:48Z", "message": "Merge branch 'master' into contextutils_relocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a66b64495c72f221dc2248b43381ae1c12ad3a", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/58a66b64495c72f221dc2248b43381ae1c12ad3a", "committedDate": "2020-03-08T16:58:37Z", "message": "Remove outdated warnings."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3058, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}