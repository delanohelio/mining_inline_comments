{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTIwNjA0", "number": 1455, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozNjozM1rOERtkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozODo1M1rOESavLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA3ODQyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/DESIGN.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozNjozM1rOG2kjfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowMTowNVrOG22_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTE5Nw==", "bodyText": "There is a proposal for a docs folder here\n#1397 (comment)\nI think for historical reference docs like design docs it could be nice to separate it away from the code. What do you think about moving it there?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r459875197", "createdAt": "2020-07-24T06:36:33Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NzE3Ng==", "bodyText": "Sure, that sounds good to me. I'll rename the file to be more specific to /tracez.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460177176", "createdAt": "2020-07-24T17:01:05Z", "author": {"login": "williamhu99"}, "path": "sdk_extensions/zpages/DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTE5Nw=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA3OTk5OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozNzoyN1rOG2kkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozNzoyN1rOG2kkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTQzMw==", "bodyText": "Let's stick with implementation for all of them", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r459875433", "createdAt": "2020-07-24T06:37:27Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA4NTg2OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/zpages/README.md", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozOToyOVrOG2knWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo0NTozOFrOG9MTxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your\n          \n          \n            \n            **Note:** The package `com.sun.net.httpserver` is required to use the default zPages setup. Please make sure your\n          \n      \n    \n    \n  \n\nIt's technically not required if users mount the pages to their own server, which hopefully will be fairly common.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r459876186", "createdAt": "2020-07-24T06:39:29Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MTM2Nw==", "bodyText": "private static HttpServer server; (import com.sun.net.httpserver.HttpServer).\nEven with a variable like this, if the users mount to their own server, com.sun.net.httpserver is not required anymore?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460081367", "createdAt": "2020-07-24T14:17:58Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4NDQ5Mw==", "bodyText": "Java is surprisingly lazy, but indeed because it's static I think the answer is no. Can we go ahead and fix it so it's not required? It just means separating out a class that manages the span processor and having only a small class dealing with the server", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460084493", "createdAt": "2020-07-24T14:22:45Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4ODYxMQ==", "bodyText": "Sorry I didn't entirely get what you meant, should we separate the current ZPageServer class somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460088611", "createdAt": "2020-07-24T14:29:09Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MDQxNw==", "bodyText": "Yeah I think if we separate initialization of span processors to a separate class, the hard dependency on sun server can be avoided. But that can be a follow-up for after this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460350417", "createdAt": "2020-07-25T01:58:36Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4MDA2NA==", "bodyText": "Quick question regarding making HttpServer not hard required. Should I separate out\nprivate static HttpServer server;\n...\npublic static void startHttpServerAndRegisterAllPages(int port) throws IOException {}\n\nto a different file. And keep the register function\npublic static void registerAllPagesToHttpServer(HttpServer server) {}\n\nWill the HttpServer type parameter still make sun package hard required?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r465780064", "createdAt": "2020-08-05T14:44:23Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODM2Mg==", "bodyText": "I think the method users will need when not using HttpServer is\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageServer.java#L91\nSo if that was moved to a separate class the hard dependency should be gone I believe.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r466188362", "createdAt": "2020-08-06T07:03:54Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNjI2Mg==", "bodyText": "How do they use zPages at all then with the current implementation?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r466616262", "createdAt": "2020-08-06T18:48:03Z", "author": {"login": "wtyanan"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxNzk4OQ==", "bodyText": "Haven't actually compiled this code but for example, if using Armeria, it would look something like this\nclass ZPageService implements HttpService {\n  private final ZPageHandler handler;\n\n  public HttpResponse service(ServiceRequestContext ctx, HttpRequest req) {\n    Map<String, String> params = ctx.routingContext().queryParams().stream().collect(toMap());\n    ByteBufOutputStream payload = new ByteBufOutputStream();\n    handler.emitHtml(params, payload);\n    return HttpResponse.of(RequestHeaders.of(HttpStatus.OK), HttpData.wrap(payload.buf()));\n  }\n}\nZPages.registerSpanProcessors();\n\nServerBuilder server = Server.builder();\nfor (ZPageHandler handler : ZPages.getAllHandlers()) {\n  server.service(handler.getUrlPath(), new ZPageService(handler);\n}\nserver.build().start();\nVery efficient zpages, all on the same port as my service :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r466817989", "createdAt": "2020-08-07T04:45:38Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -2,8 +2,100 @@\n \n [![Javadocs][javadoc-image]][javadoc-url]\n \n-This module contains code for OpenTelemetry's Java zPages.\n+This module contains code for OpenTelemetry's Java zPages, which are a collection of dynamic HTML\n+web pages that display stats and trace data.\n+\n+* Java 7 compatible.\n \n <!--- TODO: Update javadoc -->\n [javadoc-image]: https://www.javadoc.io/badge/io.opentelemetry/opentelemetry-sdk-contrib-auto-config.svg\n [javadoc-url]: https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-contrib-auto-config\n+\n+## Quickstart\n+\n+### Add the dependencies to your project\n+\n+For Maven, add the following to your `pom.xml`:\n+```xml\n+<dependencies>\n+  <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-api</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.opentelemetry</groupId>\n+        <artifactId>opentelemetry-sdk-extension-zpages</artifactId>\n+        <version>0.7.0</version>\n+      </dependency>\n+</dependencies>\n+```\n+\n+<!--- TODO: Verify gradle configuration -->\n+For Gradle, add the following to your dependencies:\n+```groovy\n+api 'io.opentelemetry:opentelemetry-api:0.7.0'\n+api 'io.opentelemetry:opentelemetry-sdk:0.7.0'\n+implementation 'io.opentelemetry:opentelemetry-sdk-extension-zpages:0.7.0'\n+```\n+\n+### Register the zPages\n+\n+**Note:** The package `com.sun.net.httpserver` is required to use zPages. Please make sure your", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NjE4Ng=="}, "originalCommit": {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3NTEwOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1OToyOFrOG3BkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1OToyOFrOG3BkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MDUxOQ==", "bodyText": "Make a folder for zpages and put this and all the images inside it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460350519", "createdAt": "2020-07-25T01:59:28Z", "author": {"login": "anuraaga"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQwMjAzOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyMzoyN1rOG3kymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyMzoyN1rOG3kymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyNzY0Mw==", "bodyText": "Suggested edit:\nThe OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\nmetrics data for a running process: the /tracez zPage displays\ntrace information about running spans, sample span latencies, and sample error spans, while the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\nas sampling probability and max number of attributes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460927643", "createdAt": "2020-07-27T14:23:27Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQwNzI2OnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNDozMlrOG3k17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNDozMlrOG3k17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyODQ5Mw==", "bodyText": "This link seems to be broken.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460928493", "createdAt": "2020-07-27T14:24:32Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQxNzUyOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNjozNVrOG3k8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNjozNVrOG3k8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMDA5OA==", "bodyText": "Nit: Leave out in addition", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460930098", "createdAt": "2020-07-27T14:26:35Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQyNjcwOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyODoxOFrOG3lBtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo1MjozNlrOG3mJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMTUwOA==", "bodyText": "Would this serve as the README.md page or is this something else? My personal take here is to keep this doc scoped to just a how-to guide and maybe a brief description of the different classes and what they do.\nSince we are publishing an entry to Google's Open Source blog, I think a deep explanation of design decisions would be more appropriate there. We could even link to the blog entry from here once it's published.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460931508", "createdAt": "2020-07-27T14:28:18Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NDk4MQ==", "bodyText": "I believe this doc is specifically for design choices, how-to guide is the README.md file under sdk_extensions/zpages/", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460944981", "createdAt": "2020-07-27T14:46:20Z", "author": {"login": "wtyanan"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMTUwOA=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0OTc2OA==", "bodyText": "Yeah this design doc drove the implementation of zpages so we want to keep it here in the community repo to refer to the motivation and to keep the history collected.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460949768", "createdAt": "2020-07-27T14:52:36Z", "author": {"login": "anuraaga"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMTUwOA=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQ0MzEzOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMTozN1rOG3lLtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMTozN1rOG3lLtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNDA2OA==", "bodyText": "I think we can shrink this to a single sentence: We want to create a tool that lets users troubleshoot OpenTelemetry instrumentation that can also be used as a lightweight application performance monitoring tool.\nThe other stuff seems like it could become outdated. \"In addition, the implementation of the Java zPages can pave the way for future implementations in other languages, such as Python, which have yet to be built.\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460934068", "createdAt": "2020-07-27T14:31:37Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQ3MDUwOnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozNzoxMFrOG3lcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1ODowNVrOG3ta3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzODI1Mw==", "bodyText": "Not sure if this qualifier is necessary. I think the frontend + backend section are self-explanatory.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460938253", "createdAt": "2020-07-27T14:37:10Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2MzI0Ng==", "bodyText": "That is we can delete this Proposed Design section right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460963246", "createdAt": "2020-07-27T15:11:10Z", "author": {"login": "wtyanan"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzODI1Mw=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2OTAyMA==", "bodyText": "I'll remove it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r461069020", "createdAt": "2020-07-27T17:58:05Z", "author": {"login": "williamhu99"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzODI1Mw=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQ3ODg0OnYy", "diffSide": "RIGHT", "path": "docs/TRACEZ_DESIGN.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozODo1NFrOG3lhHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0MDowNVrOG30lcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzOTU0OQ==", "bodyText": "The information under the \"proposed design\" sections I think would make for good OSS blog post material. I will leave it to the maintainers to decide if they want to include design choices directly in this doc or elsewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r460939549", "createdAt": "2020-07-27T14:38:54Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric\n+and backend-centric components.\n+\n+### Frontend\n+\n+#### HttpHandler\n+\n+The `HttpHandler` is responsible for rendering corresponding HTML content. An abstract base class,\n+`ZPageHandler` (OpenCensus implementation), is implemented to standardize handlers for different\n+zPages. Each page will implement their own `ZPageHandler`, extending the base class, to generate the\n+corresponding HTML content for that page.\n+\n+![httphandler](img/httphandler.png)\n+\n+##### TraceZ Handler\n+\n+For the `TracezZPageHandler` class, the span data from `TracezDataAggregator` will be passed in when\n+an instance of the class is created. It will later be used to retrieve span information and display\n+the data in a table.\n+\n+##### TraceConfigZ Handler\n+\n+For the `TraceConfigzZPageHandler` class, the `TraceConfig` class will be used to change sampling\n+rate and tracing parameters.\n+\n+#### HttpServer\n+The `HttpServer` is responsible for listening to incoming requests, obtaining requested data, and\n+rendering corresponding HTML content. The `HttpServer` class from `com.sun.net` will be used to\n+handle http requests and responses on different routes (users need to ensure that they are using a\n+version of JDK that includes the `HttpServer` class; this requirement will be added to the README).\n+Once a request is received by the `HttpServer`, it will invoke the handle function which in turn\n+invokes the `emitHtml` function to render the HTML content.\n+\n+The `HttpServer` class utilizes `com.sun.net.httpserver` to create servers. Users need to ensure\n+that they are using a version of JDK that comes with the package.\n+\n+##### Handling Requests\n+\n+![requests-flowchart](img/requests-flowchart.png)\n+\n+### Backend\n+\n+#### Overview\n+\n+The proposed structure is encompassed by the following diagram:\n+\n+![span-lifecycle](img/span-lifecycle.png)\n+\n+Spans, which are the units of tracing, are monitored by a `SpanProcessor`. The `SpanProcessor` is\n+exposed to a `DataAggregator`, which can retrieve information about the spans through API calls.\n+Lastly, the frontend calls functions in the `DataAggregator` to obtain information needed for the\n+web page.\n+\n+#### SpanProcessor\n+\n+A `SpanProcessor` watches the lifecycle of each span, and its functions are called every time a span\n+starts or ends. For the /tracez zPage, I have implemented a `TracezSpanProcessor`, which will\n+maintain two data structures: a running span cache and a completed span cache.\n+\n+##### Visual Diagram\n+\n+Below is a visual diagram of the `TracezSpanProcessor` class:\n+\n+![span-processor-flowchart](img/span-processor-flowchart.png)\n+\n+When a span starts, it is first added to the `runningSpanCache`. Once that span ends, it is removed\n+from the `runningSpanCache` and added to the `completedSpanCache` as either a latency sample if\n+there are no errors or an error sample if there are.\n+\n+##### Initial Design", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2OTc3Mw==", "bodyText": "After reading the other OSS blog posts, I'm a little skeptical of whether we should include implementation details. Most of the posts just talk about a general overview of the product and then describe its use cases and how to start using it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r461069773", "createdAt": "2020-07-27T17:59:25Z", "author": {"login": "williamhu99"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric\n+and backend-centric components.\n+\n+### Frontend\n+\n+#### HttpHandler\n+\n+The `HttpHandler` is responsible for rendering corresponding HTML content. An abstract base class,\n+`ZPageHandler` (OpenCensus implementation), is implemented to standardize handlers for different\n+zPages. Each page will implement their own `ZPageHandler`, extending the base class, to generate the\n+corresponding HTML content for that page.\n+\n+![httphandler](img/httphandler.png)\n+\n+##### TraceZ Handler\n+\n+For the `TracezZPageHandler` class, the span data from `TracezDataAggregator` will be passed in when\n+an instance of the class is created. It will later be used to retrieve span information and display\n+the data in a table.\n+\n+##### TraceConfigZ Handler\n+\n+For the `TraceConfigzZPageHandler` class, the `TraceConfig` class will be used to change sampling\n+rate and tracing parameters.\n+\n+#### HttpServer\n+The `HttpServer` is responsible for listening to incoming requests, obtaining requested data, and\n+rendering corresponding HTML content. The `HttpServer` class from `com.sun.net` will be used to\n+handle http requests and responses on different routes (users need to ensure that they are using a\n+version of JDK that includes the `HttpServer` class; this requirement will be added to the README).\n+Once a request is received by the `HttpServer`, it will invoke the handle function which in turn\n+invokes the `emitHtml` function to render the HTML content.\n+\n+The `HttpServer` class utilizes `com.sun.net.httpserver` to create servers. Users need to ensure\n+that they are using a version of JDK that comes with the package.\n+\n+##### Handling Requests\n+\n+![requests-flowchart](img/requests-flowchart.png)\n+\n+### Backend\n+\n+#### Overview\n+\n+The proposed structure is encompassed by the following diagram:\n+\n+![span-lifecycle](img/span-lifecycle.png)\n+\n+Spans, which are the units of tracing, are monitored by a `SpanProcessor`. The `SpanProcessor` is\n+exposed to a `DataAggregator`, which can retrieve information about the spans through API calls.\n+Lastly, the frontend calls functions in the `DataAggregator` to obtain information needed for the\n+web page.\n+\n+#### SpanProcessor\n+\n+A `SpanProcessor` watches the lifecycle of each span, and its functions are called every time a span\n+starts or ends. For the /tracez zPage, I have implemented a `TracezSpanProcessor`, which will\n+maintain two data structures: a running span cache and a completed span cache.\n+\n+##### Visual Diagram\n+\n+Below is a visual diagram of the `TracezSpanProcessor` class:\n+\n+![span-processor-flowchart](img/span-processor-flowchart.png)\n+\n+When a span starts, it is first added to the `runningSpanCache`. Once that span ends, it is removed\n+from the `runningSpanCache` and added to the `completedSpanCache` as either a latency sample if\n+there are no errors or an error sample if there are.\n+\n+##### Initial Design", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzOTU0OQ=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NjQxNg==", "bodyText": "That sounds good with me.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1455#discussion_r461186416", "createdAt": "2020-07-27T21:40:05Z", "author": {"login": "v-y-l"}, "path": "docs/TRACEZ_DESIGN.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# OpenTelemetry SDK Contrib - /tracez and /traceconfigz Design Doc\n+\n+This file contains information about the design choices for the OpenTelemetry /tracez and\n+/traceconfigz zPages.\n+\n+## Introduction\n+\n+The OpenTelemetry zPages are a set of dynamically generated HTML pages that display trace and\n+metrics data for a running process. Within this set, the /tracez zPage is a web page that displays\n+trace information about running spans, sample span latencies, and sample error spans. On the other\n+hand, the /traceconfigz zPage is a web page that allows the users to change tracing parameters, such\n+as sampling probability and max number of attributes.\n+\n+### /tracez zPage\n+\n+The /tracez zPage displays information on running spans, sample span latencies, and sample error\n+spans. The data is aggregated into a summary-level table:\n+\n+![tracez-table](img/tracez-table.png)\n+\n+In addition, you can click on each of the counts in the table cells to access the corresponding span\n+details. For example, here are the details of the `ChildSpan` latency sample (row 1, col 4):\n+\n+![tracez-details](img/tracez-details.png)\n+\n+### /traceconfigz zPage\n+\n+The /traceconfigz zPage displays information about the currently active tracing configuration and \n+provides an interface for users to modify relevant parameters:\n+\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Motivation\n+\n+At the moment, there are no zPages for the Java implementation of OpenTelemetry. The goal of this\n+project, as suggested by the title, is to create the TraceZ zPage for the Java SDK. The motivation\n+for this stems from the usefulness of zPages. Because of how they aggregate and display data, zPages\n+are great development tools for OpenTelemetry instrumentation and lightweight monitoring. In\n+addition, the implementation of the Java zPages can pave the way for future implementations in other\n+languages, such as Python, which have yet to be built.\n+\n+## Proposed Design\n+\n+We have divided the implementation of the /tracez and /traceconfigz zPages into two frontend-centric\n+and backend-centric components.\n+\n+### Frontend\n+\n+#### HttpHandler\n+\n+The `HttpHandler` is responsible for rendering corresponding HTML content. An abstract base class,\n+`ZPageHandler` (OpenCensus implementation), is implemented to standardize handlers for different\n+zPages. Each page will implement their own `ZPageHandler`, extending the base class, to generate the\n+corresponding HTML content for that page.\n+\n+![httphandler](img/httphandler.png)\n+\n+##### TraceZ Handler\n+\n+For the `TracezZPageHandler` class, the span data from `TracezDataAggregator` will be passed in when\n+an instance of the class is created. It will later be used to retrieve span information and display\n+the data in a table.\n+\n+##### TraceConfigZ Handler\n+\n+For the `TraceConfigzZPageHandler` class, the `TraceConfig` class will be used to change sampling\n+rate and tracing parameters.\n+\n+#### HttpServer\n+The `HttpServer` is responsible for listening to incoming requests, obtaining requested data, and\n+rendering corresponding HTML content. The `HttpServer` class from `com.sun.net` will be used to\n+handle http requests and responses on different routes (users need to ensure that they are using a\n+version of JDK that includes the `HttpServer` class; this requirement will be added to the README).\n+Once a request is received by the `HttpServer`, it will invoke the handle function which in turn\n+invokes the `emitHtml` function to render the HTML content.\n+\n+The `HttpServer` class utilizes `com.sun.net.httpserver` to create servers. Users need to ensure\n+that they are using a version of JDK that comes with the package.\n+\n+##### Handling Requests\n+\n+![requests-flowchart](img/requests-flowchart.png)\n+\n+### Backend\n+\n+#### Overview\n+\n+The proposed structure is encompassed by the following diagram:\n+\n+![span-lifecycle](img/span-lifecycle.png)\n+\n+Spans, which are the units of tracing, are monitored by a `SpanProcessor`. The `SpanProcessor` is\n+exposed to a `DataAggregator`, which can retrieve information about the spans through API calls.\n+Lastly, the frontend calls functions in the `DataAggregator` to obtain information needed for the\n+web page.\n+\n+#### SpanProcessor\n+\n+A `SpanProcessor` watches the lifecycle of each span, and its functions are called every time a span\n+starts or ends. For the /tracez zPage, I have implemented a `TracezSpanProcessor`, which will\n+maintain two data structures: a running span cache and a completed span cache.\n+\n+##### Visual Diagram\n+\n+Below is a visual diagram of the `TracezSpanProcessor` class:\n+\n+![span-processor-flowchart](img/span-processor-flowchart.png)\n+\n+When a span starts, it is first added to the `runningSpanCache`. Once that span ends, it is removed\n+from the `runningSpanCache` and added to the `completedSpanCache` as either a latency sample if\n+there are no errors or an error sample if there are.\n+\n+##### Initial Design", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzOTU0OQ=="}, "originalCommit": {"oid": "ed8ef33353ece317374cb46b29209c030781460c"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1528, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}