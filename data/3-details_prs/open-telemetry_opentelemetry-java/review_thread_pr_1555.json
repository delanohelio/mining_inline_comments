{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDUyNzcw", "number": 1555, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1N1rOEZ6cYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxMTo1NVrOEaEziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjA3MzkzOnYy", "diffSide": "RIGHT", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourceConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoyMjo1N1rOHDA_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDozNDo0NFrOHDBYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzk2OQ==", "bodyText": "Are these attributes defined by semantic convention? If yes, I think a link to it will be useful here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472923969", "createdAt": "2020-08-19T10:22:57Z", "author": {"login": "iNikem"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourceConstants.java", "diffHunk": "@@ -25,6 +25,36 @@\n  */\n public class ResourceConstants {\n \n+  /** The operating system type, such as {@code \"WINDOWS\"}, {@code \"DARWIN\"}, {@code \"LINUX\"}. */\n+  public static final String OS_NAME = \"os.name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b986018d9a4cc3d4c1be892e78c52ac199c1ab0a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMDMxMQ==", "bodyText": "It's in the class javadoc - but thanks to the reminder I found it was a dead link :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472930311", "createdAt": "2020-08-19T10:34:44Z", "author": {"login": "anuraaga"}, "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourceConstants.java", "diffHunk": "@@ -25,6 +25,36 @@\n  */\n public class ResourceConstants {\n \n+  /** The operating system type, such as {@code \"WINDOWS\"}, {@code \"DARWIN\"}, {@code \"LINUX\"}. */\n+  public static final String OS_NAME = \"os.name\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzk2OQ=="}, "originalCommit": {"oid": "b986018d9a4cc3d4c1be892e78c52ac199c1ab0a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjI0MjEyOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/OsResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToxMTo1MFrOHDCjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToyMDoxMlrOHDCzbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0OTU2OA==", "bodyText": "Would contains make the code more robust? I am not familiar with all the cases so I might be wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472949568", "createdAt": "2020-08-19T11:11:50Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/OsResource.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import javax.annotation.Nullable;\n+\n+/** {@link ResourceProvider} which provides information about the current operating system. */\n+public class OsResource extends ResourceProvider {\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    final String os;\n+    try {\n+      os = System.getProperty(\"os.name\");\n+    } catch (SecurityException t) {\n+      // Security manager enabled, can't provide much os information.\n+      return Attributes.empty();\n+    }\n+\n+    if (os == null) {\n+      return Attributes.empty();\n+    }\n+\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    String osName = getOs(os);\n+    if (osName != null) {\n+      attributes.setAttribute(ResourceConstants.OS_NAME, osName);\n+    }\n+\n+    String version = null;\n+    try {\n+      version = System.getProperty(\"os.version\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    String osDescription = version != null ? os + ' ' + version : os;\n+    attributes.setAttribute(ResourceConstants.OS_DESCRIPTION, osDescription);\n+\n+    return attributes.build();\n+  }\n+\n+  @Nullable\n+  private static String getOs(String os) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MzcxMQ==", "bodyText": "I took the approach from commons Lang - I think it's been vetted much more than anything I could ever come up with ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472953711", "createdAt": "2020-08-19T11:20:12Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/OsResource.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import javax.annotation.Nullable;\n+\n+/** {@link ResourceProvider} which provides information about the current operating system. */\n+public class OsResource extends ResourceProvider {\n+\n+  @Override\n+  protected Attributes getAttributes() {\n+    final String os;\n+    try {\n+      os = System.getProperty(\"os.name\");\n+    } catch (SecurityException t) {\n+      // Security manager enabled, can't provide much os information.\n+      return Attributes.empty();\n+    }\n+\n+    if (os == null) {\n+      return Attributes.empty();\n+    }\n+\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    String osName = getOs(os);\n+    if (osName != null) {\n+      attributes.setAttribute(ResourceConstants.OS_NAME, osName);\n+    }\n+\n+    String version = null;\n+    try {\n+      version = System.getProperty(\"os.version\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    String osDescription = version != null ? os + ' ' + version : os;\n+    attributes.setAttribute(ResourceConstants.OS_DESCRIPTION, osDescription);\n+\n+    return attributes.build();\n+  }\n+\n+  @Nullable\n+  private static String getOs(String os) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0OTU2OA=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjI0NzE4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMToxMzoyOVrOHDCmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjowNDoxNFrOHDmOHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDM1MA==", "bodyText": "I would avoid reporting the attribute if no process id was available.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r472950350", "createdAt": "2020-08-19T11:13:29Z", "author": {"login": "thisthat"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NDg2Mw==", "bodyText": "agreed. I'd rather have no value, rather than a -1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473174863", "createdAt": "2020-08-19T16:46:03Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDM1MA=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMzk4MQ==", "bodyText": "Oops forgot, thanks!\nUnfortunately, don't think there's any way for me to write a unit test for it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473533981", "createdAt": "2020-08-20T02:04:14Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDM1MA=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzYzNzg1OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0MDoyM1rOHDQGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0MDoyM1rOHDQGaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3MTU2MA==", "bodyText": "We should create an issue for this, so the TODO doesn't lie dead in the code.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473171560", "createdAt": "2020-08-19T16:40:23Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzY1NTYxOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NToyMlrOHDQRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NToyMlrOHDQRpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NDQzOQ==", "bodyText": "could you add a little comment about what the structure of this name looks like, so the code doesn't just look like magic. Thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473174439", "createdAt": "2020-08-19T16:45:22Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzc1NDc1OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNzowMlrOHDRUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNjo1MFrOHDoxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ==", "bodyText": "interesting assumption. This is definitely the most common location for a java executable, but is it universal enough to be encoded here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473191465", "createdAt": "2020-08-19T17:07:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUyODAxMw==", "bodyText": "On Java 9 we can have a better path using ProcessHandle I want to implement that at some point. This seems common enough for the base case that I figured it's ok but let me know what you think (I think a lot of tools would break if java wasn't at this subdirectory of the java home).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473528013", "createdAt": "2020-08-20T01:55:00Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTE1Ng==", "bodyText": "Let's go with it for now. I'm sure a user on some obscure platform will let us know when it's wrong. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473561156", "createdAt": "2020-08-20T03:09:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTQyNw==", "bodyText": "I wonder what this does on Android, for instance. I also hope no one is running this SDK on android, since we haven't been (and don't intend to be) optimizing for that runtime environment.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473561427", "createdAt": "2020-08-20T03:10:04Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTgxMg==", "bodyText": "Currently it's guaranteed to crash because java management isn't available anyways :) I added a note to the README and note to the issue that we can reflectionize this too to unbreak.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473575812", "createdAt": "2020-08-20T04:06:50Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ2NQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzc3MTYzOnYy", "diffSide": "RIGHT", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxMTo1NVrOHDRe7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjo1OTozN1rOHDnvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDIyMQ==", "bodyText": "I'm nervous about blindly adding all the command lines arguments from a java process.This could end up being gigantic, and also leaking senstivie information that is being passed in via system properties. Are we sure this is a good idea?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473194221", "createdAt": "2020-08-19T17:11:55Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")\n+          .append(File.pathSeparatorChar)\n+          .append(\"java\");\n+      if (osName != null && osName.toLowerCase().startsWith(\"windows\")) {\n+        executablePath.append(\".exe\");\n+      }\n+\n+      attributes.setAttribute(ResourceConstants.PROCESS_EXECUTABLE_PATH, executablePath.toString());\n+\n+      StringBuilder commandLine = new StringBuilder(executablePath);\n+      for (String arg : runtime.getInputArguments()) {\n+        commandLine.append(' ').append(arg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjgwOA==", "bodyText": "I guess if this isn't something we're putting in by default in the SDK, it's probably fine. I think we should definitely have some warnings in the module README, or perhaps in the javadoc, or somewhere. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473202808", "createdAt": "2020-08-19T17:26:31Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")\n+          .append(File.pathSeparatorChar)\n+          .append(\"java\");\n+      if (osName != null && osName.toLowerCase().startsWith(\"windows\")) {\n+        executablePath.append(\".exe\");\n+      }\n+\n+      attributes.setAttribute(ResourceConstants.PROCESS_EXECUTABLE_PATH, executablePath.toString());\n+\n+      StringBuilder commandLine = new StringBuilder(executablePath);\n+      for (String arg : runtime.getInputArguments()) {\n+        commandLine.append(' ').append(arg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDIyMQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMzc3OQ==", "bodyText": "Checked the output and it seems to only have system properties / normal command line, and not classpath for example which would be huge.\nI think this point applies to the semantic convention itself so we'll probably need to find some guidelines on how to deal with this attribute there.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473533779", "createdAt": "2020-08-20T02:03:52Z", "author": {"login": "anuraaga"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")\n+          .append(File.pathSeparatorChar)\n+          .append(\"java\");\n+      if (osName != null && osName.toLowerCase().startsWith(\"windows\")) {\n+        executablePath.append(\".exe\");\n+      }\n+\n+      attributes.setAttribute(ResourceConstants.PROCESS_EXECUTABLE_PATH, executablePath.toString());\n+\n+      StringBuilder commandLine = new StringBuilder(executablePath);\n+      for (String arg : runtime.getInputArguments()) {\n+        commandLine.append(' ').append(arg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDIyMQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1ODgxMw==", "bodyText": "oh good. I was worried about the classpath, which would be gigantic. The point still holds for system properties and security, and you're right about the conventions probably needing some clarification. I'm still ok with this for now, since it's an opt-in extension module.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1555#discussion_r473558813", "createdAt": "2020-08-20T02:59:37Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.resources;\n+\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import io.opentelemetry.sdk.resources.ResourceProvider;\n+import java.io.File;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+\n+/** {@link ResourceProvider} which provides information about the current running process. */\n+public class ProcessResource extends ResourceProvider {\n+  @Override\n+  protected Attributes getAttributes() {\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+\n+    // TODO(anuraaga): Use reflection to get more stable values on Java 9+\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    long pid = -1;\n+    String runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n+    int atIndex = runtimeName.indexOf('@');\n+    if (atIndex >= 0) {\n+      String pidString = runtimeName.substring(0, atIndex);\n+      try {\n+        pid = Long.parseLong(pidString);\n+      } catch (NumberFormatException ignored) {\n+        // Ignore parse failure.\n+      }\n+    }\n+\n+    attributes.setAttribute(ResourceConstants.PROCESS_PID, pid);\n+\n+    String javaHome = null;\n+    String osName = null;\n+    try {\n+      javaHome = System.getProperty(\"java.home\");\n+      osName = System.getProperty(\"os.name\");\n+    } catch (SecurityException e) {\n+      // Ignore\n+    }\n+    if (javaHome != null) {\n+      StringBuilder executablePath = new StringBuilder(javaHome);\n+      executablePath\n+          .append(File.pathSeparatorChar)\n+          .append(\"bin\")\n+          .append(File.pathSeparatorChar)\n+          .append(\"java\");\n+      if (osName != null && osName.toLowerCase().startsWith(\"windows\")) {\n+        executablePath.append(\".exe\");\n+      }\n+\n+      attributes.setAttribute(ResourceConstants.PROCESS_EXECUTABLE_PATH, executablePath.toString());\n+\n+      StringBuilder commandLine = new StringBuilder(executablePath);\n+      for (String arg : runtime.getInputArguments()) {\n+        commandLine.append(' ').append(arg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDIyMQ=="}, "originalCommit": {"oid": "2893a16997708b16e420832405b6069aa059d9f7"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1355, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}