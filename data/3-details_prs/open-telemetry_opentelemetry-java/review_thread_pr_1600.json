{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Mjc0MTY1", "number": 1600, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo1Mjo1OVrOEdjrHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo1Mjo1OVrOEdjrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDI4NjM5OnYy", "diffSide": "RIGHT", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/MetricAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo1Mjo1OVrOHIxlsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo0OTozM1rOHKT-fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk2MzEyMg==", "bodyText": "@jkwatson :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1600#discussion_r478963122", "createdAt": "2020-08-28T08:52:59Z", "author": {"login": "anuraaga"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/MetricAdapter.java", "diffHunk": "@@ -228,40 +239,22 @@ private static Temporality mapToTemporality(Descriptor descriptor) {\n \n   // TODO: Consider to pass the Builder and directly add values.\n   @SuppressWarnings(\"MixedMutabilityReturnType\")\n-  static List<ValueAtPercentile> toProtoValueAtPercentiles(\n-      Collection<MetricData.ValueAtPercentile> valueAtPercentiles) {\n-    if (valueAtPercentiles.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n-    List<ValueAtPercentile> result = new ArrayList<>(valueAtPercentiles.size());\n+  static void addBucketValues(\n+      List<MetricData.ValueAtPercentile> valueAtPercentiles,\n+      DoubleHistogramDataPoint.Builder builder) {\n+\n     for (MetricData.ValueAtPercentile valueAtPercentile : valueAtPercentiles) {\n-      result.add(\n-          ValueAtPercentile.newBuilder()\n-              .setPercentile(valueAtPercentile.getPercentile())\n-              .setValue(valueAtPercentile.getValue())\n-              .build());\n+      // TODO(jkwatson): Value of histogram should be long?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6bf0dd9f506a6c1080fa51fa8cb1f91d519100c"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3NTEwMQ==", "bodyText": "I have no remembrance of what this might have meant.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1600#discussion_r480575101", "createdAt": "2020-09-01T01:49:33Z", "author": {"login": "jkwatson"}, "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/MetricAdapter.java", "diffHunk": "@@ -228,40 +239,22 @@ private static Temporality mapToTemporality(Descriptor descriptor) {\n \n   // TODO: Consider to pass the Builder and directly add values.\n   @SuppressWarnings(\"MixedMutabilityReturnType\")\n-  static List<ValueAtPercentile> toProtoValueAtPercentiles(\n-      Collection<MetricData.ValueAtPercentile> valueAtPercentiles) {\n-    if (valueAtPercentiles.isEmpty()) {\n-      return Collections.emptyList();\n-    }\n-    List<ValueAtPercentile> result = new ArrayList<>(valueAtPercentiles.size());\n+  static void addBucketValues(\n+      List<MetricData.ValueAtPercentile> valueAtPercentiles,\n+      DoubleHistogramDataPoint.Builder builder) {\n+\n     for (MetricData.ValueAtPercentile valueAtPercentile : valueAtPercentiles) {\n-      result.add(\n-          ValueAtPercentile.newBuilder()\n-              .setPercentile(valueAtPercentile.getPercentile())\n-              .setValue(valueAtPercentile.getValue())\n-              .build());\n+      // TODO(jkwatson): Value of histogram should be long?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk2MzEyMg=="}, "originalCommit": {"oid": "c6bf0dd9f506a6c1080fa51fa8cb1f91d519100c"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1389, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}