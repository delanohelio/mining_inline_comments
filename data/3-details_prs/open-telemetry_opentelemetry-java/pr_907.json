{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDczNzQ4", "number": 907, "title": "Add an InstrumentRegistry that tracks all created Instruments", "bodyText": "Few TODOs left in the registry, but this is a first naive implementation.", "createdAt": "2020-02-21T21:09:58Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907", "merged": true, "mergeCommit": {"oid": "4705b250ccaec5e1d831a16b6d89a51b8d5bc37d"}, "closed": true, "closedAt": "2020-02-24T23:25:25Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGmdffAFqTM2MjkyMjY2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHlQRogFqTM2Mzc0NzExOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTIyNjY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#pullrequestreview-362922669", "createdAt": "2020-02-21T21:18:13Z", "commit": {"oid": "3ef1abea46180c014d6de4b8e0b654ef09974d8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToxODoxM1rOFtE4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToxODoxM1rOFtE4cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA==", "bodyText": "My only concern here is the values here are backed by the map, so changes to the underlying map while iterating over the resulting collection can result in surprising or ill-defined behaviors. This might not be an issue, but it's something to be aware of.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382810224", "createdAt": "2020-02-21T21:18:13Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/InstrumentRegistry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+// Basic registry class for metrics instruments. The current implementation allows instruments to be\n+// registered only once for a given name.\n+//\n+// TODO: Discuss what is the right behavior when an already registered Instrument with the same name\n+// is present.\n+// TODO: Decide what is the identifier for an Instrument? Only name?\n+// TODO: How do we know if an registered instrument is the same as the provided one?\n+final class InstrumentRegistry {\n+  private final ConcurrentMap<String, AbstractInstrument> registry = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Registers the given {@code instrument} to this registry.\n+   *\n+   * @param descriptor the descriptor of the {@code Instrument}.\n+   * @param instrument the newly created {@code Instrument}.\n+   * @return {@code true} if the instrument is successfully registered.\n+   */\n+  boolean register(InstrumentDescriptor descriptor, AbstractInstrument instrument) {\n+    AbstractInstrument oldInstrument = registry.putIfAbsent(descriptor.getName(), instrument);\n+    return oldInstrument == null;\n+  }\n+\n+  /**\n+   * Returns a {@code Collection} view of the registered instruments.\n+   *\n+   * @return a {@code Collection} view of the registered instruments.\n+   */\n+  Collection<AbstractInstrument> getRegisteredInstruments() {\n+    return registry.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef1abea46180c014d6de4b8e0b654ef09974d8a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "committedDate": "2020-02-24T22:15:19Z", "message": "Add an InstrumentRegistry that tracks all created Instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ef1abea46180c014d6de4b8e0b654ef09974d8a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3ef1abea46180c014d6de4b8e0b654ef09974d8a", "committedDate": "2020-02-21T21:09:07Z", "message": "Add an InstrumentRegistry that tracks all created Instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "committedDate": "2020-02-24T22:15:19Z", "message": "Add an InstrumentRegistry that tracks all created Instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzQ3MTE5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#pullrequestreview-363747119", "createdAt": "2020-02-24T22:27:49Z", "commit": {"oid": "76ce81b2ec3c1db8360deeb3d281e14f54e3838b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}