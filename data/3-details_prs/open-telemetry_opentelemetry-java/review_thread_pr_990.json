{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzE4OTA5", "number": 990, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozOTozMVrODqODqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTozNFrODqOGeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk3MDk2OnYy", "diffSide": "RIGHT", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/TestSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozOTozMVrOF51Y7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoxNjoxOVrOF6NByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Nzg4NQ==", "bodyText": "API_ONLY? I don't know maybe you can think of a better name :), kind of don't like NO_SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396187885", "createdAt": "2020-03-23T02:39:31Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/TestSdk.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DefaultMeter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+\n+public enum TestSdk {\n+  NO_SDK(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NTE3OQ==", "bodyText": "I actually really like API_ONLY- I think that's both clearer and more positive.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396575179", "createdAt": "2020-03-23T16:16:19Z", "author": {"login": "zenmoto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/TestSdk.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DefaultMeter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+\n+public enum TestSdk {\n+  NO_SDK(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Nzg4NQ=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk3NTg5OnYy", "diffSide": "RIGHT", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0MzozMlrOF51b1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozNzoyMFrOF6XKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODYzMA==", "bodyText": "Don't see a clear advantage to use generics here. Can we get rid of them?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396188630", "createdAt": "2020-03-23T02:43:32Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleMeasureRecord(\n+      new OperationBuilder<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+        @Override\n+        public Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> build(Meter meter) {\n+          Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> op =\n+              new Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleMeasureBuilder(\"double_measure\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleMeasureBuilder(\"bound_double_measure\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  LongMeasureRecord(\n+      new OperationBuilder<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+        @Override\n+        public Operation<LongMeasure, LongMeasure.BoundLongMeasure> build(Meter meter) {\n+          Operation<LongMeasure, LongMeasure.BoundLongMeasure> op =\n+              new Operation<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longMeasureBuilder(\"long_measure\").build();\n+                  boundMetric =\n+                      meter.longMeasureBuilder(\"bound_long_measure\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      });\n+\n+  private final OperationBuilder<?, ?> builder;\n+\n+  MetricsTestOperationBuilder(final OperationBuilder<?, ?> builder) {\n+    this.builder = builder;\n+  }\n+\n+  public Operation<?, ?> build(Meter meter) {\n+    return this.builder.build(meter);\n+  }\n+\n+  @Immutable\n+  private interface OperationBuilder<T, U> {\n+    Operation<T, U> build(Meter meter);\n+  }\n+\n+  abstract static class Operation<T, U> {\n+    T metric;\n+    U boundMetric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MjgxNA==", "bodyText": "This is what's allowing us to use the metrics without an explicit cast in the Operation instances like metric.add(5L, args). Otherwise both metric and boundMetric are going to need to be bare objects with casts everywhere we refer to them (which is not often. I think I prefer the generic way, but if you prefer the raw Object because the generics are distracting, I'm sympathetic to that argument.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396592814", "createdAt": "2020-03-23T16:40:10Z", "author": {"login": "zenmoto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleMeasureRecord(\n+      new OperationBuilder<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+        @Override\n+        public Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> build(Meter meter) {\n+          Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> op =\n+              new Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleMeasureBuilder(\"double_measure\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleMeasureBuilder(\"bound_double_measure\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  LongMeasureRecord(\n+      new OperationBuilder<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+        @Override\n+        public Operation<LongMeasure, LongMeasure.BoundLongMeasure> build(Meter meter) {\n+          Operation<LongMeasure, LongMeasure.BoundLongMeasure> op =\n+              new Operation<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longMeasureBuilder(\"long_measure\").build();\n+                  boundMetric =\n+                      meter.longMeasureBuilder(\"bound_long_measure\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      });\n+\n+  private final OperationBuilder<?, ?> builder;\n+\n+  MetricsTestOperationBuilder(final OperationBuilder<?, ?> builder) {\n+    this.builder = builder;\n+  }\n+\n+  public Operation<?, ?> build(Meter meter) {\n+    return this.builder.build(meter);\n+  }\n+\n+  @Immutable\n+  private interface OperationBuilder<T, U> {\n+    Operation<T, U> build(Meter meter);\n+  }\n+\n+  abstract static class Operation<T, U> {\n+    T metric;\n+    U boundMetric;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODYzMA=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzOTM5MQ==", "bodyText": "metric and metricBound can be members in the sub-class you don't need them here because you don't need access to them when calling perform and performBound.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396639391", "createdAt": "2020-03-23T17:46:44Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleMeasureRecord(\n+      new OperationBuilder<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+        @Override\n+        public Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> build(Meter meter) {\n+          Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> op =\n+              new Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleMeasureBuilder(\"double_measure\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleMeasureBuilder(\"bound_double_measure\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  LongMeasureRecord(\n+      new OperationBuilder<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+        @Override\n+        public Operation<LongMeasure, LongMeasure.BoundLongMeasure> build(Meter meter) {\n+          Operation<LongMeasure, LongMeasure.BoundLongMeasure> op =\n+              new Operation<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longMeasureBuilder(\"long_measure\").build();\n+                  boundMetric =\n+                      meter.longMeasureBuilder(\"bound_long_measure\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      });\n+\n+  private final OperationBuilder<?, ?> builder;\n+\n+  MetricsTestOperationBuilder(final OperationBuilder<?, ?> builder) {\n+    this.builder = builder;\n+  }\n+\n+  public Operation<?, ?> build(Meter meter) {\n+    return this.builder.build(meter);\n+  }\n+\n+  @Immutable\n+  private interface OperationBuilder<T, U> {\n+    Operation<T, U> build(Meter meter);\n+  }\n+\n+  abstract static class Operation<T, U> {\n+    T metric;\n+    U boundMetric;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODYzMA=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MTI5Nw==", "bodyText": "Of course, thank you. Tried this too many ways before and was overlooking the obvious here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396741297", "createdAt": "2020-03-23T20:37:20Z", "author": {"login": "zenmoto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleMeasureRecord(\n+      new OperationBuilder<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+        @Override\n+        public Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> build(Meter meter) {\n+          Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure> op =\n+              new Operation<DoubleMeasure, DoubleMeasure.BoundDoubleMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleMeasureBuilder(\"double_measure\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleMeasureBuilder(\"bound_double_measure\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  LongMeasureRecord(\n+      new OperationBuilder<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+        @Override\n+        public Operation<LongMeasure, LongMeasure.BoundLongMeasure> build(Meter meter) {\n+          Operation<LongMeasure, LongMeasure.BoundLongMeasure> op =\n+              new Operation<LongMeasure, LongMeasure.BoundLongMeasure>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.record(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.record(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longMeasureBuilder(\"long_measure\").build();\n+                  boundMetric =\n+                      meter.longMeasureBuilder(\"bound_long_measure\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      });\n+\n+  private final OperationBuilder<?, ?> builder;\n+\n+  MetricsTestOperationBuilder(final OperationBuilder<?, ?> builder) {\n+    this.builder = builder;\n+  }\n+\n+  public Operation<?, ?> build(Meter meter) {\n+    return this.builder.build(meter);\n+  }\n+\n+  @Immutable\n+  private interface OperationBuilder<T, U> {\n+    Operation<T, U> build(Meter meter);\n+  }\n+\n+  abstract static class Operation<T, U> {\n+    T metric;\n+    U boundMetric;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODYzMA=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTk3ODE3OnYy", "diffSide": "RIGHT", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTozNFrOF51dTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNDo0NFrOF6QCjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTAwNg==", "bodyText": "It seems that this is a common pattern to call initialize as the fist thing after the ctor is called. Do we really need an initialize method or we can just move the code and get rid of that method?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396189006", "createdAt": "2020-03-23T02:45:34Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMjg3OA==", "bodyText": "We need initialize(meter), because we can't have a constructor in an abstract class, and we need somewhere to build the correct metric/boundMetric set for the test. Code standards don't allow for calling an overridden method from a superclass constructor, but I can move this into a superclass build(Meter meter) that will clean this up a bit. The other alternative is to move all of these Operations into a named class and use constructors, but I think that will be less clear.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396612878", "createdAt": "2020-03-23T17:08:17Z", "author": {"login": "zenmoto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTAwNg=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNDUyNw==", "bodyText": "Or I missed an obvious way to restructure this by passing the meter and bound meter into the constructor.  Oops.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/990#discussion_r396624527", "createdAt": "2020-03-23T17:24:44Z", "author": {"login": "zenmoto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/MetricsTestOperationBuilder.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * This enum allows for iteration over all of the operations that we want to benchmark. To ensure\n+ * that the enum cannot change state, each enum holds a builder function- passing a meter in will\n+ * return a wrapper for both bound and unbound versions of that operation which can then be used in\n+ * a benchmark.\n+ */\n+public enum MetricsTestOperationBuilder {\n+  LongCounterAdd(\n+      new OperationBuilder<LongCounter, LongCounter.BoundLongCounter>() {\n+        @Override\n+        public Operation<LongCounter, LongCounter.BoundLongCounter> build(Meter meter) {\n+          Operation<LongCounter, LongCounter.BoundLongCounter> op =\n+              new Operation<LongCounter, LongCounter.BoundLongCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5L, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5L);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.longCounterBuilder(\"long_counter\").build();\n+                  boundMetric =\n+                      meter.longCounterBuilder(\"bound_long_counter\").build().bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);\n+          return op;\n+        }\n+      }),\n+  DoubleCounterAdd(\n+      new OperationBuilder<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+        @Override\n+        public Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> build(Meter meter) {\n+          Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter> op =\n+              new Operation<DoubleCounter, DoubleCounter.BoundDoubleCounter>() {\n+                @Override\n+                void perform(String... args) {\n+                  metric.add(5.0d, args);\n+                }\n+\n+                @Override\n+                void performBound() {\n+                  boundMetric.add(5.0d);\n+                }\n+\n+                @Override\n+                protected void initialize(Meter meter) {\n+                  metric = meter.doubleCounterBuilder(\"double_counter\").build();\n+                  boundMetric =\n+                      meter\n+                          .doubleCounterBuilder(\"bound_double_counter\")\n+                          .build()\n+                          .bind(\"KEY\", \"VALUE\");\n+                }\n+              };\n+          op.initialize(meter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTAwNg=="}, "originalCommit": {"oid": "6c8b1097db18b49c7ed4aaef5754acadeb79ac52"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 967, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}