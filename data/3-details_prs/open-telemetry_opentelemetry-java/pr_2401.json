{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NjUwNDUw", "number": 2401, "title": "Add autoconfiguration wrapper artifact", "bodyText": "This implements autoconfiguration moved into a separate layer as discussed a few times before. It's aim is to remove autoconfiguration from the core SDK so frameworks with their own configuration system, e.g., sleuth, can use it with full control, and other users can rely on our autoconfiguration if they want. Since we have control of the artifact, while slightly weird, it seems reasonable for us to automatically call into it with reflection, and otherwise we just return no-op (and log in the case of a misconfigured SDK as in #2396).\nI mostly followed the parameters supported by the java agent except\n\nUpdated names to use latest from spec, some small tweaks\nDidn't add support for \"max attributes per event\" type variables since not in spec\nDidn't add jaeger_thrift open-telemetry/opentelemetry-java-instrumentation#1973", "createdAt": "2020-12-23T08:40:00Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401", "merged": true, "mergeCommit": {"oid": "e749f2b26258f0aa80914f6d8a08cafb9fd1febf"}, "closed": true, "closedAt": "2021-01-07T03:02:10Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdo6_0-gH2gAyNTQ0NjUwNDUwOmJhMjA0MzMzMDdiOGE0YTYxNzU3YTdjM2MzMjlkNTIwOTQ1N2RlYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtrCGFAH2gAyNTQ0NjUwNDUwOjA2MDQ4ZDQ5NGQ3Y2IzYTM3MjMxZDY0NjgyMjk5ZDY3ZTFiOWQ1Y2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ba20433307b8a4a61757a7c3c329d5209457dea2", "committedDate": "2020-12-23T08:38:25Z", "message": "Add autoconfiguration wrapper artifact"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzIwODU0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-557720854", "createdAt": "2020-12-23T08:41:23Z", "commit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0MToyM1rOIKbzeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0MToyM1rOIKbzeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxMjIxNw==", "bodyText": "Will need to add linkage error guards to return better error messages for when a configuration option is set but implementation not available.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r547812217", "createdAt": "2020-12-23T08:41:23Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporterBuilder;\n+import io.opentelemetry.exporter.jaeger.thrift.JaegerThriftSpanExporter;\n+import io.opentelemetry.exporter.jaeger.thrift.JaegerThriftSpanExporterBuilder;\n+import io.opentelemetry.exporter.logging.LoggingSpanExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;\n+import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;\n+import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporterBuilder;\n+import io.opentelemetry.exporter.prometheus.PrometheusCollector;\n+import io.opentelemetry.exporter.zipkin.ZipkinSpanExporter;\n+import io.opentelemetry.exporter.zipkin.ZipkinSpanExporterBuilder;\n+import io.opentelemetry.extension.trace.propagation.AwsXRayPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import io.opentelemetry.extension.trace.propagation.JaegerPropagator;\n+import io.opentelemetry.extension.trace.propagation.OtTracerPropagator;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkMeterProviderConfigurer;\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkTracerProviderConfigurer;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.config.TraceConfigBuilder;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessorBuilder;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ServiceLoader;\n+\n+public final class OpenTelemetrySdkAutoConfiguration {\n+\n+  public static OpenTelemetrySdk initialize() {\n+    ConfigProperties config = ConfigProperties.get();\n+\n+    AttributesBuilder resourceAttributes = Attributes.builder();\n+    config.getCommaSeparatedMap(\"otel.resource.attributes\").forEach(resourceAttributes::put);\n+    Resource resource = Resource.getDefault().merge(Resource.create(resourceAttributes.build()));\n+\n+    SdkMeterProviderBuilder meterProviderBuilder = SdkMeterProvider.builder().setResource(resource);\n+    for (SdkMeterProviderConfigurer configurer :\n+        ServiceLoader.load(SdkMeterProviderConfigurer.class)) {\n+      configurer.configure(meterProviderBuilder);\n+    }\n+    SdkMeterProvider meterProvider = meterProviderBuilder.build();\n+\n+    List<String> exporterNames = config.getCommaSeparatedValues(\"otel.exporter\");\n+    boolean metricsConfigured = false;\n+    for (String exporterName : exporterNames) {\n+      exporterName = exporterName.toLowerCase(Locale.ROOT);\n+      switch (exporterName) {\n+        case \"otlp\":\n+        case \"otlp_metrics\":\n+          if (metricsConfigured) {\n+            throw new IllegalStateException(\n+                \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                    + \"configured at a time.\");\n+          }\n+          configureOtlpMetrics(config, meterProvider);\n+          metricsConfigured = true;\n+          break;\n+        case \"prometheus\":\n+          if (metricsConfigured) {\n+            throw new IllegalStateException(\n+                \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                    + \"configured at a time.\");\n+          }\n+          configurePrometheusMetrics(config, meterProvider);\n+          metricsConfigured = true;\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    SdkTracerProviderBuilder tracerProviderBuilder =\n+        SdkTracerProvider.builder()\n+            .setResource(resource)\n+            .setTraceConfig(configureTraceConfig(config));\n+\n+    List<SpanExporter> spanExporters = new ArrayList<>();\n+    for (String exporterName : exporterNames) {\n+      exporterName = exporterName.toLowerCase(Locale.ROOT);\n+      switch (exporterName) {\n+        case \"otlp\":\n+        case \"otlp_span\":\n+          spanExporters.add(configureOtlpSpans(config));\n+          break;\n+        case \"jaeger\":\n+          spanExporters.add(configureJaeger(config));\n+          break;\n+        case \"jaeger-thrift\":\n+          spanExporters.add(configureJaegerThrift(config));\n+          break;\n+        case \"zipkin\":\n+          spanExporters.add(configureZipkin(config));\n+          break;\n+        case \"logging\":\n+          spanExporters.add(new LoggingSpanExporter());\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    if (!spanExporters.isEmpty()) {\n+      tracerProviderBuilder.addSpanProcessor(configureSpanProcessor(config, spanExporters));\n+    }\n+\n+    for (SdkTracerProviderConfigurer configurer :\n+        ServiceLoader.load(SdkTracerProviderConfigurer.class)) {\n+      configurer.configure(tracerProviderBuilder);\n+    }\n+\n+    List<TextMapPropagator> propagators = new ArrayList<>();\n+    for (String propagatorName : config.getCommaSeparatedValues(\"otel.propagators\")) {\n+      switch (propagatorName) {\n+        case \"tracecontext\":\n+          propagators.add(W3CTraceContextPropagator.getInstance());\n+          break;\n+        case \"baggage\":\n+          propagators.add(W3CBaggagePropagator.getInstance());\n+          break;\n+        case \"b3\":\n+          propagators.add(B3Propagator.getInstance());\n+          break;\n+        case \"b3multi\":\n+          propagators.add(B3Propagator.builder().injectMultipleHeaders().build());\n+          break;\n+        case \"jaeger\":\n+          propagators.add(JaegerPropagator.getInstance());\n+          break;\n+        case \"ottracer\":\n+          propagators.add(OtTracerPropagator.getInstance());\n+          break;\n+        case \"xray\":\n+          propagators.add(AwsXRayPropagator.getInstance());\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    return OpenTelemetrySdk.builder()\n+        .setTracerProvider(tracerProviderBuilder.build())\n+        .setPropagators(ContextPropagators.create(TextMapPropagator.composite(propagators)))\n+        .build();\n+  }\n+\n+  private static void configureOtlpMetrics(\n+      ConfigProperties config, SdkMeterProvider meterProvider) {\n+    OtlpGrpcMetricExporterBuilder builder = OtlpGrpcMetricExporter.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MDgyODI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-558082827", "createdAt": "2020-12-23T16:45:46Z", "commit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0NTo0NlrOIKqNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0NTo0NlrOIKqNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0ODIxOA==", "bodyText": "this doesn't belong in this PR, does it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r548048218", "createdAt": "2020-12-23T16:45:46Z", "author": {"login": "jkwatson"}, "path": "build.gradle", "diffHunk": "@@ -199,6 +199,7 @@ subprojects {\n                     jsr305                      : \"com.google.code.findbugs:jsr305:${findBugsJsr305Version}\",\n                     prometheus_client           : \"io.prometheus:simpleclient:${prometheusVersion}\",\n                     prometheus_client_common    : \"io.prometheus:simpleclient_common:${prometheusVersion}\",\n+                    prometheus_client_httpserver: \"io.prometheus:simpleclient_httpserver:${prometheusVersion}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MTM0NDM4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-558134438", "createdAt": "2020-12-23T17:27:18Z", "commit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoyNzoxOFrOIKrgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoyNzoxOFrOIKrgtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2OTU1Ng==", "bodyText": "I think I'd break each of these methods out into their own class so it's clear how to add new ones to the auto-config, rather than having to dig into this beast to find them. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r548069556", "createdAt": "2020-12-23T17:27:18Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporter.jaeger.JaegerGrpcSpanExporterBuilder;\n+import io.opentelemetry.exporter.jaeger.thrift.JaegerThriftSpanExporter;\n+import io.opentelemetry.exporter.jaeger.thrift.JaegerThriftSpanExporterBuilder;\n+import io.opentelemetry.exporter.logging.LoggingSpanExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;\n+import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;\n+import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporterBuilder;\n+import io.opentelemetry.exporter.prometheus.PrometheusCollector;\n+import io.opentelemetry.exporter.zipkin.ZipkinSpanExporter;\n+import io.opentelemetry.exporter.zipkin.ZipkinSpanExporterBuilder;\n+import io.opentelemetry.extension.trace.propagation.AwsXRayPropagator;\n+import io.opentelemetry.extension.trace.propagation.B3Propagator;\n+import io.opentelemetry.extension.trace.propagation.JaegerPropagator;\n+import io.opentelemetry.extension.trace.propagation.OtTracerPropagator;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkMeterProviderConfigurer;\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkTracerProviderConfigurer;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.config.TraceConfigBuilder;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessorBuilder;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.ServiceLoader;\n+\n+public final class OpenTelemetrySdkAutoConfiguration {\n+\n+  public static OpenTelemetrySdk initialize() {\n+    ConfigProperties config = ConfigProperties.get();\n+\n+    AttributesBuilder resourceAttributes = Attributes.builder();\n+    config.getCommaSeparatedMap(\"otel.resource.attributes\").forEach(resourceAttributes::put);\n+    Resource resource = Resource.getDefault().merge(Resource.create(resourceAttributes.build()));\n+\n+    SdkMeterProviderBuilder meterProviderBuilder = SdkMeterProvider.builder().setResource(resource);\n+    for (SdkMeterProviderConfigurer configurer :\n+        ServiceLoader.load(SdkMeterProviderConfigurer.class)) {\n+      configurer.configure(meterProviderBuilder);\n+    }\n+    SdkMeterProvider meterProvider = meterProviderBuilder.build();\n+\n+    List<String> exporterNames = config.getCommaSeparatedValues(\"otel.exporter\");\n+    boolean metricsConfigured = false;\n+    for (String exporterName : exporterNames) {\n+      exporterName = exporterName.toLowerCase(Locale.ROOT);\n+      switch (exporterName) {\n+        case \"otlp\":\n+        case \"otlp_metrics\":\n+          if (metricsConfigured) {\n+            throw new IllegalStateException(\n+                \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                    + \"configured at a time.\");\n+          }\n+          configureOtlpMetrics(config, meterProvider);\n+          metricsConfigured = true;\n+          break;\n+        case \"prometheus\":\n+          if (metricsConfigured) {\n+            throw new IllegalStateException(\n+                \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                    + \"configured at a time.\");\n+          }\n+          configurePrometheusMetrics(config, meterProvider);\n+          metricsConfigured = true;\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    SdkTracerProviderBuilder tracerProviderBuilder =\n+        SdkTracerProvider.builder()\n+            .setResource(resource)\n+            .setTraceConfig(configureTraceConfig(config));\n+\n+    List<SpanExporter> spanExporters = new ArrayList<>();\n+    for (String exporterName : exporterNames) {\n+      exporterName = exporterName.toLowerCase(Locale.ROOT);\n+      switch (exporterName) {\n+        case \"otlp\":\n+        case \"otlp_span\":\n+          spanExporters.add(configureOtlpSpans(config));\n+          break;\n+        case \"jaeger\":\n+          spanExporters.add(configureJaeger(config));\n+          break;\n+        case \"jaeger-thrift\":\n+          spanExporters.add(configureJaegerThrift(config));\n+          break;\n+        case \"zipkin\":\n+          spanExporters.add(configureZipkin(config));\n+          break;\n+        case \"logging\":\n+          spanExporters.add(new LoggingSpanExporter());\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    if (!spanExporters.isEmpty()) {\n+      tracerProviderBuilder.addSpanProcessor(configureSpanProcessor(config, spanExporters));\n+    }\n+\n+    for (SdkTracerProviderConfigurer configurer :\n+        ServiceLoader.load(SdkTracerProviderConfigurer.class)) {\n+      configurer.configure(tracerProviderBuilder);\n+    }\n+\n+    List<TextMapPropagator> propagators = new ArrayList<>();\n+    for (String propagatorName : config.getCommaSeparatedValues(\"otel.propagators\")) {\n+      switch (propagatorName) {\n+        case \"tracecontext\":\n+          propagators.add(W3CTraceContextPropagator.getInstance());\n+          break;\n+        case \"baggage\":\n+          propagators.add(W3CBaggagePropagator.getInstance());\n+          break;\n+        case \"b3\":\n+          propagators.add(B3Propagator.getInstance());\n+          break;\n+        case \"b3multi\":\n+          propagators.add(B3Propagator.builder().injectMultipleHeaders().build());\n+          break;\n+        case \"jaeger\":\n+          propagators.add(JaegerPropagator.getInstance());\n+          break;\n+        case \"ottracer\":\n+          propagators.add(OtTracerPropagator.getInstance());\n+          break;\n+        case \"xray\":\n+          propagators.add(AwsXRayPropagator.getInstance());\n+          break;\n+        default:\n+          // Ignore\n+      }\n+    }\n+\n+    return OpenTelemetrySdk.builder()\n+        .setTracerProvider(tracerProviderBuilder.build())\n+        .setPropagators(ContextPropagators.create(TextMapPropagator.composite(propagators)))\n+        .build();\n+  }\n+\n+  private static void configureOtlpMetrics(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjE3ODA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-558217808", "createdAt": "2020-12-23T20:37:18Z", "commit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNzoxOFrOIK0eSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDozNzoxOFrOIK0eSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNjM5Mg==", "bodyText": "this could also be due to a restrictive security manager", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r548216392", "createdAt": "2020-12-23T20:37:18Z", "author": {"login": "jkwatson"}, "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "diffHunk": "@@ -115,4 +122,25 @@ public static Tracer getTracer(String instrumentationName, String instrumentatio\n   public static ContextPropagators getPropagators() {\n     return get().getPropagators();\n   }\n+\n+  @Nullable\n+  private static OpenTelemetry maybeAutoConfigure() {\n+    final Class<?> openTelemetrySdkAutoConfiguration;\n+    try {\n+      openTelemetrySdkAutoConfiguration =\n+          Class.forName(\"io.opentelemetry.sdk.autoconfigure.OpenTelemetrySdkAutoConfiguration\");\n+    } catch (ClassNotFoundException e) {\n+      return null;\n+    }\n+\n+    try {\n+      Method initialize = openTelemetrySdkAutoConfiguration.getMethod(\"initialize\");\n+      return (OpenTelemetry) initialize.invoke(null);\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      throw new IllegalStateException(\n+          \"OpenTelemetrySdkAutoConfiguration detected on classpath \"\n+              + \"but could not invoke initialize method. This is a bug in OpenTelemetry.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba20433307b8a4a61757a7c3c329d5209457dea2"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d46ea1b225ed90ac1f89ddb0768731be09dd84", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78d46ea1b225ed90ac1f89ddb0768731be09dd84", "committedDate": "2020-12-24T05:40:48Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3603143a63f8a6bb00419a6faf16d2154399b252", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3603143a63f8a6bb00419a6faf16d2154399b252", "committedDate": "2020-12-25T02:28:54Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0410fef78c167fb016e603a0ff753e080792ba1c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0410fef78c167fb016e603a0ff753e080792ba1c", "committedDate": "2020-12-25T05:03:23Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c31d43b4b46f338eb508ac71310ced502b00bc", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/65c31d43b4b46f338eb508ac71310ced502b00bc", "committedDate": "2020-12-29T04:16:36Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72eee183bc45cfcf4fb01f4755c11ac1ec6c990", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a72eee183bc45cfcf4fb01f4755c11ac1ec6c990", "committedDate": "2020-12-29T04:33:45Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d696dac3a0a6fe1b7f1d9f84302958be78d10409", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d696dac3a0a6fe1b7f1d9f84302958be78d10409", "committedDate": "2021-01-04T05:12:37Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c857c5279d5ce0e23b08e94455cbd5f7996bb0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c8c857c5279d5ce0e23b08e94455cbd5f7996bb0", "committedDate": "2021-01-04T05:24:20Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e032f4c8ecb09768ee9f7ea7c90140a5eec88c6c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e032f4c8ecb09768ee9f7ea7c90140a5eec88c6c", "committedDate": "2021-01-04T06:17:28Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0d223ccf17ee21ad9877abd7dcd726c5d691f8", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7e0d223ccf17ee21ad9877abd7dcd726c5d691f8", "committedDate": "2021-01-04T06:34:55Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c670b4e9959db8b2426d6bc88189876364cca3f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8c670b4e9959db8b2426d6bc88189876364cca3f", "committedDate": "2021-01-04T09:27:14Z", "message": "Mostly done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83836bdb66e7caf54158b205efc6af9d1f435da", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c83836bdb66e7caf54158b205efc6af9d1f435da", "committedDate": "2021-01-04T09:34:09Z", "message": "Propagator classpath"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODgzMzMz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-560883333", "createdAt": "2021-01-04T09:28:11Z", "commit": {"oid": "8c670b4e9959db8b2426d6bc88189876364cca3f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToyODoxMVrOINqoTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToyOTo0NVrOINqrdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwMDg0NQ==", "bodyText": "Unlike the first commit with PoC, I haven't removed the API SPI yet, that we would do in a separate PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r551200845", "createdAt": "2021-01-04T09:28:11Z", "author": {"login": "anuraaga"}, "path": "api/all/src/main/java/io/opentelemetry/api/GlobalOpenTelemetry.java", "diffHunk": "@@ -48,6 +51,13 @@ public static OpenTelemetry get() {\n     if (globalOpenTelemetry == null) {\n       synchronized (mutex) {\n         if (globalOpenTelemetry == null) {\n+\n+          OpenTelemetry autoConfigured = maybeAutoConfigure();\n+          if (autoConfigured != null) {\n+            set(autoConfigured);\n+            return autoConfigured;\n+          }\n+\n           OpenTelemetryFactory openTelemetryFactory = Utils.loadSpi(OpenTelemetryFactory.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c670b4e9959db8b2426d6bc88189876364cca3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwMTA0OQ==", "bodyText": "See #2418", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r551201049", "createdAt": "2021-01-04T09:28:36Z", "author": {"login": "anuraaga"}, "path": "buildscripts/checkstyle.xml", "diffHunk": "@@ -55,20 +55,6 @@\n              value=\"LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH\"/>\n         </module>\n         <module name=\"NeedBraces\"/>\n-        <module name=\"LeftCurly\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c670b4e9959db8b2426d6bc88189876364cca3f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwMTY1NA==", "bodyText": "I'm hoping to link to a docs page from here rather than outlining all properties here - presuably autoconfiguration users are the last to read the javadocs", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r551201654", "createdAt": "2021-01-04T09:29:45Z", "author": {"login": "anuraaga"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import java.util.List;\n+import java.util.Locale;\n+\n+/**\n+ * Auto-configuration for the OpenTelemetry SDK. As an alternative to programmatically configuring\n+ * the SDK using {@link OpenTelemetrySdk#builder()}, this package can be used to automatically\n+ * configure the SDK using environment properties specified by OpenTelemetry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c670b4e9959db8b2426d6bc88189876364cca3f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d92ee268d92c02f7785739b207e007224df7f84", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7d92ee268d92c02f7785739b207e007224df7f84", "committedDate": "2021-01-05T04:34:45Z", "message": "Finish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/955c59e6b2f12abd5156d33361b73bd825cce597", "committedDate": "2021-01-05T04:35:39Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDY4ODg4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562068888", "createdAt": "2021-01-05T19:26:58Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToyNjo1OVrOIOkR1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToyNjo1OVrOIOkR1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0NTM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * prefer to use system properties for configuration, but this may be useful to register components\n          \n          \n            \n             * prefer to use system properties or environment variables for configuration, but this may be useful to register components", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552145364", "createdAt": "2021-01-05T19:26:59Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/spi/SdkTracerProviderConfigurer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure.spi;\n+\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+\n+/**\n+ * A service provider interface (SPI) for performing additional programmatic configuration of a\n+ * {@link SdkTracerProviderBuilder} during initialization. When using auto-configuration, you should\n+ * prefer to use system properties for configuration, but this may be useful to register components", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDcxOTQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562071949", "createdAt": "2021-01-05T19:31:43Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozMTo0M1rOIOkbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozMTo0M1rOIOkbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0NzgwNA==", "bodyText": "this should be up above the static methods", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552147804", "createdAt": "2021-01-05T19:31:43Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  static ConfigProperties createForTest(Map<String, String> properties) {\n+    return new ConfigProperties((Map) properties, Collections.emptyMap());\n+  }\n+\n+  private final Map<String, String> config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDcyOTY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562072966", "createdAt": "2021-01-05T19:33:17Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozMzoxN1rOIOkeRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozMzoxN1rOIOkeRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0ODU1MQ==", "bodyText": "the left map could be Map<?,?> then you don't have to cast above.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552148551", "createdAt": "2021-01-05T19:33:17Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  static ConfigProperties createForTest(Map<String, String> properties) {\n+    return new ConfigProperties((Map) properties, Collections.emptyMap());\n+  }\n+\n+  private final Map<String, String> config;\n+\n+  private ConfigProperties(\n+      Map<Object, Object> systemProperties, Map<String, String> environmentVariables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTA2ODY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562106867", "createdAt": "2021-01-05T20:25:43Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoyNTo0M1rOIOmErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoyNTo0M1rOIOmErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE3NDc2NA==", "bodyText": "small nit. if you have an entry like =f it's technically missing the key, not the value. ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552174764", "createdAt": "2021-01-05T20:25:43Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  static ConfigProperties createForTest(Map<String, String> properties) {\n+    return new ConfigProperties((Map) properties, Collections.emptyMap());\n+  }\n+\n+  private final Map<String, String> config;\n+\n+  private ConfigProperties(\n+      Map<Object, Object> systemProperties, Map<String, String> environmentVariables) {\n+    Map<String, String> config = new HashMap<>();\n+    environmentVariables.forEach(\n+        (name, value) -> config.put(name.toLowerCase(Locale.ROOT).replace('_', '.'), value));\n+    systemProperties.forEach(\n+        (key, value) -> config.put(((String) key).toLowerCase(Locale.ROOT), (String) value));\n+\n+    this.config = config;\n+  }\n+\n+  @Nullable\n+  String getString(String name) {\n+    return config.get(name);\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Integer getInt(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Integer.parseInt(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"integer\");\n+    }\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Long getLong(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Long.parseLong(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"long\");\n+    }\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Double getDouble(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Double.parseDouble(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"double\");\n+    }\n+  }\n+\n+  List<String> getCommaSeparatedValues(String name) {\n+    String value = config.get(name);\n+    if (value == null) {\n+      return Collections.emptyList();\n+    }\n+    return Arrays.stream(value.split(\",\"))\n+        .map(String::trim)\n+        .filter(s -> !s.isEmpty())\n+        .collect(Collectors.toList());\n+  }\n+\n+  Map<String, String> getCommaSeparatedMap(String name) {\n+    return getCommaSeparatedValues(name).stream()\n+        .map(\n+            keyValuePair ->\n+                Arrays.stream(keyValuePair.split(\"=\", 2))\n+                    .map(String::trim)\n+                    .filter(s -> !s.isEmpty())\n+                    .collect(Collectors.toList()))\n+        .map(\n+            splitKeyValuePairs -> {\n+              if (splitKeyValuePairs.size() != 2) {\n+                throw new ConfigurationException(\n+                    \"Map property key missing value: \" + name + \"=\" + config.get(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTA3NDgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562107481", "createdAt": "2021-01-05T20:26:42Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoyNjo0MlrOIOmGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoyNjo0MlrOIOmGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE3NTIyNA==", "bodyText": "These 4 lines of code could be extracted to a method like \"filterBlanksAndNulls\" and re-used above at line 96-99", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552175224", "createdAt": "2021-01-05T20:26:42Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  static ConfigProperties createForTest(Map<String, String> properties) {\n+    return new ConfigProperties((Map) properties, Collections.emptyMap());\n+  }\n+\n+  private final Map<String, String> config;\n+\n+  private ConfigProperties(\n+      Map<Object, Object> systemProperties, Map<String, String> environmentVariables) {\n+    Map<String, String> config = new HashMap<>();\n+    environmentVariables.forEach(\n+        (name, value) -> config.put(name.toLowerCase(Locale.ROOT).replace('_', '.'), value));\n+    systemProperties.forEach(\n+        (key, value) -> config.put(((String) key).toLowerCase(Locale.ROOT), (String) value));\n+\n+    this.config = config;\n+  }\n+\n+  @Nullable\n+  String getString(String name) {\n+    return config.get(name);\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Integer getInt(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Integer.parseInt(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"integer\");\n+    }\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Long getLong(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Long.parseLong(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"long\");\n+    }\n+  }\n+\n+  @Nullable\n+  @SuppressWarnings(\"UnusedException\")\n+  Double getDouble(String name) {\n+    String value = config.get(name);\n+    if (value == null || value.isEmpty()) {\n+      return null;\n+    }\n+    try {\n+      return Double.parseDouble(value);\n+    } catch (NumberFormatException ex) {\n+      throw newInvalidPropertyException(name, value, \"double\");\n+    }\n+  }\n+\n+  List<String> getCommaSeparatedValues(String name) {\n+    String value = config.get(name);\n+    if (value == null) {\n+      return Collections.emptyList();\n+    }\n+    return Arrays.stream(value.split(\",\"))\n+        .map(String::trim)\n+        .filter(s -> !s.isEmpty())\n+        .collect(Collectors.toList());\n+  }\n+\n+  Map<String, String> getCommaSeparatedMap(String name) {\n+    return getCommaSeparatedValues(name).stream()\n+        .map(\n+            keyValuePair ->\n+                Arrays.stream(keyValuePair.split(\"=\", 2))\n+                    .map(String::trim)\n+                    .filter(s -> !s.isEmpty())\n+                    .collect(Collectors.toList()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTE0MDIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562114020", "createdAt": "2021-01-05T20:37:36Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDozNzozN1rOIOmaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDozNzozN1rOIOmaLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDI3MA==", "bodyText": "I don't think this is necessary or useful. No one should be using default serialization for anything, anywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552180270", "createdAt": "2021-01-05T20:37:37Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigurationException.java", "diffHunk": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+/** An exception that is thrown if the user-provided configuration is invalid. */\n+public final class ConfigurationException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 4717640118051490483L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTE3NTA0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562117504", "createdAt": "2021-01-05T20:43:19Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo0MzoxOVrOIOmkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo0MzoxOVrOIOmkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MjkxNg==", "bodyText": "it's a little annoying that this same check has to be done twice, but I don't see any easy away around it without some sort of ugly nesting of switch statements", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552182916", "createdAt": "2021-01-05T20:43:19Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/MetricExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;\n+import io.opentelemetry.exporter.prometheus.PrometheusCollector;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+final class MetricExporterConfiguration {\n+\n+  static boolean configureExporter(\n+      String name,\n+      ConfigProperties config,\n+      boolean metricsAlreadyRegistered,\n+      SdkMeterProvider meterProvider) {\n+    switch (name) {\n+      case \"otlp\":\n+      case \"otlp_metrics\":\n+        if (metricsAlreadyRegistered) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTE5NzI4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562119728", "createdAt": "2021-01-05T20:47:07Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo0NzowN1rOIOmr-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo0NzowN1rOIOmr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NDgyNw==", "bodyText": "I guess you could do:\n    switch (name) {\n      case \"otlp\":\n      case \"otlp_metrics\":\n      case \"prometheus\":\n        if (metricsAlreadyRegistered) {\n          throw new ConfigurationException(\n              \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n                  + \"configured at a time.\");\n        }\n        if (\"prometheus\".equals(name)) {\n          configurePrometheusMetrics(config, meterProvider);\n          return true;\n        }\n        configureOtlpMetrics(config, meterProvider);\n        return true;\n      default:\n        return false;\n    }\n\nbut I don't know if that's really much better.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552184827", "createdAt": "2021-01-05T20:47:07Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/MetricExporterConfiguration.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;\n+import io.opentelemetry.exporter.prometheus.PrometheusCollector;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+final class MetricExporterConfiguration {\n+\n+  static boolean configureExporter(\n+      String name,\n+      ConfigProperties config,\n+      boolean metricsAlreadyRegistered,\n+      SdkMeterProvider meterProvider) {\n+    switch (name) {\n+      case \"otlp\":\n+      case \"otlp_metrics\":\n+        if (metricsAlreadyRegistered) {\n+          throw new ConfigurationException(\n+              \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                  + \"configured at a time.\");\n+        }\n+        configureOtlpMetrics(config, meterProvider);\n+        return true;\n+      case \"prometheus\":\n+        if (metricsAlreadyRegistered) {\n+          throw new ConfigurationException(\n+              \"Multiple metrics exporters configured. Only one metrics exporter can be \"\n+                  + \"configured at a time.\");\n+        }\n+        configurePrometheusMetrics(config, meterProvider);\n+        return true;\n+      default:\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTIzNjgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562123682", "createdAt": "2021-01-05T20:53:02Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo1MzowMlrOIOm3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo1MzowMlrOIOm3hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4Nzc4MQ==", "bodyText": "I really really don't like that the previous code mutates the set and we're relying on that fact here. That was super surprising to me...in fact, I was sure this line was a bug until I dug into the implementations.\nEven if it ends up being uglier, I'd very strongly prefer it if we didn't have hidden side-effects in the code like this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552187781", "createdAt": "2021-01-05T20:53:02Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Auto-configuration for the OpenTelemetry SDK. As an alternative to programmatically configuring\n+ * the SDK using {@link OpenTelemetrySdk#builder()}, this package can be used to automatically\n+ * configure the SDK using environment properties specified by OpenTelemetry.\n+ */\n+public final class OpenTelemetrySdkAutoConfiguration {\n+\n+  /**\n+   * Returns an {@link OpenTelemetrySdk} automatically initialized through recognized system\n+   * properties and environment variables.\n+   */\n+  public static OpenTelemetrySdk initialize() {\n+    ConfigProperties config = ConfigProperties.get();\n+    ContextPropagators propagators = PropagatorConfiguration.configurePropagators(config);\n+\n+    Resource resource = configureResource(config);\n+\n+    Set<String> exporterNames =\n+        new LinkedHashSet<>(config.getCommaSeparatedValues(\"otel.exporter\"));\n+\n+    configureMeterProvider(resource, exporterNames, config);\n+\n+    SdkTracerProvider tracerProvider =\n+        TracerProviderConfiguration.configureTracerProvider(resource, exporterNames, config);\n+\n+    if (!exporterNames.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTI1NzA3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562125707", "createdAt": "2021-01-05T20:56:19Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo1NjoxOVrOIOm-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo1NjoxOVrOIOm-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4OTQ4Mg==", "bodyText": "\ud83d\udc4e", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552189482", "createdAt": "2021-01-05T20:56:19Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/TracerProviderConfiguration.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkTracerProviderConfigurer;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.config.TraceConfigBuilder;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessorBuilder;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+\n+final class TracerProviderConfiguration {\n+\n+  static SdkTracerProvider configureTracerProvider(\n+      Resource resource, Set<String> exporterNames, ConfigProperties config) {\n+    SdkTracerProviderBuilder tracerProviderBuilder =\n+        SdkTracerProvider.builder()\n+            .setResource(resource)\n+            .setTraceConfig(configureTraceConfig(config));\n+\n+    // Run user configuration before setting exporters from environment to allow user span\n+    // processors to effect export.\n+    for (SdkTracerProviderConfigurer configurer :\n+        ServiceLoader.load(SdkTracerProviderConfigurer.class)) {\n+      configurer.configure(tracerProviderBuilder);\n+    }\n+\n+    List<SpanExporter> spanExporters = new ArrayList<>();\n+    for (String name : new ArrayList<>(exporterNames)) {\n+      SpanExporter exporter = SpanExporterConfiguration.configureExporter(name, config);\n+      if (exporter != null) {\n+        spanExporters.add(exporter);\n+        exporterNames.remove(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTMwNTc3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562130577", "createdAt": "2021-01-05T21:03:51Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowMzo1MVrOIOnMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowMzo1MVrOIOnMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE5MzEzOQ==", "bodyText": "I didn't even realize that this was a thing that end-users could do. Is this desirable behavior?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552193139", "createdAt": "2021-01-05T21:03:51Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/test/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+\n+class OpenTelemetrySdkAutoConfigurationTest {\n+\n+  @Test\n+  void resourcePrioritizesUser() {\n+    Resource resource =\n+        OpenTelemetrySdkAutoConfiguration.configureResource(\n+            ConfigProperties.createForTest(\n+                Collections.singletonMap(\"otel.resource.attributes\", \"telemetry.sdk.name=test\")));\n+    assertThat(resource.getAttributes().get(SemanticAttributes.TELEMETRY_SDK_NAME))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTMxODgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562131881", "createdAt": "2021-01-05T21:05:52Z", "commit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowNTo1M1rOIOnQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowNTo1M1rOIOnQmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE5NDIwMQ==", "bodyText": "It'll be nice to convert to the logunit code!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552194201", "createdAt": "2021-01-05T21:05:53Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/testConfigError/java/io/opentelemetry/sdk/autoconfigure/ConfigErrorTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import io.opentelemetry.api.GlobalOpenTelemetry;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.jupiter.api.Test;\n+import org.junitpioneer.jupiter.SetSystemProperty;\n+\n+// All tests fail due to config errors so never register a global. We can test everything here\n+// without separating test sets.\n+class ConfigErrorTest {\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.exporter\", value = \"otlp_metrics,prometheus\")\n+  void multipleMetricExportersPrometheusThrows() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\n+            \"Multiple metrics exporters configured. \"\n+                + \"Only one metrics exporter can be configured at a time.\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.exporter\", value = \"prometheus,otlp_metrics\")\n+  void multipleMetricExportersOtlpThrows() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\n+            \"Multiple metrics exporters configured. \"\n+                + \"Only one metrics exporter can be configured at a time.\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.propagators\", value = \"cat\")\n+  void invalidPropagator() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\"Unrecognized value for otel.propagators: cat\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.trace.sampler\", value = \"traceidratio\")\n+  void missingTraceIdRatio() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\n+            \"otel.trace.sampler=traceidratio but otel.trace.sampler.arg is not provided. \"\n+                + \"Set otel.trace.sampler.arg to a value in the range [0.0, 1.0].\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.trace.sampler\", value = \"traceidratio\")\n+  @SetSystemProperty(key = \"otel.trace.sampler.arg\", value = \"bar\")\n+  void invalidTraceIdRatio() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\"Invalid value for property otel.trace.sampler.arg=bar. Must be a double.\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.trace.sampler\", value = \"parentbased_traceidratio\")\n+  void missingTraceIdRatioWithParent() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\n+            \"otel.trace.sampler=parentbased_traceidratio but otel.trace.sampler.arg is \"\n+                + \"not provided. Set otel.trace.sampler.arg to a value in the range [0.0, 1.0].\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.trace.sampler\", value = \"parentbased_traceidratio\")\n+  @SetSystemProperty(key = \"otel.trace.sampler.arg\", value = \"bar\")\n+  void invalidTraceIdRatioWithParent() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\"Invalid value for property otel.trace.sampler.arg=bar. Must be a double.\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.trace.sampler\", value = \"cat\")\n+  void invalidSampler() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\"Unrecognized value for otel.trace.sampler: cat\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.exporter\", value = \"otlp,cat,dog\")\n+  void invalidExporter() {\n+    assertThatThrownBy(OpenTelemetrySdkAutoConfiguration::initialize)\n+        .isInstanceOf(ConfigurationException.class)\n+        .hasMessage(\"Unrecognized value for otel.exporter: cat,dog\");\n+  }\n+\n+  @Test\n+  @SetSystemProperty(key = \"otel.exporter\", value = \"bar\")\n+  void globalOpenTelemetryWhenError() {\n+    Logger logger = Logger.getLogger(GlobalOpenTelemetry.class.getName());\n+    AtomicReference<LogRecord> logged = new AtomicReference<>();\n+    Handler handler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "955c59e6b2f12abd5156d33361b73bd825cce597"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "113951f8ef7fad172ad24758388e4e1079196715", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/113951f8ef7fad172ad24758388e4e1079196715", "committedDate": "2021-01-06T00:20:59Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e27dc42c9e3a7fe15000bb14179dfcdd8484a180", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e27dc42c9e3a7fe15000bb14179dfcdd8484a180", "committedDate": "2021-01-06T00:21:05Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a5bd830ec7173f6bb7b0c1230005213ed83874", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/83a5bd830ec7173f6bb7b0c1230005213ed83874", "committedDate": "2021-01-06T00:34:01Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1eb9420975e9db3040b42312cb1b1be63cd41e7", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1eb9420975e9db3040b42312cb1b1be63cd41e7", "committedDate": "2021-01-06T03:04:21Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/31853bcbf53b2d6af0dfb4d122fb9c683de0649b", "committedDate": "2021-01-06T03:05:21Z", "message": "Not visible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODcwMzAy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562870302", "createdAt": "2021-01-06T16:48:18Z", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo0ODoxOFrOIPMIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo0ODoxOFrOIPMIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc5ODI5OQ==", "bodyText": "this is a good solution. thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552798299", "createdAt": "2021-01-06T16:48:18Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/OpenTelemetrySdkAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.AttributesBuilder;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.SdkMeterProvider;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Auto-configuration for the OpenTelemetry SDK. As an alternative to programmatically configuring\n+ * the SDK using {@link OpenTelemetrySdk#builder()}, this package can be used to automatically\n+ * configure the SDK using environment properties specified by OpenTelemetry.\n+ */\n+public final class OpenTelemetrySdkAutoConfiguration {\n+\n+  /**\n+   * Returns an {@link OpenTelemetrySdk} automatically initialized through recognized system\n+   * properties and environment variables.\n+   */\n+  public static OpenTelemetrySdk initialize() {\n+    ConfigProperties config = ConfigProperties.get();\n+    ContextPropagators propagators = PropagatorConfiguration.configurePropagators(config);\n+\n+    Resource resource = configureResource(config);\n+\n+    Set<String> exporterNames =\n+        new LinkedHashSet<>(config.getCommaSeparatedValues(\"otel.exporter\"));\n+\n+    Set<String> unrecognizedExporters = new LinkedHashSet<>(exporterNames);\n+    unrecognizedExporters.removeAll(SpanExporterConfiguration.RECOGNIZED_NAMES);\n+    unrecognizedExporters.removeAll(MetricExporterConfiguration.RECOGNIZED_NAMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODcxNDc1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562871475", "createdAt": "2021-01-06T16:49:47Z", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo0OTo0N1rOIPMN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo0OTo0N1rOIPMN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc5OTc0MQ==", "bodyText": "stuff like this is a good argument for extracting the keys into constants, but that can be done as a separate step later, for sure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552799741", "createdAt": "2021-01-06T16:49:47Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/TracerProviderConfiguration.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import io.opentelemetry.sdk.autoconfigure.spi.SdkTracerProviderConfigurer;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.config.TraceConfigBuilder;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessorBuilder;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+\n+final class TracerProviderConfiguration {\n+\n+  static SdkTracerProvider configureTracerProvider(\n+      Resource resource, Set<String> exporterNames, ConfigProperties config) {\n+    SdkTracerProviderBuilder tracerProviderBuilder =\n+        SdkTracerProvider.builder()\n+            .setResource(resource)\n+            .setTraceConfig(configureTraceConfig(config));\n+\n+    // Run user configuration before setting exporters from environment to allow user span\n+    // processors to effect export.\n+    for (SdkTracerProviderConfigurer configurer :\n+        ServiceLoader.load(SdkTracerProviderConfigurer.class)) {\n+      configurer.configure(tracerProviderBuilder);\n+    }\n+\n+    List<SpanExporter> spanExporters = new ArrayList<>();\n+    for (String name : new ArrayList<>(exporterNames)) {\n+      SpanExporter exporter = SpanExporterConfiguration.configureExporter(name, config);\n+      if (exporter != null) {\n+        spanExporters.add(exporter);\n+      }\n+    }\n+\n+    if (!spanExporters.isEmpty()) {\n+      tracerProviderBuilder.addSpanProcessor(configureSpanProcessor(config, spanExporters));\n+    }\n+\n+    SdkTracerProvider tracerProvider = tracerProviderBuilder.build();\n+    Runtime.getRuntime().addShutdownHook(new Thread(tracerProvider::shutdown));\n+    return tracerProvider;\n+  }\n+\n+  // VisibleForTesting\n+  static BatchSpanProcessor configureSpanProcessor(\n+      ConfigProperties config, List<SpanExporter> exporters) {\n+    SpanExporter exporter = SpanExporter.composite(exporters);\n+    BatchSpanProcessorBuilder builder = BatchSpanProcessor.builder(exporter);\n+\n+    Long scheduleDelayMillis = config.getLong(\"otel.bsp.schedule.delay.millis\");\n+    if (scheduleDelayMillis != null) {\n+      builder.setScheduleDelayMillis(scheduleDelayMillis);\n+    }\n+\n+    Integer maxQueue = config.getInt(\"otel.bsp.max.queue.size\");\n+    if (maxQueue != null) {\n+      builder.setMaxQueueSize(maxQueue);\n+    }\n+\n+    Integer maxExportBatch = config.getInt(\"otel.bsp.max.export.batch.size\");\n+    if (maxExportBatch != null) {\n+      builder.setMaxExportBatchSize(maxExportBatch);\n+    }\n+\n+    Integer timeout = config.getInt(\"otel.bsp.export.timeout.millis\");\n+    if (timeout != null) {\n+      builder.setExporterTimeoutMillis(timeout);\n+    }\n+\n+    return builder.build();\n+  }\n+\n+  // Visible for testing\n+  static TraceConfig configureTraceConfig(ConfigProperties config) {\n+    TraceConfigBuilder builder = TraceConfig.getDefault().toBuilder();\n+\n+    String sampler = config.getString(\"otel.trace.sampler\");\n+    if (sampler != null) {\n+      builder.setSampler(configureSampler(sampler, config));\n+    }\n+\n+    Integer maxAttrs = config.getInt(\"otel.span.attribute.count.limit\");\n+    if (maxAttrs != null) {\n+      builder.setMaxNumberOfAttributes(maxAttrs);\n+    }\n+\n+    Integer maxEvents = config.getInt(\"otel.span.event.count.limit\");\n+    if (maxEvents != null) {\n+      builder.setMaxNumberOfEvents(maxEvents);\n+    }\n+\n+    Integer maxLinks = config.getInt(\"otel.span.link.count.limit\");\n+    if (maxLinks != null) {\n+      builder.setMaxNumberOfLinks(maxLinks);\n+    }\n+\n+    return builder.build();\n+  }\n+\n+  // Visible for testing\n+  static Sampler configureSampler(String sampler, ConfigProperties config) {\n+    switch (sampler) {\n+      case \"always_on\":\n+        return Sampler.alwaysOn();\n+      case \"always_off\":\n+        return Sampler.alwaysOff();\n+      case \"traceidratio\":\n+        {\n+          Double ratio = config.getDouble(\"otel.trace.sampler.arg\");\n+          if (ratio == null) {\n+            throw new ConfigurationException(\n+                \"otel.trace.sampler=traceidratio but otel.trace.sampler.arg is not provided. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODczNTkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562873591", "createdAt": "2021-01-06T16:52:19Z", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo1MjoxOVrOIPMXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo1MjoxOVrOIPMXxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwMjI0NA==", "bodyText": "I don't think this supression is needed any more.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552802244", "createdAt": "2021-01-06T16:52:19Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  private final Map<String, String> config;\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODczNzcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562873771", "createdAt": "2021-01-06T16:52:31Z", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo1MjozMVrOIPMYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNjo1MjozMVrOIPMYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwMjQ4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SuppressWarnings({\"unchecked\", \"rawtypes\"})", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#discussion_r552802487", "createdAt": "2021-01-06T16:52:31Z", "author": {"login": "jkwatson"}, "path": "sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.autoconfigure;\n+\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+class ConfigProperties {\n+\n+  private final Map<String, String> config;\n+\n+  static ConfigProperties get() {\n+    return new ConfigProperties(System.getProperties(), System.getenv());\n+  }\n+\n+  // Visible for testing\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODc0NDA1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2401#pullrequestreview-562874405", "createdAt": "2021-01-06T16:53:15Z", "commit": {"oid": "31853bcbf53b2d6af0dfb4d122fb9c683de0649b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c386a4ded2cd87ab7dc808b8a5698892c9283a7", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c386a4ded2cd87ab7dc808b8a5698892c9283a7", "committedDate": "2021-01-07T02:40:56Z", "message": "Update sdk-extensions/autoconfigure/src/main/java/io/opentelemetry/sdk/autoconfigure/ConfigProperties.java\n\nCo-authored-by: John Watson <jkwatson@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183cfdc89bf0799c40e0a4a8d4a1f0c3f1ef95dc", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/183cfdc89bf0799c40e0a4a8d4a1f0c3f1ef95dc", "committedDate": "2021-01-07T02:51:21Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into autoconfigurre"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06048d494d7cb3a37231d64682299d67e1b9d5ce", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/06048d494d7cb3a37231d64682299d67e1b9d5ce", "committedDate": "2021-01-07T02:52:02Z", "message": "More merge"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3557, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}