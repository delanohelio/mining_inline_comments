{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDI1NzA5", "number": 1201, "title": "Add CounterUpDown implementation in the SDK", "bodyText": "This PR will be split into smaller PRs:\n\n#1202\n#1200\n#1208\n#1210", "createdAt": "2020-05-12T01:01:44Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201", "merged": true, "mergeCommit": {"oid": "47b449ef1a25a570cf25fa764e7f43510f0ec5c3"}, "closed": true, "closedAt": "2020-05-13T18:55:41Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcglkC3gFqTQxMDEzMDM4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg9bQFABqjMzMzM0MjU4NDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTMwMzgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410130382", "createdAt": "2020-05-12T14:57:30Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NzozMFrOGUK2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1NzozMFrOGUK2DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwMjM4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** No-op implementation of DoubleCounter interface. */\n          \n          \n            \n              /** No-op implementation of DoubleUpDownCounter interface. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423802380", "createdAt": "2020-05-12T14:57:30Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java", "diffHunk": "@@ -185,6 +199,94 @@ public LongCounter build() {\n     }\n   }\n \n+  /** No-op implementation of DoubleCounter interface. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTM1OTQ2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410135946", "createdAt": "2020-05-12T15:02:39Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMjozOVrOGULGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMjozOVrOGULGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNjYxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** No-op implementation of CounterLong interface. */\n          \n          \n            \n              /** No-op implementation of LongUpDownCounter interface. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423806616", "createdAt": "2020-05-12T15:02:39Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java", "diffHunk": "@@ -185,6 +199,94 @@ public LongCounter build() {\n     }\n   }\n \n+  /** No-op implementation of DoubleCounter interface. */\n+  @Immutable\n+  private static final class NoopDoubleUpDownCounter implements DoubleUpDownCounter {\n+\n+    /** Creates a new {@code NoopBound}. */\n+    private NoopDoubleUpDownCounter() {}\n+\n+    @Override\n+    public void add(double increment, String... labelKeyValuePairs) {\n+      Utils.validateLabelPairs(labelKeyValuePairs);\n+    }\n+\n+    @Override\n+    public NoopBoundDoubleUpDownCounter bind(String... labelKeyValuePairs) {\n+      Utils.validateLabelPairs(labelKeyValuePairs);\n+      return NoopBoundDoubleUpDownCounter.INSTANCE;\n+    }\n+\n+    /** No-op implementation of BoundDoubleCounter interface. */\n+    @Immutable\n+    private enum NoopBoundDoubleUpDownCounter implements BoundDoubleUpDownCounter {\n+      INSTANCE;\n+\n+      @Override\n+      public void add(double increment) {}\n+\n+      @Override\n+      public void unbind() {}\n+    }\n+\n+    private static final class NoopBuilder extends NoopAbstractInstrumentBuilder<NoopBuilder>\n+        implements Builder {\n+\n+      @Override\n+      protected NoopBuilder getThis() {\n+        return this;\n+      }\n+\n+      @Override\n+      public DoubleUpDownCounter build() {\n+        return new NoopDoubleUpDownCounter();\n+      }\n+    }\n+  }\n+\n+  /** No-op implementation of CounterLong interface. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTM2NDgz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410136483", "createdAt": "2020-05-12T15:03:10Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMzoxMFrOGULIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMzoxMFrOGULIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNzAwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** No-op implementation of BoundLongCounter interface. */\n          \n          \n            \n                /** No-op implementation of BoundLongUpDownCounter interface. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423807000", "createdAt": "2020-05-12T15:03:10Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java", "diffHunk": "@@ -185,6 +199,94 @@ public LongCounter build() {\n     }\n   }\n \n+  /** No-op implementation of DoubleCounter interface. */\n+  @Immutable\n+  private static final class NoopDoubleUpDownCounter implements DoubleUpDownCounter {\n+\n+    /** Creates a new {@code NoopBound}. */\n+    private NoopDoubleUpDownCounter() {}\n+\n+    @Override\n+    public void add(double increment, String... labelKeyValuePairs) {\n+      Utils.validateLabelPairs(labelKeyValuePairs);\n+    }\n+\n+    @Override\n+    public NoopBoundDoubleUpDownCounter bind(String... labelKeyValuePairs) {\n+      Utils.validateLabelPairs(labelKeyValuePairs);\n+      return NoopBoundDoubleUpDownCounter.INSTANCE;\n+    }\n+\n+    /** No-op implementation of BoundDoubleCounter interface. */\n+    @Immutable\n+    private enum NoopBoundDoubleUpDownCounter implements BoundDoubleUpDownCounter {\n+      INSTANCE;\n+\n+      @Override\n+      public void add(double increment) {}\n+\n+      @Override\n+      public void unbind() {}\n+    }\n+\n+    private static final class NoopBuilder extends NoopAbstractInstrumentBuilder<NoopBuilder>\n+        implements Builder {\n+\n+      @Override\n+      protected NoopBuilder getThis() {\n+        return this;\n+      }\n+\n+      @Override\n+      public DoubleUpDownCounter build() {\n+        return new NoopDoubleUpDownCounter();\n+      }\n+    }\n+  }\n+\n+  /** No-op implementation of CounterLong interface. */\n+  @Immutable\n+  private static final class NoopLongUpDownCounter implements LongUpDownCounter {\n+\n+    /** Creates a new {@code NoopBound}. */\n+    private NoopLongUpDownCounter() {}\n+\n+    @Override\n+    public void add(long increment, String... labelKeyValuePairs) {}\n+\n+    @Override\n+    public NoopBoundLongUpDownCounter bind(String... labelKeyValuePairs) {\n+      Utils.validateLabelPairs(labelKeyValuePairs);\n+      return NoopBoundLongUpDownCounter.INSTANCE;\n+    }\n+\n+    /** No-op implementation of BoundLongCounter interface. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTQxNTAz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410141503", "createdAt": "2020-05-12T15:08:04Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowODowNFrOGULXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowODowNFrOGULXrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMDk4OQ==", "bodyText": "All of this javadoc needs updating for the Up/Down.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423810989", "createdAt": "2020-05-12T15:08:04Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownCounter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleUpDownCounter.BoundDoubleUpDownCounter;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Counter is the most common synchronous instrument. This instrument supports an {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTQ4ODI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410148829", "createdAt": "2020-05-12T15:15:42Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNTo0MlrOGULuMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNTo0MlrOGULuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNjc1Mg==", "bodyText": "The example in here needs to be updated.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423816752", "createdAt": "2020-05-12T15:15:42Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongUpDownCounter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongUpDownCounter.BoundLongUpDownCounter;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * UpDownCounter instrument, to report measurements of long values. Cumulative values can go up or\n+ * stay the same, but can never go down. Cumulative values cannot be negative.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongCounter counter =\n+ *       meter.\n+ *           .longCounterBuilder(\"processed_jobs\")\n+ *           .setDescription(\"Processed jobs\")\n+ *           .setUnit(\"1\")\n+ *           .build();\n+ *\n+ *   // It is recommended that the API user keep a reference to a Bound Counter.\n+ *   private static final BoundLongCounter someWorkBound =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTUxNzUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410151753", "createdAt": "2020-05-12T15:18:42Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxODo0MlrOGUL26g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxODo0MlrOGUL26g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxODk4Ng==", "bodyText": "looks like we need a test that asserts that we can't increment with a negative value.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423818986", "createdAt": "2020-05-12T15:18:42Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/metrics/LongCounterTest.java", "diffHunk": "@@ -86,6 +87,8 @@ public void noopBind_WithBadLabelSet() {\n   public void doesNotThrow() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTU5NDYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410159460", "createdAt": "2020-05-12T15:26:25Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNjoyNVrOGUMOyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNjoyNVrOGUMOyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNTA5OQ==", "bodyText": "I think I'd prefer SynchronousInstrument here, even though it's a little longer. Also, I think some javadoc explaining what \"synchronous\" means in this context would be very useful.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423825099", "createdAt": "2020-05-12T15:26:25Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/SyncInstrument.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * @since 0.3.0\n  */\n @ThreadSafe\n-public interface InstrumentWithBinding<B extends BoundInstrument> extends Instrument {\n+public interface SyncInstrument<B extends BoundInstrument> extends Instrument {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTYyMTUx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410162151", "createdAt": "2020-05-12T15:29:10Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyOToxMFrOGUMWuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyOToxMFrOGUMWuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNzEzMQ==", "bodyText": "we should have a test to verify you can't pass in a negative increment", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423827131", "createdAt": "2020-05-12T15:29:10Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/metrics/DoubleCounterTest.java", "diffHunk": "@@ -87,6 +88,8 @@ public void noopBind_WithBadLabelSet() {\n   public void doesNotThrow() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTYzODY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-410163866", "createdAt": "2020-05-12T15:30:58Z", "commit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozMDo1OFrOGUMb6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozMDo1OFrOGUMb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyODQ1OA==", "bodyText": "can we add a negative increment here, to validate it can actually go up and down?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r423828458", "createdAt": "2020-05-12T15:30:58Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/metrics/DoubleUpDownCounterTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.metrics.DoubleUpDownCounter.BoundDoubleUpDownCounter;\n+import java.util.Arrays;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link DoubleCounter}. */\n+@RunWith(JUnit4.class)\n+public class DoubleUpDownCounterTest {\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  private static final String NAME = \"name\";\n+  private static final String DESCRIPTION = \"description\";\n+  private static final String UNIT = \"1\";\n+\n+  private final Meter meter = OpenTelemetry.getMeter(\"counter_double_test\");\n+\n+  @Test\n+  public void preventNonPrintableName() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(DefaultMeter.ERROR_MESSAGE_INVALID_NAME);\n+    meter.doubleUpDownCounterBuilder(\"\\2\").build();\n+  }\n+\n+  @Test\n+  public void preventTooLongName() {\n+    char[] chars = new char[StringUtils.NAME_MAX_LENGTH + 1];\n+    Arrays.fill(chars, 'a');\n+    String longName = String.valueOf(chars);\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(DefaultMeter.ERROR_MESSAGE_INVALID_NAME);\n+    meter.doubleUpDownCounterBuilder(longName).build();\n+  }\n+\n+  @Test\n+  public void preventNull_Description() {\n+    thrown.expect(NullPointerException.class);\n+    thrown.expectMessage(\"description\");\n+    meter.doubleUpDownCounterBuilder(\"metric\").setDescription(null).build();\n+  }\n+\n+  @Test\n+  public void preventNull_Unit() {\n+    thrown.expect(NullPointerException.class);\n+    thrown.expectMessage(\"unit\");\n+    meter.doubleUpDownCounterBuilder(\"metric\").setUnit(null).build();\n+  }\n+\n+  @Test\n+  public void preventNull_ConstantLabels() {\n+    thrown.expect(NullPointerException.class);\n+    thrown.expectMessage(\"constantLabels\");\n+    meter.doubleUpDownCounterBuilder(\"metric\").setConstantLabels(null).build();\n+  }\n+\n+  @Test\n+  public void noopBind_WithBadLabelSet() {\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        meter.doubleUpDownCounterBuilder(NAME).setDescription(DESCRIPTION).setUnit(UNIT).build();\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"key/value\");\n+    doubleUpDownCounter.bind(\"key\");\n+  }\n+\n+  @Test\n+  public void doesNotThrow() {\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        meter.doubleUpDownCounterBuilder(NAME).setDescription(DESCRIPTION).setUnit(UNIT).build();\n+    BoundDoubleUpDownCounter bound = doubleUpDownCounter.bind();\n+    bound.add(1.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fab6c1d556eed51a065b9c557b77e9031841b42", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2fab6c1d556eed51a065b9c557b77e9031841b42", "committedDate": "2020-05-12T01:01:05Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "4a9e3d2d908fbf79a7dabaf07413623ceac27e90", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a9e3d2d908fbf79a7dabaf07413623ceac27e90", "committedDate": "2020-05-12T16:34:03Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a9e3d2d908fbf79a7dabaf07413623ceac27e90", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a9e3d2d908fbf79a7dabaf07413623ceac27e90", "committedDate": "2020-05-12T16:34:03Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "162ccf9dbac91fb2cb778f80b29942613bc8f054", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/162ccf9dbac91fb2cb778f80b29942613bc8f054", "committedDate": "2020-05-12T16:37:49Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "162ccf9dbac91fb2cb778f80b29942613bc8f054", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/162ccf9dbac91fb2cb778f80b29942613bc8f054", "committedDate": "2020-05-12T16:37:49Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "32b22a3cbb8c941a32cfcab03bd3d25297d56cfb", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32b22a3cbb8c941a32cfcab03bd3d25297d56cfb", "committedDate": "2020-05-12T17:13:02Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b22a3cbb8c941a32cfcab03bd3d25297d56cfb", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32b22a3cbb8c941a32cfcab03bd3d25297d56cfb", "committedDate": "2020-05-12T17:13:02Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "b6b172947b5abbbc30e9fe156e248c04174a9634", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b6b172947b5abbbc30e9fe156e248c04174a9634", "committedDate": "2020-05-12T17:32:39Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6b172947b5abbbc30e9fe156e248c04174a9634", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b6b172947b5abbbc30e9fe156e248c04174a9634", "committedDate": "2020-05-12T17:32:39Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "d65f8d7c1e8fb6db152e95db33fbc0a20c860268", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d65f8d7c1e8fb6db152e95db33fbc0a20c860268", "committedDate": "2020-05-13T00:14:26Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b23516f0a9eed3fe30969953104db4597f58e2f", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7b23516f0a9eed3fe30969953104db4597f58e2f", "committedDate": "2020-05-13T00:15:49Z", "message": "Update DefaultMeter.java"}, "afterCommit": {"oid": "1e8e176a9ad6c165f478023fac76ae22ebb0590b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e8e176a9ad6c165f478023fac76ae22ebb0590b", "committedDate": "2020-05-13T00:16:47Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e8e176a9ad6c165f478023fac76ae22ebb0590b", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e8e176a9ad6c165f478023fac76ae22ebb0590b", "committedDate": "2020-05-13T00:16:47Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "237518b91ac48068ccf2ac759e5de59e6914ae23", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/237518b91ac48068ccf2ac759e5de59e6914ae23", "committedDate": "2020-05-13T00:30:16Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "237518b91ac48068ccf2ac759e5de59e6914ae23", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/237518b91ac48068ccf2ac759e5de59e6914ae23", "committedDate": "2020-05-13T00:30:16Z", "message": "Add UpDownCounter to the API\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "989b8afa79e9292f0734a38da913699c74fb59e2", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/989b8afa79e9292f0734a38da913699c74fb59e2", "committedDate": "2020-05-13T16:44:12Z", "message": "Add CounterUpDown implementation in the SDK\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "989b8afa79e9292f0734a38da913699c74fb59e2", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/989b8afa79e9292f0734a38da913699c74fb59e2", "committedDate": "2020-05-13T16:44:12Z", "message": "Add CounterUpDown implementation in the SDK\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73ca7269f432ddd73f1caddcd6e0985900c6d970", "committedDate": "2020-05-13T17:02:27Z", "message": "Add CounterUpDown implementation in the SDK\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTkwODA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-411190808", "createdAt": "2020-05-13T18:28:33Z", "commit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyODozM1rOGU-UHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyODozM1rOGU-UHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NTY2MA==", "bodyText": "with this throw, we should make sure to unbind above in a finally block.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r424645660", "createdAt": "2020-05-13T18:28:33Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "diffHunk": "@@ -69,7 +69,7 @@ BoundInstrument newBinding(Batcher batcher) {\n     @Override\n     public void add(long increment) {\n       if (increment < 0) {\n-        throw new IllegalArgumentException(\"monotonic counters can only increase\");\n+        throw new IllegalArgumentException(\"Counters can only increase\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTkxMDUz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-411191053", "createdAt": "2020-05-13T18:28:52Z", "commit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyODo1M1rOGU-U2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyODo1M1rOGU-U2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NTg1MA==", "bodyText": "with this throw, we should make sure to unbind above in a finally block.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#discussion_r424645850", "createdAt": "2020-05-13T18:28:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -69,7 +69,7 @@ BoundInstrument newBinding(Batcher batcher) {\n     @Override\n     public void add(double increment) {\n       if (increment < 0) {\n-        throw new IllegalArgumentException(\"monotonic counters can only increase\");\n+        throw new IllegalArgumentException(\"Counters can only increase\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTk1NzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1201#pullrequestreview-411195749", "createdAt": "2020-05-13T18:35:29Z", "commit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a399b5f9917a8b46bbeb6779f5bd6fb1d24465c", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a399b5f9917a8b46bbeb6779f5bd6fb1d24465c", "committedDate": "2020-05-13T18:43:53Z", "message": "Add CounterUpDown implementation in the SDK\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d26c3ae363dda549d6e385729dd10dee6175730", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1d26c3ae363dda549d6e385729dd10dee6175730", "committedDate": "2020-05-13T18:45:23Z", "message": "Always unbind a bound instrument, even if an exception is thrown\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73ca7269f432ddd73f1caddcd6e0985900c6d970", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73ca7269f432ddd73f1caddcd6e0985900c6d970", "committedDate": "2020-05-13T17:02:27Z", "message": "Add CounterUpDown implementation in the SDK\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "1d26c3ae363dda549d6e385729dd10dee6175730", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1d26c3ae363dda549d6e385729dd10dee6175730", "committedDate": "2020-05-13T18:45:23Z", "message": "Always unbind a bound instrument, even if an exception is thrown\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2676, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}