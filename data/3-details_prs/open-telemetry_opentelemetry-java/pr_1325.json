{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDMwNjcx", "number": 1325, "title": "Convert Link and Event types to use the new immutable Attributes", "bodyText": "", "createdAt": "2020-06-09T19:55:20Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325", "merged": true, "mergeCommit": {"oid": "d80bd1ad67cecf239a7a6942a9fe70d57bd09943"}, "closed": true, "closedAt": "2020-06-10T19:13:57Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpniyGAH2gAyNDMyMDMwNjcxOjU0MmRkZGM0NjMwMTQxYWVmYzE0YmNiYTZjMDdmMDQ0MjcyODY4ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqGk0igFqTQyODU4MzkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/542dddc4630141aefc14bcba6c07f044272868ef", "committedDate": "2020-06-09T16:21:16Z", "message": "Convert Link and Event types to use the new immutable Attributes\n\nupdate from the upstream branch\n\nupdate from parent branch changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjA3MzIw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-427607320", "createdAt": "2020-06-09T23:13:23Z", "commit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzoxMzoyM1rOGhfgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzoxMzoyM1rOGhfgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MjQ2NA==", "bodyText": "why atomic? I think I know why because you need to change it in the lambda. You can have a size() on the builder maybe? Maybe create an issue because this smells a bit :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r437772464", "createdAt": "2020-06-09T23:13:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +363,23 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    final Attributes.Builder temp = Attributes.newBuilder();\n+    final AtomicInteger added = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjE2MTAy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-427616102", "createdAt": "2020-06-09T23:37:07Z", "commit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzE5NzAz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-427719703", "createdAt": "2020-06-10T05:25:19Z", "commit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDAyODk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-428002894", "createdAt": "2020-06-10T12:30:53Z", "commit": {"oid": "542dddc4630141aefc14bcba6c07f044272868ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ced433149574ec1fe883452e6a1ad7bf015061da", "committedDate": "2020-06-10T15:42:49Z", "message": "move the limiting of attributes to a custom consumer class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzU0MTAx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-428354101", "createdAt": "2020-06-10T19:13:52Z", "commit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgzOTM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#pullrequestreview-428583936", "createdAt": "2020-06-11T04:27:16Z", "commit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyNzoxNlrOGiOGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDozMDowMFrOGiOIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNTcxMw==", "bodyText": "Would usually use something like result, not used to temp being as important as this one :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438535713", "createdAt": "2020-06-11T04:27:16Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -362,24 +362,14 @@ public void addEvent(io.opentelemetry.trace.Event event, long timestamp) {\n     addTimedEvent(TimedEvent.create(timestamp, event));\n   }\n \n-  static Map<String, AttributeValue> copyAndLimitAttributes(\n-      Map<String, AttributeValue> attributes, int limit) {\n-    if (attributes.isEmpty()) {\n-      return Collections.emptyMap();\n-    }\n-\n-    if (attributes.size() <= limit) {\n-      return Collections.unmodifiableMap(new HashMap<>(attributes));\n-    }\n-\n-    Map<String, AttributeValue> temp = new HashMap<>();\n-    for (Map.Entry<String, AttributeValue> entry : attributes.entrySet()) {\n-      if (temp.size() < limit) {\n-        temp.put(entry.getKey(), entry.getValue());\n-      }\n+  static Attributes copyAndLimitAttributes(final Attributes attributes, final int limit) {\n+    if (attributes.isEmpty() || attributes.size() <= limit) {\n+      return attributes;\n     }\n \n-    return Collections.unmodifiableMap(temp);\n+    Attributes.Builder temp = Attributes.newBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNjMyMA==", "bodyText": "This works because we don't expect any attributes to have more than Integer.MAX_VALUE size (where added will become negative and elements start being appended again), but even so it's probably clearer keep the logic precise instead of the increment shortcut. That said, this might go away soon anyways so no big deal just FYI.\nif (added < limit) {\n  buileder.set(...)\n  added++;\n}", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1325#discussion_r438536320", "createdAt": "2020-06-11T04:30:00Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -534,4 +524,22 @@ int getTotalRecordedLinks() {\n         ? Collections.unmodifiableMap(attributes)\n         : Collections.unmodifiableMap(new HashMap<>(attributes));\n   }\n+\n+  private static class LimitingAttributeConsumer implements KeyValueConsumer<AttributeValue> {\n+    private final int limit;\n+    private final Attributes.Builder builder;\n+    private int added;\n+\n+    public LimitingAttributeConsumer(int limit, Attributes.Builder builder) {\n+      this.limit = limit;\n+      this.builder = builder;\n+    }\n+\n+    @Override\n+    public void consume(String key, AttributeValue value) {\n+      if (added++ < limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced433149574ec1fe883452e6a1ad7bf015061da"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2859, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}