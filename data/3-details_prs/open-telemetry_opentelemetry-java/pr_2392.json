{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MzUzMDQ0", "number": 2392, "title": "Add ability to create accumulation to the Aggregator", "bodyText": "This way the Accumulator will produce the right accumulations, for example in case of count. Added tests for all instrument types.\nSigned-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-12-22T20:29:38Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392", "merged": true, "mergeCommit": {"oid": "a77a5f0b7bfe90876108bc422f2af4e059e3f18d"}, "closed": true, "closedAt": "2020-12-23T00:22:42Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoxPdBAFqTU1NzM3MTQ5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdozoTPgFqTU1NzQzNDA2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzcxNDk0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#pullrequestreview-557371494", "createdAt": "2020-12-22T21:16:25Z", "commit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToxNjoyNlrOIKJbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToxNjoyNlrOIKJbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxMTExMA==", "bodyText": "nit : collectAllAsyncInstruments  (lower-case the 's' in async)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#discussion_r547511110", "createdAt": "2020-12-22T21:16:26Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/test/java/io/opentelemetry/sdk/metrics/SdkMeterProviderTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.api.metrics.DoubleCounter;\n+import io.opentelemetry.api.metrics.DoubleUpDownCounter;\n+import io.opentelemetry.api.metrics.DoubleValueRecorder;\n+import io.opentelemetry.api.metrics.LongCounter;\n+import io.opentelemetry.api.metrics.LongUpDownCounter;\n+import io.opentelemetry.api.metrics.LongValueRecorder;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.aggregation.AggregationFactory;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.view.AggregationConfiguration;\n+import io.opentelemetry.sdk.metrics.view.InstrumentSelector;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+\n+public class SdkMeterProviderTest {\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.of(AttributeKey.stringKey(\"resource_key\"), \"resource_value\"));\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(SdkMeterProviderTest.class.getName(), null);\n+  private final TestClock testClock = TestClock.create();\n+  private final SdkMeterProvider testMeterProvider =\n+      SdkMeterProvider.builder().setClock(testClock).setResource(RESOURCE).build();\n+  private final SdkMeter testSdk = testMeterProvider.get(SdkMeterProviderTest.class.getName());\n+\n+  @Test\n+  void collectAllSyncInstruments() {\n+    LongCounter longCounter = testSdk.longCounterBuilder(\"testLongCounter\").build();\n+    longCounter.add(10, Labels.empty());\n+    LongUpDownCounter longUpDownCounter =\n+        testSdk.longUpDownCounterBuilder(\"testLongUpDownCounter\").build();\n+    longUpDownCounter.add(-10, Labels.empty());\n+    LongValueRecorder longValueRecorder =\n+        testSdk.longValueRecorderBuilder(\"testLongValueRecorder\").build();\n+    longValueRecorder.record(10, Labels.empty());\n+    DoubleCounter doubleCounter = testSdk.doubleCounterBuilder(\"testDoubleCounter\").build();\n+    doubleCounter.add(10.1, Labels.empty());\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        testSdk.doubleUpDownCounterBuilder(\"testDoubleUpDownCounter\").build();\n+    doubleUpDownCounter.add(-10.1, Labels.empty());\n+    DoubleValueRecorder doubleValueRecorder =\n+        testSdk.doubleValueRecorderBuilder(\"testDoubleValueRecorder\").build();\n+    doubleValueRecorder.record(10.1, Labels.empty());\n+\n+    assertThat(testSdk.collectAll())\n+        .containsExactlyInAnyOrder(\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10.1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10.1)))),\n+            MetricData.createDoubleSummary(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSummaryData.create(\n+                    Collections.singletonList(\n+                        MetricData.DoubleSummaryPoint.create(\n+                            testClock.now(),\n+                            testClock.now(),\n+                            Labels.empty(),\n+                            1,\n+                            10,\n+                            Arrays.asList(\n+                                MetricData.ValueAtPercentile.create(0, 10),\n+                                MetricData.ValueAtPercentile.create(100, 10)))))),\n+            MetricData.createDoubleSummary(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSummaryData.create(\n+                    Collections.singletonList(\n+                        MetricData.DoubleSummaryPoint.create(\n+                            testClock.now(),\n+                            testClock.now(),\n+                            Labels.empty(),\n+                            1,\n+                            10.1d,\n+                            Arrays.asList(\n+                                MetricData.ValueAtPercentile.create(0, 10.1d),\n+                                MetricData.ValueAtPercentile.create(100, 10.1d)))))));\n+  }\n+\n+  @Test\n+  void collectAllSyncInstruments_CustomAggregation() {\n+    registerViewForAllTypes(\n+        testMeterProvider,\n+        AggregationConfiguration.create(\n+            AggregationFactory.count(), MetricData.AggregationTemporality.CUMULATIVE));\n+    LongCounter longCounter = testSdk.longCounterBuilder(\"testLongCounter\").build();\n+    longCounter.add(10, Labels.empty());\n+    LongUpDownCounter longUpDownCounter =\n+        testSdk.longUpDownCounterBuilder(\"testLongUpDownCounter\").build();\n+    longUpDownCounter.add(-10, Labels.empty());\n+    LongValueRecorder longValueRecorder =\n+        testSdk.longValueRecorderBuilder(\"testLongValueRecorder\").build();\n+    longValueRecorder.record(10, Labels.empty());\n+    DoubleCounter doubleCounter = testSdk.doubleCounterBuilder(\"testDoubleCounter\").build();\n+    doubleCounter.add(10.1, Labels.empty());\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        testSdk.doubleUpDownCounterBuilder(\"testDoubleUpDownCounter\").build();\n+    doubleUpDownCounter.add(-10.1, Labels.empty());\n+    DoubleValueRecorder doubleValueRecorder =\n+        testSdk.doubleValueRecorderBuilder(\"testDoubleValueRecorder\").build();\n+    doubleValueRecorder.record(10.1, Labels.empty());\n+\n+    assertThat(testSdk.collectAll())\n+        .containsExactlyInAnyOrder(\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))));\n+  }\n+\n+  @Test\n+  void collectAllASyncInstruments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "originalPosition": 246}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzcxODU5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#pullrequestreview-557371859", "createdAt": "2020-12-22T21:17:16Z", "commit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToxNzoxNlrOIKJclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToxNzoxNlrOIKJclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxMTQ0NQ==", "bodyText": "same naming nit here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#discussion_r547511445", "createdAt": "2020-12-22T21:17:16Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/test/java/io/opentelemetry/sdk/metrics/SdkMeterProviderTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.api.metrics.DoubleCounter;\n+import io.opentelemetry.api.metrics.DoubleUpDownCounter;\n+import io.opentelemetry.api.metrics.DoubleValueRecorder;\n+import io.opentelemetry.api.metrics.LongCounter;\n+import io.opentelemetry.api.metrics.LongUpDownCounter;\n+import io.opentelemetry.api.metrics.LongValueRecorder;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.aggregation.AggregationFactory;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.view.AggregationConfiguration;\n+import io.opentelemetry.sdk.metrics.view.InstrumentSelector;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+\n+public class SdkMeterProviderTest {\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.of(AttributeKey.stringKey(\"resource_key\"), \"resource_value\"));\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(SdkMeterProviderTest.class.getName(), null);\n+  private final TestClock testClock = TestClock.create();\n+  private final SdkMeterProvider testMeterProvider =\n+      SdkMeterProvider.builder().setClock(testClock).setResource(RESOURCE).build();\n+  private final SdkMeter testSdk = testMeterProvider.get(SdkMeterProviderTest.class.getName());\n+\n+  @Test\n+  void collectAllSyncInstruments() {\n+    LongCounter longCounter = testSdk.longCounterBuilder(\"testLongCounter\").build();\n+    longCounter.add(10, Labels.empty());\n+    LongUpDownCounter longUpDownCounter =\n+        testSdk.longUpDownCounterBuilder(\"testLongUpDownCounter\").build();\n+    longUpDownCounter.add(-10, Labels.empty());\n+    LongValueRecorder longValueRecorder =\n+        testSdk.longValueRecorderBuilder(\"testLongValueRecorder\").build();\n+    longValueRecorder.record(10, Labels.empty());\n+    DoubleCounter doubleCounter = testSdk.doubleCounterBuilder(\"testDoubleCounter\").build();\n+    doubleCounter.add(10.1, Labels.empty());\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        testSdk.doubleUpDownCounterBuilder(\"testDoubleUpDownCounter\").build();\n+    doubleUpDownCounter.add(-10.1, Labels.empty());\n+    DoubleValueRecorder doubleValueRecorder =\n+        testSdk.doubleValueRecorderBuilder(\"testDoubleValueRecorder\").build();\n+    doubleValueRecorder.record(10.1, Labels.empty());\n+\n+    assertThat(testSdk.collectAll())\n+        .containsExactlyInAnyOrder(\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10.1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10.1)))),\n+            MetricData.createDoubleSummary(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSummaryData.create(\n+                    Collections.singletonList(\n+                        MetricData.DoubleSummaryPoint.create(\n+                            testClock.now(),\n+                            testClock.now(),\n+                            Labels.empty(),\n+                            1,\n+                            10,\n+                            Arrays.asList(\n+                                MetricData.ValueAtPercentile.create(0, 10),\n+                                MetricData.ValueAtPercentile.create(100, 10)))))),\n+            MetricData.createDoubleSummary(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSummaryData.create(\n+                    Collections.singletonList(\n+                        MetricData.DoubleSummaryPoint.create(\n+                            testClock.now(),\n+                            testClock.now(),\n+                            Labels.empty(),\n+                            1,\n+                            10.1d,\n+                            Arrays.asList(\n+                                MetricData.ValueAtPercentile.create(0, 10.1d),\n+                                MetricData.ValueAtPercentile.create(100, 10.1d)))))));\n+  }\n+\n+  @Test\n+  void collectAllSyncInstruments_CustomAggregation() {\n+    registerViewForAllTypes(\n+        testMeterProvider,\n+        AggregationConfiguration.create(\n+            AggregationFactory.count(), MetricData.AggregationTemporality.CUMULATIVE));\n+    LongCounter longCounter = testSdk.longCounterBuilder(\"testLongCounter\").build();\n+    longCounter.add(10, Labels.empty());\n+    LongUpDownCounter longUpDownCounter =\n+        testSdk.longUpDownCounterBuilder(\"testLongUpDownCounter\").build();\n+    longUpDownCounter.add(-10, Labels.empty());\n+    LongValueRecorder longValueRecorder =\n+        testSdk.longValueRecorderBuilder(\"testLongValueRecorder\").build();\n+    longValueRecorder.record(10, Labels.empty());\n+    DoubleCounter doubleCounter = testSdk.doubleCounterBuilder(\"testDoubleCounter\").build();\n+    doubleCounter.add(10.1, Labels.empty());\n+    DoubleUpDownCounter doubleUpDownCounter =\n+        testSdk.doubleUpDownCounterBuilder(\"testDoubleUpDownCounter\").build();\n+    doubleUpDownCounter.add(-10.1, Labels.empty());\n+    DoubleValueRecorder doubleValueRecorder =\n+        testSdk.doubleValueRecorderBuilder(\"testDoubleValueRecorder\").build();\n+    doubleValueRecorder.record(10.1, Labels.empty());\n+\n+    assertThat(testSdk.collectAll())\n+        .containsExactlyInAnyOrder(\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleUpDownCounter\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleValueRecorder\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 1)))));\n+  }\n+\n+  @Test\n+  void collectAllASyncInstruments() {\n+    testSdk\n+        .longSumObserverBuilder(\"testLongSumObserver\")\n+        .setUpdater(longResult -> longResult.observe(10, Labels.empty()))\n+        .build();\n+    testSdk\n+        .longUpDownSumObserverBuilder(\"testLongUpDownSumObserver\")\n+        .setUpdater(longResult -> longResult.observe(-10, Labels.empty()))\n+        .build();\n+    testSdk\n+        .longValueObserverBuilder(\"testLongValueObserver\")\n+        .setUpdater(longResult -> longResult.observe(10, Labels.empty()))\n+        .build();\n+\n+    testSdk\n+        .doubleSumObserverBuilder(\"testDoubleSumObserver\")\n+        .setUpdater(doubleResult -> doubleResult.observe(10.1, Labels.empty()))\n+        .build();\n+    testSdk\n+        .doubleUpDownSumObserverBuilder(\"testDoubleUpDownSumObserver\")\n+        .setUpdater(doubleResult -> doubleResult.observe(-10.1, Labels.empty()))\n+        .build();\n+    testSdk\n+        .doubleValueObserverBuilder(\"testDoubleValueObserver\")\n+        .setUpdater(doubleResult -> doubleResult.observe(10.1, Labels.empty()))\n+        .build();\n+\n+    assertThat(testSdk.collectAll())\n+        .containsExactlyInAnyOrder(\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongSumObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleSumObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ true,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10.1)))),\n+            MetricData.createLongSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongUpDownSumObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10)))),\n+            MetricData.createDoubleSum(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleUpDownSumObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleSumData.create(\n+                    /* isMonotonic= */ false,\n+                    MetricData.AggregationTemporality.CUMULATIVE,\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), -10.1)))),\n+            MetricData.createLongGauge(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testLongValueObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.LongGaugeData.create(\n+                    Collections.singletonList(\n+                        MetricData.LongPoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10)))),\n+            MetricData.createDoubleGauge(\n+                RESOURCE,\n+                INSTRUMENTATION_LIBRARY_INFO,\n+                \"testDoubleValueObserver\",\n+                \"\",\n+                \"1\",\n+                MetricData.DoubleGaugeData.create(\n+                    Collections.singletonList(\n+                        MetricData.DoublePoint.create(\n+                            testClock.now(), testClock.now(), Labels.empty(), 10.1)))));\n+  }\n+\n+  @Test\n+  void collectAllASyncInstruments_CustomAggregation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "originalPosition": 346}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDE0NTkx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#pullrequestreview-557414591", "createdAt": "2020-12-22T23:00:39Z", "commit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzowMDozOVrOIKLp9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzowMDozOVrOIKLp9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzYzOQ==", "bodyText": "discussed offline that we should probably move these methods into the Aggregator. Not sure if this should be done in this PR or a follow-up.\nAlso, it might be nice to call it something like \"directAccumulate\" or something that makes it clear it should be used by async instruments.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#discussion_r547547639", "createdAt": "2020-12-22T23:00:39Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AggregatorFactory.java", "diffHunk": "@@ -5,16 +5,42 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n+import io.opentelemetry.sdk.metrics.aggregation.Accumulation;\n import javax.annotation.concurrent.Immutable;\n \n /** Factory class for {@link Aggregator}. */\n @Immutable\n-public interface AggregatorFactory {\n+public abstract class AggregatorFactory {\n \n   /**\n-   * Returns a new {@link Aggregator}.\n+   * Returns a new {@link Aggregator}. This MUST by used by the synchronous to aggregate recorded\n+   * measurements during the collection cycle.\n    *\n    * @return a new {@link Aggregator}.\n    */\n-  Aggregator getAggregator();\n+  public abstract Aggregator getAggregator();\n+\n+  /**\n+   * Returns a new {@code Accumulation} for the given value. This MUST be used by the asynchronous\n+   * instruments to create {@code Accumulation} that are passed to the processor.\n+   *\n+   * @param value the given value to be used to create the {@code Accumulation}.\n+   * @return a new {@code Accumulation} for the given value.\n+   */\n+  public Accumulation accumulateLong(long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c412507afe0815206280ac00a3c77a716f019d58", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c412507afe0815206280ac00a3c77a716f019d58", "committedDate": "2020-12-22T23:40:17Z", "message": "Add ability to create accumulation to the Aggregator\n\nThis way the Accumulator will produce the right accumulations, for example in case of count. Added tests for all instrument types.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bb1a324683915b19fa60c20ea88927610fec2b8", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6bb1a324683915b19fa60c20ea88927610fec2b8", "committedDate": "2020-12-22T20:29:03Z", "message": "Add ability to create accumulation to the Aggregator\n\nThis way the Accumulator will produce the right accumulations, for example in case of count. Added tests for all instrument types.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "c412507afe0815206280ac00a3c77a716f019d58", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c412507afe0815206280ac00a3c77a716f019d58", "committedDate": "2020-12-22T23:40:17Z", "message": "Add ability to create accumulation to the Aggregator\n\nThis way the Accumulator will produce the right accumulations, for example in case of count. Added tests for all instrument types.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDM0MDM3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#pullrequestreview-557434037", "createdAt": "2020-12-23T00:03:15Z", "commit": {"oid": "c412507afe0815206280ac00a3c77a716f019d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDowMzoxNVrOIKMtsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDowMzoxNVrOIKMtsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NDk3Nw==", "bodyText": "excellent test. thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#discussion_r547564977", "createdAt": "2020-12-23T00:03:15Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/test/java/io/opentelemetry/sdk/metrics/SdkMeterProviderTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.AttributeKey;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.api.metrics.DoubleCounter;\n+import io.opentelemetry.api.metrics.DoubleUpDownCounter;\n+import io.opentelemetry.api.metrics.DoubleValueRecorder;\n+import io.opentelemetry.api.metrics.LongCounter;\n+import io.opentelemetry.api.metrics.LongUpDownCounter;\n+import io.opentelemetry.api.metrics.LongValueRecorder;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.TestClock;\n+import io.opentelemetry.sdk.metrics.aggregation.AggregationFactory;\n+import io.opentelemetry.sdk.metrics.common.InstrumentType;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.view.AggregationConfiguration;\n+import io.opentelemetry.sdk.metrics.view.InstrumentSelector;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.jupiter.api.Test;\n+\n+public class SdkMeterProviderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c412507afe0815206280ac00a3c77a716f019d58"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDM0MDY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2392#pullrequestreview-557434066", "createdAt": "2020-12-23T00:03:23Z", "commit": {"oid": "c412507afe0815206280ac00a3c77a716f019d58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3535, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}