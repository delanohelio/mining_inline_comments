{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjA0Mjky", "number": 977, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMTo1NlrODmVbqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTowMTo1MFrODml84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIzNjI1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowMTo1NlrOFzsXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNTo1MFrOF0QuwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng==", "bodyText": "I don't think this is the expected returned type.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r389748486", "createdAt": "2020-03-09T15:01:56Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "diffHunk": "@@ -17,13 +17,12 @@\n package io.opentelemetry.sdk.trace.spi;\n \n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n-import io.opentelemetry.trace.TracerProvider;\n import io.opentelemetry.trace.spi.TraceProvider;\n \n /** SDK implementation of the TracerProviderFactory for SPI. */\n public final class TraceProviderSdk implements TraceProvider {\n   @Override\n-  public TracerProvider create() {\n+  public TracerSdkProvider create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e2e197bba9bbff042a8dfb15fd246671a3d8e77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MDcxNQ==", "bodyText": "Can you be more specific why? Instead of returning the interface it returns the concrete type (covariant return type). This is a common practice.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r389780715", "createdAt": "2020-03-09T15:48:40Z", "author": {"login": "pavolloffay"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "diffHunk": "@@ -17,13 +17,12 @@\n package io.opentelemetry.sdk.trace.spi;\n \n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n-import io.opentelemetry.trace.TracerProvider;\n import io.opentelemetry.trace.spi.TraceProvider;\n \n /** SDK implementation of the TracerProviderFactory for SPI. */\n public final class TraceProviderSdk implements TraceProvider {\n   @Override\n-  public TracerProvider create() {\n+  public TracerSdkProvider create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}, "originalCommit": {"oid": "7e2e197bba9bbff042a8dfb15fd246671a3d8e77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTk1MQ==", "bodyText": "@pavolloffay Please move this in a different PR and we can discuss there. We should recommend users to call with OpenTelemetrySdk.getTracerProvider", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390319951", "createdAt": "2020-03-10T13:41:31Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "diffHunk": "@@ -17,13 +17,12 @@\n package io.opentelemetry.sdk.trace.spi;\n \n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n-import io.opentelemetry.trace.TracerProvider;\n import io.opentelemetry.trace.spi.TraceProvider;\n \n /** SDK implementation of the TracerProviderFactory for SPI. */\n public final class TraceProviderSdk implements TraceProvider {\n   @Override\n-  public TracerProvider create() {\n+  public TracerSdkProvider create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}, "originalCommit": {"oid": "7e2e197bba9bbff042a8dfb15fd246671a3d8e77"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NDM4NQ==", "bodyText": "I will revert it and cast the object in the builder instead. Are there any other comments for this PR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390344385", "createdAt": "2020-03-10T14:15:50Z", "author": {"login": "pavolloffay"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "diffHunk": "@@ -17,13 +17,12 @@\n package io.opentelemetry.sdk.trace.spi;\n \n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n-import io.opentelemetry.trace.TracerProvider;\n import io.opentelemetry.trace.spi.TraceProvider;\n \n /** SDK implementation of the TracerProviderFactory for SPI. */\n public final class TraceProviderSdk implements TraceProvider {\n   @Override\n-  public TracerProvider create() {\n+  public TracerSdkProvider create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}, "originalCommit": {"oid": "7e2e197bba9bbff042a8dfb15fd246671a3d8e77"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzk0MjcyOnYy", "diffSide": "RIGHT", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTowMTo1MFrOF0GKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTowMTo1MFrOF0GKrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTMxMQ==", "bodyText": "Support ENV vars has been asked here #797 (comment).\nGiven the main functionality is supporting env vars the name of the method should reflect that. Also I do not like the static method as there is a builder. So I have moved the code into the builder, basically the same design is in core Jaeger client, where builders can be constructed from env properties", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390171311", "createdAt": "2020-03-10T09:01:50Z", "author": {"login": "pavolloffay"}, "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "diffHunk": "@@ -205,4 +211,35 @@ public JaegerGrpcSpanExporter build() {\n       return new JaegerGrpcSpanExporter(serviceName, channel, deadline);\n     }\n   }\n+\n+  /**\n+   * Configure and install Jaeger exporter with default settings. Configuration can be provided via\n+   * system properties and environmental variables: {@code JAEGER_ENDPOINT} e.g. {@code\n+   * localhost:14250} and {@code JAEGER_SERVICE_NAME} e.g. {@code my-deployment}.\n+   *\n+   * @param tracerProvider tracer provider\n+   */\n+  public static void installDefault(TracerSdkProvider tracerProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 954, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}