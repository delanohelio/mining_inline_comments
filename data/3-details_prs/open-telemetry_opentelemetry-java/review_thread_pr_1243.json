{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODAwNzc3", "number": 1243, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzowMzo1MlrOD9qcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MzowOVrOD94eoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTg1MDc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzowMzo1MlrOGXShTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0NToyNFrOGXkB9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3MQ==", "bodyText": "nit: remove the *(s) at the end", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427073871", "createdAt": "2020-05-19T07:03:52Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MDc1OQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427360759", "createdAt": "2020-05-19T14:45:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3MQ=="}, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTg3ODk0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzoxMzoxOVrOGXSykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo0NToyOVrOGXkCMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3ODI5MA==", "bodyText": "maybe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              BatchRecorder put(DoubleValueRecorder measure, double value);\n          \n          \n            \n              BatchRecorder put(DoubleValueRecorder valueRecorder, double value);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427078290", "createdAt": "2020-05-19T07:13:19Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java", "diffHunk": "@@ -27,26 +27,26 @@\n @ThreadSafe\n public interface BatchRecorder {\n   /**\n-   * Associates the {@link LongMeasure} with the given value. Subsequent updates to the same {@link\n-   * LongMeasure} will overwrite the previous value.\n+   * Associates the {@link LongValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link LongValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link LongMeasure}.\n+   * @param measure the {@link LongValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(LongMeasure measure, long value);\n+  BatchRecorder put(LongValueRecorder measure, long value);\n \n   /**\n-   * Associates the {@link DoubleMeasure} with the given value. Subsequent updates to the same\n-   * {@link DoubleMeasure} will overwrite the previous value.\n+   * Associates the {@link DoubleValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link DoubleValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link DoubleMeasure}.\n+   * @param measure the {@link DoubleValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(DoubleMeasure measure, double value);\n+  BatchRecorder put(DoubleValueRecorder measure, double value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2MDgxNg==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427360816", "createdAt": "2020-05-19T14:45:29Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/BatchRecorder.java", "diffHunk": "@@ -27,26 +27,26 @@\n @ThreadSafe\n public interface BatchRecorder {\n   /**\n-   * Associates the {@link LongMeasure} with the given value. Subsequent updates to the same {@link\n-   * LongMeasure} will overwrite the previous value.\n+   * Associates the {@link LongValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link LongValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link LongMeasure}.\n+   * @param measure the {@link LongValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(LongMeasure measure, long value);\n+  BatchRecorder put(LongValueRecorder measure, long value);\n \n   /**\n-   * Associates the {@link DoubleMeasure} with the given value. Subsequent updates to the same\n-   * {@link DoubleMeasure} will overwrite the previous value.\n+   * Associates the {@link DoubleValueRecorder} with the given value. Subsequent updates to the same\n+   * {@link DoubleValueRecorder} will overwrite the previous value.\n    *\n-   * @param measure the {@link DoubleMeasure}.\n+   * @param measure the {@link DoubleValueRecorder}.\n    * @param value the value to be associated with {@code measure}.\n    * @return this.\n    * @since 0.1.0\n    */\n-  BatchRecorder put(DoubleMeasure measure, double value);\n+  BatchRecorder put(DoubleValueRecorder measure, double value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3ODI5MA=="}, "originalCommit": {"oid": "7e087cce660ae91f5e7a376bd2974f6c01b66f3d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjEyNjI1OnYy", "diffSide": "LEFT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozNjo0NVrOGXo_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzoyMVrOGXq9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ==", "bodyText": "interesting. this shouldn't have even been valid. Are we missing some validation on the label-pairs used for binding?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427442171", "createdAt": "2020-05-19T16:36:45Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjE2MA==", "bodyText": "This is javadoc :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427472160", "createdAt": "2020-05-19T17:24:20Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Mjk1Ng==", "bodyText": "I don't think we test/run/validate javadocs", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427472956", "createdAt": "2020-05-19T17:25:34Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDE3Nw==", "bodyText": "oh lol.  ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427474177", "createdAt": "2020-05-19T17:27:21Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  *   // It is recommended that the API user keep references to a Bound Counters.\n  *   private static final BoundDoubleCounter someWorkBound =\n- *       counter.bind(Collections.singletonList(\"SomeWork\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MjE3MQ=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjEzMzcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozODo0N1rOGXpE2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1OTowOVrOGXsNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MzQxOQ==", "bodyText": "The use of \"non-additive\" here is confusing. This means non-pre-summed, correct? I think I might just leave out the \"non-additive\" term here, since I don't think people will understand what is meant.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427443419", "createdAt": "2020-05-19T16:38:47Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDgyNw==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494827", "createdAt": "2020-05-19T17:59:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MzQxOQ=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjE0MDc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MDozNlrOGXpJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1OTowNlrOGXsNjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDU5Mw==", "bodyText": "Same comment related to the use of \"non-additive\" in these docs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427444593", "createdAt": "2020-05-19T16:40:36Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongMeasure.BoundLongMeasure;\n+import io.opentelemetry.metrics.LongValueRecorder.BoundLongValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a long value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDc5OQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494799", "createdAt": "2020-05-19T17:59:06Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/LongValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.LongMeasure.BoundLongMeasure;\n+import io.opentelemetry.metrics.LongValueRecorder.BoundLongValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a long value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NDU5Mw=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjE0ODQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MjozOFrOGXpOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowMDo1MlrOGXsSBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw==", "bodyText": "ah, I see \"non-additive\" is clarified here. I'm still not sure usage of this terminology adds a lot to the user's decision to use a ValueRecorder.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427445883", "createdAt": "2020-05-19T16:42:38Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTE1OA==", "bodyText": "I left this here, let me know if you think we should remove.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427495158", "createdAt": "2020-05-19T17:59:40Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTk0MA==", "bodyText": "I think is fine to leave, yes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427495940", "createdAt": "2020-05-19T18:00:52Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "diffHunk": "@@ -16,39 +16,54 @@\n \n package io.opentelemetry.metrics;\n \n-import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.DoubleValueRecorder.BoundDoubleValueRecorder;\n import java.util.Map;\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Measure to report instantaneous measurement of a double value.\n+ * ValueRecorder is a non-additive synchronous instrument useful for recording any non-additive\n+ * number, positive or negative. Values captured by a Record(value) are treated as individual events\n+ * belonging to a distribution that is being summarized.\n+ *\n+ * <p>ValueRecorder should be chosen either when capturing measurements that do not contribute\n+ * meaningfully to a sum, or when capturing numbers that are additive in nature, but where the\n+ * distribution of individual increments is considered interesting.\n+ *\n+ * <p>One of the most common uses for ValueRecorder is to capture latency measurements. Latency\n+ * measurements are not additive in the sense that there is little need to know the latency-sum of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTg4Mw=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjE1MDcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MzowOVrOGXpP6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1OToxOFrOGXsOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjI0OA==", "bodyText": "s/metric/instrument/ in a bunch of places.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427446248", "createdAt": "2020-05-19T16:43:09Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -89,36 +89,36 @@\n   LongUpDownCounter.Builder longUpDownCounterBuilder(String name);\n \n   /**\n-   * Returns a new builder for a {@link DoubleMeasure}.\n+   * Returns a new builder for a {@link DoubleValueRecorder}.\n    *\n-   * @param name Name of measure, as a {@code String}. Should be a ASCII string with a length no\n-   *     greater than 255 characters.\n-   * @return a new builder for a {@code DoubleMeasure}.\n+   * @param name the name of the metric. Should be a ASCII string with a length no greater than 255", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NDkzNA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1243#discussion_r427494934", "createdAt": "2020-05-19T17:59:18Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -89,36 +89,36 @@\n   LongUpDownCounter.Builder longUpDownCounterBuilder(String name);\n \n   /**\n-   * Returns a new builder for a {@link DoubleMeasure}.\n+   * Returns a new builder for a {@link DoubleValueRecorder}.\n    *\n-   * @param name Name of measure, as a {@code String}. Should be a ASCII string with a length no\n-   *     greater than 255 characters.\n-   * @return a new builder for a {@code DoubleMeasure}.\n+   * @param name the name of the metric. Should be a ASCII string with a length no greater than 255", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjI0OA=="}, "originalCommit": {"oid": "4bc30c98b351d7ca008e20ebe31fca509109a24c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 695, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}