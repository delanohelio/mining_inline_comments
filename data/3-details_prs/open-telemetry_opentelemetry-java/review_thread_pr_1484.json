{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDU1OTE0", "number": 1484, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjo0M1rOETn98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NToxMVrOETzR2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDEzMjM1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjo0M1rOG5dmLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjo0M1rOG5dmLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjkyNw==", "bodyText": "Add comment about 0 here too or SDK may handle it incorrectly", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462906927", "createdAt": "2020-07-30T10:36:43Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -144,6 +149,13 @@ public static TraceConfig getDefault() {\n    */\n   public abstract int getMaxNumberOfAttributesPerLink();\n \n+  /**\n+   * Returns the global default max length of string attribute value in characters.\n+   *\n+   * @return the global default max length of string attribute value in characters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDEzODcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozODo1OVrOG5dqTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozODo1OVrOG5dqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzk4MQ==", "bodyText": "Looks like null check is duplicated with private method", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462907981", "createdAt": "2020-07-30T10:38:59Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDEzOTQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozOToxM1rOG5dqxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozOToxM1rOG5dqxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwODEwMw==", "bodyText": "Can we add @Nullable?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462908103", "createdAt": "2020-07-30T10:39:13Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();\n+    return string.length() <= limit\n+        ? value\n+        : AttributeValue.stringAttributeValue(string.substring(0, limit));\n+  }\n+\n+  private static String cutIfNeeded(String s, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDE0NTk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0MToyMVrOG5du4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0MToyMlrOG5fdEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg==", "bodyText": "Believe it's possible for string to be null. Guess you can just use cutIfNeeded here too.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462909152", "createdAt": "2020-07-30T10:41:21Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxNzQyMg==", "bodyText": "I wanted to avoid allocating new AttributeValue unless needed...", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462917422", "createdAt": "2020-07-30T10:58:50Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg=="}, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxOTYwOA==", "bodyText": "Well, actually it cannot. null value will not even reach this method. But I will add an if anyway", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462919608", "createdAt": "2020-07-30T11:03:20Z", "author": {"login": "iNikem"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg=="}, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNzM2Mg==", "bodyText": "Thanks, yeah didn't notice the reallocation of AttributeValue aspect. As far as null goes, I only thought of it from seeing the null check in this PR\nhttps://github.com/open-telemetry/opentelemetry-java/pull/1437/files", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462937362", "createdAt": "2020-07-30T11:41:22Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +59,53 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);\n+\n+    if (value == null\n+        || (value.getType() != AttributeValue.Type.STRING\n+            && value.getType() != AttributeValue.Type.STRING_ARRAY)) {\n+      return value;\n+    }\n+\n+    if (value.getType() == AttributeValue.Type.STRING_ARRAY) {\n+      List<String> strings = value.getStringArrayValue();\n+      if (strings.isEmpty()) {\n+        return value;\n+      }\n+\n+      String[] newStrings = new String[strings.size()];\n+      for (int i = 0; i < strings.size(); i++) {\n+        String string = strings.get(i);\n+        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+      }\n+\n+      return AttributeValue.arrayAttributeValue(newStrings);\n+    }\n+\n+    String string = value.getStringValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTE1Mg=="}, "originalCommit": {"oid": "99de8ea96b1e4cc64dfb2b000b16ac4bf8c1adbb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDMyOTI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0MTo1N1rOG5feJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0MTo1N1rOG5feJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNzYzNg==", "bodyText": "Ah sorry should have mentioned both return value and parameter are @Nullable", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r462937636", "createdAt": "2020-07-30T11:41:57Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -88,18 +89,20 @@ public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n       String[] newStrings = new String[strings.size()];\n       for (int i = 0; i < strings.size(); i++) {\n         String string = strings.get(i);\n-        newStrings[i] = string == null ? null : cutIfNeeded(string, limit);\n+        newStrings[i] = cutIfNeeded(string, limit);\n       }\n \n       return AttributeValue.arrayAttributeValue(newStrings);\n     }\n \n     String string = value.getStringValue();\n-    return string.length() <= limit\n+    // Don't allocate new AttributeValue if not needed\n+    return (string == null || string.length() <= limit)\n         ? value\n         : AttributeValue.stringAttributeValue(string.substring(0, limit));\n   }\n \n+  @Nullable\n   private static String cutIfNeeded(String s, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99697044d158ca1440b860aa9f13066c6425e0d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk3MDQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTowM1rOG5vTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTowM1rOG5vTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzEyNw==", "bodyText": "how about truncateToSize ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463197127", "createdAt": "2020-07-30T18:41:03Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +60,55 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk3MjE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTozN1rOG5vU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MTozN1rOG5vU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NzQwOA==", "bodyText": "recommend including why it failed, not just that the value is invalid. maybe \"attribute value limit must be positive\"", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463197408", "createdAt": "2020-07-30T18:41:37Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/internal/StringUtils.java", "diffHunk": "@@ -57,5 +60,55 @@ public static boolean isValidMetricName(String metricName) {\n     return metricName.matches(pattern);\n   }\n \n+  /**\n+   * If given attribute is of type STRING and has more characters than given {@code limit} then\n+   * return new AttributeValue with string truncated to {@code limit} characters.\n+   *\n+   * <p>If given attribute is of type STRING_ARRAY and non-empty then return new AttributeValue with\n+   * every element truncated to {@code limit} characters.\n+   *\n+   * <p>Otherwise return given {@code value}\n+   *\n+   * @throws IllegalArgumentException if limit is zero or negative\n+   */\n+  public static AttributeValue cutIfNeeded(AttributeValue value, int limit) {\n+    Utils.checkArgument(limit > 0, \"attribute value limit cannot be %d\", limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk4MTY2OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NDowOVrOG5vaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NDowOVrOG5vaqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5ODg5MA==", "bodyText": "would probably pluralize this getMaxLengthOfAttributeValues()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463198890", "createdAt": "2020-07-30T18:44:09Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -144,6 +149,14 @@ public static TraceConfig getDefault() {\n    */\n   public abstract int getMaxNumberOfAttributesPerLink();\n \n+  /**\n+   * Returns the global default max length of string attribute value in characters. Zero means\n+   * unlimited.\n+   *\n+   * @return the global default max length of string attribute value in characters.\n+   */\n+  public abstract int getMaxLengthOfAttributeValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk4NTUyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NToxMVrOG5vc7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzo1MzoyMVrOG6RBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA==", "bodyText": "Is zero a good default? shouldn't it be MAX_INT?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463199468", "createdAt": "2020-07-30T18:45:11Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTgzMg==", "bodyText": "even better, make the default be a null Integer and get rid of this magic number.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463199832", "createdAt": "2020-07-30T18:45:51Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyNDE1Ng==", "bodyText": "All other methods here return int. Do you want for this one to return Integer?\nWith default value being MAX_INT the code will look like if(traceConfig.getMaxLengthOfAttributeValues() < Integer.MAX_INT) truncate(), which is strange for me.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463424156", "createdAt": "2020-07-31T06:14:30Z", "author": {"login": "iNikem"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzOTYzOA==", "bodyText": "I also agree that 0 is strange as a default value. I would set it to a more common magic number, e.g. 255.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463439638", "createdAt": "2020-07-31T07:01:39Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1OTU1MA==", "bodyText": "How about if(traceConfig.getMaxLengthOfAttributeValues() != TraceConfig.DEFAULT_MAX_ATTRIBUTE_LENGTH) ? I think that reads great, makes it clear, and doesn't use '0' as a magic number.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463659550", "createdAt": "2020-07-31T14:54:30Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MDQ0Ng==", "bodyText": "Also, why is the word 'KEY' in this constant name?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463660446", "createdAt": "2020-07-31T14:55:58Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2NTg5Mg==", "bodyText": "Oi, KEY is certainly wrong, will fix.\nDo you propose to have TraceConfig.DEFAULT_MAX_ATTRIBUTE_LENGTH constant but let it have null as a value or Integer.MAX_VALUE?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463665892", "createdAt": "2020-07-31T15:05:56Z", "author": {"login": "iNikem"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNzM0Mw==", "bodyText": "I think I prefer MAX_VALUE, to the nullable, but I don't feel super strongly about it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463727343", "createdAt": "2020-07-31T17:05:47Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNDE3NA==", "bodyText": "Wait, that does not make sense. Currently I attempt to truncate values if configured value differs from \"unlimited\" which is signalled by 0. Your proposal says \"let's try to truncate if configured value is not default\". But what if we change default to, say, 2M? if(traceConfig.getMaxLengthOfAttributeValues() != TraceConfig.DEFAULT_MAX_ATTRIBUTE_LENGTH) will not work anymore. Compare with default is wrong, default may change. We have to compare with \"unlimited\", however we denote that. And I like traceConfig.getMaxLengthOfAttributeValues() > 0 more than traceConfig.getMaxLengthOfAttributeValues() > Integer.MAX_INT.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463734174", "createdAt": "2020-07-31T17:20:50Z", "author": {"login": "iNikem"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0MDI5OQ==", "bodyText": "I'd be happier with -1, rather than 0. 0 is actually a valid length, and -1 clearly is not. And, I'd rather have a constant defined for the \"unset\" value, rather than just hardcode the magic number in two places.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463740299", "createdAt": "2020-07-31T17:34:04Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0NjcyMw==", "bodyText": "@jkwatson  PTAL", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463746723", "createdAt": "2020-07-31T17:47:52Z", "author": {"login": "iNikem"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0OTM4NQ==", "bodyText": "\ud83d\udc4d I like -1 for unlimited, I think that's reasonably conventional", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1484#discussion_r463749385", "createdAt": "2020-07-31T17:53:21Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -89,6 +93,7 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+  private static final int DEFAULT_KEY_SPAN_ATTRIBUTE_MAX_VALUE_LENGTH = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTQ2OA=="}, "originalCommit": {"oid": "606600aeb4a8ae90fef457cec4d71ab037910fcf"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1565, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}