{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDEwODU3", "number": 1012, "title": "Add a very basic benchmark for the span implementation", "bodyText": "", "createdAt": "2020-03-13T21:49:31Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012", "merged": true, "mergeCommit": {"oid": "014ceeb97cc15f6b1bd1fb72499dce05599ba34f"}, "closed": true, "closedAt": "2020-03-16T20:36:53Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNXfWAgH2gAyMzg4MDEwODU3OjM3M2M4ODAyZTU0YTA4MDFmMGVkYTFmODJlOTk0ZjYxYjJmNjkzNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNbiXKAH2gAyMzg4MDEwODU3OjQzMmYyYWRmZmZiMjRlOGFmY2Y0MDA5YTQwYTlkZWQ3ODNlNDUzNzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "373c8802e54a0801f0eda1f82e994f61b2f69356", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/373c8802e54a0801f0eda1f82e994f61b2f69356", "committedDate": "2020-03-13T21:49:09Z", "message": "add a very basic benchmark for the span implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjQ1ODk3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#pullrequestreview-374645897", "createdAt": "2020-03-13T22:10:21Z", "commit": {"oid": "373c8802e54a0801f0eda1f82e994f61b2f69356"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoxMDoyMVrOF2U0UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoxMDoyMVrOF2U0UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODQ5Nw==", "bodyText": "Minor nip: Call it something like doExerciseSpan or doSpanWork to signal this is not just random work?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392508497", "createdAt": "2020-03-13T22:10:21Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+  private RecordEventsReadableSpan span;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanBuilderSdk spanBuilderSdk =\n+        (SpanBuilderSdk)\n+            tracerSdk\n+                .spanBuilder(\"benchmarkSpan\")\n+                .setSpanKind(Kind.CLIENT)\n+                .setAttribute(\"key\", \"value\");\n+    span = (RecordEventsReadableSpan) spanBuilderSdk.startSpan();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_01Thread() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 5)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_05Threads() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 2)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_02Threads() {\n+    return doSomeWork();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 10)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_10Threads() {\n+    return doSomeWork();\n+  }\n+\n+  private SpanData doSomeWork() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373c8802e54a0801f0eda1f82e994f61b2f69356"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjQ2Mjcx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#pullrequestreview-374646271", "createdAt": "2020-03-13T22:11:25Z", "commit": {"oid": "373c8802e54a0801f0eda1f82e994f61b2f69356"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea974025558f70db880deceffb4a0c9b77dbe001", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ea974025558f70db880deceffb4a0c9b77dbe001", "committedDate": "2020-03-13T22:16:18Z", "message": "small refactoring to make it clear what we're doing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjU4NzE2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#pullrequestreview-374658716", "createdAt": "2020-03-13T22:52:23Z", "commit": {"oid": "ea974025558f70db880deceffb4a0c9b77dbe001"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo1MjoyM1rOF2VeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjo1MjoyM1rOF2VeIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxOTIwMQ==", "bodyText": "the name is not very suggestive, maybe something like \"AddAttributesEventsStatusEndAndConvert\" :)) I also think it will be nice to have more granular benchmarks without SpanData conversion because that happens async.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1012#discussion_r392519201", "createdAt": "2020-03-13T22:52:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanBenchmark.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+  private RecordEventsReadableSpan span;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanBuilderSdk spanBuilderSdk =\n+        (SpanBuilderSdk)\n+            tracerSdk\n+                .spanBuilder(\"benchmarkSpan\")\n+                .setSpanKind(Kind.CLIENT)\n+                .setAttribute(\"key\", \"value\");\n+    span = (RecordEventsReadableSpan) spanBuilderSdk.startSpan();\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public SpanData exerciseSpan_01Thread() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea974025558f70db880deceffb4a0c9b77dbe001"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432f2adfffb24e8afcf4009a40a9ded783e45376", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/432f2adfffb24e8afcf4009a40a9ded783e45376", "committedDate": "2020-03-14T02:32:04Z", "message": "remove the spandata conversion and name the methods more explicitly"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3211, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}