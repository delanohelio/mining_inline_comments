{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTc5MTIw", "number": 2255, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowMDoxOVrOFDQmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNTozM1rOFDQq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTYyMDg4OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/AbstractSynchronousInstrument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowMDoxOVrOIC0eRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowMjoxN1rOIC0gbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc4Mg==", "bodyText": "I was following this rename until I hit this. Why are we passing a processor to create a new binding for an instrument? That doesn't seem like the role of the processor to me. I could think that the binding would be registered with the accumulator, not the processor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539827782", "createdAt": "2020-12-10T04:00:19Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/AbstractSynchronousInstrument.java", "diffHunk": "@@ -68,14 +68,13 @@ public B bind(Labels labels) {\n           // acquire but because we requested a specific value only one will succeed.\n           boundLabels.remove(entry.getKey(), entry.getValue());\n         }\n-        instrumentAccumulator.batch(\n-            entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n+        instrumentProcessor.batch(entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n       }\n-      return instrumentAccumulator.completeCollectionCycle();\n+      return instrumentProcessor.completeCollectionCycle();\n     } finally {\n       collectLock.unlock();\n     }\n   }\n \n-  abstract B newBinding(InstrumentAccumulator instrumentAccumulator);\n+  abstract B newBinding(InstrumentProcessor instrumentProcessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyODMzNQ==", "bodyText": "Actually I need to pass only an Aggregator you can see that all the Bound constructor just call getAggregator. I decided to do that immediately after #2257.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539828335", "createdAt": "2020-12-10T04:02:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/AbstractSynchronousInstrument.java", "diffHunk": "@@ -68,14 +68,13 @@ public B bind(Labels labels) {\n           // acquire but because we requested a specific value only one will succeed.\n           boundLabels.remove(entry.getKey(), entry.getValue());\n         }\n-        instrumentAccumulator.batch(\n-            entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n+        instrumentProcessor.batch(entry.getKey(), entry.getValue().getAggregator(), !unmappedEntry);\n       }\n-      return instrumentAccumulator.completeCollectionCycle();\n+      return instrumentProcessor.completeCollectionCycle();\n     } finally {\n       collectLock.unlock();\n     }\n   }\n \n-  abstract B newBinding(InstrumentAccumulator instrumentAccumulator);\n+  abstract B newBinding(InstrumentProcessor instrumentProcessor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyNzc4Mg=="}, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTYzMTk2OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNTozM1rOIC0kKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDowNjozN1rOIC0laQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI4OA==", "bodyText": "this definitely doesn't feel right to me. The Accumulator should be handling the binding, so it can keep track of when to released the resources associated with the labelset. I don't think that's the job of the Processor, which needs to hold long-term state of all the labelsets against which recordings have been made, even if they're not currently being actively recorded.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539829288", "createdAt": "2020-12-10T04:05:33Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "diffHunk": "@@ -35,15 +34,15 @@ public void add(long increment) {\n   }\n \n   @Override\n-  BoundInstrument newBinding(InstrumentAccumulator instrumentAccumulator) {\n-    return new BoundInstrument(instrumentAccumulator);\n+  BoundInstrument newBinding(InstrumentProcessor instrumentProcessor) {\n+    return new BoundInstrument(instrumentProcessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTYwOQ==", "bodyText": "It is not, as explained in the other comment. I think you are keep reviewing this.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2255#discussion_r539829609", "createdAt": "2020-12-10T04:06:37Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/LongCounterSdk.java", "diffHunk": "@@ -35,15 +34,15 @@ public void add(long increment) {\n   }\n \n   @Override\n-  BoundInstrument newBinding(InstrumentAccumulator instrumentAccumulator) {\n-    return new BoundInstrument(instrumentAccumulator);\n+  BoundInstrument newBinding(InstrumentProcessor instrumentProcessor) {\n+    return new BoundInstrument(instrumentProcessor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTI4OA=="}, "originalCommit": {"oid": "6a62c7a3a21a98e48d9291dc04b458c1a839db48"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1678, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}