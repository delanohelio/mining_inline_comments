{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzU3ODQ4", "number": 2175, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NzowMVrOE_dpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozNzozOVrOFFE0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTgxNTY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTo1NzowMVrOH9LlIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODozMDozMVrOH9Piow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw==", "bodyText": "It might be nice to at least delineate that this isn't just a String. Maybe put a colon in front of it, so it looks like an elixir atom or a ruby symbol?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533914913", "createdAt": "2020-12-02T05:57:01Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java", "diffHunk": "@@ -24,6 +24,11 @@ public String getKey() {\n   @Nullable\n   abstract String key();\n \n+  @Override\n+  public final String toString() {\n+    return getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97fe7a1675a83705431eedc74c5bde0bf5c23274"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNTAxOA==", "bodyText": "or after it?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533915018", "createdAt": "2020-12-02T05:57:19Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java", "diffHunk": "@@ -24,6 +24,11 @@ public String getKey() {\n   @Nullable\n   abstract String key();\n \n+  @Override\n+  public final String toString() {\n+    return getKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw=="}, "originalCommit": {"oid": "97fe7a1675a83705431eedc74c5bde0bf5c23274"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3OTgxMQ==", "bodyText": "I think the type should stay in the toString. Maybe name(type)? But I don't hate the current/old string representation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533979811", "createdAt": "2020-12-02T08:30:31Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/api/common/AttributeKeyImpl.java", "diffHunk": "@@ -24,6 +24,11 @@ public String getKey() {\n   @Nullable\n   abstract String key();\n \n+  @Override\n+  public final String toString() {\n+    return getKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNDkxMw=="}, "originalCommit": {"oid": "97fe7a1675a83705431eedc74c5bde0bf5c23274"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDI4NjExOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo0MDowNlrOH9P4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNToyMzowOFrOIEa5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng==", "bodyText": "@jkwatson @Oberon00 I know what you're getting at, but here's the example we should be looking at - I'd say I like this output and anything else might just add confusion (adding quotes around the key is a possible option that I'm ambivalent on). In unit test failures, we want to eventually look something like\nSpanWrapper{name=HTTP GET, attributes={error=true, http.response_size=100}}\nwhere the attributes become extremely readable to me. SpanWrapper is very far away from looking like this though, lots to do to it.\nBy the way I added our current SpanWrapper toString for kicks (this is literally what we see in instrumentation tests which uses Spock to diff toStrings) - it was even worse than I expected ; ;", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r533985296", "createdAt": "2020-12-02T08:40:06Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -370,4 +367,20 @@ void nullsAreNoOps() {\n     assertThat(attributes.get(doubleArrayKey(\"arrayDouble\"))).isEqualTo(singletonList(1.0d));\n     assertThat(attributes.get(booleanArrayKey(\"arrayBool\"))).isEqualTo(singletonList(true));\n   }\n+\n+  @Test\n+  void attributesToString() {\n+    Attributes attributes =\n+        Attributes.builder()\n+            .put(\"otel.status_code\", \"OK\")\n+            .put(\"http.response_size\", 100)\n+            .put(\"process.cpu_consumed\", 33.44)\n+            .put(\"error\", true)\n+            .build();\n+\n+    assertThat(attributes.toString())\n+        .isEqualTo(\n+            \"{error=true, http.response_size=100, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df5ac1ba161adb7e1e8c9547f85477995b568b1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NzI4NQ==", "bodyText": "Of course, the counter-argument (and I'd say a pretty strong one) is that with your change, you now can't distinguish between {error=true} and {error=true} where one of them is an actual boolean value (correct) and one is a string value (incorrect). And, even worse, with spock, your test would pass when it shouldn't!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r534297285", "createdAt": "2020-12-02T16:18:17Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -370,4 +367,20 @@ void nullsAreNoOps() {\n     assertThat(attributes.get(doubleArrayKey(\"arrayDouble\"))).isEqualTo(singletonList(1.0d));\n     assertThat(attributes.get(booleanArrayKey(\"arrayBool\"))).isEqualTo(singletonList(true));\n   }\n+\n+  @Test\n+  void attributesToString() {\n+    Attributes attributes =\n+        Attributes.builder()\n+            .put(\"otel.status_code\", \"OK\")\n+            .put(\"http.response_size\", 100)\n+            .put(\"process.cpu_consumed\", 33.44)\n+            .put(\"error\", true)\n+            .build();\n+\n+    assertThat(attributes.toString())\n+        .isEqualTo(\n+            \"{error=true, http.response_size=100, \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}, "originalCommit": {"oid": "8df5ac1ba161adb7e1e8c9547f85477995b568b1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2ODYzMA==", "bodyText": "any thoughts here, @anuraaga ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r539668630", "createdAt": "2020-12-09T21:40:40Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -370,4 +367,20 @@ void nullsAreNoOps() {\n     assertThat(attributes.get(doubleArrayKey(\"arrayDouble\"))).isEqualTo(singletonList(1.0d));\n     assertThat(attributes.get(booleanArrayKey(\"arrayBool\"))).isEqualTo(singletonList(true));\n   }\n+\n+  @Test\n+  void attributesToString() {\n+    Attributes attributes =\n+        Attributes.builder()\n+            .put(\"otel.status_code\", \"OK\")\n+            .put(\"http.response_size\", 100)\n+            .put(\"process.cpu_consumed\", 33.44)\n+            .put(\"error\", true)\n+            .build();\n+\n+    assertThat(attributes.toString())\n+        .isEqualTo(\n+            \"{error=true, http.response_size=100, \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}, "originalCommit": {"oid": "8df5ac1ba161adb7e1e8c9547f85477995b568b1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNTgwMw==", "bodyText": "Sorry for taking forever to get back to this. Added quoting of string values, wonder if it's enough to have the clarity along with the brevity.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r541505803", "createdAt": "2020-12-12T05:23:08Z", "author": {"login": "anuraaga"}, "path": "api/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -370,4 +367,20 @@ void nullsAreNoOps() {\n     assertThat(attributes.get(doubleArrayKey(\"arrayDouble\"))).isEqualTo(singletonList(1.0d));\n     assertThat(attributes.get(booleanArrayKey(\"arrayBool\"))).isEqualTo(singletonList(true));\n   }\n+\n+  @Test\n+  void attributesToString() {\n+    Attributes attributes =\n+        Attributes.builder()\n+            .put(\"otel.status_code\", \"OK\")\n+            .put(\"http.response_size\", 100)\n+            .put(\"process.cpu_consumed\", 33.44)\n+            .put(\"error\", true)\n+            .build();\n+\n+    assertThat(attributes.toString())\n+        .isEqualTo(\n+            \"{error=true, http.response_size=100, \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4NTI5Ng=="}, "originalCommit": {"oid": "8df5ac1ba161adb7e1e8c9547f85477995b568b1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODY2MjA3OnYy", "diffSide": "RIGHT", "path": "api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozNzozOVrOIFZWzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDo0MjoxOFrOIFzfsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTIzMQ==", "bodyText": "shouldn't this one have quotes around the value1 ?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r542529231", "createdAt": "2020-12-14T16:37:39Z", "author": {"login": "jkwatson"}, "path": "api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -118,10 +118,7 @@ void asMap() {\n     assertThat(map.values().contains(\"value1\")).isTrue();\n     assertThat(map.values().contains(\"value3\")).isFalse();\n \n-    assertThat(map.toString())\n-        .isEqualTo(\n-            \"ReadOnlyArrayMap{AttributeKeyImpl{getType=STRING, key=key1}=value1,\"\n-                + \"AttributeKeyImpl{getType=LONG, key=key2}=333}\");\n+    assertThat(map.toString()).isEqualTo(\"ReadOnlyArrayMap{key1=value1,key2=333}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60db428718867e322cae8ae570fb6c93860bb95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1NzQ5MA==", "bodyText": "This is Map, not Attributes", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2175#discussion_r542957490", "createdAt": "2020-12-15T00:42:18Z", "author": {"login": "anuraaga"}, "path": "api/common/src/test/java/io/opentelemetry/api/common/AttributesTest.java", "diffHunk": "@@ -118,10 +118,7 @@ void asMap() {\n     assertThat(map.values().contains(\"value1\")).isTrue();\n     assertThat(map.values().contains(\"value3\")).isFalse();\n \n-    assertThat(map.toString())\n-        .isEqualTo(\n-            \"ReadOnlyArrayMap{AttributeKeyImpl{getType=STRING, key=key1}=value1,\"\n-                + \"AttributeKeyImpl{getType=LONG, key=key2}=333}\");\n+    assertThat(map.toString()).isEqualTo(\"ReadOnlyArrayMap{key1=value1,key2=333}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTIzMQ=="}, "originalCommit": {"oid": "b60db428718867e322cae8ae570fb6c93860bb95"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1818, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}