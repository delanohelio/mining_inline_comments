{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzA3ODE0", "number": 1668, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1ODo1MFrOEls9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1ODo1MFrOEls9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTY5MzgyOnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/MultiSpanProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1ODo1MFrOHVUgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMDo1NVrOHVWCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExODA3MA==", "bodyText": "synchronized (this) is always a bad idea, as you open yourself for deadlock if somebody external decides to synchronise on this object instance. In this particular case I think AtomicBoolean is better than volatile+lock", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1668#discussion_r492118070", "createdAt": "2020-09-21T14:58:50Z", "author": {"login": "iNikem"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/MultiSpanProcessor.java", "diffHunk": "@@ -68,11 +69,17 @@ public boolean isEndRequired() {\n \n   @Override\n   public CompletableResultCode shutdown() {\n-    List<CompletableResultCode> results = new ArrayList<>(spanProcessorsAll.size());\n-    for (SpanProcessor spanProcessor : spanProcessorsAll) {\n-      results.add(spanProcessor.shutdown());\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d192d6a83236682ec96b5319b892b3c688e3f9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MzEwNg==", "bodyText": "updated", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1668#discussion_r492143106", "createdAt": "2020-09-21T15:20:55Z", "author": {"login": "malafeev"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/MultiSpanProcessor.java", "diffHunk": "@@ -68,11 +69,17 @@ public boolean isEndRequired() {\n \n   @Override\n   public CompletableResultCode shutdown() {\n-    List<CompletableResultCode> results = new ArrayList<>(spanProcessorsAll.size());\n-    for (SpanProcessor spanProcessor : spanProcessorsAll) {\n-      results.add(spanProcessor.shutdown());\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExODA3MA=="}, "originalCommit": {"oid": "57d192d6a83236682ec96b5319b892b3c688e3f9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1196, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}