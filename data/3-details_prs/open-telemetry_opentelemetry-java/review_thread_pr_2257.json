{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NjA0OTA0", "number": 2257, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoxMDo1NFrOFDQwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoxMDo1NFrOFDQwBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTY0NDg1OnYy", "diffSide": "RIGHT", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoxMDo1NFrOIC0q4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozMDoxN1rOIC1B-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTAwOA==", "bodyText": "If all the implementations are the same, can we just inline this into the AbstractSynchronousInstrument constructor and call it a day? Are there ever likely to be other implementations for creating a bound instrument? Or is this the only way to cleanly get the type capture to work right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2257#discussion_r539831008", "createdAt": "2020-12-10T04:10:54Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -16,7 +16,7 @@\n \n   private DoubleCounterSdk(\n       InstrumentDescriptor descriptor, InstrumentAccumulator instrumentAccumulator) {\n-    super(descriptor, instrumentAccumulator);\n+    super(descriptor, instrumentAccumulator, BoundInstrument::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48be29d767b3e82708f25254d1050b79f3e48efc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTU2MQ==", "bodyText": "They are not the same. BoundInstrument is a different sub-class in the parent caller class", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2257#discussion_r539831561", "createdAt": "2020-12-10T04:12:47Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -16,7 +16,7 @@\n \n   private DoubleCounterSdk(\n       InstrumentDescriptor descriptor, InstrumentAccumulator instrumentAccumulator) {\n-    super(descriptor, instrumentAccumulator);\n+    super(descriptor, instrumentAccumulator, BoundInstrument::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTAwOA=="}, "originalCommit": {"oid": "48be29d767b3e82708f25254d1050b79f3e48efc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNjA0NQ==", "bodyText": "oh, you're right. I totally missed that in the github view. That's what I get for not pulling down the code and looking at it fully. \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2257#discussion_r539836045", "createdAt": "2020-12-10T04:27:17Z", "author": {"login": "jkwatson"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -16,7 +16,7 @@\n \n   private DoubleCounterSdk(\n       InstrumentDescriptor descriptor, InstrumentAccumulator instrumentAccumulator) {\n-    super(descriptor, instrumentAccumulator);\n+    super(descriptor, instrumentAccumulator, BoundInstrument::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTAwOA=="}, "originalCommit": {"oid": "48be29d767b3e82708f25254d1050b79f3e48efc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNjkyMQ==", "bodyText": "Thanks :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2257#discussion_r539836921", "createdAt": "2020-12-10T04:30:17Z", "author": {"login": "bogdandrutu"}, "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -16,7 +16,7 @@\n \n   private DoubleCounterSdk(\n       InstrumentDescriptor descriptor, InstrumentAccumulator instrumentAccumulator) {\n-    super(descriptor, instrumentAccumulator);\n+    super(descriptor, instrumentAccumulator, BoundInstrument::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTAwOA=="}, "originalCommit": {"oid": "48be29d767b3e82708f25254d1050b79f3e48efc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1679, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}