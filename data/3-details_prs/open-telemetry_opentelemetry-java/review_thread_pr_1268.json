{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjIzNDMx", "number": 1268, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0ODoxNlrOD_IyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjowOToxMVrOD_gEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMwNzkwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RandomIdsGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0ODoxNlrOGZpy1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0ODoxNlrOGZpy1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjM0Mw==", "bodyText": "Use Java Objects.requireNotNull", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r429552343", "createdAt": "2020-05-23T14:48:16Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RandomIdsGenerator.java", "diffHunk": "@@ -16,17 +16,56 @@\n \n package io.opentelemetry.sdk.trace;\n \n+import io.opentelemetry.internal.Utils;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceId;\n+import java.util.Random;\n import java.util.concurrent.ThreadLocalRandom;\n \n-final class RandomIdsGenerator implements IdsGenerator {\n+/** The default {@link IdsGenerator} which generates IDs as random numbers. */\n+public final class RandomIdsGenerator implements IdsGenerator {\n+\n   private static final long INVALID_ID = 0;\n \n+  /**\n+   * A supplier of the {@link Random} that will be used to generate random IDs. This is a functional\n+   * interface and can be safely initialized as a lambda.\n+   */\n+  public interface RandomSupplier {\n+    /** Returns the {@link Random} to use for generating IDs. */\n+    Random get();\n+  }\n+\n+  /** Creates a {@link RandomIdsGenerator} which uses {@link ThreadLocalRandom} to generate IDs. */\n+  public RandomIdsGenerator() {\n+    this(\n+        new RandomSupplier() {\n+          @Override\n+          public Random get() {\n+            return ThreadLocalRandom.current();\n+          }\n+\n+          @Override\n+          public String toString() {\n+            return \"ThreadLocalRandom\";\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Creates a {@link RandomIdsGenerator} which uses the provided {@link RandomSupplier} to generate\n+   * IDs.\n+   */\n+  public RandomIdsGenerator(RandomSupplier randomSupplier) {\n+    this.randomSupplier = Utils.checkNotNull(randomSupplier, \"randomSupplier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5bcdd8c3a1218c470edc30088467bb28b143f85"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTEyMzc2OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RandomIdsGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjowOToxMVrOGaMlZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjoxMzoxOVrOGaMoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjM0MQ==", "bodyText": "Maybe worth generating 1K ids to check?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r430122341", "createdAt": "2020-05-26T02:09:11Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RandomIdsGeneratorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class RandomIdsGeneratorTest {\n+\n+  @Test\n+  public void defaults() {\n+    RandomIdsGenerator generator = new RandomIdsGenerator();\n+\n+    // Can't assert values but can assert they're valid.\n+    TraceId traceId = generator.generateTraceId();\n+    assertThat(traceId).isNotEqualTo(TraceId.getInvalid());\n+\n+    SpanId spanId = generator.generateSpanId();\n+    assertThat(spanId).isNotEqualTo(SpanId.getInvalid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11f32d31bca1c6dba120b634046edacf879200a1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzA5NA==", "bodyText": "Sure - for the record, even with 1K test only takes 41ms on my macbook pro", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r430123094", "createdAt": "2020-05-26T02:13:19Z", "author": {"login": "anuraaga"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RandomIdsGeneratorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class RandomIdsGeneratorTest {\n+\n+  @Test\n+  public void defaults() {\n+    RandomIdsGenerator generator = new RandomIdsGenerator();\n+\n+    // Can't assert values but can assert they're valid.\n+    TraceId traceId = generator.generateTraceId();\n+    assertThat(traceId).isNotEqualTo(TraceId.getInvalid());\n+\n+    SpanId spanId = generator.generateSpanId();\n+    assertThat(spanId).isNotEqualTo(SpanId.getInvalid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjM0MQ=="}, "originalCommit": {"oid": "11f32d31bca1c6dba120b634046edacf879200a1"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 724, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}