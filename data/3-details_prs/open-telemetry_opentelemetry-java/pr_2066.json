{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjI0Mzcx", "number": 2066, "title": "Add kotlin extension for interaction with Context in coroutines.", "bodyText": "While working on improvements to interaction between kotlin and context in instrumentation repo, I realized it's not really specific to instrumentation and something any API user will need help with if using kotlin coroutines. So here's a kotlin extension\nopen-telemetry/opentelemetry-java-instrumentation#1618", "createdAt": "2020-11-12T05:11:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066", "merged": true, "mergeCommit": {"oid": "606c9c11f3551472f7b81e56b6e5fef183937abc"}, "closed": true, "closedAt": "2020-11-13T03:25:13Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbrV19AH2gAyNTE5NjI0MzcxOmNhMDEyMGM1ODFmYjI1NmRjNmRjOWE2MTk2NWM5NWFjNjY0MzIyOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb9TfGgFqTUyOTY0NzM2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca0120c581fb256dc6dc9a61965c95ac6643228a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca0120c581fb256dc6dc9a61965c95ac6643228a", "committedDate": "2020-11-12T05:02:58Z", "message": "Add kotlin extension for interaction with Context in coroutines."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475db7da42451cd6d738cd7776ae386305af6996", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/475db7da42451cd6d738cd7776ae386305af6996", "committedDate": "2020-11-12T05:10:40Z", "message": "Newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476d6fb44a81966c8c9f93d0109f642cceed2841", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/476d6fb44a81966c8c9f93d0109f642cceed2841", "committedDate": "2020-11-12T05:14:15Z", "message": "ImplicitContextKeyed not span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db6f11bf157ef45e60d84adf41f386d986add5d9", "committedDate": "2020-11-12T05:14:51Z", "message": "Fix doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjY0Mjc0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#pullrequestreview-529264274", "createdAt": "2020-11-12T16:28:21Z", "commit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODoyMVrOHyDBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODoyMVrOHyDBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDM1Nw==", "bodyText": "I wonder if we should prefix this with Kotlin or Coroutine to make reading code usages super clear about which context we're referring to.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240357", "createdAt": "2020-11-12T16:28:21Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjY0NzYz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#pullrequestreview-529264763", "createdAt": "2020-11-12T16:28:50Z", "commit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODo1MVrOHyDC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODo1MVrOHyDC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDc0NQ==", "bodyText": "similarly, I might call this field otelContext or openTelemetryContext for extra clarity.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522240745", "createdAt": "2020-11-12T16:28:51Z", "author": {"login": "jkwatson"}, "path": "extensions/kotlin/src/main/java/io/opentelemetry/extension/kotlin/ContextElement.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.extension.kotlin;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * {@link ThreadContextElement} for synchronizing a {@link Context} across coroutine suspension and\n+ * resumption. Implemented in Java instead of Kotlin to allow usage in auto-instrumentation where\n+ * there is an outstanding Kotlin bug preventing it https://youtrack.jetbrains.com/issue/KT-20869.\n+ */\n+class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6f11bf157ef45e60d84adf41f386d986add5d9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2ca56d23a9600e0bd51ba503d55a3c67d2096da2", "committedDate": "2020-11-13T01:50:39Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQ2NDEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#pullrequestreview-529646411", "createdAt": "2020-11-13T01:55:45Z", "commit": {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NVrOHyWgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1NTo0NVrOHyWgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUxMA==", "bodyText": "I wonder if we should also mention that many async framework users won't want to use this either. Even if we don't have a drop-in solution for them.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#discussion_r522559510", "createdAt": "2020-11-13T01:55:45Z", "author": {"login": "jkwatson"}, "path": "context/src/main/java/io/opentelemetry/context/ImplicitContextKeyed.java", "diffHunk": "@@ -21,6 +21,12 @@\n    * automatically.\n    *\n    * <p>This method is equivalent to {@code Context.current().with(value).makeCurrent()}.\n+   *\n+   * <p>The default implementation of this method will store the {@link ImplicitContextKeyed} in a\n+   * {@link ThreadLocal}. Kotlin coroutine users SHOULD NOT use this method as the {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQ3MzYz", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2066#pullrequestreview-529647363", "createdAt": "2020-11-13T01:58:41Z", "commit": {"oid": "2ca56d23a9600e0bd51ba503d55a3c67d2096da2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4027, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}