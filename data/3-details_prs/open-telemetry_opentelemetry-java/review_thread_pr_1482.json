{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4OTY0MTE0", "number": 1482, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODo0ODoxMVrOETlrEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1OToxN1rOET0wSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTc1NjM0OnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpanTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODo0ODoxMVrOG5Z8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTowMzoyM1rOG5agcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzAwOQ==", "bodyText": "Can you please provide more descriptive name for the test? What does it actually test?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462847009", "createdAt": "2020-07-30T08:48:11Z", "author": {"login": "iNikem"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpanTest.java", "diffHunk": "@@ -253,6 +253,32 @@ public void toSpanData_WithInitialAttributes() {\n     assertThat(spanData.getTotalAttributeCount()).isEqualTo(attributes.size() + 1);\n   }\n \n+  @Test\n+  public void toSpanData_snapshot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9712a7eb50dae482e492f3aec4858bb3b5c4573e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0ODM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void toSpanData_snapshot() {\n          \n          \n            \n              public void toSpanData_spanDataDoesNotChangeWhenModifyingSpan() {\n          \n      \n    \n    \n  \n\nwould that be better?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462848375", "createdAt": "2020-07-30T08:50:25Z", "author": {"login": "Oberon00"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpanTest.java", "diffHunk": "@@ -253,6 +253,32 @@ public void toSpanData_WithInitialAttributes() {\n     assertThat(spanData.getTotalAttributeCount()).isEqualTo(attributes.size() + 1);\n   }\n \n+  @Test\n+  public void toSpanData_snapshot() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzAwOQ=="}, "originalCommit": {"oid": "9712a7eb50dae482e492f3aec4858bb3b5c4573e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1MTY4OA==", "bodyText": "I also updated the PR description.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462851688", "createdAt": "2020-07-30T08:55:47Z", "author": {"login": "Oberon00"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpanTest.java", "diffHunk": "@@ -253,6 +253,32 @@ public void toSpanData_WithInitialAttributes() {\n     assertThat(spanData.getTotalAttributeCount()).isEqualTo(attributes.size() + 1);\n   }\n \n+  @Test\n+  public void toSpanData_snapshot() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzAwOQ=="}, "originalCommit": {"oid": "9712a7eb50dae482e492f3aec4858bb3b5c4573e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1NjMwNw==", "bodyText": "Improved in 9ac9a16.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462856307", "createdAt": "2020-07-30T09:03:23Z", "author": {"login": "Oberon00"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpanTest.java", "diffHunk": "@@ -253,6 +253,32 @@ public void toSpanData_WithInitialAttributes() {\n     assertThat(spanData.getTotalAttributeCount()).isEqualTo(attributes.size() + 1);\n   }\n \n+  @Test\n+  public void toSpanData_snapshot() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzAwOQ=="}, "originalCommit": {"oid": "9712a7eb50dae482e492f3aec4858bb3b5c4573e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDA1NDMyOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDoxMjoyM1rOG5c2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0NToyMVrOG5d2JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ==", "bodyText": "I think a small comment can help\n// We reduce overhead by using the delegate for all immutable fields. Take care when adding something new to this class when determining whether to delegate or not.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462894681", "createdAt": "2020-07-30T10:12:23Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5OTMzMg==", "bodyText": "I'm hesistant to add this in this bugfix PR. It might cause lots of discussion on how to word it. That aspect you want me to call out did not really change with this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462899332", "createdAt": "2020-07-30T10:21:29Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ=="}, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwMDY0Ng==", "bodyText": "Well the main reason it came to mind is while reviewing this I had to make sure we didn't miss other fields. I think with this PR you put in the thought so documenting that is worthwhile. If this sort of small comment can cause a bikeshed we're in trouble :(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462900646", "createdAt": "2020-07-30T10:24:13Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ=="}, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwMTI1Nw==", "bodyText": "OK, I will add it \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462901257", "createdAt": "2020-07-30T10:25:22Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ=="}, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzA0Nw==", "bodyText": "Added a javadoc in cc79fdb.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462907047", "createdAt": "2020-07-30T10:36:57Z", "author": {"login": "Oberon00"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ=="}, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMTAxMg==", "bodyText": "Thanks, I really like it!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r462911012", "createdAt": "2020-07-30T10:45:21Z", "author": {"login": "anuraaga"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -58,9 +64,21 @@ static SpanWrapper create(\n       ReadableAttributes attributes,\n       int totalAttributeCount,\n       int totalRecordedEvents,\n-      Status status) {\n+      Status status,\n+      String name,\n+      long endEpochNanos,\n+      boolean hasEnded) {\n     return new AutoValue_SpanWrapper(\n-        delegate, links, events, attributes, totalAttributeCount, totalRecordedEvents, status);\n+        delegate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDY4MQ=="}, "originalCommit": {"oid": "9ac9a168bf82c7b18abe2b9a1ebbea274dd4be2e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjIyNzI4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1OToxN1rOG5xycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1OToxN1rOG5xycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNzc0NQ==", "bodyText": "I don't think this is actually a flyweight in the GoF sense, which is more like a multi-singleton. This is a pure delegate.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1482#discussion_r463237745", "createdAt": "2020-07-30T19:59:17Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -30,6 +30,17 @@\n import java.util.List;\n import javax.annotation.concurrent.Immutable;\n \n+/**\n+ * Immutable class that stores {@link SpanData} based on a {@link RecordEventsReadableSpan}.\n+ *\n+ * <p>This is a variant of the \"flyweight\" design pattern, to reduce overhead. We store a reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc79fdbbda0ffd7cd6372880c4c6b2945e67a56b"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}