{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTExNTQ4", "number": 1088, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNjo0NFrODweCJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowODo0NVrODweE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUwMzA4OnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNjo0NVrOGDfaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNjo0NVrOGDfaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxMzYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Injects the value downstream. For example, as http headers. The carrier may be null to\n          \n          \n            \n               * Injects the value downstream, for example as HTTP headers. The carrier may be null to", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406313634", "createdAt": "2020-04-09T16:06:45Z", "author": {"login": "Oberon00"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUwNDkwOnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNzoyMFrOGDfb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxMDoyMVrOGDfjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxMzkzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * facilitate calling this method with a java lambda for the {@link Setter}, in which case that\n          \n          \n            \n               * facilitate calling this method with a lambda for the {@link Setter}, in which case that\n          \n      \n    \n    \n  \n\nJava is redundant in a Javadoc, IMHO.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406313939", "createdAt": "2020-04-09T16:07:20Z", "author": {"login": "Oberon00"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNTg2Mg==", "bodyText": "fair. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406315862", "createdAt": "2020-04-09T16:10:21Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxMzkzOQ=="}, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUwNjQ1OnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNzo0NVrOGDfc0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowNzo0NVrOGDfc0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDE5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * null will be passed to your {@link Setter} implementation.\n          \n          \n            \n               * null will be passed to the {@link Setter} implementation.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406314192", "createdAt": "2020-04-09T16:07:45Z", "author": {"login": "Oberon00"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that\n+   * null will be passed to your {@link Setter} implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUwOTk1OnYy", "diffSide": "RIGHT", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowODo0NVrOGDffRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyNzoyMVrOGDgMLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDgyMg==", "bodyText": "While at it, you could also add @Nonnull.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406314822", "createdAt": "2020-04-09T16:08:45Z", "author": {"login": "Oberon00"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that\n+   * null will be passed to your {@link Setter} implementation.\n    *\n    * @param context the {@code Context} containing the value to be injected.\n    * @param carrier holds propagation fields. For example, an outgoing message or http request.\n    * @param setter invoked for each propagation key to add or remove.\n    * @param <C> carrier of propagation fields, such as an http request\n    * @since 0.1.0\n    */\n-  <C> void inject(Context context, C carrier, Setter<C> setter);\n+  <C> void inject(Context context, @Nullable C carrier, Setter<C> setter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjc2MQ==", "bodyText": "is that implied? We haven't done a lot of annotations like that on our parameters. If we want to start annotating all parameters on API methods, let's do that as a separate PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406316761", "createdAt": "2020-04-09T16:11:48Z", "author": {"login": "jkwatson"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that\n+   * null will be passed to your {@link Setter} implementation.\n    *\n    * @param context the {@code Context} containing the value to be injected.\n    * @param carrier holds propagation fields. For example, an outgoing message or http request.\n    * @param setter invoked for each propagation key to add or remove.\n    * @param <C> carrier of propagation fields, such as an http request\n    * @since 0.1.0\n    */\n-  <C> void inject(Context context, C carrier, Setter<C> setter);\n+  <C> void inject(Context context, @Nullable C carrier, Setter<C> setter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDgyMg=="}, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNjMxNg==", "bodyText": "Right, let's not expand the scope of this PR too much \ud83d\udc4c", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1088#discussion_r406326316", "createdAt": "2020-04-09T16:27:21Z", "author": {"login": "Oberon00"}, "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -69,15 +69,17 @@\n   List<String> fields();\n \n   /**\n-   * Injects the value downstream. For example, as http headers.\n+   * Injects the value downstream. For example, as http headers. The carrier may be null to\n+   * facilitate calling this method with a java lambda for the {@link Setter}, in which case that\n+   * null will be passed to your {@link Setter} implementation.\n    *\n    * @param context the {@code Context} containing the value to be injected.\n    * @param carrier holds propagation fields. For example, an outgoing message or http request.\n    * @param setter invoked for each propagation key to add or remove.\n    * @param <C> carrier of propagation fields, such as an http request\n    * @since 0.1.0\n    */\n-  <C> void inject(Context context, C carrier, Setter<C> setter);\n+  <C> void inject(Context context, @Nullable C carrier, Setter<C> setter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDgyMg=="}, "originalCommit": {"oid": "17e188bdedb41b95a578601787ec1ef0a7710af9"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 827, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}