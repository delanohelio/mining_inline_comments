{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMjUyNjc0", "number": 2374, "title": "Add SimpleSpanProcessor.create and deprecate SimpleSpanProcessorBuilder", "bodyText": "The spec doesn't have a sampled parameter\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#simple-processor\nSo I think we should remove the builder at least for now, if anyone needs the sampled parameter we can add to spec first. I'd expect no though since the job of the simple processor is to be simple.", "createdAt": "2020-12-21T06:16:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374", "merged": true, "mergeCommit": {"oid": "24ef29efea9f94888b26dd7d49864bb3416bad52"}, "closed": true, "closedAt": "2020-12-23T03:31:02Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoPwPAAH2gAyNTQzMjUyNjc0OmFjMzZhMWFjMmUwNjJiZDE2MDZkY2RmY2YyYjJlOTQzY2M0ZGU4YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdo2SNRAFqTU1NzQ4NDY0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac36a1ac2e062bd1606dcdfcf2b2e943cc4de8bf", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ac36a1ac2e062bd1606dcdfcf2b2e943cc4de8bf", "committedDate": "2020-12-21T06:15:28Z", "message": "Deprecate SimpleSpanProcessorBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6a7f82363d2957519370e9a094b3ff5f779921a5", "committedDate": "2020-12-21T06:17:38Z", "message": "Null test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjM4MTA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#pullrequestreview-556238108", "createdAt": "2020-12-21T09:23:37Z", "commit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyMzozN1rOIJRklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToyNTozNFrOIJRoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NTk5MA==", "bodyText": "Maybe the PR title should be \"Add SimpleSpanProcessor.create()\"?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546595990", "createdAt": "2020-12-21T09:23:37Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Njk1MQ==", "bodyText": "I have no opinion on this point, but often we hid such classes in the past and instead used a static method in the interface. So what about making this class deprecated and later package-private and instead adding a SpanProcessor.simple(Exporter) method? (or call it wrap)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r546596951", "createdAt": "2020-12-21T09:25:34Z", "author": {"login": "Oberon00"}, "path": "sdk/trace/src/main/java/io/opentelemetry/sdk/trace/export/SimpleSpanProcessor.java", "diffHunk": "@@ -48,19 +49,30 @@\n   private final boolean sampled;\n   private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n \n+  /**\n+   * Returns a new {@link SimpleSpanProcessor} which exports spans to the {@link SpanExporter}\n+   * synchronously.\n+   */\n+  public static SpanProcessor create(SpanExporter exporter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDcwOTEw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#pullrequestreview-556470910", "createdAt": "2020-12-21T15:40:36Z", "commit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mjk0MTUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#pullrequestreview-557294152", "createdAt": "2020-12-22T18:50:40Z", "commit": {"oid": "6a7f82363d2957519370e9a094b3ff5f779921a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c1910fe0e4150b103e9a751746cef97849f997", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a2c1910fe0e4150b103e9a751746cef97849f997", "committedDate": "2020-12-23T02:48:00Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into deprecate-simplespanprocessor-builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDg0NjQw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#pullrequestreview-557484640", "createdAt": "2020-12-23T03:08:58Z", "commit": {"oid": "a2c1910fe0e4150b103e9a751746cef97849f997"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowODo1OFrOIKPxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowODo1OFrOIKPxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNTA5Mg==", "bodyText": "this might be a very rare case where I would use the full Mockito.reset since I had no idea where this method was coming from without looking at imports.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2374#discussion_r547615092", "createdAt": "2020-12-23T03:08:58Z", "author": {"login": "jkwatson"}, "path": "opencensus-shim/src/test/java/io/opentelemetry/opencensusshim/TraceInteroperabilityTest.java", "diffHunk": "@@ -66,8 +66,20 @@\n   static {\n     spanExporter = spy(SpanExporter.class);\n     when(spanExporter.export(anyList())).thenReturn(CompletableResultCode.ofSuccess());\n+\n     SpanProcessor spanProcessor = SimpleSpanProcessor.create(spanExporter);\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(spanProcessor);\n+    openTelemetry =\n+        OpenTelemetrySdk.builder()\n+            .setTracerProvider(SdkTracerProvider.builder().addSpanProcessor(spanProcessor).build())\n+            .build();\n+    GlobalOpenTelemetry.set(openTelemetry);\n+  }\n+\n+  @Captor private ArgumentCaptor<Collection<SpanData>> spanDataCaptor;\n+\n+  @BeforeEach\n+  void resetMocks() {\n+    reset(spanExporter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c1910fe0e4150b103e9a751746cef97849f997"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3498, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}