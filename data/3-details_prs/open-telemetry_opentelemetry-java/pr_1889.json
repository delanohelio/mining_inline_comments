{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDQ4NDE1", "number": 1889, "title": "Fix propagating Otel context to propagate gRPC context", "bodyText": "Signed-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-10-27T03:55:46Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889", "merged": true, "mergeCommit": {"oid": "eca5cae0781fb43e89a219976176307e1d7ac884"}, "closed": true, "closedAt": "2020-10-27T07:17:08Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWgyIIgH2gAyNTEwNDQ4NDE1OjZhZDNmNzNkODk2MTIzYzFjNzI0YzdmOTYzNGQ5Mjg1MjU5NzQ2YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWhogmgFqTUxNzM0NDQzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ad3f73d896123c1c724c7f9634d9285259746b4", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6ad3f73d896123c1c724c7f9634d9285259746b4", "committedDate": "2020-10-27T03:55:17Z", "message": "Fix propagating Otel context to propagate gRPC context\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzQ0NDMy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889#pullrequestreview-517344432", "createdAt": "2020-10-27T04:43:40Z", "commit": {"oid": "6ad3f73d896123c1c724c7f9634d9285259746b4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo0Mzo0MFrOHorOxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNDo0Mzo0MFrOHorOxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMzM4MQ==", "bodyText": "From what I understand, we essentially resync gRPC with OTel context any time current is called. And since we naturally can't have implicit context propagation without calling current anyways this covers all use cases. Does that sound right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1889#discussion_r512413381", "createdAt": "2020-10-27T04:43:40Z", "author": {"login": "anuraaga"}, "path": "context/src/otelInGrpcTest/java/io/opentelemetry/context/GrpcContextStorageProvider.java", "diffHunk": "@@ -27,15 +26,58 @@ public Scope attach(Context toAttach) {\n         return Scope.noop();\n       }\n \n-      io.grpc.Context newGrpcContext = grpcContext.withValue(OTEL_CONTEXT, toAttach);\n-      io.grpc.Context toRestore = newGrpcContext.attach();\n+      io.grpc.Context newGrpcContext;\n+      if (toAttach instanceof GrpcContextWrapper) {\n+        // This was already constructed with an embedded grpc Context.\n+        newGrpcContext = ((GrpcContextWrapper) toAttach).toGrpcContext();\n+      } else {\n+        newGrpcContext = grpcContext.withValue(OTEL_CONTEXT, toAttach);\n+      }\n \n+      io.grpc.Context toRestore = newGrpcContext.attach();\n       return () -> newGrpcContext.detach(toRestore);\n     }\n \n     @Override\n     public Context current() {\n-      return OTEL_CONTEXT.get();\n+      // We return an object that embeds both the\n+      io.grpc.Context grpcContext = io.grpc.Context.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad3f73d896123c1c724c7f9634d9285259746b4"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}