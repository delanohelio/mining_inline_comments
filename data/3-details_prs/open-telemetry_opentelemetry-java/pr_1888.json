{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDI3OTk3", "number": 1888, "title": "Add test for otel in brave", "bodyText": "Signed-off-by: Bogdan Drutu bogdandrutu@gmail.com", "createdAt": "2020-10-27T02:49:54Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888", "merged": true, "mergeCommit": {"oid": "add99ac9467546f403f1ba9a232c843530815178"}, "closed": true, "closedAt": "2020-11-03T03:00:47Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWf3SggFqTUxNzMxMTQ4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYwMVaAFqTUyMjE2NDI1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzExNDg0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-517311484", "createdAt": "2020-10-27T02:50:57Z", "commit": {"oid": "73d809b877008f3431e9957e6358fdf1f214bbf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1MDo1N1rOHophhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1MDo1N1rOHophhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTQxMg==", "bodyText": "Instead of this, I may be able to check for DefaultContext but that may not work for everyone, so to show how to do it I wrapped it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r512385412", "createdAt": "2020-10-27T02:50:57Z", "author": {"login": "bogdandrutu"}, "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/BraveContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class BraveContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    return BraveContextStorage.INSTANCE;\n+  }\n+\n+  @SuppressWarnings(\"ReferenceEquality\")\n+  private enum BraveContextStorage implements ContextStorage {\n+    INSTANCE;\n+\n+    @Override\n+    public Scope attach(Context toAttach) {\n+      CurrentTraceContext currentTraceContext = Tracing.current().currentTraceContext();\n+      TraceContext currentBraveContext = currentTraceContext.get();\n+      ContextWrapper currentContext = fromBraveContext(currentBraveContext);\n+      if (currentContext == ContextWrapper.ROOT\n+          && (toAttach == null || toAttach == Context.root())) {\n+        // It may be possible that in the current brave we have null, and asked to add root,\n+        // but the behavior of Current is to never return null, so it is fine to return noop.\n+        return Scope.noop();\n+      }\n+\n+      TraceContext newBraveContext =\n+          currentBraveContext.toBuilder().addExtra(new ContextWrapper(toAttach)).build();\n+      CurrentTraceContext.Scope braveScope = currentTraceContext.newScope(newBraveContext);\n+      return braveScope::close;\n+    }\n+\n+    @Override\n+    public Context current() {\n+      TraceContext currentBraveContext = Tracing.current().currentTraceContext().get();\n+      if (currentBraveContext == null) {\n+        return Context.root();\n+      }\n+      return fromBraveContext(currentBraveContext);\n+    }\n+\n+    private static ContextWrapper fromBraveContext(TraceContext braveContext) {\n+      ContextWrapper currentContext = findContextWrapper(braveContext.extra());\n+      return currentContext == null ? ContextWrapper.ROOT : currentContext;\n+    }\n+\n+    static ContextWrapper findContextWrapper(List<Object> extra) {\n+      for (int i = extra.size() - 1; i >= 0; i--) {\n+        Object nextExtra = extra.get(i);\n+        if (nextExtra.getClass() == ContextWrapper.class) return (ContextWrapper) nextExtra;\n+      }\n+      return null;\n+    }\n+  }\n+\n+  // Need to wrap the Context because brave findExtra searches for perfect match of the class.\n+  static final class ContextWrapper implements Context {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d809b877008f3431e9957e6358fdf1f214bbf2"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73d809b877008f3431e9957e6358fdf1f214bbf2", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/73d809b877008f3431e9957e6358fdf1f214bbf2", "committedDate": "2020-10-27T02:49:28Z", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "50fa60df235ed310d5783de0a6d85b030b876cff", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/50fa60df235ed310d5783de0a6d85b030b876cff", "committedDate": "2020-10-27T02:54:08Z", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50fa60df235ed310d5783de0a6d85b030b876cff", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/50fa60df235ed310d5783de0a6d85b030b876cff", "committedDate": "2020-10-27T02:54:08Z", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "4a6b14abd03c17c5c88e61145391d296529ffdbf", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a6b14abd03c17c5c88e61145391d296529ffdbf", "committedDate": "2020-10-27T17:45:32Z", "message": "Ensure all propagation works\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDg4NTAy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-518088502", "createdAt": "2020-10-27T19:51:45Z", "commit": {"oid": "91347daaa3207edd611fadc7ae02e00267e9d455"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTo1MTo0NVrOHpOTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTo1MTo0NVrOHpOTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4Nzk4Ng==", "bodyText": "an unusual animal. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r512987986", "createdAt": "2020-10-27T19:51:45Z", "author": {"login": "jkwatson"}, "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/OtelInBraveTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+class OtelInBraveTest {\n+\n+  private static final ContextKey<String> ANIMAL = ContextKey.named(\"animal\");\n+  private static final Context CONTEXT_WITH_ANIMAL = Context.root().with(ANIMAL, \"japan\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91347daaa3207edd611fadc7ae02e00267e9d455"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjMyNjU1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-518232655", "createdAt": "2020-10-27T23:53:27Z", "commit": {"oid": "91347daaa3207edd611fadc7ae02e00267e9d455"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1MzoyN1rOHpVF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo1Nzo0OVrOHpVLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA==", "bodyText": "Don't think it hurts but is there something we get with covariant types here?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513099240", "createdAt": "2020-10-27T23:53:27Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/DefaultContext.java", "diffHunk": "@@ -61,22 +61,22 @@ private DefaultContext(PersistentHashArrayMappedTrie.Node<ContextKey<?>, Object>\n   }\n \n   @Override\n-  public <V> Context with(ContextKey<V> k1, V v1) {\n+  public <V> DefaultContext with(ContextKey<V> k1, V v1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91347daaa3207edd611fadc7ae02e00267e9d455"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDY4MQ==", "bodyText": "Does it work to check class != ContextWrapper? This test is lucky to have package private access but a real provider wouldn't.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513100681", "createdAt": "2020-10-27T23:57:49Z", "author": {"login": "anuraaga"}, "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/BraveContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class BraveContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    return BraveContextStorage.INSTANCE;\n+  }\n+\n+  @SuppressWarnings(\"ReferenceEquality\")\n+  private enum BraveContextStorage implements ContextStorage {\n+    INSTANCE;\n+\n+    @Override\n+    public Scope attach(Context toAttach) {\n+      CurrentTraceContext currentTraceContext = Tracing.current().currentTraceContext();\n+      TraceContext currentBraveContext = currentTraceContext.get();\n+      if (currentBraveContext == null) {\n+        if (toAttach == Context.root()) {\n+          return Scope.noop();\n+        }\n+      } else {\n+        Context currentContext = ContextWrapper.fromBraveContext(currentBraveContext);\n+        if (currentContext == toAttach) {\n+          return Scope.noop();\n+        }\n+      }\n+\n+      TraceContext newBraveContext;\n+      if (toAttach instanceof ContextWrapper) {\n+        newBraveContext = ((ContextWrapper) toAttach).toBraveContext();\n+      } else {\n+        TraceContext.Builder builder =\n+            currentBraveContext == null\n+                ? TraceContext.newBuilder()\n+                : currentBraveContext.toBuilder();\n+        newBraveContext = builder.addExtra(toAttach).build();\n+      }\n+\n+      if (currentBraveContext == newBraveContext) {\n+        return Scope.noop();\n+      }\n+      CurrentTraceContext.Scope braveScope = currentTraceContext.newScope(newBraveContext);\n+      return braveScope::close;\n+    }\n+\n+    @Override\n+    public Context current() {\n+      TraceContext currentBraveContext = Tracing.current().currentTraceContext().get();\n+      if (currentBraveContext == null) {\n+        return Context.root();\n+      }\n+      return new ContextWrapper(\n+          currentBraveContext, ContextWrapper.fromBraveContext(currentBraveContext));\n+    }\n+  }\n+\n+  // Need to wrap the Context because brave findExtra searches for perfect match of the class.\n+  static final class ContextWrapper implements Context {\n+    private final TraceContext baseBraveContext;\n+    private final DefaultContext context;\n+\n+    ContextWrapper(TraceContext baseBraveContext, DefaultContext context) {\n+      this.baseBraveContext = baseBraveContext;\n+      this.context = context;\n+    }\n+\n+    TraceContext toBraveContext() {\n+      if (fromBraveContext(baseBraveContext) == context) {\n+        return baseBraveContext;\n+      }\n+      return baseBraveContext.toBuilder().addExtra(context).build();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public <V> V get(ContextKey<V> key) {\n+      return context.get(key);\n+    }\n+\n+    @Override\n+    public <V> Context with(ContextKey<V> k1, V v1) {\n+      return new ContextWrapper(baseBraveContext, context.with(k1, v1));\n+    }\n+\n+    private static DefaultContext fromBraveContext(TraceContext braveContext) {\n+      List<Object> extra = braveContext.extra();\n+      for (int i = extra.size() - 1; i >= 0; i--) {\n+        Object nextExtra = extra.get(i);\n+        if (nextExtra.getClass() == DefaultContext.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91347daaa3207edd611fadc7ae02e00267e9d455"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTkxNzI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-521191729", "createdAt": "2020-11-01T04:30:24Z", "commit": {"oid": "bede2160fc19b754e18b4c36f9c91275c140eacf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjg5MjY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-521689267", "createdAt": "2020-11-02T14:41:52Z", "commit": {"oid": "bede2160fc19b754e18b4c36f9c91275c140eacf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "889a639f7c90a17a98fa59f7665a706ebd08382d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/889a639f7c90a17a98fa59f7665a706ebd08382d", "committedDate": "2020-11-02T23:59:11Z", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c25889f647ed01d46a4aefa38a628cf26bbc8a", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e6c25889f647ed01d46a4aefa38a628cf26bbc8a", "committedDate": "2020-11-02T23:59:48Z", "message": "Ensure all propagation works\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18fcd20a7aa1f6e1859187abb6009c861d7698d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d18fcd20a7aa1f6e1859187abb6009c861d7698d", "committedDate": "2020-11-03T00:17:02Z", "message": "Fix nullpointer exception\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bede2160fc19b754e18b4c36f9c91275c140eacf", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bede2160fc19b754e18b4c36f9c91275c140eacf", "committedDate": "2020-10-31T19:37:37Z", "message": "Merge branch 'master' into otelinbrave"}, "afterCommit": {"oid": "d18fcd20a7aa1f6e1859187abb6009c861d7698d", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d18fcd20a7aa1f6e1859187abb6009c861d7698d", "committedDate": "2020-11-03T00:17:02Z", "message": "Fix nullpointer exception\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTY0MjUw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#pullrequestreview-522164250", "createdAt": "2020-11-03T03:00:20Z", "commit": {"oid": "d18fcd20a7aa1f6e1859187abb6009c861d7698d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4148, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}