{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjY0MjUz", "number": 952, "title": "Implement collectAll for observers, need to still install default aggregation", "bodyText": "", "createdAt": "2020-02-29T00:50:26Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952", "merged": true, "mergeCommit": {"oid": "e824c45bdd2a0b601294d434e8c2ccd9ff14045d"}, "closed": true, "closedAt": "2020-03-04T18:13:11Z", "author": {"login": "bogdandrutu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI7qkHAFqTM2Njc3MjU0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKZopegFqTM2ODkzNzIxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzcyNTQ1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#pullrequestreview-366772545", "createdAt": "2020-02-29T03:08:21Z", "commit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowODoyMVrOFwHTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowODoyMVrOFwHTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTUzOQ==", "bodyText": "Probably a minor issue, since this is only called once per collection cycle, but I'd prefer to see this be a concrete, rather than anonymous class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995539", "createdAt": "2020-02-29T03:08:21Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,31 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultLongObserver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzcyNjIy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#pullrequestreview-366772622", "createdAt": "2020-02-29T03:09:43Z", "commit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowOTo0M1rOFwHTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzowOTo0M1rOFwHTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTYyMA==", "bodyText": "same comment here about having this be a concrete, rather than an anonymous class.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995620", "createdAt": "2020-02-29T03:09:43Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,32 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultDoubleObserver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ea5f7173af5da161475c03e779e5cb57aa8e89", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/17ea5f7173af5da161475c03e779e5cb57aa8e89", "committedDate": "2020-03-01T19:29:36Z", "message": "Implement collectAll for observers, need to still install default aggregation\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af84c5dbfb22e0ec67bec391b884fcbe6058a772", "committedDate": "2020-03-01T19:34:00Z", "message": "Move result callbacks as inner classes.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05943b393aeb9629d094fb9480dfcfe9f03e7e62", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/05943b393aeb9629d094fb9480dfcfe9f03e7e62", "committedDate": "2020-02-29T00:49:56Z", "message": "Implement collectAll for observers, need to still install default aggregation\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}, "afterCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "author": {"user": {"login": "bogdandrutu", "name": "Bogdan Drutu"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af84c5dbfb22e0ec67bec391b884fcbe6058a772", "committedDate": "2020-03-01T19:34:00Z", "message": "Move result callbacks as inner classes.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTk0OTY3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#pullrequestreview-366994967", "createdAt": "2020-03-02T07:39:01Z", "commit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTowMVrOFwV1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzozOTo0M1rOFwV2yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ==", "bodyText": "Since you check for null values in collectAll(), I would drop this requirement. This way, we can remove a callback after it is set", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386233851", "createdAt": "2020-03-02T07:39:01Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,20 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultDoubleObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n   @Override\n   public void setCallback(Callback<DoubleObserver.ResultDoubleObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzNDA1OA==", "bodyText": "The same comment applies here", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386234058", "createdAt": "2020-03-02T07:39:43Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,19 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultLongObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n+  @Override\n+  public void setCallback(Callback<ResultLongObserver> metricUpdater) {\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTM3MjE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#pullrequestreview-368937214", "createdAt": "2020-03-04T16:37:21Z", "commit": {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}