{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzcxODc2", "number": 761, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo1M1rODY3NUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo1M1rODY3NUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzk2OTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo1M1rOFe9i3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1OToyMlrOFgpK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ==", "bodyText": "How about we call this LongPoint, as that will be much more clear to most java developers.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r368009949", "createdAt": "2020-01-17T15:59:53Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNjk0MA==", "bodyText": "I would like to make a decision one way or the other. the protocol will use int64 and other languages will use int64 but I do see the confusion for Java devs.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r368016940", "createdAt": "2020-01-17T16:14:02Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ=="}, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDM0Mw==", "bodyText": "My preference would be to call the class LongPoint and document the Int64 protocol information in the javadoc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r368034343", "createdAt": "2020-01-17T16:49:29Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ=="}, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NTY3Mw==", "bodyText": "Can I do that in a separate PR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r369765673", "createdAt": "2020-01-22T19:43:58Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ=="}, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MzI4Mg==", "bodyText": "@jkwatson if you agree with that please review/approve this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/761#discussion_r369773282", "createdAt": "2020-01-22T19:59:22Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/MetricData.java", "diffHunk": "@@ -34,33 +37,120 @@\n   /**\n    * Returns the {@link Descriptor} of this metric.\n    *\n-   * @return the {@code MetricDescriptor} of this metric.\n+   * @return the {@code Descriptor} of this metric.\n    * @since 0.1.0\n    */\n   public abstract Descriptor getDescriptor();\n \n   /**\n-   * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n-   * the metric was created or an aggregation was enabled.\n+   * Returns the data {@link Int64Point}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the start epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n    */\n-  public abstract long getStartEpochNanos();\n+  @Nullable\n+  public abstract Collection<Int64Point> getInt64Points();\n \n   /**\n-   * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n-   * moment when {@code Instrument.getData()} was called.\n+   * Returns the data {@link DoublePoint}s for this metric, or {@code null} if the {@link\n+   * Descriptor.Type} of the metric does not generate this type of points.\n    *\n-   * @return the epoch timestamp in nanos.\n-   * @since 0.1.0\n+   * <p>Only one type of points are available at any moment for a {@link MetricData}.\n+   *\n+   * @return the data {@link Point}s for this metric, or {@code null} if this type of points are not\n+   *     accepted.\n+   * @since 0.3.0\n+   */\n+  @Nullable\n+  public abstract Collection<DoublePoint> getDoublePoints();\n+\n+  static MetricData createWithInt64Points(\n+      Descriptor descriptor, Collection<Int64Point> int64Points) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_INT64 || type == Descriptor.Type.MONOTONIC_INT64,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, Utils.checkNotNull(int64Points, \"longPoints\"), null);\n+  }\n+\n+  static MetricData createWithDoublePoints(\n+      Descriptor descriptor, Collection<DoublePoint> doublePoints) {\n+    Descriptor.Type type = Utils.checkNotNull(descriptor, \"descriptor\").getType();\n+    Utils.checkState(\n+        type == Descriptor.Type.NON_MONOTONIC_DOUBLE || type == Descriptor.Type.MONOTONIC_DOUBLE,\n+        \"Incompatible points type with metric type.\");\n+    return new AutoValue_MetricData(\n+        descriptor, null, Utils.checkNotNull(doublePoints, \"doublePoints\"));\n+  }\n+\n+  @Immutable\n+  abstract static class Point {\n+    Point() {}\n+\n+    /**\n+     * Returns the start epoch timestamp in nanos of this {@code Instrument}, usually the time when\n+     * the metric was created or an aggregation was enabled.\n+     *\n+     * @return the start epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getStartEpochNanos();\n+\n+    /**\n+     * Returns the the epoch timestamp in nanos when data were collected, usually it represents the\n+     * moment when {@code Instrument.getData()} was called.\n+     *\n+     * @return the epoch timestamp in nanos.\n+     * @since 0.3.0\n+     */\n+    public abstract long getEpochNanos();\n+  }\n+\n+  /**\n+   * Int64Point is a single data point in a timeseries that describes the time-varying values of a\n+   * int64 metric.\n+   */\n+  @Immutable\n+  @AutoValue\n+  public abstract static class Int64Point extends Point {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTk0OQ=="}, "originalCommit": {"oid": "f6d12a1caa6cb68e0482ef8283b54eb72a4978d0"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1006, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}