{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDE2NTEz", "number": 2091, "title": "Hide implementation of MultiSpanExporter/Processor behind interface.", "bodyText": "forwarding also came to mind instead of delegating. Either way, seems nice to hide the implementation.", "createdAt": "2020-11-18T08:39:54Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091", "merged": true, "mergeCommit": {"oid": "d940947e53b064035038574bfe1b1ff61b1775f9"}, "closed": true, "closedAt": "2020-11-20T01:54:36Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddpbl0gH2gAyNTIzMDE2NTEzOjlhNmU2YWE0Y2IwZjM5MjVhZWE2YzhkNjJhYzQwNjQ3MjA0Y2U0YzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeIwJ0AFqTUzNDgyMjExMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a6e6aa4cb0f3925aea6c8d62ac40647204ce4c4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9a6e6aa4cb0f3925aea6c8d62ac40647204ce4c4", "committedDate": "2020-11-18T07:57:17Z", "message": "Hide implementation of MultiSpanExporter behind interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/93706368f57685d0ef3019a7a05e84776c7d5e19", "committedDate": "2020-11-18T09:09:53Z", "message": "spanprocessor too"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjI0MzIx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#pullrequestreview-533624321", "createdAt": "2020-11-18T16:24:49Z", "commit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNDo0OVrOH12IEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNDo0OVrOH12IEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ==", "bodyText": "allOf() maybe?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526223379", "createdAt": "2020-11-18T16:24:49Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjI1NDI5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#pullrequestreview-533625429", "createdAt": "2020-11-18T16:25:50Z", "commit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6abbf0d56f338aa98b66eeac8bd866ac5d31928f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6abbf0d56f338aa98b66eeac8bd866ac5d31928f", "committedDate": "2020-11-19T03:06:22Z", "message": "composite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddc50148796efb7ce316d1e61ba1595ef90f9a6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4ddc50148796efb7ce316d1e61ba1595ef90f9a6", "committedDate": "2020-11-19T03:07:05Z", "message": "composite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae8a26fd74e884c1cafc6680b168b0e1fb8a5c0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ae8a26fd74e884c1cafc6680b168b0e1fb8a5c0", "committedDate": "2020-11-19T03:50:29Z", "message": "Optimize composites based on number of items."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3d2d9195a717146c3fc70bfb74878f69d22301", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0c3d2d9195a717146c3fc70bfb74878f69d22301", "committedDate": "2020-11-19T03:51:24Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78bded9f460ca02e780fb150b4f5f93d76bbe1d9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78bded9f460ca02e780fb150b4f5f93d76bbe1d9", "committedDate": "2020-11-19T03:54:34Z", "message": "IntelliJ + spotless race condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae82e7f3b8354261be6963aa9442dbd045bb72d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bae82e7f3b8354261be6963aa9442dbd045bb72d", "committedDate": "2020-11-19T03:58:17Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NjI4MzA2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#pullrequestreview-534628306", "createdAt": "2020-11-19T16:31:07Z", "commit": {"oid": "bae82e7f3b8354261be6963aa9442dbd045bb72d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODIyMTEx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#pullrequestreview-534822111", "createdAt": "2020-11-19T20:26:48Z", "commit": {"oid": "bae82e7f3b8354261be6963aa9442dbd045bb72d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4056, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}