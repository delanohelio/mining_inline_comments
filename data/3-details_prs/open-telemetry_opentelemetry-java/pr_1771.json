{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTcxNTc4", "number": 1771, "title": "Baggage propagator first implementation", "bodyText": "This resolves #1530", "createdAt": "2020-10-07T23:32:55Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771", "merged": true, "mergeCommit": {"oid": "939d1b8ddca63601d0d90ac6cb4f21a4f3adc737"}, "closed": true, "closedAt": "2020-10-13T06:30:02Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQlpoZgBqjM4NTY3NTI1MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSCmRSgFqTUwNzEwMzY5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f00d737ec828f6f9d3a811e3e8a10ef2b58fcb56", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f00d737ec828f6f9d3a811e3e8a10ef2b58fcb56", "committedDate": "2020-10-07T23:31:16Z", "message": "update for context changeover"}, "afterCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cce213b150f80315b68ce76a0d196f09ab98697c", "committedDate": "2020-10-08T18:07:35Z", "message": "update for context changeover"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9ae715003102b93c4e77cc0674ad17c5fbeb29", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bc9ae715003102b93c4e77cc0674ad17c5fbeb29", "committedDate": "2020-10-12T18:59:16Z", "message": "Turn the Baggage metadata into a simple wrapper for a String."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810f0168953ae3edf4f35f355afadfb02ab601ba", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/810f0168953ae3edf4f35f355afadfb02ab601ba", "committedDate": "2020-10-12T18:59:16Z", "message": "whoops missing final modifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6ac851b35312bf606f4700cf570e28be416cd3", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa6ac851b35312bf606f4700cf570e28be416cd3", "committedDate": "2020-10-12T18:59:16Z", "message": "remove unneeded nullable annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b2a0e797af43db1f28fe9c35a17c4340d49ee95", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b2a0e797af43db1f28fe9c35a17c4340d49ee95", "committedDate": "2020-10-12T18:59:16Z", "message": "Remove the method to parent via Baggage.\nParenting is still implemented via the Context.\nAlso, renamed many old variables and method to use the new baggage name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13fe4e8ad234ba29e76043d04d77c1cd600a19bd", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/13fe4e8ad234ba29e76043d04d77c1cd600a19bd", "committedDate": "2020-10-12T18:59:16Z", "message": "update for context changeover"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc0acb16960a4f57b35a1a3b1f8fc506ca6ab3d8", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bc0acb16960a4f57b35a1a3b1f8fc506ca6ab3d8", "committedDate": "2020-10-12T18:59:16Z", "message": "Remove the method to parent via Baggage.\nParenting is still implemented via the Context.\nAlso, renamed many old variables and method to use the new baggage name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc389d37f7db323f9ed1d4d8080d5cd30586bb5b", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dc389d37f7db323f9ed1d4d8080d5cd30586bb5b", "committedDate": "2020-10-12T18:59:16Z", "message": "Basic implementation of baggage header extraction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25733f79916e85a1d80327e5e830550660919db9", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/25733f79916e85a1d80327e5e830550660919db9", "committedDate": "2020-10-12T18:59:16Z", "message": "inject implemented"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b47d5127272738cf212dbd5c2cd75544f33888", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24b47d5127272738cf212dbd5c2cd75544f33888", "committedDate": "2020-10-12T18:59:16Z", "message": "cleanup checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0841e68bbd2e8fd1d64f26df5076eea7fd4ff883", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0841e68bbd2e8fd1d64f26df5076eea7fd4ff883", "committedDate": "2020-10-12T18:59:16Z", "message": "update for context changeover"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cce213b150f80315b68ce76a0d196f09ab98697c", "committedDate": "2020-10-08T18:07:35Z", "message": "update for context changeover"}, "afterCommit": {"oid": "0841e68bbd2e8fd1d64f26df5076eea7fd4ff883", "author": {"user": {"login": "jkwatson", "name": "John Watson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0841e68bbd2e8fd1d64f26df5076eea7fd4ff883", "committedDate": "2020-10-12T18:59:16Z", "message": "update for context changeover"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MjYwNDA5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#pullrequestreview-505260409", "createdAt": "2020-10-09T00:20:47Z", "commit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDoyMDo0N1rOHe1OUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDoyNDozMFrOHe1R4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MTM0Ng==", "bodyText": "Hmm - do we need to expose the constructor publicly too to allow a different BaggageManager than the global?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r502091346", "createdAt": "2020-10-09T00:20:47Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MjA2NQ==", "bodyText": "Not really for this PR but I guess it'd be nice to always return an empty baggage instead of null", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r502092065", "createdAt": "2020-10-09T00:23:47Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the\n+   * {@link OpenTelemetry} global.\n+   */\n+  public static W3CBaggagePropagator getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return FIELDS;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    Baggage baggage = BaggageUtils.getBaggage(context);\n+    if (baggage == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MjEzOA==", "bodyText": "If there were an empty baggage check above, we wouldn't need this one guaranteed to inject something", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r502092138", "createdAt": "2020-10-09T00:24:03Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the\n+   * {@link OpenTelemetry} global.\n+   */\n+  public static W3CBaggagePropagator getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return FIELDS;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    Baggage baggage = BaggageUtils.getBaggage(context);\n+    if (baggage == null) {\n+      return;\n+    }\n+    StringBuilder headerContent = new StringBuilder();\n+    for (Entry entry : baggage.getEntries()) {\n+      headerContent.append(entry.getKey()).append(\"=\").append(entry.getValue());\n+      String metadataValue = entry.getEntryMetadata().getValue();\n+      if (metadataValue != null && !metadataValue.isEmpty()) {\n+        headerContent.append(\";\").append(metadataValue);\n+      }\n+      headerContent.append(\",\");\n+    }\n+    if (headerContent.length() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MjI1OA==", "bodyText": "Though disregard my above comments if no baggage is different from empty baggage semantically.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r502092258", "createdAt": "2020-10-09T00:24:30Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the\n+   * {@link OpenTelemetry} global.\n+   */\n+  public static W3CBaggagePropagator getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return FIELDS;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    Baggage baggage = BaggageUtils.getBaggage(context);\n+    if (baggage == null) {\n+      return;\n+    }\n+    StringBuilder headerContent = new StringBuilder();\n+    for (Entry entry : baggage.getEntries()) {\n+      headerContent.append(entry.getKey()).append(\"=\").append(entry.getValue());\n+      String metadataValue = entry.getEntryMetadata().getValue();\n+      if (metadataValue != null && !metadataValue.isEmpty()) {\n+        headerContent.append(\";\").append(metadataValue);\n+      }\n+      headerContent.append(\",\");\n+    }\n+    if (headerContent.length() > 0) {\n+      headerContent.setLength(headerContent.length() - 1);\n+      setter.set(carrier, FIELD, headerContent.toString());\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    String baggageHeader = getter.get(carrier, FIELD);\n+    if (baggageHeader == null) {\n+      return context;\n+    }\n+    if (baggageHeader.isEmpty()) {\n+      return BaggageUtils.withBaggage(EmptyBaggage.getInstance(), context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTAzNjkw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#pullrequestreview-507103690", "createdAt": "2020-10-13T06:28:13Z", "commit": {"oid": "0841e68bbd2e8fd1d64f26df5076eea7fd4ff883"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoyODoxM1rOHgXI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoyOToyNlrOHgXK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NTYwNw==", "bodyText": "Me too :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r503695607", "createdAt": "2020-10-13T06:28:13Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MTM0Ng=="}, "originalCommit": {"oid": "cce213b150f80315b68ce76a0d196f09ab98697c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NjEyNA==", "bodyText": "Random noise from me - not sure what the difference between baggage and tracestate is, they're both propagated K-V pairs it seems. Anyways ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1771#discussion_r503696124", "createdAt": "2020-10-13T06:29:26Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/baggage/propagation/W3CBaggagePropagator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.baggage.propagation;\n+\n+import static java.util.Collections.singletonList;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.baggage.Baggage;\n+import io.opentelemetry.baggage.BaggageManager;\n+import io.opentelemetry.baggage.BaggageUtils;\n+import io.opentelemetry.baggage.EmptyBaggage;\n+import io.opentelemetry.baggage.Entry;\n+import io.opentelemetry.baggage.EntryMetadata;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import java.util.List;\n+\n+/**\n+ * {@link TextMapPropagator} that implements the W3C specification for baggage header propagation.\n+ */\n+public class W3CBaggagePropagator implements TextMapPropagator {\n+\n+  private static final String FIELD = \"baggage\";\n+  private static final List<String> FIELDS = singletonList(FIELD);\n+  private static final W3CBaggagePropagator INSTANCE =\n+      new W3CBaggagePropagator(OpenTelemetry.getBaggageManager());\n+\n+  private final BaggageManager baggageManager;\n+\n+  // visible for testing\n+  W3CBaggagePropagator(BaggageManager baggageManager) {\n+    this.baggageManager = baggageManager;\n+  }\n+\n+  /**\n+   * Singleton instance of the W3C Baggage Propagator. Uses the {@link BaggageManager} from the\n+   * {@link OpenTelemetry} global.\n+   */\n+  public static W3CBaggagePropagator getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return FIELDS;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    Baggage baggage = BaggageUtils.getBaggage(context);\n+    if (baggage == null) {\n+      return;\n+    }\n+    StringBuilder headerContent = new StringBuilder();\n+    for (Entry entry : baggage.getEntries()) {\n+      headerContent.append(entry.getKey()).append(\"=\").append(entry.getValue());\n+      String metadataValue = entry.getEntryMetadata().getValue();\n+      if (metadataValue != null && !metadataValue.isEmpty()) {\n+        headerContent.append(\";\").append(metadataValue);\n+      }\n+      headerContent.append(\",\");\n+    }\n+    if (headerContent.length() > 0) {\n+      headerContent.setLength(headerContent.length() - 1);\n+      setter.set(carrier, FIELD, headerContent.toString());\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    String baggageHeader = getter.get(carrier, FIELD);\n+    if (baggageHeader == null) {\n+      return context;\n+    }\n+    if (baggageHeader.isEmpty()) {\n+      return BaggageUtils.withBaggage(EmptyBaggage.getInstance(), context);\n+    }\n+\n+    Baggage.Builder baggageBuilder = baggageManager.baggageBuilder();\n+    try {\n+      extractEntries(baggageHeader, baggageBuilder);\n+    } catch (Exception e) {\n+      return BaggageUtils.withBaggage(EmptyBaggage.getInstance(), context);\n+    }\n+    return BaggageUtils.withBaggage(baggageBuilder.build(), context);\n+  }\n+\n+  @SuppressWarnings(\"StringSplitter\")\n+  private static void extractEntries(String baggageHeader, Baggage.Builder baggageBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0841e68bbd2e8fd1d64f26df5076eea7fd4ff883"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2233, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}