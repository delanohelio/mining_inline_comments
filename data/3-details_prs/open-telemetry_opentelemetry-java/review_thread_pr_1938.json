{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyODQ2NDIw", "number": 1938, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo0OToxNVrOEzswrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMzo1MlrOE0XmuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjQ2MTkxOnYy", "diffSide": "RIGHT", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo0OToxNVrOHrF68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0Mzo1NFrOHrHsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0NzgyNg==", "bodyText": "Intentionally not volatile for now - maybe it's too optimistic to hope set is only ever called by a user at the very beginning of the app but unlike OpenTelemetry itself this is a very advanced API.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r514947826", "createdAt": "2020-10-30T08:49:15Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -56,12 +56,16 @@ static ContextStorage get() {\n     return storage;\n   }\n \n+  static void set(ContextStorage storage) {\n+    LazyStorage.storage = storage;\n+  }\n+\n   private static final String CONTEXT_STORAGE_PROVIDER_PROPERTY =\n       \"io.opentelemetry.context.contextStorageProvider\";\n \n   private static final Logger logger = Logger.getLogger(LazyStorage.class.getName());\n \n-  private static final ContextStorage storage;\n+  private static ContextStorage storage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd87791575aef943b39c31a178247408c10f7650"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2NDAyNg==", "bodyText": "An idea that comes to mind is having ResettableContextStorageProvider in the testing package. I would need to add a slightly hacky check for that provider in LazyStorage.createStorage() to use it + another normally SPI-loaded or default contextstorage when it's present but it doesn't seem so bad actually. Let me play with it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r514964026", "createdAt": "2020-10-30T09:20:47Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -56,12 +56,16 @@ static ContextStorage get() {\n     return storage;\n   }\n \n+  static void set(ContextStorage storage) {\n+    LazyStorage.storage = storage;\n+  }\n+\n   private static final String CONTEXT_STORAGE_PROVIDER_PROPERTY =\n       \"io.opentelemetry.context.contextStorageProvider\";\n \n   private static final Logger logger = Logger.getLogger(LazyStorage.class.getName());\n \n-  private static final ContextStorage storage;\n+  private static ContextStorage storage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0NzgyNg=="}, "originalCommit": {"oid": "bd87791575aef943b39c31a178247408c10f7650"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3Njc5OQ==", "bodyText": "Was able to remove set(ContextStorage) in the main artifact - there is some crosstalk where the prod artifact is aware of the classname of the test helper, and the test helper duplicates some logic from the prod logic, but it's all contained in implementation and seems safe to me. Added defaultStorage API which was needed anyways to support custom storage implementations delegating to the standard.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r514976799", "createdAt": "2020-10-30T09:43:54Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -56,12 +56,16 @@ static ContextStorage get() {\n     return storage;\n   }\n \n+  static void set(ContextStorage storage) {\n+    LazyStorage.storage = storage;\n+  }\n+\n   private static final String CONTEXT_STORAGE_PROVIDER_PROPERTY =\n       \"io.opentelemetry.context.contextStorageProvider\";\n \n   private static final Logger logger = Logger.getLogger(LazyStorage.class.getName());\n \n-  private static final ContextStorage storage;\n+  private static ContextStorage storage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0NzgyNg=="}, "originalCommit": {"oid": "bd87791575aef943b39c31a178247408c10f7650"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODIwNzgxOnYy", "diffSide": "RIGHT", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyNToyMFrOHrWlvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo0MjowNVrOHsMgsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMDkyNg==", "bodyText": "Could we create an interface for this, rather than relying on the classname explicitly?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r515220926", "createdAt": "2020-10-30T16:25:20Z", "author": {"login": "jkwatson"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -79,11 +79,18 @@ static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFa\n \n     List<ContextStorageProvider> providers = new ArrayList<>();\n     for (ContextStorageProvider provider : ServiceLoader.load(ContextStorageProvider.class)) {\n+      if (provider\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.sdk.testing.context.SettableContextStorageProvider\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce936db0336b96d5e3cb4b6ee2c45886b7a79aa6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NTY3NQ==", "bodyText": "That would add a public API for this testing use case. I'd rather keep this implementation detail for now and if another use case comes up can add an interface for a \"forced context storage provider\" - wdyt?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r515465675", "createdAt": "2020-10-31T07:02:25Z", "author": {"login": "anuraaga"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -79,11 +79,18 @@ static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFa\n \n     List<ContextStorageProvider> providers = new ArrayList<>();\n     for (ContextStorageProvider provider : ServiceLoader.load(ContextStorageProvider.class)) {\n+      if (provider\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.sdk.testing.context.SettableContextStorageProvider\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMDkyNg=="}, "originalCommit": {"oid": "ce936db0336b96d5e3cb4b6ee2c45886b7a79aa6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNDM2OQ==", "bodyText": "Agreed for now. I think it could be a confusing addition to the public API. I'm fine with this for now...especially as we can start trying it out and seeing how well it works.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r516104369", "createdAt": "2020-11-02T16:42:05Z", "author": {"login": "jkwatson"}, "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -79,11 +79,18 @@ static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFa\n \n     List<ContextStorageProvider> providers = new ArrayList<>();\n     for (ContextStorageProvider provider : ServiceLoader.load(ContextStorageProvider.class)) {\n+      if (provider\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.sdk.testing.context.SettableContextStorageProvider\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMDkyNg=="}, "originalCommit": {"oid": "ce936db0336b96d5e3cb4b6ee2c45886b7a79aa6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODg3OTc2OnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/test/java/io/opentelemetry/sdk/testing/context/StrictContextStorageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyODo0MFrOHrdIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzo0NTo0M1rOHrtBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyODE3Ng==", "bodyText": "Wouldn't we want to decorate the no-op scope, to make sure that even those are being properly closed? I can imagine use-cases where someone would accidentally end up creating a no-op scope in a test, but in the real world it would end up being a real scope, and then we wouldn't flag it as a problem.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r515328176", "createdAt": "2020-10-30T19:28:40Z", "author": {"login": "jkwatson"}, "path": "sdk/testing/src/test/java/io/opentelemetry/sdk/testing/context/StrictContextStorageTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.opentelemetry.sdk.testing.context;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+@SuppressWarnings(\"MustBeClosedChecker\")\n+class StrictContextStorageTest {\n+\n+  private static final ContextKey<String> ANIMAL = ContextKey.named(\"animal\");\n+  private static final IdGenerator IDS_GENERATOR = IdGenerator.random();\n+  private static final String TRACE_ID = IDS_GENERATOR.generateTraceId();\n+  private static final String SPAN_ID = IDS_GENERATOR.generateSpanId();\n+\n+  private static final Span SPAN =\n+      Span.wrap(\n+          SpanContext.create(TRACE_ID, SPAN_ID, TraceFlags.getSampled(), TraceState.getDefault()));\n+\n+  private static ContextStorage previousStorage;\n+  private static StrictContextStorage strictStorage;\n+\n+  @BeforeAll\n+  static void setUp() {\n+    previousStorage = SettableContextStorageProvider.getContextStorage();\n+    strictStorage = StrictContextStorage.create(previousStorage);\n+    SettableContextStorageProvider.setContextStorage(strictStorage);\n+  }\n+\n+  // In this test we intentionally leak context so need to restore it ourselves, bypassing the\n+  // strict storage.\n+  @AfterEach\n+  void resetContext() {\n+    previousStorage.attach(Context.root());\n+  }\n+\n+  @AfterAll\n+  static void tearDown() {\n+    SettableContextStorageProvider.setContextStorage(previousStorage);\n+  }\n+\n+  // TODO(anuraaga): These rules conflict with error prone so one or the other needs to be\n+  // disabled.\n+  @SuppressWarnings({\"checkstyle:EmptyBlock\", \"checkstyle:WhitespaceAround\"})\n+  @Test\n+  void decorator_close_afterCorrectUsage() {\n+    try (Scope ws = Context.current().with(ANIMAL, \"cat\").makeCurrent()) {\n+      try (Scope ws2 = Context.current().with(ANIMAL, \"dog\").makeCurrent()) {}\n+    }\n+\n+    strictStorage.ensureAllClosed(); // doesn't error\n+  }\n+\n+  @Test\n+  public void doesntDecorateNoop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce936db0336b96d5e3cb4b6ee2c45886b7a79aa6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4ODUzOQ==", "bodyText": "Yeah that makes sense, removed the noop handling", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r515588539", "createdAt": "2020-11-01T07:45:43Z", "author": {"login": "anuraaga"}, "path": "sdk/testing/src/test/java/io/opentelemetry/sdk/testing/context/StrictContextStorageTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.opentelemetry.sdk.testing.context;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+@SuppressWarnings(\"MustBeClosedChecker\")\n+class StrictContextStorageTest {\n+\n+  private static final ContextKey<String> ANIMAL = ContextKey.named(\"animal\");\n+  private static final IdGenerator IDS_GENERATOR = IdGenerator.random();\n+  private static final String TRACE_ID = IDS_GENERATOR.generateTraceId();\n+  private static final String SPAN_ID = IDS_GENERATOR.generateSpanId();\n+\n+  private static final Span SPAN =\n+      Span.wrap(\n+          SpanContext.create(TRACE_ID, SPAN_ID, TraceFlags.getSampled(), TraceState.getDefault()));\n+\n+  private static ContextStorage previousStorage;\n+  private static StrictContextStorage strictStorage;\n+\n+  @BeforeAll\n+  static void setUp() {\n+    previousStorage = SettableContextStorageProvider.getContextStorage();\n+    strictStorage = StrictContextStorage.create(previousStorage);\n+    SettableContextStorageProvider.setContextStorage(strictStorage);\n+  }\n+\n+  // In this test we intentionally leak context so need to restore it ourselves, bypassing the\n+  // strict storage.\n+  @AfterEach\n+  void resetContext() {\n+    previousStorage.attach(Context.root());\n+  }\n+\n+  @AfterAll\n+  static void tearDown() {\n+    SettableContextStorageProvider.setContextStorage(previousStorage);\n+  }\n+\n+  // TODO(anuraaga): These rules conflict with error prone so one or the other needs to be\n+  // disabled.\n+  @SuppressWarnings({\"checkstyle:EmptyBlock\", \"checkstyle:WhitespaceAround\"})\n+  @Test\n+  void decorator_close_afterCorrectUsage() {\n+    try (Scope ws = Context.current().with(ANIMAL, \"cat\").makeCurrent()) {\n+      try (Scope ws2 = Context.current().with(ANIMAL, \"dog\").makeCurrent()) {}\n+    }\n+\n+    strictStorage.ensureAllClosed(); // doesn't error\n+  }\n+\n+  @Test\n+  public void doesntDecorateNoop() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyODE3Ng=="}, "originalCommit": {"oid": "ce936db0336b96d5e3cb4b6ee2c45886b7a79aa6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzQ4MTUzOnYy", "diffSide": "RIGHT", "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMzo1MlrOHsDe0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMzowMzo1MlrOHsDe0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NjQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * >     ContextStorage.set(previousStorage);\n          \n          \n            \n             * >     ContextStorage.set(strictStorage);", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1938#discussion_r515956433", "createdAt": "2020-11-02T13:03:52Z", "author": {"login": "iNikem"}, "path": "sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+// Includes work from:\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.opentelemetry.sdk.testing.context;\n+\n+import static java.lang.Thread.currentThread;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextStorage;\n+import io.opentelemetry.context.Scope;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.LinkedBlockingDeque;\n+\n+/**\n+ * A {@link ContextStorage} which keeps track of opened and closed {@link Scope}s, reporting caller\n+ * information if a {@link Scope} is closed incorrectly or not at all. This is useful in\n+ * instrumentation tests to check whether any scopes leaked.\n+ *\n+ * <pre>{@code\n+ * > class MyInstrumentationTest {\n+ * >   private static ContextStorage previousStorage;\n+ * >   private static StrictContextStorage strictStorage;\n+ * >\n+ * >   @BeforeAll\n+ * >   static void setUp() {\n+ * >     previousStorage = ContextStorage.get()\n+ * >     strictStorage = StrictContextStorage.create(previousStorage);\n+ * >     ContextStorage.set(previousStorage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc0c7f16c54182b89a07e9c60e32fe7a5ebc0d8"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2063, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}