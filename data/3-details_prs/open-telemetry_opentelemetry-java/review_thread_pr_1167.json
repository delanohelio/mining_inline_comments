{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTM2MjI4", "number": 1167, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDozNToxM1rOD5BICw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDozNToxM1rOD5BICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTEzODY3OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDozNToxM1rOGQDQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyODozMFrOGQFniw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4Mzc3Nw==", "bodyText": "Latency is not a good example for this. Memory Usage/ Cpu Usage is better.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1167#discussion_r419483777", "createdAt": "2020-05-04T14:35:13Z", "author": {"login": "bogdandrutu"}, "path": "QUICKSTART.md", "diffHunk": "@@ -271,6 +271,32 @@ BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");\n // Record data\n someWorkCounter.add(123);\n \n+// Alternatively, the user can use the unbounded counter and explicitly\n+// specify the labels set at call-time:\n+counter.add(123, \"Key\", \"SomeWork\");\n+```\n+\n+`Observer` is an additional instrument supporting an asynchronous API and\n+collecting metric data on demand, once per collection interval.\n+\n+The following is an example of observer usage:\n+\n+```java\n+// Build observer e.g. LongObserver\n+LongObserver observer = meter\n+        .observerLongBuilder(\"doWork_latency\")\n+        .setDescription(\"gRPC Latency\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cf6077baae4899ca5913f9b7bce80345c4f9cb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjQ0Mw==", "bodyText": "Fixed. Btw, I took this from the inline docs from LongObserver.java so we should do a follow up to update those ones as well.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1167#discussion_r419522443", "createdAt": "2020-05-04T15:28:30Z", "author": {"login": "carlosalberto"}, "path": "QUICKSTART.md", "diffHunk": "@@ -271,6 +271,32 @@ BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");\n // Record data\n someWorkCounter.add(123);\n \n+// Alternatively, the user can use the unbounded counter and explicitly\n+// specify the labels set at call-time:\n+counter.add(123, \"Key\", \"SomeWork\");\n+```\n+\n+`Observer` is an additional instrument supporting an asynchronous API and\n+collecting metric data on demand, once per collection interval.\n+\n+The following is an example of observer usage:\n+\n+```java\n+// Build observer e.g. LongObserver\n+LongObserver observer = meter\n+        .observerLongBuilder(\"doWork_latency\")\n+        .setDescription(\"gRPC Latency\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4Mzc3Nw=="}, "originalCommit": {"oid": "e6cf6077baae4899ca5913f9b7bce80345c4f9cb"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 890, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}