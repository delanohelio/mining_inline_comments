{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTQzNTcz", "number": 1611, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowMzozNVrOEe-cAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxODowNlrOEmuO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTE1NzE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjowMzozNVrOHK9nGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjo1NzoyOFrOHK_7WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NzI0MQ==", "bodyText": "This is only used in the OpenTracingShim so far and the usage there is questionable (but might actually be helpful for baggage propagation @carlosalberto?), so we could remove this change if we want to minimize the PR. This in turn would remove the changes to DefaultSpan which in turn would remove many usage changes that create a DefaultSpan.\nI initially introduced this getter because I thought it was logical that this should be propagated even for the default span, but now I'm not so sure anymore -- the instrumentation should be responsible for propagating the context, not the span, right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481257241", "createdAt": "2020-09-01T16:03:35Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -283,6 +283,14 @@\n    */\n   SpanContext getContext();\n \n+  /**\n+   * Returns the parent {@code Context} associated with this {@code Span}.\n+   *\n+   * @return the parent {@code Context} associated with this {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NTE5Mw==", "bodyText": "I simplified the PR in e102def, but the state at a7fccf4 is also still interesting, as it provides additional features (and DefaultSpan.createInContext might be an useful addition for unit tests).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481295193", "createdAt": "2020-09-01T16:57:28Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -283,6 +283,14 @@\n    */\n   SpanContext getContext();\n \n+  /**\n+   * Returns the parent {@code Context} associated with this {@code Span}.\n+   *\n+   * @return the parent {@code Context} associated with this {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1NzI0MQ=="}, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTMxNDYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozNzowOFrOHK_Kug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo0MDo0OFrOHL6Q2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc0Ng==", "bodyText": "This is a bug I found when writing this. setNoParent and then calling setParent(Context) will ignore the context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481282746", "createdAt": "2020-09-01T16:37:08Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext(), parent);\n     }\n \n     @Override\n     public NoopSpanBuilder setParent(Context context) {\n       Utils.checkNotNull(context, \"context\");\n-      spanContext = TracingContextUtils.getSpan(context).getContext();\n+      isRootSpan = false; // TODO port this fix to mainline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5MzQxNw==", "bodyText": "worth fixing in a separate PR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481593417", "createdAt": "2020-09-02T03:12:00Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext(), parent);\n     }\n \n     @Override\n     public NoopSpanBuilder setParent(Context context) {\n       Utils.checkNotNull(context, \"context\");\n-      spanContext = TracingContextUtils.getSpan(context).getContext();\n+      isRootSpan = false; // TODO port this fix to mainline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc0Ng=="}, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NDI0Mg==", "bodyText": "I created #1617", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481874242", "createdAt": "2020-09-02T08:18:53Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext(), parent);\n     }\n \n     @Override\n     public NoopSpanBuilder setParent(Context context) {\n       Utils.checkNotNull(context, \"context\");\n-      spanContext = TracingContextUtils.getSpan(context).getContext();\n+      isRootSpan = false; // TODO port this fix to mainline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc0Ng=="}, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1MDk3MA==", "bodyText": "thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r482250970", "createdAt": "2020-09-02T17:40:48Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext(), parent);\n     }\n \n     @Override\n     public NoopSpanBuilder setParent(Context context) {\n       Utils.checkNotNull(context, \"context\");\n-      spanContext = TracingContextUtils.getSpan(context).getContext();\n+      isRootSpan = false; // TODO port this fix to mainline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc0Ng=="}, "originalCommit": {"oid": "8154b328cd463c45b21c3613b466bf308c15d388"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjU4MDM5OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzowNzo1NVrOHLfkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo1MDoxOVrOHSpK_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMzYwMg==", "bodyText": "I don't quite understand what we're getting from the change in this PR. It seems we round-trip through Context API instead of much more efficiently accessing fields directly?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481813602", "createdAt": "2020-09-02T07:07:55Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -508,7 +501,7 @@ private Status getStatusWithDefault() {\n   }\n \n   SpanId getParentSpanId() {\n-    return parentSpanId;\n+    return TracingContextUtils.getSpan(parent).getContext().getSpanId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0NjQyMA==", "bodyText": "This spec change (this PR is an implementation of) has two purposes:\n\nEnable passing arbitrary information between propagators inject, extract and exporters (and in the future, after #856 and #881 the samplers). One may argue that the SpanContext would be better for this, but it's TraceState is very constrained and inefficient to use for this, and it is (per spec!) a final class fully defined in the API (see open-telemetry/opentelemetry-specification#905 (comment)).\nEncourage users to properly propagate the context (it's easier to use Tracer.withSpan than doing the whole dance of TracingContextUtils.contextWithSpan(parentSpan, Context.current() which is intentionally made more cumbersome. For example, see the Actor propagation change which previously contained what I would call a bug, as it lost all information in the Context except for the span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481846420", "createdAt": "2020-09-02T07:47:18Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -508,7 +501,7 @@ private Status getStatusWithDefault() {\n   }\n \n   SpanId getParentSpanId() {\n-    return parentSpanId;\n+    return TracingContextUtils.getSpan(parent).getContext().getSpanId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMzYwMg=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMDk3NQ==", "bodyText": "This no longer applies.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r489310975", "createdAt": "2020-09-16T09:50:19Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -508,7 +501,7 @@ private Status getStatusWithDefault() {\n   }\n \n   SpanId getParentSpanId() {\n-    return parentSpanId;\n+    return TracingContextUtils.getSpan(parent).getContext().getSpanId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxMzYwMg=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjYxNTE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoxNDozN1rOHLf5qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo1Nzo1N1rOHLiJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxOTA1MA==", "bodyText": "For example, for a root span this looks almost like this series of expensive no-ops\nTracingContextUtils.getSpan(TracingContextUtils.withSpan(DefaultSpan.getInvalid(), Context.current())).getContext()\nvs\nDefaultSpan.getInvalid()", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481819050", "createdAt": "2020-09-02T07:14:37Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1NTkxMA==", "bodyText": "Fixed in 0eb9829.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481855910", "createdAt": "2020-09-02T07:57:57Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/DefaultTracer.java", "diffHunk": "@@ -67,43 +67,32 @@ static NoopSpanBuilder create(String spanName) {\n     }\n \n     private boolean isRootSpan;\n-    @Nullable private SpanContext spanContext;\n+    @Nullable private Context parent;\n \n     @Override\n     public Span startSpan() {\n-      if (spanContext == null && !isRootSpan) {\n-        spanContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (parent == null) {\n+        parent = Context.current();\n+      }\n+      if (isRootSpan) {\n+        parent = TracingContextUtils.withSpan(DefaultSpan.getInvalid(), parent);\n       }\n \n-      return spanContext != null && !SpanContext.getInvalid().equals(spanContext)\n-          ? new DefaultSpan(spanContext)\n-          : DefaultSpan.getInvalid();\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(Span parent) {\n-      Utils.checkNotNull(parent, \"parent\");\n-      spanContext = parent.getContext();\n-      return this;\n-    }\n-\n-    @Override\n-    public NoopSpanBuilder setParent(SpanContext remoteParent) {\n-      Utils.checkNotNull(remoteParent, \"remoteParent\");\n-      spanContext = remoteParent;\n-      return this;\n+      return new DefaultSpan(TracingContextUtils.getSpan(parent).getContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgxOTA1MA=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjYyNDQwOnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzoxNjoyMVrOHLf_Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTo0OTo0N1rOHSpJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ==", "bodyText": "Context isn't data, it's a way to move data around in-process, not out-of-process", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481820519", "createdAt": "2020-09-02T07:16:21Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1MTY3OA==", "bodyText": "I disagree. The inflexibility of SpanContext/TraceState leaves no other choice to transmit nonstandard information from propagators to exporters. See #1611 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481851678", "createdAt": "2020-09-02T07:53:12Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg1OTEwNQ==", "bodyText": "I guess they are data, but not span data which may be what's confusing me. The context could have who knows what, maybe from the user, or some other library, and much of it wouldn't even be related to the span. I don't think it's a good idea to send everything in the Context to the exporter, Context is a bag for known values. If SpanContext had List<Object> that would make much more sense since it's know to be span data for sure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481859105", "createdAt": "2020-09-02T08:01:33Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3NjU3MQ==", "bodyText": "If SpanContext had List<Object> that would make much more sense since it's know to be span data for sure.\n\nI actually do like that idea. Or probably a io.grpc.Context on the SpanContext instead since it has a nice API for retrieving keys in a type-safe manner / is basically a Map<Identifier, Object> on steroids.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481876571", "createdAt": "2020-09-02T08:21:26Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg3ODM5MQ==", "bodyText": "The context could have who knows what, maybe from the user, or some other library, and much of it wouldn't even be related to the span. I don't think it's a good idea to send everything in the Context to the exporter\n\nI don't see a problem with that though. The exporter would just retrieve any values it knows (often only the parent span context) and ignore the rest.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r481878391", "createdAt": "2020-09-02T08:23:26Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMDU3OQ==", "bodyText": "Context is no longer considered storeable data now.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r489310579", "createdAt": "2020-09-16T09:49:47Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/data/SpanData.java", "diffHunk": "@@ -77,6 +78,15 @@\n    */\n   SpanId getParentSpanId();\n \n+  /**\n+   * Returns the parent {@code Context}. If the {@code Span} is a root {@code Span}, the Context\n+   * will contain no Span or an invalid span.\n+   *\n+   * @return the parent {@code SpanId} or an invalid SpanId if this is a root {@code Span}.\n+   * @since 0.8.0\n+   */\n+  Context getParent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgyMDUxOQ=="}, "originalCommit": {"oid": "5500b81d50b13fe508c6c3ac5489410aa21004eb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDA4NzgyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "isResolved": false, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo1ODowOVrOHW38sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzozOTo1OFrOHYEEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ==", "bodyText": "youch. this API sure is ugly! Remind me again how this is going to make things easier/better for our users?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493747379", "createdAt": "2020-09-23T16:58:09Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NTY5Ng==", "bodyText": "This is a unit test. Normally you would just call setNoParent.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493775696", "createdAt": "2020-09-23T17:45:04Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MjM5NQ==", "bodyText": "fair enough, but I think having to do parenting via the TCU is going to be pretty counter-intuitive to most users. :(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493792395", "createdAt": "2020-09-23T18:12:38Z", "author": {"login": "jkwatson"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NzI4NA==", "bodyText": "I fully agree, but at the same time, I don't think users should normally do that. Usually you would just use the implicit current parent, or sometimes you need to capture a context with Context.current() and forward that to somewhere else. If you start a span at one thread and need to continue it at another thread while not setting it as active in the current thread is the only place you would need TracingContextUtils. I also think there should be some may to make that more easy. I could imagine span.inCurrentContext() (Java 8 default methods?), or TracingContextUtils.spanInCurrent(span) to make this easier.\n\nRemind me again how this is going to make things easier/better for our users?\n\nAs you said, using TracingContextUtils is rather unintuitive, and thus I think most users did not do it, they just passed around spans without the remaining context. However, a custom propagator should be able to set a value in the context in extract and rely on it still being available in inject.\nBTW, using inject is a place where you already have to often muck around with TracingContextUtils currently.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493797284", "createdAt": "2020-09-23T18:21:12Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMjkyNw==", "bodyText": "Is it safe to assume the implicit current parent is accurate?\nFor instance, when dealing with asynchronous methods the thread being executed on is usually not the same thread that might have initiated/received the original request. In that situation, the implicit current parent from ThreadLocal is more than likely not the parent you want", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494502927", "createdAt": "2020-09-24T17:50:50Z", "author": {"login": "kenfinnigan"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDA1OQ==", "bodyText": "No, in that case you need to capture a Context (ideally you can use Context.current()) at he parent side. There is no fundamental change here with this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494510059", "createdAt": "2020-09-24T18:03:21Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxNzYwMA==", "bodyText": "If the APIs are geared towards users utilizing \"implicit\" parents, is it defined anywhere in what situations it results in problems and alternatives should be implemented, such as you describe?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494517600", "createdAt": "2020-09-24T18:16:46Z", "author": {"login": "kenfinnigan"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NTc5Mw==", "bodyText": "If the APIs are geared towards users utilizing \"implicit\" parents\n\nHmm, I'm not sure yet why you think the API is more geared towards implicit parent's than before? I mean, I agree that it is a bit more cumbersome to have a span that was not active be the parent span at another thread, but the difference is only this:\nSpan capturedParent = span;\nvs.\nContext capturedParent = TracingContextUtils.withSpan(span, Context.current());\n\nIn case the parent is active on the original thread, you can even do\nContext capturedParent = Context.current();\n\n\nis it defined anywhere in what situations it results in problems\n\nIt currently uses grpc Context, so unless some other component does some automatic in-process context propagation, it is just a thread local. I guess you should only use an explicit parent if (a) you extract one from a remote process or (b) your parent comes from a remote thread, i.e. this is the first span that continues some asynchronous operation in another \"execution context\" (think thread) than the logical parent span.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494585793", "createdAt": "2020-09-24T20:17:39Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NjUwNg==", "bodyText": "Maybe we can provide some convenience function (default interface implementation?), so one can do  Context capturedParent = span.withCurrentContext(). But it would be interesting how common the cases where you would need this even are.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494586506", "createdAt": "2020-09-24T20:19:07Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2ODcwNw==", "bodyText": "Personally, it's a lot messier, but more importantly way less obvious that that's what is needed to achieve the desired result.\nWith respect to a default interface implementation, that wouldn't be possible with the JDK 7 requirement, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494668707", "createdAt": "2020-09-24T23:42:17Z", "author": {"login": "kenfinnigan"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MzUzNg==", "bodyText": "(FWIW, we need more convenience functions in TracingContextUtils, or in whatever new name it ends up having ;) )", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494683536", "createdAt": "2020-09-25T00:36:16Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3NjA3OA==", "bodyText": "@kenfinnigan Java 7 was dropped recently, Java 8 is now required.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494776078", "createdAt": "2020-09-25T06:34:22Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5NDQ1Mg==", "bodyText": "Thanks @Oberon00, don't follow things for a few weeks, and everything changes!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494994452", "createdAt": "2020-09-25T13:39:58Z", "author": {"login": "kenfinnigan"}, "path": "api/src/test/java/io/opentelemetry/trace/SpanBuilderTest.java", "diffHunk": "@@ -32,8 +33,8 @@\n   void doNotCrash_NoopImplementation() {\n     Span.Builder spanBuilder = tracer.spanBuilder(\"MySpanName\");\n     spanBuilder.setSpanKind(Kind.SERVER);\n-    spanBuilder.setParent(DefaultSpan.getInvalid());\n-    spanBuilder.setParent(DefaultSpan.getInvalid().getContext());\n+    spanBuilder.setParent(TracingContextUtils.withSpan(DefaultSpan.create(null), Context.ROOT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NzM3OQ=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDEwOTk4OnYy", "diffSide": "RIGHT", "path": "sdk_extensions/testbed/src/test/java/io/opentelemetry/sdk/extensions/trace/testbed/concurrentcommonrequesthandler/RequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzowNDowMlrOHW4LGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1OToyM1rOHXh2nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MTA2Nw==", "bodyText": "I wonder if it might be better to rename the Context class in this package to TestContext or something, so we don't have the name collision in here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493751067", "createdAt": "2020-09-23T17:04:02Z", "author": {"login": "jkwatson"}, "path": "sdk_extensions/testbed/src/test/java/io/opentelemetry/sdk/extensions/trace/testbed/concurrentcommonrequesthandler/RequestHandler.java", "diffHunk": "@@ -30,13 +29,13 @@\n \n   private final Tracer tracer;\n \n-  private final SpanContext parentContext;\n+  private final io.grpc.Context parentContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzk0OA==", "bodyText": "I renamed it to RequestHandlerContext in 6eea962. Is that name OK?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494433948", "createdAt": "2020-09-24T15:59:23Z", "author": {"login": "Oberon00"}, "path": "sdk_extensions/testbed/src/test/java/io/opentelemetry/sdk/extensions/trace/testbed/concurrentcommonrequesthandler/RequestHandler.java", "diffHunk": "@@ -30,13 +29,13 @@\n \n   private final Tracer tracer;\n \n-  private final SpanContext parentContext;\n+  private final io.grpc.Context parentContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MTA2Nw=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM4ODMzOnYy", "diffSide": "RIGHT", "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxODowNlrOHW65Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1ODo1MVrOHXh1FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NTY0Nw==", "bodyText": "can you explain the TODO here? Do we need an issue to track a change? I'd prefer not to leave a cryptic TODO in the code like this, since it's not clear what the issue is.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493795647", "createdAt": "2020-09-23T18:18:06Z", "author": {"login": "jkwatson"}, "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "diffHunk": "@@ -192,11 +195,15 @@ public Span start() {\n     if (ignoreActiveSpan && parentSpan == null && parentSpanContext == null) {\n       builder.setNoParent();\n     } else if (parentSpan != null) {\n-      builder.setParent(parentSpan.getSpan());\n+      // Note: We ignore the (potentially stored) parentSpan's (grand)parent context here.\n+      builder.setParent(TracingContextUtils.withSpan(parentSpan.getSpan(), Context.current()));\n       SpanContextShim contextShim = spanContextTable().get(parentSpan);\n       distContext = contextShim == null ? null : contextShim.getCorrelationContext();\n     } else if (parentSpanContext != null) {\n-      builder.setParent(parentSpanContext.getSpanContext());\n+      // TODO: This might be wonky", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5Nzc4MA==", "bodyText": "I would need @carlosalberto to check this. It just felt a bit strange, but I don't have enough knowledge of the OpenTracing shim to verify if there is a problem.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493797780", "createdAt": "2020-09-23T18:22:01Z", "author": {"login": "Oberon00"}, "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "diffHunk": "@@ -192,11 +195,15 @@ public Span start() {\n     if (ignoreActiveSpan && parentSpan == null && parentSpanContext == null) {\n       builder.setNoParent();\n     } else if (parentSpan != null) {\n-      builder.setParent(parentSpan.getSpan());\n+      // Note: We ignore the (potentially stored) parentSpan's (grand)parent context here.\n+      builder.setParent(TracingContextUtils.withSpan(parentSpan.getSpan(), Context.current()));\n       SpanContextShim contextShim = spanContextTable().get(parentSpan);\n       distContext = contextShim == null ? null : contextShim.getCorrelationContext();\n     } else if (parentSpanContext != null) {\n-      builder.setParent(parentSpanContext.getSpanContext());\n+      // TODO: This might be wonky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NTY0Nw=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5ODYwOQ==", "bodyText": "Maybe SpanContextShim should store a Context.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r493798609", "createdAt": "2020-09-23T18:23:26Z", "author": {"login": "Oberon00"}, "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "diffHunk": "@@ -192,11 +195,15 @@ public Span start() {\n     if (ignoreActiveSpan && parentSpan == null && parentSpanContext == null) {\n       builder.setNoParent();\n     } else if (parentSpan != null) {\n-      builder.setParent(parentSpan.getSpan());\n+      // Note: We ignore the (potentially stored) parentSpan's (grand)parent context here.\n+      builder.setParent(TracingContextUtils.withSpan(parentSpan.getSpan(), Context.current()));\n       SpanContextShim contextShim = spanContextTable().get(parentSpan);\n       distContext = contextShim == null ? null : contextShim.getCorrelationContext();\n     } else if (parentSpanContext != null) {\n-      builder.setParent(parentSpanContext.getSpanContext());\n+      // TODO: This might be wonky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NTY0Nw=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMTY5NA==", "bodyText": "I created #1699 and will change this to use ROOT instead of current (that way later changes are less likely to be breaking).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494421694", "createdAt": "2020-09-24T15:42:20Z", "author": {"login": "Oberon00"}, "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "diffHunk": "@@ -192,11 +195,15 @@ public Span start() {\n     if (ignoreActiveSpan && parentSpan == null && parentSpanContext == null) {\n       builder.setNoParent();\n     } else if (parentSpan != null) {\n-      builder.setParent(parentSpan.getSpan());\n+      // Note: We ignore the (potentially stored) parentSpan's (grand)parent context here.\n+      builder.setParent(TracingContextUtils.withSpan(parentSpan.getSpan(), Context.current()));\n       SpanContextShim contextShim = spanContextTable().get(parentSpan);\n       distContext = contextShim == null ? null : contextShim.getCorrelationContext();\n     } else if (parentSpanContext != null) {\n-      builder.setParent(parentSpanContext.getSpanContext());\n+      // TODO: This might be wonky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NTY0Nw=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzU1Nw==", "bodyText": "Done in 9f618e0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1611#discussion_r494433557", "createdAt": "2020-09-24T15:58:51Z", "author": {"login": "Oberon00"}, "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/SpanBuilderShim.java", "diffHunk": "@@ -192,11 +195,15 @@ public Span start() {\n     if (ignoreActiveSpan && parentSpan == null && parentSpanContext == null) {\n       builder.setNoParent();\n     } else if (parentSpan != null) {\n-      builder.setParent(parentSpan.getSpan());\n+      // Note: We ignore the (potentially stored) parentSpan's (grand)parent context here.\n+      builder.setParent(TracingContextUtils.withSpan(parentSpan.getSpan(), Context.current()));\n       SpanContextShim contextShim = spanContextTable().get(parentSpan);\n       distContext = contextShim == null ? null : contextShim.getCorrelationContext();\n     } else if (parentSpanContext != null) {\n-      builder.setParent(parentSpanContext.getSpanContext());\n+      // TODO: This might be wonky", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5NTY0Nw=="}, "originalCommit": {"oid": "e8dc898e21cbc1c7428ee0383824e19fba3be9ba"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1392, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}