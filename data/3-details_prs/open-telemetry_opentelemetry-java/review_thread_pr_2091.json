{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDE2NTEz", "number": 2091, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNDo0OVrOE6pgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNDo0OVrOE6pgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTMyODU5OnYy", "diffSide": "RIGHT", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNDo0OVrOH12IEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzowNjo0MFrOH2K22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ==", "bodyText": "allOf() maybe?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526223379", "createdAt": "2020-11-18T16:24:49Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzc1Mw==", "bodyText": "or ofAll() ?  \ud83d\ude06", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526223753", "createdAt": "2020-11-18T16:25:19Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ=="}, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNjQ3OA==", "bodyText": "composite or multi, invokeEach", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526226478", "createdAt": "2020-11-18T16:28:54Z", "author": {"login": "Oberon00"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ=="}, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0NjM0NQ==", "bodyText": "I like composite or composedOf", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526246345", "createdAt": "2020-11-18T16:54:09Z", "author": {"login": "jkwatson"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ=="}, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4OTcwNw==", "bodyText": "composite or multi \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526489707", "createdAt": "2020-11-18T23:25:19Z", "author": {"login": "carlosalberto"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ=="}, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU2MzAzMw==", "bodyText": "composite has votes from everyone including me so there we go :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2091#discussion_r526563033", "createdAt": "2020-11-19T03:06:40Z", "author": {"login": "anuraaga"}, "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/SpanProcessor.java", "diffHunk": "@@ -8,12 +8,37 @@\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.sdk.common.CompletableResultCode;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * SpanProcessor is the interface {@code TracerSdk} uses to allow synchronous hooks for when a\n  * {@code Span} is started or when a {@code Span} is ended.\n  */\n public interface SpanProcessor {\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  static SpanProcessor delegating(SpanProcessor... processors) {\n+    return delegating(Arrays.asList(processors));\n+  }\n+\n+  /**\n+   * Returns a {@link SpanProcessor} which simply delegates all processing to the {@code processors}\n+   * in order.\n+   */\n+  @SuppressWarnings(\"deprecation\")\n+  static SpanProcessor delegating(Iterable<SpanProcessor> processors) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzM3OQ=="}, "originalCommit": {"oid": "93706368f57685d0ef3019a7a05e84776c7d5e19"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}