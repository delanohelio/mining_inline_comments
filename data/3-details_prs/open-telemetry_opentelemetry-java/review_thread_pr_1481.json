{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4OTIyOTAx", "number": 1481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNzoxN1rOETjviA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNzoxN1rOETjviA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTQ0MDA4OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNzoxN1rOG5W4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1NzoxNVrOG584NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw==", "bodyText": "the other propagators log with info\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  logger.warning(\n          \n          \n            \n                  logger.info(", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r462796947", "createdAt": "2020-07-30T07:17:17Z", "author": {"login": "trask"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNDAwOQ==", "bodyText": "Maybe we should change them? If there is a non-empty header, but its format is wrong, shouldn't this be WARN?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r462804009", "createdAt": "2020-07-30T07:31:32Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNTgwMA==", "bodyText": "If upstream sends a bad header, I'd be unhappy to have warning logs spammed without much I can do about it. In general, I'd say tracing should avoid spamming logs as much as possible (even info is a bit questionable, warning much more).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r462815800", "createdAt": "2020-07-30T07:53:46Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzcxMQ==", "bodyText": "But without logs, how do you know about that bad header?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r462847711", "createdAt": "2020-07-30T08:49:18Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMDEwNA==", "bodyText": "I'd generally recommend metrics or using a lower than default level which can be enabled for tests.\nLog spam does have reasonable potential to bring down an app and no one likes it when observability kills the app (even if it's an issue of configuring logs in a scalable way etc).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r462910104", "createdAt": "2020-07-30T10:43:28Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzQ5NA==", "bodyText": "Yes, definitely. If an unknown upstream actor can creating an arbitrary amount of log spam just by setting some bad headers, that's a DOS attack waiting to happen.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r463193494", "createdAt": "2020-07-30T18:34:07Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTQ0NA==", "bodyText": "Changed all log levels to fine", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1481#discussion_r463419444", "createdAt": "2020-07-31T05:57:15Z", "author": {"login": "iNikem"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -49,8 +49,11 @@\n   private static <C> SpanContext getSpanContextFromMultipleHeaders(\n       C carrier, HttpTextFormat.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n+    if (StringUtils.isNullOrEmpty(traceId)) {\n+      return SpanContext.getInvalid();\n+    }\n     if (!Common.isTraceIdValid(traceId)) {\n-      logger.info(\n+      logger.warning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5Njk0Nw=="}, "originalCommit": {"oid": "6ef6883293f70f243b606fc1d817d26a70e9cc1b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1558, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}