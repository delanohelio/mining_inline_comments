{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Njc3NzEx", "number": 1193, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDozOToyN1rOD6_PRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowMTo0NFrOD7R0ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTgwMTAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDozOToyN1rOGTExaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDozOToyN1rOGTExaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDMxNQ==", "bodyText": "Update comment?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654315", "createdAt": "2020-05-10T14:39:27Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTgwMjQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDo0MDo0N1rOGTEyGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozNzozMFrOGTUj5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ==", "bodyText": "Not sure I understand this logic? Do we have a test for this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654489", "createdAt": "2020-05-10T14:40:47Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4OTY2NA==", "bodyText": "I keep it as it was previously. This basically guarantees the first bit of idLo to be zero. However, I don't think this is the intended behavior.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422789664", "createdAt": "2020-05-11T05:31:15Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ=="}, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMzU0NA==", "bodyText": "I saw the problem in the probability sampler we compare this with a positive number so any negative number will pass that condition, so we don't have the guarantees of the rate. Essentially we need to change a bit the probability sampler if we return negative values as well", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422803544", "createdAt": "2020-05-11T06:13:29Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ=="}, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwODI0Mw==", "bodyText": "You're right! I'll take a look at it!", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422808243", "createdAt": "2020-05-11T06:25:46Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ=="}, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMjk5OA==", "bodyText": "The Probability sampler already takes the abs value of the result of getTraceRandomPart(). Therefore, we don't need to change its logic", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422912998", "createdAt": "2020-05-11T09:37:30Z", "author": {"login": "thisthat"}, "path": "api/src/main/java/io/opentelemetry/trace/TraceId.java", "diffHunk": "@@ -210,8 +210,8 @@ public boolean equals(@Nullable Object obj) {\n    *\n    * @return the lower 8 bytes of the trace-id as a long value, assuming little-endian order.\n    */\n-  public long getLowerLong() {\n-    return (idHi < 0) ? -idHi : idHi;\n+  public long getTraceRandomPart() {\n+    return (idLo < 0) ? -idLo : idLo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDQ4OQ=="}, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTgwMjkwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDo0MToyNFrOGTEyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDo0MToyNFrOGTEyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NDU1Ng==", "bodyText": "s/testCorrectGetRandomTracePart/getRandomTracePart\nWe usually should test the \"correct\" thing :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422654556", "createdAt": "2020-05-10T14:41:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,13 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testCorrectGetRandomTracePart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTgyNTY3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNTowNTowN1rOGTE9mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNToyODo0NFrOGTM_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NzQzNQ==", "bodyText": "We need to make sure every library applies the same logic and extract correctly the random part. This is important because if 2 libraries are configured with the same probability we need both to sample or not sample a given trace id.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422657435", "createdAt": "2020-05-10T15:05:07Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -210,7 +210,7 @@ public final Decision shouldSample(\n       // while allowing for a (very) small chance of *not* sampling if the id == Long.MAX_VALUE.\n       // This is considered a reasonable tradeoff for the simplicity/performance requirements (this\n       // code is executed in-line for every Span creation).\n-      return Math.abs(traceId.getLowerLong()) < getIdUpperBound()\n+      return Math.abs(traceId.getTraceRandomPart()) < getIdUpperBound()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4ODg4Mw==", "bodyText": "I was looking at other languages how they implemented this, and it's all over the place. Looking at the spec, the only indication is to use part of the trace for the decision.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422788883", "createdAt": "2020-05-11T05:28:44Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -210,7 +210,7 @@ public final Decision shouldSample(\n       // while allowing for a (very) small chance of *not* sampling if the id == Long.MAX_VALUE.\n       // This is considered a reasonable tradeoff for the simplicity/performance requirements (this\n       // code is executed in-line for every Span creation).\n-      return Math.abs(traceId.getLowerLong()) < getIdUpperBound()\n+      return Math.abs(traceId.getTraceRandomPart()) < getIdUpperBound()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NzQzNQ=="}, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTgzMzAyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToxMzoxMFrOGTFBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToxMzoxMFrOGTFBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODQxNQ==", "bodyText": "It took me few minutes to check that this is the correct expectation, I would suggest to put a 0 in front of the 9 so having something like 0x090A0B0C0D0E0F00L so I have 16 hex characters and also a easier way to map every 2 hex characters from here to the bytes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r422658415", "createdAt": "2020-05-10T15:13:10Z", "author": {"login": "bogdandrutu"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,13 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testCorrectGetRandomTracePart() {\n+    byte[] id = {\n+      0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0\n+    };\n+    TraceId traceid = TraceId.fromBytes(id, 0);\n+    assertThat(traceid.getTraceRandomPart()).isEqualTo(0x90A0B0C0D0E0F00L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e292c6779a0d56ab1e698f024f547fc3df9a3d50"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDg0NTM5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowMTo0NFrOGTgSFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTowNzoyOVrOGTgiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNTA0NQ==", "bodyText": "We also have the TraceId ctor taking two longs. Could we add a test for that one as well?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r423105045", "createdAt": "2020-05-11T15:01:44Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,36 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testGetRandomTracePart() {\n+    byte[] id = {\n+      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00\n+    };\n+    TraceId traceid = TraceId.fromBytes(id, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwOTE0Ng==", "bodyText": "Never mind, saw that Bogdan doesn't want us to use that ctor. Resolving.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1193#discussion_r423109146", "createdAt": "2020-05-11T15:07:29Z", "author": {"login": "carlosalberto"}, "path": "api/src/test/java/io/opentelemetry/trace/TraceIdTest.java", "diffHunk": "@@ -50,9 +50,36 @@ public void isValid() {\n   }\n \n   @Test\n-  public void getLowerLong() {\n-    assertThat(first.getLowerLong()).isEqualTo(0);\n-    assertThat(second.getLowerLong()).isEqualTo(-0xFF00000000000000L);\n+  public void testGetRandomTracePart() {\n+    byte[] id = {\n+      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00\n+    };\n+    TraceId traceid = TraceId.fromBytes(id, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNTA0NQ=="}, "originalCommit": {"oid": "a6123205b71ddace2f1a46af4231c6305f180284"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 643, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}