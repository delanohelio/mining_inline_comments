{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTkzMDQ4", "number": 956, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0MTo0M1rODlHoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NjoxMVrODlHu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ4ODQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/Counter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0MTo0M1rOFx08ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0MTo0M1rOFx08ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MjAzNQ==", "bodyText": "Having a wildcard type in a public API feels very user-hostile. What would the user do with this?  Should this return Counter<H>?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/956#discussion_r387792035", "createdAt": "2020-03-04T16:41:43Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Counter.java", "diffHunk": "@@ -37,6 +51,9 @@\n      * @param monotonic {@code true} only positive values are expected.\n      * @return this.\n      */\n-    B setMonotonic(boolean monotonic);\n+    Builder setMonotonic(boolean monotonic);\n+\n+    @Override\n+    Counter<?> build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbff40d6ac36c80c49b48d8de98227d63392c764"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjUwMjU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/Measure.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NToyMVrOFx1Fjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyODo0OFrOFz6A3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDMxOQ==", "bodyText": "same comment about wildcard return values", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/956#discussion_r387794319", "createdAt": "2020-03-04T16:45:21Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Measure.java", "diffHunk": "@@ -37,6 +51,9 @@\n      * @param absolute {@code true} only positive values are expected.\n      * @return this.\n      */\n-    B setAbsolute(boolean absolute);\n+    Builder setAbsolute(boolean absolute);\n+\n+    @Override\n+    Measure<?> build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbff40d6ac36c80c49b48d8de98227d63392c764"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MjU5MQ==", "bodyText": "This is not directly used by any user. They will use LongMeasure or DoubleMeasure, it is here to make sure we always override build.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/956#discussion_r389962591", "createdAt": "2020-03-09T21:08:18Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/metrics/Measure.java", "diffHunk": "@@ -37,6 +51,9 @@\n      * @param absolute {@code true} only positive values are expected.\n      * @return this.\n      */\n-    B setAbsolute(boolean absolute);\n+    Builder setAbsolute(boolean absolute);\n+\n+    @Override\n+    Measure<?> build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDMxOQ=="}, "originalCommit": {"oid": "cbff40d6ac36c80c49b48d8de98227d63392c764"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MjE5MA==", "bodyText": "Let's go with this for now. It feels pretty kludgy; I'll try to come up with something a bit cleaner in the future.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/956#discussion_r389972190", "createdAt": "2020-03-09T21:28:48Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Measure.java", "diffHunk": "@@ -37,6 +51,9 @@\n      * @param absolute {@code true} only positive values are expected.\n      * @return this.\n      */\n-    B setAbsolute(boolean absolute);\n+    Builder setAbsolute(boolean absolute);\n+\n+    @Override\n+    Measure<?> build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDMxOQ=="}, "originalCommit": {"oid": "cbff40d6ac36c80c49b48d8de98227d63392c764"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjUwNTkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/metrics/Observer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NjoxMVrOFx1Hsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NjoxMVrOFx1Hsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDg2Ng==", "bodyText": "ditto", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/956#discussion_r387794866", "createdAt": "2020-03-04T16:46:11Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/metrics/Observer.java", "diffHunk": "@@ -54,6 +69,9 @@\n      * @param monotonic {@code true} successive values are expected to rise monotonically.\n      * @return this.\n      */\n-    B setMonotonic(boolean monotonic);\n+    Builder setMonotonic(boolean monotonic);\n+\n+    @Override\n+    Observer<?> build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbff40d6ac36c80c49b48d8de98227d63392c764"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 946, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}