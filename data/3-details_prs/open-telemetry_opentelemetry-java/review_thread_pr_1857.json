{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MDIzODAy", "number": 1857, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoxMlrOEw1CPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyODowM1rOEw2TXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM2MDI4OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoxMlrOHmoH-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoxMlrOHmoH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            should not setup your own.\n          \n          \n            \n            should not set up your own.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510265337", "createdAt": "2020-10-22T15:42:12Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -31,10 +32,34 @@ configuration must be provided by **Applications** which should also depend on t\n libraries will obtain a real implementation only if the user application is configured for it. For\n more details, check out the [Library Guidelines].\n \n+## Setting up the SDK\n+\n+To get started, setup the OpenTelemetry SDK - note that if you are using a different implementation \n+of the OpenTelemetry API, you should refer to the configuration instructions for that SDK. Also, if\n+you are using the Auto-Instrumentation Agent, the SDK is configured by the agent itself and you\n+should not setup your own.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM2MTAxOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoyMVrOHmoIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoyMVrOHmoIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To get started, setup the OpenTelemetry SDK - note that if you are using a different implementation \n          \n          \n            \n            To get started, set up the OpenTelemetry SDK - note that if you are using a different implementation", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510265450", "createdAt": "2020-10-22T15:42:21Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -31,10 +32,34 @@ configuration must be provided by **Applications** which should also depend on t\n libraries will obtain a real implementation only if the user application is configured for it. For\n more details, check out the [Library Guidelines].\n \n+## Setting up the SDK\n+\n+To get started, setup the OpenTelemetry SDK - note that if you are using a different implementation ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM2MjM0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjozOVrOHmoJOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjozOVrOHmoJOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can setup a basic configuration that exports traces to a logging stream like this:\n          \n          \n            \n            You can set up a basic configuration that exports traces to a logging stream like this:", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510265657", "createdAt": "2020-10-22T15:42:39Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -31,10 +32,34 @@ configuration must be provided by **Applications** which should also depend on t\n libraries will obtain a real implementation only if the user application is configured for it. For\n more details, check out the [Library Guidelines].\n \n+## Setting up the SDK\n+\n+To get started, setup the OpenTelemetry SDK - note that if you are using a different implementation \n+of the OpenTelemetry API, you should refer to the configuration instructions for that SDK. Also, if\n+you are using the Auto-Instrumentation Agent, the SDK is configured by the agent itself and you\n+should not setup your own.\n+\n+You can setup a basic configuration that exports traces to a logging stream like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM2NzQzOnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Mzo0N1rOHmoMag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Mzo0N1rOHmoMag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NjQ3NA==", "bodyText": "I'd make it clear that this is only if you haven't manually installed an SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510266474", "createdAt": "2020-10-22T15:43:47Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -31,10 +32,34 @@ configuration must be provided by **Applications** which should also depend on t\n libraries will obtain a real implementation only if the user application is configured for it. For\n more details, check out the [Library Guidelines].\n \n+## Setting up the SDK\n+\n+To get started, setup the OpenTelemetry SDK - note that if you are using a different implementation \n+of the OpenTelemetry API, you should refer to the configuration instructions for that SDK. Also, if\n+you are using the Auto-Instrumentation Agent, the SDK is configured by the agent itself and you\n+should not setup your own.\n+\n+You can setup a basic configuration that exports traces to a logging stream like this:\n+\n+```java\n+OpenTelemetry openTelemetry = OpenTelemetrySdk.builder()\n+    .setTracerProvider(\n+        TracerSdkProvider.builder()\n+            .setSpanProcessors(\n+                SimpleSpanProcessor.builder(new LoggingSpanExporter()).build())\n+            .build())\n+    .build();\n+```\n+\n+Note that a preconfigured `OpenTelemetry` can be retrieved by calling `OpenTelemetry.get()`. If you\n+are using the Auto-Instrumentation Agent, it will be the `OpenTelemetry` that the agent configured.\n+Otherwise, it will enable propagation of context to remote servers but will not export any spans.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQ3NjU0OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjowNjo1N1rOHmpPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNDowMToxM1rOHm7YIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MzYzNQ==", "bodyText": "tracer.withSpan is gone. This should be Context.with(span).makeCurrent(), right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510283635", "createdAt": "2020-10-22T16:06:57Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -43,15 +68,15 @@ monitored. More information is available in the specification chapter [Obtaining\n \n ```java\n Tracer tracer =\n-    OpenTelemetry.getTracer(\"instrumentation-library-name\",\"semver:1.0.0\");\n+    openTelemetry.getTracer(\"instrumentation-library-name\",\"semver:1.0.0\");\n ```\n \n ### Create basic Span\n To create a basic span, you only need to specify the name of the span.\n The start and end time of the span is automatically set by the OpenTelemetry SDK.\n ```java\n Span span = tracer.spanBuilder(\"my span\").startSpan();\n-try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n+try (Scope scope = tracer.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4MDc3MQ==", "bodyText": "And something else soon - I'm taking this change out of this PR anyways since we'd want to do it with the next release, will address drift then.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510580771", "createdAt": "2020-10-23T04:01:13Z", "author": {"login": "anuraaga"}, "path": "QUICKSTART.md", "diffHunk": "@@ -43,15 +68,15 @@ monitored. More information is available in the specification chapter [Obtaining\n \n ```java\n Tracer tracer =\n-    OpenTelemetry.getTracer(\"instrumentation-library-name\",\"semver:1.0.0\");\n+    openTelemetry.getTracer(\"instrumentation-library-name\",\"semver:1.0.0\");\n ```\n \n ### Create basic Span\n To create a basic span, you only need to specify the name of the span.\n The start and end time of the span is automatically set by the OpenTelemetry SDK.\n ```java\n Span span = tracer.spanBuilder(\"my span\").startSpan();\n-try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n+try (Scope scope = tracer.withSpan(span)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MzYzNQ=="}, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQ4MzY1OnYy", "diffSide": "RIGHT", "path": "QUICKSTART.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjowODozNlrOHmpTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo1NDoxNVrOHm7SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4NDc0Mw==", "bodyText": "was this supposed to sneak into this PR?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510284743", "createdAt": "2020-10-22T16:08:36Z", "author": {"login": "jkwatson"}, "path": "QUICKSTART.md", "diffHunk": "@@ -421,17 +434,23 @@ builder.readEnvironmentVariables()\n builder.setMaxNumberOfLinks(10);\n \n // Update the resulting TraceConfig instance\n-OpenTelemetrySdk.getTracerManagement().updateActiveTraceConfig(builder.build());\n+OpenTelemetry openTelemetry = OpenTelemetrySdk.builder()\n+    .setTracerProvider(\n+        TracerSdkProvider.builder()\n+            ...\n+            .setTraceConfig(builder.build())\n+        .build())\n+    .build();\n ```\n \n Supported system properties and environment variables:\n \n | System property                  | Environment variable             | Purpose                                                                                             | \n |----------------------------------|----------------------------------|-----------------------------------------------------------------------------------------------------|       \n | otel.config.sampler.probability  | OTEL_CONFIG_SAMPLER_PROBABILITY  | Sampler which is used when constructing a new span (default: 1)                                     |                        \n-| otel.span.attribute.count.limit  | OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT  | Max number of attributes per span, extra will be dropped (default: 1000)                              |                        \n-| otel.span.event.count.limit      | OTEL_SPAN_EVENT_COUNT_LIMIT      | Max number of Events per span, extra will be dropped (default: 1000)                                 |                        \n-| otel.span.link.count.limit       | OTEL_SPAN_LINK_COUNT_LIMIT       | Max number of Link entries per span, extra will be dropped (default: 1000)                            |\n+| otel.config.max.attrs            | OTEL_CONFIG_MAX_ATTRS            | Max number of attributes per span, extra will be dropped (default: 32)                              |                        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3OTIzMg==", "bodyText": "Copied from my previous PR, obviously not a great idea :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510579232", "createdAt": "2020-10-23T03:54:15Z", "author": {"login": "anuraaga"}, "path": "QUICKSTART.md", "diffHunk": "@@ -421,17 +434,23 @@ builder.readEnvironmentVariables()\n builder.setMaxNumberOfLinks(10);\n \n // Update the resulting TraceConfig instance\n-OpenTelemetrySdk.getTracerManagement().updateActiveTraceConfig(builder.build());\n+OpenTelemetry openTelemetry = OpenTelemetrySdk.builder()\n+    .setTracerProvider(\n+        TracerSdkProvider.builder()\n+            ...\n+            .setTraceConfig(builder.build())\n+        .build())\n+    .build();\n ```\n \n Supported system properties and environment variables:\n \n | System property                  | Environment variable             | Purpose                                                                                             | \n |----------------------------------|----------------------------------|-----------------------------------------------------------------------------------------------------|       \n | otel.config.sampler.probability  | OTEL_CONFIG_SAMPLER_PROBABILITY  | Sampler which is used when constructing a new span (default: 1)                                     |                        \n-| otel.span.attribute.count.limit  | OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT  | Max number of attributes per span, extra will be dropped (default: 1000)                              |                        \n-| otel.span.event.count.limit      | OTEL_SPAN_EVENT_COUNT_LIMIT      | Max number of Events per span, extra will be dropped (default: 1000)                                 |                        \n-| otel.span.link.count.limit       | OTEL_SPAN_LINK_COUNT_LIMIT       | Max number of Link entries per span, extra will be dropped (default: 1000)                            |\n+| otel.config.max.attrs            | OTEL_CONFIG_MAX_ATTRS            | Max number of attributes per span, extra will be dropped (default: 32)                              |                        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4NDc0Mw=="}, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjUzOTM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyMToxMlrOHmp2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyMToxMlrOHmp2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MzU3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n          \n          \n            \n             * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)}, will be created with any", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510293573", "createdAt": "2020-10-22T16:21:12Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -17,18 +16,47 @@\n /**\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The default for the OpenTelemetry API will include any {@link\n- * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n- * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n- * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjU0NjI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyMjo0OVrOHmp6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyMjo0OVrOHmp6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * #get()} will return the {@link OpenTelemetry}. This should be called once as early as possible\n          \n          \n            \n               * #get()} will return the provided {@link OpenTelemetry} instance. This should be called once as early as possible", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510294668", "createdAt": "2020-10-22T16:22:49Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/OpenTelemetry.java", "diffHunk": "@@ -17,18 +16,47 @@\n /**\n  * The entrypoint to telemetry functionality for tracing, metrics and baggage.\n  *\n- * <p>The default for the OpenTelemetry API will include any {@link\n- * io.opentelemetry.trace.spi.TracerProviderFactory}, {@link\n- * io.opentelemetry.metrics.spi.MeterProviderFactory}, or {@link\n- * io.opentelemetry.baggage.spi.BaggageManagerFactory} found on the classpath, or otherwise will be\n+ * <p>A global singleton can be retrieved by {@link #get()}. The default for the returned {@link\n+ * OpenTelemetry}, if none has been set via {@link #set(OpenTelemetry)} will be created with any\n+ * {@link io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n+ * io.opentelemetry.trace.spi.TracerProviderFactory} or {@link\n+ * io.opentelemetry.metrics.spi.MeterProviderFactory} found on the classpath, or otherwise will be\n  * default, with no-op behavior.\n  *\n+ * <p>If using the OpenTelemetry SDK, you may want to instantiate the {@link OpenTelemetry} to\n+ * provide configuration, for example of {@code Resource} or {@code Sampler}. See {@code\n+ * OpenTelemetrySdk} and {@code OpenTelemetrySdk.builder} for information on how to construct the\n+ * SDK {@link OpenTelemetry}.\n+ *\n  * @see TracerProvider\n  * @see MeterProvider\n- * @see BaggageManager\n  */\n public interface OpenTelemetry {\n \n+  /**\n+   * Returns the registered global {@link OpenTelemetry}. If no call to {@link #set(OpenTelemetry)}\n+   * has been made so far, a default {@link OpenTelemetry} composed of functionality any {@link\n+   * io.opentelemetry.spi.OpenTelemetryFactory}, {@link\n+   * io.opentelemetry.trace.spi.TracerProviderFactory} or{@link\n+   * io.opentelemetry.metrics.spi.MeterProviderFactory}, found on the classpath, or otherwise will\n+   * be default, with no-op behavior.\n+   *\n+   * @throws IllegalStateException if a provider has been specified by system property using the\n+   *     interface FQCN but the specified provider cannot be found.\n+   */\n+  static OpenTelemetry get() {\n+    return DefaultOpenTelemetry.getGlobalOpenTelemetry();\n+  }\n+\n+  /**\n+   * Sets the {@link OpenTelemetry} that should be the global instance. Future calls to {@link\n+   * #get()} will return the {@link OpenTelemetry}. This should be called once as early as possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjU2MDUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyNjoxMFrOHmqDZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyNjoxMFrOHmqDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NjkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n          \n          \n            \n             * io.opentelemetry.spi.OpenTelemetryFactory} with the value of the fully qualified class name.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510296935", "createdAt": "2020-10-22T16:26:10Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.spi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+\n+/**\n+ * A service provider interface (SPI) for a {@link OpenTelemetry}. Fully qualified class name of the\n+ * implementation should be registered in a resource file {@code\n+ * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n+ *\n+ * <p>A specific implementation can be selected by setting the system property {@code\n+ * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjU2MjM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyNjozM1rOHmqEfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyNjozM1rOHmqEfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns a new {@link OpenTelemetry}. */\n          \n          \n            \n              /** Returns a new {@link OpenTelemetry} instance. */", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510297212", "createdAt": "2020-10-22T16:26:33Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/spi/OpenTelemetryFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.spi;\n+\n+import io.opentelemetry.OpenTelemetry;\n+\n+/**\n+ * A service provider interface (SPI) for a {@link OpenTelemetry}. Fully qualified class name of the\n+ * implementation should be registered in a resource file {@code\n+ * META-INF/services/io.opentelemetry.spi.OpenTelemetryFactory}.\n+ *\n+ * <p>A specific implementation can be selected by setting the system property {@code\n+ * io.opentelemetry.spi.OpenTelemetryFactor} with the value of the fully qualified class name.\n+ */\n+public interface OpenTelemetryFactory {\n+\n+  /** Returns a new {@link OpenTelemetry}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjU2NDQzOnYy", "diffSide": "RIGHT", "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyNzowN1rOHmqF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo1Nzo0MFrOHm7VIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzU2MA==", "bodyText": "???", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510297560", "createdAt": "2020-10-22T16:27:07Z", "author": {"login": "jkwatson"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n   private static void initTracerSdk() {\n     // Get the tracer management instance.\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n+    TracerSdkManagement tracerManagement = $1erManagement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4MDAwMQ==", "bodyText": "Had an IntelliJ mishap and didn't compile the examples \ud83d\ude05  But I will revert the whole folder anyways", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510580001", "createdAt": "2020-10-23T03:57:40Z", "author": {"login": "anuraaga"}, "path": "examples/http/src/main/java/io/opentelemetry/example/http/HttpClient.java", "diffHunk": "@@ -37,7 +37,7 @@\n \n   private static void initTracerSdk() {\n     // Get the tracer management instance.\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n+    TracerSdkManagement tracerManagement = $1erManagement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NzU2MA=="}, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjU2Nzk5OnYy", "diffSide": "RIGHT", "path": "examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyODowM1rOHmqIJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoyODowM1rOHmqIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5ODE0OA==", "bodyText": "we shouldn't update examples until we do a release, correct? They should be pointing at the latest release, not a snapshot.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1857#discussion_r510298148", "createdAt": "2020-10-22T16:28:03Z", "author": {"login": "jkwatson"}, "path": "examples/grpc/src/main/java/io/opentelemetry/example/HelloWorldServer.java", "diffHunk": "@@ -91,7 +91,7 @@ private void stop() {\n \n   private void initTracer() {\n     // Get the tracer management instance\n-    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getTracerManagement();\n+    TracerSdkManagement tracerManagement = OpenTelemetrySdk.getGlobalTracerManagement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400b2205421f9e7261578b9911aaaa5b33200da6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1990, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}