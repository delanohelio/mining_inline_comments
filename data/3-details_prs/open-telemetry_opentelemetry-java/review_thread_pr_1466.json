{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTgxMDg1", "number": 1466, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoxOToyMlrOESEUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyMDoyNlrOESYj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzgwNjgwOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoxOToyMlrOG3GI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoxOToyMlrOG3GI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTQyNw==", "bodyText": "the nice thing about using ConfigBuilder is that you only need to handle system property style names, and it will automatically translate those to env var style names when reading env vars (via NamingConvention)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425427", "createdAt": "2020-07-25T17:19:22Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d78cd1b4c2a27f0d864287e06581590802441e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzgwNzU1OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyMDoxOVrOG3GJKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyMDoxOVrOG3GJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTUxNQ==", "bodyText": "see comment above about automatic env var name handling by ConfigBuilder\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n          \n          \n            \n                  if (envAttributesValue != null) {\n          \n          \n            \n                    this.setEnvAttributes(envAttributesValue);\n          \n          \n            \n                  }", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425515", "createdAt": "2020-07-25T17:20:19Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n+    private String envAttributes;\n+\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d78cd1b4c2a27f0d864287e06581590802441e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzgwODU4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyMTo1MFrOG3GJrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyMTo1MFrOG3GJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNTY0NQ==", "bodyText": "I'd suggest renaming this to build and doing the parsing and returning Resource here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getEnvAttributes() {\n          \n          \n            \n                public Resource build() {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460425645", "createdAt": "2020-07-25T17:21:50Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_ENV = \"OTEL_RESOURCE_ATTRIBUTES\";\n+    private static final String OTEL_RESOURCE_ATTRIBUTES_KEY = \"otel.resource.attributes\";\n+    private String envAttributes;\n+\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      String envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_ENV, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+\n+      envAttributesValue = getStringProperty(OTEL_RESOURCE_ATTRIBUTES_KEY, configMap);\n+      if (envAttributesValue != null) {\n+        this.setEnvAttributes(envAttributesValue);\n+      }\n+      return this;\n+    }\n+\n+    public String getEnvAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d78cd1b4c2a27f0d864287e06581590802441e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzgxMjAxOnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyNjoyNVrOG3GLTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxNzoyNjoyNVrOG3GLTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyNjA2MA==", "bodyText": "I'd suggest making this private (or package-protected if you need @VisibleForTesting). it doesn't seem like public builder is needed at this time at lease\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static class Builder extends ConfigBuilder<Builder> {\n          \n          \n            \n              private static class Builder extends ConfigBuilder<Builder> {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460426060", "createdAt": "2020-07-25T17:26:25Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -75,4 +78,35 @@ static Attributes parseResourceAttributes(@Nullable String rawEnvAttributes) {\n       return attrBuilders.build();\n     }\n   }\n+\n+  /** Builder utility for this EnvVarResource. */\n+  public static class Builder extends ConfigBuilder<Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d78cd1b4c2a27f0d864287e06581590802441e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg3ODY3OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzo0ODoxM1rOG3OCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzo0ODoxM1rOG3OCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NDc4Mw==", "bodyText": "We most likely need to later update the code for ConfigBuilder to live right under common, instead of common.export, as this configuration pattern is useful in other scenarios (cc @thisthat )", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460554783", "createdAt": "2020-07-26T17:48:13Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg4MTYxOnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzo1MTo0M1rOG3ODgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo1OTo0M1rOG3hWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA==", "bodyText": "We should have this set right in the test itself (the rest of the tests don't need this part).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460555138", "createdAt": "2020-07-26T17:51:43Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +68,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @BeforeClass\n+  public static void init() {\n+    System.setProperty(\"otel.resource.attributes\", \"value = foo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxODkyMg==", "bodyText": "Hi~ This is because I put this static final field. The following code\uff1a\nprivate static final Resource ENV_VAR_RESOURCE =\n      new Builder().readEnvironmentVariables().readSystemProperties().build();\n\n(it may inited before) If I put it in test itself, the test may fail.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460618922", "createdAt": "2020-07-27T02:44:36Z", "author": {"login": "dengliming"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +68,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @BeforeClass\n+  public static void init() {\n+    System.setProperty(\"otel.resource.attributes\", \"value = foo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMjE2OA==", "bodyText": "Hmm, isn't that true if the class happens to be loaded before this test is run? It seems like a lucky coincidence that isn't currently happening in the build.\nI think to make this test robust we should stick with calling new Builder().readEnvironmentVariables().readSystemProperties().build(); in the test instead of relying on the static instance being loaded after the test.\nAlso, make sure you reset the value of the property after the test is complete.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460622168", "createdAt": "2020-07-27T02:59:45Z", "author": {"login": "anuraaga"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +68,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @BeforeClass\n+  public static void init() {\n+    System.setProperty(\"otel.resource.attributes\", \"value = foo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTIwNQ==", "bodyText": "agree. fixed at lastest commit. Thanks.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460871205", "createdAt": "2020-07-27T12:59:43Z", "author": {"login": "dengliming"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +68,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @BeforeClass\n+  public static void init() {\n+    System.setProperty(\"otel.resource.attributes\", \"value = foo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NTEzOA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTUzNTU4OnYy", "diffSide": "RIGHT", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDozMzo1MFrOG3TU-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowNjo0OFrOG3kDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA==", "bodyText": "The name of the class seems to be incorrect now. At least Var part.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460641530", "createdAt": "2020-07-27T04:33:50Z", "author": {"login": "iNikem"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY1MTE0MQ==", "bodyText": "Ah, now that it supports system properties also, got it (took me some time \ud83d\ude02)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460651141", "createdAt": "2020-07-27T05:16:09Z", "author": {"login": "trask"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMTQyNQ==", "bodyText": "@iNikem Oh, indeed, I was meant to mention the rename as well.I suggest it being renamed to something like EnvAutodetectResource or AutodetectResource, and update its javadoc to mention that now we do env vars + system properties detection.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460831425", "createdAt": "2020-07-27T11:43:13Z", "author": {"login": "carlosalberto"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTg2Mw==", "bodyText": "Agree. @iNikem @trask @thisthat WDYT?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460871863", "createdAt": "2020-07-27T13:00:50Z", "author": {"login": "dengliming"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NTY0OA==", "bodyText": "I would prefer EnvAutodetectResource over AutodetectResource since we only look for a specific env var/sys property.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460885648", "createdAt": "2020-07-27T13:23:12Z", "author": {"login": "thisthat"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNTU4Mg==", "bodyText": "Already renamed class name EnvVarResource to EnvAutodetectResource and update doc.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460915582", "createdAt": "2020-07-27T14:06:48Z", "author": {"login": "dengliming"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/EnvVarResource.java", "diffHunk": "@@ -29,12 +31,11 @@\n  */\n @ThreadSafe\n public final class EnvVarResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTUzMA=="}, "originalCommit": {"oid": "42d2441bf933a29ae662974f022ae64a75e0442d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzEyMjIyOnYy", "diffSide": "RIGHT", "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyMDoyNlrOG3iH0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo0ODoyN1rOG3jQeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA==", "bodyText": "Please, add also a test for environment variables. An example is available here: \n  \n    \n      opentelemetry-java/sdk/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\n    \n    \n         Line 270\n      in\n      46f0c5f\n    \n    \n    \n    \n\n        \n          \n           public static class ConfigurationEnvVarsTest {", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460883920", "createdAt": "2020-07-27T13:20:26Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +67,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @Test\n+  public void getResourceAttributes_properties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab75e5270564068c862f90a537578b3381eb3281"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5ODg4Mg==", "bodyText": "fixed at lastest commit.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460898882", "createdAt": "2020-07-27T13:43:20Z", "author": {"login": "dengliming"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +67,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @Test\n+  public void getResourceAttributes_properties() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA=="}, "originalCommit": {"oid": "ab75e5270564068c862f90a537578b3381eb3281"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwMjUyMQ==", "bodyText": "Thank you :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1466#discussion_r460902521", "createdAt": "2020-07-27T13:48:27Z", "author": {"login": "thisthat"}, "path": "sdk/src/test/java/io/opentelemetry/sdk/resources/EnvVarResourceTest.java", "diffHunk": "@@ -67,4 +67,15 @@ public void parseResourceAttributes_quotes() {\n     Attributes result = EnvVarResource.parseResourceAttributes(\"value=\\\"foo\\\"\");\n     assertThat(result).isEqualTo(Attributes.of(\"value\", stringAttributeValue(\"foo\")));\n   }\n+\n+  @Test\n+  public void getResourceAttributes_properties() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MzkyMA=="}, "originalCommit": {"oid": "ab75e5270564068c862f90a537578b3381eb3281"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1549, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}