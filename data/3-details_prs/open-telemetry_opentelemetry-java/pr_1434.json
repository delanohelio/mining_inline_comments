{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyOTgyNDQ4", "number": 1434, "title": "Implement Span.recordException", "bodyText": "recordException accepts a Throwable and converts it into the exception semantic attributes.\nFixes #1430\nFixes #243\nBenchmark result. The custom writer seems to be about 10% faster than Guava + JDK.\nPrintThrowableBenchmark.customPrintWriter                                   thrpt   60    211.488 \u2592    8.383  ops/ms\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.alloc.rate                    thrpt   60   2629.492 \u2592  105.163  MB/sec\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.alloc.rate.norm               thrpt   60  19569.316 \u2592    0.060    B/op\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.churn.G1_Eden_Space           thrpt   60   2634.753 \u2592  113.643  MB/sec\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.churn.G1_Eden_Space.norm      thrpt   60  19610.326 \u2592  333.335    B/op\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.churn.G1_Survivor_Space       thrpt   60      0.007 \u2592    0.001  MB/sec\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.churn.G1_Survivor_Space.norm  thrpt   60      0.051 \u2592    0.008    B/op\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.count                         thrpt   60    649.000             counts\nPrintThrowableBenchmark.customPrintWriter:\u2556gc.time                          thrpt   60   1156.000                 ms\nPrintThrowableBenchmark.normalPrintWriter                                   thrpt   60    195.298 \u2592   11.995  ops/ms\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.alloc.rate                    thrpt   60   2431.664 \u2592  150.037  MB/sec\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.alloc.rate.norm               thrpt   60  19601.265 \u2592    0.051    B/op\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.churn.G1_Eden_Space           thrpt   60   2443.735 \u2592  161.806  MB/sec\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.churn.G1_Eden_Space.norm      thrpt   60  19674.502 \u2592  332.010    B/op\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.churn.G1_Survivor_Space       thrpt   60      0.007 \u2592    0.001  MB/sec\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.churn.G1_Survivor_Space.norm  thrpt   60      0.054 \u2592    0.009    B/op\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.count                         thrpt   60    576.000             counts\nPrintThrowableBenchmark.normalPrintWriter:\u2556gc.time                          thrpt   60   1035.000                 ms\nPrintThrowableBenchmark.printStream                                         thrpt   60     73.729 \u2592    2.933  ops/ms\nPrintThrowableBenchmark.printStream:\u2556gc.alloc.rate                          thrpt   60   2119.750 \u2592   85.085  MB/sec\nPrintThrowableBenchmark.printStream:\u2556gc.alloc.rate.norm                     thrpt   60  45275.242 \u2592    0.148    B/op\nPrintThrowableBenchmark.printStream:\u2556gc.churn.G1_Eden_Space                 thrpt   60   2136.836 \u2592   95.629  MB/sec\nPrintThrowableBenchmark.printStream:\u2556gc.churn.G1_Eden_Space.norm            thrpt   60  45657.127 \u2592 1084.172    B/op\nPrintThrowableBenchmark.printStream:\u2556gc.churn.G1_Survivor_Space             thrpt   60      0.060 \u2592    0.006  MB/sec\nPrintThrowableBenchmark.printStream:\u2556gc.churn.G1_Survivor_Space.norm        thrpt   60      1.273 \u2592    0.114    B/op\nPrintThrowableBenchmark.printStream:\u2556gc.count                               thrpt   60    554.000             counts\nPrintThrowableBenchmark.printStream:\u2556gc.time                                thrpt   60    966.000                 ms\nPrintThrowableBenchmark.stringWriter                                        thrpt   60    199.465 \u2592   10.671  ops/ms\nPrintThrowableBenchmark.stringWriter:\u2556gc.alloc.rate                         thrpt   60   2464.810 \u2592  132.275  MB/sec\nPrintThrowableBenchmark.stringWriter:\u2556gc.alloc.rate.norm                    thrpt   60  19457.324 \u2592    0.022    B/op\nPrintThrowableBenchmark.stringWriter:\u2556gc.churn.G1_Eden_Space                thrpt   60   2467.116 \u2592  137.296  MB/sec\nPrintThrowableBenchmark.stringWriter:\u2556gc.churn.G1_Eden_Space.norm           thrpt   60  19474.909 \u2592  303.665    B/op\nPrintThrowableBenchmark.stringWriter:\u2556gc.churn.G1_Survivor_Space            thrpt   60      0.008 \u2592    0.001  MB/sec\nPrintThrowableBenchmark.stringWriter:\u2556gc.churn.G1_Survivor_Space.norm       thrpt   60      0.060 \u2592    0.009    B/op\nPrintThrowableBenchmark.stringWriter:\u2556gc.count                              thrpt   60    615.000             counts\nPrintThrowableBenchmark.stringWriter:\u2556gc.time                               thrpt   60   1084.000                 ms", "createdAt": "2020-07-20T02:53:18Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434", "merged": true, "mergeCommit": {"oid": "f816ad57335dc2198a420eadcdfbf64a93103d01"}, "closed": true, "closedAt": "2020-07-23T01:53:28Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2oelUAH2gAyNDUyOTgyNDQ4OmI4YWIzZmNmMDAyNjkwZmQ5NDhjZDhkOGE5MDcwZWQwMDViMWFjZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3lf9pgFqTQ1Mzc5NDIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b8ab3fcf002690fd948cd8d8a9070ed005b1ace4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b8ab3fcf002690fd948cd8d8a9070ed005b1ace4", "committedDate": "2020-07-20T02:47:36Z", "message": "Implement Span.recordException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77a16328d119304fe4d3223e7b58ec62715a5d3a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/77a16328d119304fe4d3223e7b58ec62715a5d3a", "committedDate": "2020-07-20T03:01:29Z", "message": "License"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84abdf2f6bee13a9525adf424424c268539c244e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84abdf2f6bee13a9525adf424424c268539c244e", "committedDate": "2020-07-20T03:21:53Z", "message": "javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f1b5a8faeed9485bba0ba57a38e9cebe2fd815", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a4f1b5a8faeed9485bba0ba57a38e9cebe2fd815", "committedDate": "2020-07-20T03:37:36Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f65572004c8c2729abb1f7856924f99b685ef10", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0f65572004c8c2729abb1f7856924f99b685ef10", "committedDate": "2020-07-20T03:49:55Z", "message": "Tests for DefaultSpan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eed72efe82256c4df2efdb67fbac34d229c9186", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7eed72efe82256c4df2efdb67fbac34d229c9186", "committedDate": "2020-07-20T08:15:24Z", "message": "PrintStream benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7e3c4ab4af525ffed5f202ecbf8e19c6586779ad", "committedDate": "2020-07-20T14:06:26Z", "message": "Check arguments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzY1NjU2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-451765656", "createdAt": "2020-07-20T16:24:47Z", "commit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzk0Mzky", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-451794392", "createdAt": "2020-07-20T17:02:03Z", "commit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowMjowM1rOG0XPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowMjowM1rOG0XPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1OTg4MQ==", "bodyText": "Should we have a semantic \"attribute\" constant for this event name, as well? Seems like this event name is special, and canonical, so we should probably put it in the API somewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r457559881", "createdAt": "2020-07-20T17:02:03Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -395,6 +396,29 @@ public void setStatus(Status status) {\n     }\n   }\n \n+  @Override\n+  public void recordException(Throwable exception) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    recordException(exception, clock.now());\n+  }\n+\n+  @Override\n+  public void recordException(Throwable exception, long timestamp) {\n+    Preconditions.checkNotNull(exception, \"exception\");\n+    Preconditions.checkArgument(timestamp >= 0, \"Negative timestamp\");\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+    SemanticAttributes.EXCEPTION_TYPE.set(attributes, exception.getClass().getCanonicalName());\n+    if (exception.getMessage() != null) {\n+      SemanticAttributes.EXCEPTION_MESSAGE.set(attributes, exception.getMessage());\n+    }\n+    StringBuilder buffer = new StringBuilder();\n+    StringBuilderPrintWriter writer = new StringBuilderPrintWriter(buffer);\n+    exception.printStackTrace(writer);\n+    SemanticAttributes.EXCEPTION_STACKTRACE.set(attributes, buffer.toString());\n+\n+    addEvent(\"exception\", attributes.build(), timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3c4ab4af525ffed5f202ecbf8e19c6586779ad"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "666fd5696732d5f278f7edb12cd77bf5f30ff724", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/666fd5696732d5f278f7edb12cd77bf5f30ff724", "committedDate": "2020-07-21T01:53:16Z", "message": "Use StringWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfd3ebdd3f341b16688a5a24006da0d62d333163", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bfd3ebdd3f341b16688a5a24006da0d62d333163", "committedDate": "2020-07-21T02:10:50Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into record-exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b16b9b4dbc56121dc483b276c1190f4cd44d53e", "committedDate": "2020-07-21T02:14:57Z", "message": "more merge and event name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDg3NjY4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-452087668", "createdAt": "2020-07-21T02:43:42Z", "commit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0Mzo0MlrOG0mEsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo0Mzo0MlrOG0mEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwMjkzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r457802931", "createdAt": "2020-07-21T02:43:42Z", "author": {"login": "jkwatson"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -416,6 +419,31 @@ public void setStatus(Status status) {\n     }\n   }\n \n+  @Override\n+  public void recordException(Throwable exception) {\n+    if (exception == null) {\n+      return;\n+    }\n+    recordException(exception, clock.now());\n+  }\n+\n+  @Override\n+  public void recordException(Throwable exception, long timestamp) {\n+    if (exception == null) {\n+      return;\n+    }\n+    Attributes.Builder attributes = Attributes.newBuilder();\n+    SemanticAttributes.EXCEPTION_TYPE.set(attributes, exception.getClass().getCanonicalName());\n+    if (exception.getMessage() != null) {\n+      SemanticAttributes.EXCEPTION_MESSAGE.set(attributes, exception.getMessage());\n+    }\n+    StringWriter writer = new StringWriter();\n+    exception.printStackTrace(new PrintWriter(writer));\n+    SemanticAttributes.EXCEPTION_STACKTRACE.set(attributes, writer.toString());\n+\n+    addEvent(SemanticAttributes.EXCEPTION_EVENT_NAME, attributes.build(), timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDg4MTI4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-452088128", "createdAt": "2020-07-21T02:45:17Z", "commit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTQ5MjUy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-452149252", "createdAt": "2020-07-21T06:04:14Z", "commit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTUzMjY2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-452953266", "createdAt": "2020-07-22T02:30:36Z", "commit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMDozNlrOG1QdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMToyM1rOG1QeQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQyMA==", "bodyText": "Would not add this method unless is necessary. Removing methods is harder than adding. I don't see a scenario when an exception happens and somehow later want to record it.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497420", "createdAt": "2020-07-22T02:30:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -217,6 +217,29 @@\n    */\n   void setStatus(Status status);\n \n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event} at the\n+   * current time.\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception);\n+\n+  /**\n+   * Records information about the {@link Throwable} to the {@link Span} as an {@link Event}.\n+   *\n+   * <p>Use this method to specify an explicit event timestamp. If not called, the implementation\n+   * will use the current timestamp value, which should be the default case.\n+   *\n+   * <p>Important: this is NOT equivalent with System.nanoTime().\n+   *\n+   * @param exception the {@link Throwable} to record.\n+   * @param timestamp the explicit event timestamp in nanos since epoch.\n+   * @since 0.7.0\n+   */\n+  void recordException(Throwable exception, long timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzU2Ng==", "bodyText": "Is this change unrelated?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497566", "createdAt": "2020-07-22T02:31:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -70,4 +71,14 @@ public void set(Span span, boolean value) {\n   public void set(Span.Builder spanBuilder, boolean value) {\n     spanBuilder.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided {@link Attributes.Builder}.\n+   *\n+   * @param attributesBuilder the attributes builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Attributes.Builder attributesBuilder, boolean value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzYwMQ==", "bodyText": "Unrelated change?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#discussion_r458497601", "createdAt": "2020-07-22T02:31:23Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/DoubleAttributeSetter.java", "diffHunk": "@@ -70,4 +71,14 @@ public void set(Span span, double value) {\n   public void set(Span.Builder spanBuilder, double value) {\n     spanBuilder.setAttribute(key(), value);\n   }\n+\n+  /**\n+   * Sets the attribute on the provided {@link Attributes.Builder}.\n+   *\n+   * @param attributesBuilder the attributes builder to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Attributes.Builder attributesBuilder, double value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b16b9b4dbc56121dc483b276c1190f4cd44d53e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ac3f4f24e423a3fd8610c4327ba13553b3bac5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/97ac3f4f24e423a3fd8610c4327ba13553b3bac5", "committedDate": "2020-07-22T03:01:39Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into record-exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e65408e303a83e9eaaee85935161ae5df87e90", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/99e65408e303a83e9eaaee85935161ae5df87e90", "committedDate": "2020-07-22T03:08:21Z", "message": "Remove timestamp recordException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzAzODE4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-453303818", "createdAt": "2020-07-22T13:14:29Z", "commit": {"oid": "99e65408e303a83e9eaaee85935161ae5df87e90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzk0MjM2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1434#pullrequestreview-453794236", "createdAt": "2020-07-23T01:53:19Z", "commit": {"oid": "99e65408e303a83e9eaaee85935161ae5df87e90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2588, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}