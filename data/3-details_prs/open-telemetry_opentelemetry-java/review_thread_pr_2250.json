{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDc5Nzk5", "number": 2250, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo0MVrOFDKQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MjoyMlrOFDYb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU4MTA5OnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo0MVrOICrk0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxNTozNVrOICr-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjAwMg==", "bodyText": "And context itself correct?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539682002", "createdAt": "2020-12-09T22:03:41Z", "author": {"login": "bogdandrutu"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.\n+\n+### Methods\n+\n+- Mature signals\n+    - API modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-api` module.\n+    - Methods for accessing mature APIs will be added, as appropriate to the `OpenTelemetry` interface.\n+    - SDK modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-sdk` module.\n+    - Configuration options for the SDK modules for mature signals will be exposed, as appropriate, on the `OpenTelemetrySdk` class.\n+    - Modules for these mature signals will be included in the opentelemetry-bom to ensure that users runtime dependencies are kept in sync.\n+    - Mixing and matching runtime API and SDK versions, eg. by avoiding use of the BOM, will not be supported by this project.\n+    - Once a public API (either in the official API or in the SDK) has been released, we will endeavor to support that API in perpetuity.\n+\n+- Immature or experimental signals\n+    - API modules for immature signals will not be transitive dependencies of the `opentelemetry-api` module.\n+    - API modules will be versioned with an \"-alpha\" suffix to make it abundantly clear that depending on them is at your own risk.\n+    - API modules for immature signals will be co-versioned along with mature API modules, with the added suffix.\n+    - The java packages for immature APIs will be used as if they were mature signals. This will enable users to easily transition from immature to \n+    mature usage, without having to change imports. \n+    - SDK modules for immature signals will also be versioned with an \"-alpha\" suffix, in parallel to their API modules.\n+    \n+### Examples\n+\n+Purely for illustration purposes, not intended to represent actual releases:\n+\n+- `v1.0.0` release:\n+    - `io.opentelemetry:opentelemetry-api:1.0.0`\n+        - Contains APIs for tracing, baggage, propagators (via the context dependency)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8224412bccc258870e0e9a86d32aa07fd94cd8f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4Njk4NA==", "bodyText": "yes...this was illustrative, not intended to be complete or 100% accurate.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539686984", "createdAt": "2020-12-09T22:12:52Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.\n+\n+### Methods\n+\n+- Mature signals\n+    - API modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-api` module.\n+    - Methods for accessing mature APIs will be added, as appropriate to the `OpenTelemetry` interface.\n+    - SDK modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-sdk` module.\n+    - Configuration options for the SDK modules for mature signals will be exposed, as appropriate, on the `OpenTelemetrySdk` class.\n+    - Modules for these mature signals will be included in the opentelemetry-bom to ensure that users runtime dependencies are kept in sync.\n+    - Mixing and matching runtime API and SDK versions, eg. by avoiding use of the BOM, will not be supported by this project.\n+    - Once a public API (either in the official API or in the SDK) has been released, we will endeavor to support that API in perpetuity.\n+\n+- Immature or experimental signals\n+    - API modules for immature signals will not be transitive dependencies of the `opentelemetry-api` module.\n+    - API modules will be versioned with an \"-alpha\" suffix to make it abundantly clear that depending on them is at your own risk.\n+    - API modules for immature signals will be co-versioned along with mature API modules, with the added suffix.\n+    - The java packages for immature APIs will be used as if they were mature signals. This will enable users to easily transition from immature to \n+    mature usage, without having to change imports. \n+    - SDK modules for immature signals will also be versioned with an \"-alpha\" suffix, in parallel to their API modules.\n+    \n+### Examples\n+\n+Purely for illustration purposes, not intended to represent actual releases:\n+\n+- `v1.0.0` release:\n+    - `io.opentelemetry:opentelemetry-api:1.0.0`\n+        - Contains APIs for tracing, baggage, propagators (via the context dependency)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjAwMg=="}, "originalCommit": {"oid": "a8224412bccc258870e0e9a86d32aa07fd94cd8f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODUwMg==", "bodyText": "added for clarity, though", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539688502", "createdAt": "2020-12-09T22:15:35Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.\n+\n+### Methods\n+\n+- Mature signals\n+    - API modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-api` module.\n+    - Methods for accessing mature APIs will be added, as appropriate to the `OpenTelemetry` interface.\n+    - SDK modules for mature (i.e. released) signals will be transitive dependencies of the `opentelemetry-sdk` module.\n+    - Configuration options for the SDK modules for mature signals will be exposed, as appropriate, on the `OpenTelemetrySdk` class.\n+    - Modules for these mature signals will be included in the opentelemetry-bom to ensure that users runtime dependencies are kept in sync.\n+    - Mixing and matching runtime API and SDK versions, eg. by avoiding use of the BOM, will not be supported by this project.\n+    - Once a public API (either in the official API or in the SDK) has been released, we will endeavor to support that API in perpetuity.\n+\n+- Immature or experimental signals\n+    - API modules for immature signals will not be transitive dependencies of the `opentelemetry-api` module.\n+    - API modules will be versioned with an \"-alpha\" suffix to make it abundantly clear that depending on them is at your own risk.\n+    - API modules for immature signals will be co-versioned along with mature API modules, with the added suffix.\n+    - The java packages for immature APIs will be used as if they were mature signals. This will enable users to easily transition from immature to \n+    mature usage, without having to change imports. \n+    - SDK modules for immature signals will also be versioned with an \"-alpha\" suffix, in parallel to their API modules.\n+    \n+### Examples\n+\n+Purely for illustration purposes, not intended to represent actual releases:\n+\n+- `v1.0.0` release:\n+    - `io.opentelemetry:opentelemetry-api:1.0.0`\n+        - Contains APIs for tracing, baggage, propagators (via the context dependency)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjAwMg=="}, "originalCommit": {"oid": "a8224412bccc258870e0e9a86d32aa07fd94cd8f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk3ODEyOnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1ODozMlrOICvDdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODozOToxMlrOIDX2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5OQ==", "bodyText": "I guess this is referring to interfaces in the SDK that have the public modifier but don't fall into the above bucket. While I know Precisely what this includes has yet to be delineated.  do you have any example of it? BatchSpanProcessor?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539738999", "createdAt": "2020-12-09T23:58:32Z", "author": {"login": "anuraaga"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NDg3OQ==", "bodyText": "I copied this out of Ted's otep...I think it just means non-public \"internals\" of the SDK. It might not be a valuable thing to call out.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539764879", "createdAt": "2020-12-10T01:04:04Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5OQ=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NTgxMw==", "bodyText": "Ok - yeah it might be worth calling out but it applies to both API and SDK so weird for me to see it here, which I guess is my comment on the OTEP too so just repeating the feedback it seems :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r539765813", "createdAt": "2020-12-10T01:06:45Z", "author": {"login": "anuraaga"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5OQ=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzMwMQ==", "bodyText": "updated", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540407301", "createdAt": "2020-12-10T18:39:12Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n+        - Precisely what this includes has yet to be delineated. \n+    - Internal interfaces are allowed to break.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczODk5OQ=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDg4NjcwOnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozODo1MVrOIDAA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozODo1MVrOIDAA5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxNjg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.\n          \n          \n            \n                - Public portions of the SDK (constructors, configuration, end-user interfaces) must remain backwards compatible.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540016870", "createdAt": "2020-12-10T09:38:51Z", "author": {"login": "iNikem"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. \n+    - We call this requirement the \"ABI\" compatibility requirement for \"Application Binary Interface\" compatibility. \n+- SDK Stability:\n+    - Public portions of the SDK (constructors, configuration, und-user interfaces) must remain backwards compatible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDkwNDAyOnYy", "diffSide": "RIGHT", "path": "docs/rationale.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MjoyMlrOIDALRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODozOToyMVrOIDX2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxOTUyNA==", "bodyText": "But we planned to version SDK independently from API, right?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540019524", "createdAt": "2020-12-10T09:42:22Z", "author": {"login": "iNikem"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMzI2Mg==", "bodyText": "I think this depended on how hard we go on preserving SDK compatibility. The more precise statement is indeed probably the use of the BOM for the latest version rather than mentioning them explicitly.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540033262", "createdAt": "2020-12-10T10:01:34Z", "author": {"login": "anuraaga"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxOTUyNA=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5NDM1OQ==", "bodyText": "I can update to refer to the BOM. Whether we actually end up versioning the SDK independently from the API remains to be seen (I sure hope we don't have to).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540294359", "createdAt": "2020-12-10T16:08:48Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxOTUyNA=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzM5NQ==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2250#discussion_r540407395", "createdAt": "2020-12-10T18:39:21Z", "author": {"login": "jkwatson"}, "path": "docs/rationale.md", "diffHunk": "@@ -23,4 +23,72 @@ try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n ```\n \n It would not be possible to call `recordException` if `span` was also using try-with-resources.\n-Because this is a common usage for spans, we do not support try-with-resources.\n\\ No newline at end of file\n+Because this is a common usage for spans, we do not support try-with-resources.\n+\n+\n+## Versioning and Releases\n+\n+### Assumptions\n+\n+- This project uses semver v2, as does the rest of OpenTelemetry.\n+\n+### Goals\n+\n+- API Stability: \n+    - Once the API for a given signal (spans, logs, metrics, baggage) has been officially released, code instrumented with that API module will \n+function, *with no recompilation required*, with any API+SDK that has the same major version, and equal or greater minor or patch version. \n+    - For example, libraries that are instrumented with `opentelemetry-api-trace:1.0.1` will function, at runtime with \n+SDK library `opentelemetry-sdk-trace:1.11.33` plus `opentelemetry-api-trace:1.11.33`. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxOTUyNA=="}, "originalCommit": {"oid": "2bbbcb9d52bf0c0ec20e6b1c4e856211088b0eb7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1674, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}