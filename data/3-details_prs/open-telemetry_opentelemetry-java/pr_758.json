{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTQ3MjM0", "number": 758, "title": "Define constants for semantic convention attribute names", "bodyText": "Defines String constants for all span attribute names listed in the semantic convention specifications.", "createdAt": "2020-01-15T13:50:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758", "merged": true, "mergeCommit": {"oid": "46ee284b0a74c3ee4a8b7a40367aa1afc0d5aec6"}, "closed": true, "closedAt": "2020-03-30T22:41:18Z", "author": {"login": "kbrockhoff"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6l1iVAH2gAyMzYzMTQ3MjM0OmIxMzhjNDcyNTA5NjM2YWNmY2Q2OWUwMWIyN2EzZWI3ZTc3OGMyZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS2bD4gFqTM4NDI4MzMxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b138c472509636acfcd69e01b27a3eb7e778c2df", "committedDate": "2020-01-15T13:47:30Z", "message": "Initial def of string constants for semantic convention span attribute names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTQwODQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-343540841", "createdAt": "2020-01-15T21:41:54Z", "commit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo0MTo1NFrOFeHWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo0MTo1NFrOFeHWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjAzNA==", "bodyText": "Do we commit on these values to be 18-24 months backwards compatible? Maybe we should have a contrib package for this.\n@tedsuo @yurishkuro what is your experience with this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r367122034", "createdAt": "2020-01-15T21:41:54Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjkzODIy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-344693822", "createdAt": "2020-01-17T16:26:44Z", "commit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNjo0NVrOFe-WuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNjo0NVrOFe-WuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzIyNA==", "bodyText": "Since these all apply to attributes, could we rename the class to SemanticAttributes?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r368023224", "createdAt": "2020-01-17T16:26:45Z", "author": {"login": "tylerbenson"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticConventions.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticConventions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTI0MTY0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-345524164", "createdAt": "2020-01-20T20:40:57Z", "commit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMyNDA4", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-357732408", "createdAt": "2020-02-12T19:37:43Z", "commit": {"oid": "b138c472509636acfcd69e01b27a3eb7e778c2df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a507a3dea5b5b07d8f10efb19d8ff123f43cbec", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a507a3dea5b5b07d8f10efb19d8ff123f43cbec", "committedDate": "2020-02-22T16:19:40Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78e97fd34f635d9816cab001a1fd6635c0098347", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78e97fd34f635d9816cab001a1fd6635c0098347", "committedDate": "2020-02-22T16:40:04Z", "message": "Change to recommended name and update to latest specifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDQxODI3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-363041827", "createdAt": "2020-02-22T17:54:49Z", "commit": {"oid": "78e97fd34f635d9816cab001a1fd6635c0098347"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNzo1NDo1MFrOFtMLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNzo1NDo1MFrOFtMLOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyOTcyMA==", "bodyText": "Please use full descriptions from the spec.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r382929720", "createdAt": "2020-02-22T17:54:50Z", "author": {"login": "yurishkuro"}, "path": "api/src/main/java/io/opentelemetry/trace/SemanticAttributes.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace;\n+\n+/**\n+ * Defines constants for all attribute names defined in the OpenTelemetry Semantic Conventions\n+ * specifications.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md\">Semantic\n+ *     Conventions</a>\n+ */\n+public final class SemanticAttributes {\n+\n+  /** Transport protocol used. */\n+  public static final String NET_TRANSPORT = \"net.transport\";\n+  /** Remote address of the peer (dotted decimal for IPv4 or RFC5952 for IPv6). */\n+  public static final String NET_PEER_IP = \"net.peer.ip\";\n+  /** Remote port number as an integer. E.g., 80. */\n+  public static final String NET_PEER_PORT = \"net.peer.port\";\n+  /** Remote hostname or similar. */\n+  public static final String NET_PEER_NAME = \"net.peer.name\";\n+  /** Like net.peer.ip but for the host IP. Useful in case of a multi-IP host. */\n+  public static final String NET_HOST_IP = \"net.host.ip\";\n+  /** Like net.peer.port but for the host port. */\n+  public static final String NET_HOST_PORT = \"net.host.port\";\n+  /** Local hostname or similar. */\n+  public static final String NET_HOST_NAME = \"net.host.name\";\n+  /** Username or client_id extracted from the access token or Authorization header. */\n+  public static final String ENDUSER_ID = \"enduser.id\";\n+  /** Actual/assumed role the client is making the request under. */\n+  public static final String ENDUSER_ROLE = \"enduser.role\";\n+  /** Scopes or granted authorities the client currently possesses. */\n+  public static final String ENDUSER_SCOPE = \"enduser.scope\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e97fd34f635d9816cab001a1fd6635c0098347"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbc6baea5fed7e0e19040e9a8a8f4c110947994e", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fbc6baea5fed7e0e19040e9a8a8f4c110947994e", "committedDate": "2020-02-22T18:31:06Z", "message": "Changed constants to objects which enabled typed setting of span attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90b1d2e3916d4678a7959f216fba04f169c5d6a1", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/90b1d2e3916d4678a7959f216fba04f169c5d6a1", "committedDate": "2020-02-22T18:35:46Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747e0676a91a172b42cb2fa3e200c15c3d572cae", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/747e0676a91a172b42cb2fa3e200c15c3d572cae", "committedDate": "2020-02-22T19:21:30Z", "message": "Sync Javadoc with specifications document."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a6f62dd5e5bb4210909ef5e41d302dbf68f1ca", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24a6f62dd5e5bb4210909ef5e41d302dbf68f1ca", "committedDate": "2020-02-29T17:59:32Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/57d1e6040502186f75e2dad973b6ac03c0189246", "committedDate": "2020-02-29T18:04:45Z", "message": "Update to latest factory name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzA5NzQ3", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-367309747", "createdAt": "2020-03-02T15:53:23Z", "commit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MzoyM1rOFwkw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1ODowNVrOFwk-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODMzNQ==", "bodyText": "I suggest naming these *AttributeSetter instead of just *Attribute to avoid confusion with already existing classes like io.opentelemetry.trace.AttributeValue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386478335", "createdAt": "2020-03-02T15:53:23Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/AbstractAttribute.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Abstract base class for {@link Attribute} implementations.\n+ *\n+ * @param <T> the attribute value type\n+ */\n+@Immutable\n+public abstract class AbstractAttribute<T> implements Attribute<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MDA4NA==", "bodyText": "This case looks really awkward. Why would we convert a boolean to a string? Isn't setting a null string equivalent to not calling setAttribute as opposed to clearing the attribute anyway?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386480084", "createdAt": "2020-03-02T15:55:46Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttribute.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttribute extends AbstractAttribute<Boolean> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Boolean value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value);\n+    } else {\n+      span.setAttribute(key(), (String) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTExOQ==", "bodyText": "I don't like this class. Also, from the name I would have expected it not to parse the string but leave it as-is. EDIT: Maybe if the class handles parsing errors (e.g. by setting the value as-is), I would like it better \ud83d\ude03", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386481119", "createdAt": "2020-03-02T15:57:07Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTc0MQ==", "bodyText": "This may throw an exception for invalid input which violates the specification's error handling guidelines. Also, since this input will most likely come directly from the monitored code, it is even more dangerous.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r386481741", "createdAt": "2020-03-02T15:58:05Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttribute.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttribute extends AbstractAttribute<Integer> {\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public IntOrStringAttribute(String attributeKey) {\n+    super(attributeKey);\n+  }\n+\n+  @Override\n+  public void set(Span span, @Nullable Integer value) {\n+    if (value != null) {\n+      span.setAttribute(key(), value.longValue());\n+    } else {\n+      span.setAttribute(key(), (String) null);\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the string value which can be parsed into an integer\n+   */\n+  public void set(Span span, @Nullable String value) {\n+    if (value != null) {\n+      span.setAttribute(key(), Long.valueOf(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d1e6040502186f75e2dad973b6ac03c0189246"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d9449333148ed316d2100f1508170d6c4b37a6", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a0d9449333148ed316d2100f1508170d6c4b37a6", "committedDate": "2020-03-07T19:50:36Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b13ae10e05d606ffd5e2598098642b62aa57ba00", "committedDate": "2020-03-07T20:21:07Z", "message": "Renaming to make usage clearer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTc3NzQ1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-370977745", "createdAt": "2020-03-09T08:21:00Z", "commit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyMTowMFrOFzeA3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyNzo1OVrOFzeLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMzQzOQ==", "bodyText": "What about this: We remove this class but instead give LongAttributeSetter two methods:\n\ntrySetParsed(String) which tries to parse the argument and does nothing on failure.\nsetParsedOrRaw(String) which tries to parse the argument and sets the string as-is on failure\n(remove set(String) to avoid accidentally passing a string)\n\nI would think that this is much cleaner than having this IntOrStringAttributeSetter  where it is not clear what set does on failure.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389513439", "createdAt": "2020-03-09T08:21:00Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/IntOrStringAttributeSetter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Defines the behavior for a span attribute with long values which are normally handled as integers\n+ * or strings in most applications.\n+ */\n+@Immutable\n+public class IntOrStringAttributeSetter extends AbstractAttributeSetter<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNjA1Mg==", "bodyText": "I think there is no benefit in having this in the interface. In fact there is a drawback, because it forces as to use (nullable) Long instead of just primitive long. In fact, I'd vote for removing this interface entirely (actually, we could even remove the abstract base class since the achieved code sharing is extremely minimal: We'd write private final String key instead of extends AbstractAttributeSetter<Foo> and this.key = key instead of super(key) and that's about it.)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r389516052", "createdAt": "2020-03-09T08:27:59Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/AttributeSetter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.Nullable;\n+\n+/** Defines the behavior for one attribute definition. */\n+public interface AttributeSetter<T> {\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  String key();\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute or <code>null</code> to remove attribute from span\n+   */\n+  void set(Span span, @Nullable T value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13ae10e05d606ffd5e2598098642b62aa57ba00"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8c9b6c0f4b059947c3372bb5f195ac7c273b6f", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2e8c9b6c0f4b059947c3372bb5f195ac7c273b6f", "committedDate": "2020-03-19T12:15:23Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4086e26aad790690033ae33c2e128935466e48", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1c4086e26aad790690033ae33c2e128935466e48", "committedDate": "2020-03-21T15:15:18Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b7f7bc85f660b89e619c1ed3975bc8aba06dac5a", "committedDate": "2020-03-21T16:38:21Z", "message": "API improvements and cleanup based on PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjI4NTI2", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-379228526", "createdAt": "2020-03-23T08:51:09Z", "commit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1MToxMFrOF57rOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1MToxMFrOF57rOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5MDg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    keys.add(((LongAttributeSetter) attribute).key());\n          \n          \n            \n                    ((LongAttributeSetter) attribute).set(span, 42L);\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, \"42\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, \"BAD\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).trySetParsed(span, null);\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"42\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"BAD\");\n          \n          \n            \n                    ((LongAttributeSetter) attribute).setParsedOrRaw(span, null);\n          \n          \n            \n                    final LongAttributeSetter longAttribute = (LongAttributeSetter) attribute:\n          \n          \n            \n                    keys.add(longAttribute .key());\n          \n          \n            \n                    longAttribute.set(span, 42L);\n          \n          \n            \n                    longAttribute.trySetParsed(span, \"42\");\n          \n          \n            \n                    longAttribute.trySetParsed(span, \"BAD\");\n          \n          \n            \n                    longAttribute.trySetParsed(span, null);\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, \"42\");\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, \"BAD\");\n          \n          \n            \n                    longAttribute.setParsedOrRaw(span, null);\n          \n      \n    \n    \n  \n\nand so on", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r396290872", "createdAt": "2020-03-23T08:51:10Z", "author": {"login": "Oberon00"}, "path": "api/src/test/java/io/opentelemetry/trace/attributes/SemanticAttributesTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Field;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link SemanticAttributes}. */\n+@RunWith(JUnit4.class)\n+public class SemanticAttributesTest {\n+\n+  private Span span;\n+\n+  @Before\n+  public void setUp() {\n+    Tracer tracer = OpenTelemetry.getTracerProvider().get(\"io.telemetry.api\");\n+    span = tracer.spanBuilder(\"junit\").startSpan();\n+  }\n+\n+  @Test\n+  public void shouldEnableSetAttributeOnSpan() throws IllegalAccessException {\n+    Set<String> keys = new HashSet<>();\n+    Field[] fields = SemanticAttributes.class.getFields();\n+    for (int i = 0; i < fields.length; i++) {\n+      Object attribute = fields[i].get(null);\n+      if (attribute instanceof StringAttributeSetter) {\n+        keys.add(((StringAttributeSetter) attribute).key());\n+        ((StringAttributeSetter) attribute).set(span, \"TestValue\");\n+        ((StringAttributeSetter) attribute).set(span, null);\n+      } else if (attribute instanceof LongAttributeSetter) {\n+        keys.add(((LongAttributeSetter) attribute).key());\n+        ((LongAttributeSetter) attribute).set(span, 42L);\n+        ((LongAttributeSetter) attribute).trySetParsed(span, \"42\");\n+        ((LongAttributeSetter) attribute).trySetParsed(span, \"BAD\");\n+        ((LongAttributeSetter) attribute).trySetParsed(span, null);\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"42\");\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, \"BAD\");\n+        ((LongAttributeSetter) attribute).setParsedOrRaw(span, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzg4Njk5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-380388699", "createdAt": "2020-03-24T14:52:55Z", "commit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1Mjo1NVrOF60DuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1NDowOFrOF60HxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDY0OA==", "bodyText": "Do we really need these methods now? I would suggest to stay only with set for the moment until we need these. Same comment applies to all.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397214648", "createdAt": "2020-03-24T14:52:55Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span if provided a parsable boolean else does nothing.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void trySetParsed(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    }\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span to either a boolean if provided string is parsable or\n+   * else the raw string.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void setParsedOrRaw(Span span, String value) {\n+    if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {\n+      span.setAttribute(key(), Boolean.parseBoolean(value));\n+    } else {\n+      span.setAttribute(key(), value);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg==", "bodyText": "why calling this?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397214842", "createdAt": "2020-03-24T14:53:10Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTA0NA==", "bodyText": "Consider to use autovalue.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397215044", "createdAt": "2020-03-24T14:53:24Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTY4NA==", "bodyText": "Consider to use a static factory method create. It is more flexible than the ctor.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397215684", "createdAt": "2020-03-24T14:54:08Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzk0MDgy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-380394082", "createdAt": "2020-03-24T14:58:09Z", "commit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1ODowOVrOF60UmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1ODowOVrOF60UmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODk2OQ==", "bodyText": "Another maybe useful helper would be setToCurrent(boolean) allows users to avoid getting the current Span :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r397218969", "createdAt": "2020-03-24T14:58:09Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();\n+    this.attributeKey = attributeKey;\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   *\n+   * @return the attribute map key\n+   */\n+  public String key() {\n+    return attributeKey;\n+  }\n+\n+  /**\n+   * Sets the attribute on the provided span.\n+   *\n+   * @param span the span to add the attribute to\n+   * @param value the value for this attribute\n+   */\n+  public void set(Span span, boolean value) {\n+    span.setAttribute(key(), value);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c7180714c872b4903a774c449e583599c7ff3e", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/53c7180714c872b4903a774c449e583599c7ff3e", "committedDate": "2020-03-28T14:39:14Z", "message": "Merge branch 'master' into add-semantic-conventions-constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d8aac8f6de159f1695463e84eeee79e1a84a3035", "committedDate": "2020-03-28T19:24:15Z", "message": "Removed methods required by code reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzU5Mzgx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-383359381", "createdAt": "2020-03-28T23:45:45Z", "commit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NTo0NVrOF9NLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NTo0NVrOF9NLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzM3Ng==", "bodyText": "Ping on this one.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399723376", "createdAt": "2020-03-28T23:45:45Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzU5NDYw", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-383359460", "createdAt": "2020-03-28T23:47:36Z", "commit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NzozNlrOF9NL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMzo0NzozNlrOF9NL3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzQ4Ng==", "bodyText": "Make classes final to avoid unexpected inheritance behavior.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r399723486", "createdAt": "2020-03-28T23:47:36Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aac8f6de159f1695463e84eeee79e1a84a3035"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a41c409ecccdfcd08d3a36f359852d70fc51669", "author": {"user": {"login": "kbrockhoff", "name": "Kevin Brockhoff"}}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a41c409ecccdfcd08d3a36f359852d70fc51669", "committedDate": "2020-03-30T12:03:14Z", "message": "Made setter classes final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTE0MTQx", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-383914141", "createdAt": "2020-03-30T14:30:45Z", "commit": {"oid": "2a41c409ecccdfcd08d3a36f359852d70fc51669"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozMDo0NVrOF9smZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozMDo0NVrOF9smZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzODE4MA==", "bodyText": "@kbrockhoff would be nice to fix this (though personally I wouldn't hold up the PR further just because of this superfluous line).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400238180", "createdAt": "2020-03-30T14:30:45Z", "author": {"login": "Oberon00"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjgzMzE0", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#pullrequestreview-384283314", "createdAt": "2020-03-30T22:40:51Z", "commit": {"oid": "2a41c409ecccdfcd08d3a36f359852d70fc51669"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo0MDo1MVrOF9-39A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo0MDo1MVrOF9-39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzNzU4OA==", "bodyText": "Am I looking to a wrong class https://github.com/open-telemetry/opentelemetry-java/pull/758/files#diff-55ba0be6445e26747fa46c33ffaffdaeR39?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/758#discussion_r400537588", "createdAt": "2020-03-30T22:40:51Z", "author": {"login": "bogdandrutu"}, "path": "api/src/main/java/io/opentelemetry/trace/attributes/BooleanAttributeSetter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.attributes;\n+\n+import io.opentelemetry.trace.Span;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Defines the behavior for a span attribute with boolean values. */\n+@Immutable\n+public class BooleanAttributeSetter {\n+\n+  private final String attributeKey;\n+\n+  /**\n+   * Constructs an attribute object.\n+   *\n+   * @param attributeKey the attribute name/key\n+   */\n+  public BooleanAttributeSetter(String attributeKey) {\n+    super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDg0Mg=="}, "originalCommit": {"oid": "b7f7bc85f660b89e619c1ed3975bc8aba06dac5a"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3450, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}