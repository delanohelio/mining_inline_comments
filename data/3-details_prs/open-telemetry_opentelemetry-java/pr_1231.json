{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODE3MTgy", "number": 1231, "title": "Return a wrapped span for SpanData so only the mutable data is copied.", "bodyText": "This is a optimization of the creation of the SpanData implementation.\nmaster benchmark:\nSpanPipelineBenchmark.runThePipeline_05Threads                                   thrpt    5  3352.511 \u00b1  53.533  ops/ms\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.alloc.rate                    thrpt    5  7233.932 \u00b1 138.314  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.alloc.rate.norm               thrpt    5  3400.001 \u00b1   0.001    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Eden_Space           thrpt    5  7310.190 \u00b1 695.826  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Eden_Space.norm      thrpt    5  3435.823 \u00b1 315.746    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Survivor_Space       thrpt    5     0.232 \u00b1   0.327  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt    5     0.109 \u00b1   0.156    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.count                         thrpt    5    79.000            counts\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.time                          thrpt    5    50.000                ms\n\nthis branch benchmark:\nSpanPipelineBenchmark.runThePipeline_05Threads                                   thrpt    5  3980.803 \u00b1 253.972  ops/ms\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.alloc.rate                    thrpt    5  6935.797 \u00b1 455.120  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.alloc.rate.norm               thrpt    5  2744.001 \u00b1   0.001    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Eden_Space           thrpt    5  6984.225 \u00b1 279.329  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Eden_Space.norm      thrpt    5  2763.550 \u00b1 139.847    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Survivor_Space       thrpt    5     0.245 \u00b1   0.330  MB/sec\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.churn.PS_Survivor_Space.norm  thrpt    5     0.097 \u00b1   0.135    B/op\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.count                         thrpt    5    71.000            counts\nSpanPipelineBenchmark.runThePipeline_05Threads:\u00b7gc.time                          thrpt    5    46.000                ms\n\nOr graphically (from a different run):\nHere are the benchmark results from master:\n\nAnd on this branch:", "createdAt": "2020-05-15T21:12:05Z", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231", "merged": true, "mergeCommit": {"oid": "5fdc3d48481980b7bd2933441896d040ab20f480"}, "closed": true, "closedAt": "2020-05-20T19:26:18Z", "author": {"login": "jkwatson"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci7L6VgBqjMzNTM3NTA3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjNwS-gBqjMzNTc4NjM2OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f47669b08678a80990056be5d1646905f52353ca", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f47669b08678a80990056be5d1646905f52353ca", "committedDate": "2020-05-15T20:56:32Z", "message": "Return a wrapped span so only the mutable data is copied."}, "afterCommit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32ceeff2ea0f1b1d6fba01395d89407ba2527418", "committedDate": "2020-05-19T21:16:41Z", "message": "tweak the benchmark a bit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODk0MDEy", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#pullrequestreview-414894012", "createdAt": "2020-05-19T23:33:48Z", "commit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzozMzo0OFrOGX2MNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzozNToyM1rOGX2ONQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODI5Mw==", "bodyText": "Add some events too", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r427658293", "createdAt": "2020-05-19T23:33:48Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanPipelineBenchmark.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanPipelineBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanExporter exporter = new NoOpSpanExporter();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpanProcessor.newBuilder(exporter).build());\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 5)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 5, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void runThePipeline_05Threads() {\n+    doWork();\n+  }\n+\n+  private void doWork() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ==", "bodyText": "Do we need to copy these? Just wrapping in a unmodifiable map should be enough. After the span ends :) before it is needed.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r427658805", "createdAt": "2020-05-19T23:35:23Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class SpanWrapper implements SpanData {\n+  abstract RecordEventsReadableSpan delegate();\n+\n+  abstract List<Link> resolvedLinks();\n+\n+  abstract List<Event> resolvedEvents();\n+\n+  abstract Map<String, AttributeValue> attributes();\n+\n+  abstract int totalAttributeCount();\n+\n+  abstract int totalRecordedEvents();\n+\n+  abstract Status status();\n+\n+  static SpanWrapper create(\n+      RecordEventsReadableSpan delegate,\n+      List<Link> links,\n+      List<Event> events,\n+      Map<String, AttributeValue> attributes,\n+      int totalAttributeCount,\n+      int totalRecordedEvents,\n+      Status status) {\n+    return new AutoValue_SpanWrapper(\n+        delegate,\n+        links,\n+        events,\n+        new HashMap<>(attributes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTMzMTk1", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#pullrequestreview-415533195", "createdAt": "2020-05-20T16:53:35Z", "commit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1MzozNVrOGYVFLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1MzozNVrOGYVFLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NDM5Nw==", "bodyText": "We can do both later. Let's merge it as it is for the moment. I think this is a good start.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428164397", "createdAt": "2020-05-20T16:53:35Z", "author": {"login": "bogdandrutu"}, "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class SpanWrapper implements SpanData {\n+  abstract RecordEventsReadableSpan delegate();\n+\n+  abstract List<Link> resolvedLinks();\n+\n+  abstract List<Event> resolvedEvents();\n+\n+  abstract Map<String, AttributeValue> attributes();\n+\n+  abstract int totalAttributeCount();\n+\n+  abstract int totalRecordedEvents();\n+\n+  abstract Status status();\n+\n+  static SpanWrapper create(\n+      RecordEventsReadableSpan delegate,\n+      List<Link> links,\n+      List<Event> events,\n+      Map<String, AttributeValue> attributes,\n+      int totalAttributeCount,\n+      int totalRecordedEvents,\n+      Status status) {\n+    return new AutoValue_SpanWrapper(\n+        delegate,\n+        links,\n+        events,\n+        new HashMap<>(attributes),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, "originalCommit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTQyNDY5", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#pullrequestreview-415542469", "createdAt": "2020-05-20T17:05:20Z", "commit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc28d955fb4998de8d9f366815d6c4b63e34e455", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc28d955fb4998de8d9f366815d6c4b63e34e455", "committedDate": "2020-05-20T18:49:28Z", "message": "Return a wrapped span so only the mutable data is copied."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1350835f927d13011ff5315d0f96bfe41673423", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c1350835f927d13011ff5315d0f96bfe41673423", "committedDate": "2020-05-20T18:49:28Z", "message": "Add a benchmark for the span pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d4a38520640fc32a022491f6b96a64dcf38dd78", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d4a38520640fc32a022491f6b96a64dcf38dd78", "committedDate": "2020-05-20T18:49:28Z", "message": "tweak the benchmark a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b187b7f841cd347dd28fabc312bc7dd02f545006", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b187b7f841cd347dd28fabc312bc7dd02f545006", "committedDate": "2020-05-20T18:49:28Z", "message": "use unmodifiable wrappers around the collections in the wrapper."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32ceeff2ea0f1b1d6fba01395d89407ba2527418", "committedDate": "2020-05-19T21:16:41Z", "message": "tweak the benchmark a bit"}, "afterCommit": {"oid": "b187b7f841cd347dd28fabc312bc7dd02f545006", "author": {"user": null}, "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b187b7f841cd347dd28fabc312bc7dd02f545006", "committedDate": "2020-05-20T18:49:28Z", "message": "use unmodifiable wrappers around the collections in the wrapper."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2727, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}