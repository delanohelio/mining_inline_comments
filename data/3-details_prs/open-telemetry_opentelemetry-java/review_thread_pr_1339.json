{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTY0OTg5", "number": 1339, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMzozNlrOEGd7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1NjozNlrOEKUNDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE3MTU3OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMzozNlrOGlSIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyMzo0N1rOGlakWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzU0Ng==", "bodyText": "This call is a bit opaque. Is there a more readable way to do this work? Even just a method in this class called something like \"isContextUsable\" would help a lot.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r441747546", "createdAt": "2020-06-17T18:33:36Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of a composite propagator for trace.\n+ */\n+@Immutable\n+public class StackPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  public StackPropagator(HttpTextFormat... propagators) {\n+    this.propagators = propagators;\n+\n+    List<String> fields = new ArrayList<>();\n+    for (HttpTextFormat propagator : propagators) {\n+      fields.addAll(propagator.fields());\n+    }\n+    this.propagatorsFields = Collections.unmodifiableList(fields);\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return propagatorsFields;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      propagators[i].inject(context, carrier, setter);\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      context = propagators[i].extract(context, carrier, getter);\n+      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MTU3Mw==", "bodyText": "We should document that, in general, in absence of any extracted SpanContext in Context we will try the next Propagator, and that should be enough IMO.\nAlso, TracingContextUtils and its getSpanWithoutDefault() are rather well known methods.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r441751573", "createdAt": "2020-06-17T18:40:40Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of a composite propagator for trace.\n+ */\n+@Immutable\n+public class StackPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  public StackPropagator(HttpTextFormat... propagators) {\n+    this.propagators = propagators;\n+\n+    List<String> fields = new ArrayList<>();\n+    for (HttpTextFormat propagator : propagators) {\n+      fields.addAll(propagator.fields());\n+    }\n+    this.propagatorsFields = Collections.unmodifiableList(fields);\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return propagatorsFields;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      propagators[i].inject(context, carrier, setter);\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      context = propagators[i].extract(context, carrier, getter);\n+      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzU0Ng=="}, "originalCommit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1ODk4MA==", "bodyText": "Well, it took my brain a couple of careful looks at it to understand what you were doing. So, having a clearly named method that explains that would help reduce the cognitive overhead of reading the code. :)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r441758980", "createdAt": "2020-06-17T18:50:55Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of a composite propagator for trace.\n+ */\n+@Immutable\n+public class StackPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  public StackPropagator(HttpTextFormat... propagators) {\n+    this.propagators = propagators;\n+\n+    List<String> fields = new ArrayList<>();\n+    for (HttpTextFormat propagator : propagators) {\n+      fields.addAll(propagator.fields());\n+    }\n+    this.propagatorsFields = Collections.unmodifiableList(fields);\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return propagatorsFields;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      propagators[i].inject(context, carrier, setter);\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      context = propagators[i].extract(context, carrier, getter);\n+      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzU0Ng=="}, "originalCommit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NTc4NQ==", "bodyText": "Fair enough, lets do that.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r441885785", "createdAt": "2020-06-17T23:23:47Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackPropagator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Implementation of a composite propagator for trace.\n+ */\n+@Immutable\n+public class StackPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  public StackPropagator(HttpTextFormat... propagators) {\n+    this.propagators = propagators;\n+\n+    List<String> fields = new ArrayList<>();\n+    for (HttpTextFormat propagator : propagators) {\n+      fields.addAll(propagator.fields());\n+    }\n+    this.propagatorsFields = Collections.unmodifiableList(fields);\n+  }\n+\n+  @Override\n+  public List<String> fields() {\n+    return propagatorsFields;\n+  }\n+\n+  @Override\n+  public <C> void inject(Context context, C carrier, Setter<C> setter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      propagators[i].inject(context, carrier, setter);\n+    }\n+  }\n+\n+  @Override\n+  public <C> Context extract(Context context, C carrier, Getter<C> getter) {\n+    for (int i = 0; i < propagators.length; i++) {\n+      context = propagators[i].extract(context, carrier, getter);\n+      if (TracingContextUtils.getSpanWithoutDefault(context) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzU0Ng=="}, "originalCommit": {"oid": "84a61f79f421c2c094f31dda994b3b29012053a8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjU2MjYzOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0NjowM1rOGo-Jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1MTozMVrOGpA_kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNDQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * intendended for backwards compatibility with existing services using different formats. It works\n          \n          \n            \n             * intended for compatibility with existing services using different formats. It works\n          \n      \n    \n    \n  \n\nDon't see any reason for a propagator to pick sides in what's backwards or forwards compatibility.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445614443", "createdAt": "2020-06-25T14:46:03Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MDYwMA==", "bodyText": "It's the rationale on why this can propagator can be used. I'd rather leave it in place.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445660600", "createdAt": "2020-06-25T15:50:52Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNDQ0Mw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MTA3Mg==", "bodyText": "Oh never mind, I thought you wanted to remove the compatibility word ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445661072", "createdAt": "2020-06-25T15:51:31Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNDQ0Mw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjU3MzU0OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0ODoyNFrOGo-QZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTozNTo1MVrOGpdoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ==", "bodyText": "Why start from the last instead of the first? Seems more intuitive to just go in order.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445616231", "createdAt": "2020-06-25T14:48:24Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNzI4Nw==", "bodyText": "In particular, I think it's a huge problem that this class is called \"StackTrace Propagator\" :P I'd take the easiest way out of removing this conflict with a common programming term and just go in order.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445617287", "createdAt": "2020-06-25T14:49:52Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTcyMA==", "bodyText": "Agree with this. I don't see any reason to go in a stack-like order; it'll be much clearer is just to go in order, like @anuraaga suggests.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445629720", "createdAt": "2020-06-25T15:06:18Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2NTIxNg==", "bodyText": "This is based on prior art (also, see #1273 ) but I'm free to change that if we all agree that we want simple linear usage.\ncc @pavolloffay", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445665216", "createdAt": "2020-06-25T15:57:35Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkyODY1NA==", "bodyText": "+1 to simple linear order", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445928654", "createdAt": "2020-06-26T01:56:57Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NjAyOQ==", "bodyText": "One observation is this is about how to set propagation order for a Java developer. It seems like this doesn't really need a spec but could be left up to the language? FIFO, LIFO, it may be idiomatic one way or another in different languages. In Java, I think going in-order is idiomatic, we have some famous examples like servlet filter chain. But I can also imagine a function language may use something like b3(w3c) which could be an idiomatic way of expressing the w3c, then b3, order in that language. Environment variables, being a non-programming concept, do make more sense for a spec though.\nJust a thought.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445956029", "createdAt": "2020-06-26T04:04:38Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzMDM3Mw==", "bodyText": "Actually I'd like this to be in the spec, but it might take a little bit of time before we can have it there (if we actually manage to have it there).\nI'm not familiar with servlet filter, but is it something that traverses all components, or can it stop right away upon a successful operation? If that's latter, that can help us go forward with this approach (always, we can go linear and change it later on).\nFor the sake of this PR, I will change to name to TraceMultiPropagator now, while we wait for feedback.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r446130373", "createdAt": "2020-06-26T11:35:51Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjIzMQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYyMzA2OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo1OTowNlrOGo-vzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0OTo1NFrOGpA7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDI3MQ==", "bodyText": "I think calling this stack trace will confuse many people. How about StackedTracePropagator, or TraceMultiPropagator or CompoundPropagator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445624271", "createdAt": "2020-06-25T14:59:06Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = StackTracePropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class StackTracePropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNzU0MA==", "bodyText": "Yup :P Composite is pretty common I think too. Either way, I think the options open up if we don't go in reverse order, which from what I can tell doesn't seem to be that important.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445627540", "createdAt": "2020-06-25T15:03:19Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = StackTracePropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class StackTracePropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDI3MQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzNzA0MQ==", "bodyText": "Ah also remembered we have multispanprocessor. So MultiPropagator would be consistent for this codebase.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445637041", "createdAt": "2020-06-25T15:16:36Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = StackTracePropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class StackTracePropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDI3MQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1OTkyMw==", "bodyText": "CompoundPropagator is too generic. StackedTracePropagator sounds great to me if we keep the stack-alike behavior, but TraceMultiPropagator would work if we go the simple-linear behavior.\nMultiPropagator is not a good name IMHO as we don't really work on all propagators for extraction (we stop as soon as one properly extracts a SpanContext).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445659923", "createdAt": "2020-06-25T15:49:54Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/StackTracePropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = StackTracePropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class StackTracePropagator implements HttpTextFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNDI3MQ=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjYzMTUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMDo0N1rOGo-1Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTo0Mzo0NVrOGpRIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw==", "bodyText": "Can we change it so propagator work on SpanContext? Is there a reason we use Context and copy all this logic into every propagator?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445625607", "createdAt": "2020-06-25T15:00:47Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzMDk3MQ==", "bodyText": "I think this arose from the desire to keep context propagation as a separate concern from tracing. I think, looking back on it now, that this might have been a goal that's more academic than useful for end users.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445630971", "createdAt": "2020-06-25T15:08:02Z", "author": {"login": "jkwatson"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MTg1NA==", "bodyText": "I think this arose from the desire to keep context propagation as a separate concern from tracing.\n\nThis is the case.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445661854", "createdAt": "2020-06-25T15:52:47Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2ODU4Ng==", "bodyText": "Doesn't have to be this PR but recommend revisit this. The propagators are in a package called trace so decoupling from tracing doesn't seem to make much sense, or otherwise the package is wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445668586", "createdAt": "2020-06-25T16:02:33Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3MzIwNg==", "bodyText": "Please open an issue if you think this is important and the reasons. Personally I think there's no problem, but I might be losing some angle ;) (also, see the linked issue).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445673206", "createdAt": "2020-06-25T16:09:39Z", "author": {"login": "carlosalberto"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkyNTUwNg==", "bodyText": "Thanks will discuss this separately, you're right it doesn't need to be taken care of here.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r445925506", "createdAt": "2020-06-26T01:43:45Z", "author": {"login": "anuraaga"}, "path": "api/src/main/java/io/opentelemetry/trace/propagation/HttpTraceContext.java", "diffHunk": "@@ -125,6 +125,10 @@\n     checkNotNull(getter, \"getter\");\n \n     SpanContext spanContext = extractImpl(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNTYwNw=="}, "originalCommit": {"oid": "c3d866a4b1ed957a2f4c9dde7d35b1dc6927117f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTg4NTEyOnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTo1NTo1M1rOGrMObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMToyNjozOFrOGrTwuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MjI1Mw==", "bodyText": "can you add unit test cases for this new behavior, for each of the propagators that's changed?", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r447942253", "createdAt": "2020-06-30T19:55:53Z", "author": {"login": "jkwatson"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -110,6 +110,9 @@\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NTcyMA==", "bodyText": "Oh my, didn't realize I hadn't written those ones yet. Will do super early tomorrow.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448065720", "createdAt": "2020-07-01T01:26:38Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/JaegerPropagator.java", "diffHunk": "@@ -110,6 +110,9 @@\n     Objects.requireNonNull(getter, \"getter\");\n \n     SpanContext spanContext = getSpanContextFromHeader(carrier, getter);\n+    if (!spanContext.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MjI1Mw=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjUyMjM5OnYy", "diffSide": "RIGHT", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzo1NjozNlrOGrSViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjo1NDo0MVrOGr32DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ==", "bodyText": "Should we validate if fields are duped? Or does it not matter? Mainly wondering whether it's ok for this list to have dupes.", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448042379", "createdAt": "2020-06-30T23:56:36Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NzYyOQ==", "bodyText": "Still not clear how to proceed here (we have a similar case for the base CompositePropagator in context-prop). I will fill an issue for that before merging this PR.\n(My gut feeling is that we should de-dup them at ctor time).", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448057629", "createdAt": "2020-07-01T00:54:31Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzMTMxNg==", "bodyText": "If you can add a TODO to the issue here would be nice", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448431316", "createdAt": "2020-07-01T15:09:44Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDMwNg==", "bodyText": "An issue is even better ;) #1388", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448440306", "createdAt": "2020-07-01T15:23:19Z", "author": {"login": "carlosalberto"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1NjkwOQ==", "bodyText": "Meant it'd be good to link to that issue here with a code TODO - reduces chance of the issue just sitting in the backlog if it distracts in the code ;)", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1339#discussion_r448656909", "createdAt": "2020-07-01T22:54:41Z", "author": {"login": "anuraaga"}, "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/TraceMultiPropagator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * A propagator designed to inject and extract multiple trace {@code HttpTextFormat} propagators,\n+ * intendended for backwards compatibility with existing services using different formats. It works\n+ * in a stack-fashion, starting with the last registered propagator, to the first one.\n+ *\n+ * <p>Upon injection, this propagator invokes {@code HttpTextFormat#inject()} for every registered\n+ * trace propagator. This will result in the carrier containing all the registered formats.\n+ *\n+ * <p>Upon extraction, this propagator invokes {@code HttpTextFormat#extract()} for every registered\n+ * trace propagator, returning immediately when a successful extraction happened.\n+ *\n+ * <pre>{@code\n+ * HttpTextFormat traceFormats = TraceMultiPropagator.builder()\n+ *   .addPropagator(new MyCustomTracePropagator())\n+ *   .addPropagator(new JaegerPropagator())\n+ *   .addPropagator(new HttpTraceContext())\n+ *   .build();\n+ * // Register it in the global propagators:\n+ * OpenTelemetry.setPropagators(\n+ *     DefaultContextPropagators.builder()\n+ *       .addHttpTextFormat(traceFormats)\n+ *       .build());\n+ * ...\n+ * // Extraction will be performed in reverse  order, i.e. starting with the last\n+ * // registered propagator (HttpTraceContext in this example).\n+ * Context context = OpenTelemetry.getPropagators().getHttpTextFormat()\n+ *   .extract(context, carrier, carrierGetter);\n+ * }</pre>\n+ *\n+ * @since 0.6.0\n+ */\n+@Immutable\n+public class TraceMultiPropagator implements HttpTextFormat {\n+  private final HttpTextFormat[] propagators;\n+  private final List<String> propagatorsFields;\n+\n+  private TraceMultiPropagator(List<HttpTextFormat> propagatorList) {\n+    this.propagators = new HttpTextFormat[propagatorList.size()];\n+    propagatorList.toArray(this.propagators);\n+\n+    List<String> fields = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MjM3OQ=="}, "originalCommit": {"oid": "00bfcacc82e9670185cecd107d8729fb5e2bc952"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1435, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}